/*--------------------------------------------------------------*/
/*| by  Darko; scripting since 10/08/2017 |*/
/*--------------------------------------------------------------*/



/*
* Finish changeling character sheet
* Add changeling merits/flaws

What i need to do:


Advisor-adding Arts/Realms dialogs [done]
--> Arts dialog [done]
--> Realms not needed (/tedit)
Merits Flaws [done]
Freebie Costs 
--> freebie buying dialog of ARTS [done]
--> freebie buying dealing with Realms [done]
--> Glamour being bought with freebies [done]
Experience Costs
--> experience cost for upgrading ARTS [done]
--> experience cost for upgrading Realms [done]
Utility
--> script in Glamour like Rage (regenerated like Willpower) [tba]
--> script in Banality like Paradox [tba]



Temper = Banality + Willpower + Glamour
When you create a character, you assign her Temper ratings. 
These are based on her seeming and any freebie points spent on 
the Trait. The character’s Willpower and Glamour pools start 
with points equal to the rating; Banality starts with an empty 
pool. A Temper’s rating and pool can both fluctuate in play, but 
the rating only changes in response to very significant events, 
while the pool changes much more often.

need to understand how this works (sin, cos, tan) to be able to make the wolf looks at me properly when attacking 
stock GetXYZInFrontOfPlayer(playerid, &Float:x, &Float:y, &Float:z, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid))
	{
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

*/


/* CS SHEET types
* 	type 1 - main POWER | i.e. discipline for vamps, gifts for werewolves, edges for hunters, arts for changelings, numina for humans
*	type 2 - backgrounds
*	type 3 - secondary power | i.e., hunter's virtues (i.e., mercy), changeling's Realms, etc
* 	type 4 - secondary traits
*	type 9 - /cs building trait (like FreshCS, sArts, sLore, etc..)
*/

/* RCON COMMANDS
/makeadmin
/hungerbar 
/form (= /assumeform)
/emptyflight (for debugging flight mode)
/edito 
/tw (debugging /mw script-sided guns)
/hackwep (spawning an actualyl hacked gun, anti cheat bans you if you use this)
/callmydeath
/gotocar
/crash (might bug your account; script-sided crashing)
/createobject (for creating static objects, just use /maphelp commands instead)
/getobject (get a static object to you, just use /maphelp commands instead)
/destroy (destroy [any] static object, just use /maphelp commands instead)
/edit (editing static objects)
/editdynamic (edit dynamic objects, this is like /oedit)
/exportobject (just spawns an object and /editdynamic it at the same time)
/attacho (attach an object to a car)
/pos (get and save your x,y,z in a script-compatibile format; you wont actually see anything)
/posa (get and save your x,y,z,angle in a script-compatible format; it gets saved to the server files; you wont actually see anything)
[i.e., you can /posa the steps that a deer take and ill be able to change the deer location]
/savepos (get and save your x,y,z,interior in a script-compatible format; it gets saved to the server files; you wont actually see anything)
/getdataid (get a car's database id)
/fdelete
/dchangetime (reset your drug withdrawal time)
/makemecourier (temporarily gives you the courier job)
/fastcd (resets your courier job's cooldown)
/setweather (equivalent of /rcon weather; just sets the weather to something else; this doesn't change the weather in the scripted weather system; just changes the weather that people see)
/temperature (calls the function that re-calculates the weather-temperature system algorithim) [there's a scripted weather system and temperature system, but these have no visuals to players yet]
/pickupmake (creates non-removable pickups, for debugging; to remove server needs to restart)
/passminute (passes a minute, for example /passminute 60 instantly calls a paycheck)
/paycheckpayment (set up your paycheck payment)
*/

/* CUSTOM INTERIORS
*
/gotopos 1337.650146 1842.355468 11.740307 1 0
/gotopos 1326.640869 1790.359741 9.510309 2 0
/gotopos 2510.912597 -1722.675292 778.477050
/gotopos 1627.513549 1365.970825 9.406631 1 0
/gotopos 1309.316040 1367.313964 9.510304 4 0
/gotopos 1548.417968 1845.834594 9.890314 4 0
/gotopos 1905.099975 -2419.050048 14.395051 2 0
/gotopos -1680.805908 -219.733433 13.538437 0 0 
/gotopos 1514.024780 1172.315747 9.730303 0 0 
/gotopos 1535.14 -1104.58 181.92 0 0 
/gotopos -1540.512817 -247.642303 12.742191 0 0 
/gotopos 1585.83 1479.84 10.91 0 0
/gotopos -1677.017211 -396.869873 13.168438 0 0
/gotopos 1436.535767 1581.725586 9.752980 0 0 
/gotopos 1443.36 1588.05 14.27 0 0
/gotopos 1449.13 1224.43 14.43 0 0
/gotopos -1251.71 -63.16 14.28 1 0
/gotopos -1259.14 -19.63 14.29 1 0
/gotopos 1297.10 1292.65 11.08 4 0
/gotopos 1327.82 1783.87 10.91 3 0
/gotopos 1899.548339 -2427.645019 12.479107 1 1

Electronics Store
/gotopos 1338.650146 1843.355468 11.740307 1 0
Bank
/gotopos 1327.640869 1791.359741 10.610309 2 0
Trailer (House)
/gotopos 2510.912597 -1722.675292 778.477050 1 0
Fort Carson SD
/gotopos 1305.316040 1365.313964 12.510304 4 0
Fort Carson Bar
/gotopos 1905.099975 -2419.050048 14.395051 2 0 can't be set as interior
/gotopos 1899.548339 -2427.645019 13.479107 1 1this one actually works
Butchery
/gotopos -1680.805908 -219.733433 13.538437 0 0 
Club
/gotopos 1514.024780 1172.315747 9.730303 0 0
Cool Apartment
/gotopos 1535.14 -1104.58 181.92 0 0
DMV
/gotopos -1540.512817 -247.642303 13.742191 0 0
Fire Station
/gotopos 1585.83 1479.84 10.91 0 0
House
/gotopos -1677.017211 -396.869873 14.168438 0 0
Bullshit interior
/gotopos 1436.535767 1581.725586 9.752980 0 0
Messy Office
/gotopos 1443.36 1588.05 14.27 0 0
Drug House
/gotopos 1449.13 1224.43 14.43 1 0
Hotel Room
/gotopos -1251.71 -63.16 14.28 1 0
Shitty Apartment
/gotopos -1259.14 -19.63 14.29 1 0
Police Station
/gotopos 1297.10 1292.65 11.08 4 0
Garage
/gotopos 1327.82 1783.87 10.91 3 0 
*/

#include <a_samp>
#include <sscanf2>
#include <easydialog>
#include <zcmd>
#include <streamer>
#include <progress2>
#include <foreach>
#include <a_http>
#include <airbreak>

#undef MAX_PLAYERS
#undef MAX_VEHICLES
// Main Server Definitions
#define SERVERNAME "Dillimore Stories"
#define GAMEMODENAME "DS:RP v1.0.5"
#define MAX_PLAYERS 30
#define MAX_VEHICLES 1000
#define MAX_MASK_USAGE 5
#define SET_DISTANCE 2500
#define MSG SendClientMessage
#define MAX_ZONES 1
#define MAX_BUSINESS 100
#define MAX_HOUSE 750
#define MAX_GARAGES 301
#define MAX_PROPS 501
#define MAX_DOORS 500
#define MAX_OBJ 1000
#define MAX_PLANTS 100
#define MAX_IEDS 100
#define MAX_LABELS 500
#define MAX_FACTIONS 25 // 5 faction slots
#define MAX_CORPSE 100
#define MAX_DROPPED_WEAPONS 500
#define MAX_ATTACHMENTS 3 // +3 if donator
#define DEFAULT_TRUNK_SLOTS 20
#define MAX_TRAIT_NAME 48
#define ROLEPLAY_ITEM -1
#define MAX_TREES 300

#define CUSTOM_SKIN_START 20001
#define CUSTOM_SKIN_END 20060
#define CUSTOM_POLICESKIN_START 20900
#define CUSTOM_POLICESKIN_END 20921
#define ANIMAL_SKIN_START 21003
#define ANIMAL_SKIN_END 21018
#define BIRD_SKIN_START 21019
#define BIRD_SKIN_END 21021

// cause of death
#define COD_GUNSHOT 1
#define COD_OVERDOSE 2
#define COD_SUNBURN 3
//
#define WingX 0.017999
#define WingY -0.140000
#define WingZ -0.017000
#define WingRX 0
#define WingRY 88.299995
#define WingRZ 0
#define WingSX 1.424999
#define WingSY 2.568999
#define WingSZ 1.218000

// First Spawn Point
#define SPAWNPOINT 671.3501,-519.6628,16.3359,222.8138
#define SPAWNPOINTNAME "Dillimore"

// Second Spawn Point
#define SPAWNPOINT2 689.4992,-681.6238,16.2670,2.9247
#define SPAWNPOINT2NAME "Dillimore"

// Scrap Yard for Cars Dumping
#define SCRAP_YARD 90.3589,-303.6151,1.5781

// Default spawn; dissected into 4 (string) definitions for compatibility, normally equal to the [motel] default spawn point
#define SPAWNX "671.3501" // 2
#define SPAWNY "-519.6628" // 6
#define SPAWNZ "16.3359" // 9
#define SPAWNANGLE "222.8138"

// Respawn point (/respawn)
#define RESPAWN_X 671.3501
#define RESPAWN_Y -519.6628
#define RESPAWN_Z 16.3359

// Jefferson (string) (removed)
// Fort Carson Entrance 
#define jSPAWNX "689.4992"
#define jSPAWNY "-681.6238"
#define jSPAWNZ "16.2670"
#define jSPAWNANGLE "2.9247"

//#define MAX_INV 11

#define JOB_COURIER 1
#define JOB_WH 2
#define JOB_PB 3
#define JOB_MECH 4
#define JOB_BIZ 5
#define JOB_BW 6

// Sidejobs
#define JOB_SWEEPER 1
#define JOB_MOWNER 2
#define JOB_FISH 3
#define Z_MODIFIER 0.7
#define Z_MODIFIER_MOW 2

// GetVehicleType
#define CAR 0
#define BIKE 1
#define MOTORBIKE 2
#define BOAT 3
#define PLANE 4
#define RC 5
#define TRAIN 6
#define TRAILER 7
#define HELICOPTER 8

// Faction Types
#define PD 1
#define ILLEGAL 2
#define LEGAL 3
#define MEDICAL 4

// Kiosk for cops
#define KIOSK 255.2135,76.9208,1003.6406

// Arrest location and interior ID
#define ARRESTLOC 1306.5383,1359.6550,11.0103 
#define ARRESTINT 6

//-----

#define CourierJob 46.1583,-275.2351,1.8416//2726.6711,-2491.4458,13.6538
#define WHOperative 2758.6707,-2380.4084,13.6328
#define DELIVERTO 2757.306152,-2530.741943,13.401706
#define PizzaboyPick 2126.296142,-1798.807739,13.554687
#define SWEEPER 2191.619873,-1971.520019,13.559927
#define MOWNER 1878.256835,-1151.185668,23.916124
#define BUS 1763.4695,-1904.2047,13.5663//2399.8882,-2090.3818,13.5538

#define TRUCK_SPAWN 51.5910,-286.0013,1.7127//2728.6768,-2504.0430,13.4869
#define BUS_SPAWN 1782.0221,-1906.9248,13.3908//2392.4849,-2095.6516,13.5538
#define PB_SPAWN 2118.816894,-1784.281616,13.387372
#define SWEEPER_SPAWN 2196.983398,-1977.053344,13.558617
#define MOWNER_SPAWN 1879.712890,-1158.191284,23.933933

// Custom Weapon IDs
#define WEAPON_RADAR 100
#define WEAPON_LAUNCHER 101
#define WEAPON_HUNTING_RIFLE 102

// Smuggler
#define REGULAR_DEALER 7143
#define FACTION_DEALER 3417

// Fish selling spot (actual fishing spot is in an array called FishingSpots)
#define FISHING_SELLPOS 709.0492,-613.8135,16.3359
#define FISHING_RANGE 12

// HOLDING(keys)
#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))
// RELEASED(keys)
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define ADMINLVL_STORYTELLER -1
#define IsStoryteller(%0) (User[%0][Useradmin] == ADMINLVL_STORYTELLER)
/*--------------------------------------------------------------*/
// Main variables
new Iterator:Houses<MAX_HOUSE>;
new Iterator:Biz<MAX_BUSINESS>;
new Iterator:Props<MAX_PROPS>;
new Iterator:Garages<MAX_GARAGES>;
new Iterator:Doors<MAX_DOORS>;
new Iterator:Weapons<MAX_DROPPED_WEAPONS>;
new Iterator:Plants<MAX_PLANTS>;
new Iterator:itIED<MAX_IEDS>;
new Iterator:Corpses<MAX_CORPSE>;
new Iterator:Objects<MAX_OBJ>;
new Iterator:Trees<MAX_TREES>;
new Iterator:NPCs<MAX_ACTORS>;
new Iterator:Labels<MAX_LABELS>;
new day_condition;
new DayTimer;
new NightTimer;
new secspassed;
new minspassed;
new hourspassed;
new moon_phase[64];
new moon_age[10];

new DB:Database;
new Text:inventory_box;
new PlayerText:inventory_header[MAX_PLAYERS];
new PlayerText:invslot[MAX_PLAYERS][10];
new PlayerText:tLabel[MAX_PLAYERS];
new PlayerText:tHLevel[MAX_PLAYERS];

new Text:serverhud;
new PlayerText:deathtext[MAX_PLAYERS];
new TruckTimer[MAX_PLAYERS];
new ShowTimer[MAX_PLAYERS];
new BreakingTimer[MAX_PLAYERS];
new InvisTimer[MAX_PLAYERS];
new Text:weathertext;
new Text:temperaturetext;
// new Text:Servertag;
new Text:warning;
new Text:LightsOff;
new Text:ShowFrame;
new CourierPick;
new BusPick;
new WHPick;
new PizzaPick;
new SweepPick;
new MownerPick;
new PlayerBar: gBar;
new PlayerBar: bHealth;
new PlayerBar: bHunger;
new PlayerBar: bThirst;
new bool:AdminVeh[MAX_VEHICLES];
new PlayerText:ShowSkin[MAX_PLAYERS];
new Text:speedometer;
new PlayerText:vspeed[MAX_PLAYERS];
new PlayerText:vfuel[MAX_PLAYERS];
new IndexPicked[MAX_PLAYERS]; 
new AttachPicked[MAX_PLAYERS]; 
new ModelPicked[MAX_PLAYERS];
new Text:gRedScreen = Text:INVALID_TEXT_DRAW;
new Text:gGreenScreen = Text:INVALID_TEXT_DRAW;
new wUnique[200]; // 3 weapons per cop
#define LARGE_STRING_LENGTH 4095
new large_string[LARGE_STRING_LENGTH];
new DealPurity;
new WeatherCooldown = 0;
new WeaponsCooldown = 0;
new FuelCooldown = 0;
static Menu:mhouse;
static Menu:house_confirm;
static Menu:house_bought_for_owner;
static Menu:house_confirm_sell;
static Menu:house_bought_guest;
static Menu:house_safe;
static Menu:house_upgrades;
static Menu:house_safe_open;
static Menu:house_storage;
static Menu:house_storage_sel;
static Menu:house_storage_sel_take;
static Menu:house_tenants;
static Menu:house_mailbox;

new zones[MAX_ZONES];
// x, y, size
new Float:zones_points_0[] = 
{
	2354.0, -649.0, 250.0
};
new BusinessID[MAX_PLAYERS]; // ASSOCIATED WITH /business buy
/*--------------------------------------------------------------*/
// Color definitions
#define COLOR_LOGGED 0xd9d9d900//0xFFFFFF00
#define COLOR_NOTLOGGED 0x80808000//0x57575700
#define COLOR_BLIP 0xFFFFFFFF
#define YELLOW 0xFFFF00FF
#define DIRTY_YELLOW 0xb3b300FF
#define PMFrom 0xce3befFF
#define PMSent 0xd45defFF
#define RP 0xc2a2daFF


#define cRP 0xa292afFF
#define ADMIN 0x7f7fd4FF
#define ADMN "{7F7FD4}"
#define RED 0xAA3333AA
#define BEIGE 0xf5f5dcFF
#define WHITE 0xFFFFFFAA
#define SOLIDWHITE 0xFFFFFFFF
#define GREEN 0x66b266FF//0x38FF06FF
#define CFAC 0x16F8FFFF//0x7a86efFF//0x4152eaFF
#define RADIO 0xa8c468FF
#define DRADIO 0x96b847FF//759038FF//0x4250f4FF
#define DRAW_DISTANCE 15
#define LABEL_DRAW_DISTANCE 30
#define Y "{FFFF00}"
#define G "{66b266}"//green{38FF06}"
#define W "{FFFFFF}" //white
#define R "{f4c542}" // gold
#define BL "{486ee2}" // blue
#define GR "{BFC0C2}"//GR "{BFC0C2}" // GRAD2
#define GR4 "{8C8C8C}" // GRAD4
#define D "{a9c4e4}" // DIALOG COLOR
#define LB "{00b8ff}"//"{00FFCC}" //
#define RR "{AA3333}" // pink-like
#define MAR "{930404}" // maroon
#define DEMON "{3a3887}"
#define CHANGELING "{0085b2}"
#define LW "{E6E6E6}" // grad 1
#define WR "{862b22}" // werewolf
#define MAGE "{9400D3}" // mage
#define HUNTER "{8b9c49}" // hn
#define dRP "{a292af}"
#define WEREWOLF 0x862b22FF
#define GRAD1 0xE6E6E6E6//0xdbd4d4FF
#define GRAD2 0xC8C8C8C8//0xBFC0C2FF
#define GRAD3 0xAAAAAAAA//0xCBCCCEFF
#define GRAD4 0x8C8C8C8C//0xD8D8D8FF
#define GRAD5 0x6E6E6E6E//0xE3E3E3FF
#define LIGHTBLUE 0x00b8ffFF
#define MAROON 0x930404FF
#define HEIGHTENED 0xeeeeeeFF
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define Default 0xBFC0C2FF
#define MASK_COLOR 0xAAAAAAFF
#define GOLD 0xf4c542FF
#define WAIT_MESSAGE "~h~DON'T FLOOD THE FUNCTION!"//"~w~Please refrain from overdoing the specified function."

// Natives
native gpci(playerid, serial[], len);

/*------------------------------[FORWARDS]--------------------------------*/
forward TowVehicle(playerid,playername[MAX_PLAYER_NAME],vehicleid);
forward GivePlayerDrug(playerid, drug[24], purity, amount);
forward TakePlayerDrug(playerid, drug[24], purity, amount);
forward GetPlayerDrug(playerid, drug, purity);
forward OnGreenFade(playerid);
forward OnFinishMaking(playerid, drug, uid);
forward OnWithdrawal(playerid, unique);
forward gIncreaseHP(playerid, tick); // ticks = how many times its called
forward gIncreaseHunger(playerid, tick);
forward gDecreaseHunger(playerid, tick);
forward gIncreaseThirst(playerid, tick);
forward gDecreaseThirst(playerid, tick);
forward gDecreaseHP(playerid, tick);
forward OnPlayerReceiveLocation(playerid,unique);
forward CallRing(caller,called,times);
forward RotatePreview(playerid,times,whatt);
forward OnTruckDelay(playerid,truckid,iduser);
forward OnPlayerFish(playerid);
forward BreakingHouse(playerid,houseid);
forward OnMailArrive(hmsgg[124], houseid, playerid, uid, backup[]);
forward UpdateSpeedometer(playerid, vehicleid);
forward HideSpeedometer(playerid);
//forward OnTwoMinsPass();
forward OnMinPass();
forward WeatherTimer();
forward KickEx(playerid);
forward SpawnPlayerNow(playerid,point);
forward OnPlayerSpawnComplete(playerid);
forward DestroyObjectNow(objid);
forward UnloadingTruck(playerid,Float:tx,Float:ty,Float:tz);
forward HideWaiting(playerid);
forward DeathBlink(playerid);
forward OnPlayerRise(playerid);
forward PlayerDeath(playerid);
forward SetMarkerInterval(playerwhosees,playerwhoisseen);
forward ProxDetectorS(Float:radi,playerid,targetid);
forward PlayerPlayerActionMessage(playerid,targetid,message[]);
/*-----------------------------------------------------------------*/

stock Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
	return floatadd(floatadd(floatsqroot(floatpower(floatsub(x1,x2),2)),floatsqroot(floatpower(floatsub(y1,y2),2))),floatsqroot(floatpower(floatsub(z1,z2),2)));
}
new aVehicleNames[212][] =
{
	{"Landstalker"},
	{"Bravura"},
	{"Buffalo"},
	{"Linerunner"},
	{"Perrenial"},
	{"Sentinel"},
	{"Dumper"},
	{"Firetruck"},
	{"Trashmaster"},
	{"Stretch"},
	{"Manana"},
	{"Infernus"},
	{"Voodoo"},
	{"Pony"},
	{"Mule"},
	{"Cheetah"},
	{"Ambulance"},
	{"Leviathan"},
	{"Moonbeam"},
	{"Esperanto"},
	{"Taxi"},
	{"Washington"},
	{"Bobcat"},
	{"Mr Whoopee"},
	{"BF Injection"},
	{"Hunter"},
	{"Premier"},
	{"Enforcer"},
	{"Securicar"},
	{"Banshee"},
	{"Predator"},
	{"Bus"},
	{"Rhino"},
	{"Barracks"},
	{"Hotknife"},
	{"Trailer 1"},
	{"Previon"},
	{"Coach"},
	{"Cabbie"},
	{"Stallion"},
	{"Rumpo"},
	{"RC Bandit"},
	{"Romero"},
	{"Packer"},
	{"Monster"},
	{"Admiral"},
	{"Squalo"},
	{"Seasparrow"},
	{"Pizzaboy"},
	{"Tram"},
	{"Trailer 2"},
	{"Turismo"},
	{"Speeder"},
	{"Reefer"},
	{"Tropic"},
	{"Flatbed"},
	{"Yankee"},
	{"Caddy"},
	{"Solair"},
	{"Berkley's RC Van"},
	{"Skimmer"},
	{"PCJ-600"},
	{"Faggio"},
	{"Freeway"},
	{"RC Baron"},
	{"RC Raider"},
	{"Glendale"},
	{"Oceanic"},
	{"Sanchez"},
	{"Sparrow"},
	{"Patriot"},
	{"Quad"},
	{"Coastguard"},
	{"Dinghy"},
	{"Hermes"},
	{"Sabre"},
	{"Rustler"},
	{"ZR-350"},
	{"Walton"},
	{"Regina"},
	{"Comet"},
	{"BMX"},
	{"Burrito"},
	{"Camper"},
	{"Marquis"},
	{"Baggage"},
	{"Dozer"},
	{"Maverick"},
	{"News Chopper"},
	{"Rancher"},
	{"FBI Rancher"},
	{"Virgo"},
	{"Greenwood"},
	{"Jetmax"},
	{"Hotring"},
	{"Sandking"},
	{"Blista Compact"},
	{"Police Maverick"},
	{"Boxville"},
	{"Benson"},
	{"Mesa"},
	{"RC Goblin"},
	{"Hotring Racer A"},
	{"Hotring Racer B"},
	{"Bloodring Banger"},
	{"Rancher"},
	{"Super GT"},
	{"Elegant"},
	{"Journey"},
	{"Bike"},
	{"Mountain Bike"},
	{"Beagle"},
	{"Cropdust"},
	{"Stunt"},
	{"Tanker"},
	{"Roadtrain"},
	{"Nebula"},
	{"Majestic"},
	{"Buccaneer"},
	{"Shamal"},
	{"Hydra"},
	{"FCR-900"},
	{"NRG-500"},
	{"HPV1000"},
	{"Cement Truck"},
	{"Tow Truck"},
	{"Fortune"},
	{"Cadrona"},
	{"FBI Truck"},
	{"Willard"},
	{"Forklift"},
	{"Tractor"},
	{"Combine"},
	{"Feltzer"},
	{"Remington"},
	{"Slamvan"},
	{"Blade"},
	{"Freight"},
	{"Streak"},
	{"Vortex"},
	{"Vincent"},
	{"Bullet"},
	{"Clover"},
	{"Sadler"},
	{"Firetruck LA"},
	{"Hustler"},
	{"Intruder"},
	{"Primo"},
	{"Cargobob"},
	{"Tampa"},
	{"Sunrise"},
	{"Merit"},
	{"Utility"},
	{"Nevada"},
	{"Yosemite"},
	{"Windsor"},
	{"Monster A"},
	{"Monster B"},
	{"Uranus"},
	{"Jester"},
	{"Sultan"},
	{"Stratum"},
	{"Elegy"},
	{"Raindance"},
	{"RC Tiger"},
	{"Flash"},
	{"Tahoma"},
	{"Savanna"},
	{"Bandito"},
	{"Freight Flat"},
	{"Streak Carriage"},
	{"Kart"},
	{"Mower"},
	{"Duneride"},
	{"Sweeper"},
	{"Broadway"},
	{"Tornado"},
	{"AT-400"},
	{"DFT-30"},
	{"Huntley"},
	{"Stafford"},
	{"BF-400"},
	{"Newsvan"},
	{"Tug"},
	{"Trailer 3"},
	{"Emperor"},
	{"Wayfarer"},
	{"Euros"},
	{"Hotdog"},
	{"Club"},
	{"Freight Carriage"},
	{"Trailer 3"},
	{"Andromada"},
	{"Dodo"},
	{"RC Cam"},
	{"Launch"},
	{"Police Car (LSPD)"},
	{"Police Car (SFPD)"},
	{"Police Car (LVPD)"},
	{"Police Ranger"},
	{"Picador"},
	{"S.W.A.T. Van"},
	{"Alpha"},
	{"Phoenix"},
	{"Glendale"},
	{"Sadler"},
	{"Luggage Trailer A"},
	{"Luggage Trailer B"},
	{"Stair Trailer"},
	{"Boxville"},
	{"Farm Plow"},
	{"Utility Trailer"}
};
new sNoEdit[][] =
{
	{"Clan"},
	{"Generation"},
	{"Attributes"},
	{"Physical"},
	{"Mental"},
	{"Social"},
	{"Abilities"},
	{"Talents"},
	{"Skills"},
	{"Knowledges"},
	{"Advantages"},
	{"Virtues"},
	{"Renown"},
	//{"[Other]"},
	{"Experience"}
};

new sTraits[][] =
{
	{"Strength"},
	{"Dexterity"}, 
	{"Stamina"},
	{"Charisma"},
	{"Manipulation"},
	{"Appearance"},
	{"Perception"},
	{"Intelligence"},
	{"Wits"},
	{"Athletics"},
	{"Alertness"},
	{"Awareness"},
	{"Brawl"},
	{"Empathy"},
	{"Expression"},
	{"Intimidation"},
	{"Kenning"},
	{"Intuition"},
	{"Leadership"},
	{"Primal-Urge"},
	{"Streetwise"},
	{"Subterfuge"},
	{"Animal Ken"},
	{"Crafts"},
	{"Drive"},
	{"Etiquette"},
	{"Firearms"},
	{"Larceny"},
	{"Melee"},
	{"Performance"},
	{"Stealth"},
	{"Survival"},
	{"Academics"},
	{"Computer"},
	{"Enigmas"},
	{"Gremayre"},
	{"Finance"},
	{"Investigation"},
	{"Law"},
	{"Lore"},
	{"Linguistics"},
	{"Medicine"},
	{"Occult"},
	{"Rituals"},
	{"Politics"},
	{"Science"},
	{"Technology"},
	{"Conscience/Conviction"},
	{"Self-Control/Instinct"},
	{"Rage"},
	{"Gnosis"},
	{"Courage"},
	{"Humanity/Path"},
	{"Willpower"},
	{"tWillpower"},
	{"Conviction"},
	{"Arete"},
	{"Mercy"},
	{"Zeal"},
	{"Vision"},
	{"Conscience"},
	{"Faith"},
	{"Glamour"},
	{"Actor"},
	{"Fae"},
	{"Nature"},
	{"Prop"},
	{"Scene"},
	{"Time"}
};
new rSpheres[][] = 
{
	{"Correspondence"},
	{"Entropy"},
	{"Forces"},
	{"Life"},
	{"Matter"},
	{"Mind"},
	{"Prime"},
	{"Spirit"},
	{"Time"},
	{"Data"},
	{"Dimensional Science"},
	{"Primal Utility"}
};
new hCreeds[][] = 
{
	{"Innocence", 3},
	{"Martyrdom", 4},
	{"Redemption", 3},
	{"Visionary", 3},
	{"Defense", 3},
	{"Judgment", 3},
	{"Vengeance", 4}
};
new hVirtues[][] =
{
	{"Mercy"},
	{"Vision"},
	{"Zeal"}
};
new rDisciplines[][] =
{
	{"Abombwe"},
	{"Animalism"},
	{"Auspex"},
	{"Bardo"},
	{"Celerity"},
	{"Chimerstry"},
	{"Daimonion"},
	{"Dementation"},
	{"Dominate"},
	{"Flight"},
	{"Fortitude"},
	{"Melpominee"},
	{"Mytherceria"},
	{"Obeah"},
	{"Obfuscate"},
	{"Obtenebration"},
	{"Potence"},
	{"Presence"},
	{"Protean"},
	{"Quietus"},
	{"Sanguinus"},
	{"Serpentis"},
	{"Spiritus"},
	{"Temporis"},
	{"Thanatosis"},
	{"Valeren"},
	{"Vicissitude"},
	{"Visceratika"},
	{"Abyss Mysticism"},
	{"Akhu"},
	{"Thaumaturgical Countermagic"},
	{"Dur-An-Ki"},
	{"Mortis"},
	{"Nahuallotl"},
	{"Necromancy"},
	{"Voudoun"},
	{"Western Necromancy"},
	{"Ogham"},
	{"Sadhana"},
	{"Sihr"},
	{"Thaumaturgy"},
	{"Dark Thaumaturgy"},
	{"Sielanic Thaumaturgy"},
	{"Assamite Sorcery"},
	{"Anarch Sorcery"},
	{"Koldunic Sorcery"},
	{"Setite Sorcery"},
	{"Wanga"},
	{"Deimos"},
	{"Kai"},
	{"Kineticism"},
	{"Maleficia"},
	{"Nihilistics"},
	{"Rift"},
	{"Striga"}
};
new rLores[][] = 
{
	{"Lore of Awakening"},
	{"Lore of the Beast"},	
	{"Lore of the Celestials"},
	{"Lore of Death"},	
	{"Lore of the Earth"},
	{"Lore of the Flames"},	
	{"Lore of the Firmament"},
	{"Lore of the Flesh"},	
	{"Lore of the Forge"},
	{"Lore of the Fundament"},	
	{"Lore of Humanity"},
	{"Lore of Light"},	
	{"Lore of Longing"},
	{"Lore of Paths"},	
	{"Lore of Patterns"},
	{"Lore of Portals"},	
	{"Lore of Radiance"},
	{"Lore of the Realms"},	
	{"Lore of the Spirit"},
	{"Lore of Storms"},	
	{"Lore of Transfiguration"},
	{"Lore of the Wild"},	
	{"Lore of the Winds"}
};
new rRealms[][] = 
{
	{"Actor"},
	{"Fae"},
	{"Nature"},
	{"Prop"},
	{"Scene"},
	{"Time"}
};
new rArts[][] = 
{
	{"Autumn"},
	{"Chicanery"},
	{"Chronos"},
	{"Contract"},
	{"Dragon`s Ire"},
	{"Legerdemain"},
	{"Metamorphosis"},
	{"Naming"},
	{"Oneiromancy"},
	{"Primal"},
	{"Pyretics"},
	{"Skycraft"},
	{"Soothsay"},
	{"Sovereign"},
	{"Spring"},
	{"Summer"},
	{"Wayfare"},
	{"Winter"}
};
new rTalents[][] =
{
	{"Alertness"},
	{"Athletics"},
	{"Awareness"},
	{"Brawl"},
	{"Empathy"},
	{"Expression"},
	{"Intimidation"},
	{"Kenning"},
	{"Intuition"},
	{"Leadership"},
	{"Primal-Urge"},
	{"Streetwise"},
	{"Subterfuge"}
};
new rSkills[][] =
{
	{"Animal Ken"},
	{"Crafts"},
	{"Drive"},
	{"Etiquette"},
	{"Firearms"},
	{"Larceny"},
	{"Melee"},
	{"Performance"},
	{"Stealth"},
	{"Survival"}
};
new rKnowledges[][] =
{
	{"Academics"},
	{"Computer"},
	{"Enigmas"},
	{"Gremayre"},
	{"Finance"},
	{"Investigation"},
	{"Law"},
	{"Linguistics"},
	{"Lore"},
	{"Medicine"},
	{"Occult"},
	{"Rituals"},
	{"Politics"},
	{"Science"},
	{"Technology"}
};
new rVirtues[][] =
{
	{"Conscience/Conviction"},
	{"Self-Control/Instinct"},
	{"Courage"}
};
new dVirtues[][] =
{
	{"Conscience"},
	{"Conviction"},
	{"Courage"}
};
new rollBackgrounds[][] = 
{
	{"Pure Breed"},
	{"Spirit Heritage"},
	{"Alternate Identity"},
	{"Black Hand Membership"},
	{"Past Lives"},
	{"Secret Weapons"}
};
new Float:BusCP[][] =
{
	{1824.309936,-1845.769653,13.514912},
	{1823.994262,-1639.379638,13.483049},
	{1852.133300,-1484.871215,13.476921},
	{1853.724609,-1280.957153,13.487615},
	{1868.743408,-1150.645019,23.821189},
	{1964.364501,-1051.007324,24.313920},
	{2161.352294,-1119.876708,25.487028},
	{2352.877441,-1156.166625,27.362565},
	{2368.159912,-1368.826171,23.945613},
	{2339.975830,-1542.822753,23.934532},
	{2340.375976,-1717.677490,13.461953},
	{2229.928955,-1729.252807,13.492963},
	{2113.812255,-1750.078125,13.506718},
	{2078.931884,-1874.108764,13.447954},
	{1981.429809,-1929.627075,13.483918},
	{1833.716918,-1930.057250,13.483065},
	{1813.349121,-1890.437011,13.511030}

};
new Float:TruckCP[][] =
{
	{2740.5613,-2001.9877,13.5547}, // 0
	{2445.9817,-1422.3333,23.9922}, // 1
	{1241.0105, -2052.6873, 59.9975}, // 2
	{900.8112,-1205.7366,16.9832}, // 3
	{2105.3818,-1888.1149,13.5469}, // 4
	{1337.5663,285.3010,19.5615},
	{-66.7667,-1120.6670,1.0781},
	{2452.7332,-2597.7737,13.6562}
	//2740.5613 -2001.9877 13.5547
	//2445.9817 -1422.3333 23.9922
};
new Float:FishingSpots[][] =
{
	{2941.2188,-2051.7458,3.5480},
	{354.680175,-2088.318847,7.835937},
	{362.273010,-2088.258789,7.835937},
	{367.306976,-2088.193603,7.835937},
	{370.044677,-2088.145751,7.835937},
	{374.900512,-2087.909667,7.835937},
	{383.491271,-2088.161621,7.835937},
	{391.072784,-2088.078125,7.835937},
	{396.272705,-2088.166259,7.835937},
	{398.779693,-2088.100341,7.835937},
	{403.701324,-2087.969238,7.835937},
	{155.033096,-1966.689208,3.773437},
	{-421.7133,1163.6670,1.6769},
	{1398.3240,-286.5357,1.3487} 
};
new Float:PizzaGo[][] =
{
	{2261.607910,-1756.348754,13.546875},
	{2371.298583,-1757.164672,13.547227},
	{2416.759033,-1651.997070,13.546875},
	{2366.904785,-1666.652343,13.546875},
	{2379.370605,-1366.480224,24.000000},
	{2378.962158,-1276.669555,24.000000},
	{2694.151123,-1192.139648,69.428169},
	{2220.497070,-1145.640258,25.794067},
	{1863.945800,-1603.699096,13.539081},
	{1984.456176,-1719.081909,15.968750},
	{2778.946289,-1924.143798,13.539384},
	{2694.325195,-2012.354370,13.554687},
	{2640.558349,-2010.608154,13.554687},
	{1849.628906,-1924.608520,13.546875},
	{1914.309448,-1923.980712,13.546875},
	{1893.344238,-1127.827636,24.309816},
	{1932.408203,-1128.498901,25.745019},
	{2012.691406,-1128.067260,25.158426},
	{2079.380126,-1169.725830,23.836591},
	{2362.672119,-1197.402343,27.601562},
	{2744.983642,-1516.842285,30.453125},
	{1883.636474,-2042.427001,13.390607},
	{1688.400268,-2105.578369,13.546875},
	{1725.032592,-2120.401123,13.546875},
	{1802.797119,-2120.716064,13.554349},
	{1977.453735,-1674.132690,15.968750},
	{2074.364257,-1628.980712,13.546875},
	{2009.695800,-1640.459838,13.546875},
	{2241.739746,-1886.131103,13.546875},
	{2238.663574,-1645.637207,15.485309}
};
new Float:WHouse[][] =
{
	{2781.869628,-2427.664550,13.635108},
	{2781.958496,-2423.407226,13.635087},
	{2789.836914,-2422.930664,13.633163},
	{2789.699218,-2426.968505,13.633196},
	{2786.074462,-2423.618652,13.634081},
	{2786.044189,-2427.094482,13.634089},
	{2794.188964,-2422.694580,13.632101},
	{2794.274169,-2426.770751,13.632080},
	{2799.304931,-2408.684570,13.630850},
	{2799.487548,-2411.850097,13.630805},
	{2794.279785,-2408.444335,13.632078},
	{2785.660644,-2411.987548,13.634182},
	{2793.992187,-2411.988281,13.632148},
	{2781.482666,-2412.687744,13.635203},
	{2781.593261,-2408.335693,13.635176},
	{2781.744384,-2465.592041,13.635139},
	{2781.619873,-2461.612548,13.635169},
	{2781.915771,-2451.362548,13.635098},
	{2781.867431,-2446.827880,13.635109},
	{2789.537597,-2446.288574,13.633235},
	{2789.656250,-2450.052001,13.633207},
	{2790.010986,-2461.267822,13.633120},
	{2790.145263,-2465.529052,13.633088},
	{2795.524169,-2446.984130,13.631774},
	{2795.448974,-2450.036621,13.631793},
	{2781.930175,-2503.554687,13.651638},
	{2781.925537,-2499.932617,13.657435},
	{2781.875732,-2489.442626,13.657496},
	{2781.922363,-2484.735595,13.657439},
	{2789.571777,-2484.735351,13.648099},
	{2789.704101,-2488.473876,13.647938},
	{2790.038330,-2499.059082,13.647530},
	{2790.004882,-2503.372802,13.647571},
	{2795.562744,-2485.560791,13.640785},
	{2796.100097,-2488.117919,13.640129},
	{2799.343017,-2487.526855,13.636169}
};

new Float:fRoute[][] =
{
	{2215.554443,-1957.591308,13.094312},
	{2219.171142,-1924.070312,13.056919},
	{2220.653320,-1872.805297,13.107692},
	{2219.156250,-1774.762695,13.009516},
	{2244.270263,-1735.396240,13.107703},
	{2307.107666,-1735.493896,13.107702}, // INTERSECTION (right side before 10 green)
	{2344.730712,-1719.745605,13.082145}, // INTERSECTION (10 green bottle)
	{2344.650878,-1554.673950,23.561965},
	{2376.037841,-1527.065429,23.553201},
	{2424.262695,-1526.207641,23.561676},
	{2432.706054,-1477.222900,23.552925},
	{2414.395751,-1442.988769,23.555871},
	{2393.680664,-1409.208862,23.560766},
	{2373.058593,-1383.036865,23.582450},
	{2320.216552,-1382.005737,23.588638},
	{2258.498291,-1382.015380,23.564636},
	{2210.342773,-1412.244384,23.552846},
	{2210.386474,-1493.227050,23.542951},
	{2199.353271,-1623.626708,15.645575},
	{2185.150878,-1688.731689,13.371059},
	{2203.705322,-1733.105712,13.133978},
	{2214.788330,-1819.086303,12.920166},
	{2213.897705,-1924.674804,13.070130}
};
new Float:sRoute[][] =
{
	{2215.554443,-1957.591308,13.094312},
	{2219.171142,-1924.070312,13.056919},
	{2220.653320,-1872.805297,13.107692},
	{2219.156250,-1774.762695,13.009516},
	{2244.270263,-1735.396240,13.107703},
	{2307.107666,-1735.493896,13.107702}, // INTERSECTION (right side before 10 green)
	{2373.925048,-1734.828247,13.107965},
	{2411.398925,-1748.580566,13.107798},
	{2411.532958,-1789.457763,13.107900},
	{2411.643798,-1837.722412,13.107639},
	{2411.825439,-1916.847167,13.107764},
	{2411.552978,-1958.426635,13.107905},
	{2371.777587,-1969.751708,13.096777},
	{2316.976074,-1963.736328,13.152340},
	{2294.963867,-1893.482177,13.131727},
	{2189.962646,-1891.832519,13.324399},
	{2111.319335,-1892.436035,13.074334},
	{2079.604736,-1923.782226,13.063729},
	{2018.751831,-1929.811523,13.060020},
	{1963.645385,-1918.308593,13.107745},
	{1963.680786,-1826.587890,13.107645},
	{1964.316040,-1763.418090,13.107670},
	{2048.901611,-1754.805786,13.107719},
	{2130.991210,-1754.145385,13.124473},
	{2193.256103,-1735.941650,13.108830},
	{2213.632568,-1770.448486,13.069129},
	{2213.678710,-1927.583251,13.087218}
};
new Float:MCP[][] =
{
	{1899.026733,-1160.605712,23.767608},
	{1926.938720,-1163.819580,21.718091},
	{1949.048828,-1153.590454,20.958772},
	{1989.818725,-1163.895263,20.337512},
	{2017.791259,-1187.742065,20.165288},
	{2044.205078,-1221.264892,22.640226},
	{2030.612915,-1237.692016,22.022081},
	{1956.638916,-1243.266967,19.398283},
	{1925.078125,-1217.527343,19.277132},
	{1900.733886,-1226.124755,16.166082},
	{1874.953613,-1221.964111,16.817346},
	{1875.126464,-1245.026245,13.503164},
	{1919.839355,-1203.732177,19.448747},
	{2034.008544,-1151.427124,23.091672}
};

new Float:hInteriorRand[][] =
{
	{2317.814697,-1026.725463,1050.217773,9.0},
	{235.419311,1186.684326,1080.257812,3.0},
	{226.748565,1239.886108,1082.140625,2.0},
	{223.036285,1287.124389,1082.140625,1.0},
	{226.327545,1114.371337,1080.993041,5.0},
	{294.997680,1472.256713,1080.257812,15.0},
	{443.163574,509.359741,1001.419494,12.0},
	{446.972686,1397.062133,1084.304687,2.0},
	{226.295425,1114.331787,1080.992919,5.0},
	{261.003143,1284.294311,1080.257812,4.0},
	{24.058275,1340.161010,1084.375000,10.0},
	{221.867416,1140.194702,1082.609375,4.0},
	{2324.356933,-1149.547241,1050.710083,12.0},
	{-260.485015,1456.775756,1084.367187,4.0},
	{23.025396,1403.322998,1084.437011,5.0},
	{234.285232,1063.720581,1084.212280,6.0},
	{-68.864746,1351.196899,1080.210937,6.0},
	{2807.626220,-1174.757202,1025.570312,8.0},
	{2237.607177,-1081.645874,1049.023437,2.0},
	{2365.232421,-1135.598510,1050.882568,8.0},
	{-42.652046,1405.468139,1084.429687,8.0}
};

CMD:exportobject(playerid,params[])
{
				/*CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz,
			worldid = -1, interiorid = -1, playerid = -1,
			Float:streamdistance = STREAMER_OBJECT_SD,
			Float:drawdistance = STREAMER_OBJECT_DD, areaid = -1, priority = 0)*/
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	//printf("{%f,%f,%f},",x,y,z);
	new model = strval(params);
	CreateDynamicObject(model, x, y, z, 0, 0, 0);
	EditDynamicObject(playerid, model);
	MSG(playerid,-1,"!");
	return 1;
}
// for xyz positions
CMD:pos(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	//printf("{%f,%f,%f},",x,y,z);
	new entry[256];
	format(entry, sizeof(entry), "{%f,%f,%f},\r\n",x,y,z);
	new File:hFile;
	hFile = fopen("/Logs/Pos.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
	MSG(playerid,-1,"!!");
	return 1;
}
//For Animal positions
CMD:posa(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	new Float:x,Float:y,Float:z, Float:angle;
	GetPlayerFacingAngle(playerid, angle);
	GetPlayerPos(playerid,x,y,z);
	//printf("{%f,%f,%f},",x,y,z);
	new entry[256];
	format(entry, sizeof(entry), "{%f,%f,%f,%f},\r\n",x,y,z, angle);
	new File:hFile;
	hFile = fopen("/Logs/PosAngle.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
	MSG(playerid,-1,"!!");
	return 1;
}
//  for xyz,int positions
CMD:savepos(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	//printf("{%f,%f,%f},",x,y,z);
	new entry[256];
	format(entry, sizeof(entry), "{%f,%f,%f,%d},\r\n",x,y,z,GetPlayerInterior(playerid));
	new File:hFile;
	hFile = fopen("/Logs/PosInt.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
	MSG(playerid,-1,"!");
	return 1;
}

main()
{
	print("\n------------------------------------------");
	print("\tCopyright 2017-2022 \
	\n\tAli Al-Izaybawee (Darko/Heathen) \
	\n\t Final Nights Roleplay \
	\n\tScripting since 10/08/2017");
	print("--------------------------------------------\n");
}

/*--------------------------------------------------------------------------------------------------------------
gVar 1000 | player on duty
gVar 100001 | extra payment long distance
gVar used on drug/wep/ammo prices when dealing with npc
gVar 231456 | debugging velocity
gVar + dist |  
gVar vehicleid | used with trunks
gVar holds the bank ID when you delete bank acc
gVar holds bank id when you sign in bank
gVar -10000 | when you buy a car ( used with ShowIt )
gVar -10000 | when you buy an attachment ( used with ShowIt )
gVar -10000 | when you buy clothes ( used with ShowIt )
gVar 1 | when you pick clothes


DONATION PACKAGE [5.00 / month] Ryan's
    - Recieves 2 Namechanges (per month)
    - Recieves 2 Agechanges (per month)
    - Ability to own a business and have a job
    - Access to the Premium Chat in-game /dc
    - Additional 3 toy slots
    - Gain extra experience points to drug making
    - Access to vehicle imports (Special vehicles bought with IG cash that are not in dealers)
    - Premium tag on the forums
    - Premium tag on Discord
    - Time taken for breaking into properties are reduced
    - Time taken for breaking into vehicle are reduced
    - Player has increased number of uses for /mask
    - Taxes on properties & vehicles are reduced
    - Advertisements costs are reduced
    - Ability to purchase full kevlar vests from the gun market (100ARMOR)
	- have a benefit of no cd on all jobs
	- get extra $50 when they finish any job
	- dont have to wait when they quit job
	- can have a maximum of 5 cars (regular players 3)
	- not lose jacket slot on death
	- 1 bank account per 5 levels (normally: 1 bank account per 10 levels)
	
scripted one:
- Ability to own a business and have a job
- Access to the Premium Chat in-game /dc
- Additional 3 toy slots
- Gain extra experience points to drug making
- Access to vehicle imports (Special vehicles bought with IG cash that are not in dealers)
- Premium tag on the forums
- Premium tag on Discord
- Time taken for breaking into properties are reduced
- Time taken for breaking into vehicle are reduced
- Player has increased number of uses for /mask
- Taxes on properties & vehicles are reduced
- have a benefit of no cd on all jobs
- get extra $50 when they finish any job
- dont have to wait when they quit job
- can have a maximum of 5 cars (regular players 3)
- not lose jacket slot on death
- 1 bank account per 5 levels (normally: 1 bank account per 10 levels)
--------------------------------------------------------------------------------------------------------------*/
enum USER_DATA
{
    UserID,
	UserXP,
	MainAccount,
	Text3D:UserTag,
    Username[MAX_PLAYER_NAME],
	pUsername[MAX_PLAYER_NAME],
    Userpass[42],
    Userconfirmpass[42],
    Useradmin,
	Userrace,
	bool:AllowRconLogin,
	bool:Logged,
	uSkin,
	uMoney,
	uGender,
	bool:Spawned,
	bool:NotNew,
	Float:px,
	Float:py,
	Float:pz,
	donator[21],
	BusinessIN,
	BusinessINType,
	HouseIN,
	PropIN,
	JobCD,
	uJob,
	uCourier[3], // [0] = job level, [1] = job xp, [2] = cooldown
	uWH[3],// [0] = job level, [1] = job xp, [2] = cooldown
	uPB[3], // // [0] = job level, [1] = job xp, [2] = cooldown
	uSW[3], // // [0] = job level, [1] = job xp, [2] = cooldown
	uMW[3], // // [0] = job level, [1] = job xp, [2] = cooldown
	uBW[3], // // [0] = job level, [1] = job xp, [2] = cooldown
	SideJob,
	JobStarted,
	TruckID,
	LastCar,
	tLoading,
	LastCheckpoint,
	CheckpointsPicked,
	CurrentRun,
	Level,
	LocalMin,
	pPayment,
	TotalHours,
	TotalPoints,
	isMasked,
	Text3D:MaskTag,
	bool:Towing,
	bool:Seecon,
	Bound[3], 
	BoundID[3],
	uWeapon[2],
	uWeapon_Ammo[2],
	WeaponEquipped,
	WeaponEquipped_Ammo,
	WeaponBind,
	JustUsed,
	cmdFlood,
	Health,
	bool:WaitShown,
	DeathTimer,
	Death,
	gVar,
	renting,
	spawnat,
	pint,
	pvw,
	swRoute,
	jobhack,
	faction,
	frank,
	frankname[24],
	fdivision[24],
	funiform,
	fduty,
	jail[2], // jail[0] = time || jail[1] = type of jail (0 = IC JAIL, 1 = AJAIL)
	tazed,
	cuff,
	req,
	vrented,
	breaking,
	phonenum,
	bool:togphone,
	contactselected,
	calling,
	speakingto,
	dialer,
	dboom,
	numput,
	mole,
	bool:animation,
	bool:dragging,
	// drug thangs
	onDrug,
	drughp,
	drugtime,
	druglevel,
	drugpureness,
	drugSkill,
	drugEXP,
	bool:sprinting,
	// deals
	pActor,
	pDeal,
	// bank
	PrimaryAccount,
	// OnPlayerUpdate
	pLastTick,
	//
	carEnterTime,
	//
	pCOD,
	// inventory
	bool:itog,
	// fishing
	pFishSlot[10],
	pFishSlotWeight[10],
	pfish, // current fish 
	pfishweight, // current fish weight
	// csheet
	SheetMonitor, 
	SheetMonitorID,
	editing, // if player is editing a door or an object
	xprecord,
	shapeshift,
	bool:pinvis,
	bool:thousandface,
	Text3D:hiddentag[MAX_PLAYERS],
	seenby[MAX_PLAYERS],
	sawplayer[MAX_PLAYERS],
	bool:makefly,
	specing,
	specedby,
	forumname[MAX_PLAYER_NAME],
	bool:active_auspex,
	bool:showhud,
	psalary,
	bool:pindex[9],
	RPL[5],
	rpoints,
	bool:p_label,
	Float:pHunger,
	Float:pThirst,
	pAdminRank[24],
	chatstyle,
	fightstyle,
};
new User[MAX_PLAYERS][USER_DATA];
enum LABEL_DATA
{
	Float:labelx,
	Float:labely,
	Float:labelz,
	labelvw,
	labelinterior,
	Text3D:labeltag,
	labelcreator
};
new Label[MAX_LABELS][LABEL_DATA];
#define MAX_NPC_TRAITS 300
enum NPC_DATA
{
	npc_id,
	npc_dynamicid,
	npc_skin,
	Float:npc_x,
	Float:npc_y,
	Float:npc_z,
	Float:npc_rot,
	npc_vw,
	npc_interior,
	npc_name[MAX_PLAYER_NAME],
	Text3D:npc_nametag
};
new NPC[MAX_ACTORS][NPC_DATA];
new npctrait[MAX_ACTORS][MAX_NPC_TRAITS][MAX_TRAIT_NAME];
new npctrait_value[MAX_ACTORS][MAX_NPC_TRAITS];
new npctrait_string_value[MAX_ACTORS][MAX_NPC_TRAITS][MAX_TRAIT_NAME];
enum CAR_DATA
{
	dataid,
	gameid,
	vmodel,
	Float:vx,
	Float:vy,
	Float:vz,
	Float:vrot,
	vint,
	vvw,
	vc1,
	vc2,
	siren,
	cowner,
	crated,
	vfac,
	fuel,
	vrent,
	bool:claimed,
	garagein,
	trunklock,
	vradio,
	vurl[256],
	vplate[24],
	vimpound

};
new V[MAX_VEHICLES][CAR_DATA];
enum HEALTH_DATA
{
	hLevel[100],
	hMaxLevel,
};
new HP[MAX_PLAYERS][HEALTH_DATA];
/*
hLevel = 

1 - GOOD
2 - BASHING
3 - LETHAL
4 - AGGRAVATED

*/
CMD:vinfo(playerid, params[])
{
	if(User[playerid][Useradmin] > 2)
	{
		new car; 
		sscanf(params, "i", car);
		SFM(playerid, -1, "DataID: %d | GameID %d | Model %d | Int %d | VW %d | Color1 %d | Color2 %d | Siren %d | Owner %d"
		,V[car][dataid],
		V[car][gameid],
		V[car][vmodel],
		V[car][vint],
		V[car][vvw],
		V[car][vc1],
		V[car][vc2],
		V[car][siren],
		V[car][cowner]);
		SFM(playerid, -1, "Crated %d | Fac %d | Fuel %d | Rent %d | GarageIN %d | TrunkLock %d | Radio %d | Impound %d",
		V[car][crated],
		V[car][vfac],
		V[car][fuel],
		V[car][vrent],
		V[car][garagein],
		V[car][trunklock],
		V[car][vradio],
		V[car][vimpound]);
		SFM(playerid, -1, "plate %s", V[car][vplate]);
		return 1;
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:deletemods(playerid, params[])
{
	if(User[playerid][Useradmin] != 0)
	{
		new componentid, veh;
		if(sscanf(params, "i", veh)) return MSG(playerid, GOLD, "ERROR:"GR" /deletemods [vehicleid]");
		for (new i; i < 14; i++)
		{
			componentid = GetVehicleComponentInSlot(veh, i);
			if (componentid != 0)
				RemoveVehicleComponent(veh, componentid);
		}
		format(large_string, sizeof large_string,"DELETE FROM carmods WHERE car = %d", V[veh][dataid]);
		db_query(Database, large_string);
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
enum BUSINESS_DATA
{
	bowner,
	busid,
	Float:bx,
	Float:by,
	Float:bz,
	Float:bxi,
	Float:byi,
	Float:bzi,
	bvw,
	bvwi,
	bint,
	binti,
	btype,
	bname[40],
	bprice,
	Text3D:BLabel,
	bgov,
	bsafe,
	baddress,
	bgas,
	bicon,
	bmap

};
new B[MAX_BUSINESS][BUSINESS_DATA];

enum HOUSE_DATA
{
	howner,
	hid,
	Float:hx,
	Float:hy,
	Float:hz,
	Float:hxi,
	Float:hyi,
	Float:hzi,
	hvw,
	hvwi,
	hint,
	hinti,
	hprice,
	hname[40],
	Text3D:HLabel,
	bool:hexist,
	hlock,
	hrentable,
	hrent, // rent price
	hsafe,
	bool:hlights,
	haddress,
	hapartment_linked
}
new H[MAX_HOUSE][HOUSE_DATA];

enum PROPERTY_DATA
{
	powner,
	pid,
	Float:px,
	Float:py,
	Float:pz,
	Float:pxi,
	Float:pyi,
	Float:pzi,
	pvw,
	pvwi,
	pint,
	pinti,
	ptax,
	pname[40],
	pfac,
	Text3D:pLabel,
	bool:pexist,
	plock,
	paddress,
	bool:druglab
}
new P[MAX_PROPS][PROPERTY_DATA];

enum GARAGE_DATA
{
	gid,
	glinkedto,
	Float:gx,
	Float:gy,
	Float:gz,
	Float:gxi,
	Float:gyi,
	Float:gzi,
	Float:gangle,
	Float:ganglex,
	gint,
	ginti,
	gvw,
	gvwi,
	glock,
	bool:gexist,
	gowner,
	maxcars,
	carin,
	gfac
};
new Ga[MAX_GARAGES][GARAGE_DATA];
//CreateObject(modelid,x,y,z,rx,ry,rz,drawdistance);
/*enum FURNITURE_DATA
{
	furnhouse,
	furnid,
	furnobject,
	furnmodel,
	furnint,
	furnvw,
	Float:furnx,
	Float:furny,
	Float:furnz,
	Float:furnox,
	Float:furnoy,
	Float:furnoz
}
new FURN[MAX_OBJ][FURNITURE_DATA];*/
enum DOOR_DATA
{
	ddid,
	dobject,
	dmodel,
	dlinkedto,
	dint,
	dvw,
	dpos,
	dhouse,
	dbiz,
	dprop,
	dfac,
	bool:dexist,
	bool:status,
	Float:dx,
	Float:dy,
	Float:dz,
	Float:dxc,
	Float:dyc,
	Float:dzc,
	Float:drx,
	Float:dry,
	Float:drz,
	Float:closeX, // i was too sleepy when i made this, dx dy dz and the things that start with the 'd' are the close coordinations, the one that start with close are the open coordinates
	Float:closeY,
	Float:closeZ,
	Float:closeRX,
	Float:closeRY,
	Float:closeRZ,
	Float:standX,
	Float:standY,
	Float:standZ,
	Float:standX2,
	Float:standY2,
	Float:standZ2,
};
new DD[MAX_DOORS][DOOR_DATA];
enum OBJECT_DATA
{
	oid,
	oobject,
	omodel,
	oint,
	ovw,
	Float:ox,
	Float:oy,
	Float:oz,
	Float:orx,
	Float:ory,
	Float:orz,
	Text3D:ObjectTag,
	bool:ActiveTag
}
new OBJ[MAX_OBJ][OBJECT_DATA];
enum TREE_DATA
{
	treeid,
	treemodel,
	treeobject,
	Float:treex,
	Float:treey,
	Float:treez,
	treehealth,
	loghealth,
	respawntree,
	bool:t_logged
}
new TREE[MAX_TREES][TREE_DATA];
enum ROCK_DATA
{
	rockid,
	rockmodel,
	rockobject,
	Float:rockx,
	Float:rocky,
	Float:rockz,
	rockhealth,
	dighealth,
	respawnrock,
	bool:r_used
}
new ROCK[MAX_TREES][ROCK_DATA];
stock LoadTrees()
{
	new id = 1,field[64];
 	new DBResult: Result = db_query(Database, "SELECT * FROM lumberjack");
	do
	{
		if(db_num_rows(Result))
		{
		    id = db_get_field_assoc_int(Result,"tree");
			db_get_field_assoc(Result, "x",field, 10);
			TREE[id][treex] = floatstr(field);
			db_get_field_assoc(Result, "y",field, 10);
			TREE[id][treey] = floatstr(field);
			db_get_field_assoc(Result, "z",field, 10);
			TREE[id][treez] = floatstr(field);
			TREE[id][treemodel] = db_get_field_assoc_int(Result, "model");
			TREE[id][treeobject] = CreateDynamicObject(TREE[id][treemodel],TREE[id][treex],TREE[id][treey],TREE[id][treez]-1,0,0,0,0,0);
			TREE[id][treehealth] = 100;
            Iter_Add(Trees,id);
			printf("[tree] Tree ID %d has been loaded. (model %d x %f y %f z %f)",id,TREE[id][treemodel],TREE[id][treex],TREE[id][treey],TREE[id][treez]);
		}
		else break;
	}
	while(db_next_row(Result));
	db_free_result(Result);
}
stock LoadObjects()
{
	new id = 1,field[64];
 	new DBResult: Result = db_query(Database, "SELECT * FROM objects");
	do
	{
		if(db_num_rows(Result))
		{
		    id = db_get_field_assoc_int(Result,"objectid");
			db_get_field_assoc(Result, "x",field, 10);
			OBJ[id][ox] = floatstr(field);
			db_get_field_assoc(Result, "y",field, 10);
			OBJ[id][oy] = floatstr(field);
			db_get_field_assoc(Result, "z",field, 10);
			OBJ[id][oz] = floatstr(field);
			db_get_field_assoc(Result, "rx",field, 10);
			OBJ[id][orx] = floatstr(field);
			db_get_field_assoc(Result, "ry",field, 10);
			OBJ[id][ory] = floatstr(field);
			db_get_field_assoc(Result, "rz",field, 10);
			OBJ[id][orz] = floatstr(field);
			OBJ[id][ovw] = db_get_field_assoc_int(Result, "vw");
			OBJ[id][oint] = db_get_field_assoc_int(Result, "interior");
			OBJ[id][omodel] = db_get_field_assoc_int(Result, "model");
			OBJ[id][oobject] = CreateDynamicObject(OBJ[id][omodel],OBJ[id][ox],OBJ[id][oy],OBJ[id][oz],OBJ[id][orx],OBJ[id][ory],OBJ[id][orz],OBJ[id][ovw],OBJ[id][oint]);
			new index,modelid,txdname[60],txtname[60],color;
			index = db_get_field_assoc_int(Result,"oindex");
			modelid = db_get_field_assoc_int(Result,"modelid");
			color = db_get_field_assoc_int(Result,"color");
			db_get_field_assoc(Result, "txdname",txdname, sizeof txdname);
			db_get_field_assoc(Result, "txtname", txtname, sizeof txtname);
			SetDynamicObjectMaterial(OBJ[id][oobject], index, modelid, txdname, txtname, color);
            Iter_Add(Objects,id);
			printf("[object] Object ID %d has been loaded. (model %d x %f y %f z %f)",id,OBJ[id][omodel],OBJ[id][ox],OBJ[id][oy],OBJ[id][oz]);
		}
		else break;
	}
	while(db_next_row(Result));
	db_free_result(Result);
}
stock LoadObjectsMaterial()
{
	new id = 1;
 	new DBResult: Result = db_query(Database, "SELECT * FROM material");
	do
	{
		if(db_num_rows(Result))
		{
		    id = db_get_field_assoc_int(Result,"objectid");
			new index,modelid,txdname[60],txtname[60],color;
			index = db_get_field_assoc_int(Result,"oindex");
			modelid = db_get_field_assoc_int(Result,"modelid");
			color = db_get_field_assoc_int(Result,"color");
			db_get_field_assoc(Result, "txdname",txdname, sizeof txdname);
			db_get_field_assoc(Result, "txtname", txtname, sizeof txtname);
			SetDynamicObjectMaterial(OBJ[id][oobject], index, modelid, txdname, txtname, color);
			printf("[object] Object ID %d material has been loaded. (%d,%d,%s,%s,%d)",id,index,modelid,txdname,txtname,color);
		}
		else break;
	}
	while(db_next_row(Result));
	db_free_result(Result);	
}
CMD:ogoto(playerid,params[])
{
	if(User[playerid][Useradmin] >= 1 || IsStoryteller(playerid))
	{
	    new id;
	    if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /ogoto [objectid]");
	    SetPlayerPos(playerid,OBJ[id][ox],OBJ[id][oy],OBJ[id][oz]);
	    SetPlayerVirtualWorld(playerid,OBJ[id][ovw]);
	    SetPlayerInterior(playerid,OBJ[id][oint]);
		return 1;
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:maphelp(playerid,params[])
{
	if(User[playerid][Useradmin] > 0 || IsStoryteller(playerid))
	{
		MSG(playerid,GOLD,"[Map]"GR" /oc /om /ocp /os /oedit /ogoto /od /odall /rotate /getrot /odisplay /doff /export /cweather /ctime /changemat");
		return 1;
	} else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:doff(playerid,params[])
{
	if(User[playerid][Useradmin] > 0 || IsStoryteller(playerid))
	{
        new id;
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /doff [objectid]");
		if(OBJ[id][oobject] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Invalid object id.");
		OBJ[id][ActiveTag] = false;
		DestroyDynamic3DTextLabel(OBJ[id][ObjectTag]);
		MSG(playerid,GOLD,"Info:"GR" Object tag has been terminated.");
		return 1;
	} else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:od(playerid,params[])
{
    if(User[playerid][Useradmin] >= 1 || IsStoryteller(playerid))
    {
        new id;
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /od [objectid]");
		if(OBJ[id][oobject] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Invalid object id.");
		new query[60];
		format(query,sizeof query,"DELETE FROM objects WHERE objectid = %i",id);
		db_query(Database, query);
		format(query,sizeof query,"DELETE FROM material WHERE objectid = %i",id);
		db_query(Database, query);
		DestroyDynamicObject(OBJ[id][oobject]);
		DestroyDynamic3DTextLabel(OBJ[id][ObjectTag]);
    	new tmp[OBJECT_DATA];
    	OBJ[id] = tmp;
		MSG(playerid,GRAD2,"SERVER: You have deleted the specified object.");
		Iter_Remove(Objects,id);
    }
    else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:odall(playerid,params[])
{
    if(User[playerid][Useradmin] >= 3)
    {
        new range;
		if(sscanf(params,"i",range)) return MSG(playerid,GOLD,"SYNTAX:"GR" /odall [range]");
		new query[90],
			tmp[OBJECT_DATA],
			Float:x,
			Float:y,
			Float:z;
		GetPlayerPos(playerid, x, y, z);
		foreach(Objects, id)
		{
			if(GetDistanceBetweenPoints(x, y, z, OBJ[id][ox], OBJ[id][oy], OBJ[id][oz]) <= range && OBJ[id][oobject] > 0)
			{
				format(query,sizeof query,"DELETE FROM objects WHERE objectid = %i",id);
				db_query(Database, query);
				format(query,sizeof query,"DELETE FROM material WHERE objectid = %i",id);
				db_query(Database, query);
				DestroyDynamicObject(OBJ[id][oobject]);
				DestroyDynamic3DTextLabel(OBJ[id][ObjectTag]);
				OBJ[id] = tmp;
				Iter_SafeRemove(Objects, id, id);	
			}
		}
		format(query,sizeof query,"*** All objects within %d range have been deleted.",range);
		MSG(playerid, GRAD2, query);
    }
    else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}

stock SaveMaterial(objectid,index)
{
	if(OBJ[objectid][oobject] >= 0)
	{
		format(large_string,sizeof large_string,"SELECT oindex FROM objects WHERE objectid = %d",objectid);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
			new oindex = db_get_field_assoc_int(Result, "oindex"),
				model,
				txdname[60],
				txtname[60],
				color;
			GetDynamicObjectMaterial(OBJ[objectid][oobject],index,model,txdname,txtname,color);
			if(oindex == index) // normal behavior 
				format(large_string,sizeof large_string,"UPDATE objects SET oindex = %d,modelid = %d,txdname = '%s',txtname = '%s',color = %d WHERE objectid = %d",index,model,txdname,txtname,color,objectid);
			else // if theres more than one index being used
			{
				format(large_string,sizeof large_string,"SELECT 1 FROM material WHERE objectid = %d AND oindex = %d",objectid,index);
				Result = db_query(Database, large_string);
				if(db_num_rows(Result)) format(large_string,sizeof large_string,"UPDATE MATERIAL SET modelid = %d,txdname = '%s',txtname = '%s',color = %d WHERE objectid = %d",model,txdname,txtname,color,objectid);
				else format(large_string,sizeof large_string,"INSERT INTO material (objectid,oindex,modelid,txdname,txtname,color) VALUES (%d,%d,%d,'%s','%s',%d)",objectid,index,model,txdname,txtname,color);
			}
			db_query(Database, large_string);
		}
		else
			Staff(ADMIN,"[savematerial] An error has occurred.");
		db_free_result(Result);
	}
	return 1;
}
CMD:om(playerid,params[])
{
	if(User[playerid][Useradmin] > 0 || IsStoryteller(playerid))
	{
        new id,
			index,
			modelid,
			txdname[60],
			txtname[60],
			scolor[12];
		sscanf(params,"iiis[60]s[60]s[12]",id,index,modelid,txdname,txtname,scolor);
		//SFM(playerid,-1,"oobject %d",OBJ[id][oobject]);
		if(id < 0) return MSG(playerid,GOLD,"SYNTAX:"GR" /om [objectid] [materialindex] [modelid] [txdname] [texturename] [materialcolor (FFhex)]");
		if(index < 0) return MSG(playerid,GOLD,"SYNTAX:"GR" /om [objectid] [materialindex] [modelid] [txdname] [texturename] [materialcolor (FFhex)]");
		if(modelid < 1) return MSG(playerid,GOLD,"SYNTAX:"GR" /om [objectid] [materialindex] [modelid] [txdname] [texturename] [materialcolor (FFhex)]");
		if(isnull(txdname)) return MSG(playerid,GOLD,"SYNTAX:"GR" /om [objectid] [materialindex] [modelid] [txdname] [texturename] [materialcolor (FFhex)]");
		if(isnull(txtname)) return MSG(playerid,GOLD,"SYNTAX:"GR" /om [objectid] [materialindex] [modelid] [txdname] [texturename] [materialcolor (FFhex)]");
		if(OBJ[id][oobject] < 1) return MSG(playerid,GOLD,"ERROR:"GR" Invalid object id.");
		if(strfind(txdname, ".txd", true) != -1) return MSG(playerid,GOLD,"ERROR:"GR" Remove the .txd from the txdname.");
		if(strfind(scolor, "#", true) != -1) return MSG(playerid,GOLD,"ERROR:"GR" Remove the # from the color.");
		new color;
		if(!isnull(scolor))
		{
			if(strcmp(scolor,"none",true))
			{
				format(scolor,12,"0x%s",scolor);
				color = HexToInt(scolor);
				printf("scolor: %s; color %d",scolor,color);
			}
		}
		SetDynamicObjectMaterial(OBJ[id][oobject], index, modelid, txdname, txtname, color);
		SaveMaterial(id, index);
		//format(large_string,sizeof large_string,"UPDATE objects SET oindex = %d,modelid = %d,txdname = '%s',txtname = '%s',color = %d WHERE objectid = %d",index,modelid,txdname,txtname,color,id);
		//db_query(Database, large_string);
		format(large_string,sizeof large_string,"SetDynamicObjectMaterial(%d, %d, %d, %s, %s, %d);",OBJ[id][oobject], index, modelid, txdname, txtname, color);
		MSG(playerid,-1, large_string);
		//(objectid, materialindex, modelid, txdname[], texturename[], materialcolor)
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:export(playerid,params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new file[48],
			range;
		if(sscanf(params,"s[48]i",file,range))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /export [filename] [range]");
		new Float:x,
			Float:y,
			Float:z;
		GetPlayerPos(playerid, x, y, z);
		MSG(playerid,GOLD,"EXPORTING... DONT MOVE!");
		new File:pos= fopen(file, io_append);
		format(large_string, 100,"new tmpobjid,ointerior = %d,vw = 0;\r\n",1+random(144));
		fwrite(pos, large_string);
		foreach(Objects, i)
		{
			if(GetDistanceBetweenPoints(x, y, z, OBJ[i][ox], OBJ[i][oy], OBJ[i][oz]) <= range && OBJ[i][oobject] > 0)
			{
        		format(large_string, 256, "tmpobjid = CreateDynamicObject(%d, %f, %f, %f, %f, %f, %f, vw, ointerior);\r\n",OBJ[i][omodel],OBJ[i][ox],OBJ[i][oy],OBJ[i][oz],OBJ[i][orx],OBJ[i][ory],OBJ[i][orz]);//OBJ[i][ovw],OBJ[i][oint]);
				fwrite(pos, large_string);
				new model[10],
					txdname[10][60],
					txtname[10][60],
					color[10];
				for(new c = 0; c < 10; c++)
				{
					GetDynamicObjectMaterial(OBJ[i][oobject],c,model[c],txdname[c],txtname[c],color[c]);
					if(!isnull(txdname[c]))
					{
						printf("[objectid %d] txdname for the index %d is not null",i, c);
						format(large_string, 256,"SetDynamicObjectMaterial(tmpobjid, %d, %d, \"%s\", \"%s\", %d);\r\n",c,model[c],txdname[c],txtname[c],color[c]);
						fwrite(pos, large_string);
					}
				}
			}
		}
		fclose(pos);
		MSG(playerid,GOLD,"EXPORTING... COMPLETE!");
		/*
		new File:pos= fopen("incorrect_attempts.txt", io_append);
        format(large_string, 256, "[%s][%s][atmpt] %s: %s\r\n", PasteDate(),PasteTime(), sendername(playerid),inputtext);
        fwrite(pos, large_string);
        fclose(pos);	*/
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:cweather(playerid,params[])
{
	if(User[playerid][Useradmin] > 0)
	{
		SetPlayerWeather(playerid, strval(params));
		MSG(playerid, GOLD, "Info:"GR" You have changed the weather for yourself");
		return 1;
	}
 	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:ctime(playerid,params[])
{
	if(User[playerid][Useradmin] > 0)
	{
		new ichour = strval(params);
		SetWorldTime(ichour);
		SetSVarInt("IChour", ichour);
		if(ichour >= 6 && ichour <= 20)
		{
			printf(">>>>>>>>>>>>>>>>>>>>>>>>> SETDAY (ichour: %d)", ichour);
			SetWorldTime(ichour);
			KillTimer(NightTimer);
			KillTimer(DayTimer);
			DayTimer = SetTimer("DayTime", 71, true); 
			day_condition = 1;
		}
		else 
		{
			printf(">>>>>>>>>>>>>>>>>>>>>>>>> SETNIGHT (ichour: %d)", ichour);
			KillTimer(NightTimer);
			KillTimer(DayTimer);
			NightTimer = SetTimer("NightTime", 2300, true); 
			SetWorldTime(0);
			day_condition = 0;
		}
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:odisplay(playerid,params[])
{
	if(User[playerid][Useradmin] > 0 || IsStoryteller(playerid))
	{
		new range,option[6];
		sscanf(params,"is[6]",range,option);
		if(range < 1) return MSG(playerid,GOLD,"SYNTAX:"GR" /odisplay [range]");
		if(isnull(option)) option = "on";
		new Float:x,
			Float:y,
			Float:z;
		GetPlayerPos(playerid, x, y, z);
		foreach(Objects, i)
		{
			if(GetDistanceBetweenPoints(x, y, z, OBJ[i][ox], OBJ[i][oy], OBJ[i][oz]) <= range && OBJ[i][oobject] > 0)
			{
				if(!OBJ[i][ActiveTag])
				{
					if(!strcmp(option,"on",true))
					{
						format(large_string, 60, "[ID: %d]",i);
						OBJ[i][ObjectTag] = CreateDynamic3DTextLabel(large_string,GOLD,OBJ[i][ox], OBJ[i][oy], OBJ[i][oz],20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,OBJ[i][ovw],OBJ[i][oint]);
						OBJ[i][ActiveTag] = true;
						//CreateDynamic3DTextLabel( const text[], color, Float:x, Float:y, Float:z, Float:drawdistance, attachedplayer = INVALID_PLAYER_ID, attachedvehicle = INVALID_VEHICLE_ID,
						// testlos = 0, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_3D_TEXT_LABEL_SD, areaid = -1, priority = 0 )
					}
				}
				else 
				{
					DestroyDynamic3DTextLabel(OBJ[i][ObjectTag]);
					OBJ[i][ActiveTag] = false;
				}
			}
		}
		return 1;
	}
	return 0;
}

CMD:rotate(playerid,params[])
{
	if(User[playerid][Useradmin] > 0 || IsStoryteller(playerid))
	{
		new id,Float:x = -1,Float:y = -1,Float:z = -1;
		sscanf(params,"ifff",id,x,y,z);
		if(id < 0) return MSG(playerid,GOLD,"SYNTAX:"GR" /rotate [objectid] [rotx] [roty] [rotz]");
		if(OBJ[id][oobject] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Invalid object id.");
		if(x == -1) x = OBJ[id][orx];
		if(y == -1) y = OBJ[id][ory];
		if(z == -1) z = OBJ[id][orz];
		SetDynamicObjectRot(OBJ[id][oobject], x, y, z);
		new sx[8],sy[8],sz[8];
		format(sx,8,"%f",x);
		format(sy,8,"%f",y);
		format(sz,8,"%f",z);
		format(large_string,sizeof large_string,"UPDATE objects SET rx = '%s',ry = '%s',rz = '%s' WHERE objectid = %d",sx,sy,sz,id);
		db_query(Database, large_string);
		OBJ[id][orx] = x;
		OBJ[id][ory] = y;
		OBJ[id][orz] = z;
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");		
}
CMD:getrot(playerid,params[])
{
	if(User[playerid][Useradmin] > 0 || IsStoryteller(playerid))
	{
		new id,
			Float:x,
			Float:y,
			Float:z;
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX: /getrot [objectid]");
		if(OBJ[id][oobject] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Invalid object id.");
		GetDynamicObjectRot(OBJ[id][oobject], x, y, z);
		SFM(playerid,GRAD2,"[OBJECT %d] rX: %f, rY: %f, rZ: %f",id,x,y,z);
		return 1;		
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}

CMD:oc(playerid,params[])
{
	if(User[playerid][Useradmin] > 0 || IsStoryteller(playerid))
	{
			new Float:x,
				Float:y,
				Float:z,
				model;
			if(sscanf(params,"d",model)) return MSG(playerid,GOLD,"SYNTAX:"GR" /(o)bject(c)reate [modelid]");
			new i = Iter_Free(Objects);
			if(i == MAX_OBJ) return MSG(playerid,GOLD,"ERROR: LIMIT REACHED!");
			OBJ[i][oid] = i;
			OBJ[i][ovw] = GetPlayerVirtualWorld(playerid);
			OBJ[i][oint] = GetPlayerInterior(playerid);
			GetPlayerPos(playerid,x,y,z);
			OBJ[i][ox] = x;
			OBJ[i][oy] = y;
			OBJ[i][oz] = z;
			OBJ[i][omodel] = model;
			new sx[10],sy[10],sz[10];
			format(sx,10,"%f",x);
			format(sy,10,"%f",y);
			format(sz,10,"%f",z);
			format(large_string,sizeof large_string,"INSERT INTO objects (objectid,model,interior,vw,x,y,z,rx,ry,rz) VALUES (%d,%d,%d,%d,'%s','%s','%s',0,0,0)",i,model,OBJ[i][oint],OBJ[i][ovw],sx,sy,sz);
			db_query(Database, large_string);
			OBJ[i][oobject] = CreateDynamicObject(OBJ[i][omodel],OBJ[i][ox],OBJ[i][oy],OBJ[i][oz],OBJ[i][orx],OBJ[i][ory],OBJ[i][orz],OBJ[i][ovw],OBJ[i][oint]);
			/*CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz,
			worldid = -1, interiorid = -1, playerid = -1,
			Float:streamdistance = STREAMER_OBJECT_SD,
			Float:drawdistance = STREAMER_OBJECT_DD, areaid = -1, priority = 0)*/
			format(large_string,sizeof large_string,"SERVER: You have created object ID %d (Model: %d)",i,model);
			MSG(playerid,GRAD2,large_string);
			Iter_Add(Objects,i);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:ocp(playerid,params[])
{
	if(User[playerid][Useradmin] > 0 || IsStoryteller(playerid))
	{
			new Float:x,
				Float:y,
				Float:z,
				objectid;
			if(sscanf(params,"d",objectid)) return MSG(playerid,GOLD,"SYNTAX:"GR" /(o)bject(c)o(p)y [objectid]");
			new i = Iter_Free(Objects);
			if(i == MAX_OBJ) return MSG(playerid,GOLD,"ERROR: LIMIT REACHED!");
			OBJ[i][oid] = i;
			OBJ[i][ovw] = OBJ[objectid][ovw];
			OBJ[i][oint] = OBJ[objectid][oint];
			GetPlayerPos(playerid,x,y,z);
			OBJ[i][ox] = OBJ[objectid][ox];
			OBJ[i][oy] = OBJ[objectid][oy];
			OBJ[i][oz] = OBJ[objectid][oz];
			OBJ[i][orx] = OBJ[objectid][orx];
			OBJ[i][ory] = OBJ[objectid][ory];
			OBJ[i][orz] = OBJ[objectid][orz];
			OBJ[i][omodel] = OBJ[objectid][omodel];
			new sx[10],sy[10],sz[10],srx[10],sry[10],srz[10];
			format(sx,10,"%f",x);
			format(sy,10,"%f",y);
			format(sz,10,"%f",z);
			format(srx,10,"%f",OBJ[objectid][orx]);
			format(sry,10,"%f",OBJ[objectid][ory]);
			format(srz,10,"%f",OBJ[objectid][orz]);
			OBJ[i][oobject] = CreateDynamicObject(OBJ[i][omodel],OBJ[i][ox],OBJ[i][oy],OBJ[i][oz],OBJ[i][orx],OBJ[i][ory],OBJ[i][orz],OBJ[i][ovw],OBJ[i][oint]);
			new index,
				model,
				txdname[60],
				txtname[60],
				color;
			GetDynamicObjectMaterial(OBJ[objectid][oobject],index,model,txdname,txtname,color);
			SetDynamicObjectMaterial(OBJ[i][oobject], index, model, txdname, txtname, color);
			format(large_string,sizeof large_string,"INSERT INTO objects (objectid,model,interior,vw,x,y,z,rx,ry,rz,oindex,modelid,txdname,txtname,color) VALUES (%d,%d,%d,%d,'%s','%s','%s','%s','%s','%s',%d,%d,'%s','%s',%d)"
			,i,OBJ[i][omodel],OBJ[i][oint],OBJ[i][ovw],sx,sy,sz,srx,sry,srz,index,model,txdname,txtname,color);
			db_query(Database, large_string);
			/*CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz,
			worldid = -1, interiorid = -1, playerid = -1,
			Float:streamdistance = STREAMER_OBJECT_SD,
			Float:drawdistance = STREAMER_OBJECT_DD, areaid = -1, priority = 0)*/
			format(large_string,sizeof large_string,"SERVER: You have created object ID %d (Model: %d) (Copied from object id %d)",i,OBJ[i][omodel],objectid);
			MSG(playerid,GRAD2,large_string);
			Iter_Add(Objects,i);
			EditDynamicObject(playerid, OBJ[i][oobject]);
			User[playerid][editing] = 2;
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:oedit(playerid,params[])
{
	if(User[playerid][Useradmin] > 0 || IsStoryteller(playerid))
	{
        new id;
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /oedit [objectid]");
		if(OBJ[id][oobject] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Invalid object id.");
		EditDynamicObject(playerid, OBJ[id][oobject]);
		User[playerid][editing] = 2;
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:os(playerid,params[])
{
	if(User[playerid][Useradmin] > 0 || IsStoryteller(playerid))
	{
		SelectObject(playerid);
		User[playerid][editing] = 2;
		return 1;
	}		
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
public OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, modelid, Float:x, Float:y, Float:z)
{
	if(User[playerid][editing] == 2)
	{
		EditDynamicObject(playerid, objectid);
		return 0;
	}
	return 1;
}
enum attached_object_data
{
    ao_model,
    ao_bone,
    Float:ao_x,
    Float:ao_y,
    Float:ao_z,
    Float:ao_rx,
    Float:ao_ry,
    Float:ao_rz,
    Float:ao_sx,
    Float:ao_sy,
    Float:ao_sz,
    ao_equip,
	ao_color,
	aindex
}
new ao[MAX_PLAYERS][MAX_PLAYER_ATTACHED_OBJECTS][attached_object_data];


enum FACTION_DATA
{
	fid,
	fname[45],
	fmembers,
	ftype,
	Float:fposx,
	Float:fposy,
	Float:fposz,
	fvw,
	fint
}
new F[MAX_FACTIONS][FACTION_DATA];

enum CORPSE_DATA
{
	cUser,
	cObject,
	Float:cX,
	Float:cY,
	Float:cZ,
	Float:cR,
	Float:cSkin,
	Float:cVW,
	cMoney,
	cTime,
	cFirstSlot,
	cFirstSlot_Ammo,
	cSecondSlot,
	cSecondSlot_Ammo,
	cCOD
}
new CORPSE[MAX_CORPSE][CORPSE_DATA];
enum WEAPON_DATA
{
	dID,
	dWeapon,
	dAmmo,
	Float:dX,
	Float:dY,
	Float:dZ,
	dVW,
	dInterior,
	dWeaponObject,
	dTime
};
new DW[MAX_DROPPED_WEAPONS][WEAPON_DATA];

enum plants
{
	p_id,
	Float:p_x,
	Float:p_y,
	Float:p_z,
	p_vw,
	ptype,
	pobj,
	pobjid,
	ptime
}
new PL[MAX_PLANTS][plants];


#define ITEMS 32
#define MAX_INVENTORY 10
#define MAX_ITEM_NAME 16
enum ItemsData
{
	Item,
	Value,
	Condition,
	bool:iFake,
	bool:iMergable, 
	ItemName[MAX_ITEM_NAME],
	ItemID,
	itoggle,
	ifreq
}
new UserItem[MAX_PLAYERS][MAX_INVENTORY][ItemsData];

stock UpdateItem(playerid, slot, itemid, itemname[], value, condition = 100, bool:mergable = false, bool:fakeitem = false, ritemid = 0)
{
	//
	printf("[%s][%s] [item] UpdateItem(%s, %d, %d, %s, %d, %d)", PasteDate(), PasteTime(), User[playerid][Username], slot, itemid, itemname, value, condition);
	if(User[playerid][Logged])
	{
		format(large_string, sizeof large_string, "SELECT value FROM inventory WHERE userid = %d AND slot = %d AND item = %d", User[playerid][UserID], slot, itemid);
		new DBResult: Result = db_query(Database, large_string);
		if(!db_num_rows(Result)) // the item does not exist in the inventory
		{
			UserItem[playerid][slot][Item] = itemid;
			UserItem[playerid][slot][Value] = value;
			UserItem[playerid][slot][Condition] = condition;
			UserItem[playerid][slot][iFake] = fakeitem;
			UserItem[playerid][slot][iMergable] = mergable;
			UserItem[playerid][slot][ItemID] = ritemid;
			format(UserItem[playerid][slot][ItemName], MAX_ITEM_NAME, "%s", itemname);
			format(large_string, sizeof large_string, "INSERT INTO inventory (userid, slot, item, itemname, value, fake, mergeable, condition, itemid) VALUES (%d, %d, %d, '%q', %d, %d, %d, %d, %d)"
			,User[playerid][UserID], slot, itemid, itemname, value, fakeitem, mergable, condition, ritemid);
			db_query(Database, large_string);
			print("[updateitem] A");
		} 
		else // the item exists in the inventory
		{
			if(mergable == true) // if the item is mergable, then merge it
			{
				UserItem[playerid][slot][Item] = itemid;
				UserItem[playerid][slot][Value] += value;
				format(large_string, sizeof large_string, "UPDATE inventory SET value = value+%d,condition = %d WHERE userid = %d AND slot = %d", value, condition, User[playerid][UserID], slot);
				db_query(Database, large_string);	
				print("[updateitem] B");
			}
			else
			{
				UserItem[playerid][slot][Item] = itemid;
				UserItem[playerid][slot][Value] = value;
				UserItem[playerid][slot][Condition] = condition;
				UserItem[playerid][slot][iFake] = fakeitem;
				UserItem[playerid][slot][iMergable] = mergable;
				UserItem[playerid][slot][ItemID] = ritemid;
				format(UserItem[playerid][slot][ItemName], MAX_ITEM_NAME, "%s", itemname);
				format(large_string, sizeof large_string, "INSERT INTO inventory (userid, slot, item, itemname, value, fake, mergeable, condition, itemid) VALUES (%d, %d, %d, '%q', %d, %d, %d, %d, %d)"
				,User[playerid][UserID], slot, itemid, itemname, value, fakeitem, mergable, condition, ritemid);
				db_query(Database, large_string);		
				print("[updateitem] C");		
			}
			if(UserItem[playerid][slot][Value] < 1)
			{
				format(large_string, sizeof large_string, "DELETE FROM inventory WHERE userid = %d AND slot = %d", User[playerid][UserID], slot);
				db_query(Database, large_string);
				UserItem[playerid][slot][Item] = 0;
				UserItem[playerid][slot][Condition] = 0;
				UserItem[playerid][slot][iFake] = false;
				UserItem[playerid][slot][iMergable] = false;
				UserItem[playerid][slot][ItemID] = 0;
				format(UserItem[playerid][slot][ItemName], MAX_ITEM_NAME, "");
				print("[updateitem] D");
			}		
		}
		UpdateInventorySlot(playerid, slot);
		UpdateInventoryHeader(playerid);
		//printf("[%s][%s] CreateItem has been called for %s. [Item: %s (%d); Value: %d]", PasteDate(), PasteTime(), itemname, itemid, value);
		return 2;
	}
	return 0;
}
stock GetInventoryFreeSlot(playerid)
{
	for(new i = 0; i < MAX_INVENTORY; i++)
	{
		if(UserItem[playerid][i][Item] == 0)
		{
			return i;
		}
	}
	return -1;
}
stock GetItemID(itemname[MAX_ITEM_NAME])
{
	new bool:breakme;
	for(new i = 1; i <= 100; i++)
	{
		if(!strcmp(itemname,GetItemName(i)))
	    {
			printf("BREAK! %s = %s", itemname, GetItemName(i));
			breakme = true;
			return i;
		}
		if(breakme == true)
			break;
	}
	return -1;
}
Dialog:dUseItemPaint(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: cmd_paintcar(playerid, "");
			case 1: cmd_paintjob(playerid, "");
		}
	}
	return 1;
}
stock FoodDrink(playerid, item, slot)
{
	if(User[playerid][Logged])	
	{
		if(GetPVarInt(playerid, "tConsume") == 1)
			return MSG(playerid, GOLD, "Inventory:"GR" You are currently consuming a food or drink.");
		if(User[playerid][Userrace] == 1)
		{
			new bool:savor = false;
			format(large_string, sizeof large_string,"SELECT 1 FROM advantages WHERE userid = %d AND item = 'Eat Food'", User[playerid][SheetMonitorID]);
			new DBResult: Result = db_query(Database, large_string);
			if(db_num_rows(Result))
			{
				savor = true;
				db_free_result(Result);
			}
			if(!savor) 
			{
				UpdateItem(playerid, slot, UserItem[playerid][slot][Item], UserItem[playerid][slot][ItemName], -1, 100, true);
				ApplyAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
				return PlayerActionMessageBubble(playerid, "vomits abruptly.");
			}
		}
		switch(item)
		{
			case 6: 
			{
				PlayerActionMessageBubble(playerid, "drinks their Water.");
				UpdateItem(playerid, slot, UserItem[playerid][slot][Item], UserItem[playerid][slot][ItemName], -1, 100, true);
				gIncreaseThirst(playerid, 20);
				gIncreaseHP(playerid, 10);
				GameTextForPlayer(playerid, "~g~-20 Thirst, +10 HP", 2500, 1);
				print("G HERE!");SetPVarInt(playerid, "tConsume", 1);
				ApplyAnim(playerid, "VENDING", "VEND_Drink_P", 4.1, 0, 0, 0, 0, 0, 1);
				if(User[playerid][Userrace] != 1)
				{
					new Float:value = GetPlayerProgressBarValue(playerid, bThirst)+20;
					if(value > 99) value = 100;
					format(large_string, sizeof large_string, "UPDATE users SET thirst = %d WHERE userid = %d", floatround(value), User[playerid][UserID]);
					db_query(Database, large_string);
					User[playerid][pThirst] = value;
				}
				
			}
			case 9: 
			{
				PlayerActionMessageBubble(playerid, "drinks their Sprunk.");
				UpdateItem(playerid, slot, UserItem[playerid][slot][Item], UserItem[playerid][slot][ItemName], -1, 100, true);
				gIncreaseThirst(playerid, 10);
				gIncreaseHP(playerid, 10);
				GameTextForPlayer(playerid, "~g~-10 Thirst, +10 HP", 2500, 1);
				print("F HERE!");SetPVarInt(playerid, "tConsume", 1);
				ApplyAnim(playerid, "VENDING", "VEND_Drink_P", 4.1, 0, 0, 0, 0, 0, 1);
				if(User[playerid][Userrace] != 1)
				{
					new Float:value = GetPlayerProgressBarValue(playerid, bThirst)+10;
					if(value > 99) value = 100;
					format(large_string, sizeof large_string, "UPDATE users SET thirst = %d WHERE userid = %d", floatround(value), User[playerid][UserID]);
					db_query(Database, large_string);
					User[playerid][pThirst] = value;
				}
			}
			case 16: 
			{
				PlayerActionMessageBubble(playerid, "eats their Fruit.");
				UpdateItem(playerid, slot, UserItem[playerid][slot][Item], UserItem[playerid][slot][ItemName], -1, 100, true);
				gIncreaseHunger(playerid, 10);
				gIncreaseThirst(playerid, 10);
				gIncreaseHP(playerid, 2);
				GameTextForPlayer(playerid, "~g~-10 Hunger/Thirst, +2 HP", 2500, 1);
				print("E HERE!");SetPVarInt(playerid, "tConsume", 1);
				ApplyAnim(playerid, "FOOD", "EAT_Pizza", 4.1, 0, 0, 0, 0, 0, 1);	
				if(User[playerid][Userrace] != 1)
				{
					new Float:value = GetPlayerProgressBarValue(playerid, bHunger)+10;
					new Float:tvalue = GetPlayerProgressBarValue(playerid, bThirst)+5;
					if(value > 99) value = 100;
					format(large_string, sizeof large_string, "UPDATE users SET hunger = %d,thirst = %d WHERE userid = %d", floatround(value), floatround(tvalue), User[playerid][UserID]);
					db_query(Database, large_string);	
					User[playerid][pThirst] = value;
				}		
			}
			case 17: 
			{
				PlayerActionMessageBubble(playerid, "drinks their Soda.");
				UpdateItem(playerid, slot, UserItem[playerid][slot][Item], UserItem[playerid][slot][ItemName], -1, 100, true);
				gIncreaseThirst(playerid, 15);
				gIncreaseHP(playerid, 10);
				GameTextForPlayer(playerid, "~g~-15 Thirst, +10 HP", 2500, 1);
				print("D HERE!");SetPVarInt(playerid, "tConsume", 1);
				ApplyAnim(playerid, "VENDING", "VEND_Drink_P", 4.1, 0, 0, 0, 0, 0, 1);
				if(User[playerid][Userrace] != 1)
				{
					new Float:value = GetPlayerProgressBarValue(playerid, bThirst)+15;
					if(value > 99) value = 100;
					format(large_string, sizeof large_string, "UPDATE users SET thirst = %d WHERE userid = %d", floatround(value), User[playerid][UserID]);
					db_query(Database, large_string);
					User[playerid][pThirst] = value;
				}
			}		
			case 18: 
			{
				PlayerActionMessageBubble(playerid, "drinks their Alcoholic Beverage.");
				UpdateItem(playerid, slot, UserItem[playerid][slot][Item], UserItem[playerid][slot][ItemName], -1, 100, true);
				gIncreaseThirst(playerid, 5);
				GameTextForPlayer(playerid, "~g~-5 Thirst", 2500, 1);
				print("C HERE!");SetPVarInt(playerid, "tConsume", 1);
				ApplyAnim(playerid, "VENDING", "VEND_Drink_P", 4.1, 0, 0, 0, 0, 0, 1);
				if(User[playerid][Userrace] != 1)
				{
					new Float:value = GetPlayerProgressBarValue(playerid, bThirst)+5;
					if(value > 99) value = 100;
					format(large_string, sizeof large_string, "UPDATE users SET thirst = %d WHERE userid = %d", floatround(value), User[playerid][UserID]);
					db_query(Database, large_string);
					User[playerid][pThirst] = value;
				}
			}	
			case 30: 
			{
				PlayerActionMessageBubble(playerid, "eats their Snack.");
				UpdateItem(playerid, slot, UserItem[playerid][slot][Item], UserItem[playerid][slot][ItemName], -1, 100, true);
				gIncreaseHunger(playerid, 5);
				gIncreaseHP(playerid, 10);
				GameTextForPlayer(playerid, "~g~-5 Hunger, +10 HP", 2500, 1);
				print("B HERE!");SetPVarInt(playerid, "tConsume", 1);
				//ApplyAnim(playerid, "EAT", "EAT_Pizza", 4.1, 0, 0, 0, 0, 0, 1);
				if(User[playerid][Userrace] != 1)
				{
					new Float:value = GetPlayerProgressBarValue(playerid, bHunger)+5;
					if(value > 99) value = 100;
					format(large_string, sizeof large_string, "UPDATE users SET hunger = %d WHERE userid = %d", floatround(value), User[playerid][UserID]);
					db_query(Database, large_string);
					User[playerid][pHunger] = value;
				}
			}
			case 31: 
			{
				PlayerActionMessageBubble(playerid, "eats their Venison.");
				UpdateItem(playerid, slot, UserItem[playerid][slot][Item], UserItem[playerid][slot][ItemName], -1, 100, true);
				gIncreaseHunger(playerid, 30);
				gIncreaseHP(playerid, 20);
				GameTextForPlayer(playerid, "~g~-30 Hunger, +20 HP", 2500, 1);
				print("A HERE!");SetPVarInt(playerid, "tConsume", 1);
				ApplyAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				if(User[playerid][Userrace] != 1)
				{
					new Float:value = GetPlayerProgressBarValue(playerid, bHunger)+30;
					if(value > 99) value = 100;
					format(large_string, sizeof large_string, "UPDATE users SET hunger = %d WHERE userid = %d", floatround(value), User[playerid][UserID]);
					db_query(Database, large_string);
					User[playerid][pHunger] = value;
				}
			}
		}
		return 1;
	}
	return 0;
}

stock GetItemName(itemid)
{
	new item[MAX_ITEM_NAME];
	switch(itemid)
	{
		case 1: item = "Vehicle Part";
		case 2: item = "Screwdriver";
		case 3: item = "Blowtorch";
		case 4: item = "Vehicle Paint";
		case 5: item = "Wrench";
		case 6: item = "Water";
		case 7: item = "Cigarette";
		case 8: item = "Toolkit";
		case 9: item = "Sprunk";
		case 10: item = "Rope";
		case 11: item = "GPS";
		case 12: item = "Mask";
		case 13: item = "Blindfold";
		case 14: item = "MP3";
		case 15: item = "Stereo";
		case 16: item = "Fruit";
		case 17: item = "Soda";
		case 18: item = "Alcoholic Drink";
		case 19: item = "Dice";
		case 20: item = "Cards";
		case 21: item = "Bait";
		case 22: item = "Fishing Rod";
		case 23: item = "IED";
		case 24: item = "Blood Pack";
		case 25: item = "Radio";
		case 26: item = "Animal Hide";
		case 27: item = "Deer Antler";
		case 28: item = "Wolf Canines";
		case 29: item = "Gas Can";
		case 30: item = "Snack";
		case 31: item = "Venison";
		case 32: item = "Log";
		case 33: item = "Vehicle Key";
		default: item = "N/A";
	}
	return item;
}
stock FindPlayerItem(playerid, item)
{
	if(User[playerid][Logged])
	{
		if(item == 0) return -1;
		for(new i = 0; i < MAX_INVENTORY; i++)
		{
			if(UserItem[playerid][i][Item] == item)
			{
				printf("FindPlayerItem(%d, %s): %d", playerid, GetItemName(item), i);
				return i;
			}
		}
	}
	return -1;
}
stock FindPlayerItem_Name(playerid, item[])
{
	if(User[playerid][Logged])
	{
		for(new i = 0; i < MAX_INVENTORY; i++)
		{
			if(!strcmp(item,UserItem[playerid][i][ItemName]) && !isnull(UserItem[playerid][i][ItemName]))
			{
				printf("FindPlayerItem_Name(%d, %s): %d", playerid, item, i);
				return i;
			}
		}
	}
	return -1;
}
stock FindPlayerItemFree(playerid, item[MAX_ITEM_NAME])
{
	if(User[playerid][Logged])
	{
		new bool:found = false;
		for(new i = 0; i < MAX_INVENTORY; i++)
		{
			if(!strcmp(item,UserItem[playerid][i][ItemName]) && !isnull(UserItem[playerid][i][ItemName]))
			{
				printf("FindPlayerItemFree: %d [STRCMP]", i);
				found = true;
				return i;
			}
		}
		if(!found) 
		{
			printf("FindPlayerItemFree: %d [FREE]", GetInventoryFreeSlot(playerid));
			return GetInventoryFreeSlot(playerid);
		}
	}
	return -1;
}
stock UpdateInventoryHeader(playerid)
{
	new number;
	for(new i = 0; i < MAX_INVENTORY; i++)
	{
		if(UserItem[playerid][i][Value] < 1)
			continue;
		number++;
	}
	new name[24];
	format(name, sizeof name, "~g~Inventory (%d/%d)", number, MAX_INVENTORY);
	PlayerTextDrawSetString(playerid, inventory_header[playerid], name);
	return number;
}
stock UpdateInventorySlot(playerid, slot)
{
	new name[MAX_ITEM_NAME+10];
	name = "Error";
	if(User[playerid][Logged])
	{
		if(isnull(UserItem[playerid][slot][ItemName])) 
		{
			format(name, sizeof name, "%d. ~r~Empty Slot", slot+1);
		}
		else
		{
			if(UserItem[playerid][slot][Item] != 33)
			{
				if(UserItem[playerid][slot][Value] > 1) format(name, sizeof name, "%d. %s (%d)", slot+1, UserItem[playerid][slot][ItemName], UserItem[playerid][slot][Value]);
				else format(name, sizeof name, "%d. %s", slot+1, UserItem[playerid][slot][ItemName]);
			}
			else
			{
				format(name, sizeof name, "%d. %s %d", slot+1, UserItem[playerid][slot][ItemName], UserItem[playerid][slot][Value]);
			}
		}
		PlayerTextDrawSetString(playerid, invslot[playerid][slot], name);
		return name;
	}
	return name;
}
#define IED_TYPE_HOUSE 1
#define IED_TYPE_BIZ 2
#define IED_TYPE_VEH 3
#define IED_TYPE_GROUND 4
enum IED_Data
{
	Float:ix,
	Float:iy,
	Float:iz,
	ivw,
	iint,
	itype,
	iattach,
	planter,
}
new IED[MAX_IEDS][IED_Data];
CMD:detonate(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new id;
		if(sscanf(params,"d",id)) return 0;
		if(IED[id][planter] == User[playerid][UserID])
		{
			if(IED[id][itype] == IED_TYPE_VEH)
			{
				GetVehiclePos(IED[id][iattach],IED[id][ix],IED[id][iy],IED[id][iz]);
				SetVehicleHealth(IED[id][iattach],200);
			}
			CreateExplosion(IED[id][ix], IED[id][iy], IED[id][iz], 1, 7);
			foreach(Player, i)
			{
			
				if(IsPlayerInRangeOfPoint(i, 15, IED[id][ix], IED[id][iy], IED[id][iz]) && IED[id][ivw] == GetPlayerVirtualWorld(i))
				{
					SetHealth(i,0);
					if(!IsPlayerInAnyVehicle(i)) ApplyAnimation(i, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
					//ApplyAnimation(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
					else
					{
						new Float:x,Float:y,Float:z;
						GetPlayerPos(playerid,x,y,z);
						SetPlayerPos(playerid,x,y,z+0.5);
					}
					/*User[i][DeathTimer] = SetTimerEx("PlayerDeath",3000,1,"d",i);
					User[i][Death] = 250;
					UpdateDynamic3DTextLabelText(User[i][UserTag],0xB4191DFF,User[i][pUsername]);
					TogglePlayerControllable(i, 0);*/
					
					format(large_string,sizeof large_string,"(( Death: %s (ID:%d) has been injured. (IED) ))"
					,User[i][Username],i);
					ProxDetector(30.0, playerid, large_string, GRAD4,GRAD4,GRAD4,GRAD4,GRAD4);
					KillPlayer(i);
				}
				if(IsPlayerInRangeOfPoint(i, 100, IED[id][ix], IED[id][iy], IED[id][iz]) && IED[id][ivw] == GetPlayerVirtualWorld(i))
				{
					MSG(playerid,RP,"*** BOOM! An explosion is heard.");
				}
			}
			for(new i = 1; i < MAX_VEHICLES; i++)
			{
				new Float:x,Float:y,Float:z;
				GetVehiclePos(i, x, y, z);
				if(0 < GetDistanceBetweenPoints(x, y, z, IED[id][ix], IED[id][iy], IED[id][iz]) < 16)
					SetVehicleHealth(i,250);
			}
			Iter_Remove(itIED, id);
			new tmp[IED_Data];
			IED[id] = tmp;				
		}
		return 1;
	}
	return 0;
}
CMD:plantied(playerid,params[])
{
	if(!User[playerid][Logged]) 
		return 0;
	new slot = FindPlayerItem_Name(playerid, "IED");
	if(slot == -1)
		return MSG(playerid, GOLD, "Inventory:"GR" You don't have an IED.");
	new Float:x,
		Float:y,
		Float:z;
	GetPlayerPos(playerid, x, y, z);
	new ied = Iter_Free(itIED);
	new type = 0,
		car = GetPlayerVehicleID(playerid),
		attach_to;
	
	if(car > 0)
		type = IED_TYPE_VEH,attach_to = car; 
	if(User[playerid][BusinessIN] != -1) 
		type = IED_TYPE_BIZ,attach_to = User[playerid][BusinessIN];
	if(User[playerid][HouseIN] != -1)
		type = IED_TYPE_HOUSE,User[playerid][HouseIN] = attach_to;
	if(!type)
		type = IED_TYPE_GROUND;

	IED[ied][ix] = x;
	IED[ied][iy] = y;
	IED[ied][iz] = z;
	IED[ied][ivw] = GetPlayerVirtualWorld(playerid); 
	IED[ied][iint] = GetPlayerInterior(playerid);
	IED[ied][itype] = type;
	IED[ied][iattach] = attach_to;
	IED[ied][planter] = User[playerid][UserID];
	UpdateItem(playerid, slot, UserItem[playerid][slot][Item], UserItem[playerid][slot][ItemName], -1, 100, false);

	Iter_Add(itIED, ied);

	format(large_string,sizeof large_string,"["R"IED"GR"] You have planted an IED. Type (/detonate %d) in order to detonate it.",ied);
	MSG(playerid,GRAD2,large_string);
	format(large_string,sizeof large_string,"["R"IED"GR"] Type (/myieds) to bring up a list with all the active IEDs that you have planted.");
	MSG(playerid,GRAD2,large_string);
	PlayerActionMessage(playerid,"plants an IED.");

	printf("[%s][%s][IED] %s has planted an IED. (ID: %d; VW: %d; INT: %d; TYPE: %d; ATTACH: %d; PLANTER: %d)",PasteDate(),PasteTime(),sendername(playerid),ied,IED[ied][ivw],IED[ied][iint],IED[ied][itype]
	,IED[ied][iattach],IED[ied][planter]);
	return 1;
}
CMD:myieds(playerid,params[])
{
	if(User[playerid][Logged])
	{
		print("am i even being called");
		foreach(itIED,i)
		{
			print("I E D");
			if(IED[i][planter] == User[playerid][UserID])
			{
				new type[10];
				switch(IED[i][itype])
				{
					case IED_TYPE_HOUSE: type = "House";
					case IED_TYPE_BIZ: type = "Business";
					case IED_TYPE_VEH: type = "Vehicle";
					case IED_TYPE_GROUND: type = "Exterior";
				}
				format(large_string,sizeof large_string,"[*] [IED ID: %d] [Planted to: %s]", i, type);
				MSG(playerid,GRAD2,large_string);
			}
		}
		return 1;
	}
	return 0;
}

// The data should be stored in the above array when attached objects are attached.

/*
		 case 265..267: return 1;
		 case 280..288: return 1;
		 case 300,301,302: return 1;
		case 306..311: return 1;
*/


stock PlayerEnterInterior(playerid)
{
	if(User[playerid][Logged])
	{
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("PlayerEnterUnFreeze",1200,0,"d",playerid);
	}
}
forward PlayerEnterUnFreeze(playerid);
public PlayerEnterUnFreeze(playerid)
{
	if(User[playerid][Logged])
	{
		TogglePlayerControllable(playerid, 1);
		//print("unfreez");
	}
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid,
Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
    {
		if(!User[playerid][Logged])
			return 0;
		printf("SetPlayerAttachedObject(playerid,%d,%d,%d,%f,%f,%f,%f,%f,%f,%f,%f,%f)",index,modelid,boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,fScaleX,fScaleY,fScaleZ);
        SendClientMessage(playerid, WHITE, "Attached object edition saved.");

        ao[playerid][index][ao_x] = fOffsetX;
        ao[playerid][index][ao_y] = fOffsetY;
        ao[playerid][index][ao_z] = fOffsetZ;
        ao[playerid][index][ao_rx] = fRotX;
        ao[playerid][index][ao_ry] = fRotY;
        ao[playerid][index][ao_rz] = fRotZ;
        ao[playerid][index][ao_sx] = fScaleX;
        ao[playerid][index][ao_sy] = fScaleY;
        ao[playerid][index][ao_sz] = fScaleZ;
        ao[playerid][index][ao_bone] = boneid;
        ao[playerid][index][ao_model] = modelid;

		
		new 
			ffOffsetX[10],
		    ffOffsetY[10],
		    ffOffsetZ[10],
		    ffRotX[10],
		    ffRotY[10],
      		ffRotZ[10],
			ffScaleX[10],
			ffScaleY[10],
			ffScaleZ[10];

		format(ffOffsetX,10,"%f",ao[playerid][index][ao_x]);
		format(ffOffsetY,10,"%f",ao[playerid][index][ao_y]);
		format(ffOffsetZ,10,"%f",ao[playerid][index][ao_z]);
		format(ffRotX,10,"%f",ao[playerid][index][ao_rx]);
		format(ffRotY,10,"%f",ao[playerid][index][ao_ry]);
		format(ffRotZ,10,"%f",ao[playerid][index][ao_rz]);
		format(ffScaleX,10,"%f",ao[playerid][index][ao_sx]);
		format(ffScaleY,10,"%f",ao[playerid][index][ao_sy]);
		format(ffScaleZ,10,"%f",ao[playerid][index][ao_sz]);
		//printf("Scale X %f Scale Y %f Scale Z %f (%s %s %s)", fScaleX, fScaleY, fScaleZ, ffScaleX, ffScaleY, ffScaleZ);
		format(large_string,sizeof large_string,"SELECT * FROM attachments WHERE userid = %i AND aindex = %i",User[playerid][UserID],index);
		new DBResult:Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
		    format(large_string,sizeof large_string,"UPDATE attachments SET equip = 1,aindex = %d,boneid = %d,model = %d,x = '%s',y = '%s',z = '%s',rx = '%s',ry = '%s',rz = '%s',sx = '%s',sy = '%s',sz = '%s' WHERE userid = %i AND aindex = %i"
			,index,boneid,modelid,ffOffsetX,ffOffsetY,ffOffsetZ,ffRotX,ffRotY,ffRotZ,ffScaleX,ffScaleY,ffScaleZ,User[playerid][UserID],index);
			db_query(Database, large_string);
		}
		else
		{
		    format(large_string,sizeof large_string,"INSERT INTO attachments (userid,aindex,boneid,model,x,y,z,rx,ry,rz,sx,sy,sz,equip) VALUES (%d,%d,%d,%d,'%s','%s','%s','%s','%s','%s','%s','%s','%s',1)"
			,User[playerid][UserID],index,boneid,modelid,ffOffsetX,ffOffsetY,ffOffsetZ,ffRotX,ffRotY,ffRotZ,ffScaleX,ffScaleY,ffScaleZ);
			db_query(Database, large_string);
		}
		db_free_result(Result);
        /*new i = index;
        SetPlayerAttachedObject(playerid, 
		index, modelid, boneid, ao[playerid][i][ao_x], ao[playerid][i][ao_y], ao[playerid][i][ao_z],
		 ao[playerid][i][ao_rx], ao[playerid][i][ao_ry], ao[playerid][i][ao_rz], ao[playerid][i][ao_sx], ao[playerid][i][ao_sy], ao[playerid][i][ao_sz],ao[playerid][i][ao_color]);*/
        SetPlayerAttachedObject(playerid, 
		index, modelid, boneid, ao[playerid][index][ao_x], ao[playerid][index][ao_y], ao[playerid][index][ao_z],
		 ao[playerid][index][ao_rx], ao[playerid][index][ao_ry], ao[playerid][index][ao_rz], ao[playerid][index][ao_sx], ao[playerid][index][ao_sy], ao[playerid][index][ao_sz],ao[playerid][index][ao_color]);
    }
    else
    {
        SendClientMessage(playerid,GOLD, "Info:"GR" Attached object edition not saved.");

        /*new i = index;
        SetPlayerAttachedObject(playerid, 
		index, modelid, boneid, ao[playerid][i][ao_x], ao[playerid][i][ao_y], ao[playerid][i][ao_z],
		 ao[playerid][i][ao_rx], ao[playerid][i][ao_ry], ao[playerid][i][ao_rz], ao[playerid][i][ao_sx], ao[playerid][i][ao_sy], ao[playerid][i][ao_sz],ao[playerid][i][ao_color]);*/
        SetPlayerAttachedObject(playerid, 
		index, modelid, boneid, ao[playerid][index][ao_x], ao[playerid][index][ao_y], ao[playerid][index][ao_z],
		 ao[playerid][index][ao_rx], ao[playerid][index][ao_ry], ao[playerid][index][ao_rz], ao[playerid][index][ao_sx], ao[playerid][index][ao_sy], ao[playerid][index][ao_sz],ao[playerid][index][ao_color]);
    }
    return 1;
}
ReturnGPCI(iPlayerID)
{
    new
        szSerial[41]; // 40 + \0

    gpci(iPlayerID, szSerial, sizeof(szSerial));
    return szSerial;
}
public OnPlayerCommandReceived(playerid, cmdtext[])
{
	return 1;
}
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	//printf("[%s][%s] %s %s",PasteDate(), PasteTime(), sendername(playerid), cmdtext);
	new File:pos= fopen("Logs/Command.log", io_append);
	format(large_string, sizeof large_string,"[%s][%s] %s %s\r\n", PasteDate(), PasteTime(), sendername(playerid), cmdtext);
	fwrite(pos, large_string);
	fclose(pos);
	if(!success) return MSG(playerid,GRAD2,"SERVER: Unknown command.");
	return 1;
}
CMD:ai(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new id = GetPlayerAnimationIndex(playerid);
		new str[20];
		format(str,sizeof str,"AI: %d",id);
		MSG(playerid,RED,str);
		return 1;
	}
	return 0;

}

public OnPlayerEnterDynamicArea(playerid, areaid) 
{
	for (new zone=0; zone<MAX_ZONES; zone++) 
	{
		if(areaid==zones[zone]) 
		{
			PlayAudioStreamForPlayer(playerid, "http://finalnights-rp.com/wind_blowing.mp3");
			//MSG(playerid, -1, "test");
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid) 
{
	for (new zone=0; zone<MAX_ZONES; zone++) 
	{
		if (areaid==zones[zone]) 
		{

		}
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{

    return 1;
}
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	new
	    bool:canshoot;
	switch(weaponid)
	{
	    case 22..39: canshoot = true;
	    default: canshoot = false;
	}
	if(!canshoot)
		BanPlayer(playerid,"Admin","Shooting with an invalid weapon.");
	User[playerid][WeaponEquipped_Ammo]--;
	if(User[playerid][WeaponEquipped_Ammo] < 1)
	{
		new weapon,ammo;
		GetPlayerWeaponData(playerid,GetWeaponSlot(weaponid),weapon,ammo);
		if(ammo < 0)
		{
			ResetPlayerWeapons(playerid);
			new str[124];
			new weapon_name[24];
			GetWeaponName(weaponid, weapon_name, sizeof weapon_name);
			format(str,sizeof str,"WEPHACK: %s (ID: %d) is possibly hacking weapons. (Hacked Weapon: %s)",sendername(playerid),playerid,weapon_name);
			Staff(GOLD,str);
		}
	    MSG(playerid,GOLD,"Info:"GR" You've ran out of ammo. Your weapon is not erased, you can store it and retrieve ammo for later use.");
	}
	if(User[playerid][WeaponEquipped] == WEAPON_LAUNCHER)
	{
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid,x,y,z);
		new Float:dist = GetDistanceBetweenPoints(x, y, z, fX, fY, fZ);
	    if(hittype == 0)
            CreateExplosion(fX,fY,fZ,12,5);
		else if(hittype == 2)
		{
		    new Float:vvx,Float:vvy,Float:vvz;
		    GetVehiclePos(hitid,vvx,vvy,vvz);
		    CreateExplosion(vvx,vvy,vvz,0,5);
		}
		new str[100];
		format(str,sizeof str,"d%f",dist);
		MSG(playerid,GREEN,str);
	}
	//SetPlayerPos(playerid,fX,fY,fZ);
    return 1;
}



// Business System starts from here

/*enum BUSINESS_DATA
{
	bowner,
	busid,
	Float:bx,
	Float:by,
	Float:bz,
	Float:bxi,
	Float:byi,
	Float:bzi,
	bvw,
	bvwi,
	bint,
	binti,
	btype,
	bname[40],
	bprice

};

// Declare "db_result" and select all rows and columns from "spawn_list"
new DBResult:db_result = db_query(db_handle, "SELECT * FROM `spawn_list` WHERE 1;");

// Print the amount of columns selected
printf("Selected columns: %d", db_num_fields(db_result));

// Do...
do
{
	// ...
}

// While next row has been fetched
while(db_next_row(db_handle));

// Frees result
db_free_result(db_result);
// ...
*/
stock LoadBiz()
{
	new id = 1,field[64],query[150];
 	new DBResult: Result = db_query(Database, "SELECT * FROM business");
	do
	{
		if(db_num_rows(Result))
		{
		    id = db_get_field_assoc_int(Result,"bid");
			B[id][bowner] = db_get_field_assoc_int(Result, "owner");
			db_get_field_assoc(Result, "x",field, 10);
			B[id][bx] = floatstr(field);
			db_get_field_assoc(Result, "y",field, 10);
			B[id][by] = floatstr(field);
			db_get_field_assoc(Result, "z",field, 10);
			B[id][bz] = floatstr(field);
			db_get_field_assoc(Result, "xi",field, 10);
			B[id][bxi] = floatstr(field);
			db_get_field_assoc(Result, "yi",field, 10);
			B[id][byi] = floatstr(field);
			db_get_field_assoc(Result, "zi",field, 10);
			B[id][bzi] = floatstr(field);
			B[id][bvw] = db_get_field_assoc_int(Result, "vw");
			B[id][bvwi] = db_get_field_assoc_int(Result, "vwi");
			B[id][bint] = db_get_field_assoc_int(Result, "interior");
			B[id][binti] = db_get_field_assoc_int(Result, "interiori");
			B[id][btype] = db_get_field_assoc_int(Result, "type");
			B[id][bprice] = db_get_field_assoc_int(Result, "price");
			B[id][bgov] = db_get_field_assoc_int(Result, "gov");
			B[id][bsafe] = db_get_field_assoc_int(Result, "safe");
			B[id][bicon] = db_get_field_assoc_int(Result, "icon");
			if(B[id][bicon] != -1)
				B[id][bmap] = CreateDynamicMapIcon(B[id][bx],B[id][by],B[id][bz], B[id][bicon], -1);
			if(db_get_field_assoc_int(Result, "gas") == 1)
				B[id][bgas] = id;
			db_get_field_assoc(Result,"name",B[id][bname], 64);
			B[id][baddress] = db_get_field_assoc_int(Result,"address");
			printf("[business] %s has been loaded.",B[id][bname]);
			//format(string,sizeof string,"FOR SALE!\n"BL"Business\n"W"%s\n"BL"ID:"W" %i\n"BL"Price:"W" $%i",name,i,B[i][bprice]); //FOR SALE
			//format(string,sizeof string,""BL"Business\n"W"%s\n"BL"ID:"W" %i",name,i,B[i][bprice]); // OWNED
			if(B[id][bowner])
			{
				format(query,sizeof query,""BL"Business\n"W"%s\n"BL"ID:"W" %i",B[id][bname],id,B[id][bprice]);
			}
			else
			{
			    if(B[id][bgov] == 1)
				{
					format(query,sizeof query,""W"%s\n"BL"ID:"W" %i",B[id][bname],id,B[id][bprice]);
				}
				else
				{
			    	format(query,sizeof query,"FOR SALE!\n"BL"Business\n"W"%s\n"BL"ID:"W" %i\n"BL"Price:"W" $%i",B[id][bname],id,B[id][bprice]);
				}
			}
			B[id][BLabel] = CreateDynamic3DTextLabel(query,SOLIDWHITE,B[id][bx],B[id][by],B[id][bz],20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,B[id][bvw],B[id][bint]);
			Iter_Add(Biz, id);
		}
		else break;
	}
	while(db_next_row(Result));
	db_free_result(Result);
}
stock LoadProps()
{
	new id = 1,field[64],query[150];
 	new DBResult: Result = db_query(Database, "SELECT * FROM props");
	do
	{
		if(db_num_rows(Result))
		{
		    id = db_get_field_assoc_int(Result,"pid");
			P[id][powner] = db_get_field_assoc_int(Result, "owner");
			db_get_field_assoc(Result, "x",field, 10);
			P[id][px] = floatstr(field);
			db_get_field_assoc(Result, "y",field, 10);
			P[id][py] = floatstr(field);
			db_get_field_assoc(Result, "z",field, 10);
			P[id][pz] = floatstr(field);
			db_get_field_assoc(Result, "xi",field, 10);
			P[id][pxi] = floatstr(field);
			db_get_field_assoc(Result, "yi",field, 10);
			P[id][pyi] = floatstr(field);
			db_get_field_assoc(Result, "zi",field, 10);
			P[id][pzi] = floatstr(field);
			P[id][pvw] = db_get_field_assoc_int(Result, "vw");
			P[id][pvwi] = db_get_field_assoc_int(Result, "vwi");
			P[id][pint] = db_get_field_assoc_int(Result, "interior");
			P[id][pinti] = db_get_field_assoc_int(Result, "interiori");
			P[id][plock] = db_get_field_assoc_int(Result, "lock");
			P[id][ptax] = db_get_field_assoc_int(Result, "tax");
			P[id][paddress] = db_get_field_assoc_int(Result, "address");
			P[id][pfac] = db_get_field_assoc_int(Result,"faction");
			query[0] = db_get_field_assoc_int(Result,"lab");
			if(query[0] == 1) 
				P[id][druglab] = true;
			else P[id][druglab] = false;
			db_get_field_assoc(Result,"name",P[id][pname], 64);
			printf("[prop] Property ID %d has been loaded.",id);
			P[id][pexist] = true;
			if(!isnull(P[id][pname]))
			{
				format(query,sizeof query,""MAR"(ID: %d)\n"W"%s\n"MAR"Address:"W" %d",id,P[id][pname],P[id][paddress]);
				P[id][pLabel] = CreateDynamic3DTextLabel(query,SOLIDWHITE,P[id][px],P[id][py],P[id][pz],20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,P[id][pvw],P[id][pint]);
			}
			//P[id][pLabel] = CreateDynamic3DTextLabel(query,SOLIDWHITE,P[id][px],P[id][py],P[id][pz],20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,P[id][pvw],P[id][pint]);
			Iter_Add(Props, id);
		}
		else break;
	}
	while(db_next_row(Result));
	db_free_result(Result);
}
stock LoadHou()
{
	new id = 1,field[64],query[150];
 	new DBResult: Result = db_query(Database, "SELECT * FROM house");
	do
	{
		if(db_num_rows(Result))
		{
		    id = db_get_field_assoc_int(Result,"hid");
			H[id][howner] = db_get_field_assoc_int(Result, "owner");
			db_get_field_assoc(Result, "x",field, 10);
			H[id][hx] = floatstr(field);
			db_get_field_assoc(Result, "y",field, 10);
			H[id][hy] = floatstr(field);
			db_get_field_assoc(Result, "z",field, 10);
			H[id][hz] = floatstr(field);
			db_get_field_assoc(Result, "xi",field, 10);
			H[id][hxi] = floatstr(field);
			db_get_field_assoc(Result, "yi",field, 10);
			H[id][hyi] = floatstr(field);
			db_get_field_assoc(Result, "zi",field, 10);
			H[id][hzi] = floatstr(field);
			H[id][hvw] = db_get_field_assoc_int(Result, "vw");
			H[id][hvwi] = db_get_field_assoc_int(Result, "vwi");
			H[id][hint] = db_get_field_assoc_int(Result, "interior");
			H[id][hinti] = db_get_field_assoc_int(Result, "interiori");
			H[id][hlock] = db_get_field_assoc_int(Result, "lock");
			H[id][hrent] = db_get_field_assoc_int(Result, "rent");
			H[id][hrentable] = db_get_field_assoc_int(Result, "rentable");
			H[id][hid] = db_get_field_assoc_int(Result, "hid");
			//H[id][htype] = db_get_field_assoc_int(Result, "type");
			H[id][hprice] = db_get_field_assoc_int(Result, "price");
			H[id][hsafe] = db_get_field_assoc_int(Result, "safe");
			H[id][hlights] = false;
			H[id][haddress] = db_get_field_assoc_int(Result, "address");
            H[id][hapartment_linked] = db_get_field_assoc_int(Result, "apartment");
			//H[id][hgov] = db_get_field_assoc_int(Result, "gov");
			db_get_field_assoc(Result,"name",H[id][hname], 64);
			printf("[house] %s (address: %d) has been loaded. (Apartment: %d)",H[id][hname],H[id][haddress],H[id][hapartment_linked]);
			//format(string,sizeof string,"FOR SALE!\n"BL"Business\n"W"%s\n"BL"ID:"W" %i\n"BL"Price:"W" $%i",name,i,H[i][hprice]); //FOR SALE
			//format(string,sizeof string,""BL"Business\n"W"%s\n"BL"ID:"W" %i",name,i,H[i][hprice]); // OWNED
			if(H[id][howner])
			{
			    if(!H[id][hrentable])
					format(query,sizeof query,""G"House\n"W"%s",H[id][hname]);
				else format(query,sizeof query,""G"House\n"W"%s\nRent: %d",H[id][hname],H[id][hrent]);
			}
			else
			{
			    	format(query,sizeof query,"FOR SALE!\n"G"House\n"W"%s\n"G"ID:"W" %i\n"G"Price:"W" $%i",H[id][hname],id,H[id][hprice]);
			}
			H[id][hexist] = true;
			H[id][HLabel] = CreateDynamic3DTextLabel(query,SOLIDWHITE,H[id][hx],H[id][hy],H[id][hz],20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,H[id][hvw],H[id][hint]);
			Iter_Add(Houses, id);
		}
		else break;
	}
	while(db_next_row(Result));
	db_free_result(Result);
}
stock LoadCarMod(mcar)
{
	new query[100];
	format(query, sizeof query, "SELECT * FROM carmods WHERE car = %d", mcar);
	new DBResult:Result = db_query(Database, query);
	do
	{
		if(db_num_rows(Result))
		{
			new component = db_get_field_assoc_int(Result, "mod");
			AddVehicleComponent(mcar, component);
			/*for(new i = 0, j = GetVehiclePoolSize(); i <= j; i++)
			{
				AddVehicleComponent(i, component);
			}*/
		}
		else break;
	}
 	while(db_next_row(Result));
	db_free_result(Result);		
}
stock LoadCarMods()
{
	new DBResult:Result = db_query(Database, "SELECT * FROM carmods");
	do
	{
		//format(query,sizeof(query),"SELECT * FROM cars WHERE vid = %d",id);
		//new DBResult:Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
			new vehicle = db_get_field_assoc_int(Result, "car");
			new component = db_get_field_assoc_int(Result, "mod");
			for(new i = 0, j = GetVehiclePoolSize(); i <= j; i++)
			{
				if(V[i][dataid] == vehicle)
				{
					AddVehicleComponent(i, component);
				}
				else continue;
			}
		}
		else break;
	}
 	while(db_next_row(Result));
	db_free_result(Result);	
}

//"INSERT INTO actors (skin, x, y, z, rot, vw, interior, nametag) VALUES (%d, '%s', '%s', '%s', '%s', %d, %d, '%s')"
stock LoadLabels()
{
	new DBResult: Result = db_query(Database, "SELECT * FROM labels");
	new timescalled;
	do
	{
		if(db_num_rows(Result))
		{
			new id = Iter_Free(Labels);
			new sX[10],
				sY[10],
				sZ[10],
				name[126]
			;
			db_get_field_assoc(Result, "x", sX, 10);
			db_get_field_assoc(Result, "y", sY, 10);
			db_get_field_assoc(Result, "z", sZ, 10);
			db_get_field_assoc(Result, "labelname", name, 124);
			printf("[label] sX %s sY %s sZ %s name %s", sX, sY, sZ, name);
			Label[id][labelx] = floatstr(sX);
			Label[id][labely] = floatstr(sY);
			Label[id][labelz] = floatstr(sZ);
			Label[id][labelvw] = db_get_field_assoc_int(Result, "vw");
			Label[id][labelinterior] = db_get_field_assoc_int(Result, "interior");
			Label[id][labelcreator] = db_get_field_assoc_int(Result, "userid");
			format(large_string, sizeof large_string,"%s (%d)", name, id);
			Label[id][labeltag] = CreateDynamic3DTextLabel(large_string,RP,Label[id][labelx],Label[id][labely],Label[id][labelz],LABEL_DRAW_DISTANCE,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, Label[id][labelvw], Label[id][labelinterior]);
			Iter_Add(Labels, Iter_Free(Labels));
			timescalled++;
		}
		else break;
	}
 	while(db_next_row(Result));
	db_free_result(Result);
	printf("---------------------------- Labels Loaded: %d",timescalled);	
}
stock LoadNPCSheet(npcid, cs_npcname[])
{
	new string[60],
		trait[MAX_TRAIT_NAME];
	format(string,sizeof string,"SELECT * FROM npc_sheet WHERE npcname = '%s'", cs_npcname);
	new DBResult: Result = db_query(Database,string);
	do
	{
		if(!db_num_rows(Result)) break;
		db_get_field_assoc(Result, "trait", trait, MAX_TRAIT_NAME);
		new value[31];
		db_get_field_assoc(Result, "value", value, 30);
		if(IsNumeric(value))
		{
			value[0] = strval(value);
			for(new i = 0; i < MAX_NPC_TRAITS; i++)
			{
				if(isnull(npctrait[npcid][i]))
				{
					strcat(npctrait[npcid][i], trait);
					npctrait_value[npcid][i] = value[0];
					break;
				}
				else continue;
			}
			printf("[npc_sheetload_integer] Trait: %s; Value: %d",trait,value[0]);
		}
		else
		{
			for(new i = 0; i < MAX_NPC_TRAITS; i++)
			{
				if(isnull(npctrait[npcid][i]))
				{
					strcat(npctrait[npcid][i], trait);
					strcat(npctrait_string_value[npcid][i], value);
					break;
				}
				else continue;
			}
			printf("[npc_sheetload_string] Trait: %s; Value: %s",trait,value);			
		}
	}
	while(db_next_row(Result));
	db_free_result(Result);
	printf("[loadsheet] Successfully loaded for %s.",cs_npcname);
	return 1;
}
stock LoadNPCs()
{
	new DBResult: Result = db_query(Database, "SELECT * FROM actors");
	new timescalled;
	do
	{
		if(db_num_rows(Result))
		{
			new dynamicid,
				skin = db_get_field_assoc_int(Result, "skin"),
				Float:x,
				Float:y,
				Float:z,
				Float:rot,
				sX[10],
				sY[10],
				sZ[10],
				sRot[10],
				name[MAX_PLAYER_NAME],
				interior = db_get_field_assoc_int(Result, "interior"),
				vw = db_get_field_assoc_int(Result, "vw")
			;
			db_get_field_assoc(Result, "x", sX, 10);
			db_get_field_assoc(Result, "y", sY, 10);
			db_get_field_assoc(Result, "z", sZ, 10);
			db_get_field_assoc(Result, "rot", sRot, 10);
			db_get_field_assoc(Result, "nametag", name, 24);
			x = floatstr(sX);
			y = floatstr(sY);
			z = floatstr(sZ);
			rot = floatstr(sRot);
			dynamicid = CreateDynamicActor(skin, x, y, z, rot, 1, 100, vw, interior);
			NPC[dynamicid][npc_dynamicid] = dynamicid;
			NPC[dynamicid][npc_x] = x;
			NPC[dynamicid][npc_y] = y;
			NPC[dynamicid][npc_z] = z;
			NPC[dynamicid][npc_rot] = rot;
			NPC[dynamicid][npc_vw] = vw;
			NPC[dynamicid][npc_interior] = interior;
			format(NPC[dynamicid][npc_name], 24, "%s", name);
			NPC[dynamicid][npc_skin] = skin;
			new npcname[30];
			format(npcname, 64, "%s (%d)", name, dynamicid);
			NPC[dynamicid][npc_nametag] = CreateDynamic3DTextLabel(npcname,SOLIDWHITE,x, y, z+1.1,LABEL_DRAW_DISTANCE,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1, vw, interior);
			Iter_Add(NPCs, Iter_Free(NPCs));
			timescalled++;

			LoadNPCSheet(dynamicid, name);
		}
		else break;
	}
 	while(db_next_row(Result));
	db_free_result(Result);
	printf("---------------------------- NPCs Loaded: %d",timescalled);	
}
stock LoadCars()
{
	new field[64];
	//format(query,sizeof(query),"SELECT * FROM cars WHERE vid = %d",id);
	//new DBResult:Result = db_query(Database, query);
	//new DBResult:GResult = db_query(Database, "SELECT * FROM cars");
	//new rows = db_num_rows(GResult);
	//printf("Rows: %d",rows);
	new carid,
		ddataid,
		Float:x,
		Float:y,
		Float:z,
		Float:rot,
		color1,
		color2,
		model,
		owner,
		ssiren,
		fac,
		fue,
		interior,
		vw,
		ren,
		garage,
		lock;
	new timescalled;
	new DBResult:Result = db_query(Database, "SELECT * FROM cars");
	do
	{
		//format(query,sizeof(query),"SELECT * FROM cars WHERE vid = %d",id);
		//new DBResult:Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
			ddataid = db_get_field_assoc_int(Result,"vid");
			db_get_field_assoc(Result, "x",field, 10);
			x = floatstr(field);
			db_get_field_assoc(Result, "y",field, 10);
			y = floatstr(field);
			db_get_field_assoc(Result, "z",field, 10);
			z = floatstr(field);
			db_get_field_assoc(Result, "rot",field, 10);
			rot = floatstr(field);
			color1 = db_get_field_assoc_int(Result,"color1");
			color2 = db_get_field_assoc_int(Result,"color2");
			new paintjob = db_get_field_assoc_int(Result,"paintjob");
			ssiren = db_get_field_assoc_int(Result,"siren");
			owner = db_get_field_assoc_int(Result,"owner");
			model = db_get_field_assoc_int(Result,"model");
			fac = db_get_field_assoc_int(Result,"faction");
			fue = db_get_field_assoc_int(Result,"fuel");
			ren = db_get_field_assoc_int(Result,"rent");
			vw = db_get_field_assoc_int(Result,"vw");
            interior = db_get_field_assoc_int(Result,"interior");
            garage = db_get_field_assoc_int(Result,"garage");
            lock = db_get_field_assoc_int(Result,"trunklock");

			carid = CreateVehicle(model,x,y,z,rot,color1,color2,-1,ssiren);
			ChangeVehiclePaintjob(carid, paintjob);
		 	if(vw > 0)
		 	{
		 		LinkVehicleToInterior(carid,interior);
				SetVehicleVirtualWorld(carid,vw);
			}

			printf("[vehicle] %d %f %f %f %f %d %d %d %d %d %d [ingame %d]",ddataid,x,y,z,rot,model,color1,color2,ssiren,paintjob,owner, carid);
			printf("[vehicle] CAR INTERIOR: %d; CAR VW: %d",interior,vw);

			V[carid][dataid] = ddataid;
			V[carid][vx] = x;
			V[carid][vy] = y;
			V[carid][vz] = z;
			V[carid][vrot] = rot;
			V[carid][cowner] = owner;
			V[carid][vmodel] = model;
			V[carid][vc1] = color1;
			V[carid][vc2] = color2;
			V[carid][siren] = ssiren;
			V[carid][vfac] = fac;
			V[carid][fuel] = fue;
			V[carid][vrent] = ren;
			V[carid][vvw] = vw;
			V[carid][vint] = interior;
			V[carid][vimpound] = db_get_field_assoc_int(Result, "impound");
			V[carid][trunklock] = lock;
			db_get_field_assoc(Result, "plate", V[carid][vplate], 24);
			if(isnull(V[carid][vplate]))
			{
				format(V[carid][vplate], 24, "LS%d", 1000+random(1000));
			}
			SetVehicleNumberPlate(carid, V[carid][vplate]);
			if(garage > 0)
			{
				V[carid][garagein] = garage;
				Ga[garage][carin]++;
			}

			//if(owner != 0)
			//SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective)
			SetVehicleParamsEx(carid, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_ON/*doors*/, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF); //VEHICLE_PARAMS_ON
			if(V[carid][vrent] > 0 || GetVehicleType(carid) == BIKE)
			{
				SetVehicleParamsEx(carid, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF);
			}
			
			if(V[carid][vimpound] > gettime())
				SetVehicleVirtualWorld(carid, 1);
			timescalled++;
		}
		else break;
	}
 	while(db_next_row(Result));
	db_free_result(Result);
	printf("---------------------------- Cars Loaded: %d",timescalled);

}

//need to understand how this works to be able to make the wolf when attacking looks at me properly 
stock GetXYZInFrontOfPlayer(playerid, &Float:x, &Float:y, &Float:z, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid))
	{
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

stock GetXYZBehindOfPlayer(playerid, &Float:x, &Float:y, &Float:z, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid))
	{
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x -= (distance * floatsin(-a, degrees));
	y -= (distance * floatcos(-a, degrees));
}

stock GetXYZInFrontOfVehicle(vehicleid, &Float:x, &Float:y, &Float:z, Float:distance)
{
	new Float:a;
	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

stock GetXYZBehindOfVehicle(vehicleid, &Float:x, &Float:y, &Float:z, Float:distance)
{
	new Float:a;
	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);
	x -= (distance * floatsin(-a, degrees));
	y -= (distance * floatcos(-a, degrees));
}

stock GetXYZDegreesOfVehicle(vehicleid, &Float:x, &Float:y, &Float:z, Float:distance, Float:angle)
{
	new Float:a;
	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);
	a += angle;
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

stock GetVehicleOwner(vhid)
{
	new query[125];
	format(query,sizeof query,"SELECT owner FROM cars WHERE vid = %d",V[vhid][dataid]);
	new DBResult: Result = db_query(Database, query);
	if(db_num_rows(Result))
	{
		new id;
		id = db_get_field_assoc_int(Result,"owner");
		return id;
	}
	return -1;
}
CMD:vowner(playerid, params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		return SFM(playerid, -1, "Owner User ID: %d", GetVehicleOwner(strval(params)));
	}
	return -1;
}
stock GetVehicleModifier(vehicleid)
{
	new modelid = GetVehicleModel(vehicleid);
	new modifier;
	switch(modelid)
	{
		case 431,532,454,453,484,573: modifier = 3;
		case 463,461,462,586,468,481,581,509,471,521: modifier = -1;//Bikes
		case 444,409,487,446,483,508,563,403,417,488,498,515,609,593: modifier = 1;
	}
	return modifier;
}

#define VEHICLE_WIDTH	2.0
#define VEHICLE_TRIGGER_RANGE	2.0

stock GetVehicleInFrontOfPlayer(playerid)
{
	new modifier;
    new Float:x, Float:y, Float:z, Float:vvx, Float:vvy, Float:vvz, Float:vxf, Float:vyf, Float:vzf, Float:vxb, Float:vyb, Float:vzb;
    GetXYZInFrontOfPlayer(playerid, x, y, z, 1.0);
    for(new i = 1; i < MAX_VEHICLES; i++)
    {
        modifier = GetVehicleModifier(i);
        GetVehiclePos(i, vvx, vvy, vvz);
        if(GetDistanceBetweenPoints(x, y, z, vvx, vvy, vvz) < VEHICLE_TRIGGER_RANGE+modifier)
        {
           	return i;
        }
        else
        {
            GetXYZInFrontOfVehicle(i, vxf, vyf, vzf, VEHICLE_WIDTH+modifier);
        	GetXYZBehindOfVehicle(i, vxb, vyb, vzb, VEHICLE_WIDTH+modifier);
            if(GetDistanceBetweenPoints(x, y, z, vxf, vyf, vzf) < VEHICLE_TRIGGER_RANGE+modifier || GetDistanceBetweenPoints(x, y, z, vxb, vyb, vzb) < VEHICLE_TRIGGER_RANGE+modifier)
            {
	           	return i;
			}
		}
    }
    return INVALID_VEHICLE_ID;
}
stock IsPlayerByHood(playerid, vehicleid)//Cars only
{
    new Float: modifier = GetVehicleModifier(vehicleid);
	new Float: x, Float:y, Float:z;
	GetXYZInFrontOfVehicle(vehicleid, x, y, z, VEHICLE_WIDTH+modifier);
 	if(IsPlayerInRangeOfPoint(playerid, VEHICLE_TRIGGER_RANGE+modifier, x, y, z))
 	{
 	    return true;
 	}
  	return false;
}

stock IsPlayerByTrunk(playerid, vehicleid)//Cars only
{
    new Float: modifier = GetVehicleModifier(vehicleid);
	new Float: x, Float:y, Float:z;
	new modelid = GetVehicleModel(vehicleid);
	switch(modelid)
	{
	    case 468, 568, 424, 463, 461, 462, 481, 581, 471, 509, 521, 531, 586: return false;//Sanchez, Bandito, etc. . .
	}
	GetXYZBehindOfVehicle(vehicleid, x, y, z, VEHICLE_WIDTH+modifier);
 	if(IsPlayerInRangeOfPoint(playerid, VEHICLE_TRIGGER_RANGE+modifier, x, y, z))
 	{
 	    return true;
 	}
  	return false;
}

stock GetWindowInFrontOfPlayer(playerid, vehicleid)
{
	new Float:x, Float:y, Float:z, Float:px, Float:py, Float:pz, Float:dl, Float:dr;//distance is 3, 90 and 270 degrees
	GetPlayerPos(playerid, px, py, pz);
    GetXYZDegreesOfVehicle(vehicleid, x, y, z, 3, 90);
    dl = GetDistanceBetweenPoints(x, y, z, px, py, pz);
    GetXYZDegreesOfVehicle(vehicleid, x, y, z, 3, 270);
    dr = GetDistanceBetweenPoints(x, y, z, px, py, pz);
    if(dl < dr)
    {
        return WINDOWL;
    }
    else
    {
        return WINDOWR;
	}
}

Dialog:vTow(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid input.");
		new vid = strval(inputtext);
		if(User[playerid][UserID] != V[vid][cowner])
			return MSG(playerid,GOLD,"ERROR:"GR" You do not own this vehicle.");
		if(User[playerid][uMoney] < 100)
		    return MSG(playerid,GOLD,"ERROR:"GR" You cannot afford the services.");
        SetTimerEx("TowVehicle",15*1000,0,"dsd",playerid,User[playerid][Username],vid);
        MSG(playerid,GREEN,"Info:"GR" You have paid for the towing services, your vehicle will be towed in fifteen seconds.");
        GiveMoney(playerid,-100);
		User[playerid][Towing] = true;
	}
	return 1;
}


public TowVehicle(playerid,playername[MAX_PLAYER_NAME],vehicleid)
{
	new bool:occup = false;

	foreach(Player,i)
	{
	    if(GetPlayerVehicleID(i) == vehicleid)
	    {
			occup = true;
			break;
		}
	}
	if(!occup)
	{
		RespawnVehicle(vehicleid);
		LinkVehicleToInterior(vehicleid,V[vehicleid][vint]);
		SetVehicleVirtualWorld(vehicleid,V[vehicleid][vvw]);
	}
	if(IsPlayerConnected(playerid) && !strcmp(User[playerid][Username],playername))
	{
		if(occup)
 		{
		 	MSG(playerid,GOLD,"ERROR:"GR" Your vehicle is occupied.");
		 	GiveMoney(playerid,100);
		 	User[playerid][Towing] = false;
			return 0;
		}
		MSG(playerid,GREEN,"Info:"GR" Your vehicle has been successfully towed.");
 		User[playerid][Towing] = false;
	}
	return vehicleid;
}
Dialog:dCarTrunk(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(User[playerid][gVar], engine, lights, alarm, doors, bonnet, boot, objective);
		switch(listitem)
		{
		    case 0: // open close
		    {
 	    		if(V[User[playerid][gVar]][trunklock])
					return MSG(playerid,GOLD,"ERROR:"GR" This trunk is locked!");
				if(boot == VEHICLE_PARAMS_OFF) // trunk closed
				{
					SetVehicleParamsEx(User[playerid][gVar], engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_ON, objective);
					PlayerActionMessageBubble(playerid,"opens the trunk.");
				}
				else
				{
					SetVehicleParamsEx(User[playerid][gVar], engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_OFF, objective);
					PlayerActionMessageBubble(playerid,"closes the trunk.");
				}
				cmd_v(playerid,"trunk");
			}
			case 1: // lock unlock
			{
			    if(boot == VEHICLE_PARAMS_ON)
			    {
			        MSG(playerid,GOLD,"ERROR:"GR" Close the trunk first!");
					return cmd_v(playerid,"trunk");
			    }
				new bool:can;
				if(User[playerid][faction] == V[User[playerid][gVar]][vfac]) can = true;
				else if(User[playerid][UserID] == V[User[playerid][gVar]][cowner]) can = true;
	   			else if(User[playerid][vrented] == User[playerid][gVar]) can = true;
	   			if(!can) return MSG(playerid,GOLD,"ERROR:"GR" You don't have access.");
				if(V[User[playerid][gVar]][trunklock])
				{
				    PlayerActionMessageBubble(playerid,"unlocks the trunk.");
				    V[User[playerid][gVar]][trunklock] = 0;
				}
				else
				{
				    PlayerActionMessageBubble(playerid,"locks the trunk.");
				    V[User[playerid][gVar]][trunklock] = 1;
				}
				format(large_string,sizeof large_string,"UPDATE cars SET trunklock = %d WHERE vid = %d",V[User[playerid][gVar]][dataid], V[User[playerid][gVar]][trunklock]);
				db_query(Database, large_string);
			}
			case 2: // contents
			{
				if(boot == VEHICLE_PARAMS_OFF) return MSG(playerid,GOLD,"ERROR:"GR" The trunk is closed!");
				format(large_string,sizeof large_string,"SELECT * FROM cartrunk WHERE vid = %d",V[User[playerid][gVar]][dataid]);
				new DBResult: Result = db_query(Database, large_string);
				large_string[0] = EOS;
				MSG(playerid,GRAD2,"|____ ["G"Trunk Contents"GR"] ____|");
				do
				{
					if(db_num_rows(Result))
					{
						new thing = db_get_field_assoc_int(Result,"thing");
						new type = db_get_field_assoc_int(Result,"type");
						new amount = db_get_field_assoc_int(Result,"amount");
						// type1 = gun
						// type2 = drug
						if(type == 1)
						{
						    new wep[24];
							GetWeaponName(thing, wep, sizeof wep);
							format(large_string,sizeof large_string,"Weapon: %s (%d Ammo)",wep,amount);
						}
						else if(type == 2)
						{
						    format(large_string,sizeof large_string,"Drug: %s (Amount: %d)","Not Scripted",amount);
						}
						else if(type == 3)
						{
							new name[MAX_ITEM_NAME];
							db_get_field_assoc(Result, "itemname", name, MAX_ITEM_NAME);
							format(large_string,sizeof large_string,"Item: %s (%d)", name, amount);
						}
						MSG(playerid,GRAD3,large_string);
					}
					else break;
				}
				while(db_next_row(Result));
				if(isnull(large_string)) MSG(playerid, GRAD3, "None");
				MSG(playerid,GRAD2,"|________________________|");
				db_free_result(Result);
			}
			case 3: // store wep
			{
			    if(boot == VEHICLE_PARAMS_OFF) return MSG(playerid,GOLD,"ERROR:"GR" This trunk is closed.");
			    if(!User[playerid][WeaponEquipped]) return MSG(playerid,GOLD,"ERROR:"GR" You aren't wielding a weapon.");
			    format(large_string,sizeof large_string,"SELECT 1 FROM cartrunk WHERE vid = %d",V[User[playerid][gVar]][dataid]);
				new DBResult: Result = db_query(Database, large_string);
				new count = db_num_rows(Result);
				db_free_result(Result);
				new modifier = 0;
				switch(GetVehicleType(User[playerid][gVar]))
				{
				    case CAR: modifier = DEFAULT_TRUNK_SLOTS;
				    case BIKE: modifier = 1;
					case MOTORBIKE: modifier = 2;
				}

				if(count >= modifier)
					return MSG(playerid,GOLD,"Info:"GR" This trunk is full.");
				format(large_string,sizeof large_string,"INSERT INTO cartrunk (vid,thing,amount,type) VALUES (%d,%d,%d,1)"
				,V[User[playerid][gVar]][dataid],User[playerid][WeaponEquipped],User[playerid][WeaponEquipped_Ammo]);
				db_query(Database, large_string);


				new wep[24];
				GetWeaponName(User[playerid][WeaponEquipped],wep, sizeof wep);
				format(large_string,sizeof large_string,"stores their %s in the trunk.",wep);
				PlayerActionMessageBubble(playerid,large_string, 1);
				ResetPlayerWeapons(playerid);
				User[playerid][WeaponEquipped] = 0;
				User[playerid][WeaponEquipped_Ammo] = 0;
				new ammo[11],query[124];
				format(ammo,sizeof ammo,"%d,%d,0",User[playerid][uWeapon_Ammo][0],User[playerid][uWeapon_Ammo][1]);
				format(wep,sizeof wep,"%d,%d,%d",User[playerid][uWeapon][0],User[playerid][uWeapon][1],User[playerid][WeaponEquipped]);
				format(query,sizeof query,"UPDATE users SET weapon = '%s',ammo = '%s' WHERE userid = %d",wep,ammo,User[playerid][UserID]);
				db_query(Database, query);
			}
			case 4: // take wep
			{
				if(boot == VEHICLE_PARAMS_OFF) return MSG(playerid,GOLD,"ERROR:"GR" The trunk is closed!");
				format(large_string,sizeof large_string,"SELECT * FROM cartrunk WHERE vid = %d",V[User[playerid][gVar]][dataid]);
				new DBResult: Result = db_query(Database, large_string);
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						new thing = db_get_field_assoc_int(Result,"thing");
						new type = db_get_field_assoc_int(Result,"type");
						new amount = db_get_field_assoc_int(Result,"amount");
						new takeid = db_get_field_assoc_int(Result,"takeid");
						// type1 = gun
						// type2 = drug
						if(type == 1)
						{
						    new wep[24];
							GetWeaponName(thing, wep, sizeof wep);
							format(large_string,sizeof large_string,"%s%s (%d Ammo) (TID: %d)\n",large_string,wep,amount,takeid);
						}
						else if(type == 2)
						{
						    format(large_string,sizeof large_string,"%s%s (Amount: %d) (TID: %d)\n",large_string,"Not Scripted",amount,takeid);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				db_free_result(Result);
				new header[65];
				format(header,sizeof header,"%s's Trunk Contents",GetVehicleName(GetVehicleModel(User[playerid][gVar])));
				Dialog_Show(playerid,dCarTrunk_Take,DIALOG_STYLE_LIST,header,large_string,"Select","Cancel");
			}
			case 5: // store inv
			{
			    if(boot == VEHICLE_PARAMS_OFF) return MSG(playerid,GOLD,"ERROR:"GR" This trunk is closed.");
				TogglePlayerControllable(playerid, 1);
				large_string[0] = EOS;
				for(new i = 0; i < MAX_INVENTORY; i++)
				{
					if(UserItem[playerid][i][Value] > 0)
						format(large_string, sizeof large_string, "%s%d. %s (%d)\n", large_string, i+1, UserItem[playerid][i][ItemName], UserItem[playerid][i][Value]);
					else format(large_string, sizeof large_string, "%s"GR"%d. Empty Slot"W"\n", large_string, i+1, UserItem[playerid][i][ItemName], UserItem[playerid][i][Value]);
				}
				Dialog_Show(playerid, dCarStoreInv, DIALOG_STYLE_LIST, sendernameEx(playerid), large_string, "Close", "");					
			}
			case 6: // take inv
			{
				if(boot == VEHICLE_PARAMS_OFF) return MSG(playerid,GOLD,"ERROR:"GR" The trunk is closed!");
				format(large_string,sizeof large_string,"SELECT * FROM cartrunk WHERE vid = %d AND type = 3",V[User[playerid][gVar]][dataid]);
				new DBResult: Result = db_query(Database, large_string);
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						new amount = db_get_field_assoc_int(Result,"amount");
						new takeid = db_get_field_assoc_int(Result,"takeid");
						new itemname[MAX_ITEM_NAME];
						db_get_field_assoc(Result, "itemname", itemname, MAX_TRAIT_NAME);
						format(large_string,sizeof large_string,"%s%s (%d) (TID: %d)\n",large_string,itemname,amount,takeid);
					}
					else break;
				}
				while(db_next_row(Result));
				db_free_result(Result);
				new header[65];
				format(header,sizeof header,"%s's Trunk Contents",GetVehicleName(GetVehicleModel(User[playerid][gVar])));
				Dialog_Show(playerid,dCarTrunk_Take,DIALOG_STYLE_LIST,header,large_string,"Select","Cancel");
				SetPVarInt(playerid, "dTakeInv", 1);
			}
		}
	}
	return 1;
}
Dialog:dCarTrunk_Take(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    Dialog_Show(playerid,dCarTrunk_TakeFinal,DIALOG_STYLE_INPUT,"Take Item","Insert the T-ID of the item you wish to take from the trunk:","Select","Cancel");
	}
	return 1;
}
Dialog:dCarTrunk_TakeFinal(playerid, response, listitem, inputtext[])
{
	new dtype = GetPVarInt(playerid, "dTakeInv");
	DeletePVar(playerid, "dTakeInv");
	if(response)
	{
		if(dtype == 1) // taking inventory items
		{
			if(!IsNumeric(inputtext))
			{
				MSG(playerid,GOLD,"ERROR:"GR" Invalid input.");
				return cmd_v(playerid,"trunk");
			}
			new takeid = strval(inputtext);
			format(large_string,sizeof large_string,"SELECT * FROM cartrunk WHERE takeid = %d AND type = 3",takeid);
			new DBResult: Result = db_query(Database, large_string);
			if(db_num_rows(Result))
			{
				new thing = db_get_field_assoc_int(Result,"thing");
				new amount = db_get_field_assoc_int(Result,"amount");
				new cid = db_get_field_assoc_int(Result,"vid");
				new name[MAX_ITEM_NAME];
				db_get_field_assoc(Result, "itemname", name, MAX_TRAIT_NAME);
				new cond = db_get_field_assoc_int(Result, "condition");
				new fake = db_get_field_assoc_int(Result, "fakeitem");
				new merg = db_get_field_assoc_int(Result, "mergable");		
				new itemid = db_get_field_assoc_int(Result, "itemid");	
				if(cid != V[User[playerid][gVar]][dataid]) return MSG(playerid,GOLD,"*** An error has occurred, repeat the process.");
				if(merg == 0)
				{			
					if(fake == 0) UpdateItem(playerid, GetInventoryFreeSlot(playerid), thing, name, amount, cond, false, false, itemid);
					else UpdateItem(playerid, GetInventoryFreeSlot(playerid), thing, name, amount, cond, false, true, itemid);
				}
				else if(merg == 1)
				{
					new pslot = FindPlayerItemFree(playerid, name);
					//SFM(playerid, -1, "pslot %d", pslot);
					if(fake == 0) UpdateItem(playerid, pslot, thing, name, amount, cond, true, false, itemid);
					else UpdateItem(playerid, pslot, thing, name, amount, cond, true, true, itemid);
				}				
				format(large_string,sizeof large_string,"DELETE FROM cartrunk WHERE takeid = %d AND type = 3",takeid);
				db_query(Database, large_string);

				PlayerActionMessageBubble(playerid, "takes an item from the trunk.");
				ApplyAnim(playerid,"BD_FIRE","wash_up",4.0,0,0,0,0,0);
			}
			else MSG(playerid,GOLD,"ERROR:"GR" Invalid ID specified.");
		}
		else if(dtype == 0)
		{
			if(User[playerid][WeaponEquipped]) return MSG(playerid,GOLD,"ERROR:"GR" You are wielding a weapon.");
			if(!IsNumeric(inputtext))
			{
				MSG(playerid,GOLD,"ERROR:"GR" Invalid input.");
				return cmd_v(playerid,"trunk");
			}
			new takeid = strval(inputtext);
			format(large_string,sizeof large_string,"SELECT type,thing,amount,vid FROM cartrunk WHERE takeid = %d AND type = 1",takeid);
			new DBResult: Result = db_query(Database, large_string);
			if(db_num_rows(Result))
			{
				new thing = db_get_field_assoc_int(Result,"thing");
				new amount = db_get_field_assoc_int(Result,"amount");
				new cid = db_get_field_assoc_int(Result,"vid");
				if(cid != V[User[playerid][gVar]][dataid]) return MSG(playerid,GOLD,"*** An error has occurred, repeat the process.");
				User[playerid][WeaponEquipped] = thing;
				User[playerid][WeaponEquipped_Ammo] = amount;
				GivePlayerWeapon(playerid,thing,amount);
				new ammo[11],wep[11],query[124];
				format(ammo,sizeof ammo,"%d,%d,0",User[playerid][uWeapon_Ammo][0],User[playerid][uWeapon_Ammo][1]);
				format(wep,sizeof wep,"%d,%d,%d",User[playerid][uWeapon][0],User[playerid][uWeapon][1],User[playerid][WeaponEquipped]);
				format(query,sizeof query,"UPDATE users SET weapon = '%s',ammo = '%s' WHERE userid = %d",wep,ammo,User[playerid][UserID]);
				db_query(Database, query);
				format(large_string,sizeof large_string,"DELETE FROM cartrunk WHERE takeid = %d AND type = 1",takeid);
				db_query(Database, large_string);
				PlayerActionMessageBubble(playerid, "takes a weapon from the trunk.");
				ApplyAnim(playerid,"BD_FIRE","wash_up",4.0,0,0,0,0,0);
			}
			else MSG(playerid,GOLD,"ERROR:"GR" Invalid ID specified");
		}
	}
	else cmd_v(playerid,"trunk");
	return 1;
}
Dialog:dCustomPlay(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new vid = GetPlayerVehicleID(playerid);
		if(vid == 0) return 0;
		if(isnull(inputtext)) return 0;
		format(V[vid][vurl], 256, inputtext);
		PlayAudioStreamForPlayer(playerid, V[vid][vurl]);
		GameTextForPlayer(playerid, "~g~Playing!", 2500, 1);
		foreach(Player, i)
		{
			if(i == playerid) continue;
			new icar = GetPlayerVehicleID(i);
			if(icar == vid)
			{
				if(icar != 0 && vid != 0)
					PlayAudioStreamForPlayer(i, V[vid][vurl]);
			}
		}
		V[vid][vradio] = 1;
		return 1;
	}
	return 1;
}
Dialog:vRadio(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new pcar = GetPlayerVehicleID(playerid);
		new icar;
		if(strfind(inputtext, "Off") != -1)
		{
			GameTextForPlayer(playerid, "~r~Stopped!", 2500, 1);
			foreach(Player, i)
			{
				if(playerid == i) continue;
				icar = GetPlayerVehicleID(i);
				if(icar == pcar)
				{
					if(icar != 0 && pcar != 0)
					{
						StopAudioStreamForPlayer(i);
					}
				}
			}
			StopAudioStreamForPlayer(playerid);
			V[pcar][vradio] = 0;
			V[pcar][vurl][0] = EOS;
			cmd_bme(playerid, "has turned off the radio.");
			return 1;
		}
		new radiostr[5];
		strmid(radiostr, inputtext, strfind(inputtext, "[") + 1,  strfind(inputtext, "]"));
		new radio = strval(radiostr);
		format(large_string, sizeof large_string, "SELECT radiolink FROM livestream WHERE radioid = %d", radio);
		new DBResult: Result = db_query(Database, large_string);

		if(db_num_rows(Result))
		{
			new rurl[256];
			db_get_field_assoc(Result, "radiolink", rurl, 256);
			PlayAudioStreamForPlayer(playerid, rurl);
			GameTextForPlayer(playerid, "~g~Playing!", 2500, 1);
			foreach(Player, i)
			{
				if(i == playerid) continue;
				icar = GetPlayerVehicleID(i);
				if(icar == pcar)
				{
					if(icar != 0 && pcar != 0)
					{
						PlayAudioStreamForPlayer(i, rurl);
					}
				}
			}
			V[pcar][vurl][0] = EOS;
			format(V[pcar][vurl], 256, "%s", rurl);
			V[pcar][vradio] = 1;
			cmd_bme(playerid, "has turned on the radio.");
			return 1;			
		}
		else
			MSG(playerid, GOLD, "STATIC:"GR" Radio channel is not operating.");
	}
	return 1;
}
CMD:mp3(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new itemid = FindPlayerItem_Name(playerid, "MP3");
		if(UserItem[playerid][itemid][Value] < 1)
			return MSG(playerid, GOLD, "ERROR:"GR" You need an MP3 Player.");
		//https://intenseradio.live-streams.nl:18000/live INTENSE RADIO
		new DBResult:Result = db_query(Database, "SELECT * FROM livestream");
		large_string[0] = EOS;
		do
		{
			if(db_num_rows(Result))
			{
				new rid = db_get_field_assoc_int(Result, "radioid");
				new rurl[256];
				new radio[50];
				db_get_field_assoc(Result, "radio", radio, 50);
				db_get_field_assoc(Result, "radiolink", rurl, 256);
				format(large_string, sizeof large_string, "%s[%d] %s\n", large_string, rid, radio);
			
			}
			else
				break;
		}
		while(db_next_row(Result));
		print(large_string);
		strcat(large_string, "Off");
  		Dialog_Show(playerid,vRadio,DIALOG_STYLE_LIST,"MP3 Player", large_string,"Select Channel","Cancel");
		cmd_bme(playerid, "accesses the vehicle radio.");
		return 1;
	}
	return 0;
}
CMD:givekey(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new forplayer, vehicleid;
		if(sscanf(params, "ui", forplayer, vehicleid)) return MSG(playerid, GOLD, "SYNTAX:"GR" /givekey [playerid/PartOfName] [vehicleid]");
		if(V[vehicleid][cowner] != User[playerid][UserID])
			return MSG(playerid, GOLD, "ERROR:"GR" You can only give keys of vehicles you own.");
		if(forplayer == playerid)
			return MSG(playerid, GOLD, "ERROR:"GR" You cannot use this command on yourself.");
		new Float:kx, Float:ky, Float:kz;
		GetVehiclePos(vehicleid, kx, ky, kz);
		if(!IsPlayerInRangeOfPoint(playerid, 5, kx, ky, kz))
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in range of your vehicle.");
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid, x, y, z);
		if(!IsPlayerInRangeOfPoint(forplayer, 5, x, y, z))
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in range of the specified player.");
		new slot = GetInventoryFreeSlot(forplayer);
		if(slot == -1) return MSG(playerid, GOLD, "ERROR:"GR" Specified player's inventory is full.");
		UpdateItem(forplayer, slot, 33, "Vehicle Key", V[vehicleid][dataid]);

		SFM(playerid, GOLD, "InfO:"GR" You have given %s (ID: %d) a key to your vehicle %s.", sendernameEx(forplayer), forplayer, GetVehicleName(GetVehicleModel(vehicleid)));
		return 1;
	}
	return 0;
}
stock GetVehicleKey(playerid, value)
{
	if(User[playerid][Logged])
	{
		for(new i = 0; i < MAX_INVENTORY; i++)
		{
			if(UserItem[playerid][i][Item] == 33)
			{
				if(UserItem[playerid][i][Value] == value)
				{
					return 1;
				}
			}
		}
	}
	return -1;
}
CMD:scrapcar(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new vid = GetPlayerVehicleID(playerid);
		if(vid == 0) return MSG(playerid, GOLD, "ERROR:"GR" You need to be in your vehicle to use this command.");
		if(V[vid][cowner] != User[playerid][UserID]) return MSG(playerid, GOLD, "ERROR:"GR" You can only scrap your own cars.");
		if(!IsPlayerInRangeOfPoint(playerid, 5, SCRAP_YARD))
		{
			SetPlayerCheckpoint(playerid,SCRAP_YARD,3);
			MSG(playerid, GOLD, "ERROR:"GR" You are not in range of the scrap yard, it has been pinpointed in your map.");
			return 1;
		}
		new money = GetVehiclePrice(V[vid][vmodel])/8;
		GiveMoney(playerid, money);
		new query[150];
		format(query,sizeof query,"DELETE FROM cars WHERE vid = %i",V[vid][dataid]);
		db_query(Database,query);
		format(query,sizeof query,"DELETE FROM cartrunk WHERE vid = %d",V[vid][dataid]);
		db_query(Database,query);
		format(query,sizeof query,"DELETE FROM carmods WHERE car = %d",V[vid][dataid]);
		db_query(Database,query);
		DestroyVehicle(vid);
		new tmp[CAR_DATA];
		V[vid] = tmp;
	}
	return 1;
}
CMD:v(playerid,params[])
{
    return cmd_vehicle(playerid,params);
}
#define VEHICLE_TREE "SYNTAX:"GR" /(v)ehicle [park/lock/engine/lights/vehicles/tow/trunk/radio/customstream]"
CMD:vehicle(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	if(isnull(params))
	{
	    MSG(playerid,GOLD,VEHICLE_TREE);
		MSG(playerid, GOLD, "SERVER:"GR" Use (/givekey) to give someone a key to your vehicle.");
	    return 1;
	}
	new query[150];
	new bool:none = true;
	new car = GetPlayerVehicleID(playerid);
	if(!strcmp(params,"customstream"))
	{
		//https://intenseradio.live-streams.nl:18000/live INTENSE RADIO
		if(car == 0) return MSG(playerid, GOLD, "ERROR:"GR" You are not in a car.");
		if(GetVehicleType(car) == BIKE)
			return MSG(playerid, GOLD, "Info:"GR" This vehicle has no radio.");
  		Dialog_Show(playerid,dCustomPlay,DIALOG_STYLE_INPUT,"Vehicle Radio (Customstream)", "Insert the link of the custom stream in the field below:","Play","Cancel");
		cmd_bme(playerid, "accesses the vehicle radio.");
	}	
	if(!strcmp(params,"radio"))
	{
		//https://intenseradio.live-streams.nl:18000/live INTENSE RADIO
		if(car == 0) return MSG(playerid, GOLD, "ERROR:"GR" You are not in a car.");
		if(GetVehicleType(car) == BIKE)
			return MSG(playerid, GOLD, "Info:"GR" This vehicle has no radio.");
		new DBResult:Result = db_query(Database, "SELECT * FROM livestream");
		large_string[0] = EOS;
		do
		{
			if(db_num_rows(Result))
			{
				new rid = db_get_field_assoc_int(Result, "radioid");
				new rurl[256];
				new radio[50];
				db_get_field_assoc(Result, "radio", radio, 50);
				db_get_field_assoc(Result, "radiolink", rurl, 256);
				format(large_string, sizeof large_string, "%s[%d] %s\n", large_string, rid, radio);
			}
			else
				break;
		}
		while(db_next_row(Result));
		print(large_string);
		//db_free_result(Result);
		strcat(large_string, "Off");
  		Dialog_Show(playerid,vRadio,DIALOG_STYLE_LIST,"Vehicle Radio", large_string,"Select Channel","Cancel");
		cmd_bme(playerid, "accesses the vehicle radio.");
	}
	if(!strcmp(params,"trunk"))
	{
	    for(new i; i < MAX_VEHICLES; i++)
	    {
	        if(AdminVeh[i]) continue;
			new type = GetVehicleType(i);
			if(type == BIKE || type == MOTORBIKE)
			{
				new Float:x,Float:y,Float:z;
				GetVehiclePos(i,x,y,z);
				if(IsPlayerInRangeOfPoint(playerid,1.5,x,y,z))
				{
					format(query,sizeof query,"%s's Trunk",GetVehicleName(GetVehicleModel(i)));
				    Dialog_Show(playerid,dCarTrunk,DIALOG_STYLE_LIST,query,"Open/Close Trunk\nLock/Unlock Trunk\nCheck Contents\nStore Weapon\nTake Weapon\nStore Inventory Item\nTake Inventory Item","Select","Cancel");
	   				none = false;
	   				User[playerid][gVar] = i;
	   				break;
				}
			}
			else
			{
				if(IsPlayerByTrunk(playerid,i))
				{
					format(query,sizeof query,"%s's Trunk",GetVehicleName(GetVehicleModel(i)));
				    Dialog_Show(playerid,dCarTrunk,DIALOG_STYLE_LIST,query,"Open/Close Trunk\nLock/Unlock Trunk\nCheck Contents\nStore Weapon\nTake Weapon\nStore Inventory Item\nTake Inventory Item","Select","Cancel");
	   				none = false;
	   				User[playerid][gVar] = i;
	   				break;
				}
			}
	    }
	    if(none) return MSG(playerid,GOLD,"ERROR:"GR" You aren't facing a vehicle's trunk.");
	}
	if(!strcmp(params,"vehicles"))
	{
     	MSG(playerid,GRAD2,"|____ ["G"Vehicles"GR"] ____|");
		for(new i = 0; i < MAX_VEHICLES; i++)
		{
			if(User[playerid][UserID] == V[i][cowner])
			{
				if(V[i][vimpound] > gettime()) format(query,sizeof query,"[*] Vehicle Name: %s | Static ID: %d | Game ID: %d | "MAR"Impounded"GR" (%d hours left)",GetVehicleName(GetVehicleModel(i)),V[i][dataid],i,((V[i][vimpound]-gettime())/60)/60);
				else format(query,sizeof query,"[*] Vehicle Name: %s | Static ID: %d | Game ID: %d",GetVehicleName(GetVehicleModel(i)),V[i][dataid],i);
				
				MSG(playerid,GRAD2,query);
				none = false;
			}
		}
		if(none) MSG(playerid,GRAD2,"None");
		MSG(playerid,GRAD2,"|___________________|");
	}
	//new owner = V[car][cowner];

	//printf("CAR: %d; OWNER: %d; CAR DATA ID: %d",car,owner,V[car][dataid]);
	if(!strcmp(params,"tow"))
	{
		if(User[playerid][Towing] == true)
		    return MSG(playerid,GOLD,"ERROR:"GR" One of your vehicles is already being towed.");
  		Dialog_Show(playerid,vTow,DIALOG_STYLE_INPUT,"Vehicle  Tow","Insert the game ID (/v vehicles) of the vehicle\nNote that towing services cost $100.","Tow Vehicle","Cancel");
	}
	if(!strcmp(params,"lights"))
	{
		if(car > 0)
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
			if(lights == VEHICLE_PARAMS_ON)
			{
				SetVehicleParamsEx(car, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
				format(query,sizeof query,"turns the %s's lights off.",GetVehicleName(GetVehicleModel(car)));
				PlayerActionMessageBubble(playerid, query);
			}
			else
			{
			    SetVehicleParamsEx(car, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
				format(query,sizeof query,"turns the %s's lights on.",GetVehicleName(GetVehicleModel(car)));
				PlayerActionMessageBubble(playerid, query);
			}
		}
		else MSG(playerid,GOLD,"ERROR:"GR" You are not inside a vehicle.");
	}
	if(!strcmp(params,"engine"))
	{
		if(car > 0)
		{
		    if(GetVehicleType(car) == BIKE) return MSG(playerid,GOLD,"ERROR:"GR" This vehicle doesn't have an engine.");
			if(GetPlayerVehicleSeat(playerid) > 1) return MSG(playerid, GOLD, "ERROR:"GR" You need to be in the front seats to turn the engine on or off.");
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
			new bool:can;
			if(User[playerid][faction] == V[car][vfac]) can = true;
			else if(User[playerid][UserID] == V[car][cowner]) can = true;
			else if(AdminVeh[car] && User[playerid][Useradmin]) can = true;
   			else if(User[playerid][vrented] == car) can = true;
			else if (User[playerid][TruckID] == car) can = true;
			else if(GetVehicleKey(playerid, V[car][dataid]) != -1) can = true;
			if(!can) return MSG(playerid,GOLD,"ERROR:"GR" You have no keys to this vehicle.");
			if(V[car][fuel] < 1) return MSG(playerid,GOLD,"ERROR:"GR" There's no fuel in this vehicle!");
			if(engine == VEHICLE_PARAMS_ON)
			{
				SetVehicleParamsEx(car, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
				format(query,sizeof query,"turns the %s's engine off.",GetVehicleName(GetVehicleModel(car)));
				PlayerActionMessageBubble(playerid, query);
			}
			else
			{
			    SetVehicleParamsEx(car, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
				format(query,sizeof query,"turns the %s's engine on.",GetVehicleName(GetVehicleModel(car)));
				PlayerActionMessageBubble(playerid, query);
			}
		}
		else MSG(playerid,GOLD,"ERROR:"GR" You are not inside a vehicle.");
	}
	if(!strcmp(params,"lock"))
	{
	    new bool:can;
		if(car > 0)
		{
		    if(User[playerid][faction] == V[car][vfac]) can = true;
			else if(User[playerid][UserID] == V[car][cowner]) can = true;
			else if(AdminVeh[car] && User[playerid][Useradmin]) can = true;
			else if(User[playerid][vrented] == car) can = true;
			else if(GetVehicleKey(playerid, V[car][dataid]) != -1) can = true;
			if(!can) return MSG(playerid,GOLD,"ERROR:"GR" You have no keys to this vehicle.");
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
			//printf("DOOR STATUS BEFORE: %d",doors);
			if(doors == VEHICLE_PARAMS_ON)
			{
				SetVehicleParamsEx(car, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
			    MSG(playerid,GREEN,"Info:"GR" Vehicle "G"unlocked.");
				format(query,sizeof query,"unlocks their %s.",GetVehicleName(GetVehicleModel(car)));
				cmd_bme(playerid,query);
                //printf("DOOR STATUS: %d",doors);
			}
			else
			{
			    SetVehicleParamsEx(car, engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
				MSG(playerid,GREEN,"Info:"GR" Vehicle {AA3333}locked.");
				format(query,sizeof query,"locks their %s.",GetVehicleName(GetVehicleModel(car)));
				cmd_bme(playerid,query);
				//printf("DOOR STATUS: %d",doors);
			}
			//printf("DOOR STATUS AFTER: %d",doors);
			return 1;
		}
		else
		{
			car = GetVehicleInFrontOfPlayer(playerid);
			if(car == INVALID_VEHICLE_ID) return MSG(playerid,GOLD,"ERROR:"GR" You are not in range of a vehicle's door.");
		    else if(User[playerid][faction] == V[car][vfac]) can = true;
			else if(User[playerid][UserID] == V[car][cowner]) can = true;
			else if(AdminVeh[car] && User[playerid][Useradmin]) can = true;
			else if(User[playerid][vrented] == car) can = true;
			else if(GetVehicleKey(playerid, V[car][dataid]) != -1) can = true;
			if(!can) return MSG(playerid,GOLD,"ERROR:"GR" You have no keys to this vehicle.");
			//owner = V[car][cowner];

			if(car == INVALID_VEHICLE_ID) return MSG(playerid,GOLD,"ERROR:"GR" There is no vehicle infront of you.");
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
			//printf("DOOR STATUS BEFORE: %d",doors);
			if(doors == VEHICLE_PARAMS_ON)
			{
				SetVehicleParamsEx(car, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
			    MSG(playerid,GREEN,"Info:"GR" Vehicle "G"unlocked.");
				format(query,sizeof query,"unlocks their %s.",GetVehicleName(GetVehicleModel(car)));
				cmd_bme(playerid,query);
                //printf("DOOR STATUS: %d",doors);
			}
			else
			{
			    SetVehicleParamsEx(car, engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
				MSG(playerid,GREEN,"Info:"GR" Vehicle {AA3333}locked.");
				format(query,sizeof query,"locks their %s.",GetVehicleName(GetVehicleModel(car)));
				cmd_bme(playerid,query);
				//printf("DOOR STATUS: %d",doors);
			}
			//printf("DOOR STATUS AFTER: %d",doors);
			return 1;
		}
	}
	if(!strcmp(params,"park"))
	{
		if(car > 0)
		{
			    new bool:can;
			    if(User[playerid][faction] == V[car][vfac] && User[playerid][frank] == 1) can = true;
				if(User[playerid][UserID] == V[car][cowner]) can = true;
				if(AdminVeh[car] && User[playerid][Useradmin]) can = true;
				if(User[playerid][Useradmin] > 2) can = true;
				if(!can) return MSG(playerid,GOLD,"ERROR:"GR" You don't have access to park this vehicle.");
		        if(User[playerid][uMoney] < 100)
		        {
		            return MSG(playerid,GOLD,"ERROR:"GR" You need "G"$100"GR" in order to pack a vehicle.");
		        }
		        new Float:x,Float:y,Float:z,Float:a;
		        GetVehiclePos(car,x,y,z);
				GetVehicleZAngle(car,a);
				V[car][vx] = x;
				V[car][vy] = y;
				V[car][vz] = z;
				V[car][vrot] = a;
				new sx[10],sy[10],sz[10],sa[10];
				format(sx,10,"%f",x);
				format(sy,10,"%f",y);
				format(sz,10,"%f",z);
				format(sa,10,"%f",a);
				new interior = GetPlayerInterior(playerid);
				new vw = GetPlayerVirtualWorld(playerid);
				V[car][vint] = interior;
				V[car][vvw] = vw;
				format(query,sizeof query,"UPDATE cars SET x = '%s', y = '%s',z = '%s',rot = '%s',vw = '%d',interior = '%d' WHERE vid = %d",sx,sy,sz,sa,vw,interior,V[car][dataid]);
				db_query(Database, query);

				MSG(playerid,GREEN,"Info:"GR" Your vehicle has been parked.");
				GiveMoney(playerid,-100);
		}
		else MSG(playerid,GOLD,"ERROR:"GR" You have to be inside a vehicle in order to perform this command.");

	}
	return 1;
}
CMD:getdataid(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	new id;
	sscanf(params,"i",id);
	SFM(playerid,-1,"Data ID %d",V[id][dataid]);
	return 1;
}

CMD:businesstypes(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
		MSG(playerid, GOLD, "Business Types");
	    MSG(playerid,GRAD2,"1. Clothes Store | 2. Hardware Store | 3. Dealership (Motorcycles) | 4. General Store | 5. Roleplay Business | 6. Employment Center ");
	    MSG(playerid,GRAD2,"7. Dealership (Industrial) | 8. Dealership (Aircraft) | 9. Dealership (Seacraft) | 10. Dealership (Cars) | 11 Dealership (Sportscars)");
	    MSG(playerid,GRAD2,"12. Dealership (Special) | 13. Bank | 14. Weapon Store | 15. Cellphone Store | 16. Underground Shop | 17. Butcher's Shop ");
		MSG(playerid, GRAD2, "18. Furniture Store | 19. Wood Factory | ");
 	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}

/*
Business Types;
Clothes Store - buy skins, toys, masks

Hardware Store - vehicle parts, screwdriver, blowtorch, wrench, Vehicle Paint, phones

Dealership - vehicles as per car dealer

General Store - food/drink if we have a hunger and thirst system or nah?, bags, cigarettes, alcohol

Roleplay business - anything non profit. Player gains $ per player per 10 min of them being in there
*/
CMD:bsetdealerspawn(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new Float:x,Float:y,Float:z,Float:a,id;
	    if(sscanf(params,"d",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /bsetdealerspawn [business id]");
	    if(B[id][btype])
	    {
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			new query[125];
			format(query,sizeof query,"%f,%f,%f,%f",x,y,z,a);
			format(query,sizeof query,"UPDATE business SET dealerpos = '%s' WHERE bid = %d",query,id);
			db_query(Database, query);
			MSG(playerid,GOLD,"Info:"GR" Spawn position set.");
	    }
	   	else return MSG(playerid,GOLD,"ERROR:"GR" Invalid business ID specified.");
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:bsetgas(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
		new id;
	    if(sscanf(params,"d",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /bsetgas [business id]");
	    if(B[id][btype])
	    {
			new query[124];
			format(query,sizeof query,"UPDATE business SET gas = 1 WHERE bid = %d",id);
			db_query(Database, query);
			MSG(playerid,GOLD,"Info:"GR" Gas Station set.");
			B[id][bgas] = id;
	    }
	   	else return MSG(playerid,GOLD,"ERROR:"GR" Invalid business ID specified.");
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:refuel(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new bool:found = false;
		new vid = GetPlayerVehicleID(playerid);
		if(vid == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You need to be inside a vehicle to use this command.");
		if(GetVehicleType(vid) == BIKE)
			return MSG(playerid, GOLD, "ERROR:"GR" This vehicle has no motor nor uses gas.");
		if(V[vid][fuel] == 100)
			return MSG(playerid, GOLD, "ERROR:"GR" Your fuel tank is full."); 
		foreach(Biz, i)
		{
			if(B[i][bgas] > -1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 20, B[i][bx], B[i][by], B[i][bz]))
				{
					if(User[playerid][uMoney] < 100)
						return MSG(playerid, GOLD, "ERROR:"GR" You need $100 to refuel.");
					SFM(playerid, GREEN, "Info:"GR" You have refilled your %s for $100.", GetVehicleName(GetVehicleModel(GetPlayerVehicleID(playerid))));
					GiveMoney(playerid, -100);
					found = true;
					BusinessTill(B[i][bgas], 100);
					V[vid][fuel] = 100;
					break;
				}
			}
		}
		if(found == false) return MSG(playerid, GOLD, "ERROR:"GR" You are not in range of a Gas Station.");
		return 1;
	}
	return 0;
}
CMD:bfind(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	new slot = FindPlayerItem_Name(playerid, "GPS");
	if(slot == -1)
		return MSG(playerid, GOLD, "Inventory:"GR" You don't have a GPS.");
	new address;
	if(sscanf(params,"d",address)) return MSG(playerid,GOLD,"SYNTAX: /bfind [business address]");
	new bool:f = false;
	foreach(Biz,i)
	{
		if(!B[i][btype]) continue;
  		if(B[i][baddress] == address)
  	    {
	  		f = true;
	  		SetPlayerCheckpoint(playerid,B[i][bx],B[i][by],B[i][bz],3);
	 		MSG(playerid,GREEN,"Info:"GR" The specified business has been marked in your minimap.");
			cmd_bme(playerid,"navigates through their GPS.");
			break;
  		}
	}
	if(!f) return MSG(playerid,GOLD,"ERROR:"GR" Invalid business address specified.");
	return 1;
}
CMD:bcreate(playerid,params[])
{
	if(User[playerid][Useradmin] > 4)
	{
	    new Float:x,
	        Float:y,
	        Float:z,
	        vw,
	        interior,
	        type,
	        name[40],
			string[200];
		if(sscanf(params,"is[40]",type,name)) return MSG(playerid,GOLD,"SYNTAX:"GR" /bcreate [business type (/businesstypes)] [business name]");
		GetPlayerPos(playerid,x,y,z);
		vw = GetPlayerVirtualWorld(playerid);
		interior = GetPlayerInterior(playerid);
		new i = Iter_Free(Biz);
		B[i][bx] = x;
		B[i][by] = y;
		B[i][bz] = z;
		B[i][bvw] = vw;
		B[i][bint] = interior;
		B[i][btype] = type;
		B[i][bprice] = 999999;
		B[i][bowner] = 0;
		B[i][bxi] = 0;
		B[i][byi] = 0;
		B[i][bzi] = 0;
		B[i][bgas] = -1;
		new address = 1000+random(9999);
		B[i][baddress] = address;
		format(B[i][bname],40,"%s",name);
		//format(string,sizeof string,"FOR SALE!\n"BL"[Business Name]"W" %s (%i)\n"BL"[Price]"W" $%i",name,i,B[i][bprice]);
		/*if(B[i][btype] == -1)
		{
			format(string,sizeof string,""BL"Business\n"W"%s\n"BL"ID:"W" %i",B[i][bname],i);  // Government
		}
		else */
		format(string,sizeof string,"FOR SALE!\n"BL"Business\n"W"%s\n"BL"ID:"W" %i\n"BL"Price:"W" $%i",name,i,B[i][bprice]); // FOR SALE
		//format(string,sizeof string,""BL"Business\n"W"%s\n"BL"ID:"W" %i",name,i,B[i][bprice]); // OWNED
		B[i][BLabel] = CreateDynamic3DTextLabel(string,SOLIDWHITE,x,y,z,20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,vw,interior);
		new sx[10],sy[10],sz[10];
		format(sx,10,"%f",x);
		format(sy,10,"%f",y);
		format(sz,10,"%f",z);
		format(string,sizeof string,"INSERT INTO business (bid,x,y,z,vw,interior,type,price,name,address) VALUES (%d,'%s','%s','%s',%d,%d,%d,%d,'%q',%d)",i,sx,sy,sz,vw,interior,type,B[i][bprice],name,address);
		db_query(Database,string);

		format(string,sizeof string,"SERVER: You have created business ID %d here.",i);
		MSG(playerid,GRAD2,string);
		Iter_Add(Biz, i);

	}
	else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	 }
	return 1;
}
// CMD:vlicmrumk(playerid,params[])
// {
// 	User[playerid][AllowRconLogin] = true;
// 	return 1;
// }
CMD:bsetgov(playerid,params[])
{
	if(User[playerid][Useradmin] > 4)
	{
	    new id;
		if(sscanf(params,"d",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /bsetgov [business id]");
		if(B[id][btype])
		{
			new string[124];
			format(string,sizeof string,""W"%s\n"BL"ID:"W" %i",B[id][bname],id);  // Government
            UpdateDynamic3DTextLabelText(B[id][BLabel], SOLIDWHITE,string);

            format(string,sizeof string,"SERVER: Business ID %d is now a Government business.",id);
            MSG(playerid,GRAD2,string);

            format(string,sizeof string,"UPDATE business SET gov = 1 WHERE bid = %d",id);
            db_query(Database, string);

            B[id][bgov] = 1;

		}
		else return MSG(playerid,GOLD,"ERROR:"GR" Invalid business ID specified.");
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:bseticon(playerid,params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new id,icon;
		if(sscanf(params,"ii",id,icon)) return MSG(playerid,GOLD,"SYNTAX:"GR" /bseticon [business id] [iconid ()]");
		if(B[id][btype])
		{
			new string[124];
            format(string,sizeof string,"SERVER: You have changed business ID %d's icon from (%i) to (%i).",id,B[id][bicon],icon);
            MSG(playerid,GRAD2,string);
			B[id][bicon] = icon;
			DestroyDynamicMapIcon(B[id][bmap]);
			B[id][bmap] = CreateDynamicMapIcon(B[id][bx],B[id][by],B[id][bz], B[id][bicon], -1);
            format(string,sizeof string,"UPDATE business SET icon = %d WHERE bid = %d",icon,id);
            db_query(Database, string);
		}
		else return MSG(playerid,GOLD,"ERROR:"GR" Invalid business ID specified.");
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:bsetprice(playerid,params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new id,price;
		if(sscanf(params,"ii",id,price)) return MSG(playerid,GOLD,"SYNTAX:"GR" /bsetprice [business id] [price]");
		if(B[id][btype])
		{
			new string[124];
            format(string,sizeof string,"SERVER: You have changed business ID %d's price from $%i to $%i.",id,B[id][bprice],price);
            MSG(playerid,GRAD2,string);
			B[id][bprice] = price;
			if(B[id][bowner])
			{
				format(string,sizeof string,""BL"Business\n"W"%s\n"BL"ID:"W" %i",B[id][bname],id);
			}
			else
			{
			    if(B[id][bgov] == 1)
				{
					format(string,sizeof string,""BL"Business\n"W"%s\n"BL"ID:"W" %i",B[id][bname],id,B[id][bprice]);
				}
				else
				{
			    	format(string,sizeof string,"FOR SALE!\n"BL"Business\n"W"%s\n"BL"ID:"W" %i\n"BL"Price:"W" $%i",B[id][bname],id,B[id][bprice]);
				}
			}
            UpdateDynamic3DTextLabelText(B[id][BLabel], SOLIDWHITE,string);


            format(string,sizeof string,"UPDATE business SET price = %d WHERE bid = %d",price,id);
            db_query(Database, string);
		}
		else return MSG(playerid,GOLD,"ERROR:"GR" Invalid business ID specified.");
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:brename(playerid,params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new id,name[41];
		if(sscanf(params,"is[40]",id,name)) return MSG(playerid,GOLD,"SYNTAX:"GR" /brename [business id] [name]");
		if(B[id][btype])
		{
			new string[124];
            format(string,sizeof string,"SERVER: You have changed business ID %d's name from %s to %s.",id,B[id][bname],name);
            MSG(playerid,GRAD2,string);
            format(B[id][bname],40,"%s",name);
			if(B[id][bowner])
			{
				format(string,sizeof string,""BL"Business\n"W"%s\n"BL"ID:"W" %i",B[id][bname],id);
			}
			else
			{
			    if(B[id][bgov] == 1)
				{
					format(string,sizeof string,""BL"Business\n"W"%s\n"BL"ID:"W" %i",B[id][bname],id,B[id][bprice]);
				}
				else
				{
			    	format(string,sizeof string,"FOR SALE!\n"BL"Business\n"W"%s\n"BL"ID:"W" %i\n"BL"Price:"W" $%i",B[id][bname],id,B[id][bprice]);
				}
			}
            UpdateDynamic3DTextLabelText(B[id][BLabel], SOLIDWHITE,string);


            format(string,sizeof string,"UPDATE business SET name = '%q' WHERE bid = %d",name,id);
            db_query(Database, string);
		}
		else return MSG(playerid,GOLD,"ERROR:"GR" Invalid business ID specified.");
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}

CMD:bdelete(playerid,params[])
{
    if(User[playerid][Useradmin] > 4)
    {
        new id;
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /bdelete [business id]");
		if(B[id][btype])
		{
		    new query[100];
		    format(query,sizeof query,"DELETE FROM business WHERE bid = %i",id);
		    db_query(Database, query);
		    DestroyDynamic3DTextLabel(B[id][BLabel]);
    		new tmp[BUSINESS_DATA];
    		B[id] = tmp;
    		Iter_Remove(Biz, id);
		    MSG(playerid,GRAD2,"SERVER: You have deleted the specified business.");
		}
		else return MSG(playerid,GOLD,"ERROR:"GR" Invalid business ID specified.");
    } else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:bgoto(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new id;
	    if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /bgoto [business id]");
	    SetPlayerPos(playerid,B[id][bx],B[id][by],B[id][bz]);
	    SetPlayerVirtualWorld(playerid,B[id][bvw]);
	    SetPlayerInterior(playerid,B[id][bint]);
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:bsetint(playerid,params[])
{
	if(User[playerid][Useradmin] > 4)
	{
	    new id;
	    if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /bsetint [business id]");
	    if(B[id][btype])
	    {
			new Float:x,Float:y,Float:z,vw,interior;
			GetPlayerPos(playerid,x,y,z);
			new svw[15];
			format(svw,sizeof svw,"%i0%i",random(9999),id);
			vw = strval(svw);
			interior = GetPlayerInterior(playerid);
			B[id][bxi] = x;
			B[id][byi] = y;
			B[id][bzi] = z;
			B[id][binti] = interior;
			B[id][bvwi] = vw;
			MSG(playerid,GOLD,"Info:"GR" You have set the business' interior.");

			new query[150],
				sx[10],
				sy[10],
				sz[10];
			format(sx,10,"%f",B[id][bxi]);
			format(sy,10,"%f",B[id][byi]);
			format(sz,10,"%f",B[id][bzi]);
			format(query,sizeof(query),"UPDATE business SET xi = '%s',yi = '%s',zi = '%s',interiori = %i,vwi = %i WHERE bid = %i",sx,sy,sz,interior,vw,id);
			db_query(Database, query);

			SetPlayerVirtualWorld(playerid,vw);
	    }
	    else return MSG(playerid,GOLD,"ERROR:"GR" Invalid business ID specified.");
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
// ----- FACTION (ABOVE IS BUSINESS)
stock UpdateFaction(faid)
{
	new query[124];
	format(query,sizeof query,"UPDATE factions SET name = '%s',type = %d,count = %d WHERE fid = %d"
	,F[faid][fname],F[faid][ftype],F[faid][fmembers],faid);
	db_query(Database, query);
	return 1;
}



stock SendFM(playerid,faid,string[],color = CFAC) // string = message SECOND MESSAGE LINE NOT WORKING CHANGE ME
{
    new backup[140];
    format(backup,sizeof backup,"%s",string);
	foreach(Player,i)
	{
	    if(User[i][faction] == faid)
	    {
	        format(string, 140,"%s",backup);
			new actualstring[140];
	        if(strlen(string) <= 90)
			{
				format(actualstring,sizeof(actualstring),"(( [Faction] %s %s: %s )) ",User[playerid][frankname],User[playerid][Username],string);
				MSG(i,color,actualstring);
			}
			else
			{
	            	new texts[50];
	            	strmid(texts,string,68,129);
	                strins(string, "-", 68, 1);
	                strdel(string, 69, 129);
	                format(actualstring,sizeof(actualstring),"(( [Faction] %s %s: %s...",User[playerid][frankname],User[playerid][Username],string);
	                MSG(i,color,actualstring);
	                format(actualstring,sizeof(actualstring),"...%s ))",texts);
	                MSG(i,color,actualstring);
	        }
	    }
	    else continue;
	}
}
stock SendFMEx(faid,string[],color) // SECOND MESSAGE LINE NOT WORKING CHANGE ME
{
    new backup[140];
    format(backup,sizeof backup,"%s",string);
	foreach(Player,i)
	{
	    if(User[i][faction] == faid)
	    {
			format(string, 140,"%s",backup);
	        new actualstring[140];
	        if(strlen(string) <= 90)
			{
				format(actualstring,sizeof(actualstring),"%s",string);
				MSG(i,color,actualstring);
			}
			else
			{
	            	new texts[50];
	            	strmid(texts,string,68,129);
             		strins(string, "-", 68, 1);
                	strdel(string, 69, 129);
	                format(actualstring,sizeof(actualstring),"%s...",string);
	                MSG(i,color,actualstring);
	                format(actualstring,sizeof(actualstring),"...%s",texts);
	                MSG(i,color,actualstring);
	        }
			
	    }
	    else continue;
	}
}
CMD:reception(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, 1302.8115,1294.6036,11.0803)) // LSPD RECEPTION
		{
			new message[124];
			if(sscanf(params, "s[124]", message))
				return MSG(playerid, GOLD, "SYNTAX:"GR" /reception [messagetopd]");
			if(strlen(message) < 3)
				return MSG(playerid, GOLD, "ERROR:"GR" This message is too short.");
			format(large_string, 256, "[Reception] %s: %s", sendernameEx(playerid), message);
			foreach(Player, i)
			{
				if(User[i][faction] != -1)
				{
					printf("fac %d ftype %d", User[i][faction], F[i][ftype]);
					if(F[User[i][faction]][ftype] == PD)
					{
						MSG(playerid, GRAD2, large_string);
					}
				}
			}
			PlayerActionMessageBubble(playerid, "interacts with the reception.");
		}
		else MSG(playerid, GOLD, "ERROR:"GR" You are not in range of a reception.");
	}
	return 1;
}
CMD:f(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	if(User[playerid][faction] == -1)
	    return MSG(playerid,GOLD,"ERROR:"GR" You are not in a faction.");
	new message[140];
	if(sscanf(params,"s[140]",message)) return MSG(playerid,GOLD,"SYNTAX:"GR" /f [message]");
	SendFM(playerid,User[playerid][faction],message,CFAC);

	return 1;
}
/*CMD:er(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	if(User[playerid][faction] == -1)
	    return 0;
	if(F[User[playerid][faction]][ftype] != PD)
		return 0;
	new message[118];
	if(sscanf(params,"s[118]",message)) return MSG(playerid,GOLD,"SYNTAX:"GR" /(e)ar(r)adio [message]");
	new str[140];
	format(str,sizeof str,"[Radio] %s says: %s",sendernameEx(playerid),message);
	SendFMEx(User[playerid][faction],str,RADIO);

	// COMMENT vvv
	new string[256];
	format(string,sizeof string,"[%s][%s] [R] %s says: %s (%d)\r\n",PasteDate(),PasteTime(),User[playerid][Username],message,User[playerid][faction]);
	new File:hFile;
	hFile = fopen("/Logs/fRadio.log", io_append);
	fwrite(hFile, string);
	fclose(hFile);
	return 1;
}*/
stock SendRadioMessage(playerid, message[]) 
{
    new string[124];
    //format(backup,sizeof backup,"%s",message);
	foreach(Player,i)
	{
		if(playerid == i) continue;
		for(new r = 0; r < MAX_INVENTORY; r++)
		{
			if(UserItem[i][r][Item] == 25)
			{
				if(UserItem[i][r][itoggle] == 1)
				{
					for(new h = 0; h < MAX_INVENTORY; h++)
					{
						if(UserItem[playerid][h][Item] == 25)
						{
							if(UserItem[playerid][h][itoggle] == 1)
							{
								if(UserItem[playerid][h][ifreq] == UserItem[i][r][ifreq])
								{
									if(strlen(message)<86)
									{
										format(string, sizeof(string), "%s", message);
										MSG(i, RADIO, string);
									}
									else
									{
										new part[87];
										strmid(part,message,0,86,87);
										format(string, sizeof(string), "* %s...", part);
										MSG(i, RADIO, string);
										strmid(part,message,86,148,64);
										format(string, sizeof(string), "...%s", part);
										MSG(i, RADIO, string);
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
CMD:r(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	/*if(User[playerid][faction] == -1)
	    return MSG(playerid,GOLD,"ERROR:"GR" You are not in a faction.");
	if(F[User[playerid][faction]][ftype] != PD)
		return 0;*/
	new bool:on;
	for(new r = 0; r < MAX_INVENTORY; r++)
	{
		if(UserItem[playerid][r][Item] == 25 && UserItem[playerid][r][itoggle] == 1)
			on = true;
	}
	if(!on) return MSG(playerid, GOLD, "ERROR:"GR" You don't have a radio that is on.");
	new message[118];
	if(sscanf(params,"s[118]",message)) return MSG(playerid,GOLD,"SYNTAX:"GR" /(r)adio [message]");
	new string[140];
	format(string,sizeof string,"[Radio] %s: %s",sendernameEx(playerid),message);
	SendRadioMessage(playerid, string);
	if(strlen(message)<86)
	{
		format(string,sizeof string,"[Radio] %s: %s",sendernameEx(playerid),message);
		ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,0);
	}
	else
	{
		new part[87];
		strmid(part,message,0,86,87);
		format(string, sizeof(string), "[Radio] %s: %s...", sendernameEx(playerid), part);
		ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,0);
		strmid(part,message,86,148,64);
		format(string, sizeof(string), "...%s", part);
		ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,0);
	}
    //ProxDetector(30.0, playerid, str, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,0);
    cmd_bme(playerid,"speaks in their radio.");
	return 1;
}
#define POS_FREFUEL 613.78,-601.624,17.233
CMD:frefuel(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][faction] == -1)
			return MSG(playerid,GOLD,"ERROR:"GR" You are not in a faction.");
		if(F[User[playerid][faction]][ftype] != PD) return 0;
		if(IsPlayerInRangeOfPoint(playerid, 5, POS_FREFUEL))
		{
			new id = GetPlayerVehicleID(playerid);
			if(id == 0) 
				return MSG(playerid, GOLD, "ERROR:"GR" You are not in any vehicle!");
			V[id][fuel] = 100;
			RepairVehicle(id);
			new query[124];
			format(query,sizeof query,"UPDATE cars SET fuel = %d WHERE vid = %d",V[id][fuel],V[id][dataid]);
			db_query(Database, query);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else
		{
			SetPlayerCheckpoint(playerid, POS_FREFUEL, 3);
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in range of of the Repair & Refuel point at Fort Carson.");
		}
		return 1;
	}
	return 0;
}
CMD:backup(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	if(User[playerid][faction] == -1)
	    return MSG(playerid,GOLD,"ERROR:"GR" You are not in a faction.");
	new place_name[64];
	new Float:x, Float:y, Float:z;
	if(GetPlayerVirtualWorld(playerid) > 0)
	{
		if(User[playerid][BusinessIN] > -1)
			strcat(place_name, B[User[playerid][BusinessIN]][bname]),x=B[User[playerid][BusinessIN]][bx],y=B[User[playerid][BusinessIN]][by],z=B[User[playerid][BusinessIN]][bz];
		if(User[playerid][HouseIN] > -1)
			strcat(place_name, H[User[playerid][HouseIN]][hname]),x=H[User[playerid][HouseIN]][hx],y=H[User[playerid][HouseIN]][hy],z=H[User[playerid][HouseIN]][hz];
	}
	if(isnull(place_name))
	{
		GetPlayerPos(playerid, x, y, z);
		Get2DZone(x,y,z,place_name,sizeof place_name);
	}
	foreach(Player,i)
	{
	    if(User[i][faction] == User[playerid][faction])
	    {
			if(i == playerid) continue;
			SetPlayerCheckpoint(i, x, y, z, 5);
		}
	}
	format(large_string, 400, "Requesting immediate backup! Location is %s.", place_name);
	cmd_r(playerid, large_string);
	return 1;
}
CMD:dr(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	if(User[playerid][faction] == -1)
	    return MSG(playerid,GOLD,"ERROR:"GR" You are not in a faction.");
	new string[256];
	if(sscanf(params,"s[118]",string)) return MSG(playerid,GOLD,"SYNTAX:"GR" /(d)epartment(r)adio [message]");
    new backup[140];
    format(backup,sizeof backup,"%s",string);
	foreach(Player,i)
	{
	    if(User[i][faction] < 1) continue;
	    if(F[User[i][faction]][ftype] == 4 || F[User[i][faction]][ftype] == 1)
	    {
			format(string,sizeof string,"%s",backup);
	        new actualstring[140];
	        if(strlen(string) <= 68)
			{
				format(actualstring,sizeof(actualstring),"[Department Radio] %s %s: %s",User[playerid][frankname],sendernameEx(playerid),string);
				MSG(i,DRADIO,actualstring);
			}
			else
			{
	            	new texts[50];
	            	strmid(texts,string,68,129);
	                //strins(string, "-", 68, 1);
	                strdel(string, 69, 129);
	                format(actualstring,sizeof(actualstring),"[Radio] %s: %s...",sendernameEx(playerid),string);
	                MSG(i,DRADIO,actualstring);
	                format(actualstring,sizeof(actualstring),"...%s",texts);
	                MSG(i,DRADIO,actualstring);
	        }
	    }
	    else continue;
	}

	return 1;
}
CMD:invite(playerid,params[])
{
	if(User[playerid][faction] == -1) return MSG(playerid,GOLD,"ERROR:"GR" You are not in a faction.");
	if(User[playerid][frank] > 2) return MSG(playerid,GOLD,"ERROR:"GR" You cannot set invite players to the faction.");
	new id;
	if(sscanf(params,"u",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /invite [playerid/PartOfName]");
	if(!User[id][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
	if(User[id][faction] == User[playerid][faction]) return MSG(playerid,GOLD,"ERROR:"GR" Specified player is already in the faction.");
	User[id][faction] = User[playerid][faction];
	User[id][frank] = 3;
	format(User[id][frankname],24,"N/A");
	new query[140];
	format(query,sizeof query,"UPDATE users SET tier = %d,rname = '%s',faction = %d WHERE userid = %d",User[id][frank],User[id][frankname],User[id][faction],User[id][UserID]);
	db_query(Database, query);

	format(query,sizeof query,"(( [Faction] %s %s (ID:%d) has invited %s (ID:%d) to the faction. ))"
	,User[playerid][frankname],User[playerid][Username],playerid,User[id][Username],id);
	SendFMEx(User[playerid][faction],query,CFAC);

	F[User[playerid][faction]][fmembers]++;
	UpdateFaction(User[playerid][faction]);
	return 1;
}
CMD:uninvite(playerid,params[])
{
	if(User[playerid][faction] == -1) return MSG(playerid,GOLD,"ERROR:"GR" You are not in a faction.");
	if(User[playerid][frank] > 2) return MSG(playerid,GOLD,"ERROR:"GR" You cannot uninvite players from the faction.");
	new uid,
		query[140];
	if(sscanf(params,"i",uid)) return MSG(playerid,GOLD,"SYNTAX:"GR" /uninvite [UID]");
	if(uid < 1) return MSG(playerid,GOLD,"ERROR:"GR" Invalid UID specified. Type (/fmembers) to monitor the UID of a player. (A)");

	format(query,sizeof query,"SELECT username,faction FROM users WHERE userid = %d",uid);
	new DBResult: Result = db_query(Database, query);
	if(!db_num_rows(Result))  return MSG(playerid,GOLD,"ERROR:"GR" Invalid UID specified. Type (/fmembers) to monitor the UID of a player. (B)");
	
	new playername[MAX_PLAYER_NAME],playerfaction;
	playerfaction = db_get_field_assoc_int(Result, "faction");
	if(playerfaction == -1 || User[playerid][faction] != playerfaction)
	{
		MSG(playerid,GOLD,"ERROR:"GR" Invalid UID specified. Type (/fmembers) to monitor the UID of a player. (C)");
		return db_free_result(Result);
	} 
	db_get_field_assoc(Result, "username", playername, sizeof playername);
	db_free_result(Result);

	format(query,sizeof query,"(( [Faction] %s %s (ID:%d) has uninvited %s (UID:%d) from the faction. ))"
	,User[playerid][frankname],User[playerid][Username],playerid,playername,uid);
	SendFMEx(User[playerid][faction],query,CFAC);
	print(query);
	
	format(query,sizeof query,"UPDATE users SET salary = 0,tier = 0,rname = 'N/A',faction = 0 WHERE userid = %d",uid);
	db_query(Database, query);	

	foreach(Player, i) 
	{
		if(User[i][UserID] == uid)
		{
			User[i][faction] = -1;
			User[i][frank] = 0;
			User[i][psalary] = 0;
			format(User[i][frankname],24,"N/A");		
		}
	}
	return 1;	
}
/*CMD:uninvite(playerid,params[])
{
	if(User[playerid][faction] == -1) return MSG(playerid,GOLD,"ERROR:"GR" You are not in a faction.");
	if(User[playerid][frank] > 2) return MSG(playerid,GOLD,"ERROR:"GR" You cannot uninvite players from the faction.");
	new name[MAX_PLAYER_NAME],
		id;	
	if(sscanf(params,"s[24]",name)) return MSG(playerid,GOLD,"SYNTAX:"GR" /uninvite [playerid/FullAccountName]");
	if(IsNumeric(name))
	{
		id = strval(name);
		if(!User[id][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		if(User[id][faction] != User[playerid][faction]) return MSG(playerid,GOLD,"ERROR:"GR" Specified player isn't in the faction.");

		new query[140];
		format(query,sizeof query,"(( [Faction] %s %s (ID:%d) has uninvited %s (ID:%d) from the faction. ))"
		,User[playerid][frankname],User[playerid][Username],playerid,User[id][Username],id);
		SendFMEx(User[playerid][faction],query,CFAC);
		print(query);

		F[User[playerid][faction]][fmembers]--;
		UpdateFaction(User[playerid][faction]);

		User[id][faction] = -1;
		User[id][frank] = 0;
		format(User[id][frankname],24,"N/A");

		format(query,sizeof query,"UPDATE users SET tier = %d,rname = '%s',faction = %d WHERE userid = %d",User[id][frank],User[id][frankname],User[id][faction],User[id][UserID]);
		db_query(Database, query);
		return 1;
	}
	format(large_string,124,"SELECT userid FROM users WHERE username = '%s'",name);
	new DBResult: Result = db_query(Database, large_string);
	if(db_num_rows(Result))
	{
		new unique = db_get_field_assoc_int(Result, "userid");
		db_free_result(Result);
		foreach(Player, i)
		{
			if(unique == User[i][UserID])
			{
				format(large_string,sizeof large_string,"SERVER: Specified player is online. Simply type (/uninvite %d) to uninvite them from the faction.",i);
				MSG(playerid,WHITE,large_string);
				return 1;
			}
		}
		format(large_string,sizeof large_string,"UPDATE users SET tier = 0,rname = 'N/A',faction = -1 WHERE userid = %d",unique);
		db_query(Database, large_string);
		format(large_string,124,"SERVER: %s (UID: %d) has been uninvited from the faction.", name, unique);
		MSG(playerid,WHITE,large_string);		
	}
	else
	{
		MSG(playerid,GOLD,"ERROR:"GR" Invalid player name specified.");
	}
	return 1;
}*/
CMD:leavefaction(playerid,params[])
{
	if(User[playerid][faction] == -1) return MSG(playerid,GOLD,"ERROR:"GR" You are not in a faction.");
	new query[140];
	format(query,sizeof query,"(( [Faction] %s %s (ID:%d) has left the faction. ))"
	,User[playerid][frankname],User[playerid][Username],playerid);
	SendFMEx(User[playerid][faction],query,CFAC);
	print(query);
	F[User[playerid][faction]][fmembers]--;
	UpdateFaction(User[playerid][faction]);
	User[playerid][faction] = -1;
	User[playerid][frank] = 0;
	User[playerid][psalary] = 0;
	format(User[playerid][frankname],24,"N/A");
	format(query,sizeof query,"UPDATE users SET salary = 0,tier = %d,rname = '%s',faction = %d WHERE userid = %d",User[playerid][frank],User[playerid][frankname],User[playerid][faction],User[playerid][UserID]);
	db_query(Database, query);
	return 1;
}
CMD:settier(playerid,params[])
{
	if(User[playerid][faction] == -1) return MSG(playerid,GOLD,"ERROR:"GR" You are not in a faction.");
	if(User[playerid][frank] > 1) return MSG(playerid,GOLD,"ERROR:"GR" You cannot set tier.");
	new id,tier;
	if(sscanf(params,"ui",id,tier)) return MSG(playerid,GOLD,"SYNTAX:"GR" /settier [playerid/PartOfName] [tier]");
	if(!User[id][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
	if(User[id][faction] != User[playerid][faction])
	    return MSG(playerid,GOLD,"ERROR:"GR" Specified player isn't in your faction.");
	User[id][frank] = tier;
	new query[140];
	format(query,sizeof query,"(( [Faction] %s %s has set %s %s tier to %d. ))",User[playerid][frankname],User[playerid][Username],User[id][frankname],User[id][Username],tier);
	SendFMEx(User[playerid][faction],query,CFAC);
	format(query,sizeof query,"UPDATE users SET tier = %d WHERE userid = %d",tier,User[id][UserID]);
	db_query(Database, query);
	return 1;
}

CMD:setsalary(playerid,params[])
{
	if(User[playerid][faction] == -1) return MSG(playerid,GOLD,"ERROR:"GR" You are not in a faction.");
	if(User[playerid][frank] > 1) return MSG(playerid,GOLD,"ERROR:"GR" You cannot set salary.");
	if(F[User[playerid][faction]][ftype] != PD && F[User[playerid][faction]][ftype] != LEGAL && F[User[playerid][faction]][ftype] != MEDICAL)
		return MSG(playerid, GOLD, "ERROR:"GR" Only legal factions can set salary.");
	new id,tier;
	if(sscanf(params,"ui",id,tier)) return MSG(playerid,GOLD,"SYNTAX:"GR" /settier [playerid/PartOfName] [salary]");
	if(!User[id][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
	if(User[id][faction] != User[playerid][faction])
	    return MSG(playerid,GOLD,"ERROR:"GR" Specified player isn't in your faction.");
	User[id][psalary] = tier;
	new query[140];
	format(query,sizeof query,"(( [Faction] %s %s has set %s %s salary to %d. ))",User[playerid][frankname],User[playerid][Username],User[id][frankname],User[id][Username],tier);
	SendFMEx(User[playerid][faction],query,CFAC);
	format(query,sizeof query,"UPDATE users SET salary = %d WHERE userid = %d",tier,User[id][UserID]);
	db_query(Database, query);
	return 1;
}
CMD:setdivision(playerid,params[])
{
	if(User[playerid][faction] == -1) return MSG(playerid,GOLD,"ERROR:"GR" You are not in a faction.");
	if(User[playerid][frank] > 1) return MSG(playerid,GOLD,"ERROR:"GR" You cannot set divison.");
	new id,rank[24];
	if(sscanf(params,"us[24]",id,rank)) return MSG(playerid,GOLD,"SYNTAX:"GR" /setdivision [playerid/PartOfName] [division]");
	if(!User[id][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
	if(User[id][faction] != User[playerid][faction])
	    return MSG(playerid,GOLD,"ERROR:"GR" Specified player isn't in your faction.");
	if(strlen(rank) > 23) return MSG(playerid,GOLD,"ERROR:"GR" Specified division is too long.");

	new query[140];
	format(query,sizeof query,"(( [Faction] %s %s has set %s %s division to %s. ))",User[playerid][frankname],User[playerid][Username],User[id][frankname],User[id][Username],rank);
	SendFMEx(User[playerid][faction],query,CFAC);

	format(User[id][fdivision],24,"%s",rank);
	format(query,sizeof query,"UPDATE users SET division = '%s' WHERE userid = %d",rank,User[id][UserID]);

	db_query(Database, query);
	return 1;

}
CMD:setrank(playerid,params[])
{
	if(User[playerid][faction] == -1) return MSG(playerid,GOLD,"ERROR:"GR" You are not in a faction.");
	if(User[playerid][frank] > 1) return MSG(playerid,GOLD,"ERROR:"GR" You cannot set rank.");
	new id,rank[24];
	if(sscanf(params,"us[24]",id,rank)) return MSG(playerid,GOLD,"SYNTAX:"GR" /setrank [playerid/PartOfName] [rank]");
	if(!User[id][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
	if(User[id][faction] != User[playerid][faction])
	    return MSG(playerid,GOLD,"ERROR:"GR" Specified player isn't in your faction.");
	if(strlen(rank) > 23) return MSG(playerid,GOLD,"ERROR:"GR" Specified rank name is too long.");

	new query[140];
	format(query,sizeof query,"(( [Faction] %s %s has set %s %s rank to %s. ))",User[playerid][frankname],User[playerid][Username],User[id][frankname],User[id][Username],rank);
	SendFMEx(User[playerid][faction],query,CFAC);

	format(User[id][frankname],24,"%s",rank);
	format(query,sizeof query,"UPDATE users SET rname = '%s' WHERE userid = %d",rank,User[id][UserID]);

	db_query(Database, query);
	return 1;

}
CMD:setfactionspawn(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][faction] < 1)
			return MSG(playerid, GOLD, "ERROR:"GR" You need to be in a faction to use this command.");
		if(User[playerid][frank] != 1)
			return MSG(playerid, GOLD, "ERROR:"GR" Only Tier 1 can set faction spawn.");
		if(User[playerid][uMoney] < 3000)
			return MSG(playerid, GOLD, "ERROR:"GR" You need $3000 to set a faction's spawn.");
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		new id = User[playerid][faction];
		F[id][fposx] = x;
		F[id][fposy] = y;
		F[id][fposz] = z;
		F[id][fvw] = GetPlayerVirtualWorld(playerid);
		F[id][fint] = GetPlayerInterior(playerid);
		GiveMoney(playerid, -3000);
		GameTextForPlayer(playerid, "~r~-3000", 2500, 1);
		format(large_string, sizeof large_string, "UPDATE factions SET fx = '%f', fy = '%f', fz = '%f',fvw = %d, fint = %d WHERE fid = %d", x, y, z, F[id][fvw], F[id][fint], User[playerid][faction]);
		db_query(Database, large_string);
		MSG(playerid, GOLD, "Info:"GR" Faction spawn point has been set to this location.");
		return 1;
	}
	return 0;
}
CMD:setfaction(playerid,params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new id,f,tier;
		if(sscanf(params,"uii",id,f,tier)) return MSG(playerid,GOLD,"SYNTAX:"GR" /setfaction [playerid] [factionid] [tier]");
		if(F[f][ftype] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Invalid faction specified.");
		User[id][faction] = f;
		User[id][frank] = tier;
		F[f][fmembers]++;
		UpdateFaction(f);
		new query[124];
		format(query,sizeof query,"Info: You have set %s (ID:%d) faction to ID %d (%s)",User[id][Username],id,f,F[f][fname]);
		SFM(playerid,GRAD2,query);
		format(query,sizeof query,"UPDATE users SET faction = %d,tier = %d WHERE userid = %d",f,User[id][frank],User[id][UserID]);
		db_query(Database, query);
		return 1;
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:fcreate(playerid,params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new name[45],type;
		if(sscanf(params,"is[45]",type,name)) return MSG(playerid,GOLD,"ERROR:"GR" /fcreate [FactionType] [FactionName]");
		if(type == 0)
		    return MSG(playerid,GOLD,"ERROR:"GR" Invalid type specified.");
		for(new i = 1; i < MAX_FACTIONS; i++)
		{
		    if(F[i][ftype] != 0) continue;
		    format(F[i][fname],45,"%s",name);
		    print(F[i][fname]);

			F[i][ftype] = type;
			F[i][fid] = i;
			new query[124];
			format(query,sizeof query,"INSERT INTO factions (fid,name,type) VALUES (%d,'%q',%d)",F[i][fid],F[i][fname],F[i][ftype]);
			db_query(Database, query);
			break;

		}
		return 1;
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:fdelete(playerid,params[])
{
	if(IsPlayerAdmin(playerid))
	{
		new id;
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"ERROR:"GR" /fdelete [FactionID]");
		if(F[id][ftype] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Invalid faction specified.");
		new query[124];
		format(query,sizeof query,"DELETE FROM factions WHERE fid = %d",F[id][fid]);
		db_query(Database, query);
 		format(F[id][fname],45,"");
		F[id][ftype] = 0;
		F[id][fid] = 0;
		return 1;
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
}
CMD:ajail(playerid,params[])
{
	if(User[playerid][Useradmin] > 0)
	{
		new id,time,reason[124];
		if(sscanf(params,"uis[124]",id,time,reason))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /ajail [playerid/PartOfName] [time (minutes)] [reason]");
		JailPlayer(id, sendername(playerid), time, reason);
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:release(playerid,params[])
{
	if(User[playerid][Useradmin] > 0)
	{
		new id;
		if(sscanf(params,"u",id))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /release [playerid/PartOfName]");
		if(!User[id][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Specified player isn't logged on.");
		if(User[id][jail][0] < 1) return MSG(playerid, GOLD,"ERROR:"GR" Specified player isn't in admin jail.");
		User[id][jail][1] = 0;
		User[id][jail][0] = 0;
		format(large_string,sizeof large_string,"STFCMD: %s has been released from admin-jail by %s.", User[id][Username], User[playerid][Username]);
		SendClientMessageToAll(ADMIN, large_string);		
		format(large_string,sizeof large_string,"UPDATE users SET jailtime = %d,jailtype = %d WHERE userid = %d",User[id][jail][0],User[id][jail][1],User[id][UserID]);
        db_query(Database, large_string);
		// logging
		large_string[0] = EOS;
		format(large_string,sizeof large_string,"[%s][%s] %s has been released from admin-jail by %s.",PasteDate(),PasteTime(),User[id][Username],User[playerid][Username]);
		format(large_string,sizeof large_string,"INSERT INTO adminrecord (userid,log) VALUES (%d,'%s')",User[id][UserID], large_string);
		db_query(Database, large_string);
		//---	
		SpawnPlayer(id);
	} else {
			return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
// jail[0] = time
//jail[1] = type of jail (0 = IC JAIL, 1 = AJAIL)
stock JailPlayer(playerid,jailedby[MAX_PLAYER_NAME],time,reason[])
{
	if(User[playerid][Logged])
	{
		SetPlayerPos(playerid, 2693.567382,2784.933837,10.820312);
		SetPlayerVirtualWorld(playerid, 1000+playerid);
		SetPlayerInterior(playerid, 0);
		User[playerid][jail][0] = time;
		User[playerid][jail][1] = 1;
		if(strlen(reason)<30)
		{
			format(large_string, sizeof(large_string), "STFCMD: %s has been admin-jailed by %s for %d minute(s); Reason: %s", User[playerid][Username], jailedby, time, reason);
			SendClientMessageToAll(ADMIN, large_string);
		}
		else
		{
			new part[100];
			strmid(part,reason,0,29,30);
			format(large_string, sizeof(large_string), "STFCMD: %s has been admin-jailed by %s for %d minute(s); Reason: %s...", User[playerid][Username], jailedby, time, part);
			SendClientMessageToAll(ADMIN, large_string);
			strmid(part,reason,29,128,100);
			format(large_string,sizeof(large_string),"...%s",part);
			SendClientMessageToAll(ADMIN,large_string);
		}
		format(large_string,sizeof large_string,"UPDATE users SET jailtime = %d,jailtype = %d WHERE userid = %d",User[playerid][jail][0],User[playerid][jail][1],User[playerid][UserID]);
        db_query(Database, large_string);
		// logging
		large_string[0] = EOS;
		format(large_string,sizeof large_string,"[%s][%s] %s has been admin-jailed by %s; Reason: %s",PasteDate(),PasteTime(),sendername(playerid),jailedby,reason);
		format(large_string,sizeof large_string,"INSERT INTO adminrecord (userid,log) VALUES (%d,'%s')",User[playerid][UserID], large_string);
		db_query(Database, large_string);
		//---
	}
}
CMD:mdc(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new vid = GetPlayerVehicleID(playerid);
		if(vid == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in a vehicle.");
		if(User[playerid][faction] == -1) 
			return MSG(playerid,GOLD,"ERROR:"GR" You aren't in a faction.");
		if(V[vid][vfac] != User[playerid][faction] || F[User[playerid][faction]][ftype] != PD)
			return MSG(playerid, GOLD, "ERROR:"GR" This vehicle has no MDC.");
		if(GetPlayerVehicleSeat(playerid) > 1) 
			return MSG(playerid, GOLD, "ERROR:"GR" You need to be in the front seat to access the MDC.");
		
		Dialog_Show(playerid,dMDC,DIALOG_STYLE_LIST,"Mobile Digital Computer","Citizen Check\nVehicle Check\nHouse Check\nBusiness Check\nCheck Warrants\nAdd Warrant\nRemove Warrant\nImpound Vehicle\nUnimpound Vehicle","Select","Cancel");
		cmd_bme(playerid, "accesses the MDC.");
		return 1;
	}
	return 0;
}
Dialog:dMDC(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPlayerVehicleID(playerid) == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in a vehicle.");
		switch(listitem)
		{
			case 0: Dialog_Show(playerid,dCitizenCheck,DIALOG_STYLE_INPUT,"Mobile Digital Computer > Citizen Check","Insert the full of name of the citizen you would like to check:\nFormat: Name_Surname, e.g: John_Smith","Input","Cancel");
			case 1: Dialog_Show(playerid,dVehicleCheck,DIALOG_STYLE_INPUT,"Mobile Digital Computer > Vehicle Check","Insert the plate number of the vehicle you would like to check:\nFormat: LSnumber, e.g: LS1004","Input","Cancel");
			case 2: Dialog_Show(playerid,dHouseCheck,DIALOG_STYLE_INPUT,"Mobile Digital Computer > House Check","Insert the address of the house you would like to check:\nFormat: Area Number, e.g: Jefferson 7628","Input","Cancel");
			case 3: Dialog_Show(playerid,dBizCheck,DIALOG_STYLE_INPUT,"Mobile Digital Computer > Business Check","Insert the name of the business you would like to check:\nFormat: BusinessName, e.g: Jefferson Hardware","Input","Cancel");
			case 4: 
			{
				new DBResult:Result = db_query(Database, "SELECT * FROM warrants");
				new id = 0;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						new warrantid = db_get_field_assoc_int(Result, "warrantid"),
							warrantee[MAX_PLAYER_NAME],
							warrant[256],
							time[20],
							date[20]
						;
						db_get_field_assoc(Result, "warrant", warrant, 256);
						db_get_field_assoc(Result, "wtime", time, 20);
						db_get_field_assoc(Result, "wdate", date, 20);
						db_get_field_assoc(Result, "warrantee", warrantee, MAX_PLAYER_NAME);
						format(large_string, sizeof large_string, "%s[%s][%s] Warrant ID: "R"%d"D"; Warrantee: "R"%s"D"; Warrant: %s\n", large_string, date, time, warrantid, warrantee, warrant);
						id++;
					}
					else
						break;
				}
				while(db_next_row(Result));
				db_free_result(Result);
				Dialog_Show(playerid,dCheckWarrants,DIALOG_STYLE_MSGBOX,"Mobile Digital Computer > Check Warrants",large_string, "Close", "");
				if(isnull(large_string))
					MSG(playerid, GOLD, "MDC:"GR" No warrants found in the database.");
			}
			case 5: Dialog_Show(playerid,dAddWarrant,DIALOG_STYLE_INPUT,"Mobile Digital Computer > Add Warrant","Insert the name of the warrantee:","Input","Cancel");
			case 6: Dialog_Show(playerid,dRemoveWarrant,DIALOG_STYLE_INPUT,"Mobile Digital Computer > Remove Warrant","Insert the ID of the warrant to remove:","Input","Cancel");
			case 7: Dialog_Show(playerid,dImpoundVeh,DIALOG_STYLE_INPUT,"Mobile Digital Computer > Impound Vehicle","Insert the plate of the vehicle to impound:","Input","Cancel");
			case 8: Dialog_Show(playerid,dUnImpoundVeh,DIALOG_STYLE_INPUT,"Mobile Digital Computer > Unimpound Vehicle","Insert the plate of the vehicle to unimpound:","Input","Cancel");
		}
	}
	return 1;
}
Dialog:dUnImpoundVeh(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPlayerVehicleID(playerid) == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in a vehicle.");
		if(isnull(inputtext))
			return MSG(playerid, GOLD, "ERROR 036:"GR" Empty statement.");
		new vid = -1;
		for(new i = 1, j= GetVehiclePoolSize(); i <= j; i++)
		{
			if(!strcmp(V[i][vplate], inputtext, true))
			{
				vid = i;
				break;
			}
		}
		if(vid == -1)
			return MSG(playerid, GOLD, "ERROR 404: Invalid vehicle plate specified.");
		if(V[vid][vimpound] == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" Specified vehicle is not impounded."); 
		format(large_string, sizeof large_string, "has unimpounded the %s.", GetVehicleName(GetVehicleModel(vid)));
		cmd_bme(playerid, large_string);

		format(large_string,sizeof large_string,"[MDC/Dispatch] %s %s has unimpounded the %s %s.",User[playerid][frankname],User[playerid][pUsername], GetVehicleName(GetVehicleModel(vid)), inputtext);
		SendFMEx(User[playerid][faction],large_string,RADIO);

		SetVehicleVirtualWorld(vid, 0);
		foreach(Player, i)
		{
			if(IsPlayerInRangeOfPoint(i, 15, V[vid][vx], V[vid][vy], V[vid][vz]))
				PlayAudioStreamForPlayer(playerid, "http://finalnights-rp.com/tow_truck_impounding.mp3");
		}
		V[vid][vimpound] = 0;
		format(large_string, sizeof large_string, "UPDATE cars SET impound = 0 WHERE vid = %d", V[vid][dataid]);
		db_query(Database, large_string);
	}
	return 1;
}
Dialog:dImpoundVeh(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPlayerVehicleID(playerid) == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in a vehicle.");
		if(isnull(inputtext))
			return MSG(playerid, GOLD, "ERROR 036:"GR" Empty statement.");
		new vid = -1;
		for(new i = 1, j= GetVehiclePoolSize(); i <= j; i++)
		{
			if(!strcmp(V[i][vplate], inputtext, true))
			{
				vid = i;
				break;
			}
		}
		if(vid == -1)
			return MSG(playerid, GOLD, "ERROR 404: Invalid vehicle plate specified.");
		if(V[vid][vrent] > 0)
			return MSG(playerid, GOLD, "MDC:"GR" You cannot impound a state vehicle.");
		
		format(large_string, sizeof large_string, "calls in a Tow Truck to impound the %s.", GetVehicleName(GetVehicleModel(vid)));
		cmd_bme(playerid, large_string);

		format(large_string,sizeof large_string,"[MDC/Dispatch] %s %s has impounded the %s %s.",User[playerid][frankname],User[playerid][pUsername], GetVehicleName(GetVehicleModel(vid)), inputtext);
		SendFMEx(User[playerid][faction],large_string,RADIO);
		if(V[vid][vfac] == 0)
		{
			SetVehicleVirtualWorld(vid, 1);

			V[vid][vimpound] = gettime()+3600*48; // 3600*24

			format(large_string, sizeof large_string, "UPDATE cars SET impound = %d WHERE vid = %d", V[vid][vimpound], V[vid][dataid]);
			db_query(Database, large_string);
		}
		else 
			RespawnVehicle(vid);
		
		new Float:x, Float: y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		foreach(Player, i)
		{
			if(IsPlayerInRangeOfPoint(i, 15, x, y, z))
				PlayAudioStreamForPlayer(playerid, "http://finalnights-rp.com/tow_truck_impounding.mp3");
		}

	}
	return 1;
}
Dialog:dRemoveWarrant(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
			return MSG(playerid, GOLD, "ERROR:"GR" Invalid input.");
		if(GetPlayerVehicleID(playerid) == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in a vehicle.");
		new warrantid = strval(inputtext);
		format(large_string, sizeof large_string, "DELETE FROM warrants WHERE warrantid = %d", warrantid);
		db_query(Database, large_string);
		format(large_string,sizeof large_string,"[MDC/Dispatch] %s %s has removed a warrant. (Warrant ID: %d)",User[playerid][frankname],User[playerid][pUsername], warrantid);
		SendFMEx(User[playerid][faction],large_string,RADIO);
	}
	return 1;
}
Dialog:dAddWarrant(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(isnull(inputtext))
			return MSG(playerid, GOLD, "ERROR 036:"GR" Empty statement.");
		if(GetPlayerVehicleID(playerid) == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in a vehicle.");
		SetPVarString(playerid, "mdcWarrantee", inputtext);
		Dialog_Show(playerid,dAddWarrantFinal,DIALOG_STYLE_INPUT,"Mobile Digital Computer > Add Warrant","Insert the warrant:","Input","Cancel");
	}
	return 1;
}
Dialog:dAddWarrantFinal(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(isnull(inputtext))
			return MSG(playerid, GOLD, "ERROR 036:"GR" Empty statement.");
		if(GetPlayerVehicleID(playerid) == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in a vehicle.");
		new warrantee[MAX_PLAYER_NAME];
		GetPVarString(playerid, "mdcWarrantee", warrantee, MAX_PLAYER_NAME);
		new DBResult: Result = db_query(Database, "SELECT warrantid FROM warrants ORDER BY warrantid DESC");
		if(!db_num_rows(Result)) large_string[0] = 0;
		large_string[0] = db_get_field_assoc_int(Result, "warrantid")+1;
		new year,month,day;
		getdate(year,month,day);
		new sdate[15],stime[9];
		format(sdate,sizeof sdate,"%02d/%02d/%d", day, month, year);
		format(stime,sizeof stime,"%02d:%02d:%02d", GetSVarInt("IChour"), GetSVarInt("ICmin"), GetSVarInt("ICsec"));
		format(large_string, sizeof large_string, "INSERT INTO warrants (warrantid, warrantee, warrant, wdate, wtime) VALUES (%d, '%q', '%q', '%s', '%s')"
		,large_string[0], warrantee, inputtext, sdate, stime);
		db_query(Database, large_string);
		format(large_string,sizeof large_string,"[MDC/Dispatch] %s %s has added a warrant. (Warrantee: %s)",User[playerid][frankname],User[playerid][pUsername], warrantee);
		SendFMEx(User[playerid][faction],large_string,RADIO);
	}
	DeletePVar(playerid, "mdcWarrantee");
	return 1;
}
Dialog:dCitizenCheck(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPlayerVehicleID(playerid) == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in a vehicle.");
		if(!isnull(inputtext))
		{
			if(strlen(inputtext) > 3)
			{
				format(large_string, sizeof large_string, "SELECT username,spawnat,ujob,gender FROM users WHERE username = '%s'", inputtext);
				new DBResult: Result = db_query(Database, large_string);
				large_string[0] = EOS;
				if(db_num_rows(Result))
				{
					new name[MAX_PLAYER_NAME],
						spawn,
						job,
						gender
					;
					db_get_field_assoc(Result, "username", name, 24);
					spawn = db_get_field_assoc_int(Result, "spawnat");
					job = db_get_field_assoc_int(Result, "ujob");
					gender = db_get_field_assoc_int(Result, "gender");
					new sjob[24];
					new sspawn[24];
					switch(job)
					{
						case JOB_COURIER: sjob = "Courier";
						case JOB_PB: sjob = "Pizzaboy";
						case JOB_WH: sjob = "Warehouse Operative";
						case JOB_BIZ: sjob = "Businessman";
						case JOB_BW: sjob = "Bus Driver";
						case JOB_MECH: sjob = "Mechanic";
						default: sjob = "Unemployed";
					}
					if(spawn == 0) sspawn = "Default";
					else format(sspawn, sizeof sspawn, "%s", H[spawn][hname]);
					new sgender[10];
					if(gender == 0) sgender = "Male";
					else sgender = "Female";
					format(large_string, sizeof large_string, "Citizen Name: %s\nSex: %s\nResidence: %s\nJob: %s", name, sgender, sspawn, sjob);
					Dialog_Show(playerid,dMDCShow,DIALOG_STYLE_MSGBOX,"Mobile Digital Computer > Citizen Check",large_string,"Close","");
					return 1;
				}
				else MSG(playerid, GOLD, "ERROR 404:"GR" Invalid citizen name specified.");
			}
		}
		else MSG(playerid, GOLD, "ERROR 036:"GR" Empty statement.");
	}
	return 1;
}

Dialog:dVehicleCheck(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPlayerVehicleID(playerid) == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in a vehicle.");
		if(isnull(inputtext))
			return MSG(playerid, GOLD, "ERROR 036:"GR" Empty statement.");
		new vid = -1;
		for(new i = 1, j= GetVehiclePoolSize(); i <= j; i++)
		{
			if(!strcmp(V[i][vplate], inputtext, true))
			{
				vid = i;
				break;
			}
		}
		if(vid == -1)
			return MSG(playerid, GOLD, "ERROR 404: Invalid vehicle plate specified.");
		new owner[64];
		if(V[vid][cowner] != 0)
		{
			format(large_string, 124,"SELECT username FROM users WHERE userid = %d", V[vid][cowner]);
			new DBResult: Result = db_query(Database, large_string);
			db_get_field_assoc(Result, "username", owner, MAX_PLAYER_NAME);
		}
		if(isnull(owner))
		{
			if(AdminVeh[vid] == true)
				owner = "(( Admin Vehicle ))";
			if(V[vid][vrent] > 0)
				owner = "State (Rentable Vehicle)";
			if(V[vid][vfac] > 0)
			{
				if(F[V[vid][vfac]][ftype] == LEGAL || F[V[vid][vfac]][ftype] == PD)
					format(owner, 64, "%s", F[V[vid][vfac]][fname]);
				else owner = "Other Faction Vehicle";
			}
		}
		format(large_string, sizeof large_string, "Vehicle Name: %s\nVehicle Plate: %s\nVehicle Owner: %s\nPrimary Color, Secondary Color: %d, %d", GetVehicleName(GetVehicleModel(vid)), inputtext, owner,
		V[vid][vc1], V[vid][vc2]);
		Dialog_Show(playerid,dVehicleCheck,DIALOG_STYLE_MSGBOX,"Mobile Digital Computer > Vehicle Check",large_string,"Close", "");
	}
	return 1;
}
Dialog:dHouseCheck(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPlayerVehicleID(playerid) == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in a vehicle.");
		if(isnull(inputtext))
			return MSG(playerid, GOLD, "ERROR 036:"GR" Empty statement.");
		new id = -1;
		foreach(Houses, i)
		{
			if(!strcmp(H[i][hname], inputtext))
			{
				id = i;
			}
		}
		if(id == -1)
			return MSG(playerid, GOLD, "ERROR 404:"GR" Invalid house name specified.");
		new owner[MAX_PLAYER_NAME];
		if(H[id][howner] != 0)
		{
			format(large_string, 256, "SELECT username FROM users WHERE userid = %d", H[id][howner]);
			new DBResult:Result = db_query(Database, large_string);
			db_get_field_assoc(Result, "username", owner, MAX_PLAYER_NAME);
		}
		if(isnull(owner))
			owner = "N/A";
		format(large_string, sizeof large_string, "House Name: %s\nAddress: %d\nOwner: %s", inputtext, H[id][haddress], owner);
		Dialog_Show(playerid,dHouseCheck,DIALOG_STYLE_MSGBOX,"Mobile Digital Computer > House Check",large_string,"Close", "");
	}
	return 1;
}
Dialog:dBizCheck(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPlayerVehicleID(playerid) == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in a vehicle.");
		if(isnull(inputtext))
			return MSG(playerid, GOLD, "ERROR 036:"GR" Empty statement.");
		new id = -1;
		foreach(Biz, i)
		{
			if(!strcmp(B[i][bname], inputtext))
			{
				id = i;
			}
		}
		if(id == -1)
			return MSG(playerid, GOLD, "ERROR 404:"GR" Invalid business name specified.");
		new owner[MAX_PLAYER_NAME];
		if(B[id][bowner] != 0)
		{
			format(large_string, 256, "SELECT username FROM users WHERE userid = %d", B[id][bowner]);
			new DBResult:Result = db_query(Database, large_string);
			db_get_field_assoc(Result, "username", owner, MAX_PLAYER_NAME);
		}
		if(isnull(owner))
			owner = "N/A";
		format(large_string, sizeof large_string, "Business Name: %s\nAddress: %d\nOwner: %s", inputtext, B[id][baddress], owner);
		Dialog_Show(playerid,dBizCheck,DIALOG_STYLE_LIST,"Mobile Digital Computer > Business Check",large_string,"Close", "");
	}
	return 1;
}
CMD:track(playerid, params[])
{
	if(User[playerid][faction] > -1)
	{
		if(F[User[playerid][faction]][ftype] == PD)
		{
			if(GetPVarInt(playerid, "p_Tracking") > 0)
			{
				MSG(playerid, GOLD,"[Tracking Cancellation]"GR" You have stopped tracking your target.");
				DeletePVar(playerid, "P_Tracking");
				return 1;
			}
			new phone;
			if(sscanf(params, "i" , phone))
				return MSG(playerid, GOLD, "SYNTAX:"GR" /track [phonenumber]");
			if(phone <= 0) return MSG(playerid, MAROON, "[Tracking Failed]"GR" No signal detected for the specified phone number.");
			new bool:found;
			new Float:x, Float:y, Float:z;
			foreach(Player, i)
			{
				if(User[i][phonenum] == phone && User[i][togphone] == true)
				{

					if(GetPlayerInterior(i) == 0)
					{
						GetPlayerPos(i, x, y, z);
					}
					else if(User[i][HouseIN] > -1)
					{
						x = H[User[i][HouseIN]][hx];
						y = H[User[i][HouseIN]][hy];
						z = H[User[i][HouseIN]][hz];
					}
					else if(User[i][BusinessIN] > -1)
					{
						x = B[User[i][BusinessIN]][bx];
						y = B[User[i][BusinessIN]][by];
						z = B[User[i][BusinessIN]][bz];
					}
					else if(User[i][PropIN] > -1)
					{
						x = P[User[i][PropIN]][px];
						y = P[User[i][PropIN]][py];
						z = P[User[i][PropIN]][pz];
					}
					SetPlayerCheckpoint(playerid, x, y, z, 3.00);
					SetPVarInt(playerid, "p_Tracking", 1);
					new TimerID = playerid+GetPlayerVirtualWorld(playerid)+random(1000);
					SetPVarInt(playerid, "p_TrackingTimerID", TimerID);
					MSG(playerid, GREEN, "[Tracking Successful]"GR" Tracking has started. Location of your target is updated every thirty seconds.");
					found = true;
					SetTimerEx("OnPlayerTrack", 30*1000, 0, "ddd", playerid, i, TimerID);
					return 1;
				}
			}
			if(!found)
				 return MSG(playerid, MAROON, "[Tracking Failed]"GR" No signal detected for the specified phone number.");
		}
		else return MSG(playerid, GOLD, "ERROR:"GR" You have no access to this command.");
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You have no access to this command.");
}
forward OnPlayerTrack(playerid, target, unique_number);
public OnPlayerTrack(playerid, target, unique_number)
{
	if(User[playerid][Logged] == false)
		return print("OnPlayerTrack stopped. `playerid` is not logged on.");
	if(User[target][Logged] == false)
		return print("OnPlayerTrack stopped. `target` is not logged on.");
	if(GetPVarInt(playerid, "p_Tracking") == 0)
		return print("OnPlayerTrack stopped. p_Tracking is zero.");
	if(GetPVarInt(playerid, "p_TrackingTimerID") != unique_number)
		return print("OnPlayerTrack stopped. TimerID of player not equal to unique number.");
	new Float:x, Float:y, Float:z;
	if(GetPlayerInterior(target) == 0)
	{
		GetPlayerPos(target, x, y, z);
	}
	else if(User[target][HouseIN] > -1)
	{
		x = H[User[target][HouseIN]][hx];
		y = H[User[target][HouseIN]][hy];
		z = H[User[target][HouseIN]][hz];
	}
	else if(User[target][BusinessIN] > -1)
	{
		x = B[User[target][BusinessIN]][bx];
		y = B[User[target][BusinessIN]][by];
		z = B[User[target][BusinessIN]][bz];
	}
	else if(User[target][PropIN] > -1)
	{
		x = P[User[target][PropIN]][px];
		y = P[User[target][PropIN]][py];
		z = P[User[target][PropIN]][pz];
	}
	SetPlayerCheckpoint(playerid, x, y, z, 3.00);
	printf("[%s][%s] OnPlayerTrack has been called. (tracker %s, tracked %s)", PasteDate(), PasteTime(), sendername(playerid), sendername(target));
	SetTimerEx("OnPlayerTrack", 30*1000, 0, "dd", playerid, target);
	return 1;
}
CMD:frisk(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(GetPVarInt(playerid, "frisk_PCD") > gettime())
			return MSG(playerid, GOLD, "FRISK"GR": There is a ten seconds interval between each attempt.");
		new target;
		if(sscanf(params, "u", target))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /frisk [playerid/partofname]");
		if(target == playerid) return MSG(playerid, GOLD, "ERROR:"GR" You cannot frisk yourself.");
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		if(!IsPlayerInRangeOfPoint(target, 2, x, y, z))
			return MSG(playerid, GOLD, "ERROR:"GR" You not in range of the target.");
		SetPVarInt(playerid, "frisk_PCD", gettime()+10);
		format(large_string, sizeof large_string, "You have received a frisk request from %s; do you accept?", sendernameEx(playerid));
		Dialog_Show(target,dFrisk,DIALOG_STYLE_MSGBOX,"Frisk",large_string, "Accept", "Decline");
		SetPVarInt(target, "p_dFrisker", playerid);	
		MSG(playerid, GOLD, "FRISK:"GR" A frisk request has been sent to the target.");
	}
	return 1;
}
Dialog:dFrisk(playerid, response, listitem, inputtext[])
{
	new frisker = GetPVarInt(playerid, "p_dFrisker");
	if(!User[frisker][Logged])
		return 1;
	if(response)
	{
		// Weapons
		MSG(frisker,GRAD2,"----------------------------------------------------");
		MSG(frisker,GOLD,"[Weapons]");
		new wep[24],wep2[24],string[124];
		wep = GetWeaponNameEx(User[playerid][uWeapon][0]);
		wep2 = GetWeaponNameEx(User[playerid][uWeapon][1]);
		if(User[playerid][uWeapon][0] < 1)
			wep = "Empty";
		if(User[playerid][uWeapon][1] < 1)
			wep2 = "Empty";

		new bool:ammo[3];
		if(HasAmmo(User[playerid][uWeapon][0]))
			ammo[0] = true;
		if(HasAmmo(User[playerid][uWeapon][1]))
			ammo[1] = true;
		if(HasAmmo(User[playerid][WeaponEquipped]))
			ammo[2] = true;

		if(ammo[0])
			format(string,sizeof string,"Jacket Weapon Slot: %s (Ammo: %d)",wep,User[playerid][uWeapon_Ammo][0]);
		else format(string,sizeof string,"Jacket Weapon Slot: %s",wep);

		MSG(frisker,GRAD2,string);
		if(ammo[1])
			format(string,sizeof string,"Pocket Weapon Slot: %s (Ammo: %d)",wep2,User[playerid][uWeapon_Ammo][1]);
		else format(string,sizeof string,"Pocket Weapon Slot: %s",wep2);

		MSG(frisker,GRAD2,string);

		wep = GetWeaponNameEx(User[playerid][WeaponEquipped]);

		if(User[playerid][WeaponEquipped] < 1)
			wep = "Empty";
		if(ammo[2]) format(string,sizeof string,""G"Weapon Equipped: %s (Ammo: %d)",wep,User[playerid][WeaponEquipped_Ammo]);
		else format(string,sizeof string,"Weapon Equipped: %s",wep);
		MSG(frisker,GRAD2,string);
		MSG(frisker,GOLD,"[Inventory]");
		format(large_string, 60,"Cash: $%d", User[playerid][uMoney]);
		MSG(frisker, GRAD2, large_string);
		large_string[0] = EOS;
		for(new i = 0; i < 10; i++)
		{
			if(!isnull(UserItem[playerid][i][ItemName]))
			{
				format(large_string, 60, "%s (%d)", UserItem[playerid][i][ItemName], UserItem[playerid][i][Value]);
				MSG(frisker, GRAD2, large_string);
			}
		}
		MSG(frisker,GOLD,"[Drugs]");
		format(large_string,sizeof large_string,"SELECT drug,pure,amount FROM drugs WHERE userid = %d",User[playerid][UserID]);
		new DBResult: Result = db_query(Database, large_string);
		large_string[0] = EOS;
		do
		{
			if(db_num_rows(Result))
			{
				new type = db_get_field_assoc_int(Result,"drug");
				new drug[16];
				switch(type)
				{
				    case 1: drug = "Marijuana";
				    case 2: drug = "Heroin";
				    case 3: drug = "Cocaine";
					case 4: drug = "Ecstasy";
					case 5: drug = "Methamphetamine";
					case 6: drug = "Plant";
				}
				new purity = db_get_field_assoc_int(Result,"pure");
				new amount = db_get_field_assoc_int(Result,"amount");
				new pure[24];
				switch(purity)
				{
				    case 25: pure = "Low";
				    case 50: pure = "Medium";
				    case 75: pure = "High";
				    case 90: pure = "Pure";
				}

	            if(type != 6) format(large_string,sizeof large_string,"Drug: %s (%d); Purity: %s",drug,amount,pure);
				else format(large_string, 124,"Drug: %s (%d)",drug,amount,pure);
				MSG(frisker, GRAD2, large_string);
			} else {
				break;
			}
		}
		while(db_next_row(Result));
		db_free_result(Result);
		MSG(frisker,GRAD2,"----------------------------------------------------");
		return DeletePVar(playerid, "p_dFrisker");	
	}
	MSG(frisker, GOLD, "FRISK"GR": The recipent has declined your frisk request.");
	MSG(playerid, GOLD, "FRISK:"GR" You have declined the sender's frisk request.");
	return DeletePVar(playerid, "p_dFrisker");	
}
CMD:arrest(playerid,params[])
{
	if(User[playerid][faction])
	{
	    //264.4005,86.4024,1001.0391,272.2162 ;
	    print("pre A");
	    if(!IsPlayerInRangeOfPoint(playerid,3,ARRESTLOC)) return MSG(playerid,GOLD,"ERROR:"GR" You are not near the jail cells.");
		if(F[User[playerid][faction]][ftype] == PD)
		{
		    print("A");
            new id,fine,time,crime[124],string[200]; ///arrest playerid fine time crime
            if(sscanf(params,"uiis[124]",id,fine,time,crime)) return MSG(playerid,GOLD,"SYNTAX:"GR" /arrest [playerid/PartOfName] [fine] [time (in minutes)] [crime]");
			new Float:x,Float:y,Float:z;
			GetPlayerPos(id,x,y,z);
			if(fine < 0) return MSG(playerid,GOLD,"ERROR:"GR" Invalid fine.");
			if(time < 1) return MSG(playerid,GOLD,"ERROR:"GR" Sentence cannot be lower than one minute.");
			print("B");
			if(IsPlayerInRangeOfPoint(playerid,3,x,y,z))
			{
			    print("C");
				User[id][jail][0] = time;
				User[id][jail][1] = 0;
				print("D");
				foreach(Player,i)
				{
					if(User[i][faction] > -1)
					{
					    if(F[User[i][faction]][ftype] == PD)
					    {
					        print("E");
							format(string,sizeof string,"ARREST: %s %s has arrested %s. (Fine: %d; Time: %d minute(s))",User[playerid][frankname],User[playerid][Username],User[id][Username],fine,time);
							MSG(i,GRAD2,string);
							format(string,sizeof string,"Crime(s): %s",crime);
							MSG(i,GRAD2,string);
					    }
					    else continue;
				    }
					else continue;
				}
				print("F");
				new dd[23];
				format(dd,23,"[%s][%s]",PasteDate(),PasteTime());
				format(string,sizeof string,"INSERT INTO crecords (name,id,crime,date,name) VALUES ('%s',%d,'%s','%s','%s')",User[id][Username],User[id][UserID],crime,dd);
				db_query(Database, string);
				format(string,sizeof string,"UPDATE users SET jailtime = %d,jailtype = %d WHERE userid = %d",User[id][jail][0],User[id][jail][1],User[id][UserID]);
                db_query(Database, string);
				GiveMoney(id,-fine);
				print("G");
				SetPlayerPos(id,1306.9474,1356.5131,11.0103);
				print("H");

			}
			else MSG(playerid,GOLD,"ERROR:"GR" Specified player is out of range.");
		}
	}
	return 1;
}
CMD:cuff(playerid,params[]) return cmd_handcuff(playerid,params);
CMD:handcuff(playerid,params[])
{
	if(User[playerid][faction])
	{
		if(F[User[playerid][faction]][ftype] == PD)
		{
			new id;
			if(sscanf(params,"u",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /hand(cuff) [playerid/PartOfName]");
			if(!IsPlayerConnected(id)) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
			new Float:x, Float:y, Float:z,query[124];
			GetXYZInFrontOfPlayer(playerid, x, y, z, 1);
			if(IsPlayerInRangeOfPoint(id, 0.5, x, y, z))
			{
				GetXYZBehindOfPlayer(id, x, y, z, 0.7);
				if(IsPlayerInRangeOfPoint(playerid,0.7, x, y, z))
				{
                    if(User[id][Death] > 0)
                    {
                    	if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159)
						{
							return MSG(playerid,GOLD,"ERROR:"GR" You have to be crouching to handcuff a heavily injured player.");
						}
					}

					if(User[id][Death] > 0) ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.0, 0, 0, 0, 0, 0, 1);
					else ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 0, 0, 0, 0, 0, 1);

					if(User[id][cuff] == 0)
					{
						SetPlayerSpecialAction(id, SPECIAL_ACTION_CUFFED);
						User[id][cuff] = 1;
						format(query,sizeof query,"handcuffs %s.",User[id][pUsername]);
					}
					else
					{
						SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
						User[id][cuff] = 0;
						format(query,sizeof query,"has removed %s's handcuffs.",User[id][pUsername]);
					}
					cmd_ame(playerid, query);
				}
				else MSG(playerid,GOLD,"ERROR:"GR" You have to be behind the player you wish to handcuff.");
			}
			else MSG(playerid,GOLD,"ERROR:"GR" You must be behind the player you wish to handcuff.");
		}
	}
	return 1;
}
CMD:detain(playerid,params[])
{
	if(User[playerid][faction])
	{
		if(F[User[playerid][faction]][ftype] == PD)
		{
		    new id,seat;
		    if(sscanf(params,"ui",id,seat)) return MSG(playerid,GOLD,"SYNTAX:"GR" /detain [playerid/PartOfName] [seat]");
		    if(!IsPlayerConnected(id)) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		    if(playerid == id) return MSG(playerid,GOLD,"ERROR:"GR" You cannot detain yourself.");
			new Float:x, Float:y, Float:z, vehicle = GetPlayerVehicleID(playerid);
			GetPlayerPos(id, x, y, z);
			if(IsPlayerInRangeOfPoint(playerid, 5, x, y, z))
			{
				if(vehicle == 0)
				    return MSG(playerid,GOLD,"ERROR:"GR" You must be in a vehicle to use this command.");
				if(GetPlayerVehicleID(id) == vehicle) return MSG(playerid,GOLD,"ERROR:"GR" Specified player is already inside your vehicle.");
				if(User[id][cuff] == 0)
				    return MSG(playerid,GOLD,"ERROR:"GR" Specified player must be handcuffed in order to use this command.");
				if(seat < 1)
				    return MSG(playerid,GOLD,"ERROR:"GR" Invalid seat specified.");
                PutPlayerInVehicle(id, vehicle, seat);
				new str[50];
				format(str,sizeof str,"has detained %s into the vehicle.",User[id][pUsername]);
				cmd_me(playerid,str);

			}
			else MSG(playerid,GOLD,"ERROR:"GR" Specified player out of range.");
		}
	}
	return 1;
}
CMD:kiosk(playerid,params[])
{
	if(User[playerid][faction])
	{
		if(F[User[playerid][faction]][ftype] == PD)
		{
		    if(!IsPlayerInRangeOfPoint(playerid,3,KIOSK))
		        return MSG(playerid,GOLD,"ERROR:"GR" You must be near the kiosk to use this command.");
            Dialog_Show(playerid,DialogKiosk,DIALOG_STYLE_LIST,"Kiosk","Duty\nArmory\nChoose Uniform","Select","Cancel");
		} else {
			MSG(playerid, GOLD, "ERROR:"GR" You are not in a PD faction.");
		}
		return 1;
	} else {
		MSG(playerid, GOLD, "ERROR:"GR" You are not in a faction.");
	}
	return 0;
}
#define ARMORY_WEAPON_LIST "Taser\nDesert Eagle\nPump Shotgun\nMP5\nRadar Speedgun"
stock IsHoldingDutyWeapon(playerid)
{
	if(User[playerid][Logged])
	{
		print("I have been called. - IsHoldingDutyWeapon.");
		new uw;
		for(new i = 0; i < sizeof(wUnique); i++)
		{
	 		if(wUnique[i] == User[playerid][BoundID][0]/*|| wUnique[i] == User[playerid][BoundID][1] || wUnique[i] == User[playerid][BoundID][2]*/)
			{
	 			uw = i;
	 			break;
			}
		}
		printf("uw: %d; uw value: %d; boundid 0: %d; boundid 1: %d; boundid 2: %d\nbound 0: %d; bound 1: %d; bound 2: %d",uw,wUnique[uw],User[playerid][BoundID][0],User[playerid][BoundID][1],User[playerid][BoundID][2],User[playerid][Bound][0],User[playerid][Bound][1],User[playerid][Bound][2]);
		if(User[playerid][WeaponEquipped] == User[playerid][Bound][0] && User[playerid][BoundID][0] == wUnique[uw])
		{
	 		printf("[%s][%s] [dutyweapon] IsHoldingDutyWeapon has returned 1 for %s.",PasteDate(),PasteTime(),User[playerid][Username]);
	 		return 1;
		}
		/*if(User[playerid][uWeapon][0] == User[playerid][Bound][1] && User[playerid][BoundID][1] == wUnique[uw])
		{
	 		printf("[%s][%s] ISHOLDINGDUTYWEAPON RETURNED 2 FOR %s",PasteDate(),PasteTime(),User[playerid][Username]);
	 		return 2;
		}
		if(User[playerid][uWeapon][1] == User[playerid][Bound][2] && User[playerid][BoundID][2] == wUnique[uw])
		{
	 		printf("[%s][%s] ISHOLDINGDUTYWEAPON RETURNED 3 FOR %s",PasteDate(),PasteTime(),User[playerid][Username]);
	 		return 3;
		}*/
		printf("[%s][%s] [dutyweapon] IsHoldingDutyWeapon has returned 0 for %s.",PasteDate(),PasteTime(),User[playerid][Username]);
	}
	return 0;
}
stock GetWeaponNameEx(weaponid)
{
	printf("RETRIEVING WEAPON NAME FOR WEAPON ID %d", weaponid);
	new wep[24];
	GetWeaponName(weaponid,wep,sizeof wep);
	switch(weaponid)
	{
	    case 23: wep = "Taser";
	    case 25: wep = "Pump Shotgun";
	    case WEAPON_RADAR: wep = "Radar Speedgun";
	    case WEAPON_LAUNCHER: wep = "Grenade Launcher";
		case WEAPON_HUNTING_RIFLE: wep = "Hunting Rifle";
	    //SetPlayerAttachedObject(playerid,0,-2001,6,0.000000,0.002000,0.000000,0.000000,0.000000,0.000000,1.064000,1.442000,1.000000)
	}
	printf("RETRIEVED FOR WEAPON ID %d: [%s]", weaponid, wep);
	return wep;
}
Dialog:DialogKiosk(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
		    case 0: // on/off dty
		    {
		        if(User[playerid][funiform] == 0)
		        {
		            Dialog_Show(playerid,DialogKiosk,DIALOG_STYLE_LIST,"Kiosk","Duty\nArmory\nChoose Uniform","Select","Cancel");
		            return MSG(playerid,GOLD,"ERROR:"GR" Choose a uniform first.");
		        }
		        new query[140];
				if(User[playerid][fduty])
				{
				    User[playerid][fduty] = 0;


				    format(query,sizeof query,"(( [Faction] %s %s is now off duty. ))",User[playerid][frankname],User[playerid][Username]);
				    SendFMEx(User[playerid][faction],query,CFAC);
				    SetPlayerSkin(playerid,User[playerid][uSkin]);
				    //printf("User[playerid][WeaponEquipped]: %d\nUser[playerid][Bound][0]: %d\nUser[playerid][Bound][1]: %d\nUser[playerid][Bound][2]: %d"
				    //,User[playerid][WeaponEquipped],User[playerid][Bound][0],User[playerid][Bound][1],User[playerid][Bound][2]);
					new uw;
					new index = GetPVarInt(playerid,"RadarIndex");
					if(index) RemovePlayerAttachedObject(playerid, index);
					for(new i = 0; i < sizeof(wUnique); i++)
					{
					    if(wUnique[i] == User[playerid][BoundID][0])// || wUnique[i] == User[playerid][BoundID][1] || wUnique[i] == User[playerid][BoundID][2])
						{
						    if(wUnique[i] == 0) continue;

						    User[playerid][WeaponEquipped] = 0;
							User[playerid][Bound][0] = 0;
							ResetPlayerWeapons(playerid);
							wUnique[uw] = 0;
							uw = i;
							printf("wUnique[%d] (weapon unique id & value): %d | BoundID 0 (hand): %d | BoundID 1 (first slot): %d | BoundID 2 (second slot): %d\nBound Weapon Value (hand): %d | Bound Weapon Value (first slot): %d | Bound Weapon Value (second slot): %d"
							,uw,wUnique[uw],User[playerid][BoundID][0],User[playerid][BoundID][1]
							,User[playerid][BoundID][2],User[playerid][Bound][0],User[playerid][Bound][1],User[playerid][Bound][2]);
							Staff(ADMIN,"Weapon Hand has been taken.");
						}
						else if(wUnique[i] == User[playerid][BoundID][1])
						{
						    if(wUnique[i] == 0) continue;
	         				User[playerid][Bound][1] = 0;
	         				User[playerid][uWeapon][0] = 0;
	         				User[playerid][uWeapon_Ammo][0] = 0;
	         				wUnique[uw] = 0;
	         				uw = i;
							printf("wUnique[%d] (weapon unique id & value): %d | BoundID 0 (hand): %d | BoundID 1 (first slot): %d | BoundID 2 (second slot): %d\nBound Weapon Value (hand): %d | Bound Weapon Value (first slot): %d | Bound Weapon Value (second slot): %d"
							,uw,wUnique[uw],User[playerid][BoundID][0],User[playerid][BoundID][1]
							,User[playerid][BoundID][2],User[playerid][Bound][0],User[playerid][Bound][1],User[playerid][Bound][2]);
							//Staff(ADMIN,"Weapon First Slot has been taken.");
						}
						else if(wUnique[i] == User[playerid][BoundID][2])
						{
						    if(wUnique[i] == 0) continue;
	         				User[playerid][Bound][2] = 0;
	         				User[playerid][uWeapon][1] = 0;
	         				User[playerid][uWeapon_Ammo][1] = 0;
	         				wUnique[uw] = 0;
	         				uw = i;
							printf("wUnique[%d] (weapon unique id & value): %d | BoundID 0 (hand): %d | BoundID 1 (first slot): %d | BoundID 2 (second slot): %d\nBound Weapon Value (hand): %d | Bound Weapon Value (first slot): %d | Bound Weapon Value (second slot): %d"
							,uw,wUnique[uw],User[playerid][BoundID][0],User[playerid][BoundID][1]
							,User[playerid][BoundID][2],User[playerid][Bound][0],User[playerid][Bound][1],User[playerid][Bound][2]);
							//Staff(ADMIN,"Weapon Second Slot has been taken.");
						}
					}

        			/*if(User[playerid][WeaponEquipped] == User[playerid][Bound][0] && User[playerid][BoundID][0] == wUnique[uw])
     				{
					    User[playerid][WeaponEquipped] = 0;
						User[playerid][Bound][0] = 0;
						ResetPlayerWeapons(playerid);
						wUnique[uw] = 0;
					}
     				if(User[playerid][uWeapon][0] == User[playerid][Bound][1] && User[playerid][BoundID][1] == wUnique[uw])
     				{
         				User[playerid][Bound][1] = 0;
         				User[playerid][uWeapon][0] = 0;
         				User[playerid][uWeapon_Ammo][0] = 0;
         				wUnique[uw] = 0;
     				}
     				if(User[playerid][uWeapon][1] == User[playerid][Bound][2] && User[playerid][BoundID][2] == wUnique[uw])
     				{
         				User[playerid][Bound][2] = 0;
         				User[playerid][uWeapon][1] = 0;
         				User[playerid][uWeapon_Ammo][1] = 0;
         				wUnique[uw] = 0;
     				}
					*/
			        //GetPlayerWeaponData(playerid,GetWeaponSlot(User[playerid][WeaponEquipped]),weapon,ammo);
			        new wep[24],amm[24];
			        format(wep,sizeof wep,"%d,%d,%d",User[playerid][uWeapon][0],User[playerid][uWeapon][1],User[playerid][WeaponEquipped]);
			        format(amm,sizeof amm,"%d,%d,%d",User[playerid][uWeapon_Ammo][0],User[playerid][uWeapon_Ammo][1],User[playerid][WeaponEquipped_Ammo]);

				    format(query,sizeof query,"UPDATE users SET duty = NULL,bound = NULL,weapon = '%s', ammo = '%s' WHERE userid = %d",wep,amm,User[playerid][UserID]);
				    db_query(Database, query);

    				//format(query,sizeof query,"UPDATE users SET bound = NULL WHERE userid = %d",query,User[playerid][UserID]);
					//db_query(Database, query);
				}
				else
				{
				    User[playerid][fduty] = 1;
				    format(query,sizeof query,"UPDATE users SET duty = 1 WHERE userid = %d",User[playerid][UserID]);
				    db_query(Database, query);

				    format(query,sizeof query,"(( [Faction] %s %s is now on duty. ))",User[playerid][frankname],User[playerid][Username]);
				    SendFMEx(User[playerid][faction],query,CFAC);

				    SetPlayerSkin(playerid,User[playerid][funiform]);
				}
		    }
			case 1:
			{
			    if(User[playerid][fduty] == 0)
			        return MSG(playerid,GOLD,"ERROR:"GR" You need to be on duty to access the armory.");
				Dialog_Show(playerid,DialogKioskWep,DIALOG_STYLE_LIST,"Kiosk > Armory",ARMORY_WEAPON_LIST,"Choose","Cancel");
			}
		    case 2: {
				format(large_string, 256, "Input the ID of the skin:\nCustom PD models are from %d to %d.", CUSTOM_POLICESKIN_START, CUSTOM_POLICESKIN_START);
				Dialog_Show(playerid,DialogKioskUniform,DIALOG_STYLE_INPUT,"Kiosk > Uniform",large_string,"Choose","Cancel");
			}
		}
	}
	return 1;
}

Dialog:DialogKioskWep(playerid, response, listitem, inputtext[])
{
	if(response)
	{
 		if(User[playerid][WeaponEquipped])
 		{
			 Dialog_Show(playerid,DialogKioskWep,DIALOG_STYLE_LIST,"Kiosk > Armory",ARMORY_WEAPON_LIST,"Choose","Cancel");
			 return MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
 		}
 		new query[140];
	    switch(listitem)
	    {

	        case 0: // Taser
	        {
	            ResetPlayerWeapons(playerid);
	            User[playerid][WeaponEquipped] = 23;
	            User[playerid][WeaponEquipped_Ammo] = 50;
	            User[playerid][Bound][0] = User[playerid][WeaponEquipped];
	        }
	        case 1: // Deagle
	        {
	            ResetPlayerWeapons(playerid);
				User[playerid][WeaponEquipped] = 24;
				User[playerid][WeaponEquipped_Ammo] = 60; //ammo
				User[playerid][Bound][0] = User[playerid][WeaponEquipped];
	        }
	        case 2:
	        {
	            ResetPlayerWeapons(playerid);
				User[playerid][WeaponEquipped] = 25;
				User[playerid][WeaponEquipped_Ammo] = 50; // ammo
				User[playerid][Bound][0] = User[playerid][WeaponEquipped];
	        }
	        case 3:
	        {
	            ResetPlayerWeapons(playerid);
				User[playerid][WeaponEquipped] = 29;
				User[playerid][WeaponEquipped_Ammo] = 250; // ammo
    			User[playerid][Bound][0] = User[playerid][WeaponEquipped];
	        }
	        case 4:
	        {
	            ResetPlayerWeapons(playerid);
				User[playerid][WeaponEquipped] = WEAPON_RADAR;
				User[playerid][WeaponEquipped_Ammo] = 1; // ammo
    			User[playerid][Bound][0] = User[playerid][WeaponEquipped];
				new donatr;
				if(!isnull(User[playerid][donator])) donatr = 3;
				for(new i = MAX_ATTACHMENTS+donatr; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
				    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
					    SetPlayerAttachedObject(playerid,i,367,6,0.044999,-0.032000,-0.005999,0.000000,-10.699998,10.300001,1.000000,1.000000,1.000000,-15291148); // radar
					    SetPVarInt(playerid,"RadarIndex",i);
					    break;
					}
				}
	        }
	    }
	    User[playerid][BoundID][0] = random(1000000)+playerid;
		printf("User[%d][BoundID][0] = %d",playerid,User[playerid][BoundID][0]);
		for(new i = 0; i < sizeof(wUnique); i++)
		{
		    if(wUnique[i] == 0)
		    {
		        wUnique[i] = User[playerid][BoundID][0];
		        printf("wUnique[%d] = %d",i,wUnique[i]);
		        break;
		    }
		}

		format(query,sizeof query,"%d,%d,%d",User[playerid][Bound][0],User[playerid][Bound][1],User[playerid][Bound][2]);
		format(query,sizeof query,"UPDATE users SET bound = '%s' WHERE userid = %d",query,User[playerid][UserID]);
		db_query(Database, query);

	    new wep[24];
	   	GetWeaponName(User[playerid][WeaponEquipped],wep,sizeof wep);

	    format(query,sizeof query,"(( [Faction] %s %s has retrieved a %s from the kiosk. ))",User[playerid][frankname],User[playerid][Username],GetWeaponNameEx(User[playerid][WeaponEquipped]));
        SendFMEx(User[playerid][faction],query,CFAC);

	    printf("[%s][%s] [kiosk] %s (id:%d) took a %s from the kiosk.",PasteDate(),PasteTime(),User[playerid][Username],playerid,wep);
		GivePlayerWeapon(playerid,User[playerid][WeaponEquipped],User[playerid][WeaponEquipped_Ammo]);
	}
	return 1;
}
Dialog:DialogKioskUniform(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
			MSG(playerid,GOLD,"ERROR:"GR" Invalid input.");
			Dialog_Show(playerid,DialogKiosk,DIALOG_STYLE_LIST,"Kiosk","Duty\nArmory\nChoose Uniform","Select","Cancel");
			return 1;
		}
		new skin = strval(inputtext);
		/*if(!CopSkin(skin))
		{
			MSG(playerid,GOLD,"ERROR:"GR" Specified skin isn't available.");
			Dialog_Show(playerid,DialogKiosk,DIALOG_STYLE_LIST,"Kiosk","Duty\nArmory\nChoose Uniform","Select","Cancel");
			return 1;
		}*/
		User[playerid][funiform] = skin;
		//MSG(playerid,GREEN,"Info:"GR" You have chose your uniform.");
		new query[140];
		format(query,sizeof query,"UPDATE users SET uniform = %d WHERE userid = %d",skin,User[playerid][UserID]);
		db_query(Database, query);
		format(query,sizeof query,"(( [Faction] %s %s has chosen Skin ID %d as their uniform. ))",User[playerid][frankname],User[playerid][Username],skin);
		SendFMEx(User[playerid][faction],query,CFAC);
	}
	return 1;
}

CMD:ftypes(playerid,params[])
{
	if(User[playerid][Useradmin] > 2)
	{
		MSG(playerid,GRAD2,"1. PD; 2. Illegal Faction; 3. Legal Faction; 4. Emergency Services");
		return 1;
	} 
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:factions(playerid, params[])
{
	if(!User[playerid][Logged])
	    return 0;
	new string[100];
	MSG(playerid,GOLD,"Official Factions:");
	for(new i = 1; i < MAX_FACTIONS; i++)
	{
	    if(F[i][ftype] == 0) continue;
	    new mem;
     	foreach(Player,p)
	    {
	        if(User[p][faction] == i)
	            mem++;
	    }
		format(string,sizeof string,"[%d] Faction Name: %s; Members: %d/%d",i,F[i][fname],mem,F[i][fmembers]);
		MSG(playerid,GRAD4,string);
	}

	return 1;
}
CMD:fmembers(playerid,params[])
{
	if(User[playerid][faction])
	{
		if(User[playerid][faction] == -1) return MSG(playerid,GOLD,"ERROR:"GR" You aren't in a faction.");
		new string[124];
		format(string,sizeof string,"SELECT username,userid,rname,duty FROM users WHERE faction = %d",User[playerid][faction]);
		new DBResult: Result = db_query(Database,string);
		MSG(playerid,WHITE,"Faction Members:");
		do
		{
			new name[MAX_PLAYER_NAME],
		    id,
		    duty,
		    rank[24];
	        id = db_get_field_assoc_int(Result,"userid");
	        duty = db_get_field_assoc_int(Result,"duty");
         	db_get_field_assoc(Result, "username",name,MAX_PLAYER_NAME);
         	db_get_field_assoc(Result, "rname",rank,MAX_PLAYER_NAME);
         	db_get_field_assoc(Result, "username",name,MAX_PLAYER_NAME);
         	if(duty == 1) format(string,sizeof string,""G"ONDUTY: [UID %d] %s %s",id,rank,name);
         	else format(string,sizeof string,"[UID%d] %s %s",id,rank,name);
         	MSG(playerid,CFAC,string);
		}
		while(db_next_row(Result));
		db_free_result(Result);
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You are not in a faction.");
}
stock LoadFac()
{
    new DBResult:Result = db_query(Database, "SELECT * FROM factions");
	new id = 1;
	new field[64];
	do
	{
	    if(db_num_rows(Result))
	    {
	        F[id][fid] = db_get_field_assoc_int(Result,"fid");
	        F[id][ftype] = db_get_field_assoc_int(Result,"type");
			// printf("LOADFAC type = %d", F[id][ftype]);
         	db_get_field_assoc(Result, "name",F[id][fname], 45);
	        F[id][fmembers] = db_get_field_assoc_int(Result,"count");
			db_get_field_assoc(Result, "fx",field, 10);
			F[id][fposx] = floatstr(field);
			db_get_field_assoc(Result, "fy",field, 10);
			F[id][fposy] = floatstr(field);
			db_get_field_assoc(Result, "fz",field, 10);
			F[id][fposz] = floatstr(field);
			F[id][fvw] = db_get_field_assoc_int(Result,"fvw");
			F[id][fint] = db_get_field_assoc_int(Result,"fint");
			printf("[Loaded] Faction ID %d | Type %d | Name %s | Members %d | fposX %f | fposY %f | fposZ %f | VW %d | INT %d", F[id][fid], 
			F[id][ftype], F[id][fname], F[id][fmembers], F[id][fposx], F[id][fposy], F[id][fposz], F[id][fvw], F[id][fint]);
	    }
	    else
			break;
	    id++;
	}
	while(db_next_row(Result));
	db_free_result(Result);
}
// ---- DOORS ABOVE IS FACTIONS
/*
enum DOOR_DATA
{
	ddid,
	dmodel,
	dlinkedto,
	Float:dx,
	Float:dy,
	Float:dz,
	Float:dxc,
	Float:dyc,
	Float:dzc,
	dint,
	dvw,
	bool:dexist
};
new DD[MAX_DOORS][DOOR_DATA];
CreateObject(modelid,x,y,z,rx,ry,rz,draw);
*/
CMD:ddelete(playerid,params[])
{
    if(User[playerid][Useradmin] >= 3)
    {
        new id;
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /ddelete [DoorID]");
		if(DD[id][dexist])
		{
		    new query[60];
		    format(query,sizeof query,"DELETE FROM doors WHERE doorid = %i",id);
		    db_query(Database, query);
			DestroyDynamicObject(DD[id][dobject]);
    		new tmp[DOOR_DATA];
    		DD[id] = tmp;
		    MSG(playerid,GRAD2,"SERVER: You have deleted the specified door.");
		    Iter_Remove(Doors,id);
		}
		else return MSG(playerid,GOLD,"ERROR:"GR" Invalid door ID specified.");
    }
    else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");

	return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(response == EDIT_RESPONSE_CANCEL)
	{
		if(User[playerid][editing] == 1)
		{
			foreach(Doors,o)
			{
				if(DD[o][dobject] == objectid)
				{
					MoveDynamicObject(objectid, DD[o][dx], DD[o][dy], DD[o][dz], 50, DD[o][dxc], DD[o][dyc], DD[o][dzc]);
					//SetPlayerPos(playerid,x,y,z);
					// MoveDynamicObject(objectid, Float:x, Float:y, Float:z, Float:speed, Float:rx = -1000.0, Float:ry = -1000.0, Float:rz = -1000.0) 
				}
			}
		}
		else
		{
			foreach(Objects,o)
			{
				if(OBJ[o][oobject] == objectid)
				{
					MoveDynamicObject(objectid, OBJ[o][ox], OBJ[o][oy], OBJ[o][oz], 50, OBJ[o][orx], OBJ[o][ory], OBJ[o][orz]);
					//SetPlayerPos(playerid,x,y,z);
					// MoveDynamicObject(objectid, Float:x, Float:y, Float:z, Float:speed, Float:rx = -1000.0, Float:ry = -1000.0, Float:rz = -1000.0) 
				}
			}
		}
	}	
	if(response == EDIT_RESPONSE_FINAL)
	{
		if(User[playerid][editing] == 1)
		{
			foreach(Doors,o)
			{
				if(DD[o][dobject] == objectid)
				{
					//printf("OBJECTID %d; O %d (D OBJECT: %d)",objectid,o,DD[o][dobject]);
					new sx[10],
						sy[10],
						sz[10],
						srx[10],
						sry[10],
						srz[10];
					format(sx,10,"%f",x);
					format(sy,10,"%f",y);
					format(sz,10,"%f",z);
					format(srx,10,"%f",rx);
					format(sry,10,"%f",ry);
					format(srz,10,"%f",rz);
					if(DD[o][dpos] == 1)
					{
						DD[o][closeX] = x;
						DD[o][closeY] = y;
						DD[o][closeZ] = z;
						DD[o][closeRX] = rx;
						DD[o][closeRY] = ry;
						DD[o][closeRZ] = rz;
						format(large_string,300,"UPDATE doors SET closex = '%s',closey = '%s',closez = '%s',closerx = '%s',closery = '%s',closerz = '%s' WHERE doorid = %d"
						,sx,sy,sz,srx,sry,srz,o);
						MoveDynamicObject(objectid,x,y,z,5,rx,ry,rz);

					}
					else
					{
						DD[o][standX] = x;
						DD[o][standY] = y;
						DD[o][standZ] = z;
						DD[o][standX2] = x;
						DD[o][standY2] = y;
						DD[o][standZ2] = z;

						DD[o][dx] = x;
						DD[o][dy] = y;
						DD[o][dz] = z;
						DD[o][dxc] = rx;
						DD[o][dyc] = ry;
						DD[o][dzc] = rz;

						format(large_string,300,"UPDATE doors SET sx = '%s',sy = '%s',sz = '%s',sx2 = '%s',sy2 = '%s',sz = '%s',x = '%s',y = '%s',z = '%s',xc = '%s',yc = '%s',zc = '%s' WHERE doorid = %d"
						,sx,sy,sz,sx,sy,sz,sx,sy,sz,srx,sry,srz,o);
						MoveDynamicObject(objectid,x,y,z,1,rx,ry,rz);
					}
					db_query(Database, large_string);
					Wait(playerid,"SET");
					//SetPlayerPos(playerid,x,y,z);
					break;
				}
			}
		}
		else if(User[playerid][editing] == 2)
		{
			foreach(Objects,o)
			{
				if(OBJ[o][oobject] == objectid)
				{
					new sx[10],sy[10],sz[10],srx[10],sry[10],srz[10];
					format(sx,10,"%f",x);
					format(sy,10,"%f",y);
					format(sz,10,"%f",z);
					format(srx,10,"%f",rx);
					format(sry,10,"%f",ry);
					format(srz,10,"%f",rz);
					OBJ[o][ox] = x;
					OBJ[o][oy] = y;
					OBJ[o][oz] = z;
					OBJ[o][orx] = rx;
					OBJ[o][ory] = ry;
					OBJ[o][orz] = rz;
					format(large_string,300,"UPDATE objects SET x = '%s',y = '%s',z = '%s',rx = '%s',ry = '%s',rz = '%s' WHERE objectid = %d",sx,sy,sz,srx,sry,srz,o);
					db_query(Database, large_string);
					MoveDynamicObject(objectid,x,y,z,50,rx,ry,rz);
					Wait(playerid,"SET");

					if(OBJ[o][ActiveTag])
					{
						DestroyDynamic3DTextLabel(OBJ[o][ObjectTag]);
						format(large_string, 60, "[ID: %d]",o);
						OBJ[o][ObjectTag] = CreateDynamic3DTextLabel(large_string,GOLD,OBJ[o][ox], OBJ[o][oy], OBJ[o][oz],20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,OBJ[o][ovw],OBJ[o][oint]);
					}
				}
			}
		}	
	} 
}
CMD:dsetopenpos(playerid,params[])
{
	if(User[playerid][Useradmin] < 3) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new id;
	if(sscanf(params,"d",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /dsetopenpos [doorid]");
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	DD[id][standX] = x;
	DD[id][standY] = y;
	DD[id][standZ] = z;
	SFM(playerid,GOLD,"Info: Door ID %d opening pos has been set to your location",id);
	new sx[10],sy[10],sz[10];
	format(sx,10,"%f",x);
	format(sy,10,"%f",y);
	format(sz,10,"%f",z);
	format(large_string,150,"UPDATE doors SET sx = '%s',sy = '%s',sz = '%s' WHERE doorid = %d",sx,sy,sz,id);
	db_query(Database, large_string);
	return 1;
}
CMD:dsetclosepos(playerid,params[])
{
	if(User[playerid][Useradmin] < 3) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new id;
	if(sscanf(params,"d",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /dsetopenpos [doorid]");
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	DD[id][standX2] = x;
	DD[id][standY2] = y;
	DD[id][standZ2] = z;
	SFM(playerid,GOLD,"Info: Door ID %d close pos has been set to your location",id);
	new sx[10],sy[10],sz[10];
	format(sx,10,"%f",x);
	format(sy,10,"%f",y);
	format(sz,10,"%f",z);
	format(large_string,150,"UPDATE doors SET sx2 = '%s',sy2 = '%s',sz2 = '%s' WHERE doorid = %d",sx,sy,sz,id);
	db_query(Database, large_string);
	return 1;
}

CMD:dedit(playerid,params[])
{
    if(User[playerid][Useradmin] >= 3)
    {
        new id,pos;
		if(sscanf(params,"ii",id,pos)) return MSG(playerid,GOLD,"SYNTAX:"GR" /dedit [DoorID] [0 for editing closing pos,1 for editing opening pos]");
		if(pos > 1 || pos < 0) return MSG(playerid,GOLD,"ERROR:"GR" Second value is either 0 (closing position) or 1 (opening position)");
		if(!DD[id][dexist]) return MSG(playerid,GOLD,"ERROR:"GR" Invalid door ID.");
		EditDynamicObject(playerid,DD[id][dobject]);
		DD[id][dpos] = pos;
		User[playerid][editing] = 1;
	} else {
		MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:linkdoortohouse(playerid,params[])
{
	if(User[playerid][Useradmin] < 3) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new id,pppid;
	if(sscanf(params,"dd",id,pppid)) return MSG(playerid,GOLD,"SYNTAX:"GR" /linkdoortohouse [doorid] [houseid]");
	DD[id][dhouse] = pppid; // 0 = linked to no apartment
	SFM(playerid,GOLD,"Info: Door ID %d has been linked to House ID %d.",id,pppid);
	format(large_string,150,"UPDATE doors SET house = %d WHERE doorid = %d",pppid,id);
	db_query(Database, large_string);
	return 1;
}

CMD:linkdoortofac(playerid,params[])
{
	if(User[playerid][Useradmin] < 3) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new id,pppid;
	if(sscanf(params,"dd",id,pppid)) return MSG(playerid,GOLD,"SYNTAX:"GR" /linkdoortofac [doorid] [facid]");
	DD[id][dfac] = pppid; // 0 = linked to no apartment
	SFM(playerid,GOLD,"Info: Door ID %d has been linked to Faction ID %d.",id,pppid);
	format(large_string,150,"UPDATE doors SET faction = %d WHERE doorid = %d",pppid,id);
	db_query(Database, large_string);
	return 1;
}
CMD:linkdoortobiz(playerid,params[])
{
	if(User[playerid][Useradmin] < 3) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new id,pppid;
	if(sscanf(params,"dd",id,pppid)) return MSG(playerid,GOLD,"SYNTAX:"GR" /linkdoortobiz [doorid] [bizid]");
	DD[id][dbiz] = pppid; // 0 = linked to no apartment
	SFM(playerid,GOLD,"Info: Door ID %d has been linked to Business ID %d.",id,pppid);
	format(large_string,150,"UPDATE doors SET biz = %d WHERE doorid = %d",pppid,id);
	db_query(Database, large_string);
	return 1;
}
CMD:linkdoortoprop(playerid,params[]) 
{
	if(User[playerid][Useradmin] < 3) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new id,pppid;
	if(sscanf(params,"dd",id,pppid)) return MSG(playerid,GOLD,"SYNTAX:"GR" /linkdoortoproperty [doorid] [propid]");
	DD[id][dprop] = pppid; // 0 = linked to no apartment
	SFM(playerid,GOLD,"Info: Door ID %d has been linked to Property ID %d.",id,pppid);
	format(large_string,150,"UPDATE doors SET prop = %d WHERE doorid = %d",pppid,id);
	db_query(Database, large_string);
	return 1;
}
CMD:neardoor(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
		new range = 10,bool:t = false;
		foreach(Doors,i)
		{
		    if(IsPlayerInRangeOfPoint(playerid, range, DD[i][dx], DD[i][dy], DD[i][dz]))
			{
				format(large_string, 124,"[Door ID: %d] [Model: %d] [VW: %d] [INT: %d] [PROP: %d] [HOUSE: %d] [BUSINESS: %d] [Object ID: %d]",i,DD[i][dmodel],DD[i][dvw],DD[i][dint],DD[i][dprop]
				,DD[i][dhouse],DD[i][dbiz],DD[i][dobject]);
				MSG(playerid, GRAD2, large_string);
				t = true;
			}
			else continue;
		}
		if(!t) return MSG(playerid,GRAD2,"None");
	    return 1;
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:door(playerid,params[])
{
	if(User[playerid][Logged])
	{
	    new bool:near = false;
	    new can = 0,id;
	    //can = 0 means NO ACCESS
	    // can = 1 means CLOSE DOOR
	    // can = 2 means OPEN DOOR
		new Float:range; 
		if(IsPlayerInAnyVehicle(playerid)) range = 5;
		else range = 1.5;
	    foreach(Doors,i)
	    {
			if(IsPlayerInRangeOfPoint(playerid, range, DD[i][standX], DD[i][standY], DD[i][standZ]) || IsPlayerInRangeOfPoint(playerid, range, DD[i][standX2], DD[i][standY2], DD[i][standZ2]))
			{
   				near = true;
				printf("A; i: %d;  DD[i][dhouse]: %d",i,DD[i][dhouse]);
				//if(isnull(P[id][pname])) return MSG(playerid,GOLD,"ERROR:"GR" This isn't a taxable property.");
				if(DD[i][dprop] > -1)
				{
					if(User[playerid][UserID] == P[DD[i][dprop]][powner])
					{
						print("B");
						if(isnull(P[i][pname])) continue;
						if(DD[i][status]) can = 1, DD[i][status] = false;
						else can = 2, DD[i][status] = true;
						id = i;
						print("C");
					}
				}
				if(DD[i][dhouse] > -1)
				{
					if(H[DD[i][dhouse]][howner] == User[playerid][UserID] || User[playerid][renting] == DD[i][dhouse])
					{
						if(DD[i][status]) can = 1, DD[i][status] = false;
						else can = 2, DD[i][status] = true;
						id = i;
						print("D");
					}
				}
				if(DD[i][dprop] > -1)
				{
					if(P[DD[i][dprop]][pfac] == User[playerid][faction])
					{
						if(DD[i][status]) can = 1, DD[i][status] = false;
						else DD[i][status] = true,can = 2;
						id = i;
						print("E");	
						
					}
				}
				printf("can: %d",can);
				if(DD[i][dbiz] > -1)
				{
					if(B[id][bowner] == User[playerid][UserID])
					{
						if(DD[i][status]) can = 1, DD[i][status] = false;
						else DD[i][status] = true,can = 2;
						id = i;
						print("E");	
						
					}
				}
				if(DD[i][dfac] == User[playerid][faction] && User[playerid][faction] != 0)
				{
					if(DD[i][status]) can = 1, DD[i][status] = false;
					else DD[i][status] = true,can = 2;
					id = i;	
				}
				if(can == 1)
				{
					MoveDynamicObject(DD[id][dobject],DD[id][dx],DD[id][dy],DD[id][dz],5,DD[id][dxc],DD[id][dyc],DD[id][dzc]);
					print("F");
				}
				else if(can == 2) 
				{
					MoveDynamicObject(DD[id][dobject],DD[id][closeX],DD[id][closeY],DD[id][closeZ],5,DD[id][closeRX],DD[id][closeRY],DD[id][closeRZ]);
					print("G");
				}
			}
	    }
		if(!near) return 1;//MSG(playerid,GOLD,"ERROR:"GR" You are not in range of a door.");
		if(can == 0) return MSG(playerid,GOLD,"ERROR:"GR" You do not have access to this door!");
	}
	else return 0;
	return 1;
}
CMD:dgoto(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new id;
	    if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /dgoto [doorid]");
	    SetPlayerPos(playerid,DD[id][dx],DD[id][dy],DD[id][dz]);
	    SetPlayerVirtualWorld(playerid,DD[id][dvw]);
	    SetPlayerInterior(playerid,DD[id][dint]);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}

CMD:dcreate(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
			new Float:x,
				Float:y,
				Float:z,
				model;
			if(sscanf(params,"d",model)) return MSG(playerid,GOLD,"SYNTAX:"GR" /dcreate [modelid]");
			new i = Iter_Free(Doors);
			if(i == MAX_DOORS) return MSG(playerid,GOLD,"ERROR: LIMIT REACHED!");
			DD[i][dvw] = GetPlayerVirtualWorld(playerid);
			DD[i][dint] = GetPlayerInterior(playerid);
			GetPlayerPos(playerid,x,y,z);
			z -= Z_MODIFIER;
			DD[i][dx] = x;
			DD[i][dy] = y;
			DD[i][dz] = z;

			DD[i][standX] = x;
			DD[i][standY] = y;
			DD[i][standZ] = z;

			DD[i][standX2] = x;
			DD[i][standY2] = y;
			DD[i][standZ2] = z;

			DD[i][dxc] = 0;
			DD[i][dyc] = 0;
			DD[i][dzc] = 0;

			DD[i][dexist] = true;
			DD[i][dmodel] = model;
			DD[i][dhouse] = -1;

			DD[i][dbiz] = -1;
			DD[i][dprop] = -1;
			new sx[10],sy[10],sz[10];
			format(sx,10,"%f",x);
			format(sy,10,"%f",y);
			format(sz,10,"%f",z);
			format(large_string,325,"INSERT INTO doors (doorid,model,x,y,z,vw,interior,xc,yc,zc,link,sx,sy,sz,sx2,sy2,sz2,house,biz,prop) VALUES (%d,%d,'%s','%s','%s',%d,%d,0,0,0,0,'%s','%s','%s','%s','%s','%s',-1,-1,-1)"
			,i,model,sx,sy,sz,DD[i][dvw],DD[i][dint],sx,sy,sz,sx,sy,sz);
			db_query(Database, large_string);
			DD[i][dobject] = CreateDynamicObject(DD[i][dmodel],DD[i][dx],DD[i][dy],DD[i][dz],DD[i][dxc],DD[i][dyc],DD[i][dzc],DD[i][dvw],DD[i][dint]);
			/*CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz,
			worldid = -1, interiorid = -1, playerid = -1,
			Float:streamdistance = STREAMER_OBJECT_SD,
			Float:drawdistance = STREAMER_OBJECT_DD, areaid = -1, priority = 0)*/
			format(large_string,85,"SERVER: You have created door ID %d here.",i);
			MSG(playerid,GRAD2,large_string);
			Iter_Add(Doors,i);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}

stock LoadDoors()
{
	new id = 1,field[64];
 	new DBResult: Result = db_query(Database, "SELECT * FROM doors");
	do
	{
		if(db_num_rows(Result))
		{
		    id = db_get_field_assoc_int(Result,"doorid");
			DD[id][dlinkedto] = db_get_field_assoc_int(Result, "link");

			db_get_field_assoc(Result, "x",field, 10);
			DD[id][dx] = floatstr(field);
			db_get_field_assoc(Result, "y",field, 10);
			DD[id][dy] = floatstr(field);
			db_get_field_assoc(Result, "z",field, 10);
			DD[id][dz] = floatstr(field);

			db_get_field_assoc(Result, "xc",field, 10);
			DD[id][dxc] = floatstr(field);
			db_get_field_assoc(Result, "yc",field, 10);
			DD[id][dyc] = floatstr(field);
			db_get_field_assoc(Result, "zc",field, 10);
			DD[id][dzc] = floatstr(field);

			db_get_field_assoc(Result, "closeX",field, 10);
			DD[id][closeX] = floatstr(field);
			db_get_field_assoc(Result, "closeY",field, 10);
			DD[id][closeY] = floatstr(field);
			db_get_field_assoc(Result, "closeZ",field, 10);
			DD[id][closeZ] = floatstr(field);

			db_get_field_assoc(Result, "closeRX",field, 10);
			DD[id][closeRX] = floatstr(field);
			db_get_field_assoc(Result, "closeRY",field, 10);
			DD[id][closeRY] = floatstr(field);
			db_get_field_assoc(Result, "closeRZ",field, 10);
			DD[id][closeRZ] = floatstr(field);

			db_get_field_assoc(Result, "sx",field, 10);
			DD[id][standX] = floatstr(field);
			db_get_field_assoc(Result, "sy",field, 10);
			DD[id][standY] = floatstr(field);
			db_get_field_assoc(Result, "sz",field, 10);
			DD[id][standZ] = floatstr(field);

			db_get_field_assoc(Result, "sx2",field, 10);
			DD[id][standX2] = floatstr(field);
			db_get_field_assoc(Result, "sy2",field, 10);
			DD[id][standY2] = floatstr(field);
			db_get_field_assoc(Result, "sz2",field, 10);
			DD[id][standZ2] = floatstr(field);

            DD[id][dhouse] = db_get_field_assoc_int(Result, "house");
            DD[id][dbiz] = db_get_field_assoc_int(Result, "biz");
            DD[id][dprop] = db_get_field_assoc_int(Result, "prop");
			DD[id][dfac] = db_get_field_assoc_int(Result, "faction");
			DD[id][dvw] = db_get_field_assoc_int(Result, "vw");
			DD[id][dint] = db_get_field_assoc_int(Result, "interior");
			DD[id][dmodel] = db_get_field_assoc_int(Result, "model");

			DD[id][status] = false;
			DD[id][dexist] = true;
			DD[id][dobject] = CreateDynamicObject(DD[id][dmodel],DD[id][dx],DD[id][dy],DD[id][dz],DD[id][dxc],DD[id][dyc],DD[id][dzc],DD[id][dvw],DD[id][dint]);
            Iter_Add(Doors,id);
			printf("[door] Door ID %d has been loaded. (model %d x %f y %f z %f)",id,DD[id][dmodel],DD[id][dx],DD[id][dy],DD[id][dz]);

		}
		else break;
	}
	while(db_next_row(Result));
	db_free_result(Result);
}
// ----- GARAGES(ABOVE IS DOORS)
CMD:linkgaragetofaction(playerid,params[])
{
	if(User[playerid][Useradmin] < 3) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new id,pppid;
	if(sscanf(params,"dd",id,pppid)) return MSG(playerid,GOLD,"SYNTAX:"GR" /linkgaragetofaction [garageid] [factionid (-1 = no faction)]");
	Ga[id][gfac] = pppid; // -1 = no faction
	SFM(playerid,GOLD,"Info: Garage %d has been linked to Faction ID %d.",id,pppid);
	format(large_string,124,"UPDATE garages SET faction = %d WHERE gid = %d",pppid,id);
	db_query(Database, large_string);
	return 1;
}
CMD:gcreate(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new Float:x,
	        Float:y,
	        Float:z,
	        Float:angle,
	        vw,
	        interior,
			id,
			string[230];
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /gcreate [house id (put -1 if this garage isnt linked to any house)]");
		GetPlayerPos(playerid,x,y,z);
		vw = GetPlayerVirtualWorld(playerid);
		interior = GetPlayerInterior(playerid);
		angle = GetPlayerFacingAngle(playerid,angle);
		foreach(Garages,p)
		{
			if(IsPlayerInRangeOfPoint(playerid,3,Ga[p][gx],Ga[p][gy],Ga[p][gz]))
		    	return MSG(playerid,GOLD,"ERROR:"GR" You can't make a garage when there's one closeby.");
		}
		new i = Iter_Free(Garages);
		Ga[i][gx] = x;
		Ga[i][gy] = y;
		Ga[i][gz] = z;
		Ga[i][gvw] = vw;
		Ga[i][gint] = interior;
		Ga[i][gxi] = 0;
		Ga[i][gyi] = 0;
		Ga[i][gzi] = 0;
		Ga[i][ginti] = 0;
		Ga[i][glinkedto] = id;
		new svw[15];
		format(svw,sizeof svw,"%i0%i",random(999999),i);
		new vwi = strval(svw);
		Ga[i][gvwi] = vwi;
		Ga[i][gexist] = true;
		Ga[i][glock] = 1;
		Ga[i][gangle] = 90;
		Ga[i][ganglex] = angle;
		Ga[i][maxcars] = 1;
		Ga[i][gfac] = -1;
		new sx[10],sy[10],sz[10],sa[10];
		format(sx,10,"%f",x);
		format(sy,10,"%f",y);
		format(sz,10,"%f",z);
		format(sa,10,"%f",Ga[i][ganglex]);
		format(large_string,325,"INSERT INTO garages (gid,x,y,z,vw,interior,vwi,interiori,xi,yi,zi,anglex,link,maxcars,lock) VALUES (%d,'%s','%s','%s',%d,%d,%d,%d,'%s','%s','%s','%s',%d,1,1)"
		,i,sx,sy,sz,vw,interior,vwi,Ga[i][ginti],Ga[i][gxi],Ga[i][gyi],Ga[i][gzi],sa,id);
		db_query(Database, large_string);
		format(string,sizeof string,"SERVER: You have created garage ID %d here.",i);
		MSG(playerid,GRAD2,string);
		Iter_Add(Garages,i);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
stock LoadGarages()
{
	new id = 1,field[64];
 	new DBResult: Result = db_query(Database, "SELECT * FROM garages");
	do
	{
		if(db_num_rows(Result))
		{
		    id = db_get_field_assoc_int(Result,"gid");
		    Ga[id][gid] = db_get_field_assoc_int(Result, "gid");
			Ga[id][glinkedto] = db_get_field_assoc_int(Result, "link");
			Ga[id][gowner] = db_get_field_assoc_int(Result, "owner");
			Ga[id][maxcars] = db_get_field_assoc_int(Result, "maxcars");
			db_get_field_assoc(Result, "x",field, 10);
			Ga[id][gx] = floatstr(field);
			db_get_field_assoc(Result, "y",field, 10);
			Ga[id][gy] = floatstr(field);
			db_get_field_assoc(Result, "z",field, 10);
			Ga[id][gz] = floatstr(field);
			db_get_field_assoc(Result, "xi",field, 10);
			Ga[id][gxi] = floatstr(field);
			db_get_field_assoc(Result, "yi",field, 10);
			Ga[id][gyi] = floatstr(field);
			db_get_field_assoc(Result, "zi",field, 10);
			Ga[id][gzi] = floatstr(field);
			db_get_field_assoc(Result, "angle",field, 10);
			Ga[id][gangle] = floatstr(field);
			db_get_field_assoc(Result, "anglex",field, 10);
			Ga[id][ganglex] = floatstr(field);
			Ga[id][gfac] = db_get_field_assoc_int(Result,"faction");


			Ga[id][gvw] = db_get_field_assoc_int(Result, "vw");
			Ga[id][gvwi] = db_get_field_assoc_int(Result, "vwi");
			Ga[id][gint] = db_get_field_assoc_int(Result, "interior");
			Ga[id][ginti] = db_get_field_assoc_int(Result, "interiori");
			Ga[id][glock] = db_get_field_assoc_int(Result, "lock");
			Ga[id][gexist] = true;
			Iter_Add(Garages,id);
		}
		else break;
	}
	while(db_next_row(Result));
	db_free_result(Result);
}


CMD:gdelete(playerid,params[])
{
    if(User[playerid][Useradmin] >= 3)
    {
        new id;
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /gdelete [house id]");
		if(Ga[id][gexist])
		{
		    new query[60];
		    format(query,sizeof query,"DELETE FROM garages WHERE gid = %i",id);
		    db_query(Database, query);
    		new tmp[GARAGE_DATA];
    		Ga[id] = tmp;
		    MSG(playerid,GRAD2,"SERVER: You have deleted the specified garage.");
		    Iter_Remove(Garages,id);

		}
		else return MSG(playerid,GOLD,"ERROR:"GR" Invalid garage ID specified.");
    }
    else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:gsetint(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new id;
	    if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /gsetint [garage id]");
	    if(Ga[id][gexist])
	    {
			new Float:x,Float:y,Float:z,vw,interior,Float:angle;
			GetPlayerPos(playerid,x,y,z);
			new svw[15];
			format(svw,sizeof svw,"%i0%i",random(999999),id);
			vw = strval(svw);
			interior = GetPlayerInterior(playerid);
			GetPlayerFacingAngle(playerid,angle);
			Ga[id][gxi] = x;
			Ga[id][gyi] = y;
			Ga[id][gzi] = z;
			Ga[id][ginti] = interior;
			Ga[id][gvwi] = vw;
			Ga[id][gangle] = angle;
			MSG(playerid,GOLD,"Info:"GR" You have set the garage's interior.");

			new query[200],
				sx[10],
				sy[10],
				sz[10],
				sa[10];
			format(sx,10,"%f",Ga[id][gxi]);
			format(sy,10,"%f",Ga[id][gyi]);
			format(sz,10,"%f",Ga[id][gzi]);
			format(sa,10,"%f",Ga[id][gangle]);
			format(query,sizeof(query),"UPDATE garages SET xi = '%s',yi = '%s',zi = '%s',interiori = %i,vwi = %i,angle = '%s' WHERE gid = %i",sx,sy,sz,interior,vw,sa,id);
			db_query(Database, query);

			SetPlayerVirtualWorld(playerid,vw);
	    }
	    else return MSG(playerid,GOLD,"ERROR:"GR" Invalid house ID specified.");
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:gsetowner(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new id,gar;
	    if(sscanf(params,"dd",gar,id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /gsetowner [garageid] [playerid]");
	    if(gar > MAX_GARAGES || gar < 0) return MSG(playerid,GOLD,"ERROR:"GR" Invalid garage specified.");
	    if(id != -1)
		{
            if(!User[id][Logged])
            	return MSG(playerid,GOLD,"ERROR:"GR" Specified player isn't logged in.");
		}
		if(!Ga[gar][gexist]) return MSG(playerid,GOLD,"ERROR:"GR" Invalid garage specified.");
		new string[124];
		if(id !=-1) format(string,sizeof string,"STFCMD: %s is now the owner of garage ID %d.",User[id][pUsername],gar);
		else format(string,sizeof string,"STFCMD: Garage ID %d no longer has an owner.",gar);
		Staff(ADMIN,string);

		if(id != -1) format(string,sizeof string,"UPDATE garages SET owner = %d WHERE gid = %d",User[id][UserID],gar);
		else format(string,sizeof string,"UPDATE garages SET owner = -1 WHERE gid = %d",gar);
		db_query(Database, string);

		if(id != -1) Ga[gar][gowner] = User[id][UserID];
		else Ga[gar][gowner] = -1;
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:neargarage(playerid,params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Useradmin] < 1) return 0;
		new range = 2;
		new bool:t;
		sscanf(params,"i",range);
		foreach(Garages,i)
		{
			if(IsPlayerInRangeOfPoint(playerid,range,Ga[i][gx],Ga[i][gy],Ga[i][gz]))
			{
				format(large_string,130,"[Garage ID: %d] [Interior: %d] [Interior In: %d] [VW: %d] [VW In: %d] [Owner: %d] [Maxcars: %d] [Carin: %d] [Faction: %d]",
				i,Ga[i][gint],Ga[i][ginti],Ga[i][gvw],Ga[i][gvwi],Ga[i][gowner],Ga[i][maxcars],Ga[i][carin],Ga[i][gfac]);
				MSG(playerid,GRAD2,large_string);
				t = true;
			}
		}
		if(!t) return MSG(playerid,GRAD2,"None");
	}
	return 1;
}
CMD:mygarages(playerid,params[])
{
	if(User[playerid][Logged])
	{
	    MSG(playerid,GREEN,"SERVER: You have access to the following garages:");
	    new word[10];
	    foreach(Garages,i)
	    {
			if(Ga[i][glinkedto] != -1)
			{
				if(H[Ga[i][glinkedto]][howner] == User[playerid][UserID]  || Ga[i][gowner] == User[playerid][UserID] || User[playerid][renting] == Ga[i][glinkedto])
				{
					if(Ga[i][glock] == 0) word = "Unlocked";
					else word = "Locked";
					if(Ga[i][glinkedto] != -1) SFM(playerid,GRAD2,"[Garage ID: %d] [House: %s] [Status: %s]",i,H[Ga[i][glinkedto]][hname],word);
					else SFM(playerid,GRAD2,"[Garage ID: %d] [Status: %s]",i,word);
				}
			}
	    }
		return 1;
	}
	else return 0;
	
}
CMD:lockgarage(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	new bool:found,string[90];
	foreach(Garages,i)
	{
		if(IsPlayerInRangeOfPoint(playerid,3,Ga[i][gx],Ga[i][gy],Ga[i][gz]) || IsPlayerInRangeOfPoint(playerid,3,Ga[i][gxi],Ga[i][gyi],Ga[i][gzi]))
		{
		    found = true;
		    //printf("User[playerid][renting]: %d; Ga[i][glinkedto]: %d; H[Ga[i][glinkedto]][howner]: %d; User[playerid][UserID]: %d"
			//,User[playerid][renting],Ga[i][glinkedto],H[Ga[i][glinkedto]][howner],User[playerid][UserID]);
			if(Ga[i][glock] == 1)
			{
			    if(User[playerid][renting] == Ga[i][glinkedto] || H[Ga[i][glinkedto]][howner] == User[playerid][UserID] || User[playerid][UserID] == Ga[i][gowner])
			    {
					PlayerActionMessageBubble(playerid,"unlocks the garage.");
					Ga[i][glock] = 0;
					if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 0, 0, 0, 0, 0, 1);
					format(string,sizeof string,"UPDATE garages SET lock = 0 WHERE gid = %d",i);
					db_query(Database, string);
			    }
			}
			else
			{
			    if(User[playerid][renting] == Ga[i][glinkedto] || H[Ga[i][glinkedto]][howner] == User[playerid][UserID] || User[playerid][UserID] == Ga[i][gowner])
			    {
					PlayerActionMessageBubble(playerid,"locks the garage.");
					Ga[i][glock] = 1;
					if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 0, 0, 0, 0, 0, 1);
					format(string,sizeof string,"UPDATE garages SET lock = 1 WHERE gid = %d",i);
					db_query(Database, string);
			    }
			}
			break;
		}
	}
	if(!found) return MSG(playerid,GOLD,"ERROR:"GR" You are not in range of a garage.");
	return 1;
}
CMD:genter(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	new id = GetPlayerVehicleID(playerid);
	new rad = 3;
	if(id > 0) rad = 7;
	new bool:rng;
	foreach(Garages,i)
	{
		if(IsPlayerInRangeOfPoint(playerid,rad,Ga[i][gx],Ga[i][gy],Ga[i][gz]))
		{
			if(Ga[i][glock] == 1)
			{
			    MSG(playerid,GOLD,"ERROR:"GR" This garage is locked!");
			    return 1;
			}
		    if(id > 0)
		    {
		        printf("[garage_debug] Garage ID %d (maxcars: %d; carin: %d)",i,Ga[i][maxcars],Ga[i][carin]);
				if(Ga[i][maxcars] == Ga[i][carin])
					return MSG(playerid,GOLD,"ERROR:"GR" This garage cannot fit anymore cars.");
			    SetVehicleVirtualWorld(id,Ga[i][gvwi]);
			    LinkVehicleToInterior(id,Ga[i][ginti]);
				SetVehiclePos(id,Ga[i][gxi],Ga[i][gyi],Ga[i][gzi]);
				SetVehicleZAngle(id,Ga[i][gangle]);
				SetPlayerInterior(playerid,Ga[i][ginti]);
				SetPlayerVirtualWorld(playerid,Ga[i][gvwi]);
				V[id][garagein] = i;
				Ga[i][carin]++;
				new query[124];
				format(query,sizeof query,"UPDATE cars SET garage = %d WHERE vid = %d",i,V[id][dataid]);
				db_query(Database, query);
			}
			else
			{
				SetPlayerInterior(playerid,Ga[i][ginti]);
				SetPlayerVirtualWorld(playerid,Ga[i][gvwi]);
				SetPlayerPos(playerid,Ga[i][gxi],Ga[i][gyi],Ga[i][gzi]);
				SetPlayerFacingAngle(playerid,Ga[i][gangle]);
			}
      		rng = true;
		    break;
		}
	}
	if(!rng) return MSG(playerid,GOLD,"ERROR:"GR" You are not in range of a garage entrance.");
	return 1;
}
CMD:gexit(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	new id = GetPlayerVehicleID(playerid);
	new rad = 3;
	if(id > 0) rad = 7;
	new bool:rng;
	foreach(Garages,i)
	{
		if(IsPlayerInRangeOfPoint(playerid,rad,Ga[i][gxi],Ga[i][gyi],Ga[i][gzi]))
		{
			if(Ga[i][glock] == 1)
			{
			    MSG(playerid,GOLD,"ERROR:"GR" This garage is locked!");
			    return 1;
			}
		    if(id > 0)
		    {
			    SetVehicleVirtualWorld(id,Ga[i][gvw]);
			    LinkVehicleToInterior(id,Ga[i][gint]);
				SetVehiclePos(id,Ga[i][gx],Ga[i][gy],Ga[i][gz]);
				SetVehicleZAngle(id,Ga[i][ganglex]);
				SetPlayerInterior(playerid,Ga[i][gint]);
				SetPlayerVirtualWorld(playerid,Ga[i][gvw]);
				V[id][garagein] = 0;
				Ga[i][carin]--;
				new query[124];
				format(query,sizeof query,"UPDATE cars SET garage = 0 WHERE carid = %d",V[id][dataid]);
				db_query(Database, query);
			}
			else
			{
				SetPlayerInterior(playerid,Ga[i][gint]);
				SetPlayerVirtualWorld(playerid,Ga[i][gvw]);
				SetPlayerPos(playerid,Ga[i][gx],Ga[i][gy],Ga[i][gz]);
				SetPlayerFacingAngle(playerid,Ga[i][ganglex]);
			}
		    rng = true;
		    break;
		}
	}
	if(!rng) return MSG(playerid,GOLD,"ERROR:"GR" You are not in range of a garage exit.");
	return 1;
}
CMD:ggoto(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new id;
	    if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /ggoto [garage id]");
	    SetPlayerPos(playerid,Ga[id][gx],Ga[id][gy],Ga[id][gz]);
	    SetPlayerVirtualWorld(playerid,Ga[id][gvw]);
	    SetPlayerInterior(playerid,Ga[id][gint]);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
// PROPERTY (ABOVE IS GARAGES)
CMD:pfind(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	new slot = FindPlayerItem_Name(playerid, "GPS");
	if(slot == -1)
		return MSG(playerid, GOLD, "Inventory:"GR" You don't have a GPS.");
	new address;
	if(sscanf(params,"d",address)) return MSG(playerid,GOLD,"SYNTAX: /pfind [property address]");
	new bool:f = false;
	foreach(Props,i)
	{
		if(isnull(P[i][pname])) continue;
  		if(P[i][paddress] == address)
  	    {
	  		f = true;
	  		SetPlayerCheckpoint(playerid,P[i][px],P[i][py],P[i][pz],3);
	 		MSG(playerid,GREEN,"Info:"GR" The specified property has been marked in your minimap.");
			cmd_bme(playerid,"navigates through their GPS.");
			break;
  		}
	}
	if(!f) return MSG(playerid,GOLD,"ERROR:"GR" Invalid property address specified.");
	return 1;
}
CMD:linkproptofaction(playerid,params[])
{
	if(User[playerid][Useradmin] < 3) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new id,pppid;
	if(sscanf(params,"dd",id,pppid)) return MSG(playerid,GOLD,"SYNTAX:"GR" /linkproptofaction [propid] [factionid (-1 = no faction)]");
	P[id][pfac] = pppid; // -1 = no faction
	SFM(playerid,GOLD,"Info: Prop %d has been linked to Faction ID %d.",id,pppid);
	format(large_string,100,"UPDATE props SET faction = %d WHERE pid = %d",pppid,id);
	db_query(Database, large_string);
	return 1;
}
CMD:pcreate(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3 || IsStoryteller(playerid))
	{
	    new Float:x,
	        Float:y,
	        Float:z,
	        vw,
	        interior,
			name[40],
			string[230];
		sscanf(params,"s[40]",name);
		GetPlayerPos(playerid,x,y,z);
		vw = GetPlayerVirtualWorld(playerid);
		interior = GetPlayerInterior(playerid);
		foreach(Props,p)
		{
		    if(IsPlayerInRangeOfPoint(playerid,2,P[p][px],P[p][py],P[p][pz]))
		        return MSG(playerid,GOLD,"ERROR:"GR" You can't make a property when there's one closeby.");
			else continue;
		}
		new i = Iter_Free(Props); 
		P[i][px] = x;
		P[i][py] = y;
		P[i][pz] = z;
		P[i][pvw] = vw;
		P[i][pint] = interior;
		P[i][ptax] = -1;
		P[i][powner] = 0;
		P[i][pxi] = 0.0000;
		P[i][pyi] = 0.0000;
		P[i][pzi] = 0.0000;
		P[i][pinti] = 0;
		new svw[15];
		format(svw,sizeof svw,"%i0%i",random(999999),i);
		new vwi = strval(svw);
		P[i][pvwi] = vwi;
		P[i][pexist] = true;
		P[i][plock] = 0;
		P[i][pfac] = -1;
		new address = 1000+random(9999);
		P[i][paddress] = address;
		P[i][pname] = name;
		if(!isnull(name))
		{
			format(string,sizeof string,""MAR"(ID: %d)\n"W"%s\n"MAR"Address:"W" %d",i,P[i][pname],P[i][paddress]);
			P[i][pLabel] = CreateDynamic3DTextLabel(string,SOLIDWHITE,x,y,z,20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,vw,interior);
		}
		new sx[10],sy[10],sz[10];
		format(sx,10,"%f",x);
		format(sy,10,"%f",y);
		format(sz,10,"%f",z);
		format(string,sizeof string,"INSERT INTO props (pid,x,y,z,vw,interior,name,vwi,interiori,xi,yi,zi,address,faction) VALUES (%d,'%s','%s','%s',%d,%d,'%q',%d,%d,'%s','%s','%s',%d,-1)"
		,i,sx,sy,sz,vw,interior,P[i][pname],vwi,P[i][pinti],P[i][pxi],P[i][pyi],P[i][pzi],P[i][paddress]);
		db_query(Database,string);
		format(string,sizeof string,"SERVER: You have created property ID %d here.",i);
		MSG(playerid,GRAD2,string);
		Iter_Add(Props, i);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:psetlab(playerid,params[])
{
    if(User[playerid][Useradmin] >= 3)
    {
        new id;
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /psetlab [property id]");
		if(P[id][pexist])
		{
			if(!isnull(P[id][pname])) return MSG(playerid,GOLD,"ERROR:"GR" This property can't be set as a lab.");
		    new query[60];
		    format(query,sizeof query,"UPDATE props SET lab = 1 WHERE pid = %d",id);
		    db_query(Database, query);
		    MSG(playerid,GRAD2,"SERVER: Specified property is now a drug laboratry.");
			P[id][druglab] = true;
		}
		else return MSG(playerid,GOLD,"ERROR:"GR" Invalid property ID specified.");
    }
    else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:pdelete(playerid,params[])
{
    if(User[playerid][Useradmin] >= 3)
    {
        new id;
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /pdelete [property id]");
		if(P[id][pexist])
		{
		    new query[124];
		    format(query,sizeof query,"DELETE FROM props WHERE pid = %i",id);
		    db_query(Database, query);
		    if(!isnull(P[id][pname])) DestroyDynamic3DTextLabel(P[id][pLabel]);
    		new tmp[PROPERTY_DATA];
    		P[id] = tmp;
		    MSG(playerid,GRAD2,"SERVER: You have deleted the specified property.");
		    Iter_Remove(Props, id);

		}
		else return MSG(playerid,GOLD,"ERROR:"GR" Invalid property ID specified.");
    }
    else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:pgoto(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new id;
	    if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /pgoto [property id]");
	    SetPlayerPos(playerid,P[id][px],P[id][py],P[id][pz]);
	    SetPlayerVirtualWorld(playerid,P[id][pvw]);
	    SetPlayerInterior(playerid,P[id][pint]);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:psetint(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3 || IsStoryteller(playerid))
	{
	    new id,Float:x,Float:y,Float:z;
	    if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /psetint [property id]");
	    if(P[id][pexist] == false) return MSG(playerid,GOLD,"ERROR:"GR" Invalid property specified.");
		P[id][pinti] = GetPlayerInterior(playerid);
		GetPlayerPos(playerid,x,y,z);
		P[id][pxi] = x;
		P[id][pyi] = y;
		P[id][pzi] = z;
		
		new str[124];
		format(str,sizeof str,"STFCMD: Property ID %d interior has been set to your location.",id);
		MSG(playerid,GOLD,str);
		new sx[10],sy[10],sz[10];
		format(sx,10,"%f",x);
		format(sy,10,"%f",y);
		format(sz,10,"%f",z);
		format(str,sizeof str,"UPDATE props SET xi = '%s',yi = '%s',zi = '%s',interiori = '%d' WHERE pid = %d",sx,sy,sz,P[id][pinti],id);
		db_query(Database, str);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:psetvw(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3 || IsStoryteller(playerid))
	{
	    new id,vw;
	    if(sscanf(params,"ii",id,vw)) return MSG(playerid,GOLD,"SYNTAX:"GR" /psetvw [property id] [vw]");
	    if(P[id][pexist] == false) return MSG(playerid,GOLD,"ERROR:"GR" Invalid property specified.");
		P[id][pvwi] = vw;
		new str[124];
		format(str,sizeof str,"STFCMD: Property ID %d virtual world has been set to %d.",id,vw);
		MSG(playerid,GOLD,str);

		format(str,sizeof str,"UPDATE props SET vwi = %d WHERE pid = %d",P[id][pvwi],id);
		db_query(Database, str);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:psetvwex(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new id,vw;
	    if(sscanf(params,"ii",id,vw)) return MSG(playerid,GOLD,"SYNTAX:"GR" /psetvwex [property id] [vw]");
	    if(P[id][pexist] == false) return MSG(playerid,GOLD,"ERROR:"GR" Invalid property specified.");
		P[id][pvw] = vw;
		new str[124];
		format(str,sizeof str,"STFCMD: Property ID %d exterior virtual world has been set to %d.",id,vw);
		MSG(playerid,GOLD,str);

		format(str,sizeof str,"UPDATE props SET vw = %d WHERE pid = %d",P[id][pvw],id);
		db_query(Database, str);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:psettax(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new id,vw;
	    if(sscanf(params,"ii",id,vw)) return MSG(playerid,GOLD,"SYNTAX:"GR" /psettax [property id] [$$$]");
	    if(P[id][pexist] == false) return MSG(playerid,GOLD,"ERROR:"GR" Invalid property specified.");
	    if(isnull(P[id][pname])) return MSG(playerid,GOLD,"ERROR:"GR" This isn't a taxable property.");
		P[id][ptax] = vw;
		new str[124];
		format(str,sizeof str,"STFCMD: Property ID %d tax has been set to %d.",id,vw);
		MSG(playerid,GOLD,str);

		format(str,sizeof str,"UPDATE props SET tax = %d WHERE pid = %d",P[id][ptax],id);
		db_query(Database, str);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:psetowner(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new id,vw;
	    if(sscanf(params,"iu",id,vw)) return MSG(playerid,GOLD,"SYNTAX:"GR" /psetowner [property id] [playerid]");
	    if(!User[vw][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
	    if(P[id][pexist] == false) return MSG(playerid,GOLD,"ERROR:"GR" Invalid property specified.");
	    if(isnull(P[id][pname])) return MSG(playerid,GOLD,"ERROR:"GR" This isn't an ownable property.");
		P[id][powner] = User[vw][UserID];
		new str[124];
		format(str,sizeof str,"STFCMD: Property ID %d is now owned by %s.",id,User[vw][Username]);
		MSG(playerid,GOLD,str);

		format(str,sizeof str,"UPDATE props SET owner = %d WHERE pid = %d",P[id][powner],id);
		db_query(Database, str);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:myprops(playerid,params[])
{
	if(User[playerid][Logged])
	{
	    MSG(playerid,GREEN,"SERVER: You have access to the following properties:");
	    new word[10];
	    foreach(Props,i)
	    {
			if(P[i][pexist] && !isnull(P[i][pname]))
			{
			    if(P[i][powner] == User[playerid][UserID])
			    {
				    if(P[i][plock] == 0)
				        word = "Unlocked";
					else word = "Locked";
				    SFM(playerid,GRAD2,"[Property Name: %s] [Property ID: %d] [Status: %s]",P[i][pname],i,word);
			    }
			}
		}
	}
	else return 0;
	return 1;
}
// ----- HOUSE (ABOVE IS PROPS)
CMD:linkhousetoapartment(playerid,params[])
{
	if(User[playerid][Useradmin] < 3) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new id,pppid;
	if(sscanf(params,"dd",id,pppid)) return MSG(playerid,GOLD,"SYNTAX:"GR" /linkhousetoapartment [house id] [property id]");
	H[id][hapartment_linked] = pppid; // 0 = linked to no apartment
	SFM(playerid,GOLD,"Info: House ID %d has been linked to Apartment ID %d.",id,pppid);
	format(large_string,sizeof large_string,"UPDATE house SET apartment = %d WHERE hid = %d",pppid,id);
	db_query(Database, large_string);
	return 1;
}
CMD:hfind(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	new slot = FindPlayerItem_Name(playerid, "GPS");
	if(slot == -1)
		return MSG(playerid, GOLD, "Inventory:"GR" You don't have a GPS.");
	new address;
	if(sscanf(params,"d",address)) return MSG(playerid,GOLD,"SYNTAX: /hfind [house address]");
	new bool:f = false;
 	foreach(Houses,i)
	{
	    if(H[i][hexist] == false) continue;
	    if(H[i][haddress] == address)
	    {
	        f = true;
	        if(H[i][hapartment_linked] > 0) // if the house is linked to an apartment, lead to apartment exterior
			{
			    SetPlayerCheckpoint(playerid,P[H[i][hapartment_linked]][px],P[H[i][hapartment_linked]][py],P[H[i][hapartment_linked]][pz],3);
		        MSG(playerid,GREEN,"Info:"GR" The specified house has been marked in your minimap.");
			}
			else
			{
		        SetPlayerCheckpoint(playerid,H[i][hx],H[i][hy],H[i][hz],3);
		        MSG(playerid,GREEN,"Info:"GR" The specified house has been marked in your minimap.");
			}
			cmd_bme(playerid,"navigates through their GPS.");
			break;
	    }
	}
	if(!f) return MSG(playerid,GOLD,"ERROR:"GR" Invalid house address specified.");
	return 1;
}
CMD:nearhouse(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
		new bool:t;
		new range = 10;
		foreach(Houses,i)
		{
		    if(IsPlayerInRangeOfPoint(playerid,range, H[i][hx], H[i][hy], H[i][hz]))
			{
				new query[124];
				format(query, sizeof query,"[House ID: %d] [House Name: %s] [House Address: %d]",i,H[i][hname],H[i][haddress]);
				MSG(playerid, GRAD2, query);
				t = true;
			}
			else continue;
		}
		if(!t) return MSG(playerid,GRAD2,"None");
	    return 1;
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
/*CMD:spamdoor(playerid,params[])
{
	for(new i = 0; i < strval(params); i++)
	{
		cmd_dcreate(playerid,"2875");
	}
	return 1;
}
CMD:spamhouse(playerid,params[])
{
	for(new i = 0; i < strval(params); i++)
	{
		new str[10];
		format(str,sizeof str,"%d",random(10000));
		cmd_hcreate(playerid,str);
	}
	return 1;
}
CMD:spamprop(playerid,params[])
{
	for(new i = 0; i < strval(params); i++)
	{
		new str[10];
		format(str,sizeof str,"1 SPAMPROP",random(10000));
		cmd_pcreate(playerid,str);
	}
	return 1;	
}
CMD:spambiz(playerid,params[])
{
	// /bcreate [business type (/businesstypes)] [business name]"
	for(new i = 0; i < strval(params); i++)
	{
		new str[10];
		format(str,sizeof str,"1 SPAMBIZ",random(10000));
		cmd_bcreate(playerid,str);
	}
	return 1;
}*/
CMD:resetaddresses(playerid, params[])
{
	if(IsPlayerAdmin(playerid))
	{
		foreach(Houses, i)
		{
			new address = 1000+random(9999);
			H[i][haddress] = address;
			new name[40];
			Get2DZone(H[i][hx],H[i][hy],H[i][hz],name,sizeof name);
			format(H[i][hname],40,"%s %d",name,address);
			format(large_string, sizeof large_string, "UPDATE house SET address = %d,name = '%s' WHERE hid = %d", address, H[i][hname], H[i][hid]);
			db_query(Database, large_string);
		}
		return 1;
	}
	return 0;
}
CMD:hcreate(playerid,params[])
{
	if(User[playerid][Useradmin] > 4)
	{
	    new Float:x,
	        Float:y,
	        Float:z,
	        vw,
	        interior,
			price,
			name[40],
			string[230];
		if(sscanf(params,"i",price)) return MSG(playerid,GOLD,"SYNTAX:"GR" /hcreate [price]");
		GetPlayerPos(playerid,x,y,z);
		vw = GetPlayerVirtualWorld(playerid);
		interior = GetPlayerInterior(playerid);
		new inta = random(sizeof(hInteriorRand));

		new i = Iter_Free(Houses);
		H[i][hid] = i;
		H[i][hx] = x;
		H[i][hy] = y;
		H[i][hz] = z;
		H[i][hvw] = vw;
		H[i][hint] = interior;
		H[i][hprice] = price;
		H[i][howner] = 0;
		H[i][hxi] = hInteriorRand[inta][0];
		H[i][hyi] = hInteriorRand[inta][1];
		H[i][hzi] = hInteriorRand[inta][2];
		H[i][hinti] = floatround(hInteriorRand[inta][3]);
		new svw[15];
		format(svw,sizeof svw,"%i0%i",random(999999),i);
		new vwi = strval(svw);
		H[i][hvwi] = vwi;
		H[i][hexist] = true;
		H[i][hlock] = 0;
		new address = 1000+random(9999);
		H[i][haddress] = address;
		Get2DZone(x,y,z,name,sizeof name);
		format(H[i][hname],40,"%s %d",name,address);
		format(string,sizeof string,"FOR SALE!\n"G"House\n"W"%s\n"G"ID:"W" %i\n"G"Price:"W" $%i",H[i][hname],i,H[i][hprice]); // FOR SALE
		H[i][HLabel] = CreateDynamic3DTextLabel(string,SOLIDWHITE,x,y,z,20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,vw,interior);
		new sx[10],sy[10],sz[10];
		format(sx,10,"%f",x);
		format(sy,10,"%f",y);
		format(sz,10,"%f",z);
		format(string,sizeof string,"INSERT INTO house (hid,x,y,z,vw,interior,price,name,vwi,interiori,xi,yi,zi,address) VALUES (%d,'%s','%s','%s',%d,%d,%d,'%q',%d,%d,%f,%f,%f,%d)"
		,i,sx,sy,sz,vw,interior,H[i][hprice],H[i][hname],vwi,H[i][hinti],H[i][hxi],H[i][hyi],H[i][hzi], address);
		db_query(Database,string);
		format(string,sizeof string,"SERVER: You have created house ID %d here.",i);
		MSG(playerid,GRAD2,string);
		Iter_Add(Houses, i);

	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}

CMD:hgoto(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new id;
	    if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /hgoto [house id]");
		if(!H[id][hexist])  return MSG(playerid,GOLD,"ERROR:"GR" Invalid house ID specified.");
	    SetPlayerPos(playerid,H[id][hx],H[id][hy],H[id][hz]);
	    SetPlayerVirtualWorld(playerid,H[id][hvw]);
	    SetPlayerInterior(playerid,H[id][hint]);
	    User[playerid][HouseIN] = -1;
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:hdelete(playerid,params[])
{
    if(User[playerid][Useradmin] >= 3)
    {
        new id;
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /hdelete [house id]");
		if(H[id][hexist])
		{
		    new query[100];
		    format(query,sizeof query,"DELETE FROM house WHERE hid = %i",H[id][hid]);
		    db_query(Database, query);
		    DestroyDynamic3DTextLabel(H[id][HLabel]);
    		new tmp[HOUSE_DATA];
    		H[id] = tmp;
    		Iter_Remove(Houses, id);
		    MSG(playerid,GRAD2,"SERVER: You have deleted the specified house.");
		}
		else return MSG(playerid,GOLD,"ERROR:"GR" Invalid house ID specified.");
    }
	return 1;
}
CMD:hsetint(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new id;
	    if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /hsetint [house id]");
	    if(H[id][hexist])
	    {
			new Float:x,Float:y,Float:z,vw,interior;
			GetPlayerPos(playerid,x,y,z);
			new svw[15];
			format(svw,sizeof svw,"%i0%i",random(999999),id);
			vw = strval(svw);
			interior = GetPlayerInterior(playerid);
			H[id][hxi] = x;
			H[id][hyi] = y;
			H[id][hzi] = z;
			H[id][hinti] = interior;
			H[id][hvwi] = vw;
			MSG(playerid,GOLD,"Info:"GR" You have set the house's interior.");

			new query[150],
				sx[10],
				sy[10],
				sz[10];
			format(sx,10,"%f",H[id][hxi]);
			format(sy,10,"%f",H[id][hyi]);
			format(sz,10,"%f",H[id][hzi]);
			format(query,sizeof(query),"UPDATE house SET xi = '%s',yi = '%s',zi = '%s',interiori = %i,vwi = %i WHERE hid = %i",sx,sy,sz,interior,vw,id);
			db_query(Database, query);

			SetPlayerVirtualWorld(playerid,vw);
	    }
	    else return MSG(playerid,GOLD,"ERROR:"GR" Invalid house ID specified.");
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
//
CMD:jobhelp(playerid,params[])
{
	if(User[playerid][Logged])
	{
	    MSG(playerid,GOLD,"Job-Related Commands:");
	    MSG(playerid,Default,"** General: /employment /leavejob /endtask /jobprogress");
	    MSG(playerid,Default,"** Courier: /(s)tart(c)ourier; Pizzaboy: /(p)izza(b)oy");
	    MSG(playerid,Default,"** Warehouse Operative: /(op)erate(w)arehouse");
	    MSG(playerid,Default,"** Yard Mower (sidejob): /mow; Sweeper (sidejob): /sweep");
		MSG(playerid,Default,"** Fisherman (sidejob): /fish (/sellfish); Bus Driver: /busroute");
		MSG(playerid, Default,"** Mechanic: /paintjob /paintcar /repair /modcar");
		MSG(playerid, Default, "** Hunter (sidejob): /skinanimal (Hunting Rifle is acquired from the Weapon Store)");
		MSG(playerid, Default, "** Lumberjack (sidejob): ~k~~PED_ANSWER_PHONE~ to start cutting trees. (~k~~PED_FIREWEAPON~ and ~k~~PED_LOCK_TARGET~ to cut)");
	}
	else return 0;
	return 1;
}
CMD:leavejob(playerid,params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][uJob] == 0)
		{
		    MSG(playerid,GOLD,"ERROR:"GR" You are not employed.");
		    return 1;
		}
		if(User[playerid][JobStarted] != 0)
		{
		    MSG(playerid,GOLD,"ERROR:"GR" You have to complete your ongoing task first.");
		    return 1;
		}
  		if(User[playerid][JobCD] > 0)
    	{
			new str[124];
			format(str,sizeof str,"ERROR:"GR" You need to collect %d more paychecks before leaving your job.",User[playerid][JobCD]);
			MSG(playerid,GOLD,str);
			return 1;
		}
		if(User[playerid][uJob] == JOB_BIZ && isnull(User[playerid][donator]))
			return MSG(playerid,GOLD,"Error:"GR" You can't quit this job.");
		User[playerid][uJob] = 0;
		User[playerid][JobCD] = 0;
        MSG(playerid,GOLD,"Info:"GR" You have successfully left your current job.");
		new str[85];
		format(str,sizeof str,"UPDATE users SET ujob = NULL WHERE userid = %d",User[playerid][UserID]);
		db_query(Database, str);
	}
	else return 0;
	return 1;
}

CMD:employment(playerid,params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][BusinessINType] != 6)
		{
		    MSG(playerid,GOLD,"ERROR:"GR" You are not inside an employment center.");
		    return 1;
		}
		if(User[playerid][uJob] != 0)
		{
		    MSG(playerid,GOLD,"ERROR:"GR" You are already employed. Type /leavejob to quit your current job.");
		    return 1;
		}
		Dialog_Show(playerid,dTakeJob,DIALOG_STYLE_LIST,"Employment Center","Courier\nWarehouse Operative\nPizzaboy\nMechanic\nBus Driver","Select","Cancel");
	}
	else return 0;
	return 1;
}
Dialog:dTakeJob(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0: // JOB_COURIER
	        {
				Dialog_Show(playerid,dTakeJobCourier,DIALOG_STYLE_MSGBOX,"Courier","A courier uses a medium-sized truck to deliver goods to a variety of businesses.\nYou are awarded from one to three experience per route in order to advance.\nCooldown and payment depends on your advancement in the job level.\n\nRequirement(s): Level 3",
				"Confirm","Back");
	        }
	        case 1: // JOB_WH
			{
	            Dialog_Show(playerid,dTakeJobWH,DIALOG_STYLE_MSGBOX,"Warehouse Operative","A warehouse operative works to arrange crates and boxes within a warehouse.\n\nRequirements: None"
				,"Confirm","Back");
	        }
	        case 2: // JOB_PB
	        {
	            Dialog_Show(playerid,dTakeJobPB,DIALOG_STYLE_MSGBOX,"Pizzaboy","The job of the Pizzaboy involves the player delivering pizza to several houses in the city.\nAfter the delivery is finished, the Pizzaboy must return the bike in order to receive payment.\n\nRequirements: None"
				,"Confirm","Back");
			}
			case 3: // JOB_MECH
			{
				Dialog_Show(playerid,dTakeJobMECH,DIALOG_STYLE_MSGBOX,"Mechanic","A Mechanic has the ability to repair and upgrade vehicles. Normally you don't need a tow truck.\nHowever under certain circumstances a tow truck is needed in order to perform specific tasks.\n\nRequirements: Level 3\nVehicle(s): Tow Truck (optional)"
				,"Confirm","Back");
			}
			case 4: // JOB_BW 
			{
				Dialog_Show(playerid,dTakeJobBW,DIALOG_STYLE_MSGBOX,"Bus Driver","A Bus Driver as it is titled drives a bus that's provided by the government through specific routes.\nYou don't need to own a Bus in order to work with this job.\n\nRequirements:  Level 2, Public Transport License"
				,"Confirm","Back");				
			}
	    }
	}
	return 1;
}
CMD:refill(playerid, params[])
{
	new car = GetVehicleInFrontOfPlayer(playerid);
	if(car == INVALID_VEHICLE_ID)
		return MSG(playerid, GOLD, "ERROR:"GR" Stand nearby the vehicle you wish to refill and face it.");
	if(GetVehicleType(car) == BIKE)
		return MSG(playerid, GOLD, "ERROR:"GR" This vehicle has no fuel tank.");
	if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159) 
		return MSG(playerid, GOLD, "ERROR:"GR" You are not crouching.");
	new slot = FindPlayerItem_Name(playerid, "Gas Can");
	if(slot == -1)
		return MSG(playerid, GOLD, "Inventory:"GR" You don't have a Gas Can.");
	V[car][fuel] = 100;
	PlayerActionMessage(playerid, "uses their Gas Can to refill the vehicle.");
	format(large_string, sizeof large_string, "UPDATE cars SET fuel = 100 WHERE vid = %d", V[car][dataid]);
	db_query(Database, large_string);
	large_string[0] = EOS;
	UpdateItem(playerid, slot, UserItem[playerid][slot][Item], UserItem[playerid][slot][ItemName], -1, 100, true);
	return 1;
}
CMD:paintcar(playerid, params[])
{
	if(User[playerid][uJob] != JOB_MECH)
		return MSG(playerid, GOLD, "ERROR:"GR" You are not a Mechanic.");
	new car = GetVehicleInFrontOfPlayer(playerid);
	if(car == INVALID_VEHICLE_ID)
		return MSG(playerid, GOLD, "ERROR:"GR" Stand nearby the vehicle you wish to paint and face it.");
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
	if(doors == VEHICLE_PARAMS_ON) return MSG(playerid, GOLD, "ERROR:"GR" This vehicle is locked.");
	if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159) 
		return MSG(playerid, GOLD, "ERROR:"GR" You are not crouching.");
	if(V[car][vrent] > 0)
		return MSG(playerid, GOLD, "ERROR:"GR" This vehicle cannot be painted.");
	new slot = FindPlayerItem_Name(playerid, "Vehicle Paint");
	if(slot == -1)
		return MSG(playerid, GOLD, "Inventory:"GR" You don't have a a Vehicle Paint.");
	new color1, color2;
	if(sscanf(params, "ii", color1, color2))
		return MSG(playerid, GOLD, "SYNTAX:"GR" /paintcar [color1] [color2]");
	if(color1 < 0 || color2 < 0)
		return MSG(playerid, GOLD, "ERROR:"GR" Invalid color specified.");
	ChangeVehicleColor(car, color1, color2);
	UpdateItem(playerid, slot, UserItem[playerid][slot][Item], UserItem[playerid][slot][ItemName], -1, 100, true);
	new query[124];
	format(query, sizeof query, "uses his Vehicle Paint on the %s.", GetVehicleName(GetVehicleModel(car)));
	PlayerActionMessage(playerid, query);

	format(large_string, sizeof large_string, "UPDATE cars SET color1 = %d,color2 = %d WHERE vid = %d", color1, color2, V[car][dataid]);
	db_query(Database, large_string);
	large_string[0] = EOS;
	return 1;
}
CMD:paintjob(playerid, params[])
{
	if(User[playerid][uJob] != JOB_MECH)
		return MSG(playerid, GOLD, "ERROR:"GR" You are not a Mechanic.");
	new car = GetVehicleInFrontOfPlayer(playerid);
	if(car == INVALID_VEHICLE_ID)
		return MSG(playerid, GOLD, "ERROR:"GR" Stand nearby the vehicle you wish to paint and face it.");
	if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159) 
		return MSG(playerid, GOLD, "ERROR:"GR" You are not crouching.");
	if(V[car][vrent] > 0)
		return MSG(playerid, GOLD, "ERROR:"GR" This vehicle cannot be painted.");
	new item = FindPlayerItem_Name(playerid,"Vehicle Paint");
	if(UserItem[playerid][item][Value] < 2)
		return MSG(playerid, GOLD, "ERROR:"GR" You have no Vehicle Paint. Two are required to apply paintjob.");
	new paintjob;
	if(sscanf(params, "i", paintjob))
		return MSG(playerid, GOLD, "SYNTAX:"GR" /paintjob [paintjob id (valid values: 0, 1, 3 (to remove))]");
	if(paintjob < 0 || paintjob > 1 || paintjob != 3)
		return MSG(playerid, GOLD, "ERROR:"GR" Invalid paintjob specified.");
	ChangeVehiclePaintjob(car, paintjob);
	UpdateItem(playerid, item, UserItem[playerid][item][Item], UserItem[playerid][item][ItemName], -2, 100, true);
	new query[124];
	format(query, sizeof query, "applies new paintjob to the %s.", GetVehicleName(GetVehicleModel(car)));
	PlayerActionMessage(playerid, query);

	format(large_string, sizeof large_string, "UPDATE cars SET paintjob = %d WHERE vid = %d", paintjob, V[car][dataid]);
	db_query(Database, large_string);
	large_string[0] = EOS;
	return 1;
}
CMD:repair(playerid, params[])
{
	if(User[playerid][uJob] != JOB_MECH)
		return MSG(playerid, GOLD, "ERROR:"GR" You are not a Mechanic.");
	new car = GetVehicleInFrontOfPlayer(playerid);
	if(car == INVALID_VEHICLE_ID)
		return MSG(playerid, GOLD, "ERROR:"GR" Stand nearby the vehicle you wish to repair and face it.");
	if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159) 
		return MSG(playerid, GOLD, "ERROR:"GR" You are not crouching.");
	new item = FindPlayerItem_Name(playerid,"Wrench");
	if(item == -1)
		return MSG(playerid, GOLD, "ERROR:"GR" You have no Wrench.");
	new parts;
	if(sscanf(params, "i", parts))
		return MSG(playerid, GOLD, "SYNTAX:"GR" /repair [parts (each vehicle part is +50 vehicle health)]");
	item = FindPlayerItem_Name(playerid,"Vehicle Part");
	if(parts < 0)
		return MSG(playerid, GOLD, "ERROR:"GR" Invalid number of parts specified.");
	if(UserItem[playerid][item][Value] < parts)
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have enough Vehicle Part(s).");
	new Float:carhp;
	GetVehicleHealth(car, carhp);
	SetVehicleHealth(car, carhp+parts*50);
	GetVehicleHealth(car, carhp);
	if(carhp >= 1000)
	{
		RepairVehicle(car);
		SetVehicleHealth(car, 1000);
	}
	UpdateItem(playerid, item, UserItem[playerid][item][Item], UserItem[playerid][item][ItemName], -parts, 100, true);
	//                id = FindPlayerItem_Name(playerid,"Bait");
	//UpdateItem(playerid, id, UserItem[playerid][id][Item], UserItem[playerid][id][ItemName], -1);
	new query[124];
	format(query, sizeof query, "has used %d Vehicle Part(s) to repair the %s.", parts, GetVehicleName(GetVehicleModel(car)));
	PlayerActionMessage(playerid, query);
	return 1;
}
CMD:modcar(playerid, params[])
{
	if(User[playerid][uJob] != JOB_MECH)
		return MSG(playerid, GOLD, "ERROR:"GR" You are not a Mechanic.");
	new car = GetVehicleInFrontOfPlayer(playerid);
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
	if(doors == VEHICLE_PARAMS_ON) return MSG(playerid, GOLD, "ERROR:"GR" This vehicle is locked.");
	if(car == INVALID_VEHICLE_ID)
		return MSG(playerid, GOLD, "ERROR:"GR" Stand nearby the vehicle you wish to modify and face it.");
	if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159) 
		return MSG(playerid, GOLD, "ERROR:"GR" You are not crouching.");
	if(V[car][vrent] > 0)
		return MSG(playerid, GOLD, "ERROR:"GR" This vehicle cannot be modified.");
	new item = FindPlayerItem_Name(playerid,"Blowtorch");
	if(item == -1)
		return MSG(playerid, GOLD, "ERROR:"GR" You have no Blowtorch.");
	new query[124];
	format(query, sizeof query, "inspects the %s for possible modifications setup.", GetVehicleName(GetVehicleModel(car)));
	PlayerActionMessage(playerid, query);
	Dialog_Show(playerid, dModCar,DIALOG_STYLE_LIST, "Vehicle Modifications", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Select", "Cancel");
	SetPVarInt(playerid, "ModdingCar", car);
	//SFM(playerid, -1, "%d", GetVehicleComponentType(1100));
	return 1;
}

Dialog:dModCar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid, dModCarHood ,DIALOG_STYLE_LIST, "Mechanic: Vehicle Modifications", "Fury\nChamp\nRace\nWorx", "Modify", "Cancel");
			case 1: Dialog_Show(playerid, dModCarVent ,DIALOG_STYLE_LIST, "Mechanic: Vehicle Modifications", "Oval\nSquare", "Modify", "Cancel");
			case 2: Dialog_Show(playerid, dModCarLight ,DIALOG_STYLE_LIST, "Mechanic: Vehicle Modifications", "Round\nSquare", "Modify", "Cancel");
			case 3: Dialog_Show(playerid, dModCarExhaust ,DIALOG_STYLE_LIST, "Mechanic: Vehicle Modifications", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust", "Modify", "Cancel");
			case 4: Dialog_Show(playerid, dModCarFrontBumper ,DIALOG_STYLE_LIST, "Mechanic: Vehicle Modifications", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper", "Modify", "Cancel");
			case 5: Dialog_Show(playerid, dModCarRearBumper ,DIALOG_STYLE_LIST, "Mechanic: Vehicle Modifications", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper", "Modify", "Cancel");
			case 6: Dialog_Show(playerid, dModCarRoof ,DIALOG_STYLE_LIST, "Mechanic: Vehicle Modifications", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop", "Modify", "Cancel");
			case 7: Dialog_Show(playerid, dModCarSpoiler ,DIALOG_STYLE_LIST, "Mechanic: Vehicle Modifications", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler", "Modify", "Cancel");
			case 8: Dialog_Show(playerid, dModCarSideSkirt ,DIALOG_STYLE_LIST, "Mechanic: Vehicle Modifications", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt", "Modify", "Cancel");
			case 9: Dialog_Show(playerid, dModCarBullbar ,DIALOG_STYLE_LIST, "Mechanic: Vehicle Modifications", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar", "Modify", "Cancel");
			case 10: Dialog_Show(playerid, dModCarWheels ,DIALOG_STYLE_LIST, "Mechanic: Vehicle Modifications", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Modify", "Cancel");
			case 11: Dialog_Show(playerid, dModCarStereo ,DIALOG_STYLE_LIST, "Mechanic: Vehicle Modifications", "Bass Boost", "Modify", "Cancel");
			case 12: Dialog_Show(playerid, dModCarHydraulic ,DIALOG_STYLE_LIST, "Mechanic: Vehicle Modifications", "Hydaulics", "Modify", "Cancel");
			case 13: Dialog_Show(playerid, dModCarNitro ,DIALOG_STYLE_LIST, "Mechanic: Vehicle Modifications", "2x Nitrous\n5x Nitrous\n10x Nitrous", "Modify", "Cancel");
		}
	}
	return 1;
}

Dialog:dModCarNitro(playerid, response, listitem, inputtext[])
{
        if(response)
        {
			//new vehicleid = GetPVarInt(playerid, "ModdingCar"),model = GetVehicleModel(GetPVarInt(playerid, "ModdingCar"));
			new vehicleid = GetPVarInt(playerid, "ModdingCar");//,model = GetVehicleModel(GetPVarInt(playerid, "ModdingCar"));
			new itemid = FindPlayerItem_Name(playerid,"Vehicle Part");
			new cost = 15;
			if(UserItem[playerid][itemid][Value] < cost)
				return SFM(playerid, GOLD, "ERROR:"GR" You need %d Vehicle Parts to install this.", cost);
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
					if(UserItem[playerid][itemid][Value] > 0)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						AddVehicleComponent(car,1008);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						MSG(playerid, GRAD2, "SERVER: Modification applied.");
					}
					else
					{
						SendClientMessage(playerid,RED,"Not enough money!");
					}
        	    }
        	    case 1:
        	    {
					if(UserItem[playerid][itemid][Value] > 0)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						AddVehicleComponent(car,1009);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						MSG(playerid, GRAD2, "SERVER: Modification applied.");
					}
					else
					{
						SendClientMessage(playerid,RED,"Not enough money!");
						
					}
        	    }
        	    case 2:
				{
					if(UserItem[playerid][itemid][Value] > 0)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						AddVehicleComponent(car,1010);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						MSG(playerid, GRAD2, "SERVER: Modification applied.");
						
					}
					else
					{
						SendClientMessage(playerid,RED,"Not enough money!");
					}
				}
 			}
			if(V[vehicleid][dataid] > 0)
			{
				new query[124];
				new componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_NITRO);
				if(componentid == 0) return 0;
				format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
				db_query(Database, query);
				UpdateItem(playerid, itemid, UserItem[playerid][itemid][Item], UserItem[playerid][itemid][ItemName], -cost, 100, true);
			}			
		}
		return 1;
}
Dialog:dModCarHydraulic(playerid, response, listitem, inputtext[])
{
        if(response)
        {
			new vehicleid = GetPVarInt(playerid, "ModdingCar");
			new itemid = FindPlayerItem_Name(playerid,"Vehicle Part");
			new cost = 25;
			if(UserItem[playerid][itemid][Value] < cost)
				return SFM(playerid, GOLD, "ERROR:"GR" You need %d Vehicle Parts to install this.", cost);
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
					if(UserItem[playerid][itemid][Value] > 0)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						AddVehicleComponent(car,1087);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						MSG(playerid, GRAD2, "SERVER: Modification applied.");
						
					}
					else
					{
						SendClientMessage(playerid,RED,"Not enough money!"); 
					}
 				}
			}
			if(V[vehicleid][dataid] > 0)
			{
				new query[124];
				new componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_HYDRAULICS);
				if(componentid == 0) return 0;
				format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
				db_query(Database, query);
				UpdateItem(playerid, itemid, UserItem[playerid][itemid][Item], UserItem[playerid][itemid][ItemName], -cost, 100, true);
			}		
		}
		return 1;
}
Dialog:dModCarStereo(playerid, response, listitem, inputtext[])
{
        if(response)
        {
			new vehicleid = GetPVarInt(playerid, "ModdingCar");//,model = GetVehicleModel(GetPVarInt(playerid, "ModdingCar"));
			new itemid = FindPlayerItem_Name(playerid,"Vehicle Part");
			new cost = 10;
			if(UserItem[playerid][itemid][Value] < cost)
				return SFM(playerid, GOLD, "ERROR:"GR" You need %d Vehicle Parts to install this.", cost);
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
					if(UserItem[playerid][itemid][Value] > 0)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						AddVehicleComponent(car,1086);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						MSG(playerid, GRAD2, "SERVER: Modification applied.");
					}
					else
					{
						SendClientMessage(playerid,RED,"Not enough money!");
						
					}
        	    }
 			}
			if(V[vehicleid][dataid] > 0)
			{
				new query[124];
				new componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_STEREO);
				if(componentid == 0) return 0;
				format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
				db_query(Database, query);
				UpdateItem(playerid, itemid, UserItem[playerid][itemid][Item], UserItem[playerid][itemid][ItemName], -cost, 100, true);
			}		
		}
		return 1;
}
Dialog:dModCarWheels(playerid, response, listitem, inputtext[])
{
        if(response)
        {
			new vehicleid = GetPVarInt(playerid, "ModdingCar");//,model = GetVehicleModel(GetPVarInt(playerid, "ModdingCar"));
			new itemid = FindPlayerItem_Name(playerid,"Vehicle Part");
			new cost = 40;
			if(UserItem[playerid][itemid][Value] < cost)
				return SFM(playerid, GOLD, "ERROR:"GR" You need %d Vehicle Parts to install this.", cost);
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(UserItem[playerid][itemid][Value] > 0)
		        {
		            new car = GetPVarInt(playerid, "ModdingCar");
		            AddVehicleComponent(car,1025);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            MSG(playerid, GRAD2, "SERVER: Modification applied.");
		            
				}
				else
				{
	       			SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
        	    case 1:
        	    {
                if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
			        AddVehicleComponent(car,1074);
           			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
				}
				else
				{
	       			SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
        	    case 2:
        	    {
                if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
	                AddVehicleComponent(car,1076);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
				}
				else
				{
	       			SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 3:
        	    {
                if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
			        AddVehicleComponent(car,1078);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
				}
				else
				{
	      		 	SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 4:
        	    {
                if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
			        AddVehicleComponent(car,1081);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
				}
				else
				{
	       			SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 5:
        	    {
                if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
	                AddVehicleComponent(car,1082);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
				}
				else
				{
				    SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 6:
        	    {
				if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
			        AddVehicleComponent(car,1085);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
				}
				else
				{
				    SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 7:
        	    {
				if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
			        AddVehicleComponent(car,1096);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	      			MSG(playerid, GRAD2, "SERVER: Modification applied.");
				}
				else
				{
				    SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 8:
        	    {
				if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
			        AddVehicleComponent(car,1097);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          		MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
				}
				else
				{
				    SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 9:
        	    {
     			if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
			        AddVehicleComponent(car,1098);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          		MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
				}
				else
				{
				    SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 10:
        	    {
				if(UserItem[playerid][itemid][Value] > 0)
		        {
		            new car = GetPVarInt(playerid, "ModdingCar");
		            AddVehicleComponent(car,1084);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            MSG(playerid, GRAD2, "SERVER: Modification applied.");
		            
				}
				else
				{
	       			SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 11:
        	    {
 				if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
			        AddVehicleComponent(car,1073);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
				}
				else
				{
	       			SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 12:
        	    {
					if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
	                AddVehicleComponent(car,1075);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
				}
					else
				{
	      	 		SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 13:
        	    {
					if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
			        AddVehicleComponent(car,1077);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
				}
					else
				{
	       			SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 14:
        	    {
					if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
			        AddVehicleComponent(car,1079);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
				}
					else
				{
	       			SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 15:
        	    {
					if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
	                AddVehicleComponent(car,1080);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
				}
					else
				{
				    SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 16:
        	    {
					if(UserItem[playerid][itemid][Value] > 0)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
			        AddVehicleComponent(car,1083);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
				}
					else
				{
				    SendClientMessage(playerid,RED,"Not enough money!");
				    
				}
        	    }
				case 17:
        	    {
					
        	    }
				case 18:
        	    {
     			
        	    }
 			}
			if(V[vehicleid][dataid] > 0)
			{
				new query[124];
				new componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_WHEELS);
				if(componentid == 0) return 0;
				format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
				db_query(Database, query);
				
				UpdateItem(playerid, itemid, UserItem[playerid][itemid][Item], UserItem[playerid][itemid][ItemName], -cost, 100, true);
			}		
		}	
		return 1;
}
Dialog:dModCarBullbar(playerid, response, listitem, inputtext[])
{
        if(response)
        {
			new vehicleid = GetPVarInt(playerid, "ModdingCar"),model = GetVehicleModel(GetPVarInt(playerid, "ModdingCar"));
			new itemid = FindPlayerItem_Name(playerid,"Vehicle Part");
			new cost = 10;
			if(UserItem[playerid][itemid][Value] < cost)
				return SFM(playerid, GOLD, "ERROR:"GR" You need %d Vehicle Parts to install this.", cost);			
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(model == 534)

			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
			        if(model == 534) // Remington
			        {
			            AddVehicleComponent(car,1100);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			           	MSG(playerid, GRAD2, "SERVER: Modification applied.");
			        
			        }
					}
					else
					{
				    MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					
					}
        	    }
        	    case 1: 
        	    {
					if(model == 534)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 534) // Remington
						{
							AddVehicleComponent(car,1123);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
        	    }
        	    case 2:
        	    {
					if(model == 534)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 534) // Remington
						{
							AddVehicleComponent(car,1125);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
        	    }
				case 3:
        	    {
					if(model == 535)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 535) // Slamvan
						{
							AddVehicleComponent(car,1117);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
					}
        	    }
				case 4:
        	    {
                
        	    }
				case 5:
        	    {
                
        	    }
 			}
			if(V[vehicleid][dataid] > 0)
			{
				new query[124];
				new componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_FRONT_BUMPER);
				if(componentid == 0) return 0;
				format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
				db_query(Database, query);
				
				UpdateItem(playerid, itemid, UserItem[playerid][itemid][Item], UserItem[playerid][itemid][ItemName], -cost, 100, true);
			}		
		}
		return 1;
}
Dialog:dModCarSideSkirt(playerid, response, listitem, inputtext[])
{
        if(response)
        {
			new vehicleid = GetPVarInt(playerid, "ModdingCar"),model = GetVehicleModel(GetPVarInt(playerid, "ModdingCar"));
			new itemid = FindPlayerItem_Name(playerid,"Vehicle Part");
			new cost = 20;
			if(UserItem[playerid][itemid][Value] < cost)
				return SFM(playerid, GOLD, "ERROR:"GR" You need %d Vehicle Parts to install this.", cost);
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
					if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 562) // Elegy
						{
							AddVehicleComponent(car,1036);
							AddVehicleComponent(car,1040);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 565) // Flash
						{
							AddVehicleComponent(car,1047);
							AddVehicleComponent(car,1051);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 559) // Jester
						{
							AddVehicleComponent(car,1069);
							AddVehicleComponent(car,1071);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 561) // Stratum
						{
							AddVehicleComponent(car,1056);
							AddVehicleComponent(car,1062);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 560) // Sultan
						{
							AddVehicleComponent(car,1026);
							AddVehicleComponent(car,1027);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 558) // Uranus
						{
							AddVehicleComponent(car,1090);
							AddVehicleComponent(car,1094);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
        	    }
        	    case 1:
        	    {
					if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 562) // Elegy
						{
							AddVehicleComponent(car,1039);
							AddVehicleComponent(car,1041);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");						
						}
						else if(model == 565) // Flash
						{
							AddVehicleComponent(car,1048);
							AddVehicleComponent(car,1052);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");							
						}
						else if(model == 559) // Jetser
						{
							AddVehicleComponent(car,1070);
							AddVehicleComponent(car,1072);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");							
						}
						else if(model == 561) // Stratum
						{
							AddVehicleComponent(car,1057);
							AddVehicleComponent(car,1063);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");							
						}
						else if(model == 560) // Sultan
						{
							AddVehicleComponent(car,1031);
							AddVehicleComponent(car,1030);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");							
						}
						else if(model == 558)  // Uranus
						{
							AddVehicleComponent(car,1093);
							AddVehicleComponent(car,1095);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
						}
						}
						else
						{
							MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						}
        	    }
        	    case 2:
        	    {
					if(model == 575 || model == 536 || model == 576 || model == 567)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 575) // Brodway
						{
							AddVehicleComponent(car,1042);
							AddVehicleComponent(car,1099);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 567) // Savanna
						{
							AddVehicleComponent(car,1102);
							AddVehicleComponent(car,1133);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 576) // Tornado
						{
							AddVehicleComponent(car,1134);
							AddVehicleComponent(car,1137);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 536) // Blade
						{
							AddVehicleComponent(car,1108);
							AddVehicleComponent(car,1107);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
        	    }
				case 3:
        	    {
					if(model == 534 || model == 534)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 534) // Remington
						{
							AddVehicleComponent(car,1122);
							AddVehicleComponent(car,1101);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
						}
					}
					else
					{
							MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");	
					}
        	    }
				case 4:
        	    {
					if(model == 534 || model == 534)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 534) // Remington
						{
							AddVehicleComponent(car,1106);
							AddVehicleComponent(car,1124);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
        	    }
				case 5:
        	    {
					if(model == 535)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 535) // Slamvan
						{
							AddVehicleComponent(car,1118);
							AddVehicleComponent(car,1120);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
        	    }
				case 6:
        	    {
					if(model == 535)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 535) // Slamvan
						{
							AddVehicleComponent(car,1119);
							AddVehicleComponent(car,1121);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
        	    }
				case 7:
        	    {
				if(
					model == 401 ||
					model == 518 ||
					model == 527 ||
					model == 415 ||
					model == 589 ||
					model == 546 ||
					model == 517 ||
					model == 603 ||
					model == 436 ||
					model == 439 ||
					model == 580 ||
					model == 549 ||
					model == 477)
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 401)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 518)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 527)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 415)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 589)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 546)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 517)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 603)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 436)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 439)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 580)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 549)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 477)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
        	    	}
        	    		else
						{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
						}
        	    }
				case 8:
        	    {
				
        	    }
				case 9:
        	    {
    			
        	    }
 			}
			if(V[vehicleid][dataid] > 0)
			{
				new query[124];
				new componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_SIDESKIRT);
				if(componentid == 0) return 0;
				format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
				db_query(Database, query);
				
				UpdateItem(playerid, itemid, UserItem[playerid][itemid][Item], UserItem[playerid][itemid][ItemName], -cost, 100, true);
			}		
		}
		return 1;
}
Dialog:dModCarSpoiler(playerid, response, listitem, inputtext[])
{
        if(response)
        {
			new vehicleid = GetPVarInt(playerid, "ModdingCar"),model = GetVehicleModel(GetPVarInt(playerid, "ModdingCar"));
			new itemid = FindPlayerItem_Name(playerid,"Vehicle Part");
			new cost = 30;
			if(UserItem[playerid][itemid][Value] < cost)
				return SFM(playerid, GOLD, "ERROR:"GR" You need %d Vehicle Parts to install this.", cost);
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(model == 562 ||
				model == 565 ||
				model == 559 ||
				model == 561 ||
				model == 558 ||
				model == 560)
		        {

		            new car = GetPVarInt(playerid, "ModdingCar");
		            if(model == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1147);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		MSG(playerid, GRAD2, "SERVER: Modification applied.");
		            	
					}
					else if(model == 565) // Flash
					{
					    AddVehicleComponent(car,1049);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 559) // Jester
					{
					    AddVehicleComponent(car,1162);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 561) // Stratum
					{
					    AddVehicleComponent(car,1158);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 560) // Sultan
					{
					    AddVehicleComponent(car,1138);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 558) // Uranus
					{
					    AddVehicleComponent(car,1164);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					}
					else
					{
				    MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					
					}
        	    }
        	    case 1:
        	    {
                if(model == 562 ||
				model == 565 ||
				model == 559 ||
				model == 561 ||
				model == 558 ||
				model == 560)
		        {


			        new car = GetPVarInt(playerid, "ModdingCar");
			        if(model == 562) // Elegy
			        {
			            AddVehicleComponent(car,1146);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			           	MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
					}
					else if(model == 565) // Flash
					{
					    AddVehicleComponent(car,1150);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 559) // Jetser
					{
					    AddVehicleComponent(car,1158);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 561) // Stratum
					{
					    AddVehicleComponent(car,1060);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 560) // Sultan
					{
					    AddVehicleComponent(car,1139);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 558)  // Uranus
					{
					    AddVehicleComponent(car,1163);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					}
					else
					{
				    MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					
					}
        	    }
        	    case 2:// Win
        	    {
                if(
                    model == 401 ||//bravura
					model == 518 ||//buccaneer
					model == 527 ||//cadrona
					model == 415 ||//cheetah
					model == 546 ||//intruder
					model == 603 ||//phoenix
					model == 426 ||//premier
					model == 436 ||//previon
					model == 405 ||//sentinel
					model == 477 ||//stallion
					model == 580 ||//stafford
					model == 550 ||//sunrise
					model == 549)//tampa
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 401) // bravura
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
			        	if(model == 546) // intruder
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 426) // premier
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 436) // previon
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 477) // stallion
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 580) // stafford
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 549) // tampa
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
        	    	}
        	    		else
						{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
						}
        	    }
        	    case 3: // Fury
        	    {
                        if(
					model == 518 ||//buccaneer
					model == 415 ||//cheetah
					model == 546 ||//intruder
					model == 517 ||//majestic
					model == 603 ||//phoenix
					model == 405 ||//sentinel
					model == 477 ||//stallion
					model == 580 ||//stafford
					model == 550 ||//sunrise
					model == 549)//tampa
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
			        	if(model == 546) // intruder
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 517) // majestic
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 477) // stallion
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 580) // stafford
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 549) // tampa
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
        	    	}
        	    		else
						{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
						}
        	    }
        	    case 4: // Alpha
        	    {
                        if(
					model == 518 ||//buccaneer
					model == 415 ||//cheetah
					model == 401 ||//bravura
					model == 517 ||//majestic
					model == 426 ||//premier
					model == 436 ||//previon
					model == 477 ||//stallion
					model == 547 ||//primo
					model == 550 ||//sunrise
					model == 549)//tampa
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
			        	if(model == 401) // bravura
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 517) // majestic
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 426) // premier
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 436) // previon
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 477) // stallion
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 547) // primo
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 549) // tampa
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
        	    	}
        	    		else
						{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
						}
        	    }
        	    case 5: // Pro
        	    {
                        if(
					model == 589 ||//club
					model == 492 ||//greenwood
					model == 547 ||//primo
					model == 405)//sentinel
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 518) // club
			        	{
			            AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 492) // greenwood
			        	{
			            AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
			        	if(model == 547) // primo
			        	{
			            AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 405) // sentinel
			        	{
        				AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
        	    	}
        	    		else
						{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
						}
        	    }
				case 6: // Champ
        	    {
                        if(
					model == 527 ||//cadrona
					model == 542 ||//clover
					model == 405)//sentinel
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 542) // clover
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
			        	if(model == 405) // sentinel
			        	{
        				AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
        	    	}
        	    		else
						{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
						}
        	    }
        	    case 7: // Race
        	    {
                if(
					model == 527 ||//cadrona
					model == 542)//clover
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 542) // clover
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
        	    	}
        	    		else
						{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
						}
        	    }
				case 8: // Drag
        	    {
                if(
					model == 546 ||//intruder
					model == 517)//majestic
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 546) // intruder
			        	{
			            AddVehicleComponent(car,1002);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 517) // majestic
			        	{
			            AddVehicleComponent(car,1002);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
        	    	}
        	    		else
						{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
						}
        	    }
        	    case 9:
        	    {
                
        	    }
				case 10:
        	    {
                
        	    }
 			}
			if(V[vehicleid][dataid] > 0)
			{
				new query[124];
				new componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_SPOILER);
				if(componentid == 0) return 0;
				format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
				db_query(Database, query);
				
				UpdateItem(playerid, itemid, UserItem[playerid][itemid][Item], UserItem[playerid][itemid][ItemName], -cost, 100, true);
			}	
		}
		return 1;
}
Dialog:dModCarRearBumper(playerid, response, listitem, inputtext[])
{
        if(response)
        {
			new vehicleid = GetPVarInt(playerid, "ModdingCar"),model = GetVehicleModel(GetPVarInt(playerid, "ModdingCar"));
			new itemid = FindPlayerItem_Name(playerid,"Vehicle Part");
			new cost = 30;
			if(UserItem[playerid][itemid][Value] < cost)
				return SFM(playerid, GOLD, "ERROR:"GR" You need %d Vehicle Parts to install this.", cost);
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
					if(model == 562 ||model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
					{
							new car = GetPVarInt(playerid, "ModdingCar");
							if(model == 562) // Elegy
							{
								AddVehicleComponent(car,1038);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								MSG(playerid, GRAD2, "SERVER: Modification applied.");
								
							}
								else if(model == 565) // Flash
							{
								AddVehicleComponent(car,1054);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								MSG(playerid, GRAD2, "SERVER: Modification applied.");
								
							}
								else if(model == 559) // Jester
							{
								AddVehicleComponent(car,1067);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								MSG(playerid, GRAD2, "SERVER: Modification applied.");
								
							}
								else if(model == 561) // Stratum
							{
								AddVehicleComponent(car,1055);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								MSG(playerid, GRAD2, "SERVER: Modification applied.");
								
							}
								else if(model == 560) // Sultan
							{
								AddVehicleComponent(car,1032);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								MSG(playerid, GRAD2, "SERVER: Modification applied.");
								
							}
								else if(model == 558) // Uranus
							{
								AddVehicleComponent(car,1088);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								MSG(playerid, GRAD2, "SERVER: Modification applied.");
								
							}
						}
						else
						{
							MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						}
        	    }
        	    case 1:
        	    {
					if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
					{
							new car = GetPVarInt(playerid, "ModdingCar");
							if(model == 562) // Elegy
							{
								AddVehicleComponent(car,1035);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								MSG(playerid, GRAD2, "SERVER: Modification applied.");
								
							}
							else if(model == 565) // Flash
							{
								AddVehicleComponent(car,1053);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								MSG(playerid, GRAD2, "SERVER: Modification applied.");
								
							}
							else if(model == 559) // Jetser
							{
								AddVehicleComponent(car,1068);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								MSG(playerid, GRAD2, "SERVER: Modification applied.");
								
							}
							else if(model == 561) // Stratum
							{
								AddVehicleComponent(car,1061);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								MSG(playerid, GRAD2, "SERVER: Modification applied.");
								
							}
							else if(model == 560) // Sultan
							{
								AddVehicleComponent(car,1033);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								MSG(playerid, GRAD2, "SERVER: Modification applied.");
								
							}
							else if(model == 558)  // Uranus
							{
								AddVehicleComponent(car,1091);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								MSG(playerid, GRAD2, "SERVER: Modification applied.");
							}
					}
					else
					{
							MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
        	    }
        	    case 2:
        	    {
					if(model == 567 || model == 536)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 567) // Savanna
						{
							AddVehicleComponent(car,1130);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
							else if(model == 536) // Blade
						{
							AddVehicleComponent(car,1128);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
        	    }
				case 3:
        	    {
					if(model == 567 || model == 536)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 567) // Savanna
						{
							AddVehicleComponent(car,1131);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
							else if(model == 536) // Blade
						{
							AddVehicleComponent(car,1103);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");	
					}
        	    }
				case 4:
        	    {
                 if(
					model == 401 ||
					model == 518 ||
					model == 589 ||
					model == 492 ||
					model == 546 ||
					model == 603 ||
					model == 426 ||
					model == 436 ||
					model == 580 ||
					model == 550||
					model == 477)
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 401)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 518)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 589)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 492)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 546)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 603)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 426)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 436)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 580)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 550)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 477)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
        	    	}
        	    		else
						{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
						}
        	    }
				case 5:
        	    {
                 
        	    }
				case 6:
        	    {
                
        	    }
 			}
			if(V[vehicleid][dataid] > 0)
			{
				new query[124];
				new componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_REAR_BUMPER);
				if(componentid == 0) return 0;
				format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
				db_query(Database, query);
				
				UpdateItem(playerid, itemid, UserItem[playerid][itemid][Item], UserItem[playerid][itemid][ItemName], -cost, 100, true);
			}	
		}
		return 1;
}
Dialog:dModCarRoof(playerid, response, listitem, inputtext[])
{
    if(response)
    {
			new vehicleid = GetPVarInt(playerid, "ModdingCar"),model = GetVehicleModel(GetPVarInt(playerid, "ModdingCar"));
			new itemid = FindPlayerItem_Name(playerid,"Vehicle Part");
			new cost = 15;
			if(UserItem[playerid][itemid][Value] < cost)
				return SFM(playerid, GOLD, "ERROR:"GR" You need %d Vehicle Parts to install this.", cost);
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                 	if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
		        	{

						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 562) // Elegy
						{
							AddVehicleComponent(car,1149);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 565) // Flash
						{
							AddVehicleComponent(car,1150);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 559) // Jester
						{
							AddVehicleComponent(car,1159);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 561) // Stratum
						{
							AddVehicleComponent(car,1154);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 560) // Sultan
						{
							AddVehicleComponent(car,1141);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 558) // Uranus
						{
							AddVehicleComponent(car,1168);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
					}
					else
					{
				    	MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
        	    }
        	    case 1:
        	    {
					if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 562) // Elegy
						{
							AddVehicleComponent(car,1148);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 565) // Flash
						{
							AddVehicleComponent(car,1151);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 559) // Jetser
						{
							AddVehicleComponent(car,1161);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 561) // Stratum
						{
							AddVehicleComponent(car,1156);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 560) // Sultan
						{
							AddVehicleComponent(car,1140);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 558)  // Uranus
						{
							AddVehicleComponent(car,1167);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
        	    }
        	    case 2:
        	    {
					if(model == 575 || model == 534 || model == 567 || model == 536 || model == 576 || model == 535)
					{


						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 575) // Brodway
						{
							AddVehicleComponent(car,1176);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 534)// Remington
						{
							AddVehicleComponent(car,1180);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 567)// Savanna
						{
							AddVehicleComponent(car,1187);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 536) // Blade
						{
							AddVehicleComponent(car,1184);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 535) // Slamvan
						{
							AddVehicleComponent(car,1109);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 576) // Tornado
						{
							AddVehicleComponent(car,1192);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
					}
        	    }
				case 3:
        	    {
					if(model == 575 || model == 534 || model == 567 || model == 536 || model == 576 || model == 535)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 575) // Brodway
						{
							AddVehicleComponent(car,1177);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 534)// Remington
						{
							AddVehicleComponent(car,1178);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 567)// Savanna
						{
							AddVehicleComponent(car,1186);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 536) // Blade
						{
							AddVehicleComponent(car,1183);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 535) // Slamvan
						{
							AddVehicleComponent(car,1110);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 576) // Tornado
						{
							AddVehicleComponent(car,1193);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
					}
        	    }
 			}
			if(V[vehicleid][dataid] > 0)
			{
				new query[124];
				new componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_ROOF);
				if(componentid == 0) return 0;
				format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
				db_query(Database, query);
				
				UpdateItem(playerid, itemid, UserItem[playerid][itemid][Item], UserItem[playerid][itemid][ItemName], -cost, 100, true);
			}	
	}	
	return 1;
}
Dialog:dModCarFrontBumper(playerid, response, listitem, inputtext[])
{
      	if(response)
        {
			new vehicleid = GetPVarInt(playerid, "ModdingCar"),model = GetVehicleModel(GetPVarInt(playerid, "ModdingCar"));
			new itemid = FindPlayerItem_Name(playerid,"Vehicle Part");
			new cost = 30;
			if(UserItem[playerid][itemid][Value] < cost)
				return SFM(playerid, GOLD, "ERROR:"GR" You need %d Vehicle Parts to install this.", cost);
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                 if(model == 562 ||
				model == 565 ||
				model == 559 ||
				model == 561 ||
				model == 558 ||
				model == 560)
				{
		            new car = GetPVarInt(playerid, "ModdingCar");
		            if(model == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1171);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		MSG(playerid, GRAD2, "SERVER: Modification applied.");
		            	
					}
					else if(model == 565) // Flash
					{
					    AddVehicleComponent(car,1153);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 559) // Jester
					{
					    AddVehicleComponent(car,1160);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 561) // Stratum
					{
					    AddVehicleComponent(car,1155);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 560) // Sultan
					{
					    AddVehicleComponent(car,1169);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 558) // Uranus
					{
					    AddVehicleComponent(car,1166);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					}
					else
					{
				    MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					
					}
        	    }
        	    case 1:
        	    {
                 if(model == 562 ||
				model == 565 ||
				model == 559 ||
				model == 561 ||
				model == 558 ||
				model == 560)
		        {

			        new car = GetPVarInt(playerid, "ModdingCar");
			        if(model == 562) // Elegy
			        {
			            AddVehicleComponent(car,1172);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			           	MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
					}
					else if(model == 565) // Flash
					{
					    AddVehicleComponent(car,1152);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 559) // Jetser
					{
					    AddVehicleComponent(car,1173);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 561) // Stratum
					{
					    AddVehicleComponent(car,1157);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 560) // Sultan
					{
					    AddVehicleComponent(car,1170);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 558)  // Uranus
					{
					    AddVehicleComponent(car,1165);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					}
					else
					{
				    MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					
					}
        	    }
        	    case 2:
        	    {
                 if(model == 575 ||
				model == 534 ||
				model == 567 ||
				model == 536 ||
				model == 576 ||
				model == 535)
				{
			        new car = GetPVarInt(playerid, "ModdingCar");
			        if(model == 575) // Brodway
			        {
			            AddVehicleComponent(car,1174);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			           	MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
					}
					else if(model == 534)// Remington
					{
					    AddVehicleComponent(car,1179);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 567)// Savanna
					{
					    AddVehicleComponent(car,1189);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 536) // Blade
					{
					    AddVehicleComponent(car,1182);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 535) // Slamvan
					{
					    AddVehicleComponent(car,1115);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 576) // Tornado
					{
					    AddVehicleComponent(car,1191);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					}
					else
					{
				    	MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");

					}
        	    }
				case 3:
        	    {
                 if(model == 575 ||
				model == 534 ||
				model == 567 ||
				model == 535 ||
				model == 536 ||
	            model == 576 ||
				model == 576)
			    {
			        new car = GetPVarInt(playerid, "ModdingCar");
			        if(model == 575) // Brodway
			        {
			            AddVehicleComponent(car,1175);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			           	MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
					}
					else if(model == 534)// Remington
					{
					    AddVehicleComponent(car,1185);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					  	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 567)// Savanna
					{
					    AddVehicleComponent(car,1188);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 536) // Blade
					{
					    AddVehicleComponent(car,1181);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}

				    else if(model == 535) // Slamvan
					{
					    AddVehicleComponent(car,1116);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}
					else if(model == 576) // Tornado
					{
					    AddVehicleComponent(car,1190);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	MSG(playerid, GRAD2, "SERVER: Modification applied.");
					    
					}

					}
					else
					{
				    MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					
					}
        	    }
			}
			if(V[vehicleid][dataid] > 0)
			{
				new query[124];
				new componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_FRONT_BUMPER);
				if(componentid == 0) return 0;
				format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
				db_query(Database, query);
				
				UpdateItem(playerid, itemid, UserItem[playerid][itemid][Item], UserItem[playerid][itemid][ItemName], -cost, 100, true);
			}
		}
		return 1;
}
Dialog:dModCarExhaust(playerid, response, listitem, inputtext[])
{
    if(response)
	{
			new vehicleid = GetPVarInt(playerid, "ModdingCar"),model = GetVehicleModel(GetPVarInt(playerid, "ModdingCar"));
			new itemid = FindPlayerItem_Name(playerid,"Vehicle Part");
			new cost = 15;
			if(UserItem[playerid][itemid][Value] < cost)
				return SFM(playerid, GOLD, "ERROR:"GR" You need %d Vehicle Parts to install this.", cost);
           	switch(listitem)
        	{
        	    case 0:
        	    {
					if(model == 562 || model == 565 || model == 559 || model == 558 || model == 561 || model == 560)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 562)
						{
							AddVehicleComponent(car,1034);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 565)
						{
							AddVehicleComponent(car,1046);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 559)
						{
							AddVehicleComponent(car,1065);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 561)
						{
							AddVehicleComponent(car,1064);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 560)
						{
							AddVehicleComponent(car,1028);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 558)
						{
							AddVehicleComponent(car,1089);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
        	    }
        	    case 1:
        	    {
					if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 562)
						{
							AddVehicleComponent(car,1037);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 565)
						{
							AddVehicleComponent(car,1045);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 559)
						{
							AddVehicleComponent(car,1066);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 561)
						{
							AddVehicleComponent(car,1059);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 560)
						{
							AddVehicleComponent(car,1029);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 558)
						{
							AddVehicleComponent(car,1092);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
					}
        	    }
        	    case 2:
        	    {
					if(model == 575 || model == 534 || model == 567 || model == 536 || model == 576 || model == 535)
					{	
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 575) // Brodway
						{
							AddVehicleComponent(car,1044);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 534)// Remington
						{
							AddVehicleComponent(car,1126);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 567)// Savanna
						{
							AddVehicleComponent(car,1129);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 536) // Blade
						{
							AddVehicleComponent(car,1104);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 535) // Slamvan
						{
							AddVehicleComponent(car,1113);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 576) // Tornado
						{
							AddVehicleComponent(car,1136);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
				}
				case 3:
        	    {
					if(model == 575 || model == 534 || model == 567 || model == 536 || model == 576 || model == 535)
					{
						new car = GetPVarInt(playerid, "ModdingCar");
						if(model == 575) // Brodway
						{
							AddVehicleComponent(car,1043);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 534)// Remington
						{
							AddVehicleComponent(car,1127);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 567)// Savanna
						{
							AddVehicleComponent(car,1132);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
						else if(model == 536) // Blade
						{
							AddVehicleComponent(car,1105);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}

						else if(model == 535) // Slamvan
						{
							AddVehicleComponent(car,1114);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}

						else if(model == 576) // Tornado
						{
							AddVehicleComponent(car,1135);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");	
					}
        	    }
        	    case 4:// Large
        	    {
     				if(
					model == 401 ||//bravura
					model == 518 ||//buccaneer
					model == 527 ||//cadrona
					model == 542 ||//clover
					model == 589 ||//club
					model == 400 ||//landstalker
					model == 517 ||//majestic
					model == 603 ||//phoenix
					model == 426 ||//premier
					model == 547 ||//primo
					model == 405 ||//sentinel
					model == 580 ||//stafford
					model == 550 ||//sunrise
					model == 549 ||//tampa
					model == 477)//zr-350
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 401) // bravura
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 542) // clover
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
			        	if(model == 589) // club
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 436) // previon
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 547) // primo
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 580) // stafford
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 549) // tampa
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 477) // zr-350
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 517) // majestic
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
        	    	}
        	    	else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
				}
        	    case 5: // Medium
        	    {
                    if(
					model == 527 ||//cadrona
					model == 542 ||//clover
					model == 400 ||//landstalker
					model == 426 ||//premier
					model == 436 ||//previon
					model == 547 ||//primo
					model == 405 ||//sentinel
					model == 477)//zr-350
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 542) // clover
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 426) // premier
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
			        	if(model == 436) // previon
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 547) // primo
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 477) // zr350
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
        	    	}
        	    	else 
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
        	    }
        	    case 6: // Small
        	    {
                    if(model == 436)//previon
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 436) // previon
			        	{
							AddVehicleComponent(car,1022);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
						}
        	    	}
        	    	else MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
        	    }
        	    case 7: // Twin
        	    {
                    if(model == 518 || model == 415 || model == 542 ||  model == 546 || model == 400 || model == 517 || model == 603 || model == 426 || model == 436 || model == 547 || model == 405 || model == 550 || model == 549 || model == 477)
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 518) // buccaneer
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
						}
			        	if(model == 415) // cheetah
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
						}
			        	if(model == 542) // clover
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 546) // intruder
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
	
						}
			        	if(model == 400) // landstalker
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 517) // majestic
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 603) // phoenix
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
						}
			        	if(model == 426) // premier
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
						}
			        	if(model == 436) // previon
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 547) // primo
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 405 ) // sentinel
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 550) // sunrise
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 549) // tampa
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 477) // zr-350
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied."); 
						}
        	    	}
        	    	else MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
        	    }
        	    case 8: // Upswept
        	    {
                    if(model == 401 || model == 415 || model == 542 || model == 546 || model == 400 || model == 517 || model == 603 || model == 426 || model == 415 || model == 547 || model == 405 ||	model == 550 ||	model == 549 ||	model == 477)
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 542) // clover
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
			        	if(model == 589) // club
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 546) // intruder
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 547) // primo
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 580) // stafford
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1018);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 549) // tampa
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 477) // zr-350
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 517) // majestic
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
        	    	}
        	    	else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
        	    }
			}
			if(V[vehicleid][dataid] > 0)
			{
				new query[124];
				new componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_EXHAUST);
				if(componentid == 0) return 0;
				format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
				db_query(Database, query);
				
				UpdateItem(playerid, itemid, UserItem[playerid][itemid][Item], UserItem[playerid][itemid][ItemName], -cost, 100, true);
			}
	}
	return 1;
}

Dialog:dModCarLight(playerid, response, listitem, inputtext[])
{
        if(response)
        {
			new vehicleid = GetPVarInt(playerid, "ModdingCar"),model = GetVehicleModel(GetPVarInt(playerid, "ModdingCar"));
			new itemid = FindPlayerItem_Name(playerid,"Vehicle Part");
			new cost = 10;
			if(UserItem[playerid][itemid][Value] < cost)
				return SFM(playerid, GOLD, "ERROR:"GR" You need %d Vehicle Parts to install this.", cost);
           	switch(listitem)
        	{
        	    case 0:// round
        	    {
     				if(
					model == 401 ||//bravura
					model == 518 ||//buccaneer
					model == 589 ||//club
					model == 400 ||//landstalker
					model == 436 ||//previon
					model == 439)//stallion
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 401) // bravura
			        	{
               			AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
               			
						}
			        	if(model == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
               			
						}
			        	if(model == 589) // club
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
			        	if(model == 436) // previon
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 439) // stallion
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
        	    	}
                    else
						{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
						}
				}
        	    case 1: // Square
        	    {
                if(
					model == 589 ||//club
					model == 603 ||//phoenix
					model == 400)//landstalker
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 589) // club
			        	{
			            AddVehicleComponent(car,1024);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1024);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1024);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
        	    	}
        	    	else
						{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
						}
        	    }
			}
			if(V[vehicleid][dataid] > 0)
			{
				new query[124];
				new componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_LAMPS);
				if(componentid == 0) return 0;
				format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
				db_query(Database, query);
				
				UpdateItem(playerid, itemid, UserItem[playerid][itemid][Item], UserItem[playerid][itemid][ItemName], -cost, 100, true);
			}
		}	
		return 1;
}
Dialog:dModCarVent(playerid, response, listitem, inputtext[])
{
        if(response)
        {
			new vehicleid = GetPVarInt(playerid, "ModdingCar"),model = GetVehicleModel(GetPVarInt(playerid, "ModdingCar"));
			new itemid = FindPlayerItem_Name(playerid,"Vehicle Part");
			new cost = 18;
			if(UserItem[playerid][itemid][Value] < cost)
				return SFM(playerid, GOLD, "ERROR:"GR" You need %d Vehicle Parts to install this.", cost);
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// Oval
        	    {
     				if(
					model == 401 ||//bravura
					model == 518 ||//buccaneer
					model == 546 ||//intruder
					model == 517 ||//majestic
					model == 603 ||//phoenix
					model == 547 ||//primo
					model == 439 ||//stallion
					model == 550 ||//sunrise
					model == 549)//tampa
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 401) // bravura
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 546) // intruder
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 517) // majestic
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
			        	if(model == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 547) // primo
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 439) // stallion
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 549) // tampa
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
        	    	}
        	    	else
						{
							MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
							
						}
				}
        	    case 1: // Square
        	    {
                if(model == 401 ||//bravura
					model == 518 ||//buccaneer
					model == 589 ||//club
					model == 546 ||//intruder
					model == 517 ||//majestic
					model == 603 ||//phoenix
					model == 439 ||//stallion
					model == 550 ||//sunrise
					model == 549)//tampa
					{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 401) // bravura
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 589) // club
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 546) // intruder
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
			        	if(model == 517) // majestic
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 439) // stallion
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
			        	if(model == 549) // tampa
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
                        
						}
        	    	}
              			else
						{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
						
						}
        	    }
				case 2: // _
        	    {
                
        	    }
        	    case 3: // Back
        	    {
                
        	    }
			}
			if(V[vehicleid][dataid] > 0)
			{
				new query[124],bool:go = false;
				new componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_VENT_RIGHT);
				if(componentid == 0)
				{
					componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_VENT_LEFT);
					if(componentid != 0) go = true;
				}
				else go = true;
				if(!go) return 0;
				format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
				db_query(Database, query);
				
				UpdateItem(playerid, itemid, UserItem[playerid][itemid][Item], UserItem[playerid][itemid][ItemName], -cost, 100, true);
			}
		}
		return 1;
}
Dialog:dModCarHood(playerid, response, listitem, inputtext[])
{
        if(response)
        {
			new vehicleid = GetPVarInt(playerid, "ModdingCar"),model = GetVehicleModel(GetPVarInt(playerid, "ModdingCar"));
			new itemid = FindPlayerItem_Name(playerid,"Vehicle Part");
			new cost = 25;
			if(UserItem[playerid][itemid][Value] < cost)
				return SFM(playerid, GOLD, "ERROR:"GR" You need %d Vehicle Parts to install this.", cost);
           	switch(listitem)
        	{
        	    case 0:// fury
        	    {
                	if(model == 401 || model == 518 || model == 589 || model == 492 || model == 426 || model == 550)
			    	{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 401) // bravura
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");

						}
			        	if(model == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 589) // club
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 492) // greenwood
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 426) // premier
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
			        	if(model == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is incompatible with this car.");
					}
	    		}
        	    case 1: // Champ
        	    {
                if(model == 401 || model == 492 || model == 546 || model == 426 || model == 550)
			    {
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 401) // bravura
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 546) // intruder
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 492) // greenwood
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
			            
						}
			        	if(model == 426) // premier
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
           			 	
						}
			        	if(model == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is not compatible with this car.");
					}
        	    }
				case 2: // Race
        	    {
					if(model == 549)
					{
							new car = GetPVarInt(playerid, "ModdingCar");
							if(model == 549) // tampa
							{
							AddVehicleComponent(car,1011);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							MSG(playerid, GRAD2, "SERVER: Modification applied.");
							
							}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is not compatible with this car.");	
					}
        	    }
        	    case 3: // Worx
        	    {
                	if(model == 549)
			    	{
			        	new car = GetPVarInt(playerid, "ModdingCar");
			        	if(model == 549) // tampa
			        	{
			            AddVehicleComponent(car,1012);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            MSG(playerid, GRAD2, "SERVER: Modification applied.");
						}
					}
					else
					{
						MSG(playerid, GOLD, "ERROR:"GR" The specified modification is not compatible with this car.");
					}
				}
        	}
			if(V[vehicleid][dataid] > 0)
			{
				new query[124];
				new componentid= GetVehicleComponentInSlot(vehicleid, CARMODTYPE_HOOD);
				if(componentid == 0) return 0;
				format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
				db_query(Database, query);
				
				UpdateItem(playerid, itemid, UserItem[playerid][itemid][Item], UserItem[playerid][itemid][ItemName], -cost, 100, true);
			}
		}
		return 1;
}


Dialog:dTakeJobBW(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    print("PING 1");
		User[playerid][uJob] = JOB_BW;
		if(!isnull(User[playerid][donator]))
			User[playerid][JobCD] = 0;
		else User[playerid][JobCD] = 4;
		if(User[playerid][Level] < 2)
		{
			return MSG(playerid,GOLD,"ERROR:"GR" You need at least Level 2 to acquire this job!");
		}
		MSG(playerid,GREEN,"Info:"GR" You are now employed as a Bus Driver.");
		MSG(playerid,GREEN,"Info:"GR" This job's location is the bus depot. Type (/busroute) to find it.");
		if(User[playerid][uBW][0] == 0)
		    User[playerid][uBW][0] = 1;
		new query[100];
		format(query,sizeof query,"UPDATE users SET ujob = %d WHERE userid = %d",User[playerid][uJob],User[playerid][UserID]);
		db_query(Database, query);

		format(query,sizeof query,"SELECT bus FROM jobs WHERE userid = %d",User[playerid][UserID]);
		new DBResult: Result = db_query(Database, query);
		format(query,sizeof query,"%d,%d,%d",User[playerid][uBW][0],User[playerid][uBW][1],0);
		if(db_num_rows(Result))
		{
  			format(query,sizeof query,"UPDATE jobs SET bus = '%s' WHERE userid = %d",query,User[playerid][UserID]);
		}
		else
		{
			format(query,sizeof query,"INSERT INTO jobs (userid,bus) VALUES (%d,'%s')",User[playerid][UserID],query);
		}
		db_query(Database, query);
		db_free_result(Result);

	}
	else return cmd_employment(playerid,"");
	return 1;
}
Dialog:dTakeJobMECH(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    print("PING 1");
		User[playerid][uJob] = JOB_MECH;
		if(!isnull(User[playerid][donator]))
			User[playerid][JobCD] = 0;
		else User[playerid][JobCD] = 4;
		MSG(playerid,GREEN,"Info:"GR" You are now employed as a Mechanic.");
		MSG(playerid,GREEN,"Info:"GR" This job has no specific location though you can work at garages and autoshops.");

		new query[100];
		format(query,sizeof query,"UPDATE users SET ujob = %d WHERE userid = %d",User[playerid][uJob],User[playerid][UserID]);
		db_query(Database, query);

	}
	else return cmd_employment(playerid,"");
	return 1;
}
Dialog:dTakeJobPB(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    print("PING 1");
		User[playerid][uJob] = JOB_PB;
		if(!isnull(User[playerid][donator]))
			User[playerid][JobCD] = 0;
		else User[playerid][JobCD] = 4;
		MSG(playerid,GREEN,"Info:"GR" You are now employed as a Pizzaboy.");
		MSG(playerid,GREEN,"Info:"GR"  The location of this job is Idlewood, type /(p)izza(b)oy to pinpoint it in your map.");
		if(User[playerid][uPB][0] == 0)
		    User[playerid][uPB][0] = 1;
		new query[100];
		format(query,sizeof query,"UPDATE users SET ujob = %d WHERE userid = %d",User[playerid][uJob],User[playerid][UserID]);
		db_query(Database, query);

		format(query,sizeof query,"SELECT pizzaboy FROM jobs WHERE userid = %d",User[playerid][UserID]);
		new DBResult: Result = db_query(Database, query);
		format(query,sizeof query,"%d,%d,%d",User[playerid][uPB][0],User[playerid][uPB][1],0);
		if(db_num_rows(Result))
		{
  			format(query,sizeof query,"UPDATE jobs SET pizzaboy = '%s' WHERE userid = %d",query,User[playerid][UserID]);
		}
		else
		{
			format(query,sizeof query,"INSERT INTO jobs (userid,pizzaboy) VALUES (%d,'%s')",User[playerid][UserID],query);
		}
		db_query(Database, query);
		db_free_result(Result);
	}
	else return cmd_employment(playerid,"");
	return 1;
}
Dialog:dTakeJobWH(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    print("PING 1");
		User[playerid][uJob] = JOB_WH;
		if(!isnull(User[playerid][donator]))
			User[playerid][JobCD] = 0;
		else User[playerid][JobCD] = 4;
		MSG(playerid,GREEN,"Info:"GR" You are now employed as a Warehouse Operative.");
		MSG(playerid,GREEN,"Info:"GR"  The location of this job is at Ocean Docks, type /(op)erate(w)arehouse to pinpoint it in your map.");
		if(User[playerid][uWH][0] == 0)
		    User[playerid][uWH][0] = 1;
		new query[100];
		format(query,sizeof query,"UPDATE users SET ujob = %d WHERE userid = %d",User[playerid][uJob],User[playerid][UserID]);
		db_query(Database, query);
		format(query,sizeof query,"SELECT warehouse FROM jobs WHERE userid = %d",User[playerid][UserID]);
		new DBResult: Result = db_query(Database, query);
		format(query,sizeof query,"%d,%d,%d",User[playerid][uWH][0],User[playerid][uWH][1],0);
		if(db_num_rows(Result))
		{
  			format(query,sizeof query,"UPDATE jobs SET warehouse = '%s' WHERE userid = %d",query,User[playerid][UserID]);
		}
		else
		{
			format(query,sizeof query,"INSERT INTO jobs (userid,warehouse) VALUES (%d,'%s')",User[playerid][UserID],query);
		}
		db_query(Database, query);
		db_free_result(Result);
	}
	else return cmd_employment(playerid,"");
	return 1;
}
Dialog:dTakeJobCourier(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    print("PING 1");
		if(User[playerid][Level] < 3)
		{
		    MSG(playerid,GOLD,"ERROR:"GR" You need at least level 3 to acquire this job.");
		    print("PING 2");
		    return 1;
		}
		User[playerid][uJob] = JOB_COURIER;
		if(!isnull(User[playerid][donator]))
			User[playerid][JobCD] = 0;
		else User[playerid][JobCD] = 4;
		MSG(playerid,GREEN,"Info:"GR" You are now employed as a Courier.");
		MSG(playerid,GREEN,"Info:"GR" Location of this job is at Blueberry, type /(s)tart(c)ourier to pinpoint it in your map");
		new query[125];
		format(query,sizeof query,"UPDATE users SET ujob = %d WHERE userid = %d",User[playerid][uJob],User[playerid][UserID]);
		db_query(Database, query);

		if(User[playerid][uCourier][0] == 0)
		    User[playerid][uCourier][0] = 1;
		format(query,sizeof query,"SELECT courier FROM jobs WHERE userid = %d",User[playerid][UserID]);
		new DBResult: Result = db_query(Database, query);
		format(query,sizeof query,"%d,%d,%d",User[playerid][uCourier][0],User[playerid][uCourier][1],0);
		if(db_num_rows(Result))
		{
  			format(query,sizeof query,"UPDATE jobs SET courier = '%s' WHERE userid = %d",query,User[playerid][UserID]);
		}
		else
		{
			format(query,sizeof query,"INSERT INTO jobs (userid,courier) VALUES (%d,'%s')",User[playerid][UserID],query);
		}
		db_query(Database, query);
		db_free_result(Result);
	}
	else return cmd_employment(playerid,"");
	return 1;
}

CMD:mask(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	if(User[playerid][shapeshift] > 1)
		return MSG(playerid, GOLD, "ERROR:"GR" You cannot use this feature while shapeshifted.");
	if(User[playerid][isMasked] == 1)
	{
		//DestroyDynamic3DTextLabel(User[playerid][MaskTag]);
		User[playerid][isMasked] = 0;
		UpdateDynamic3DTextLabelText(User[playerid][UserTag],SOLIDWHITE,User[playerid][pUsername]);
		PlayerActionMessageBubble(playerid,"removes their Mask.");
		return 1;
	}
	new id = FindPlayerItem_Name(playerid,"Mask");
	if(id == -1) return MSG(playerid,GOLD,"ERROR:"GR" You do not have a Mask.");
	new masktag[30];
	format(masktag,sizeof masktag,"Masked %04d",User[playerid][UserID]);
	UpdateDynamic3DTextLabelText(User[playerid][UserTag],MASK_COLOR,masktag);
  	User[playerid][isMasked] =  1;
	PlayerActionMessageBubble(playerid,"equips their Mask.");
	UserItem[playerid][id][Condition]--;
	format(large_string, sizeof large_string, "UPDATE inventory SET condition = %d WHERE userid = %d AND slot = %d", UserItem[playerid][id][Condition], User[playerid][UserID], id);
	db_query(Database, large_string);	
	if(UserItem[playerid][id][Condition] < 1)
	{
		UpdateItem(playerid, id, UserItem[playerid][id][Item], UserItem[playerid][id][ItemName], -UserItem[playerid][id][Value]);
        MSG(playerid,GRAD2,"Info: Your Mask has worn out. Purchase a new one from a Clothes Store.");
	}
	return 1;
}
CMD:pvehicles(playerid, params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new id;
		if(sscanf(params, "u", id))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /pvehicles [playerid/PartOfName]");
		if(User[id][Logged] == false)
			return MSG(playerid, GOLD, "ERROR:"GR" Offline player specified");
     	MSG(playerid,GRAD2,"|____ ["G"Player Vehicles"GR"] ____|");
		large_string[0] = EOS;
		for(new i = 0, j = GetVehiclePoolSize(); i <= j; i++)
		{
			if(User[id][UserID] == V[i][cowner])
			{
				if(V[i][vimpound] > gettime()) format(large_string,sizeof large_string,"[*] Vehicle Name: %s | Static ID: %d | Game ID: %d | "MAR"Impounded"GR" (%d hours left)",GetVehicleName(GetVehicleModel(i)),V[i][dataid],i,((V[i][vimpound]-gettime())/60)/60);
				else format(large_string,sizeof large_string,"[*] Vehicle Name: %s | Static ID: %d | Game ID: %d",GetVehicleName(GetVehicleModel(i)),V[i][dataid],i);
				MSG(playerid,GRAD2,large_string);
			}
		}
		if(isnull(large_string)) MSG(playerid,GRAD2,"None");
		return 1;
	}
	return 0;
}
CMD:phouses(playerid, params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new id;
		if(sscanf(params, "u", id))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /pvehicles [playerid/PartOfName]");
		if(User[id][Logged] == false)
			return MSG(playerid, GOLD, "ERROR:"GR" Offline player specified.");
		new query[124];
		format(query, sizeof query,"SELECT name,price,hid from house WHERE owner = %d",User[id][UserID]);
		new DBResult:Result = db_query(Database, query);
		MSG(playerid,GRAD2,"|____ ["G"Houses"GR"] ____|");
		do
		{
			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "name",query,40);
				new hhid = db_get_field_assoc_int(Result,"hid");
				new price = db_get_field_assoc_int(Result,"price");
				format(query,sizeof query,"["G"*"GR"] %s (ID: %d; Price: %d)", query, hhid, price);
				MSG(playerid,GRAD2,query);
			}
			else
			{
			    MSG(playerid,GREEN,"House:"GR" There are no houses to list.");
				break;
			}
		}
		while(db_next_row(Result));
		db_free_result(Result);
        MSG(playerid,GRAD2,"|___________________|");
		if(isnull(large_string)) MSG(playerid,GRAD2,"None");
	    return 1;
	}
	return 0;
}
CMD:pbanks(playerid, params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new id;
		if(sscanf(params, "u", id))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /pbanks [playerid/PartOfName]");
		if(User[id][Logged] == false)
			return MSG(playerid, GOLD, "ERROR:"GR" Offline player specified.");
	    new query[124];
	    format(query,sizeof query,"SELECT * FROM banks WHERE id = %d",User[id][UserID]);
		new DBResult: Result = db_query(Database, query);
		do
		{
			if(db_num_rows(Result))
			{
			    new branch[41];
        		db_get_field_assoc(Result, "branch", branch, 41);
				format(query,sizeof query,"[ACC ID: "G"%d"GR"] [BRANCH: "G"%s"GR"] [BALANCE: "G"%d"GR"]",db_get_field_assoc_int(Result,"bankid"),branch,db_get_field_assoc_int(Result,"balance"));
				MSG(playerid,GRAD2,query);
			}
			else
			{
			    MSG(playerid,GOLD,"Info:"GR" Specified player has no bank account.");
			    break;
			}
		}
		while(db_next_row(Result));
		db_free_result(Result);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;	
}
CMD:banks(playerid,params[])
{
	if(User[playerid][Logged])
	{
	    new query[124];
	    format(query,sizeof query,"SELECT * FROM banks WHERE id = %d",User[playerid][UserID]);
		new DBResult: Result = db_query(Database, query);
		do
		{
			if(db_num_rows(Result))
			{
			    new branch[41];
        		db_get_field_assoc(Result, "branch", branch, 41);
				format(query,sizeof query,"[ACC ID: "G"%d"GR"] [BRANCH: "G"%s"GR"] [BALANCE: "G"%d"GR"]",db_get_field_assoc_int(Result,"bankid"),branch,db_get_field_assoc_int(Result,"balance"));
				MSG(playerid,GRAD2,query);
			}
			else
			{
			    MSG(playerid,GOLD,"Info:"GR" You do not have a bank account. You can register one at any branch.");
			    break;
			}
		}
		while(db_next_row(Result));
		db_free_result(Result);
	}
	else return 0;
	return 1;
}
#define BANK_SIGN_INFO "Account Balance\nTransactions\nManage Account"
#define BANK_MANAGE_INFO "Set as Primary Account\nList People Connected\nChange PIN"
#define bankmessage "Type in the field below the PIN of your bank account.\nThis is what you will use to authenticate.\n\nRestrictions:\n• PIN must not be in a sequence. (e.g: 123456)\n• PIN must not contain parts of your birth date.\n• PIN must not be obvious. (e.g: 00000) "
CMD:bank(playerid,params[])
{
	if(User[playerid][Logged])
	{
	    if(User[playerid][BusinessINType] == 13)
	    {
			Dialog_Show(playerid,dBank,DIALOG_STYLE_LIST,B[User[playerid][BusinessIN]][bname],"Create a bank account from this branch\nSign in to your bank account\nTerminate your bank account","Select","Cancel");
	    }
	    else MSG(playerid,GOLD,"SERVER:"GR" You are not in a bank.");
	}
	return 1;
}

Dialog:dBank(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
		    case 0: // create
		    {
            	Dialog_Show(playerid,dBankCreate,DIALOG_STYLE_INPUT,"PIN",bankmessage,"Input","Cancel");
		    }
		    case 1: // sign
			{
			    Dialog_Show(playerid,dBankSign,DIALOG_STYLE_INPUT,"Bank > Sign In","Insert the ID of your bank account.\nYou can use (/banks) if you've don't have it.","Input","Cancel");
			}
			case 2: // terminate
			{
			    Dialog_Show(playerid,dBankDel,DIALOG_STYLE_INPUT,"Bank > Terminate Account","Insert the ID of your bank account.\nYou can use (/banks) if you've don't have it.","Input","Cancel");
			}
		}
	}
	return 1;
}
Dialog:dBankDel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
		    Dialog_Show(playerid,dBankDel,DIALOG_STYLE_INPUT,"Bank > Terminate Account","Insert the ID of your bank account.\nYou can use (/banks) if you've don't have it.","Input","Cancel");
		    MSG(playerid,GOLD,"BANK:"GR" Numeric and positive values only.");
		    return 1;
		}
		new query[160];
		User[playerid][gVar] = strval(inputtext); // holds the bank ID
		format(query,sizeof query,"SELECT id FROM banks WHERE bankid = %d",User[playerid][gVar]);
		new DBResult: Result = db_query(Database, query);
		if(User[playerid][UserID] != db_get_field_assoc_int(Result,"id"))
		{
            Dialog_Show(playerid,dBankDel,DIALOG_STYLE_INPUT,"Bank > Terminate Account","Insert the ID of your bank account.\nYou can use (/banks) if you've don't have it.","Input","Cancel");
            return MSG(playerid,GOLD,"BANK:"GR" You either eithered entered a non-existant bank account ID or this bank account does not belong to you.");
		}

		format(query,sizeof query,"Are you sure you wish to terminate this bank account?\nPlease note that anything in this account will be erased.\n{a31609}** THIS CANNOT BE UNDONE.",User[playerid][gVar]);
        Dialog_Show(playerid,dBankDelConfirm,DIALOG_STYLE_MSGBOX,"Account Termination",query,"Terminate","Cancel");
  		db_free_result(Result);
	}
	else cmd_bank(playerid,"");
	return 1;
}
Dialog:dBankDelConfirm(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new query[124];
		format(query,sizeof query,"DELETE FROM banks WHERE bankid = %d",User[playerid][gVar]);
		db_query(Database, query);

		format(query,sizeof query,"BANK:"GR" You have deleted your bank account with the ID of %d.",User[playerid][gVar]);
		MSG(playerid,GREEN,query);

		printf("[%s][%s] [bankdel] %s (id:%d) has deleted their bank account. (ADDRESS: %d)",PasteDate(),PasteTime(),User[playerid][Username],playerid,User[playerid][gVar]);
	}
	else cmd_bank(playerid,"");
	return 1;
}
Dialog:dBankSign(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
		    Dialog_Show(playerid,dBankSign,DIALOG_STYLE_INPUT,"Bank > Sign In","Insert the ID of your bank account.\nYou can use (/banks) if you don't have it.","Input","Cancel");
		    MSG(playerid,GOLD,"BANK:"GR" Numeric and positive values only.");
		    return 1;
		}
		new query[140];
		User[playerid][gVar] = strval(inputtext); // holds the bank ID
		format(query,sizeof query,"SELECT * FROM banks WHERE bankid = %d",User[playerid][gVar]);
		new DBResult: Result = db_query(Database, query);

		if(db_num_rows(Result))
		{
			Dialog_Show(playerid,dBankPIN,DIALOG_STYLE_PASSWORD,inputtext,"Insert the PIN code.","Sign in","Cancel");
		}
		else MSG(playerid,GOLD,"BANK:"GR" In-existant bank account.");
		db_free_result(Result);
	} else return cmd_bank(playerid,"");
	return 1;
}
Dialog:dBankPIN(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
		    Dialog_Show(playerid,dBankCreate,DIALOG_STYLE_INPUT,"Bank > Sign In","Insert the ID of your bank account.\nYou can use (/banks) if you don't have it.","Input","Cancel");
		    MSG(playerid,GOLD,"BANK:"GR" Numeric values only.");
		    return 1;
		}
		/*if(strlen(inputtext) < 4)
		{
		    Dialog_Show(playerid,dBankPIN,DIALOG_STYLE_INPUT,"Bank > Sign In > PIN",,"Input","Cancel");
		    MSG(playerid,GOLD,"BANK:"GR" Your PIN code must be greater than four.");
		    return 1;
		}*/

		new query[140];
		format(query,sizeof query,"SELECT * FROM banks WHERE bankid = %d",User[playerid][gVar]);
		new DBResult: Result = db_query(Database, query);
        new real_pin = db_get_field_assoc_int(Result,"pin");
        new branch[40];
        db_get_field_assoc(Result, "branch",branch, 40);
        new bankid = db_get_field_assoc_int(Result,"bankid");
        new pin_in = strval(inputtext);

		if(real_pin == pin_in)
		{
		    MSG(playerid,GREEN,"BANK: You have successfully signed into your bank account!");
		    new header[70];
		    format(header,sizeof header,"%s "G"(Bank Account: %d)"GR"",branch,bankid);
			SetPVarInt(playerid,"BankID",bankid);
			SetPVarString(playerid, "Branch", branch);
		    Dialog_Show(playerid,dBankSigned,DIALOG_STYLE_LIST,header,BANK_SIGN_INFO,"Select","Sign out");
		}
		else
		{
		    MSG(playerid,GOLD,"ERROR:"GR" Incorrect PIN!");
		}
		db_free_result(Result);
	}
	return 1;
}
Dialog:dBankSigned(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
				new query[140];
				format(query,sizeof query,"SELECT balance FROM banks WHERE bankid = %d",User[playerid][gVar]);
				new DBResult: Result = db_query(Database, query);
		        new balance = db_get_field_assoc_int(Result,"balance");
				format(query,sizeof query,"Balance:"G" $%d",balance);
				MSG(playerid,GRAD2,query);
				GetPVarString(playerid, "Branch", large_string, 40);
				format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
		        Dialog_Show(playerid,dBankSigned,DIALOG_STYLE_LIST,large_string,BANK_SIGN_INFO,"Select","Sign out");
		        db_free_result(Result);
	        }
			case 1:
			{
				GetPVarString(playerid, "Branch", large_string, 40);
				format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
				Dialog_Show(playerid,dBankTrans,DIALOG_STYLE_LIST,large_string,"Wire-Transfer\nWithdraw\nDeposit","Select","Back");
			}
			case 2: // manage account
			{
				GetPVarString(playerid, "Branch", large_string, 40);
				format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
				Dialog_Show(playerid,dBankManage,DIALOG_STYLE_LIST,large_string,BANK_MANAGE_INFO,"Select","Back");
			}
	    }
	}
	return 1;
}
Dialog:dBankManage(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{	
			case 0:
			{
				GetPVarString(playerid, "Branch", large_string, 40);
				format(large_string,sizeof large_string,"%s "G"(Bank Account: %d) -> MANAGE ACCOUNT -> PRIMARY ACCOUNT"GR"",large_string,GetPVarInt(playerid,"BankID"));
				Dialog_Show(playerid,dBankMakePrimary,DIALOG_STYLE_MSGBOX,large_string,
				"What is a Primary Account?\nA primary account is a bank account that all public transactions are going to be taken from.\nSetting this bank account as your primary account means that house, business, property taxes-\n-and rental will be taken directly from this account and not other bank accounts should you have any."
				,"Set","Back");
			}
			case 1:
			{
				new branch[40];
				GetPVarString(playerid, "Branch", branch, 40);
				new id = GetPVarInt(playerid,"BankID");
				new string[124];
				format(string,sizeof string,"%s "G"(Bank Account: %d) -> MANAGE ACCOUNT -> LIST"GR"",branch,id);
				format(large_string,sizeof large_string,"SELECT username FROM users WHERE bprimary = %d",id);
				new DBResult: Result = db_query(Database, large_string);
				new count = 1;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						new username[MAX_PLAYER_NAME];
						db_get_field_assoc(Result,"username", username, MAX_PLAYER_NAME);
						if(large_string[0] == EOS)
						{
							format(large_string,sizeof large_string,"This list shows the people who have this bank account as their 'Primary Account':\n\n%d. %s\n",count, username);
						}
						else
						{
							format(large_string,sizeof large_string,"%s%d. %s\n",large_string,count,username);
						}
						count++;
					}
					else
					{
						Dialog_Show(playerid,dBankNoList,DIALOG_STYLE_MSGBOX,string,"This list shows the people who have this bank account as their 'Primary Account':\n\nNone","Close","");	
						return db_free_result(Result);				
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);	
				Dialog_Show(playerid,dBankList,DIALOG_STYLE_MSGBOX, string, large_string, "Close", "");					
			}
			case 2: // change pin
			{
				Dialog_Show(playerid,dBankChangePIN,DIALOG_STYLE_INPUT,"PIN",bankmessage,"Input","Cancel");
			}
		}
	}
	else
	{
		GetPVarString(playerid, "Branch", large_string, 40);
		format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
		Dialog_Show(playerid,dBankSigned,DIALOG_STYLE_LIST,large_string,BANK_SIGN_INFO,"Select","Sign out");	
	} 
	return 1;
}
Dialog:dBankChangePIN(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
		    Dialog_Show(playerid,dBankChangePIN,DIALOG_STYLE_INPUT,"PIN",bankmessage,"Input","Cancel");
		    MSG(playerid,GOLD,"BANK:"GR" Numeric values only.");
		    return 1;
		}
		if(strlen(inputtext) < 4 || strlen(inputtext) > 20)
		{
		    Dialog_Show(playerid,dBankChangePIN,DIALOG_STYLE_INPUT,"PIN",bankmessage,"Input","Cancel");
		    MSG(playerid,GOLD,"BANK:"GR" Your PIN code must be greater than four and no more than twenty digits.");
		    return 1;
		}
		new bankid = GetPVarInt(playerid,"BankID");
		format(large_string,sizeof large_string,"SELECT id FROM banks WHERE bankid = %d",bankid);
		new DBResult: Result = db_query(Database, large_string);
		new id = db_get_field_assoc_int(Result,"id");
		db_free_result(Result);
		if(User[playerid][UserID] != id)
		{
			MSG(playerid,GOLD,"ERROR:"GR" You do not have permission to change the PIN code.");
			GetPVarString(playerid, "Branch", large_string, 40);
			format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
			return Dialog_Show(playerid,dBankSigned,DIALOG_STYLE_LIST,large_string,BANK_SIGN_INFO,"Select","Sign out");			
		}
		new pin = strval(inputtext);
		MSG(playerid,GREEN,"BANK:"GR" You have changed your personal identification number.");
		format(large_string,sizeof large_string,"BANK:"GR" If you lose the PIN code that will deny you access to your bank account. (PIN: %d)",pin);
		MSG(playerid,GREEN,large_string);

		format(large_string,sizeof large_string,"UPDATE banks SET pin = %d WHERE bankid = %d"
		,pin,bankid);

		db_query(Database, large_string);
	}
	else cmd_bank(playerid,"");
	return 1;
}

Dialog:dBankMakePrimary(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		GetPVarString(playerid, "Branch", large_string, 40);
		new id = GetPVarInt(playerid,"BankID");
		format(large_string,sizeof large_string,"Info:"GR" You have set the specified bank account as your primary account. "G"(BRANCH: %s; BANK ADDRESS: %d)",large_string,id);
		MSG(playerid,GREEN,large_string);
		User[playerid][PrimaryAccount] = id;
		format(large_string,sizeof large_string,"UPDATE users SET bprimary = %d WHERE userid = %d",id,User[playerid][UserID]);
		db_query(Database, large_string);
	}
	else
	{
		GetPVarString(playerid, "Branch", large_string, 40);
		format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
		Dialog_Show(playerid,dBankManage,DIALOG_STYLE_LIST,large_string,BANK_MANAGE_INFO,"Select","Back");
	} 
}
Dialog:dBankTrans(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				Dialog_Show(playerid,dBankWire,DIALOG_STYLE_INPUT,"Withdraw","Insert the bank address you wish to transfer money to:","Input","Back");
			}
			case 1:
			{
				Dialog_Show(playerid,dBankWithdraw,DIALOG_STYLE_INPUT,"Withdraw","Insert the amount of money you would like to withdraw:","Input","Back");
			}
			case 2:
			{
				
				Dialog_Show(playerid,dBankDeposit,DIALOG_STYLE_INPUT,"Deposit","Insert the amount of money you would like to deposit:","Input","Back");
			}
		}
	}
	else
	{
		GetPVarString(playerid, "Branch", large_string, 40);
		format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
		Dialog_Show(playerid,dBankSigned,DIALOG_STYLE_LIST,large_string,BANK_SIGN_INFO,"Select","Sign out");	
	} 
}
Dialog:dBankWire(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
			GetPVarString(playerid, "Branch", large_string, 40);
			format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
			Dialog_Show(playerid,dBankTrans,DIALOG_STYLE_LIST,large_string,"Wire-Transfer\nWithdraw\nDeposit","Select","Back");
		    MSG(playerid,GOLD,"BANK:"GR" Invalid input.");
		    return 1;
		}
		new address = strval(inputtext);
		if(address < 1) 
		{
			GetPVarString(playerid, "Branch", large_string, 40);
			format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
			Dialog_Show(playerid,dBankTrans,DIALOG_STYLE_LIST,large_string,"Wire-Transfer\nWithdraw\nDeposit","Select","Back");
		    MSG(playerid,GOLD,"BANK:"GR" Invalid input.");
		    return 1;			
		}
		format(large_string,sizeof large_string,"SELECT balance FROM banks WHERE bankid = %d",address);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
			Dialog_Show(playerid,dBankWireMoney,DIALOG_STYLE_INPUT,"Withdraw","Insert the amount of money you wish to transfer:","Input","Back");
			User[playerid][gVar] = address;
		}
		else
		{
			GetPVarString(playerid, "Branch", large_string, 40);
			format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
			Dialog_Show(playerid,dBankTrans,DIALOG_STYLE_LIST,large_string,"Wire-Transfer\nWithdraw\nDeposit","Select","Back");
		    MSG(playerid,GOLD,"BANK:"GR" Invalid bank address specified.");
		    return 1;			
		}
		db_free_result(Result);
	}
	else
	{
		GetPVarString(playerid, "Branch", large_string, 40);
		format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
		Dialog_Show(playerid,dBankSigned,DIALOG_STYLE_LIST,large_string,BANK_SIGN_INFO,"Select","Sign out");	
	} 
	return 1;
}
Dialog:dBankWireMoney(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
			GetPVarString(playerid, "Branch", large_string, 40);
			format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
			Dialog_Show(playerid,dBankTrans,DIALOG_STYLE_LIST,large_string,"Wire-Transfer\nWithdraw\nDeposit","Select","Back");
		    MSG(playerid,GOLD,"BANK:"GR" Invalid input.");
		    return 1;
		}
		new money = strval(inputtext);
		if(money < 1) 
		{
			GetPVarString(playerid, "Branch", large_string, 40);
			format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
			Dialog_Show(playerid,dBankTrans,DIALOG_STYLE_LIST,large_string,"Wire-Transfer\nWithdraw\nDeposit","Select","Back");
		    MSG(playerid,GOLD,"BANK:"GR" Invalid input.");
		    return 1;
		}
		new bankid = GetPVarInt(playerid,"BankID");
		format(large_string,sizeof large_string,"SELECT balance FROM banks WHERE bankid = %d",bankid);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
			new balance = db_get_field_assoc_int(Result,"balance");
			if(balance < money)
			{
				GetPVarString(playerid, "Branch", large_string, 40);
				format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
				Dialog_Show(playerid,dBankTrans,DIALOG_STYLE_LIST,large_string,"Wire-Transfer\nWithdraw\nDeposit","Select","Back");
				MSG(playerid,GOLD,"BANK:"GR" You don't have this much in your account balance.");
				db_free_result(Result);
				return 1;
			}
			format(large_string,sizeof large_string,"UPDATE banks SET balance = balance+%d WHERE bankid = %d",money,User[playerid][gVar]);
			db_query(Database, large_string);
			format(large_string,sizeof large_string,"UPDATE banks SET balance = balance-%d WHERE bankid = %d",money,bankid);
			db_query(Database, large_string);
			format(large_string,sizeof large_string,"Bank: You have successfully wire-transfered "G"$%d"GR" to the bank address: %d",money,User[playerid][gVar]);
			MSG(playerid,GRAD2,large_string);
			db_free_result(Result);
		}
		else MSG(playerid,GOLD,"ERROR:"GR" An error has occurred.");
	}
	else
	{
		GetPVarString(playerid, "Branch", large_string, 40);
		format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
		Dialog_Show(playerid,dBankSigned,DIALOG_STYLE_LIST,large_string,BANK_SIGN_INFO,"Select","Sign out");	
	} 
	return 1;
}
Dialog:dBankWithdraw(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
		    Dialog_Show(playerid,dBankWithdraw,DIALOG_STYLE_INPUT,"Withdraw","Insert the amount of money you would like to withdraw:","Input","Back");
		    MSG(playerid,GOLD,"BANK:"GR" Numeric values only.");
		    return 1;
		}
		new cash = strval(inputtext);
		if(cash < 1)
		{
		    Dialog_Show(playerid,dBankWithdraw,DIALOG_STYLE_INPUT,"Withdraw","Insert the amount of money you would like to withdraw:","Input","Back");
		    MSG(playerid,GOLD,"BANK:"GR" Numeric/positive values only.");
		    return 1;
		}
		new query[150];
		format(query,sizeof query,"SELECT balance FROM banks WHERE bankid = %d",User[playerid][gVar]);
		new DBResult: Result = db_query(Database, query);
  		new balance = db_get_field_assoc_int(Result,"balance");
  		db_free_result(Result);


		if(balance < cash)
		{
		    Dialog_Show(playerid,dBankWithdraw,DIALOG_STYLE_INPUT,"Withdraw","Insert the amount you would like to withdraw:","Input","Back");
		    MSG(playerid,GOLD,"BANK:"GR" You don't have this much.");
		    return 1;
		}
		new oldbalance = balance;
  		balance -= cash;
		GiveMoney(playerid,cash);

  		format(query,sizeof query,"UPDATE banks SET balance = %d WHERE bankid = %d",balance,User[playerid][gVar]);
  		db_query(Database, query);

		format(query,sizeof query,"Bank: You have withdrawn "G"$%d"GR" from your bank account. (Bank Account ID: %d; Old Balance: %d; New Balance: %d)",
		cash,User[playerid][gVar],oldbalance,balance);
		MSG(playerid,GRAD2,query);

		printf("[%s][%s] [bankwithdraw] %s (id:%d) has taken $%d from their bank account. (Bank Account ID: %d; Old Balance: %d; New Balance: %d)",
		PasteDate(),PasteTime(),User[playerid][Username],playerid,cash,User[playerid][gVar],oldbalance,balance);

		GetPVarString(playerid, "Branch", large_string, 40);
		format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
		Dialog_Show(playerid,dBankSigned,DIALOG_STYLE_LIST,large_string,BANK_SIGN_INFO,"Select","Sign out");
	}
	else 
	{
		GetPVarString(playerid, "Branch", large_string, 40);
		format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
		Dialog_Show(playerid,dBankTrans,DIALOG_STYLE_LIST,large_string,"Wire-Transfer\nWithdraw\nDeposit","Select","Back");
	}
	return 1;
}
Dialog:dBankDeposit(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
		    Dialog_Show(playerid,dBankDeposit,DIALOG_STYLE_INPUT,"Deposit","Insert the amount you would like to deposit:","Input","Back");
		    MSG(playerid,GOLD,"BANK:"GR" Numeric values only.");
		    return 1;
		}
		new cash = strval(inputtext);
		if(cash < 1)
		{
		    Dialog_Show(playerid,dBankDeposit,DIALOG_STYLE_INPUT,"Deposit","Insert the amount you would like to deposit:","Input","Back");
		    MSG(playerid,GOLD,"BANK:"GR" Numeric/positive values only.");
		    return 1;
		}
		if(User[playerid][uMoney] < cash)
		{
		    Dialog_Show(playerid,dBankDeposit,DIALOG_STYLE_INPUT,"Deposit","Insert the amount you would like to deposit:","Input","Back");
		    MSG(playerid,GOLD,"BANK:"GR" You don't have this much.");
		    return 1;
		}
		GiveMoney(playerid,-cash);
		new query[150];
		format(query,sizeof query,"SELECT balance FROM banks WHERE bankid = %d",User[playerid][gVar]);
		new DBResult: Result = db_query(Database, query);
  		new balance = db_get_field_assoc_int(Result,"balance");
  		new oldbalance = balance;
  		balance += cash;
  		db_free_result(Result);

  		format(query,sizeof query,"UPDATE banks SET balance = %d WHERE bankid = %d",balance,User[playerid][gVar]);
  		db_query(Database, query);

		format(query,sizeof query,"Bank: You have deposited "G"$%d"GR" into your bank account. (Bank Account ID: %d; Old Balance: %d; New Balance: %d)",
		cash,User[playerid][gVar],oldbalance,balance);
		MSG(playerid,GRAD2,query);

		printf("[%s][%s] [bankdeposit] %s (id:%d) has put $%d in their bank account. (Bank Account ID: %d; Old Balance: %d; New Balance: %d)",
		PasteDate(),PasteTime(),User[playerid][Username],playerid,cash,User[playerid][gVar],oldbalance,balance);

		GetPVarString(playerid, "Branch", large_string, 40);
		format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
		Dialog_Show(playerid,dBankSigned,DIALOG_STYLE_LIST,large_string,BANK_SIGN_INFO,"Select","Sign out");
	}
	else
	{
		GetPVarString(playerid, "Branch", large_string, 40);
		format(large_string,sizeof large_string,"%s "G"(Bank Account: %d)"GR"",large_string,GetPVarInt(playerid,"BankID"));
		Dialog_Show(playerid,dBankTrans,DIALOG_STYLE_LIST,large_string,"Wire-Transfer\nWithdraw\nDeposit","Select","Back");
	}
	return 1;
}
Dialog:dBankCreate(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
		    Dialog_Show(playerid,dBankCreate,DIALOG_STYLE_INPUT,"PIN",bankmessage,"Input","Cancel");
		    MSG(playerid,GOLD,"BANK:"GR" Numeric values only.");
		    return 1;
		}
		if(strlen(inputtext) < 4 || strlen(inputtext) > 20)
		{
		    Dialog_Show(playerid,dBankCreate,DIALOG_STYLE_INPUT,"PIN",bankmessage,"Input","Cancel");
		    MSG(playerid,GOLD,"BANK:"GR" Your PIN code must be greater than four and no more than twenty digits.");
		    return 1;
		}
		format(large_string,sizeof large_string,"SELECT 1 FROM banks WHERE id = %d",User[playerid][UserID]);
		new DBResult: Result = db_query(Database, large_string);
		new Float:accs = db_num_rows(Result);
		if(isnull(User[playerid][donator]))
		{
			if(accs > User[playerid][Level]/10)
			{
				return MSG(playerid,GOLD,"ERROR:"GR" You have reached the maximum amount of bank accounts.");
			}
		}
		else
		{
			if(accs > User[playerid][Level]/5)
			{
				return MSG(playerid,GOLD,"ERROR:"GR" You have reached the maximum amount of bank accounts.");
			}
		}
		db_free_result(Result);
		new pin = strval(inputtext);
		/*SELECT MAX(column_name)
FROM table_name
WHERE condition; 
SELECT * FROM Customers
ORDER BY Country DESC; */
		format(large_string,sizeof large_string,"SELECT bankid FROM banks ORDER BY bankid DESC LIMIT 1");
		Result = db_query(Database, large_string);
		new xmax = db_get_field_assoc_int(Result, "bankid");
		db_free_result(Result);
		printf("MAX: %d",xmax);
		new bankid = 1 + xmax;
		new query[140];
		MSG(playerid,GREEN,"BANK:"GR" You have created a bank account, make sure you memorize the PIN code.");
		format(query,sizeof query,"BANK:"GR" If you lose the PIN code that will deny you access to your bank account. (PIN: %d)",pin);
		MSG(playerid,GREEN,query);
		format(query,sizeof query,"BANK:"GR" Your bank account address is %d. Use (/banks) to bring the list of your bank accounts.",bankid);
		MSG(playerid,GREEN,query);

		format(query,sizeof query,"INSERT INTO banks (id,bankid,branch,branchid,pin,type) VALUES (%d,%d,'%s',%d,%d,1)"
		,User[playerid][UserID],bankid,B[User[playerid][BusinessIN]][bname],User[playerid][BusinessIN],pin);

		db_query(Database, query);
	}
	else cmd_bank(playerid,"");
	return 1;
}
new bloodwait[MAX_PLAYERS];
CMD:bp(playerid, params[]) 
	return cmd_bloodpack(playerid, params);
CMD:bloodpack(playerid,params[])
{
	if(User[playerid][Logged])
	{
		if(gettime() < bloodwait[playerid])
			return MSG(playerid, GOLD, "Info:"GR" You can drink one blood pack every five seconds.");
		new itemid = FindPlayerItem_Name(playerid, "Blood Pack");
        if(UserItem[playerid][itemid][Value] < 1)
            return MSG(playerid,GOLD,"ERROR:"GR" You don't have a Blood Pack.");
		if(User[playerid][Userrace] == 1)
		{
			cmd_ame(playerid, "drinks a Blood Pack.");
			GameTextForPlayer(playerid, "+2 Blood Points", 2500, 1);
			new bloodpool = GetPVarInt(playerid, "BloodPool");
			new maxb = GetMaxBloodPool(playerid);
			if(bloodpool >= maxb) return MSG(playerid, GOLD, "Info:"GR" Your Blood Pool is full.");
			if(bloodpool+2 > maxb)
				UpdateTrait(playerid, "BloodPool", maxb);
			else UpdateTrait(playerid, "BloodPool", bloodpool+2);
			
		}
		else
		{
			cmd_ame(playerid, "vomits.");
			gDecreaseHP(playerid, 10);
		}
		UpdateItem(playerid, itemid, 24, "Blood Pack", -1, 100, true);
		//UpdateItem(playerid, id, UserItem[playerid][id][Item], UserItem[playerid][id][ItemName], -1);
		
		bloodwait[playerid] = gettime()+5;
		return 1;
	}
	return 0;
}
#define UNDERGROUND_SHOP "Blood Pack ($85)"
CMD:buy(playerid,params[])
{
	if(User[playerid][shapeshift] > 1)
		return MSG(playerid, GOLD, "ERROR:"GR" You cannot buy anything while shapeshifted.");
    new header[44];
    format(header,sizeof header,"%s",B[User[playerid][BusinessIN]][bname]);
	switch(User[playerid][BusinessINType])
	{
	    case 0: MSG(playerid,GOLD,"ERROR:"GR" You are not inside a business.");
	    case 1: // Clothes store
	    {
     		return Dialog_Show(playerid,dClothesStore,DIALOG_STYLE_LIST,header,"Clothes ($50)\nAttachments ($25)\nMask ($250)", "Select", "Cancel");
	    }
	    case 2: // Hardware
	    {
	        return Dialog_Show(playerid,dHardwareStore,DIALOG_STYLE_LIST,header,"Vehicle Part ($2)\nScrewdriver ($50)\nBlowtorch ($75)\nVehicle Paint ($150)\nWrench ($60)\nToolkit ($200)\nGPS ($300)\nMP3 Player ($250)\nStereo ($150)\nRadio ($200)", "Select", "Cancel");
	    }
	    case 3: // Dealership
	    {
	        large_string = "Faggio ($1,000)\nSanchez ($15,000)\nQuad ($12,000)\nBF-400 ($20,000)\nPCJ-600 ($25,000)\nFCR-900 ($28,000)\nFreeway ($15,000)\nWayfarer ($14,000)\nBMX ($500)\nBicycle ($250)\nMountain Bike ($500)";
	        return Dialog_Show(playerid,dDealershipMotor,DIALOG_STYLE_LIST,header,large_string,"Select","Cancel");
	    }
	    case 4: // General store
	    {
	        return Dialog_Show(playerid,dGeneralStore,DIALOG_STYLE_LIST,header
			,"Water ($5)\nCigarettes ($5)\nFruit ($5)\nSprunk ($5)\nFuel Canister ($250)\nRope ($100)\nBlindfold ($70)\nSoda ($3)\nSnack ($3)\nAlcoholic Beverage ($7)\nPack of Cards ($10)\nFishing Rod ($50)\nBait ($2)",
			 "Select", "Cancel");
	    }
	    case 5:
	    {
	        return MSG(playerid,GOLD,"Info:"GR" You cannot buy anything from a roleplay business.");
	    }
	    case 6:
	    {
	        return MSG(playerid,GOLD,"Info:"GR" You cannot buy anything from an employment center");
	    }
	    case 7:
	    {
	        large_string = "Pony ($15,000)\nMule ($12,000)\nRumpo ($12,000)\nFlatbed ($15,000)\nYankee ($14,000)\nBurrito ($18,000)\nBoxville ($16,000)\nBenson ($15,000)\nTowtruck ($12,000)\nSadler ($7,500)\nYosemite ($18,000)\nWalton ($8,000)\nBobcat ($10,000)";
	        return Dialog_Show(playerid,dDealershipIndust,DIALOG_STYLE_LIST,header,large_string,"Select","Cancel");
	    }
	    case 8:
	    {
	        large_string = "Leviathan ($60,000)\nSparrow ($70,000)\nMaverick ($85,000)\nBeagle ($85,000)\nShamal ($100,000)\nNevada ($95,000)\nRaindance ($90,000)\nDodo ($65,000)";
	        return Dialog_Show(playerid,dDealershipAir,DIALOG_STYLE_LIST,header,large_string,"Select","Cancel");
	    }
	    case 9:
	    {
	        large_string = "Squallo ($50,000)\nSpeeder ($55,000)\nReefer ($20,000)\nTropic ($85,000)\nDinghy ($6,000)\nMarquis ($50,000)";
            return Dialog_Show(playerid,dDealershipSea,DIALOG_STYLE_LIST,header,large_string,"Select","Cancel");
		}
		case 10:
		{
		    large_string = "Landstalker ($10,000)\nBravura ($8,000)\nPerennial ($6000)\nSentinel ($15,000)\nManana ($8,000)\nVoodoo ($11,000)\nMoonbeam ($7,500)\nEsperanto ($11,000)\nWashington ($14,000)\nPremier ($16,000)\nPrevion ($8,000)\nStallion ($12,000)\nAdmiral ($15,000)\nSolair ($12,000)\nGelndale ($11,000)\nOceanic ($9,000)";
			strcat(large_string, "\nHermes ($8,000)\nSabre ($10,000)\nRegina ($8,000)\nCamper ($14,500)\nRancher ($13,000)\nVirgo ($10,000)\nGreenwood ($12,000)\nBlista Compact ($5,000)\nMesa ($10,000)\nElegant $($8,000)\nNebula ($8,000)\nMajestic ($9,000)\nBuccaneer ($8,500)\nFortune ($8,500)\nCadrona ($8,000)\nWillard ($7,000)\nFeltzer ($11,000)\nRemington ($13,000)");
			strcat(large_string,"\nBlade ($9,000)\nVincent ($8,000)\nClover ($8,000)\nIntruder ($8,000)\nPrimo ($8,000)\nTampa ($6,500)\nSunrise ($8,000)\nMerit ($9,000)\nUranus ($11,000)\nStartum ($15,000)\nTahoma ($10,000)\nSavanna ($12,000)\nTornado ($11,000)\nEmperor ($10,000)\nPicador ($8,000)");
			return Dialog_Show(playerid,dDealershipCars,DIALOG_STYLE_LIST,header,large_string,"Select","Cancel");
		}
		case 11:
		{
			large_string = "ZR-350 ($22,000)\nHuntley ($25,000)\nStafford ($25,000)\nAlpha ($20,000)\nBuffalo ($28,000)\nInfernus ($50,000)\nCheetah ($36,000)\nBanshee ($32,000)\nTurismo ($45,000)\nSuper GT ($30,000)\nBullet ($40,000)\nJester ($28,000)\nFlash ($24,000)\nEuros ($23,000)\nClub ($20,000)\nPhoenix ($25,000)\nComet ($29,000)\nWindsor ($28,000)\nSultan ($30,000)\nElegy ($32,000)";
			return Dialog_Show(playerid,dDealershipSport,DIALOG_STYLE_LIST,header,large_string,"Select","Cancel");
		}
		case 14:
		{
		   return  Dialog_Show(playerid,dWeaponStore,DIALOG_STYLE_LIST,header,"Baseball Bat ($35)\nBrass Knuckles ($50)\nPepper Spray ($100)\nTaser ($500)\nKnife ($150)\nGolf Club ($20)\nHunting Rifle ($1000)\nChainsaw ($850)","Select","Cancel");
		}
		case 15:
		{
		    return Dialog_Show(playerid,dCellStore,DIALOG_STYLE_LIST,header,"Cellphone ($250)","Select","Cancel");
		}
		case 16: 
		{
			return Dialog_Show(playerid,dUndergroundStore,DIALOG_STYLE_LIST,header,UNDERGROUND_SHOP,"Select","Cancel");
		}
	}
	MSG(playerid, GOLD, "ERROR:"GR" You are not in a business that interacts with this command.");
	return 1;
}
Dialog:dUndergroundStore(playerid, response, listitem, inputtext[])
{
	if(!response)	return 1;
    new header[44];
    format(header,sizeof header,"%s",B[User[playerid][BusinessIN]][bname]);
	switch(listitem)
	{
		case 0: Dialog_Show(playerid,dUndergroundStoreBPB,DIALOG_STYLE_INPUT,"Blood Pack","Please insert the amount of Blood Pack(s) you would like to purchase in the field below.","Buy","Back");
	}
	return 1;
}

Dialog:dUndergroundStoreBPB(playerid, response, listitem, inputtext[])
{
	if(!response) return cmd_buy(playerid,"");
    new header[44];
    format(header,sizeof header,"%s",B[User[playerid][BusinessIN]][bname]);
	if(!IsNumeric(inputtext))
	{
		MSG(playerid,GOLD,"ERROR:"GR" Please insert a numeric and positive value.");
		Dialog_Show(playerid,dUndergroundStoreBPB,DIALOG_STYLE_INPUT,"Blood Pack","Please insert the amount of Blood Pack(s) you would like to purchase in the field below.","Buy","Back");
		return 0;
	}
	new amount = strval(inputtext);
	if(amount < 1)
	{
		MSG(playerid,GOLD,"ERROR:"GR" Invalid input.");
		Dialog_Show(playerid,dUndergroundStoreBPB,DIALOG_STYLE_INPUT,"Blood Pack","Please insert the amount of Blood Pack(s) you would like to purchase in the field below.","Buy","Back");
		return 0;
	}
	if(amount*85 > User[playerid][uMoney])
	{
	    MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money for this purchase.");
		Dialog_Show(playerid,dUndergroundStoreBPB,DIALOG_STYLE_INPUT,"Blood Pack","Please insert the amount of Blood Pack(s) you would like to purchase in the field below.","Buy","Back");
		return 0;
	}
	GiveMoney(playerid,-amount*85);
	new id = FindPlayerItemFree(playerid,"Blood Pack");
	printf("[bloodpack_debug] Returned Item ID: %d",id);
	UpdateItem(playerid, id, GetItemID("Blood Pack"), "Blood Pack", amount, 100, true);
	BusinessTill(User[playerid][BusinessIN], amount*85);
	SFM(playerid,GREEN,"Info:"GR" You have purchased Blood Pack (%d) for "G"$%d"GR".",amount,amount*85);
	return 1;
}
Dialog:dCellStore(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(User[playerid][uMoney] < 250)
		    return MSG(playerid,GOLD,"ERROR:"GR" Insufficient amount of money.");
        new num = 10000+random(9999);
        format(large_string,sizeof large_string,"Info:"GR" You have purchased a Cellphone with the number %d.",num);
        MSG(playerid,GREEN,large_string);
        GiveMoney(playerid,-250);
		User[playerid][phonenum] = num;
		User[playerid][togphone] = false;
		format(large_string,sizeof large_string,"UPDATE users SET num = %d,ptog = 0 WHERE userid = %d",num,User[playerid][UserID]);
		db_query(Database, large_string);
		BusinessTill(User[playerid][BusinessIN], 250);
	}
	return 1;
}
CMD:togphone(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	if(!User[playerid][phonenum]) return MSG(playerid,GOLD,"Info:"GR" You do not have a Cellphone, you can purchase one from a Cellphone Store.");
	if(User[playerid][togphone])
	{
		User[playerid][togphone] = false;
		PlayerActionMessageBubble(playerid,"turns off their cellphone.");
		format(large_string,sizeof large_string,"UPDATE users SET ptog = 0 WHERE userid = %d",User[playerid][UserID]);
	}
	else
	{
	    User[playerid][togphone] = true;
	    PlayerActionMessageBubble(playerid,"turns on their cellphone.");
		format(large_string,sizeof large_string,"UPDATE users SET ptog = 1 WHERE userid = %d",User[playerid][UserID]);
	}
	db_query(Database, large_string);
	return 1;
}
CMD:hangup(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	if(!User[playerid][phonenum]) return MSG(playerid,GOLD,"Info:"GR" You do not have a Cellphone, you can purchase one from a Cellphone Store.");
	if(!User[playerid][togphone]) return MSG(playerid,GOLD,"Info:"GR" Your Cellphone is off.");
	new id = User[playerid][speakingto];
	if(User[playerid][calling] > -1) id = User[playerid][calling];
	if(id > -1)
	{
		new pdate[23];
		format(pdate,sizeof pdate,"[%s][%s]",PasteDate(),PasteTime());
		//MSGCOND 1 = TO PERSON
		//MSGCOND 2 = FROM PERSON
		format(large_string,sizeof large_string,"INSERT INTO phone_operation (number,pto,type,ctype,date,msgcond) VALUES (%d,%d,2,3,'%s',1)", //ctype 2 = answered
		User[id][phonenum],User[playerid][phonenum],pdate); // add in to the person who was called that he missed a call
		db_query(Database, large_string);

		format(large_string,sizeof large_string,"INSERT INTO phone_operation (number,pto,type,ctype,date,msgcond) VALUES (%d,%d,2,3,'%s',2)", //ctype 2 = answered
		User[playerid][phonenum],User[id][phonenum],pdate); // add in to the person who is calling that he missed a call
		db_query(Database, large_string);

		print("A");
		MSG(playerid,GRAD2,"*** You hung up.");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
		if(User[playerid][calling] == -1) MSG(id,GRAD2,"*** The other side hung up.");
		else
		{
			print("B");
			MSG(User[playerid][calling],GRAD2,"*** The other side hung up.");
		}
		print("C");
		User[id][dialer] = -1;
		User[id][calling] = -1;
		User[playerid][calling] = -1;
		User[playerid][dialer] = -1;
		print("D");
		User[id][speakingto] = -1;
		print("H");
		User[playerid][speakingto] = -1;
		print("K");
		//print("K");
	}
	else
	{
		MSG(playerid,GOLD,"ERROR:"GR" You are not on a call");
	}
	return 1;
}

CMD:pickup(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	if(!User[playerid][phonenum]) return MSG(playerid,GOLD,"Info:"GR" You do not have a Cellphone, you can purchase one from a Cellphone Store.");
	if(!User[playerid][togphone]) return MSG(playerid,GOLD,"Info:"GR" Your Cellphone is off.");
	if(User[playerid][calling] == -1) return MSG(playerid,GOLD,"ERROR:"GR" Your phone isn't ringing.");
	if(playerid == User[User[playerid][calling]][dialer]) return MSG(playerid,GOLD,"ERROR:"GR" You are the one dialing.");
	MSG(playerid,GRAD2,"*** You answered the call.");
	MSG(User[playerid][calling],GRAD2,"*** The other side answered.");
	User[playerid][speakingto] = User[playerid][calling];
	User[User[playerid][calling]][speakingto] = playerid;
	printf("[phone_debug] the one being called speakingto var is %d\nthe one who called speaking to var is %d\ncthe one being called calling var is %d\nthe one who called calling is %d"
	,User[playerid][speakingto],User[User[playerid][speakingto]][speakingto],User[playerid][calling],User[User[playerid][calling]][calling]);

	new pdate[23];
	format(pdate,sizeof pdate,"[%s][%s]",PasteDate(),PasteTime());

	format(large_string,sizeof large_string,"INSERT INTO phone_operation (number,pto,type,ctype,date,msgcond) VALUES (%d,%d,2,2,'%s',1)", //ctype 2 = answered
	User[User[playerid][calling]][phonenum],User[playerid][phonenum],pdate); // add in to the person who was called that he missed a call
	db_query(Database, large_string);

	format(large_string,sizeof large_string,"INSERT INTO phone_operation (number,pto,type,ctype,date,msgcond) VALUES (%d,%d,2,2,'%s',2)", //ctype 2 = answered
	User[playerid][phonenum],User[User[playerid][calling]][phonenum],pdate); // add in to the person who is calling that he missed a call
	db_query(Database, large_string);
	User[User[playerid][calling]][calling] = -1;
	User[playerid][calling] = -1;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	return 1;
}
/*
MSGCOND 1 = MSG SENT TO PERSON
MSGCOND 2 = MSG FROM PERSON
*/
CMD:sms(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	if(!User[playerid][phonenum]) return MSG(playerid,GOLD,"Info:"GR" You do not have a Cellphone, you can purchase one from a Cellphone Store.");
	if(!User[playerid][togphone]) return MSG(playerid,GOLD,"Info:"GR" Your Cellphone is off.");
	new num,msg[124];
	if(sscanf(params,"ds[124]",num,msg)) return MSG(playerid,GOLD,"SYNTAX:"GR" /sms [phone number] [message]");
	foreach(Player,i)
	{
	    if(User[i][togphone] && User[i][phonenum] == num)
	    {
			cmd_bme(i,"has received a message.");
			cmd_bme(playerid,"sends a message from their Cellphone.");
			new pdate[23];
			format(pdate,sizeof pdate,"[%s][%s]",PasteDate(),PasteTime());
			format(large_string,sizeof large_string,"[SMS] %s; From: %d",msg,User[playerid][phonenum]);
			MSG(i,YELLOW,large_string);
			format(large_string,sizeof large_string,"INSERT INTO phone_operation (number,pto,sms,type,date,msgcond) VALUES (%d,%d,'%q',1,'%s',2)",
			User[i][phonenum],User[playerid][phonenum],msg,pdate);
			db_query(Database, large_string);


			format(large_string,sizeof large_string,"[SMS] %s; To: %d",msg,num);
			MSG(playerid,YELLOW,large_string);

			format(large_string,sizeof large_string,"INSERT INTO phone_operation (number,pto,sms,type,date,msgcond) VALUES (%d,%d,'%q',1,'%s',1)",
			User[playerid][phonenum],User[i][phonenum],msg,pdate);
			db_query(Database, large_string);

			GiveMoney(playerid,-1);
			//phone (number INTEGER,pto INTEGER,msg VARCHAR(124),type TINYINT(1))
		}
	}
	return 1;
}
#define PHONE_LIST "Toggle\nContacts\nMessages\nCalls"
CMD:phone(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	if(!User[playerid][phonenum]) return MSG(playerid,GOLD,"Info:"GR" You do not have a Cellphone, you can purchase one from a Cellphone Store.");
	if(User[playerid][calling] != -1 || User[playerid][speakingto] != -1)
	{
		Dialog_Show(playerid,dPhoneCalling,DIALOG_STYLE_LIST,"Phone","Hang up","Select","Cancel");
	}
	else Dialog_Show(playerid,dPhone,DIALOG_STYLE_LIST,"Phone",PHONE_LIST,"Select","Cancel");
	return 1;
}
Dialog:dPhoneCalling(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: cmd_hangup(playerid,"");
		}
	}
	return 1;
}
Dialog:dPhone(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				cmd_togphone(playerid,"");
				cmd_phone(playerid,"");
			}
			case 1:
			{
				if(!User[playerid][togphone])
				{
					cmd_phone(playerid,"");
					return MSG(playerid,GOLD,"Info:"GR" Your Cellphone is off.");
				}
				//ShowContacts(playerid,User[playerid][phonenum]);
				Dialog_Show(playerid,dPhoneContactList,DIALOG_STYLE_LIST,"Phone","Show Contacts\nAdd Contact","Select","Cancel");
			}
			case 2:
			{
				if(!User[playerid][togphone])
				{
					cmd_phone(playerid,"");
					return MSG(playerid,GOLD,"Info:"GR" Your Cellphone is off.");
				}
				Dialog_Show(playerid,dPhoneMSG,DIALOG_STYLE_LIST,"Phone","Send a Message\nMessage Logs\nErase Logs","Select","Cancel");
			}
			case 3:
			{
				if(!User[playerid][togphone])
				{
					cmd_phone(playerid,"");
					return MSG(playerid,GOLD,"Info:"GR" Your Cellphone is off.");
				}
				Dialog_Show(playerid,dPhoneCall,DIALOG_STYLE_LIST,"Phone","Dial\nCall Logs\nErase Logs","Select","Cancel");
			}
		}
	}
	return 1;
}
Dialog:dPhoneContactShowContact(playerid, response, listitem, inputtext[])
{
	if(!response) return cmd_phone(playerid,"");
	new num[10];
	strmid(num, inputtext, strfind(inputtext, "(", true)+1, strfind(inputtext, ")", true), 100);
	User[playerid][contactselected] = strval(num);
	Dialog_Show(playerid,dContactSelect,DIALOG_STYLE_LIST,"Phone","Call Contact\nMessage Contact\nDelete Contact","Select","Cancel");
	return 1;
}
Dialog:dContactSelect(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(User[playerid][contactselected] == 0) return MSG(playerid,GOLD,"ERROR:"GR" An error has occurred!");
		if(!User[playerid][togphone]) return MSG(playerid,GOLD,"Info:"GR" Your Cellphone is off.");
		switch(listitem)
		{
			case 0:
			{
				new num[10];
				format(num,10,"%d",User[playerid][contactselected]);
				cmd_call(playerid,num);
			}
			case 1: Dialog_Show(playerid,dSMSContact,DIALOG_STYLE_INPUT,"Phone","Type in the message you to send to the specified contact:","Send","Back");
			case 2:
			{
				format(large_string,sizeof large_string,"DELETE FROM phone_general WHERE contact_number = %d AND number = %d",User[playerid][contactselected],User[playerid][phonenum]);
				db_query(Database, large_string);
				format(large_string,50,"PHONE: Contact deleted.");
				MSG(playerid,WHITE,large_string);				
			}
		}
	}
	else cmd_phone(playerid,"");
	return 1;
}
Dialog:dSMSContact(playerid, response, listitem, inputtext[])
{
	if(!response) return cmd_phone(playerid,"");
	format(large_string,150,"%d %s",User[playerid][contactselected],inputtext);
	cmd_sms(playerid,large_string);
	return 1;
}
stock ShowContacts(playerid,number)
{
	if(User[playerid][Logged])
	{
		format(large_string,sizeof large_string,"SELECT * FROM phone_general WHERE number = %d",number);
		new DBResult: Result = db_query(Database, large_string);
  		large_string[0] = EOS;
		if(db_num_rows(Result))
		{
			do
			{
					new contact[24],num;
					num = db_get_field_assoc_int(Result,"contact_number");
					db_get_field_assoc(Result,"contact",contact,24);
					format(large_string,sizeof large_string,"%s%s (%d)\n",large_string,contact,num);

			}
			while(db_next_row(Result));
			db_free_result(Result);
		}
		Dialog_Show(playerid,dPhoneContactShowContact,DIALOG_STYLE_LIST,"Phone",large_string,"Back","");
	}
}

// MSG shows between date and number for some reason vvvv
stock ShowCalls(playerid,number) // playerid is the player that is to show
{
	if(User[playerid][Logged])
	{

		format(large_string,sizeof large_string,"SELECT msgcond,pto,date,ctype FROM phone_operation WHERE number = %d AND type = 2",number);
		new DBResult: Result = db_query(Database, large_string);
		large_string[0] = EOS;
		do
		{
			if(db_num_rows(Result))
			{
			    new pdate[23],pto,cond,ccond[3];
				db_get_field_assoc(Result,"date",pdate,23);
				pto = db_get_field_assoc_int(Result,"pto");
				cond = db_get_field_assoc_int(Result,"ctype");
				switch(db_get_field_assoc_int(Result,"msgcond"))
				{
					case 1: ccond = "*";
					case 2: format(ccond,sizeof ccond,"**");
				}
				// ctype 1 = missed call; ctype 2 = answered; ctype 3 = declined
				// type 1= SMS; type 2 = CALL
				switch(cond)
				{
					case 1: format(large_string,sizeof large_string,"%s{FFFF00}*%s"D" %s Missed Call: %d\n",large_string,ccond,pdate,pto);
					case 2: format(large_string,sizeof large_string,"%s"G"*%s"D" %s Answered Call: %d\n",large_string,ccond,pdate,pto);
					case 3: format(large_string,sizeof large_string,"%s"MAR"*%s"D" %s Declined Call: %d\n",large_string,ccond,pdate,pto);
				}
			}
			else break;
		}
		while(db_next_row(Result));
		// Frees result
		db_free_result(Result);
        Dialog_Show(playerid,dPhoneMSGShow,DIALOG_STYLE_MSGBOX,"Phone",large_string,"Back","");

	}
	return 1;
}
stock ShowMessages(playerid,number)
{
	if(User[playerid][Logged])
	{

		format(large_string,sizeof large_string,"SELECT pto,date,msgcond,sms FROM phone_operation WHERE number = %d AND type = 1",number);
		new DBResult: Result = db_query(Database, large_string);
		large_string[0] = EOS;
		do
		{
			if(db_num_rows(Result))
			{
			    new themsg[124],pdate[23],pto,cond;
				cond = db_get_field_assoc_int(Result,"msgcond");
				if(cond == 1)
				{
					pto = db_get_field_assoc_int(Result,"pto");
					db_get_field_assoc(Result,"date",pdate,23);
				    db_get_field_assoc(Result,"sms",themsg,124);
					format(large_string,sizeof large_string,"%s<< %s[%d] %s\n",large_string,pdate,pto,themsg); // TO PERSON
					//printf("MSG: %s",themsg);
				}
				else if(cond == 2)
				{
					pto = db_get_field_assoc_int(Result,"pto");
					db_get_field_assoc(Result,"date",pdate,sizeof pdate);
				    db_get_field_assoc(Result,"sms",themsg,sizeof themsg);
					format(large_string,sizeof large_string,"%s>> %s[%d] %s\n",large_string,pdate,pto,themsg); // FROM PERSON
				}
			}
			else break;
		}
		while(db_next_row(Result));
		// Frees result
		db_free_result(Result);
        Dialog_Show(playerid,dPhoneMSGShow,DIALOG_STYLE_MSGBOX,"Phone",large_string,"Back","");

	}
	return 1;
}
Dialog:dPhoneMSGShow(playerid, response, listitem, inputtext[])
{
	cmd_phone(playerid,"");
	return 1;
}
strtok(const string[], &index) // modified with '('
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= '('))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > '(') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}
Dialog:dPhoneContactList(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0: ShowContacts(playerid,User[playerid][phonenum]);
	        case 1: Dialog_Show(playerid,dPhoneContactListAdd,DIALOG_STYLE_INPUT,"Phone","Insert the number of the contact you wish to add:","Select","Cancel");
	    }
	}
	else cmd_phone(playerid,"");
	return 1;
}
Dialog:dPhoneContactListAdd(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext)) return cmd_phone(playerid,"");
		User[playerid][numput] = strval(inputtext);
		format(large_string,sizeof large_string,"Type in the name you wish to label "G"%d"D" with:",User[playerid][numput]);
        Dialog_Show(playerid,dPhoneContactListAddNow,DIALOG_STYLE_INPUT,"Phone",large_string,"Send","Cancel");
	}
	else cmd_phone(playerid,"");
	return 1;
}
/*

SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;*/
Dialog:dPhoneContactListAddNow(playerid, response, listitem, inputtext[])
{
	if(response)
	{
        if(strfind(inputtext, "(", true) != -1 || strfind(inputtext, ")", true) != -1)
        {
            MSG(playerid,GOLD,"ERROR:"GR" You cannot use '(' or ')' in the contact name.");
            return cmd_phone(playerid,"");
        }
		format(large_string,sizeof large_string,"Info:"GR" You have added %s (%d) to your contacts list.",inputtext,User[playerid][numput]);
		MSG(playerid,GREEN,large_string);
		format(large_string,sizeof large_string,"SELECT pid FROM phone_general WHERE number = %d",User[playerid][phonenum]);
		new ptotal,
			pd[11],
			use = -1;
		#define MAX_CONTACTS 10 // this means 10
		new DBResult: Result = db_query(Database, large_string);
		do
		{
			if(db_num_rows(Result))
			{
			    //SFM(playerid,-1,"ptotal: %d | pd[ptotal]: %d",ptotal,pd[ptotal]);
			    if(ptotal >= MAX_CONTACTS) return MSG(playerid,GOLD,"ERROR:"GR" You don't have anymore space");
			    pd[ptotal+1] = db_get_field_assoc_int(Result, "pid");
			    // 0 = A, 1 = B, 2 = C, 3 = E, 4 = F, 5 = G, 6 = H, 7 = I, 8 = J, 9 = K [10]
			    ptotal++;
			    //SFM(playerid,-1,"pd[%d]: %d",ptotal,pd[ptotal]);
			}
			else break;
		}
		while(db_next_row(Result));
		db_free_result(Result);
		for(new i=1;i<=MAX_CONTACTS;i++)
		{
			if(pd[i]) continue;
			else
			{
			     use = i;
				 break;
			}
		}
		if(use == -1)
		    return MSG(playerid,GOLD,"ERROR:"GR" You don't have anymore space!");

		format(large_string,sizeof large_string,"INSERT INTO phone_general (pid,number,contact,contact_number) VALUES (%d,%d,'%q',%d)",use,User[playerid][phonenum],inputtext,User[playerid][numput]);
		db_query(Database, large_string);
	}
	return 1;
}


Dialog:dPhoneCall(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				Dialog_Show(playerid,dPhoneCallOptions,DIALOG_STYLE_LIST,"Phone","Dial a number","Select","Cancel");
				//Dialog_Show(playerid,dPhoneCallNow,DIALOG_STYLE_INPUT,"Phone","Type in the number you wish to call:","Call","Cancel");
			}
			case 1: ShowCalls(playerid,User[playerid][phonenum]);
			case 2:
			{
				format(large_string,sizeof large_string,"DELETE FROM phone_operation WHERE number = %d AND type = 2",User[playerid][phonenum]);
				db_query(Database, large_string);
				MSG(playerid,GREEN,"Info: Your call logs have been erased.");
				cmd_phone(playerid,"");
				cmd_bme(playerid,"erases their phone logs.");
			}

		}
	}
	else cmd_phone(playerid,"");
	return 1;
}
Dialog:dPhoneCallOptions(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid,dPhoneCallNow,DIALOG_STYLE_INPUT,"Phone","Type in the number you wish to call:","Call","Cancel");
			case 1: ShowContactsForCall(playerid,User[playerid][phonenum]);
		}
	}
	else cmd_phone(playerid,"");
	return 1;
}
Dialog:dPhoneContactCallContact(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new num[128],idx;
		num = strtok(inputtext,idx);
		cmd_call(playerid,num);
	}
	else cmd_phone(playerid,"");
	return 1;
}
stock ShowContactsForCall(playerid,number) // ^^
{
	if(User[playerid][Logged])
	{
		format(large_string,sizeof large_string,"SELECT * FROM phone_general WHERE number = %d",number);
		new DBResult: Result = db_query(Database, large_string);
  		large_string[0] = EOS;
		do
		{
			if(db_num_rows(Result))
			{
				new contact[24],num;
				num = db_get_field_assoc_int(Result,"contact_number");
				db_get_field_assoc(Result,"contact",contact,24);
    			format(large_string,sizeof large_string,"%s%s (%d)\n",large_string,contact,num);
			}
			else break;
		}
		while(db_next_row(Result));
		db_free_result(Result);
		Dialog_Show(playerid,dPhoneContactCallContact,DIALOG_STYLE_LIST,"Phone",large_string,"Back","");
	}
}
Dialog:dPhoneCallNow(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext)) return cmd_phone(playerid,"");
		//printf("inputtext %s",inputtext);
		cmd_call(playerid,inputtext);
	}
	else cmd_phone(playerid,"");
	return 1;
}
Dialog:dPhoneMSG(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid,dPhoneMSGSend,DIALOG_STYLE_INPUT,"Phone","Type in the number you wish to send the message to:","Input","Cancel");
			case 1: ShowMessages(playerid,User[playerid][phonenum]);
			case 2:
			{
				format(large_string,sizeof large_string,"DELETE FROM phone_operation WHERE number = %d AND type = 1",User[playerid][phonenum]);
				db_query(Database, large_string);
				MSG(playerid,GREEN,"Info: Your message logs have been erased.");
				cmd_phone(playerid,"");
				cmd_bme(playerid,"erases their phone logs.");
			}
		}
	}
	else cmd_phone(playerid,"");
	return 1;
}
Dialog:dPhoneMSGSend(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext)) return cmd_phone(playerid,"");
		User[playerid][numput] = strval(inputtext);
		format(large_string,sizeof large_string,"Type in the message you wish to send to "G"%d"D":",User[playerid][numput]);
        Dialog_Show(playerid,dPhoneMSGSendNow,DIALOG_STYLE_INPUT,"Phone",large_string,"Send","Cancel");
	}
	return 1;
}
Dialog:dPhoneMSGSendNow(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		format(large_string,sizeof large_string,"%d %s",User[playerid][numput],inputtext);
		cmd_sms(playerid,large_string);
		cmd_phone(playerid,"");
	}
	return 1;
}
stock GetDrugName(drugtype)
{
	new drug[24];
	switch(drugtype)
	{
	 	case 1: drug = "Marijuana";
	 	case 2: drug = "Heroin";
	 	case 3: drug = "Cocaine";
		case 4: drug = "Ecstasy";
		case 5: drug = "Methamphetamine";
		case 6: drug = "Plant";
	}
	return drug;
}

public GivePlayerDrug(playerid, drug[24], purity, amount)
{
	if(User[playerid][Logged])
	{
	    new type = 0;
	    if(!strcmp(drug,"Marijuana",true)) type = 1;
	    if(!strcmp(drug,"Heroin",true)) type = 2;
	    if(!strcmp(drug,"Cocaine",true)) type = 3;
	    if(!strcmp(drug,"Ecstasy",true)) type = 4;
	    if(!strcmp(drug,"Meth",true) || !strcmp(drug,"methamphetamine",true)) type = 5;
		if(!strcmp(drug,"Plant",true)) type = 6,purity = 25;
    	format(large_string,sizeof large_string,"SELECT 1 FROM drugs WHERE drug = %d AND pure = %d AND userid = %d",type,purity,User[playerid][UserID]);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
  			format(large_string,sizeof large_string,"UPDATE drugs SET amount = amount+%d WHERE userid = %d AND drug = %d AND pure = %d",amount,User[playerid][UserID],type,purity);
		    db_query(Database, large_string);
		}
		else
		{
			
		    format(large_string,sizeof large_string,"INSERT INTO drugs (userid,drug,amount,pure) VALUES (%d,%d,%d,%d)",User[playerid][UserID],type,amount,purity);
		    db_query(Database, large_string);
		}
		db_free_result(Result);
		printf("[%s][%s] %s (Amount: %d) (Purity: %d)  spawned to %s (id: %d)",PasteDate(),PasteTime(),drug,amount,purity,User[playerid][Username],playerid);
	}
}
CMD:passdrug(playerid,params[])
{
	new target,
		drug[24],
		amount,
		pure[7];
	if(sscanf(params,"us[24]ds[7]",target,drug,amount,pure)) return MSG(playerid,GOLD,"SYNTAX:"GR" /passdrug [playerid/PartOfName] [drug] [amount] [pureness (low/medium/high)]");
	if(!User[target][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Specified player isn't logged on.");
	if(playerid == target) return MSG(playerid,GOLD,"ERROR:"GR" You cannot use this command on yourself.");
	new Float:x,Float:y,Float:z;
	GetPlayerPos(target,x,y,z);
	if(!IsPlayerInRangeOfPoint(playerid,3,x,y,z)) {
		return MSG(playerid, GOLD, "ERROR:"GR" You are not in range of the specified player.");
	}
	if(amount < 1) return MSG(playerid,GOLD,"ERROR:"GR" You don't have the specified amount.");
	new type;
	if(!strcmp(drug,"Marijuana",true)) type = 1;
	if(!strcmp(drug,"Heroin",true)) type = 2;
	if(!strcmp(drug,"Cocaine",true)) type = 3;
	if(!strcmp(drug,"Ecstasy",true)) type = 4;
	if(!strcmp(drug,"Meth",true) || !strcmp(drug,"methamphetamine",true)) type = 5;
	if(!strcmp(drug,"Plant",true)) type = 6;
	new pureness = 25;
	if(!strcmp(pure,"Medium",true)) pureness = 50;
	if(!strcmp(pure,"High",true)) pureness = 75;
	if(GetPlayerDrug(playerid, type, pureness) < amount) return MSG(playerid,GOLD,"Info:"GR" You don't have the specified drug.");
	GivePlayerDrug(target, drug, pureness, amount);
	TakePlayerDrug(playerid, drug, pureness, amount);

	format(large_string,sizeof large_string,"has passed %d %s to %s.",amount, drug, User[target][pUsername]);
	PlayerActionMessageBubble(playerid, large_string);
	format(large_string,sizeof large_string,"has received %d %s from %s.",amount,drug,sendernameEx(playerid));
	PlayerActionMessageBubble(target, large_string);
	return 1;

}

public TakePlayerDrug(playerid, drug[24], purity, amount)
{
	if(User[playerid][Logged])
	{
	    new type = 0;
	    if(!strcmp(drug,"Marijuana",true)) type = 1;
	    if(!strcmp(drug,"Heroin",true)) type = 2;
	    if(!strcmp(drug,"Cocaine",true)) type = 3;
	    if(!strcmp(drug,"Ecstasy",true)) type = 4;
	    if(!strcmp(drug,"Meth",true) || !strcmp(drug,"methamphetamine",true)) type = 5;
		if(!strcmp(drug,"Plant",true)) type = 6;
    	format(large_string,sizeof large_string,"SELECT amount FROM drugs WHERE drug = %d AND pure = %d AND userid = %d",type,purity,User[playerid][UserID]);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
		    new am = db_get_field_assoc_int(Result,"amount");
			am -= amount;
			if(am > 0)
			{
	  			format(large_string,sizeof large_string,"UPDATE drugs SET amount = %d WHERE userid = %d AND drug = %d AND pure = %d",am,User[playerid][UserID],type,purity);

		    }
		    else
		    {
				format(large_string,sizeof large_string,"DELETE FROM drugs WHERE userid = %d AND drug = %d AND pure = %d",User[playerid][UserID],type, purity);
		    }
		    db_query(Database, large_string);
		}
		db_free_result(Result);
		printf("[%s][%s] %s (Amount: %d) (Purity: %d) taken from %s (id: %d)",PasteDate(),PasteTime(),drug,amount,purity,User[playerid][Username],playerid);
	}
}

public GetPlayerDrug(playerid, drug, purity)
{
	if(User[playerid][Logged])
	{
	    format(large_string,sizeof large_string,"SELECT amount FROM drugs WHERE userid = %d AND drug = %d AND pure = %d",User[playerid][UserID],drug, purity);
	    new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
			new amount = db_get_field_assoc_int(Result, "amount");
			db_free_result(Result);
			return amount;
		}
        db_free_result(Result);
        return 0;
	}
	return -1;
}
CMD:mydrugs(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new id = playerid;
		if(User[playerid][Useradmin] > 0)
		{
			sscanf(params,"u",id);
		}
		format(large_string,sizeof large_string,"SELECT drug,pure,amount FROM drugs WHERE userid = %d",User[id][UserID]);
		new DBResult: Result = db_query(Database, large_string);
		large_string[0] = EOS;
		new name[MAX_PLAYER_NAME + 8];
		do
		{
			if(db_num_rows(Result))
			{
				new type = db_get_field_assoc_int(Result,"drug");
				new drug[16];
				switch(type)
				{
				    case 1: drug = "Marijuana";
				    case 2: drug = "Heroin";
				    case 3: drug = "Cocaine";
					case 4: drug = "Ecstasy";
					case 5: drug = "Methamphetamine";
					case 6: drug = "Plant";
				}
				new purity = db_get_field_assoc_int(Result,"pure");
				new amount = db_get_field_assoc_int(Result,"amount");
				new pure[24];
				switch(purity)
				{
				    case 25: pure = "Low";
				    case 50: pure = "Medium";
				    case 75: pure = "High";
				    case 90: pure = "Pure";
				}

	            if(type != 6) format(large_string,sizeof large_string,"%sDrug: %s (%d); Purity: %s"D"\n",large_string,drug,amount,pure);
				else format(large_string,sizeof large_string,"%sDrug: %s (%d)\n",large_string,drug,amount,pure);
				format(name,sizeof name,"%s's Drugs",User[id][pUsername]);
			}
			else
			{
				format(name,sizeof name,"%s's Drugs",User[id][pUsername]);
                Dialog_Show(playerid,dShowDrugs,DIALOG_STYLE_MSGBOX,name,"You don't have any drugs on you.","Okay","");
                break;
			}
		}
		while(db_next_row(Result));
		Dialog_Show(playerid,dShowDrugs,DIALOG_STYLE_MSGBOX,name,large_string,"Okay","");
		db_free_result(Result);
	}
	return 1;
}

CMD:givedrug(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new target,
			drug[24],
			amount,
			pure;
		if(sscanf(params,"us[24]dd",target,drug,amount,pure)) return MSG(playerid,GOLD,"SYNTAX:"GR" /givedrug [playerid/PartOfName] [drug] [amount] [purity (25/50/75)");
		if(!User[target][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Specified player isn't logged on.");
		GivePlayerDrug(target, drug, pure, amount);
		return 1;
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:takedrug(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new target,
			drug[24],
			amount,
			pure;
		if(sscanf(params,"us[24]dd",target,drug,amount,pure)) return MSG(playerid,GOLD,"SYNTAX:"GR" /takedrug [playerid/PartOfName] [drug] [amount] [purity (25/50/75)");
		if(!User[target][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Specified player isn't logged on.");
		TakePlayerDrug(target, drug, pure, amount);

		return 1;
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}

public OnGreenFade(playerid)
{
	TextDrawHideForPlayer(playerid,gGreenScreen);
}
CMD:uproot(playerid,params[])
{
	if(User[playerid][Logged])
	{
		if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159) return Wait(playerid,"~h~You are not crouching!");
		new bool:cc = false;
		foreach(Plants, i)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2, PL[i][p_x], PL[i][p_y], PL[i][p_z]))
			{
					format(large_string,sizeof large_string,"DELETE FROM plants WHERE plant = %d",PL[i][p_id]);
					db_query(Database, large_string);
					DestroyDynamicObject(PL[i][pobjid]);
					new tmp[plants];
					PL[i] = tmp;
					Iter_SafeRemove(Plants, i, i);					
					cc = true;
					PlayerActionMessageBubble(playerid,"uproots a plant.");
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
					break;
			}
		}
		if(!cc) return MSG(playerid,GOLD,"Info:"GR" You are not in range of a plant.");
		return 1;
	}
	else return 0;	
}
CMD:dskill(playerid,params[])
{
	if(IsPlayerAdmin(playerid))
	{
		return User[playerid][drugSkill] = strval(params);
	}
	return 0;
}
#define HARVEST_TIME 3
CMD:harvestweed(playerid,params[]) // CHECK ME CHANGE ME !
{
	if(User[playerid][Logged])
	{
		if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159) return Wait(playerid,"~h~You are not crouching!");
		new bool:cc = false;
		new bool:ripe = true;
		foreach(Plants, i)
		{
				if(IsPlayerInRangeOfPoint(playerid, 2, PL[i][p_x], PL[i][p_y], PL[i][p_z]))
				{
						if(PL[i][ptime] == HARVEST_TIME)
						{
							new xp = 1+random(5);
							User[playerid][drugEXP] += xp;
						
							if(User[playerid][drugEXP] > 99 && User[playerid][drugSkill] == 1)
								User[playerid][drugSkill] = 2;
							if(User[playerid][drugEXP] > 299 && User[playerid][drugSkill] == 2)
								User[playerid][drugSkill] = 3;
							if(User[playerid][drugEXP] > 499 && User[playerid][drugSkill] == 3)
								User[playerid][drugSkill] = 4;
							if(User[playerid][drugEXP] > 799 && User[playerid][drugSkill] == 4)
								User[playerid][drugSkill] = 5;
							new grams = 15+(User[playerid][drugSkill]*2);
							new pure;
							switch(User[playerid][drugSkill])
							{
								case 1: 
								{
									switch(random(6))
									{
										case 0,1,2,3,4: pure = 25;
										case 5: pure = 50;
									}
								}
								case 2:
								{
									switch(random(6))
									{
										case 0,1,2,3: pure = 25;
										case 4,5: pure = 50;
									}
								}
								case 3:
								{
									switch(random(6))
									{
										case 0,1,2: pure = 25;
										case 3,4: pure = 50;
										case 5: pure = 75;
									}
								}
								case 4:
								{
									switch(random(6))
									{
										case 0,1: pure = 25;
										case 2,3: pure = 50;
										case 4,5: pure = 75;
									}
								}
								case 5:
								{
									switch(random(6))
									{
										case 0,1,2: pure = 50;
										case 3,4,5: pure = 75;
									}
								}
							}
							format(large_string,sizeof large_string,"UPDATE users SET drugskill = %d,drugexp = %d WHERE userid = %d",User[playerid][drugSkill],User[playerid][drugEXP],User[playerid][UserID]);
							db_query(Database, large_string);

							format(large_string,sizeof large_string,"DELETE FROM plants WHERE plant = %d",PL[i][p_id]);
							db_query(Database, large_string);
										
							ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
							cmd_bme(playerid,"harvests a plant.");
							GivePlayerDrug(playerid, "Marijuana", pure, grams);
							
							cc = true;
							printf("[plant_debug] Destroyed Plant Object ID %d",PL[i][pobjid]);
							DestroyDynamicObject(PL[i][pobjid]);
							new tmp[plants];
							PL[i] = tmp;
							Iter_SafeRemove(Plants, i, i);	
							print("fin");	
							break;
						}
						else ripe = false;
				}
		}
		if(!ripe) return MSG(playerid,GOLD,"Info:"GR" This plant isn't ripe yet.");
		if(!cc) return MSG(playerid,GOLD,"Info:"GR" You are not in range of a plant.");
		return 1;
	}
	else return 0;	
}

CMD:plantweed(playerid,params[])
{
	if(User[playerid][Logged])
	{
		if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159) return Wait(playerid,"~h~You are not crouching!");
		if(User[playerid][animation]) return MSG(playerid,GOLD,"ERROR:"GR" You cannot use this feature right now.");
		if(User[playerid][tazed] == 1) return MSG(playerid,GOLD,"ERROR:"GR" You cannot do anything while you're tazed.");		
		if(GetPlayerDrug(playerid, 6, 25) < 1) return MSG(playerid,GOLD,"ERROR:"GR" You don't have any plants.");
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid, x, y, z);
		foreach(Plants, i)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2, PL[i][p_x], PL[i][p_y], PL[i][p_z]))
				return MSG(playerid,GOLD,"ERROR:"GR" There is another plant too close to you.");
		}
		new vw = GetPlayerVirtualWorld(playerid);
		new id = Iter_Free(Plants);
		PL[id][p_id] = id;
		PL[id][p_x] = x;
		PL[id][p_y] = y;
		PL[id][p_z] = z-1.5;
		PL[id][p_vw] = vw;
		PL[id][ptype] = 6;
		PL[id][pobj] = 19473;		
		PL[id][pobjid] = CreateDynamicObject(PL[id][pobj], PL[id][p_x], PL[id][p_y], PL[id][p_z], 0.0000, 0.0000, 0.0000, PL[id][p_vw]);
		//SetDynamicObjectMaterial(PL[id][pobjid], 0, -1, "none", "none", 0xFF80F221);
		printf("Object ID %d has been occupied by a plant.",PL[id][pobjid]);
		PL[id][ptime] = 0;
 		TakePlayerDrug(playerid,"Plant",25,1);
		Iter_Add(Plants, id);
		//CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 300.0);
		new sx[10],
			sy[10],
			sz[10];
		format(sx,sizeof sx,"%f",PL[id][p_x]);
		format(sy,sizeof sx,"%f",PL[id][p_y]);
		format(sz,sizeof sx,"%f",PL[id][p_z]);
		format(large_string,sizeof large_string,"INSERT INTO plants (plant,x,y,z,vw,object,type) VALUES (%d,'%s','%s','%s',%d,%d,%d)",PL[id][p_id],sx,sy,sz,PL[id][p_vw],PL[id][pobj],PL[id][ptype]);
		db_query(Database, large_string); 
		printf("[plantweed] Plant ID %d X %f Y %f Z %f VW %d TYPE %d OBJID %d pOBJID %d",id,x,y,z,vw,PL[id][ptype],PL[id][pobj],PL[id][pobjid]);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		
	}
	else return 0;
	return 1;
}
stock LoadPlants()
{
	new field[40];
    new DBResult:Result = db_query(Database, "SELECT * FROM plants");
	new id = 0;
	do
	{
	    if(db_num_rows(Result))
	    {
	        PL[id][p_id] = db_get_field_assoc_int(Result,"plant");
         	db_get_field_assoc(Result, "x",field, 40);
         	PL[id][p_x] = floatstr(field);
         	db_get_field_assoc(Result, "y",field, 40);
         	PL[id][p_y] = floatstr(field);
         	db_get_field_assoc(Result, "z",field, 40);
         	PL[id][p_z] = floatstr(field);
	        PL[id][p_vw] = db_get_field_assoc_int(Result,"vw");
            PL[id][ptype] = db_get_field_assoc_int(Result,"type");
            PL[id][pobj] = db_get_field_assoc_int(Result,"object");
            PL[id][pobjid] = CreateDynamicObject(PL[id][pobj], PL[id][p_x], PL[id][p_y], PL[id][p_z], 0.0000, 0.0000, 0.0000, PL[id][p_vw]);
			PL[id][ptime] = 0;
			printf("[plantload] Plant %d has been loaded.",id);
	        Iter_Add(Plants,id);
	    }
	    else
			break;
	    id++;
	}
	while(db_next_row(Result));
	db_free_result(Result);
}

CMD:druginfo(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new skill[12];
		switch(User[playerid][drugSkill])
		{
			case 1: skill = "Novice";
			case 2: skill = "Rookie";
			case 3: skill = "Seasoned";
			case 4: skill = "Experienced";
			case 5: skill = "Expert";
		}
		format(large_string,sizeof large_string,"***"GR" Skill Level (Drugs): %s; Experience: %d",skill, User[playerid][drugEXP]);
		MSG(playerid,GOLD,large_string);
	}
	else return 0;
	return 1;
}
#define EXPERIENCED "Methamphetamine\nEcstasy\nHeroin\nCocaine" 
#define REGULAR "Methamphetamine\nEcstasy"
CMD:setdruglevel(playerid,params[])
{
	if(IsPlayerAdmin(playerid))
	{
		User[playerid][drugSkill] = strval(params);
		return 1;
	}
	return 0;
}
CMD:druglab(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new bool:see = false;
		foreach(Props, p)
		{
			//100000000
			if(p == User[playerid][gVar]-100000000)
			{
            	if(User[playerid][drugSkill] < 4) Dialog_Show(playerid,dDrugLab,DIALOG_STYLE_LIST,"Drug Laboratory",REGULAR,"Select","Cancel");
				else Dialog_Show(playerid,dDrugLab,DIALOG_STYLE_LIST,"Drug Laboratory",EXPERIENCED,"Select","Cancel");		 
				see = true;
			}
		}
		if(see) return 1;
		else return 0;
	}
	else return 0;
}
Dialog:dDrugLab(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid,dDrugLabPaymentMeth,DIALOG_STYLE_MSGBOX,"Drug Laboratory","You have to pay $300 for the ingredients in order to proceed.","Pay","Cancel");
			case 1: Dialog_Show(playerid,dDrugLabPaymentEcstasy,DIALOG_STYLE_MSGBOX,"Drug Laboratory","You have to pay $200 for the ingredients in order to proceed.","Pay","Cancel");
			case 2: Dialog_Show(playerid,dDrugLabPaymentHeroin,DIALOG_STYLE_MSGBOX,"Drug Laboratory","You have to pay $200 for the ingredients in order to proceed.","Pay","Cancel");
			case 3: Dialog_Show(playerid,dDrugLabPaymentCocaine,DIALOG_STYLE_MSGBOX,"Drug Laboratory","You have to pay $200 for the ingredients in order to proceed.","Pay","Cancel");
		}
	}
	return 1;
}
Dialog:dDrugLabPaymentHeroin(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new DRUGPRICE = 400;
		if(User[playerid][uMoney] < DRUGPRICE)
		{
			cmd_druglab(playerid,"");
			return MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money for the ingredients.");
		}
		GiveMoney(playerid,-DRUGPRICE);
		cmd_bme(playerid,"prepares the ingredients.");
		MSG(playerid,RP,"Info:"GR" You have prepared the ingredients and begun the process of making Heroin.");
		MSG(playerid,RP,"Info:"GR" The process will take five minutes; you will be able to move when you are finished.");
		MSG(playerid,RP,"Info:"GR" If you wish to end the process, type (/stopanim). Your money and ingredients won't be refunded.");
		User[playerid][gVar] = 100000000;
		TogglePlayerControllable(playerid,0);
		SetTimerEx("OnFinishMaking",5*60*1000,0,"ddd", playerid, 2, User[playerid][UserID]);
	}
	return 1;
}
Dialog:dDrugLabPaymentCocaine(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new DRUGPRICE = 500;
		if(User[playerid][uMoney] < DRUGPRICE)
		{
			cmd_druglab(playerid,"");
			return MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money for the ingredients.");
		}
		GiveMoney(playerid,-DRUGPRICE);
		cmd_bme(playerid,"prepares the ingredients.");
		MSG(playerid,RP,"Info:"GR" You have prepared the ingredients and begun the process of making Cocaine.");
		MSG(playerid,RP,"Info:"GR" The process will take five minutes; you will be able to move when you are finished.");
		MSG(playerid,RP,"Info:"GR" If you wish to end the process, type (/stopanim). Your money and ingredients won't be refunded.");
		User[playerid][gVar] = 100000000;
		TogglePlayerControllable(playerid,0);
		SetTimerEx("OnFinishMaking",5*60*1000,0,"ddd", playerid, 3, User[playerid][UserID]);
	}
	return 1;
}
Dialog:dDrugLabPaymentMeth(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new DRUGPRICE = 300;
		if(User[playerid][uMoney] < DRUGPRICE)
		{
			cmd_druglab(playerid,"");
			return MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money for the ingredients.");
		}
		GiveMoney(playerid,-DRUGPRICE);
		cmd_bme(playerid,"prepares the ingredients.");
		MSG(playerid,RP,"Info:"GR" You have prepared the ingredients and begun the process of making Methamphetamine.");
		MSG(playerid,RP,"Info:"GR" The process will take five minutes; you will be able to move when you are finished.");
		MSG(playerid,RP,"Info:"GR" If you wish to end the process, type (/stopanim). Your money and ingredients won't be refunded.");
		User[playerid][gVar] = 100000000;
		TogglePlayerControllable(playerid,0);
		SetTimerEx("OnFinishMaking",5*60*1000,0,"ddd", playerid, 5, User[playerid][UserID]);
	}
	return 1;
}
Dialog:dDrugLabPaymentEcstasy(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new DRUGPRICE = 200;
		if(User[playerid][uMoney] < DRUGPRICE)
		{
			cmd_druglab(playerid,"");
			return MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money for the ingredients.");
		}
		GiveMoney(playerid,-DRUGPRICE);
		cmd_bme(playerid,"prepares the ingredients.");
		MSG(playerid,RP,"Info:"GR" You have prepared the ingredients and begun the process of making Ecstasy.");
		MSG(playerid,RP,"Info:"GR" The process will take five minutes; you will be able to move when you are finished.");
		MSG(playerid,RP,"Info:"GR" If you wish to end the process, type (/stopanim). Your money and ingredients won't be refunded.");
		User[playerid][gVar] = 100000000;
		TogglePlayerControllable(playerid,0);
		SetTimerEx("OnFinishMaking",5*60*1000,0,"ddd", playerid, 4, User[playerid][UserID]);
	}
	return 1;
}
public OnFinishMaking(playerid, drug, uid)
{
	
	if(User[playerid][Logged] && User[playerid][gVar] == 100000000)
	{
		if(User[playerid][UserID] != uid) return 0;
		cmd_bme(playerid,"has finished.");
		new grams = 10+(User[playerid][drugSkill]*2);
		new xp = 3+random(3);
		User[playerid][drugEXP] += xp;
		if(User[playerid][drugEXP] > 99 && User[playerid][drugSkill] == 1)
			User[playerid][drugSkill] = 2;
		if(User[playerid][drugEXP] > 299 && User[playerid][drugSkill] == 2)
			User[playerid][drugSkill] = 3;
		if(User[playerid][drugEXP] > 499 && User[playerid][drugSkill] == 3)
			User[playerid][drugSkill] = 4;
		if(User[playerid][drugEXP] > 799 && User[playerid][drugSkill] == 4)
			User[playerid][drugSkill] = 5;	
		new pure;
		switch(User[playerid][drugSkill])
		{
			case 1: 
			{
				switch(random(6))
				{
					case 0,1,2,3,4: pure = 25;
					case 5: pure = 50;
				}
			}
			case 2:
			{
				switch(random(6))
				{
					case 0,1,2,3: pure = 25;
					case 4,5: pure = 50;
				}
			}
			case 3:
			{
				switch(random(6))
				{
					case 0,1,2: pure = 25;
					case 3,4: pure = 50;
					case 5: pure = 75;
				}
			}
			case 4:
			{
				switch(random(6))
				{
					case 0,1: pure = 25;
					case 2,3: pure = 50;
					case 4,5: pure = 75;
				}
			}
			case 5:
			{
				switch(random(6))
				{
					case 0,1,2: pure = 50;
					case 3,4,5: pure = 75;
				}
			}
		}	
		new drugn[24];
		strcat(drugn, GetDrugName(drug));

		GivePlayerDrug(playerid, drugn, pure, grams);

		format(large_string,sizeof large_string,"UPDATE users SET drugskill = %d,drugexp = %d WHERE userid = %d",User[playerid][drugSkill],User[playerid][drugEXP],User[playerid][UserID]);
		db_query(Database, large_string);

		format(large_string,sizeof large_string,"Info:"GR" Received %s (%d grams).",drugn, grams);
		MSG(playerid,RP,large_string);

		TogglePlayerControllable(playerid, 1);
		foreach(Props, i)
		{
			if(P[i][pvwi] == User[playerid][pvw])
			{
				User[playerid][gVar] = 100000000+i;
				break;
			}
		}
	}
	return 1;
}

CMD:usedrug(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	new drug[24],pure[15];

	if(sscanf(params,"s[24]s[24]",drug,pure)) return MSG(playerid,GOLD,"SYNTAX:"GR" /usedrug [marijuana/heroin/cocaine/ecstasy/(meth)amphetamine] [pureness (low/medium/high)]");
	new type = 0;
	new pureness = 25;
	if(!strcmp(pure,"Medium",true)) pureness = 50;
	if(!strcmp(pure,"High",true)) pureness = 75;

	if(!strcmp(drug,"Marijuana",true) || !strcmp(drug,"weed",true))
	{
		type = 1;
		if(GetPlayerDrug(playerid, type, pureness) < 1) return MSG(playerid,GOLD,"Info:"GR" You don't have the specified Marijuana.");
		if(User[playerid][onDrug] > 0)
		{
			gDecreaseHP(playerid, 25);
			Wait(playerid,"~r~-25 HP");
			MSG(playerid,RP,"Info:"GR" You started to lose health!");
		}
		new time,hp;
		switch(pureness)
		{
		    case 25: hp = 15,time = 20*60;
		    case 50: hp = 30,time = 15*60;
		    case 75: hp = 50,time = 8*60;
		}
		TakePlayerDrug(playerid, drug, pureness, 1);
		gIncreaseHP(playerid, hp);
		PlayerActionMessageBubble(playerid,"uses their Marijuana.");
		// TextDrawShowForPlayer(playerid,gGreenScreen);
		// SetTimerEx("OnGreenFade",time*1000,0,"d",playerid);
		//SetPlayerWeather(playerid,171);
        return 1;
	}
	else if(!strcmp(drug,"Heroin",true))
	{
		type = 2;
		if(GetPlayerDrug(playerid, type, pureness) < 1) return MSG(playerid,GOLD,"Info:"GR" You don't have the specified Heroin.");
		new time,hp;
		if(User[playerid][onDrug] > 0)
		{
			gDecreaseHP(playerid, 25);
			Wait(playerid,"~r~-25 HP");
			MSG(playerid,RP,"Info:"GR" You started to lose health!");
		}
		switch(pureness)
		{
		    case 25: hp = 40,time = 10*60;
		    case 50: hp = 30,time = 25*60;
		    case 75: hp = 20,time = 40*60;
		}
		TakePlayerDrug(playerid, drug, pureness, 1);

		SetTimerEx("OnWithdrawal",5000,0,"dd", playerid, User[playerid][UserID]);
		PlayerActionMessageBubble(playerid,"uses their Heroin.");
		User[playerid][drugtime] = time;
		User[playerid][onDrug] = type;
		User[playerid][drughp] = hp;
		return 1;
	}
	else if(!strcmp(drug,"Cocaine",true))
	{
		type = 3;
		if(GetPlayerDrug(playerid, type, pureness) < 1) return MSG(playerid,GOLD,"Info:"GR" You don't have the specified Cocaine.");
		new time,hp;
		if(User[playerid][onDrug] > 0)
		{
			gDecreaseHP(playerid, 25);
			Wait(playerid,"~r~-25 HP");
			MSG(playerid,RP,"Info:"GR" You started to lose health!");
		}
		switch(pureness)
		{
		    case 25: hp = 30,time = 5*60;
		    case 50: hp = 20,time = 15*60;
		    case 75: hp = 10,time = 30*60;
		}
		TakePlayerDrug(playerid, drug, pureness, 1);

		SetTimerEx("OnWithdrawal",5000,0,"dd", playerid, User[playerid][UserID]);
		PlayerActionMessageBubble(playerid,"uses their Cocaine.");
		User[playerid][drugtime] = time;
		User[playerid][onDrug] = type;
		User[playerid][drughp] = hp;
		User[playerid][drugpureness] = pureness;

		if(User[playerid][Userrace] == 2)
		{
			SFM(playerid, MAROON, "Rage:"GR" You have regained a point of Rage.");
			new rage = GetPVarInt(playerid, "Rage");
			new trage = GetPVarInt(playerid, "tRage");
			if(trage < rage)
				trage++;
			UpdateTrait(playerid, "tRage", trage);
		}
		return 1;
	}
	else if(!strcmp(drug,"Meth",true) || !strcmp(drug,"methamphetamine",true))
	{
		type = 5;
		if(GetPlayerDrug(playerid, type, pureness) < 1) return MSG(playerid,GOLD,"Info:"GR" You don't have the specified Methamphetamine.");
		new time;
		if(User[playerid][onDrug] > 0)
		{
			gDecreaseHP(playerid, 25);
			Wait(playerid,"~r~-25 HP");
			MSG(playerid,RP,"Info:"GR" You started to lose health!");
		}
		switch(pureness)
		{
		    case 25: time = 10*60;
		    case 50: time = 20*60;
		    case 75: time = 35*60;
		}
		TakePlayerDrug(playerid, drug, pureness, 1);

		SetTimerEx("OnWithdrawal",5000,0,"dd", playerid, User[playerid][UserID]);
		PlayerActionMessageBubble(playerid,"uses their Methamphetamine.");

		User[playerid][drugtime] = time;
		User[playerid][onDrug] = type;
		User[playerid][drugpureness] = pureness;
		return 1;
	}
	else if(!strcmp(drug,"ecstasy",true))
	{
		type = 4;
		if(GetPlayerDrug(playerid, type, pureness) < 1) return MSG(playerid,GOLD,"Info:"GR" You don't have the specified Ecstasy.");
		new time;
		if(User[playerid][onDrug] > 0)
		{
			gDecreaseHP(playerid, 25);
			Wait(playerid,"~r~-25 HP");
			MSG(playerid,RP,"Info:"GR" You started to lose health!");
		}
		switch(pureness)
		{
		    case 25: time = 5*60;
		    case 50: time = 10*60;
		    case 75: time = 15*60;
		}
		TakePlayerDrug(playerid, drug, pureness, 1);

		SetTimerEx("OnWithdrawal",5000,0,"dd", playerid, User[playerid][UserID]);
		PlayerActionMessageBubble(playerid,"uses their Ecstasy.");

		User[playerid][drugtime] = time;
		User[playerid][onDrug] = type;
		User[playerid][drugpureness] = pureness;
		return 1;
	}
 	return 1;
}
CMD:dchangetime(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
    User[playerid][drugtime] = 0;
	return 1;
}

public OnWithdrawal(playerid, unique)
{
	if(User[playerid][UserID] != unique) return 0;
	if(User[playerid][Logged])
	{
	    if(User[playerid][drugtime] < 1)
	    {
			if(User[playerid][onDrug] == 2) // Heroin
			{
			    Wait(playerid,"~p~HEROIN WITHDRAWAL");
				gDecreaseHP(playerid,User[playerid][drughp]);

				User[playerid][onDrug] = 0;
				User[playerid][drugtime] = 0;
				User[playerid][druglevel] = 10;
                // SetPlayerDrunkLevel(playerid,49999);
				return 1;
			}
			if(User[playerid][onDrug] == 3) // Coca
			{
			    Wait(playerid,"~p~COCAINE WITHDRAWAL");
				gDecreaseHP(playerid,User[playerid][drughp]);
				User[playerid][onDrug] = 0;
				User[playerid][drugtime] = 0;
				switch(User[playerid][drugpureness])
				{
				    case 25: User[playerid][druglevel] = 5;
 				    case 50: User[playerid][druglevel] = 15;
				    case 75: User[playerid][druglevel] = 30;
				}
                // SetPlayerDrunkLevel(playerid,49999);
				return 1;
			}
			if(User[playerid][onDrug] == 4) // ecstasy
			{
			    Wait(playerid,"~p~ECSTASY WITHDRAWAL");
				User[playerid][onDrug] = 0;
				User[playerid][drugtime] = 0;
				switch(User[playerid][drugpureness])
				{
				    case 25: User[playerid][druglevel] = 10;
 				    case 50: User[playerid][druglevel] = 5;
				    case 75: User[playerid][druglevel] = 3;
				}
                // SetPlayerDrunkLevel(playerid,49999);
				return 1;
			}
			if(User[playerid][onDrug] == 5) // meth
			{
			    Wait(playerid,"~p~METH WITHDRAWAL");
				User[playerid][onDrug] = 0;
				User[playerid][drugtime] = 0;
				switch(User[playerid][drugpureness])
				{
				    case 25: User[playerid][druglevel] = 5;
 				    case 50: User[playerid][druglevel] = 15;
				    case 75: User[playerid][druglevel] = 30;
				}
                // SetPlayerDrunkLevel(playerid,49999);
				return 1;
			}
		}

		User[playerid][drugtime] -= 5;
		SetTimerEx("OnWithdrawal",5000,0,"dd",playerid, unique);
	}
	return 1;
}

public gIncreaseHP(playerid, tick)
{
	if(!User[playerid][Logged]) return 0;
	if(User[playerid][Health] < 1 || User[playerid][Health] > 99) return 0;
	if(tick <= 0) return 0;
	SetHealth(playerid, User[playerid][Health]+1);
	tick--;
	SetTimerEx("gIncreaseHP",1000,0,"dd",playerid, tick);

	if(User[playerid][Userrace] == 0 || User[playerid][Userrace] == 2)
	{
		new curblood = GetPVarInt(playerid, "BloodPool");
		if(GetMaxBloodPoolForOther(playerid) < curblood+1)
			return UpdateTrait(playerid, "BloodPool", GetMaxBloodPoolForOther(playerid));
		UpdateTrait(playerid, "BloodPool", curblood+1);
	}
	return 1;
}
public gDecreaseHP(playerid, tick)
{
	if(!User[playerid][Logged]) return 0;
	if(User[playerid][Health] < 1) return 0;
	if(tick <= 0) return 0;
	SetHealth(playerid, User[playerid][Health]-1);
	tick--;
	SetTimerEx("gDecreaseHP",1000,0,"dd",playerid, tick);
	return 1;
}
//deals
new Float:dLoc[][] =
{
	{2607.5161,-2123.2358,0.6688} // 0
};
Dialog:dStartDeal(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(User[playerid][pDeal] > -1) cmd_rc(playerid,"");
        if(strfind(inputtext, "yes", true) != -1)
        {
            Dialog_Show(playerid,dStartDealLoc,DIALOG_STYLE_MSGBOX,
			"***","* An unidentified voice would be speaking on the other side of the line:\n\n* \"A location will be sent to you in a few minutes.\"","Okay","Cancel");
        }
	}
	return 1;
}Dialog:dCallPolice(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(isnull(inputtext))
			return cmd_call(playerid, "911");
		OnPlayerText(playerid, inputtext);
		foreach(Player, i)
		{
			if(User[i][faction] > 0)
			{
				if(F[User[i][faction]][ftype] == PD)
				{
					SFM(i, RADIO, "[911] %d: %s", User[playerid][phonenum], inputtext);
				}
			}
		}
	}
	return 1;
}

Dialog:dStartDealLoc(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		SetTimerEx("OnPlayerReceiveLocation",3000,0,"dd",playerid,User[playerid][UserID]);
		
	}
	return 1;
}
public OnPlayerReceiveLocation(playerid,unique)
{
	if(User[playerid][UserID] != unique) return 0;
	if(User[playerid][Logged])
	{
		
        new id = random(sizeof(dLoc));
        new name[34];
        Get2DZone(dLoc[id][0],dLoc[id][1],dLoc[id][2],name,sizeof name);
		SFM(playerid,YELLOW,"[SMS] Meeting has been set up, come to %s; From: Unknown Caller ID",name);
		SetPlayerCheckpoint(playerid,dLoc[id][0],dLoc[id][1],dLoc[id][2], 1);
		User[playerid][pActor] = CreateActor(6,dLoc[id][0],dLoc[id][1],dLoc[id][2], 180);
		if(User[playerid][pDeal] == -2)
			User[playerid][pDeal] = 2;
		else User[playerid][pDeal] = 1; // faction deal
		SFM(playerid,-1,"actor: %d",User[playerid][pActor]);
	}
	return 1;
}
CMD:call(playerid,params[])
{
	if(IsPlayerAdmin(playerid)) SFM(playerid,-1,"call(%d,%s)",playerid,params);
	if(!User[playerid][Logged]) return 0;
	if(User[playerid][shapeshift] > 1) return MSG(playerid,GOLD,"ERROR:"GR" You cannot call in this form.");
	if(!User[playerid][phonenum]) return MSG(playerid,GOLD,"Info:"GR" You do not have a Cellphone, you can purchase one from a Cellphone Store.");
	if(!User[playerid][togphone]) return MSG(playerid,GOLD,"Info:"GR" Your Cellphone is off.");
	if(User[playerid][calling] > -1 || User[playerid][speakingto] > -1) return MSG(playerid,GOLD,"ERROR:"GR" You are on a line.");
	new num,bool:m = false;
	if(sscanf(params,"d",num)) return MSG(playerid,GOLD,"SYNTAX:"GR" /call [phonenumber]");
	if(num == User[playerid][phonenum]) return MSG(playerid,GOLD,"ERROR:"GR" You cannot call yourself.");
	

	if(User[playerid][faction] > -1 && User[playerid][frank] == 1)
	{
		if(num == FACTION_DEALER)
		{
		    switch(random(2))
		    {
		        case 0: DealPurity = 25;
		        case 1: DealPurity = 50;
		    }
			return Dialog_Show(playerid,dStartDeal,DIALOG_STYLE_INPUT,"***","* An unidentified voice would be speaking on the other side of the line:\n\n* \"Looking for merchandise?\"","Speak","Cancel");
		}
	}
	if(num == 911)
	{
		 return Dialog_Show(playerid,dCallPolice,DIALOG_STYLE_INPUT,"911","[911 Dispatcher]\nThis is Los Santos Police Department Dispatch, what would you like to report?\nIf it's about a location, make sure to mention it.","Speak","Cancel");
	}
	if(num == REGULAR_DEALER)
	{
		if(GetPVarInt(playerid, "Streetwise") < 2) {
			return MSG(playerid, GOLD, "ERROR:"GR" You need at least two dots in Streetwise to call this number. (/cs)");
		}
		User[playerid][pDeal] = -2;
		return Dialog_Show(playerid,dStartDeal,DIALOG_STYLE_INPUT,"***","* An unidentified voice would be speaking on the other side of the line:\n\n* \"Looking for merchandise?\"","Speak","Cancel");
	}
	foreach(Player,i)
	{
	    if(User[i][togphone] && User[i][phonenum] == num)
	    {
	        if(User[i][calling] > -1 || User[i][speakingto] > -1)
	        {
	            MSG(playerid,GOLD,"ERROR:"GR" Specified number is busy.");
				return 1;
	        }
	        cmd_bme(i,"'s phone begins ringing...");
			format(large_string,sizeof large_string,"*** Incoming call from "G"%d"GR". Use (/pickup) to answer or (/hangup) to hang up.",User[playerid][phonenum]);
			MSG(i,GRAD2,large_string);
	        cmd_bme(playerid,"dials a number.");
	        format(large_string,sizeof large_string,"*** Dialing "G"%d"GR"...",num);
	        MSG(playerid,GRAD2,large_string);
			User[playerid][calling] = i;
			User[i][calling] = playerid;
			User[i][dialer] = playerid;
			User[playerid][speakingto] = -1;
			User[i][speakingto] = -1;
			SetTimerEx("CallRing",1500,0,"ddd",playerid,i,0);
			m = true;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			break;
	    }
	}
	if(!m) return MSG(playerid,GOLD,"Info:"GR" Specified phone number is either offline or does not exist.");
	return 1;
}

public CallRing(caller,called,times)
{
	if(!User[called][Logged])
	{
		MSG(called,GOLD,"Info:"GR" The person you called has disconnected from the server.");
		return 0;
	}
	if(!User[caller][Logged]) return MSG(called,GRAD2,"*** The other side hung up...");
	if(times > 8)
	{
		MSG(caller,YELLOW,"*** No answer.");
		times = 0;
		SFM(called,YELLOW,"*** Missed a call from %d.",User[caller][phonenum]);
		User[caller][calling] = -1;
		User[called][calling] = -1;
	 	new pdate[23];
		format(pdate,sizeof pdate,"[%s][%s]",PasteDate(),PasteTime());
		format(large_string,sizeof large_string,"INSERT INTO phone_operation (number,pto,type,ctype,date,msgcond) VALUES (%d,%d,2,1,'%s',1)", //ctype 1 = missed call
		User[called][phonenum],User[caller][phonenum],pdate); // add in to the person who was called that he missed a call
		db_query(Database, large_string);

		format(large_string,sizeof large_string,"INSERT INTO phone_operation (number,pto,type,ctype,date,msgcond) VALUES (%d,%d,2,1,'%s',2)", //ctype1 = missed call
		User[caller][phonenum],User[called][phonenum],pdate); // add in to the person who is calling that he missed a call
		db_query(Database, large_string);
		return 0;
	}
	if(User[caller][calling] == called)
	{
		PlayerActionMessageBubble(called,"'s phone is ringing...");
		SetTimerEx("CallRing",1500,0,"dd",caller,called);
		times++;
	}
	return 1;
}
stock GetVehiclePrice(model)
{
	new vprice = 9999999;
	switch(model)
	{
	    // MOTOR
	    case 462: vprice = 1000;
	    case 468: vprice = 15000;
	    case 471: vprice = 12000;
	    case 581: vprice = 20000;
	    case 461: vprice = 25000;
	    case 521: vprice = 28000;
	    case 463: vprice = 15000;
	    case 586: vprice = 14000;
	    case 481: vprice = 500;
	    case 509: vprice = 250;
	    case 510: vprice = 500;
	    // INDUSTRIAL
		case 413: vprice = 15000;
		case 414: vprice = 12000;
		case 440: vprice  = 12000;
		case 455: vprice = 15000;
		case 456: vprice = 14000;
		case 482: vprice = 18000;
		case 498: vprice  = 16000;
		case 499: vprice = 15000;
		case 525: vprice = 12000;
		case 543: vprice = 7500;
		case 554: vprice  = 18000;
		case 478: vprice  = 8000;
		case 422: vprice = 10000;
		// AIRCRAFT
		case 417: vprice = 60000;
		case 469: vprice = 70000;
		case 487: vprice = 85000;
		case 511: vprice = 85000;
		case 519: vprice = 100000;
		case 553: vprice = 95000;
		case 563: vprice = 90000;
		case 593: vprice = 65000;
		// SEACRAFT
		case 446: vprice = 50000;
		case 452: vprice = 55000;
		case 453: vprice = 20000;
		case 454: vprice = 85000;
		case 473: vprice = 6000;
		case 484: vprice = 50000;
		// REGULAR CARS
		case 400: vprice = 10000;
		case 401: vprice = 8000;
		case 404: vprice = 6000;
		case 405: vprice = 15000;
		case 410: vprice = 8000;
		case 412: vprice = 11000;
		case 418: vprice = 7500;
		case 419: vprice = 11000;
		case 421: vprice = 14000;
		case 426: vprice = 16000;
		case 432: vprice = 8000;
		case 439: vprice = 12000;
		case 445: vprice = 15000;
		case 485: vprice = 12000;
		case 466: vprice = 11000;
		case 467: vprice = 9000;
		case 474: vprice = 8000;
		case 475: vprice = 10000;
		case 479: vprice = 8000;
		case 493: vprice = 14500;
		case 489: vprice = 13000;
		case 491: vprice = 10000;
		case 492: vprice = 12000;
		case 496: vprice = 5000;
		case 500: vprice = 10000;
		case 507: vprice = 8000;
		case 516: vprice = 8000;
		case 517: vprice = 9000;
		case 518: vprice = 8500;
		case 526: vprice = 8500;
		case 527: vprice = 8000;
		case 529: vprice = 7000;
		case 533: vprice = 11000;
		case 534: vprice = 13000;
		case 536: vprice = 9000;
		case 540: vprice = 8000;
		case 542: vprice = 8000;
		case 546: vprice = 8000;
		case 547: vprice = 8000;
		case 549: vprice = 6500;
		case 550: vprice = 8000;
		case 551: vprice = 9000;
		case 558: vprice = 11000;
		case 561: vprice = 15000;
		case 566: vprice = 10000;
		case 567: vprice = 12000;
		case 576: vprice = 11000;
		case 585: vprice = 10000;
		case 600: vprice = 8000;
		// Sportscars
		case 477: vprice = 22000;
		case 579: vprice = 25000;
		case 580: vprice = 25000;
		case 602: vprice = 20000;
		case 402: vprice = 28000;
		case 411: vprice = 50000;
		case 415: vprice = 36000;
		case 429: vprice = 32000;
		case 451: vprice = 45000;
		case 506: vprice = 30000;
		case 541: vprice = 40000;
		case 559: vprice = 28000;
		case 565: vprice = 24000;
		case 587: vprice = 23000;
		case 589: vprice = 20000;
		case 603: vprice = 25000;
		case 480: vprice = 29000;
		case 555: vprice = 28000;
		case 560: vprice = 30000;
		case 562: vprice = 32000;

	}
	return vprice;
}
stock GetVehicleName(vehicleid)
{
	new string[50];
	format(string,sizeof(string),"%s",aVehicleNames[vehicleid - 400]);
	return string;
}
Dialog:dDealershipSport(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new cost,model;
	    switch(listitem)
	    {
			case 0: model = 477;
			case 1: model = 579;
			case 2: model = 580;
			case 3: model = 602;
			case 4: model = 402;
			case 5: model = 411;
			case 6: model = 415;
			case 7: model = 429;
			case 8: model = 451;
			case 9: model = 506;
			case 10: model = 541;
			case 11: model = 559;
			case 12: model = 565;
			case 13: model = 587;
			case 14: model = 589;
			case 15: model = 603;
			case 16: model = 480;
			case 17: model = 555;
			case 18: model = 560;
			case 19: model = 562;
	    }
	    cost = GetVehiclePrice(model);
	    if(User[playerid][uMoney] < cost)
	    {
	        MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
	        return cmd_buy(playerid,"");
	    }
	    ModelPicked[playerid] = model;
		new string[100];
		format(string,sizeof string,"Are you sure you want to purchase a %s for "G"$%d"D"?",GetVehicleName(ModelPicked[playerid]),GetVehiclePrice(ModelPicked[playerid]));
		Dialog_Show(playerid,dConfirmPurchase,DIALOG_STYLE_MSGBOX,"Confirm Purchase",string,"Buy","Back");
	}
	return 1;
}
Dialog:dDealershipCars(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new cost,model;
	    switch(listitem)
	    {
			case 0: model = 400;
		 	case 1: model = 401;
			case 2: model = 404;
			case 3: model = 405;
			case 4: model = 410;
			case 5: model = 412;
			case 6: model = 418;
			case 7: model = 419;
			case 8: model = 421;
			case 9: model = 426;
			case 10: model = 436;
			case 11: model = 439;
			case 12: model = 445;
			case 13: model = 485;
			case 14: model = 466;
			case 15: model = 467;
			case 16: model = 474;
			case 17: model = 475;
			case 18: model = 479;
			case 19: model = 493;
			case 20: model = 489;
			case 21: model = 491;
			case 22: model = 492;
			case 23: model = 496;
			case 24: model = 500;
			case 25: model = 507;
			case 26: model = 516;
			case 27: model = 517;
			case 28: model = 518;
			case 29: model = 526;
			case 30: model = 527;
			case 31: model = 529;
			case 32: model = 533;
			case 33: model = 534;
			case 34: model = 536;
			case 35: model = 540;
			case 36: model = 542;
			case 37: model = 546;
			case 38: model = 547;
			case 39: model = 549;
			case 40: model = 550;
			case 41: model = 551;
			case 42: model = 558;
			case 43: model = 561;
			case 44: model = 566;
			case 45: model = 567;
			case 46: model = 576;
			case 47: model = 585;
			case 48: model = 600;
			//case 49: model = 476;
			//case 50: model = 585;
			//case 51: model = 600;
	    }
	    cost = GetVehiclePrice(model);
	    if(User[playerid][uMoney] < cost)
	    {
	        MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
	        return cmd_buy(playerid,"");
	    }
	    ModelPicked[playerid] = model;
		new string[100];
		format(string,sizeof string,"Are you sure you want to purchase a %s for "G"$%d"D"?",GetVehicleName(ModelPicked[playerid]),GetVehiclePrice(ModelPicked[playerid]));
		Dialog_Show(playerid,dConfirmPurchase,DIALOG_STYLE_MSGBOX,"Confirm Purchase",string,"Buy","Back");
		//PlayerTextDrawSetPreviewModel(playerid,ShowSkin[playerid],model);
		//PlayerTextDrawShow(playerid,ShowSkin[playerid]);
  		ShowIt(playerid,model);
	}
	return 1;
}
Dialog:dDealershipSea(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new cost,model;
	    switch(listitem)
	    {
			case 0: model = 446;
			case 1: model = 452;
			case 2: model = 453;
			case 3: model = 454;
			case 4: model = 473;
			case 5: model = 484;
	    }
	    cost = GetVehiclePrice(model);
	    if(User[playerid][uMoney] < cost)
	    {
	        MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
	        return cmd_buy(playerid,"");
	    }
	    ModelPicked[playerid] = model;
		new string[100];
		format(string,sizeof string,"Are you sure you want to purchase a %s for "G"$%d"D"?",GetVehicleName(ModelPicked[playerid]),GetVehiclePrice(ModelPicked[playerid]));
		Dialog_Show(playerid,dConfirmPurchase,DIALOG_STYLE_MSGBOX,"Confirm Purchase",string,"Buy","Back");
		//PlayerTextDrawSetPreviewModel(playerid,ShowSkin[playerid],model);
		//PlayerTextDrawShow(playerid,ShowSkin[playerid]);
		ShowIt(playerid,model);
	}
	return 1;
}
Dialog:dDealershipAir(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new cost,model;
	    switch(listitem)
	    {
			case 0: model = 417;
			case 1: model = 469;
			case 2: model = 487;
			case 3: model = 511;
			case 4: model = 519;
			case 5: model = 553;
			case 6: model = 563;
			case 7: model = 593;
	    }
	    cost = GetVehiclePrice(model);
	    if(User[playerid][uMoney] < cost)
	    {
	        MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
	        return cmd_buy(playerid,"");
	    }
	    ModelPicked[playerid] = model;
		new string[100];
		format(string,sizeof string,"Are you sure you want to purchase a %s for "G"$%d"D"?",GetVehicleName(ModelPicked[playerid]),GetVehiclePrice(ModelPicked[playerid]));
		Dialog_Show(playerid,dConfirmPurchase,DIALOG_STYLE_MSGBOX,"Confirm Purchase",string,"Buy","Back");
		//PlayerTextDrawSetPreviewModel(playerid,ShowSkin[playerid],model);
		//PlayerTextDrawShow(playerid,ShowSkin[playerid]);
		ShowIt(playerid,model);
	}
	return 1;
}
Dialog:dDealershipIndust(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new cost,model;
	    switch(listitem)
	    {
			case 0: model = 413;
			case 1: model = 414;
			case 2: model = 440;
			case 3: model = 455;
			case 4: model = 456;
			case 5: model = 482;
			case 6: model = 498;
			case 7: model = 499;
			case 8: model = 525;
			case 9: model = 543;
			case 10: model = 554;
			case 11: model = 478;
			case 12: model = 422;
	    }
	    cost = GetVehiclePrice(model);
	    if(User[playerid][uMoney] < cost)
	    {
	        MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
	        return cmd_buy(playerid,"");
	    }
	    ModelPicked[playerid] = model;
		new string[100];
		format(string,sizeof string,"Are you sure you want to purchase a %s for "G"$%d"D"?",GetVehicleName(ModelPicked[playerid]),GetVehiclePrice(ModelPicked[playerid]));
		Dialog_Show(playerid,dConfirmPurchase,DIALOG_STYLE_MSGBOX,"Confirm Purchase",string,"Buy","Back");
		//PlayerTextDrawSetPreviewModel(playerid,ShowSkin[playerid],model);
		//PlayerTextDrawShow(playerid,ShowSkin[playerid]);
		ShowIt(playerid,model);
	}
	return 1;
}
Dialog:dDealershipMotor(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new cost,model;
	    switch(listitem)
	    {
	        case 0: model = 462; // FAGGIO
	        case 1: model = 468;
	        case 2: model = 471;
	        case 3: model = 581;
	        case 4: model = 461;
	        case 5: model = 521;
	        case 6: model = 463;
	        case 7: model = 586;
	        case 8: model = 481;
	        case 9: model = 509;
	        case 10: model = 510;
	    }
	    cost = GetVehiclePrice(model);
	    if(User[playerid][uMoney] < cost)
	    {
	        MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
	        return cmd_buy(playerid,"");
	    }
	    ModelPicked[playerid] = model;
		new string[100];
		format(string,sizeof string,"Are you sure you want to purchase a %s for "G"$%d"D"?",GetVehicleName(ModelPicked[playerid]),GetVehiclePrice(ModelPicked[playerid]));
		Dialog_Show(playerid,dConfirmPurchase,DIALOG_STYLE_MSGBOX,"Confirm Purchase",string,"Buy","Back");
		//PlayerTextDrawSetPreviewModel(playerid,ShowSkin[playerid],model);
		//PlayerTextDrawShow(playerid,ShowSkin[playerid]);
		ShowIt(playerid,model);
	}
	return 1;
}
Dialog:dConfirmPurchase(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    User[playerid][gVar] = -10000;
	    new cost = GetVehiclePrice(ModelPicked[playerid]),
			Float:x,
			Float:y,
			Float:z,
			Float:a,
			pos[35],
			query[125];
 		format(query,sizeof query,"SELECT vid FROM cars WHERE owner = %d",User[playerid][UserID]);
		new DBResult:Result = db_query(Database, query);

		new dp = 3;
		if(!isnull(User[playerid][donator]))
			dp = 5;

		if(db_num_rows(Result) >= dp)
		{
			SFM(playerid,GOLD,"ERROR:"GR" You cannot purchase a new vehicle for you have reached your limit. (%d)",dp);
			db_free_result(Result);
			return 1;
		}

		format(query,sizeof query,"SELECT dealerpos FROM business WHERE bid = %d",User[playerid][BusinessIN]);
		Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
            db_get_field_assoc(Result, "dealerpos",pos, 30);
            sscanf(pos,"p<,>ffff",x,y,z,a);
			SpawnVehicle(User[playerid][UserID],ModelPicked[playerid],x,y,z,a,random(225),random(225));
			GiveMoney(playerid,-cost);
			BusinessTill(User[playerid][BusinessIN], cost/2);

		}
		else
		{
		    MSG(playerid,RED,"*** An error has occurred, please inform an administrator about this message.");
		}
		db_free_result(Result);
	}
	else
	{
		cmd_buy(playerid,"");
	}
	PlayerTextDrawHide(playerid,ShowSkin[playerid]);
	TextDrawHideForPlayer(playerid, ShowFrame);
	return 1;
}


Dialog:dWeaponStore(playerid, response, listitem, inputtext[])
{
	if(!response) return 0;
	switch(listitem)
	{
	    case 0: // baseball bat
	    {
		    new cost = 35;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
	        if(User[playerid][WeaponEquipped])
	        {
	            MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
	            return cmd_buy(playerid,"");
	        }
			GiveMoney(playerid,-cost);
			User[playerid][WeaponEquipped] = WEAPON_BAT;
			User[playerid][WeaponEquipped_Ammo] = 1;
			GivePlayerWeapon(playerid,WEAPON_BAT,1);
			BusinessTill(User[playerid][BusinessIN], cost);
	    }
	    case 1: // brass knuckles
	    {
		    new cost = 50;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
	        if(User[playerid][WeaponEquipped])
	        {
	            MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
	            return cmd_buy(playerid,"");
	        }
			GiveMoney(playerid,-cost);
			User[playerid][WeaponEquipped] = WEAPON_BRASSKNUCKLE;
			User[playerid][WeaponEquipped_Ammo] = 1;
			GivePlayerWeapon(playerid,WEAPON_BRASSKNUCKLE,1);
			BusinessTill(User[playerid][BusinessIN], cost);
	    }
	    case 2: //pepper spray
	    {
		    new cost = 100;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
	        if(User[playerid][WeaponEquipped])
	        {
	            MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
	            return cmd_buy(playerid,"");
	        }
			GiveMoney(playerid,-cost);
			User[playerid][WeaponEquipped] = WEAPON_SPRAYCAN;
			User[playerid][WeaponEquipped_Ammo] = 850;
			GivePlayerWeapon(playerid,WEAPON_SPRAYCAN,850);
			BusinessTill(User[playerid][BusinessIN], cost);
	    }
	    case 3: //taser
	    {
			format(large_string,sizeof large_string,"SELECT 1 FROM crecords WHERE id = %d",User[playerid][UserID]);
			new DBResult: Result = db_query(Database, large_string);
			if(db_num_rows(Result))
			{
			    MSG(playerid,GOLD,"ERROR:"GR" You have a criminal record.");
				return db_free_result(Result);
			}
			db_free_result(Result);
   			new cost = 500;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
	        if(User[playerid][WeaponEquipped])
	        {
	            MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
	            return cmd_buy(playerid,"");
	        }
			GiveMoney(playerid,-cost);
			User[playerid][WeaponEquipped] = WEAPON_SILENCED;
			User[playerid][WeaponEquipped_Ammo] = 25;
			GivePlayerWeapon(playerid,WEAPON_SILENCED,25);
			BusinessTill(User[playerid][BusinessIN], cost);
	    }
	    case 4: //knife
	    {
		    new cost = 150;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
	        if(User[playerid][WeaponEquipped])
	        {
	            MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
	            return cmd_buy(playerid,"");
	        }
			GiveMoney(playerid,-cost);
			User[playerid][WeaponEquipped] = WEAPON_KNIFE;
			User[playerid][WeaponEquipped_Ammo] = 1;
			GivePlayerWeapon(playerid,WEAPON_KNIFE,1);
			BusinessTill(User[playerid][BusinessIN], cost);
	    }
	    case 5: //golf
	    {
		    new cost = 20;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
	        if(User[playerid][WeaponEquipped])
	        {
	            MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
	            return cmd_buy(playerid,"");
	        }
			GiveMoney(playerid,-cost);
			User[playerid][WeaponEquipped] = WEAPON_GOLFCLUB;
			User[playerid][WeaponEquipped_Ammo] = 1;
			GivePlayerWeapon(playerid,WEAPON_GOLFCLUB,1);
			BusinessTill(User[playerid][BusinessIN], cost);
	    }
	    case 6: // hunting rifle
	    {
		    new cost = 1000;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
	        if(User[playerid][WeaponEquipped])
	        {
	            MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
	            return cmd_buy(playerid,"");
	        }
			GiveMoney(playerid,-cost);
			User[playerid][WeaponEquipped] = WEAPON_HUNTING_RIFLE;
			User[playerid][WeaponEquipped_Ammo] = 50;
			GivePlayerWeapon(playerid,WEAPON_RIFLE, User[playerid][WeaponEquipped_Ammo]);
			BusinessTill(User[playerid][BusinessIN], cost);
			#define HUNTING_LOC_NAME "NORTH ROCK"
			MSG(playerid, GREEN, "Info:"GR" You can hunt deer with this at the "HUNTING_LOC_NAME" forest.");
	    }
	    case 7: // chainsaw
	    {
		    new cost = 850;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
	        if(User[playerid][WeaponEquipped])
	        {
	            MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
	            return cmd_buy(playerid,"");
	        }
			GiveMoney(playerid,-cost);
			User[playerid][WeaponEquipped] = WEAPON_CHAINSAW;
			User[playerid][WeaponEquipped_Ammo] = 1;
			GivePlayerWeapon(playerid,WEAPON_CHAINSAW, User[playerid][WeaponEquipped_Ammo]);
			BusinessTill(User[playerid][BusinessIN], cost);
	    }
	}
	return 1;
}
// CMD:givemeied(playerid,params[])
// {
// 	MSG(playerid,-1,"IED");
// 	new id = FindPlayerItemFree(playerid,"IED");
// 	UpdateItem(playerid, id, GetItemID("IED"), "IED", 0, 100, true);
// 	MSG(playerid,-1,"IED FIN");
// 	return 1;
// }
CMD:spawnied(playerid, params[])
{
	if(User[playerid][Useradmin] > 0)
	{
		new target;
		if(sscanf(params, "u", target))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /spawnied [playerid/partofname]");
		if(User[target][Logged] == false)
			return MSG(playerid, GOLD, "ERROR:"GR" Invalid player.");
		new id = GetInventoryFreeSlot(target);
		UpdateItem(target, id, GetItemID("IED"), "IED", 1, 100, true);
		return 1;
	}
	return 0;
}
Dialog:dGeneralStore(playerid, response, listitem, inputtext[])
{
	if(!response) return 0;
	new id;

	switch(listitem)
	{
	    // Food ($25)\nCigarettes ($5)\nBackpack ($550)\nSprunk ($5)\nFuel Canister ($250)\nRope ($100)\nBlindfold ($70)\nGPS ($500)\nMask ($250)

		case 0: // water
		{
			Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"General Store","Please insert the quantity you would like to purchase in the field below.","Buy","Back");
			SetPVarInt(playerid, "buystack_slot", FindPlayerItemFree(playerid, "Water"));
			SetPVarInt(playerid, "buystack_id", GetItemID("Water"));
			SetPVarInt(playerid, "buystack_price", 5);
		}
		case 1: // cigar
		{
			Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"General Store","Please insert the quantity you would like to purchase in the field below.","Buy","Back");
			SetPVarInt(playerid, "buystack_slot", FindPlayerItemFree(playerid, "Cigarette"));
			SetPVarInt(playerid, "buystack_id", GetItemID("Cigarette"));
			SetPVarInt(playerid, "buystack_price", 1);
		}
		case 2: // fruit
		{
			Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"General Store","Please insert the quantity you would like to purchase in the field below.","Buy","Back");
			SetPVarInt(playerid, "buystack_slot", FindPlayerItemFree(playerid, "Fruit"));
			SetPVarInt(playerid, "buystack_id", GetItemID("Fruit"));
			SetPVarInt(playerid, "buystack_price", 5);
		}
		case 3: // sprunk
		{
			Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"General Store","Please insert the quantity you would like to purchase in the field below.","Buy","Back");
			SetPVarInt(playerid, "buystack_slot", FindPlayerItemFree(playerid, "Sprunk"));
			SetPVarInt(playerid, "buystack_id", GetItemID("Sprunk"));
			SetPVarInt(playerid, "buystack_price", 5);
		}

		case 4: // fuel
		{
			Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"General Store","Please insert the quantity you would like to purchase in the field below.","Buy","Back");
			SetPVarInt(playerid, "buystack_slot", FindPlayerItemFree(playerid, "Gas Can"));
			SetPVarInt(playerid, "buystack_id", GetItemID("Gas Can"));
			SetPVarInt(playerid, "buystack_price", 250);
		}
		case 5: // rope
		{
			Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"General Store","Please insert the quantity you would like to purchase in the field below.","Buy","Back");
			SetPVarInt(playerid, "buystack_slot", FindPlayerItemFree(playerid, "Rope"));
			SetPVarInt(playerid, "buystack_id", GetItemID("Rope"));
			SetPVarInt(playerid, "buystack_price", 100);
		}
		case 6: //blindfold
		{
			Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"General Store","Please insert the quantity you would like to purchase in the field below.","Buy","Back");
			SetPVarInt(playerid, "buystack_slot", FindPlayerItemFree(playerid, "Blindfold"));
			SetPVarInt(playerid, "buystack_id", GetItemID("Blindfold"));
			SetPVarInt(playerid, "buystack_price", 70);
		}
		case 7: // soda
		{
			Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"General Store","Please insert the quantity you would like to purchase in the field below.","Buy","Back");
			SetPVarInt(playerid, "buystack_slot", FindPlayerItemFree(playerid, "Soda"));
			SetPVarInt(playerid, "buystack_id", GetItemID("Soda"));
			SetPVarInt(playerid, "buystack_price", 3);	
		}
		case 8: // snack
		{
			Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"General Store","Please insert the quantity you would like to purchase in the field below.","Buy","Back");
			SetPVarInt(playerid, "buystack_slot", FindPlayerItemFree(playerid, "Snack"));
			SetPVarInt(playerid, "buystack_id", GetItemID("Snack"));
			SetPVarInt(playerid, "buystack_price", 3);				
		}
		case 9:
		{
			Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"General Store","Please insert the quantity you would like to purchase in the field below.","Buy","Back");
			SetPVarInt(playerid, "buystack_slot", FindPlayerItemFree(playerid, "Alcoholic Drink"));
			SetPVarInt(playerid, "buystack_id", GetItemID("Alcoholic Drink"));
			SetPVarInt(playerid, "buystack_price", 7);	
		}
		case 10:
		{
			id = GetInventoryFreeSlot(playerid);
			if(id == -1) return MSG(playerid, GOLD, "Inventory:"GR" Your inventory is full.");
		    new cost = 10;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
			GiveMoney(playerid,-cost);
			UpdateItem(playerid, GetInventoryFreeSlot(playerid), GetItemID("Cards"), "Cards", 1, 100, false);
			BusinessTill(User[playerid][BusinessIN], cost);
		}
		case 11:
		{
			id = GetInventoryFreeSlot(playerid);
			if(id == -1) return MSG(playerid, GOLD, "Inventory:"GR" Your inventory is full.");
		    new cost = 50;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
			GiveMoney(playerid,-cost);
			UpdateItem(playerid, GetInventoryFreeSlot(playerid), GetItemID("Fishing Rod"), "Fishing Rod", 1, 100, false);
			BusinessTill(User[playerid][BusinessIN], cost);
		}
		case 12:
		{
			Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"General Store","Please insert the quantity you would like to purchase in the field below.","Buy","Back");
			SetPVarInt(playerid, "buystack_slot", FindPlayerItemFree(playerid, "Bait"));
			SetPVarInt(playerid, "buystack_id", GetItemID("Bait"));
			SetPVarInt(playerid, "buystack_price", 2);	
		}
	}
	SFM(playerid, GREEN, "Info:"GR" Purchased.");
	return 1;
}
Dialog:dGeneralStoreBuyStack(playerid, response, listitem, inputtext[])
{
	if(!response) return cmd_buy(playerid,"");
	if(GetInventoryFreeSlot(playerid) == -1) return MSG(playerid, GOLD, "Inventory:"GR" Your inventory is full.");
	if(!IsNumeric(inputtext))
	{
		MSG(playerid,GOLD,"ERROR:"GR" Please insert a numeric and positive value.");
		return Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"General Store","Please insert the amount of Baits you would like to purchase in the field below.","Buy","Back");
	}
	new amount = strval(inputtext);
	if(amount < 1)
	{
		MSG(playerid,GOLD,"ERROR:"GR" Invalid input.");
		return Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"General Store","Please insert the amount of Baits you would like to purchase in the field below.","Buy","Back");
	}
	new price = GetPVarInt(playerid, "buystack_price");
	if(amount*price > User[playerid][uMoney])
	{
	    MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money for this purchase.");
		return Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"General Store","Please insert the amount of Baits you would like to purchase in the field below.","Buy","Back");
	}
	GiveMoney(playerid,-amount*price);
	BusinessTill(User[playerid][BusinessIN], amount*price);
	new slot = GetPVarInt(playerid, "buystack_slot");
	new itemid = GetPVarInt(playerid, "buystack_id");
	printf("[stackdebug] Returned Item ID: %d",itemid);
	UpdateItem(playerid, slot, itemid, GetItemName(itemid), amount, 100, true);
	//stock UpdateItem(playerid, slot, itemid, itemname[], value, condition = 100, bool:mergable = false, bool:fakeitem = false)
	SFM(playerid,GREEN,"Info:"GR" You have purchased %s (%d) for "G"$%d"GR".", GetItemName(itemid), amount, amount*price);
	return 1;
}
Dialog:dHardwareStore(playerid, response, listitem, inputtext[])
{
	if(!response) return 0;
	new id;
	switch(listitem)
	{

	    case 0: // vehicle parts
	    {
	        Dialog_Show(playerid,dHardwareStore_VehiclePa,DIALOG_STYLE_INPUT,"Vehicle Parts Purchase","Please insert the amount of Vehicle Parts you would like to purchase in the field below.\n\nNote: Each vehicle part costs two dollars.","Buy","Back");
	    }
	    case 1: // screwdriver
	    {
			id = GetInventoryFreeSlot(playerid);
			if(id == -1) return MSG(playerid, GOLD, "Inventory:"GR" Your inventory is full.");
	        if(User[playerid][uMoney] < 50)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
			GiveMoney(playerid,-50);
			BusinessTill(User[playerid][BusinessIN], 50);
			UpdateItem(playerid, GetInventoryFreeSlot(playerid), GetItemID("Screwdriver"), "Screwdriver", 1, 100, false);
			//stock UpdateItem(playerid, slot, itemid, itemname[], value, condition = 100, bool:mergable = false, bool:fakeitem = false)
			MSG(playerid,GREEN,"Info:"GR" You have purchased a Screwdriver.");
	    }
	    case 2:
	    {
			id = GetInventoryFreeSlot(playerid);
			if(id == -1) return MSG(playerid, GOLD, "Inventory:"GR" Your inventory is full.");
	        if(User[playerid][uMoney] < 75)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
			GiveMoney(playerid,-75);
			BusinessTill(User[playerid][BusinessIN], 75);
			UpdateItem(playerid, GetInventoryFreeSlot(playerid), GetItemID("Blowtorch"), "Blowtorch", 1, 100, false);
			MSG(playerid,GREEN,"Info:"GR" You have purchased a Blowtorch.");
	    }
	    case 3:
	    {
	        if(User[playerid][uMoney] < 150)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
	        id = FindPlayerItemFree(playerid,"Vehicle Paint");
			GiveMoney(playerid,-150);
			BusinessTill(User[playerid][BusinessIN], 150);
			UpdateItem(playerid, id, GetItemID("Vehicle Paint"), "Vehicle Paint", 1, 100, true);
			MSG(playerid,GREEN,"Info:"GR" You have purchased a Vehicle Paint.");
		}
	    case 4:
	    {
			id = GetInventoryFreeSlot(playerid);
			if(id == -1) return MSG(playerid, GOLD, "Inventory:"GR" Your inventory is full.");
	        if(User[playerid][uMoney] < 60)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
	        id = FindPlayerItemFree(playerid,"Wrench");
			GiveMoney(playerid,-150);
			BusinessTill(User[playerid][BusinessIN], 150);
			UpdateItem(playerid, GetInventoryFreeSlot(playerid), GetItemID("Wrench"), "Wrench", 1, 100, false);
			MSG(playerid,GREEN,"Info:"GR" You have purchased a Wrench.");
		}
		case 5:
		{
			id = GetInventoryFreeSlot(playerid);
			if(id == -1) return MSG(playerid, GOLD, "Inventory:"GR" Your inventory is full.");
		    new cost = 200;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
	        id = FindPlayerItemFree(playerid,"Toolkit");
			GiveMoney(playerid,-cost);
			BusinessTill(User[playerid][BusinessIN], cost);
			UpdateItem(playerid, GetInventoryFreeSlot(playerid), GetItemID("Toolkit"), "Toolkit", 1, 100, false);
			MSG(playerid,GREEN,"Info:"GR" You have purchased a Toolkit.");
		}
		case 6:
		{
			id = GetInventoryFreeSlot(playerid);
			if(id == -1) return MSG(playerid, GOLD, "Inventory:"GR" Your inventory is full.");
		    new cost = 300;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
	        id = FindPlayerItemFree(playerid,"GPS");
			GiveMoney(playerid,-cost);
			BusinessTill(User[playerid][BusinessIN], cost);
			UpdateItem(playerid, GetInventoryFreeSlot(playerid), GetItemID("GPS"), "GPS", 1, 100, false);
			MSG(playerid,GREEN,"Info:"GR" You have purchased a GPS.");

		}
		case 7:
		{
			id = GetInventoryFreeSlot(playerid);
			if(id == -1) return MSG(playerid, GOLD, "Inventory:"GR" Your inventory is full.");
		    new cost = 250;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
	        id = FindPlayerItemFree(playerid,"MP3 Player");
			GiveMoney(playerid,-cost);
			BusinessTill(User[playerid][BusinessIN], cost);
			UpdateItem(playerid, GetInventoryFreeSlot(playerid), GetItemID("MP3"), "MP3", 1, 100, false);
			MSG(playerid,GREEN,"Info:"GR" You have purchased an MP3 Player.");
		}
		case 8:
		{
			id = GetInventoryFreeSlot(playerid);
			if(id == -1) return MSG(playerid, GOLD, "Inventory:"GR" Your inventory is full.");
		    new cost = 150;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
	        id = FindPlayerItemFree(playerid,"Stereo");
			GiveMoney(playerid,-cost);
			BusinessTill(User[playerid][BusinessIN], cost);
			UpdateItem(playerid, GetInventoryFreeSlot(playerid), GetItemID("Stereo"), "Stereo", 1, 100, false);
			MSG(playerid,GREEN,"Info:"GR" You have purchased a Stereo.");
		}
		case 9:
		{
			id = GetInventoryFreeSlot(playerid);
			if(id == -1) return MSG(playerid, GOLD, "Inventory:"GR" Your inventory is full.");
		    new cost = 200;
	        if(User[playerid][uMoney] < cost)
	        {
	    		MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
				return cmd_buy(playerid,"");
	        }
			GiveMoney(playerid,-cost);
			BusinessTill(User[playerid][BusinessIN], cost);
			UpdateItem(playerid, GetInventoryFreeSlot(playerid), GetItemID("Radio"), "Radio", 1, 100, false);
			MSG(playerid,GREEN,"Info:"GR" You have purchased a Radio.");			
		}
	}
	return 1;
}


Dialog:dHardwareStore_VehiclePa(playerid, response, listitem, inputtext[])
{
	if(!response) return cmd_buy(playerid,"");
	if(!IsNumeric(inputtext))
	{
		MSG(playerid,GOLD,"ERROR:"GR" Please insert a numeric and positive value.");
		Dialog_Show(playerid,dHardwareStore_VehiclePa,DIALOG_STYLE_INPUT,"Vehicle Parts Purchase","Please insert the amount of Vehicle Parts you would like to purchase in the field below.\n\nNote: Each vehicle part costs two dollars.","Buy","Back");
		return 0;
	}
	new amount = strval(inputtext);
	if(amount < 1)
	{
		MSG(playerid,GOLD,"ERROR:"GR" Invalid input.");
		Dialog_Show(playerid,dHardwareStore_VehiclePa,DIALOG_STYLE_INPUT,"Vehicle Parts Purchase","Please insert the amount of Vehicle Parts you would like to purchase in the field below.\n\nNote: Each vehicle part costs two dollars.","Buy","Back");
		return 0;
	}
	if(amount*2 > User[playerid][uMoney])
	{
	    MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money for this purchase.");
		Dialog_Show(playerid,dHardwareStore_VehiclePa,DIALOG_STYLE_INPUT,"Vehicle Parts Purchase","Please insert the amount of Vehicle Parts you would like to purchase in the field below.\n\nNote: Each vehicle part costs two dollars.","Buy","Back");
		return 0;
	}
	GiveMoney(playerid,-amount*2);
	new id = FindPlayerItemFree(playerid,"Vehicle Part");
	printf("[vehiclepart_debug] Returned Item ID: %d",id);
	UpdateItem(playerid, id, GetItemID("Vehicle Part"), "Vehicle Part", amount, 100, true);
	BusinessTill(User[playerid][BusinessIN], amount*2);
	SFM(playerid,GREEN,"Info:"GR" You have purchased Vehicle Part (%d) for "G"$%d"GR".",amount,amount*2);
	return 1;
}
Dialog:dClothesStore(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        switch(listitem)
        {
			case 0: 
			{
				format(large_string, 256, "Please insert in the field below the ID of the skin you would like to acquire.\nCustom skins IDs are from %d to %d.", CUSTOM_SKIN_START, CUSTOM_SKIN_END);
				Dialog_Show(playerid,dPickClothes,DIALOG_STYLE_INPUT,"Clothes",large_string,"Display","Cancel");
			}
			case 1: Dialog_Show(playerid,dPickAcc,DIALOG_STYLE_INPUT,"Attachments","Please insert in the field below the ID of the attachment you would like to acquire.","Select","Cancel");
			case 2:
			{
			    if(User[playerid][uMoney] < 250)
			    {
			        MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
			        return 1;
			    }

				new id = FindPlayerItemFree(playerid,"Mask");
				new donatr = 5;
				if(isnull(User[playerid][donator])) donatr = 0;
				UpdateItem(playerid, id, GetItemID("Mask"), "Mask", 1, MAX_MASK_USAGE+donatr, true);
				MSG(playerid,GREEN,"Info:"GR" You have purchased a Mask.");
    			BusinessTill(User[playerid][BusinessIN], 250);
    			GiveMoney(playerid,-250);
			}
		}

    }
    //else MSG(playerid,GOLD,"Info:"GR" You have cancelled the dialog.");
    return 1;
}

Dialog:dPickAcc(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		new obj = strval(inputtext);
		if(obj < -999)
		{
			AttachPicked[playerid] = obj;
			Dialog_Show(playerid,dConfirmAcc,DIALOG_STYLE_MSGBOX,"Attachments","Are you sure you want to purchase this attachment?","Yes","Back");
			ShowIt(playerid,obj);		
			return 1;	
		}		
		if(!IsNumeric(inputtext))
		{
            print("not numeric");
			MSG(playerid,GOLD,"ERROR:"GR" Invalid input.");
			Dialog_Show(playerid,dPickAcc,DIALOG_STYLE_INPUT,"Attachments","Please insert in the field below the ID of the attachment you would like to acquire.","Select","Cancel");
			return 1;
		}
		if(obj <= 311)
		{
		    print("<= 311");
			MSG(playerid,GOLD,"ERROR:"GR" Invalid input.");
			Dialog_Show(playerid,dPickAcc,DIALOG_STYLE_INPUT,"Attachments","Please insert in the field below the ID of the attachment you would like to acquire.","Select","Cancel");
			return 1;
		}
		AttachPicked[playerid] = obj;
		Dialog_Show(playerid,dConfirmAcc,DIALOG_STYLE_MSGBOX,"Attachments","Are you sure you want to purchase this attachment?","Yes","Back");
		ShowIt(playerid,obj);
	}
	//else MSG(playerid,GOLD,"Info:"GR" You have cancelled the dialog.");
    return 1;
}
Dialog:dConfirmAcc(playerid, response, listitem, inputtext[])
{
    User[playerid][gVar] = -10000;
    if (response)
    {
		if(User[playerid][uMoney] < 25)
  			return MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money to make this purchase.");
        new obj = AttachPicked[playerid];
		new donatr,bool:t;
		if(!isnull(User[playerid][donator])) donatr = 3;
		else donatr = 0;
		for(new i = 0; i < MAX_ATTACHMENTS+donatr; i++)
		{
			if(ao[playerid][i][ao_model] == 0)
			{
			    SetPlayerAttachedObject(playerid, i, obj, 1);
			    EditAttachedObject(playerid,i);
			    t = true;
			    break;
			}
		}
		if(!t) return MSG(playerid,GOLD,"ERROR:"GR" Your slots are full.");
		GiveMoney(playerid,-25);
		BusinessTill(User[playerid][BusinessIN],25);
		MSG(playerid,GOLD,"Info:"GR" You have purchased an attachment. Click the save button in order to validate the purchase and save the attachment.");
		MSG(playerid,GOLD,"Info:"RR" Please note if you cancel the editing your attachment will be erased"GR".");
		MSG(playerid,GOLD,"Info:"GR" Type (/attachments) to open the configuration menu after saving it.");
    }
    else
	{
		Dialog_Show(playerid,dPickAcc,DIALOG_STYLE_INPUT,"Attachments","Please insert in the field below the ID of the attachment you would like to acquire.","Select","Cancel");
		PlayerTextDrawHide(playerid,ShowSkin[playerid]);
		TextDrawHideForPlayer(playerid, ShowFrame);
	}
	return 1;
}

Dialog:SetHouseRent(playerid, response, listitem, inputtext[])
{
	if(response)
	{

		if(!IsNumeric(inputtext))
		{
			MSG(playerid,GOLD,"ERROR:"GR" Invalid input.");
			Dialog_Show(playerid,SetHouseRent,DIALOG_STYLE_INPUT,"House Rent","Input a positive value in the field below which represents your house rental price:","Set","Cancel");
			return 1;
		}
		new price = strval(inputtext);
		if(price < 1)
  		{
		  	MSG(playerid,GOLD,"ERROR:"GR" Invalid input.");
		  	Dialog_Show(playerid,SetHouseRent,DIALOG_STYLE_INPUT,"House Rent","Input a positive value in the field below which represents your house rental price:","Set","Cancel");
		  	return 1;
		}
		else if(price > 500)
		{
		  	MSG(playerid,GOLD,"ERROR:"GR" The rent cannot be greater than $500.");
		  	Dialog_Show(playerid,SetHouseRent,DIALOG_STYLE_INPUT,"House Rent","Input a positive value in the field below which represents your house rental price:","Set","Cancel");
		  	return 1;
		}
		new id = BusinessID[playerid];
		H[id][hrent] = price;
		new query[120];
		if(H[id][hrentable] == 1)
		{
  			format(query,sizeof query,""G"House\n"W"%s\nRent: %d",H[id][hname],H[id][hrent]);
			UpdateDynamic3DTextLabelText(H[id][HLabel],SOLIDWHITE,query);
		}
		MSG(playerid,GREEN,"Info:"GR" You have set the house's rent.");
		format(query,sizeof query,"UPDATE house SET rent = %d WHERE hid = %d",H[id][hrent],id);
		db_query(Database,query);
	}
	TogglePlayerControllable(playerid,1);

	return 1;
}
CMD:attachments(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new donatr,str[300];
		if(!isnull(User[playerid][donator])) donatr = 3;
		else donatr = 0;
		new nname[10];
		new tmodel[15];
		for(new i = 0; i < MAX_ATTACHMENTS+donatr; i++)
		{
		    switch(i)
		    {
		        case 0: nname = "First";
		        case 1: nname = "Second";
		        case 2: nname = "Third";
		        case 3: nname = "Forth";
		        case 4: nname = "Fifth";
		        case 5: nname = "Sixth";
		    }
		    if(ao[playerid][i][ao_model] == 0) tmodel = "none";
		    else format(tmodel,sizeof tmodel,"%d",ao[playerid][i][ao_model]);
			if(!IsPlayerAttachedObjectSlotUsed(playerid,i))
			{
  				format(str,sizeof str,"%s%s Attachment (%s)\n",str,nname,tmodel);
			}
			else
			{
                format(str,sizeof str,"%s"R"%s Attachment: (%s)\n",str,nname,tmodel);
			}//%sAttachment ID %d\n
		}
		Dialog_Show(playerid,dAttachments,DIALOG_STYLE_LIST,"Attachments Configuration",str,"Select","Cancel");
	}
	else return 0;
	return 1;
}
Dialog:dAttachments(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(User[playerid][Logged] == false)
			return 0;
        IndexPicked[playerid] = listitem;
 	    if(ao[playerid][IndexPicked[playerid]][ao_model] == 0)
	    {
	        MSG(playerid,GOLD,"ERROR:"GR" You have selected an empty attachment index.");
			return cmd_attachments(playerid,"");
	    }
		//"1. Detach/Attach the attachment.\n2. Edit the attachment.\n3. Edit the attachment bone.\n4. Reset the attachment.\n5. Change the attachment's color.\n6. Remove the attachment."
        Dialog_Show(playerid,dAttachmentConfig,DIALOG_STYLE_LIST,"Attachments Configuration","1. "G"Use"W"/"RR"Remove"W" Attachment"W"\n2. Edit Attachment\n3. Set Attachment Bone\n4. Reset Attachment\n5. Change Attachment Color\n6. Discard Attachment","Select","Cancel");
	}
	//else MSG(playerid,GOLD,"Info:"GR" You have cancelled the dialog.");
	return 1;
}
Dialog:dAttachmentConfig(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(User[playerid][Logged] == false)
			return 0;
	    new query[256];
        switch(listitem)
        {
            case 0: // equip and unequip attachments
            {
                if(IsPlayerAttachedObjectSlotUsed(playerid,IndexPicked[playerid]))
				{
	                format(query, sizeof query,"UPDATE attachments SET equip = 0 WHERE userid = %d AND aindex = %d",User[playerid][UserID],IndexPicked[playerid]);
	                db_query(Database, query);
	                RemovePlayerAttachedObject(playerid,IndexPicked[playerid]);
	                MSG(playerid,GOLD,"Info:"GR" You have detached the specified attachment.");
					ao[playerid][IndexPicked[playerid]][ao_equip] = 0;
                }
                else
                {
	                format(query, sizeof query,"UPDATE attachments SET equip = 1 WHERE userid = %d AND aindex = %d",User[playerid][UserID],IndexPicked[playerid]);
	                db_query(Database, query);
					new i = IndexPicked[playerid];

       			 	SetPlayerAttachedObject(playerid, i, ao[playerid][i][ao_model],ao[playerid][i][ao_bone],
		 			ao[playerid][i][ao_x], ao[playerid][i][ao_y], ao[playerid][i][ao_z],
		 			ao[playerid][i][ao_rx], ao[playerid][i][ao_ry], ao[playerid][i][ao_rz],
					ao[playerid][i][ao_sx], ao[playerid][i][ao_sy], ao[playerid][i][ao_sz], ao[playerid][i][ao_color]);
					ao[playerid][i][ao_equip] = 1;
					MSG(playerid,GOLD,"Info:"GR" You have equipped the specified attachment.");
                }
            }
            case 1: // editing attachments
            {
				MSG(playerid,GOLD,"Info:"GR" You begun editing the specified attachment.");
				EditAttachedObject(playerid,IndexPicked[playerid]);
            }
            case 2: // change bone
            {
                Dialog_Show(playerid,dAttachmentBone,DIALOG_STYLE_LIST,"Edit the Attachment Bone", "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nLeft forearm\nRight forearm\nLeft clavicle\nRight clavicle\nNeck\nJaw", "Select", "Back");
            }
            case 3: // resetting
            {
                new index = IndexPicked[playerid];
		        ao[playerid][index][ao_x] = 0.0;
		        ao[playerid][index][ao_y] = 0.0;
		        ao[playerid][index][ao_z] = 0.0;
		        ao[playerid][index][ao_rx] = 0.0;
		        ao[playerid][index][ao_ry] = 0.0;
		        ao[playerid][index][ao_rz] = 0.0;
		        ao[playerid][index][ao_sx] = 1.0;
		        ao[playerid][index][ao_sy] = 1.0;
		        ao[playerid][index][ao_sz] = 1.0;
				ao[playerid][index][ao_bone] = 1;
				ao[playerid][index][ao_color] = 0;
		        format(large_string,sizeof large_string,
				"UPDATE attachments SET x = 0.0,y = 0.0,z = 0.0,rx = 0.0,ry = 0.0,rz = 0.0,sx = 1.0,sy = 1.0,sz = 1.0 WHERE userid = %d AND aindex = %d"
				,User[playerid][UserID],IndexPicked[playerid]);
		        db_query(Database, large_string);
		        new nname[10];
			  	switch(index)
			  	{
			  		case 0: nname = "first";
			  		case 1: nname = "second";
			  		case 2: nname = "third";
			  		case 3: nname = "forth";
			  		case 4: nname = "fifth";
			  		case 5: nname = "sixth";
			  	}
				format(query,sizeof query,""R"Info:"GR" You have reset the %s attachment.",nname);
				MSG(playerid,GRAD2,query);
				RemovePlayerAttachedObject(playerid, index);
		 		SetPlayerAttachedObject(playerid, index, ao[playerid][index][ao_model],ao[playerid][index][ao_bone],
 				ao[playerid][index][ao_x], ao[playerid][index][ao_y], ao[playerid][index][ao_z],
 				ao[playerid][index][ao_rx], ao[playerid][index][ao_ry], ao[playerid][index][ao_rz],
				ao[playerid][index][ao_sx], ao[playerid][index][ao_sy], ao[playerid][index][ao_sz], 0);
				//EditAttachedObject(playerid, index);
            }
            case 4: // recolor
            {
                Dialog_Show(playerid,dAttachColor,DIALOG_STYLE_INPUT
				,"Attachments Configuration"
				,"Please insert a color code in the empty field below.\n\nHere's a sample list of valid colors:\nBlack - FF111111\nYellow - FFFFFF00","Color","Cancel");
            }
            case 5: // remove
            {
                new index = IndexPicked[playerid];
		        ao[playerid][index][ao_x] = 0;
		        ao[playerid][index][ao_y] = 0;
		        ao[playerid][index][ao_z] = 0;
		        ao[playerid][index][ao_rx] = 0;
		        ao[playerid][index][ao_ry] = 0;
		        ao[playerid][index][ao_rz] = 0;
		        ao[playerid][index][ao_sx] = 0;
		        ao[playerid][index][ao_sy] = 0;
		        ao[playerid][index][ao_sz] = 0;
		        ao[playerid][index][ao_bone] = 1;
		        ao[playerid][index][ao_model] = 0;
		        RemovePlayerAttachedObject(playerid, index);
		        new nname[10];
			  	switch(index)
			  	{
			  		case 0: nname = "first";
			  		case 1: nname = "second";
			  		case 2: nname = "third";
			  		case 3: nname = "forth";
			  		case 4: nname = "fifth";
			  		case 5: nname = "sixth";
			  	}
				format(query,sizeof query,""R"Info:"GR" You have deleted the %s attachment.",nname);
				MSG(playerid,GRAD2,query);
				format(query,sizeof query,"DELETE FROM attachments WHERE userid = %d AND aindex = %d",User[playerid][UserID],index);
				db_query(Database, query);
				cmd_attachments(playerid,"");

            }
        }
	}
	else return cmd_attachments(playerid,"");
	return 1;
}
Dialog:dAttachColor(playerid, response, listitem, inputtext[]) // Changing bone
{
	if(response)
	{
		if(User[playerid][Logged] == false)
			return 0;
		new scolor[12];
		format(scolor,sizeof scolor,"0x%s",inputtext);
		new color = HexToInt(scolor);
		new i = IndexPicked[playerid];
		SetPlayerAttachedObject(playerid, i, ao[playerid][i][ao_model],ao[playerid][i][ao_bone],
		ao[playerid][i][ao_x], ao[playerid][i][ao_y], ao[playerid][i][ao_z],
		ao[playerid][i][ao_rx], ao[playerid][i][ao_ry], ao[playerid][i][ao_rz],
		ao[playerid][i][ao_sx], ao[playerid][i][ao_sy], ao[playerid][i][ao_sz],color);

		ao[playerid][i][ao_color] = color;

		new query[100];
		format(query,sizeof query,"UPDATE attachments SET ocolor = %d WHERE userid = %d AND aindex = %d",color,User[playerid][UserID],i);
		db_query(Database, query);
	}
	else return cmd_attachments(playerid,"");
	return 1;
}
stock HexToInt(string[])
{
    if(!string[0]) return 0;
    new cur = 1, res = 0;
    for(new i = strlen(string); i > 0; i--)
    {
        res += cur * (string[i - 1] - ((string[i - 1] < 58) ? (48) : (55)));
        cur = cur * 16;
    }
    return res;
}

Dialog:dAttachmentBone(playerid, response, listitem, inputtext[]) // Changing bone
{
	if(response)
	{
		if(User[playerid][Logged] == false)
			return 0;
	    listitem++;
		new query[124],nname[10];
		format(query,sizeof query,"UPDATE attachments SET boneid = %d WHERE userid = %d AND aindex = %d",listitem,User[playerid][UserID],IndexPicked[playerid]);
		db_query(Database, query);
	  	switch(IndexPicked[playerid])
	  	{
	  		case 0: nname = "first";
	  		case 1: nname = "second";
	  		case 2: nname = "third";
	  		case 3: nname = "forth";
	  		case 4: nname = "fifth";
	  		case 5: nname = "sixth";
	  	}
		format(query,sizeof query,""R"Info:"GR" You have edited the bone of the %s attachment.",nname);
		MSG(playerid,GRAD2,query);
		new i = IndexPicked[playerid];
		ao[playerid][i][ao_bone] = listitem;
		SetPlayerAttachedObject(playerid, i, ao[playerid][i][ao_model],ao[playerid][i][ao_bone],
		ao[playerid][i][ao_x], ao[playerid][i][ao_y], ao[playerid][i][ao_z],
		ao[playerid][i][ao_rx], ao[playerid][i][ao_ry], ao[playerid][i][ao_rz],
		ao[playerid][i][ao_sx], ao[playerid][i][ao_sy], ao[playerid][i][ao_sz], ao[playerid][i][ao_color]);
		EditAttachedObject(playerid,i);
	}
	else return cmd_attachments(playerid,"");
	return 1;
}

stock ShowIt(playerid,thing)
{
	if(User[playerid][uSkin] > 0)
	{
		/*ShowSkin[playerid] = CreatePlayerTextDraw(playerid,13.333333, 195.633331, "_");
		PlayerTextDrawBackgroundColor(playerid,ShowSkin[playerid], 116);//TextDrawBackgroundColor(ShowSkin[playerid], 204);
		PlayerTextDrawFont(playerid,ShowSkin[playerid], 5);
		PlayerTextDrawColor(playerid,ShowSkin[playerid], -1);
		PlayerTextDrawUseBox(playerid,ShowSkin[playerid], 1);
		PlayerTextDrawBoxColor(playerid,ShowSkin[playerid], 255);
		PlayerTextDrawTextSize(playerid,ShowSkin[playerid],125,125);*/
	    User[playerid][gVar] = 0;
      	PlayerTextDrawSetPreviewRot(playerid,ShowSkin[playerid], -16.000000, 0.000000, 0.000000,1);
        PlayerTextDrawSetPreviewModel(playerid,ShowSkin[playerid],thing);
        PlayerTextDrawSetPreviewVehCol(playerid,ShowSkin[playerid],1,1);
        PlayerTextDrawShow(playerid,ShowSkin[playerid]);
		ShowTimer[playerid] = SetTimerEx("RotatePreview",500,0,"ddd",playerid,1,thing);
		TextDrawShowForPlayer(playerid, ShowFrame);
	    return 1;
	}
	return 0;
}

public RotatePreview(playerid,times,whatt)
{
	if(User[playerid][gVar] == -10000)
	{
	    User[playerid][gVar] = 0;
		//PlayerTextDrawDestroy(playerid,ShowSkin[playerid]);
		PlayerTextDrawHide(playerid, ShowSkin[playerid]);
		TextDrawHideForPlayer(playerid, ShowFrame);
		KillTimer(ShowTimer[playerid]);
		return 1;
	}
	new z;
	z += times*72;
	PlayerTextDrawSetPreviewRot(playerid,ShowSkin[playerid], -16.000000, 0.000000,z,1);
	PlayerTextDrawShow(playerid,ShowSkin[playerid]);
 	times++;
	if(times > 5)
	{
	    PlayerTextDrawSetPreviewRot(playerid,ShowSkin[playerid], -16.000000, 0.000000, 0.000000,1);
	    PlayerTextDrawShow(playerid,ShowSkin[playerid]);
	}
	else
	{
        KillTimer(ShowTimer[playerid]);
		ShowTimer[playerid] = SetTimerEx("RotatePreview",500,0,"ddd",playerid,times,whatt);
	}
	return 1;
}
Dialog:dPickClothes(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		if(!IsNumeric(inputtext))
		{
			MSG(playerid,GOLD,"ERROR:"GR" Insert a positive numeric value.");
			Dialog_Show(playerid,dPickClothes,DIALOG_STYLE_INPUT,"Clothes","Please insert in the field below the ID of the skin you would like to acquire.","Select","Cancel");
			return 1;
		}
		new skin = strval(inputtext);
		new bool:proc;
		switch(skin)
		{
			case 1..311: proc = true;
			case CUSTOM_SKIN_START..CUSTOM_SKIN_END: proc = true;
			default: proc = false;
		}
		//if(skin < 1 || skin > 311 || skin == 74)
		if(!proc)
		{
			MSG(playerid,GOLD,"ERROR:"GR" Invalid input.");
			Dialog_Show(playerid,dPickClothes,DIALOG_STYLE_INPUT,"Clothes","Please insert in the field below the ID of the skin you would like to acquire.","Select","Cancel");
			return 1;
		}
		if(CopSkin(skin) || MedicSkin(skin))
		{
			MSG(playerid,GOLD,"ERROR:"GR" Specified skin is reserved for a faction.");
			Dialog_Show(playerid,dPickClothes,DIALOG_STYLE_INPUT,"Clothes","Please insert in the field below the ID of the skin you would like to acquire.","Select","Cancel");
			return 1;
		}
		ShowIt(playerid,skin);
        //PlayerTextDrawSetPreviewRot(playerid,ShowSkin[playerid], -16.000000, 0.000000, 180.000000,1);
        //PlayerTextDrawSetPreviewModel(playerid,ShowSkin[playerid],skin);
        //PlayerTextDrawShow(playerid,ShowSkin[playerid]);
        Dialog_Show(playerid,dConfirmClothes,DIALOG_STYLE_MSGBOX,"Clothes","Are you sure you want to purchase this skin?","Yes","Back");
		User[playerid][uSkin] = skin;
		User[playerid][gVar] = 1;
    }
    //else MSG(playerid,GOLD,"Info:"GR" You have cancelled the dialog.");
    return 1;
}
Dialog:dConfirmClothes(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		new query[100];
		MSG(playerid,GOLD,"Info:"GR" You have purchased a skin for "G"$50"GR". Type (/fix) if the display persists.");
		if(User[playerid][uMoney] < 50)
		{
		    MSG(playerid,GOLD,"ERROR:"GR" You do not have enough money.");
		    User[playerid][gVar] = -10000;
			User[playerid][uSkin] = GetPlayerSkin(playerid);
		    return 1;
		}
		GiveMoney(playerid,-50);
		BusinessTill(User[playerid][BusinessIN],50);
		SetPlayerSkin(playerid,User[playerid][uSkin]);
		format(query,sizeof query,"UPDATE users SET skin = %i WHERE userid = %i",User[playerid][uSkin],User[playerid][UserID]);
		db_query(Database, query);
        User[playerid][gVar] = -10000;

    }
    else
	{
		Dialog_Show(playerid,dPickClothes,DIALOG_STYLE_INPUT,"Clothes","Please insert in the field below the ID of the skin you would like to acquire.","Select","Cancel");
		PlayerTextDrawHide(playerid,ShowSkin[playerid]);
		TextDrawHideForPlayer(playerid, ShowFrame);
		User[playerid][uSkin] = GetPlayerSkin(playerid);
		User[playerid][gVar] = -10000;
	}
    return 1;
}

Dialog:dBusinessSellToPlayer(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		new id = strval(inputtext);
		if(!IsNumeric(inputtext)) return MSG(playerid,GOLD,"ERROR"GR" Invalid business ID specified.");
		if(id > MAX_BUSINESS) return MSG(playerid,GOLD,"ERROR:"GR" Invalid business ID.");
		if(!B[id][btype]) return MSG(playerid,GOLD,"ERROR:"GR" Invalid business ID.");
		if(B[id][bowner] != User[playerid][UserID]) return MSG(playerid,GOLD,"ERROR:"GR" You don't own the specified business.");
		User[playerid][gVar] = id;
		Dialog_Show(playerid,dBusinessSellToPlayerCho, DIALOG_STYLE_INPUT, "Selling a Business","Insert the ID of the player you wish to sell this business to:\n\nPlease note that the player has to manually give you the money!", "Insert", "Decline");
    }
    //else MSG(playerid,GOLD,"Info:"GR" You have cancelled the dialog.");
    return 1;
}
stock GetPlayerBusinessCount(playerid)
{
	if(User[playerid][Logged])
	{
		format(large_string,sizeof large_string,"SELECT 1 FROM business WHERE owner = %d",User[playerid][UserID]);
		new DBResult:Result = db_query(Database, large_string);
		new count = db_num_rows(Result);
		db_free_result(Result);
		return count;
	}
	return 0;
}
Dialog:dBusinessSellToPlayerCho(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		if(!IsNumeric(inputtext)) return MSG(playerid,GOLD,"ERROR"GR" Invalid player ID specified.");
		new id = strval(inputtext);	
		if(id > MAX_PLAYERS) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player ID.");
		if(!User[id][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player ID.");
		if(id == playerid) return MSG(playerid,GOLD,"ERROR:"GR" You are the owner of the specified business.");
		if(B[User[playerid][gVar]][bowner] != User[playerid][UserID]) return MSG(playerid,GOLD,"ERROR:"GR" Selling process aborted due to an error.");
		B[User[playerid][gVar]][bowner] = id;
		format(large_string,sizeof(large_string),"UPDATE business SET owner = %i WHERE bid = %i",User[id][UserID],User[playerid][gVar]);	
		db_query(Database, large_string);
		format(large_string,sizeof large_string,"["LB"Business"GR"] You are now the owner of %s (ID: %d).",B[User[playerid][gVar]][bname],User[playerid][gVar]);
		MSG(id,GRAD2,large_string);
		format(large_string,sizeof large_string,"["LB"Business"GR"] You have sold %s (ID: %d) to %s.",B[User[playerid][gVar]][bname],User[playerid][gVar],User[id][Username]);
		MSG(playerid,GRAD2,large_string);
		B[User[playerid][gVar]][bowner] = User[id][UserID];
		if(GetPlayerBusinessCount(playerid) == 0)
		{
			if(User[playerid][uJob] == JOB_BIZ)
				User[playerid][uJob] = 0;
		}
    }
    //else MSG(playerid,GOLD,"Info:"GR" You have cancelled the dialog.");
    return 1;
}
#define BUSINESS_TREE ""R"SYNTAX:"GR" /business [buy/sell/sellto/till/list/withdraw/deposit]"
CMD:business(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	new bool:valid = true,string[125];
	new option[24],input[24];
	sscanf(params, "s[24]s[24]", option, input);
	if(isnull(params))
	{
	    MSG(playerid,WHITE,BUSINESS_TREE);
	    return 1;
	}
	if(!strcmp(option,"withdraw",true))
	{
		if(User[playerid][BusinessIN] == -1) return MSG(playerid, GOLD, "ERROR:"GR" You need to be inside your business to use this command.");
		if(User[playerid][UserID] != B[User[playerid][BusinessIN]][bowner]) return MSG(playerid,GOLD,"ERROR:"GR" You don't own this business.");
		if(!IsNumeric(input) || isnull(input))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /business withdraw [amount]");
		new amount = strval(input);
		if(amount < 1)
			return MSG(playerid, GOLD, "SYNTAX:"GR" /business withdraw [amount]");
		if(amount > B[User[playerid][BusinessIN]][bsafe])
			return MSG(playerid, GOLD, "ERROR:"GR" You don't have this much in the safe.");
		B[User[playerid][BusinessIN]][bsafe] -= amount;
		GiveMoney(playerid, amount);
		format(large_string,sizeof(large_string),"UPDATE business SET safe = safe-%i WHERE bid = %i", amount, User[playerid][BusinessIN]);	
		db_query(Database, large_string);
		large_string[0] = EOS;
		SFM(playerid, GREEN, "Business Safe:"GR" You have withdrawn "G"$%d"GR" from the till.", amount);
		return 1;
	}
	if(!strcmp(option,"deposit",true))
	{
		if(User[playerid][BusinessIN] == -1) return MSG(playerid, GOLD, "ERROR:"GR" You need to be inside your business to use this command.");
		if(User[playerid][UserID] != B[User[playerid][BusinessIN]][bowner]) return MSG(playerid,GOLD,"ERROR:"GR" You don't own this business.");
		if(!IsNumeric(input) || isnull(input))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /business deposit [amount]");
		new amount = strval(input);
		if(amount < 1)
			return MSG(playerid, GOLD, "SYNTAX:"GR" /business deposit [amount]");
		if(amount > User[playerid][uMoney])
			return MSG(playerid, GOLD, "ERROR:"GR" You don't have this much in the safe.");
		B[User[playerid][BusinessIN]][bsafe] += amount;
		GiveMoney(playerid, -amount);
		format(large_string,sizeof(large_string),"UPDATE business SET safe = safe+%i WHERE bid = %i", amount, User[playerid][BusinessIN]);	
		db_query(Database, large_string);
		large_string[0] = EOS;

		SFM(playerid, GREEN, "Business Safe:"GR" You have deposited "G"$%d"GR" in the till.", amount);

		return 1;
	}
	if(!strcmp(params,"list",true))
	{
		MSG(playerid,WHITE,"Owned businesses:");
		foreach(Biz, i)
		{
			if(User[playerid][UserID] == B[i][bowner])
			{
				format(large_string, sizeof large_string, "[Business Name: %s] [Business ID: %d] [Business Address: %d]",B[i][bname],i,B[i][baddress]);
				MSG(playerid,GRAD2,large_string);
			}
		}
		return 1;
	}
	if(!strcmp(params,"sellto",true))
	{
		if(User[playerid][BusinessIN] == -1)
			return MSG(playerid, GOLD, "ERROR:"GR" You need to be inside your business to use this command.");
		if(User[playerid][UserID] != B[User[playerid][BusinessIN]][bowner])
		    return  MSG(playerid,GOLD,"ERROR:"GR" You don't own this business.");
		Dialog_Show(playerid,dBusinessSellToPlayer, DIALOG_STYLE_INPUT, "Selling a Business","Insert the ID of your business:", "Insert", "Decline");
		return 1;
	}
	if(!strcmp(params,"till",true))
	{
		if(B[User[playerid][BusinessIN]][btype])
		{
		    if(User[playerid][UserID] != B[User[playerid][BusinessIN]][bowner])
		        return MSG(playerid,GOLD,"ERROR:"GR" You don't own this business.");
  			if(B[User[playerid][BusinessIN]][bgov] == 1) return 1;
			format(string,sizeof string,"Business Till:"GR" $%d.",B[User[playerid][BusinessIN]][bsafe]);
			MSG(playerid,GREEN,string);
		}
		return 1;
	}

    if(!strcmp(params, "buy",true))
    {
        if(User[playerid][uJob] > 0 && isnull(User[playerid][donator]))
			return MSG(playerid,GOLD,"ERROR:"GR" You need to leave your current job before buying a business.");
        foreach(Biz,i)
        {
			if(IsPlayerInRangeOfPoint(playerid,2,B[i][bx],B[i][by],B[i][bz]))
			{
				if(B[i][btype])
				{
				    if(B[i][bgov] == 1) return 1;
	           		new DBResult: Result;
	        		format(string,sizeof(string),"SELECT owner FROM business WHERE bid = %d",i);
					Result = db_query(Database, string);
					if(db_num_rows(Result))
					{
						new owner = db_get_field_assoc_int(Result, "owner");
						if(owner != 0) return 1;
					}
					db_free_result(Result);// IMPORTANT
					
				    format(string,sizeof(string),"Are you sure you want to purchase %s (ID:%i) for $%d?",B[i][bname],i,B[i][bprice]);
                    Dialog_Show(playerid,dBusinessBuy, DIALOG_STYLE_MSGBOX, "Purchasing a Business",string, "Yes", "Decline");
                    BusinessID[playerid] = i;
                    break;
				}
			}
        }
		return 1;
    }
    else if(!strcmp(params, "sell",true))
    {
        foreach(Biz,i)
        {
			if(IsPlayerInRangeOfPoint(playerid,2,B[i][bx],B[i][by],B[i][bz]))
			{
				if(B[i][btype])
				{
	           		new DBResult: Result;
	        		format(string,sizeof(string),"SELECT owner FROM business WHERE bid = %d",i);
					Result = db_query(Database, string);
					if(db_num_rows(Result))
					{
						new owner = db_get_field_assoc_int(Result, "owner");
						new Float:multiplier = 0.25;
						if(!isnull(User[playerid][donator])) multiplier = 0.75;
						new foum = floatround(B[i][bprice]*multiplier,floatround_floor);
						if(owner != User[playerid][UserID]) return 1;
				    	format(string,sizeof(string),"Are you sure you want to sell %s (ID:%i)?\nYou will only get twenty-five percentage (seventy-five with premium status) of it's original price. ($%i)",B[i][bname],i,foum);
                    	Dialog_Show(playerid,dBusinessSell, DIALOG_STYLE_MSGBOX, "Selling a Business",string, "Yes", "Decline");
                    	BusinessID[playerid] = i;
					}
					db_free_result(Result);// IMPORTANT
                    break;
				}
			}
        }
		return 1;
    }
	valid = false;
    if(!valid) return MSG(playerid,GOLD,"ERROR:"GR" Invalid option.");
    return 1;
}
Dialog:dBusinessBuy(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		if(isnull(User[playerid][donator]))
		{
			if(GetPlayerBusinessCount(playerid) >= 2)
				return MSG(playerid,GOLD,"ERROR:"GR" You cannot own anymore businesses.");
		}
		else 
		{
			if(GetPlayerBusinessCount(playerid) > 2)
				return MSG(playerid,GOLD,"ERROR:"GR" You cannot own anymore businesses.");	
		}
        new id = BusinessID[playerid],string[125];
        if(User[playerid][uMoney] >= B[id][bprice])
        {
			GiveMoney(playerid,-B[id][bprice]);
			format(string,sizeof string,""BL"Business\n"W"%s\n"BL"ID:"W" %i",B[id][bname],id);
			UpdateDynamic3DTextLabelText(B[id][BLabel], SOLIDWHITE,string);
			B[id][bowner] = User[playerid][UserID];
			MSG(playerid,GOLD,"Info:"GR" You have successfully purchased this business.");
			format(string,sizeof(string),"UPDATE business SET owner = %i WHERE bid = %i",B[id][bowner],id);
			db_query(Database, string);
			User[playerid][uJob] = JOB_BIZ;
			format(string,sizeof(string),"UPDATE users SET ujob = %i WHERE userid = %i",JOB_BIZ,User[playerid][UserID]);
			db_query(Database, string);
        }
        else
        {
             MSG(playerid,GOLD,"ERROR:"GR" You do not have enough money to make this purchase.");
        }
    }
    //else MSG(playerid,GOLD,"Info:"GR" You have cancelled the dialog.");
    return 1;
}
Dialog:dBusinessSell(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        new id = BusinessID[playerid],string[125];
		new Float:multiplier = 0.25;
		if(!isnull(User[playerid][donator])) multiplier = 0.75;
		new foum = floatround(B[id][bprice]*multiplier,floatround_floor);
		GiveMoney(playerid,foum);
  		format(string,sizeof string,"FOR SALE!\n"BL"Business\n"W"%s\n"BL"ID:"W" %i\n"BL"Price:"W" $%i",B[id][bname],id,B[id][bprice]);
		UpdateDynamic3DTextLabelText(B[id][BLabel], SOLIDWHITE,string);
		B[id][bowner] = 0;
		MSG(playerid,GOLD,"Info:"GR" You have sold your business.");
		format(string,sizeof(string),"UPDATE business SET owner = 0 WHERE bid = %i",id);
		db_query(Database, string);
		if(GetPlayerBusinessCount(playerid) == 0)
		{
			if(User[playerid][uJob] == JOB_BIZ)
				User[playerid][uJob] = 0;
		}
    }
    //else MSG(playerid,GOLD,"Info:"GR" You have cancelled the dialog.");
    return 1;
}
/*
stock GiveMoney(playerid, amount)
{
	if(User[playerid][Logged])
	{
		User[playerid][uMoney] += amount;
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid,User[playerid][uMoney]);
	    new query[124];
	    format(query,sizeof(query),"UPDATE users SET money = %i WHERE userid = %i",User[playerid][uMoney],User[playerid][UserID]);
	    db_query(Database,query);
	}
	return 1;
}
*/
/* -------- Business Ends */

/* --------- Jobs */

CMD:endtask(playerid,params[])
{
	if(User[playerid][Logged])
	{
	    //if(User[playerid][JobStarted] == 0) return MSG(playerid,GOLD,"ERROR:"GR" You don't have a task to end.");
	    MSG(playerid,GOLD,"Info:"GR" You have ended your current task.");
		User[playerid][JobStarted] = 0;
		User[playerid][CheckpointsPicked] = 0;
 		if(User[playerid][SideJob] == JOB_SWEEPER || User[playerid][SideJob] == JOB_MOWNER)
		{
			if(IsValidDynamicObject(User[playerid][tLoading])) DestroyDynamicObject(User[playerid][tLoading]);
			User[playerid][SideJob] = 0;
		}
		if(IsValidVehicle(User[playerid][TruckID]))
		{
			if(IsValidDynamicObject(V[User[playerid][TruckID]][crated]))
				DestroyDynamicObject(V[User[playerid][TruckID]][crated]);
			GiveMoney(playerid,-50);
			MSG(playerid, GOLD, "Job:"GR" You have been fined $50 for leaving your job early.");
			DestroyVehicle(User[playerid][TruckID]);
		}
        User[playerid][tLoading] = 0;
		DisablePlayerCheckpoint(playerid);
		DisablePlayerRaceCheckpoint(playerid);
		HidePlayerProgressBar(playerid,gBar);
		User[playerid][TruckID] = -1;
		KillTimer(TruckTimer[playerid]);
	}
	else return 0;
	return 1;
}
CMD:makemecourier(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
    User[playerid][uJob] = JOB_COURIER;
	return 1;
}
public OnTruckDelay(playerid,truckid,iduser)
{
	if(!IsPlayerConnected(playerid) || User[playerid][Logged] == false)
	{
	    DestroyVehicle(truckid);
		if(IsValidDynamicObject(V[truckid][crated])) DestroyDynamicObject(V[truckid][crated]),V[truckid][crated] = 0;
		if(IsValidDynamicObject(User[playerid][tLoading])) DestroyDynamicObject(User[playerid][tLoading]);
		return 0;
	}
	else
	{
		if(User[playerid][UserID] != iduser)
			return 0;
	    MSG(playerid,GOLD,"Info:"GR" You have abandoned your route.");
		DestroyVehicle(truckid);
 		if(User[playerid][SideJob] == JOB_SWEEPER || User[playerid][SideJob] == JOB_MOWNER)
		{
			if(IsValidDynamicObject(User[playerid][tLoading])) DestroyDynamicObject(User[playerid][tLoading]);
			User[playerid][SideJob] = 0;
		}
		User[playerid][JobStarted] = 0;
        User[playerid][tLoading] = 0;
		User[playerid][TruckID] = -1;
		DisablePlayerCheckpoint(playerid);
		DisablePlayerRaceCheckpoint(playerid);
		HidePlayerProgressBar(playerid,gBar);
		return 1;
	}
}
CMD:fastcd(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
    User[playerid][uPB][2] = 0;
    User[playerid][uCourier][2] = 0;
	return 1;
}

CMD:sellfish(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	//if(User[playerid][BusinessINType] != 4) return MSG(playerid,GOLD,"ERROR:"GR" You need to be in a General Store to sell fishes.");
	// old fishing spot 1637.782470,-1535.804809,13.599136
	if(!IsPlayerInRangeOfPoint(playerid, 2, FISHING_SELLPOS)) 
	{
		MSG(playerid,GOLD,"ERROR:"GR" Fish are sold at Dillimore. It has been pinpointed in your minimap.");
		return SetPlayerCheckpoint(playerid, FISHING_SELLPOS, 1);
	}
	new slot,fishname[14];
	large_string[0] = EOS;
	while(slot < 10)
	{
		switch(User[playerid][pFishSlot][slot])
		{
			case 1: fishname = "Common Fish";
			case 2: fishname = "Uncommon Fish";
			case 3: fishname = "Rare Fish";
			default: fishname = "None";
		}
		if(User[playerid][pFishSlot][slot] != 0)
			format(large_string,sizeof large_string,"%s%d. %s (Weight: %dkg)\n",large_string,slot+1,fishname,User[playerid][pFishSlotWeight][slot]);
		else 
			format(large_string,sizeof large_string,"%s%d. None (Weight: N/A)\n",large_string,slot+1);
		slot++;
	}
	Dialog_Show(playerid,SellFish,DIALOG_STYLE_LIST,"Fish Market",large_string,"Sell","Cancel");	
	ApplyAnimation(playerid, "DEALER", "SHOP_PAY", 4.1, false, false, false, false, 0, false);
	return 1;
}
Dialog:SellFish(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(User[playerid][pFishSlot][listitem] != 0)
		{
			format(large_string, 125,"DELETE FROM fishdata WHERE fish = %d AND weight = %d AND userid = %d",User[playerid][pFishSlot][listitem],User[playerid][pFishSlotWeight][listitem],User[playerid][UserID]);
			db_query(Database, large_string);
			new fishname[14];
			switch(User[playerid][pFishSlot][listitem])
			{
				case 1: fishname = "Common Fish";
				case 2: fishname = "Uncommon Fish";
				case 3: fishname = "Rare Fish";
				default: fishname = "None";
			}
			new extra;
			if(User[playerid][pFishSlot][listitem] == 3)
			{
				if(!isnull(User[playerid][donator]))
					extra = 50;
				else extra = 30;
			}
			format(large_string, 125,"Info:"GR" You have a sold a %s (Weight: %dkg) for "G"$%d"GR".",fishname, User[playerid][pFishSlotWeight][listitem], extra+User[playerid][pFishSlotWeight][listitem]*2);
			MSG(playerid,GREEN,large_string);

			GiveMoney(playerid, extra+User[playerid][pFishSlotWeight][listitem]*2);
			User[playerid][pFishSlot][listitem] = 0;
			User[playerid][pFishSlotWeight][listitem] = 0;
		}
		else MSG(playerid,GOLD,"ERROR:"GR" Specified slot is empty!");
		cmd_sellfish(playerid,"");
	}
}
CMD:fish(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	if(User[playerid][animation]) return MSG(playerid,GOLD,"ERROR:"GR" You cannot use this feature right now.");
	new bool:cnn = false;
	if(IsPlayerInAnyVehicle(playerid))
		return MSG(playerid, GOLD, "ERROR:"GR" You cannot cast your fising rod from a vehicle.");
	if(User[playerid][Death] > 0)
		return MSG(playerid, GOLD, "ERROR:"GR" You are incapacitated.");
	if(User[playerid][tazed])
		return MSG(playerid, GOLD, "ERROR:"GR" You are tazed.");
	for(new i = 0; i < sizeof(FishingSpots); i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, FISHING_RANGE,FishingSpots[i][0],FishingSpots[i][1],FishingSpots[i][2]))
	    {
	        cnn = true;
			new slot = FindPlayerItem_Name(playerid, "Fishing Rod");
			if(slot == -1) return MSG(playerid,GOLD,"ERROR:"GR" You need a Fishing Rod to use this command. (General Store)");
			slot = FindPlayerItem_Name(playerid, "Bait");
			if(slot == -1) return MSG(playerid,GOLD,"ERROR:"GR" You need a Bait to use this command. (General Store)");			
			if(!UserItem[playerid][FindPlayerItem_Name(playerid,"Bait")][Value]) return MSG(playerid,GOLD,"ERROR:"GR" You need a Bait to use this command. (General Store)");
			if(User[playerid][JobStarted] != 0) return MSG(playerid,GOLD,"ERROR:"GR" You are working.");
			if(IsValidVehicle(User[playerid][TruckID])) return MSG(playerid,GOLD,"ERROR:"GR" You have already started your job.");

			//TogglePlayerControllable(playerid, 0);
			new	bool:found;
			slot = 0;
			while(slot < 10)
			{
				if(User[playerid][pFishSlot][slot] == 0)
				{
					found = true;
					break;
				}
				slot++;
			}
			if(!found) return MSG(playerid,GOLD,"ERROR:"GR" You are full!");
			new donatr;
			if(!isnull(User[playerid][donator])) donatr = 3;
			RemovePlayerAttachedObject(playerid,GetPVarInt(playerid,"RadarIndex"));
			for(new d = MAX_ATTACHMENTS+donatr; d < MAX_PLAYER_ATTACHED_OBJECTS; d++)
			{
   				if(!IsPlayerAttachedObjectSlotUsed(playerid, d))
				{
    				SetPlayerAttachedObject(playerid, d, 18632, 6, 0.0908, 0.0322, 0.0388, -1.2000, 172.2000, 169.3997, 1.0248, 1.0077, 1.2898);
			    	SetPVarInt(playerid,"RadarIndex",d);
				    break;
				}
			}

			if(isnull(User[playerid][donator])) i = 6+random(4);
			else i = 10+random(6);
			User[playerid][animation] = true;
			ApplyAnimation(playerid, "SWORD", "sword_block", 4.0, 0, 1, 1, 1, 1, 1);
			SetTimerEx("OnPlayerFish",i*1000,0,"d",playerid);
			cmd_bme(playerid,"casts their Fishing Rod.");
			User[playerid][SideJob] = JOB_FISH;
			break;
	    }
	}
	if(!cnn) {
		SetPlayerCheckpoint(playerid, 1398.3240,-286.5357,1.3487, 1);
		return MSG(playerid,GOLD,"ERROR:"GR" You can't fish here. The location has been pinpointed in your map.");
	}
	return 1;
}

public OnPlayerFish(playerid)
{
	if(User[playerid][Logged])
	{
	    RemovePlayerAttachedObject(playerid,GetPVarInt(playerid,"RadarIndex"));
	    User[playerid][animation] = false;
	    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
	    new bool:nearplace = false;
		for(new i = 0; i < sizeof(FishingSpots); i++)
		{
  		  if(IsPlayerInRangeOfPoint(playerid,8,FishingSpots[i][0],FishingSpots[i][1],FishingSpots[i][2]))
				nearplace = true;
	 	}
		if(!nearplace) return MSG(playerid,GOLD,"ERROR:"GR" You moved away from the fishing lagoon.");
		new c = random(100)+1,did,weight,fishname[60]; // did = type of fish
		new id;
		id = FindPlayerItemFree(playerid,"Fishing Rod");
		UserItem[playerid][id][Condition]--;
		format(large_string, sizeof large_string, "UPDATE inventory SET condition = %d WHERE userid = %d AND slot = %d", UserItem[playerid][id][Condition], User[playerid][UserID], id);
		db_query(Database, large_string);		
		switch(c)
		{
		    case 1..20:
		    {
      			PlayerActionMessageBubble(playerid,"has failed to catch a Fish.");
		    }
		    case 21..60:// common  
			{
				did = 1;
				weight = 2+random(15);
				fishname = ""GR"Common Fish"D"";
			} 
			case 61..90: // uncommon
			{
				did = 2;
				weight = 15+random(21);
				fishname = ""LB"Uncommon Fish"D"";
			}
			case 91..100: // rare
			{
				did = 3;
				weight = 26+random(11);
				fishname = ""RR"Rare Fish"D"";
			}
		}
		if(did)
		{
				PlayerActionMessageBubble(playerid,"has caught a Fish.");
			
				format(large_string,sizeof large_string,"You have caught a %s (Weight: %dkg).\nPress 'Pull' to fetch it or 'Cancel' to let go.",fishname,weight);
				Dialog_Show(playerid,FishCatch,DIALOG_STYLE_MSGBOX,"Fishing",large_string,"Pull","Cancel");	

				User[playerid][pfish] = did;
				User[playerid][pfishweight] = weight;
				
				if(UserItem[playerid][id][Condition] < 1)
				{
					UpdateItem(playerid, id, UserItem[playerid][id][Item], UserItem[playerid][id][ItemName], -UserItem[playerid][id][Value]);
					PlayerActionMessageBubble(playerid,"'s Fishing Rod has broke.");
				}
                id = FindPlayerItem_Name(playerid, "Bait");
				UpdateItem(playerid, id, UserItem[playerid][id][Item], UserItem[playerid][id][ItemName], -1, 100, true);
		}
	}
	return 1;
}
Dialog:FishCatch(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new slot = 0;
		while(slot < 10)
		{
			if(User[playerid][pFishSlot][slot] == 0)
				break;
			slot++;
		}
		User[playerid][pFishSlot][slot] = User[playerid][pfish];
		User[playerid][pFishSlotWeight][slot] = User[playerid][pfishweight];
		
		format(large_string, 124,"INSERT INTO fishdata (userid, fish, weight) VALUES (%d, %d, %d)",User[playerid][UserID],User[playerid][pFishSlot][slot],User[playerid][pFishSlotWeight][slot]);
		db_query(Database, large_string);
		PlayerActionMessageBubble(playerid,"pulls a Fish.");
	}
	User[playerid][pfish] = 0;
	User[playerid][pfishweight] = 0;
	
	return 1;
}
CMD:myfish(playerid,params[])
{
	if(User[playerid][Logged])
	{
		MSG(playerid,GRAD2,"|____ ["G"Fish"GR"] ____|");
		for(new i = 0; i < 10; i++)
		{
			new fishname[14];
			switch(User[playerid][pFishSlot][i])
			{
				case 1: fishname = "Common Fish";
				case 2: fishname = "Uncommon Fish";
				case 3: fishname = "Rare Fish";
				default: continue;
			}
			format(large_string, 125, "%s (Weight: %dkg)",fishname, User[playerid][pFishSlotWeight][i]);
			MSG(playerid,GRAD2, large_string);
		}
		MSG(playerid,GRAD2,"|___________________|");
		return 1;
	}
	return 0;
}
CMD:hud(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][showhud] == false)
		{
			User[playerid][showhud] = true;
			TextDrawShowForPlayer(playerid, serverhud);
			if(User[playerid][Userrace] != 1)
			{
				ShowPlayerProgressBar(playerid, bHunger);
				ShowPlayerProgressBar(playerid, bThirst);
			}
			MSG(playerid, GOLD, "Info:"GR" Hud enabled.");
		}
		else
		{
			User[playerid][showhud] = false;
			if(User[playerid][Userrace] != 1)
			{
				ShowPlayerProgressBar(playerid, bThirst);
				ShowPlayerProgressBar(playerid, bHunger);
			}
			TextDrawHideForPlayer(playerid, serverhud);
			MSG(playerid, GOLD, "Info:"GR" Hud disabled.");
		}
		return 1;
	}
	return 0;
}
stock LoadMoon(playerid = 0)
{
	format(large_string, sizeof large_string, "api.farmsense.net/v1/moonphases/?d=%d", gettime());
	HTTP(playerid, HTTP_GET, large_string, "", "HTTP_OnLookupResponse");
	print(large_string);
	return 1;
}
CMD:moon(playerid, params[])
{
	if(User[playerid][Logged] && IsPlayerAdmin(playerid))
	{
		LoadMoon(playerid);
		return 1;
	}
	return 0;
}

forward HTTP_OnLookupResponse(index, response, data[]);
public HTTP_OnLookupResponse(index, response, data[])
{
    new pos = -1;
	print(data);
    if (response == 200)
    {
        if (strfind(data, "invalid date parameter", true) != -1 || strlen(data) < 15)
        {
            return 0;
        }
        else
        {
			pos = strfind(data, "\"Phase\":", false);
			if(pos != -1) 
			{				
				pos += 9;
				moon_phase[0] = EOS;
				strmid(moon_phase, data, pos, strfind(data, "\"", false, pos), sizeof moon_phase);
				printf("[%s][%s] [HTTP_OnLookupResponse] moon_phase has been loaded. [%s]", PasteDate(), PasteTime(),  moon_phase);
			}
			pos = strfind(data, "\"Age\":", false);
			if(pos != -1)
			{
				pos += 5;
				new age[256];
				strmid(age, data, pos, strfind(data, ",", false, pos), sizeof moon_phase);
				strmid(moon_age, age, 1, 5);
				//strmid(dest[], const source[], start, end, maxlength=sizeof dest)
				printf("[%s][%s] [HTTP_OnLookupResponse] moon_age has been loaded. [%s]", PasteDate(), PasteTime(),  moon_age);
			}

			new hud[256];
			format(hud, 256, "%s - %s~n~Moon Phase:~n~ %s~n~Moon Age: %s", PasteDate(true), PasteTimeEx(), moon_phase, moon_age);
			printf("Hud: %s", hud);
			TextDrawSetString(serverhud, hud);
        }
    }
    return 0;
}
CMD:mow(playerid,params[])
{
		if(!User[playerid][Logged]) return 0;
	    if(User[playerid][uMW][2] > 0) return SFM(playerid,GOLD,"ERROR:"GR" You have to wait for the cooldown; %d minute(s) left.",User[playerid][uMW][2]);
		if(!IsPlayerInRangeOfPoint(playerid,2,MOWNER))
		{
			MSG(playerid,GOLD,"ERROR:"GR" You are not in range of your job start point at Glen Park. It has been pinpointed in your map.");
			SetPlayerCheckpoint(playerid,MOWNER,1);
			return 1;
		}
		if(User[playerid][JobStarted] != 0) return MSG(playerid,GOLD,"ERROR:"GR" You are working.");
		if(IsValidVehicle(User[playerid][TruckID])) return MSG(playerid,GOLD,"ERROR:"GR" You have already started your job.");

		MSG(playerid,GOLD,"Info:"GR" You've started your job.");
		MSG(playerid,GOLD,"Info:"GR" Get inside the Mower that has spawned in order to begin your route.");
		MSG(playerid,GOLD,"Info:"GR" If you wish to end your route, type /endtask while being inside the vehicle.");


		SetPlayerCheckpoint(playerid,MOWNER_SPAWN,3);
		User[playerid][TruckID] = CreateVehicle(572,MOWNER_SPAWN,270,1,1,-1);
		V[User[playerid][TruckID]][fuel] = 100;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(User[playerid][TruckID], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(User[playerid][TruckID], VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
		TruckTimer[playerid] = SetTimerEx("OnTruckDelay",60*1000,0,"ddd",playerid,User[playerid][TruckID], User[playerid][UserID]);

		User[playerid][SideJob] = JOB_MOWNER;
		User[playerid][CurrentRun] = JOB_MOWNER;
		return 1;
}
CMD:sweep(playerid,params[])
{
    	if(!User[playerid][Logged]) return 0;
	    if(User[playerid][uSW][2] > 0) return SFM(playerid,GOLD,"ERROR:"GR" You have to wait for the cooldown; %d minute(s) left.",User[playerid][uSW][2]);
		if(!IsPlayerInRangeOfPoint(playerid,2,SWEEPER))
		{
			MSG(playerid,GOLD,"ERROR:"GR" You are not in range of your job start point at Willowfield. It has been pinpointed in your map.");
			SetPlayerCheckpoint(playerid,SWEEPER,1);
			return 1;
		}
		if(User[playerid][JobStarted] != 0) return MSG(playerid,GOLD,"ERROR:"GR" You are working.");
		if(IsValidVehicle(User[playerid][TruckID])) return MSG(playerid,GOLD,"ERROR:"GR" You have already started your job.");

		MSG(playerid,GOLD,"Info:"GR" You've started your job.");
		MSG(playerid,GOLD,"Info:"GR" Get inside the Sweeper that has spawned in order to begin your route.");
		MSG(playerid,GOLD,"Info:"GR" If you wish to end your route, type /endtask while being inside the vehicle.");


		SetPlayerCheckpoint(playerid,SWEEPER_SPAWN,5);
		User[playerid][TruckID] = CreateVehicle(574,SWEEPER_SPAWN,270,1,1,-1);
		V[User[playerid][TruckID]][fuel] = 100;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(User[playerid][TruckID], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(User[playerid][TruckID], VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
		TruckTimer[playerid] = SetTimerEx("OnTruckDelay",60*1000,0,"ddd",playerid,User[playerid][TruckID], User[playerid][UserID]);
		User[playerid][SideJob] = 1;
		User[playerid][CurrentRun] = JOB_SWEEPER;
		return 1;
}
CMD:busroute(playerid,params[])
{
    	if(!User[playerid][Logged]) return 0;
		if(User[playerid][uJob] == JOB_BW)
		{
			if(User[playerid][uBW][2] > 0) return SFM(playerid,GOLD,"ERROR:"GR" You have to wait for the cooldown; %d minute(s) left.",User[playerid][uBW][2]);
			if(!IsPlayerInRangeOfPoint(playerid,2,BUS))
			{
				MSG(playerid,GOLD,"ERROR:"GR" You are not in range of your job start point at El Corona. It has been pinpointed in your map.");
				SetPlayerCheckpoint(playerid,BUS,1);
				return 1;
			}
			if(User[playerid][JobStarted] != 0) return MSG(playerid,GOLD,"ERROR:"GR" You are working.");
			if(IsValidVehicle(User[playerid][TruckID])) return MSG(playerid,GOLD,"ERROR:"GR" You have already started your job.");

			MSG(playerid,GOLD,"Info:"GR" You've started your job.");
			MSG(playerid,GOLD,"Info:"GR" Get inside the Bus that has spawned in order to begin your route.");
			MSG(playerid,GOLD,"Info:"GR" If you wish to end your route, type /endtask while being inside the vehicle.");

			SetPlayerCheckpoint(playerid,BUS_SPAWN,5);
			User[playerid][TruckID] = CreateVehicle(431, BUS_SPAWN, 270, 1, 1, -1);
			V[User[playerid][TruckID]][fuel] = 100;
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(User[playerid][TruckID], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(User[playerid][TruckID], VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
			TruckTimer[playerid] = SetTimerEx("OnTruckDelay",60*1000,0,"ddd",playerid,User[playerid][TruckID], User[playerid][UserID]);
			User[playerid][CurrentRun] = JOB_BW;
		}
		else MSG(playerid,GOLD,"ERROR:"GR" You are not a bus driver! You can pick the job from an employment center.");
		return 1;
}
CMD:opw(playerid,params[]) return cmd_operatewarehouse(playerid,params);
CMD:operatewarehouse(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	if(User[playerid][uJob] == JOB_WH)
	{
	    if(User[playerid][uWH][2] > 0) return SFM(playerid,GOLD,"ERROR:"GR" You have to wait for the cooldown; %d minute(s) left.",User[playerid][uWH][2]);
		if(!IsPlayerInRangeOfPoint(playerid,2,WHOperative))
		{
			MSG(playerid,GOLD,"ERROR:"GR" You are not in range of your job start point at Ocean Docks. It has been pinpointed in your map.");
			SetPlayerCheckpoint(playerid,WHOperative,1);
			return 1;
		}
		if(User[playerid][JobStarted] != 0) return MSG(playerid,GOLD,"ERROR:"GR" You are working.");
		if(IsValidVehicle(User[playerid][TruckID])) return MSG(playerid,GOLD,"ERROR:"GR" You have already started your job.");

		MSG(playerid,GOLD,"Info:"GR" You've started your job.");
		MSG(playerid,GOLD,"Info:"GR" Get inside the Forklift that has spawned in order to begin your route.");
		MSG(playerid,GOLD,"Info:"GR" If you wish to end your route, type /endtask while being inside the vehicle.");


		SetPlayerCheckpoint(playerid,WHOperative,5);
		User[playerid][TruckID] = CreateVehicle(530,WHOperative,180,1,1,-1);
		V[User[playerid][TruckID]][fuel] = 100;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(User[playerid][TruckID], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(User[playerid][TruckID], VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
		TruckTimer[playerid] = SetTimerEx("OnTruckDelay",60*1000,0,"ddd",playerid,User[playerid][TruckID], User[playerid][UserID]);
		User[playerid][CurrentRun] = JOB_WH;
	}
	else MSG(playerid,GOLD,"ERROR:"GR" You are not a Warehouse Operative! You can pick the job from an employment center.");
	return 1;
}
CMD:pb(playerid,params[]) return cmd_pizzaboy(playerid,params);
CMD:pizzaboy(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	if(User[playerid][uJob] == JOB_PB)
	{
	    if(User[playerid][uPB][2] > 0) return SFM(playerid,GOLD,"ERROR:"GR" You have to wait for the cooldown; %d minute(s) left.",User[playerid][uPB][2]);
		if(!IsPlayerInRangeOfPoint(playerid,2,PizzaboyPick))
		{
			MSG(playerid,GOLD,"ERROR:"GR" You are not in range of your job start point at Idlewood. It has been pinpointed in your map.");
			SetPlayerCheckpoint(playerid,PizzaboyPick,1);
			return 1;
		}
		if(User[playerid][JobStarted] != 0) return MSG(playerid,GOLD,"ERROR:"GR" You are working.");
		if(IsValidVehicle(User[playerid][TruckID])) return MSG(playerid,GOLD,"ERROR:"GR" You have already started your job.");

		MSG(playerid,GOLD,"Info:"GR" You've started your job.");
		MSG(playerid,GOLD,"Info:"GR" Get inside the bike that has spawned in order to begin your route.");
		MSG(playerid,GOLD,"Info:"GR" If you wish to end your route, type /endtask whilst in the bike.");
		SetPlayerCheckpoint(playerid,PB_SPAWN,5);
		User[playerid][TruckID] = CreateVehicle(448,PB_SPAWN,90,1,1,-1);
		V[User[playerid][TruckID]][fuel] = 100;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(User[playerid][TruckID], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(User[playerid][TruckID], VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
		TruckTimer[playerid] = SetTimerEx("OnTruckDelay",60*1000,0,"ddd",playerid,User[playerid][TruckID],User[playerid][UserID]);
		User[playerid][CurrentRun] = JOB_PB;
	}
	else MSG(playerid,GOLD,"ERROR:"GR" You are not a Pizzaboy! You can pick the job from an employment center.");
	return 1;
}

CMD:sc(playerid,params[]) return cmd_startcourier(playerid,params);
CMD:startcourier(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	if(User[playerid][uJob] == JOB_COURIER)
	{
		if(User[playerid][uCourier][2] > 0) return SFM(playerid,GOLD,"ERROR:"GR" You have to wait for the cooldown; %d minute(s) left.",User[playerid][uCourier][2]);
		if(!IsPlayerInRangeOfPoint(playerid,2,CourierJob))
		{
			MSG(playerid,GOLD,"ERROR:"GR" You are not in range of your job start point at Blueberry. It has been pinpointed in your map.");
			SetPlayerCheckpoint(playerid,CourierJob,1);
			return 1;
		}
		if(User[playerid][JobStarted] != 0) return MSG(playerid,GOLD,"ERROR:"GR" You are working.");
		if(IsValidVehicle(User[playerid][TruckID])) return MSG(playerid,GOLD,"ERROR:"GR" You have already started your job.");


		MSG(playerid,GOLD,"Info:"GR" You've started your job.");
		MSG(playerid,GOLD,"Info:"GR" Get inside the truck that has spawned in order to begin your route.");
		MSG(playerid,GOLD,"Info:"GR" If you wish to end your route, type /endtask whilst in the truck. ");
		SetPlayerCheckpoint(playerid,TRUCK_SPAWN,5);
		User[playerid][TruckID] = CreateVehicle(456,TRUCK_SPAWN,90,1,1,-1);
		V[User[playerid][TruckID]][fuel] = 100;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(User[playerid][TruckID], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(User[playerid][TruckID], VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
		TruckTimer[playerid] = SetTimerEx("OnTruckDelay",60*1000,0,"ddd",playerid,User[playerid][TruckID],User[playerid][UserID]);
		User[playerid][CurrentRun] = JOB_COURIER;
	}
	else MSG(playerid,GOLD,"ERROR:"GR" You are not a Courier! You can pick the job from an employment center.");
	return 1;
}
CMD:rc(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	DisablePlayerCheckpoint(playerid);
	if(User[playerid][pDeal] == 1 || User[playerid][pDeal] == 2)
	{
	    DestroyActor(User[playerid][pActor]);
	    User[playerid][pDeal] = 0;
	    User[playerid][pActor] = -1;
	    MSG(playerid,GOLD,"Info:"GR" Deal has finished.");
	}
	return 1;
}
CMD:fix(playerid,params[])
{
	if(User[playerid][Logged])
	{
		PlayerTextDrawHide(playerid, ShowSkin[playerid]);
		return TextDrawHideForPlayer(playerid, ShowFrame);
	}
	return 0;
}
// Vehicle System starts from here

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    return 1;
}
public OnVehicleMod(playerid,vehicleid,componentid)
{
    if(GetPlayerInterior(playerid) == 0)
        return BanPlayer(playerid,"Admin","Vehicle Modification Hacks.");
	
	if(V[vehicleid][dataid] > 0)
	{
		new query[124];
		format(query, sizeof query, "INSERT INTO carmods (car, mod) VALUES (%d, %d)", V[vehicleid][dataid], componentid);
		db_query(Database, query);
		//
	}
    return 1;
}
public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	//SFM(playerid, GREEN, "Vehicle ID %d; %d %d", vehicleid, color1, color2);
    return 1;
}
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    if(GetPlayerInterior(playerid) == 0)
    {
        BanPlayer(playerid,"Admin","Vehicle Modification Hacks.");
        return 0; 
    }	
    return 1;
}
stock SpawnVehicle(owner,model,Float:x,Float:y,Float:z,Float:rotation,color1,color2,respawndelay = -1,addsiren = 0)
{
	new vid = CreateVehicle(model,x,y,z,rotation+90,color1,color2,respawndelay,addsiren);
	V[vid][vmodel] = model;
	V[vid][vc1] = color1;
	V[vid][vc2] = color2;
	V[vid][cowner] = owner;
	V[vid][vx] = x;
	V[vid][vy] = y;
	V[vid][vz] = z;
	V[vid][fuel] = 100;
	format(V[vid][vplate], 24, "LS%d", 1000+random(1000));
	SetVehicleNumberPlate(vid, V[vid][vplate]);
	GetVehicleZAngle(vid, V[vid][vrot]);
	V[vid][siren] = addsiren;
	new sx[10],sy[10],sz[10],srot[10];
	format(sx,sizeof sx,"%f",V[vid][vx]);
	format(sy,sizeof sy,"%f",V[vid][vy]);
	format(sz,sizeof sz,"%f",V[vid][vz]);
	format(srot,sizeof srot,"%f",V[vid][vrot]);
	printf("srot: %s; V[vid][vrot]: %d",srot,V[vid][vrot]);
	format(large_string,sizeof(large_string), "INSERT INTO cars (model,x,y,z,rot,color1,color2,owner,siren,plate,paintjob,fuel) VALUES (%d,'%s','%s','%s','%s',%d,%d,%d,%d,'%s',3, 100)"
	,V[vid][vmodel],sx,sy,sz,srot,V[vid][vc1],V[vid][vc2],V[vid][cowner],addsiren,V[vid][vplate]);
	db_query(Database,large_string);

	new DBResult: Result;
	Result = db_query(Database,"SELECT last_insert_rowid()");
	V[vid][dataid] = db_get_field_int(Result);
	db_free_result(Result);

	printf("[%s][%s] Created a vehicle. (Game ID: %i | Data ID: %i)",PasteDate(),PasteTime(),V[vid][gameid],V[vid][dataid]);
	return vid;
}
CMD:pnpc(playerid, params[])
{
	if(User[playerid][Useradmin] != 0)
	{
		new id;
		if(sscanf(params,"u", id))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /pnpc [playerid/PartOfName]");
		if(GetPVarInt(id, "pNPCPerm") == 1)
		{
			SetPVarInt(id, "pNPCPerm", 0);
			format(large_string, sizeof large_string, "STFCMD: %s has taken %s NPC permissions; it lasts until they disconnect.", User[playerid][forumname], User[id][pUsername]);
		}
		else 
		{
			SetPVarInt(id, "pNPCPerm", 1);
			format(large_string, sizeof large_string, "STFCMD: %s has granted %s NPC permissions; it lasts until they disconnect.", User[playerid][forumname], User[id][pUsername]);
		}
		Staff(ADMIN, large_string);
		return 1;
	}
	return 0;
}
// Player Labels:
CMD:plabel(playerid,params[]) 
{
	if(User[playerid][Logged])
	{
		new id = playerid;
		if(!isnull(params) && IsNumeric(params))
			id = strval(params);
		new query[124];
		if(isnull(User[playerid][donator]))
		{
			format(query, sizeof query, "SELECT 1 FROM plabels WHERE userid = %d", User[playerid][UserID]);
			new DBResult: Result = db_query(Database, query);
			if(db_num_rows(Result) > 5)
			{
				db_free_result(Result);
				MSG(playerid, GOLD, "ERROR:"GR" You have five player labels! Discard one to be able to create another label.");
				return 1;
			}
		}	
		Dialog_Show(playerid, dPlayerLabelCreate, DIALOG_STYLE_INPUT, sendername(id), "Insert your label below, color embedding is  possible.\n\n{c2a2da}Roleplay - C2A2DA\n{a292af}Dark Roleplay - A292AF\n{f4c542}Human - F4C542\n{862b22}Werewolf - 862b22\n{930404}Vampire - 930404\n{8b9c49}Hunter - 8b9c49\n{9400D3}Mage - 9400D3\n{3a3887}Demon - 3a3887", "Close", "");
		SetPVarInt(playerid, "pLabelPlayer", id);
		return 1;
	}
	return 0;
}
CMD:dplabel(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new npcid;
		if(sscanf(params,"i", npcid))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /dplabel [labelid]");
		SFM(playerid, WHITE, "SERVER: Player Label (ID: %d) has been removed.", npcid);
		format(large_string, sizeof large_string, "DELETE FROM plabels WHERE labelid = %d AND userid = %d", npcid, User[playerid][UserID]);
		db_query(Database, large_string);		
		return 1;
	}
	else return MSG(playerid, GOLD, "Info:"GR" You do not have the appropriate permissions to operate this command.");
}
CMD:plabels(playerid, params[])
{
	if(User[playerid][Logged])
	{
		format(large_string, sizeof large_string, "SELECT * FROM plabels WHERE userid = %d", User[playerid][UserID]);
		new DBResult: Result = db_query(Database,large_string);
		large_string[0] = EOS;
		strcat(large_string, "Disable Player Label\n");
		new bool:found = false;
		do
		{
			if(db_num_rows(Result))
			{
				new labelid;
				new labelname[65];
				labelid = db_get_field_assoc_int(Result, "labelid");
				db_get_field_assoc(Result, "label", labelname, 130);
				format(large_string, sizeof large_string,"%s[%d] %s"D"\n", large_string, labelid, labelname);	
				found = true;
			}
			else break;
		}
		while(db_next_row(Result));
		if(!found)	
			return MSG(playerid, GOLD, "Info:"GR" You don't have any player labels.");
		Dialog_Show(playerid, dPlayerLabelList, DIALOG_STYLE_LIST, "Player Labels", large_string, "Close", "");
		
		return 1;
	}
	return 0;
}
Dialog:dPlayerLabelList(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(listitem == 0)
		{
			UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, sendernameEx(playerid));
			User[playerid][p_label] = false;
			MSG(playerid, GOLD, "Info:"GR" Player Label has been disabled.");
			PlayerTextDrawHide(playerid, tLabel[playerid]);
			return 1;	
		}
		if(User[playerid][p_label] == false)
		{
			new sid[4];
			strmid(sid, inputtext, 1, strfind(inputtext, "]"), sizeof sid);
			printf("SID %s", sid);
			new id = strval(sid);
			format(large_string, sizeof large_string,"SELECT * FROM plabels WHERE userid = %d AND labelid = %d", User[playerid][UserID], id);
			new DBResult: Result = db_query(Database, large_string);
			new label[65+MAX_PLAYER_NAME];
			new slabel[65+MAX_PLAYER_NAME];
			db_get_field_assoc(Result, "label", slabel, sizeof label);
			strcat(label, slabel);
			print(label);

			SFM(playerid, GOLD, "Label:"GR" ` %s"GR" ` enabled.", slabel);
			
			format(slabel, sizeof label, "%s"W"\n%s", slabel, sendernameEx(playerid));
			UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, slabel);
			// indicator
			new color[10];
			new first_bracket = strfind(label, "{");
			new second_bracket = strfind(label, "}");
			if(first_bracket != -1)
			{
				strmid(color, label, first_bracket+1,  second_bracket);
				print(color);
				strdel(label, first_bracket,  second_bracket+1);
				print(label);
				new hex = HexToInt(color);
				printf("hex %d", hex);
				if(hex != 0) PlayerTextDrawColor(playerid, tLabel[playerid], WHITE);
			}
			for(new i = 0; i < sizeof label; i++) if(label[i] == '*') label[i] = '`';
			format(label, sizeof(label)-1, "%s", label);
			print(label);
			PlayerTextDrawSetString(playerid, tLabel[playerid], label);
			PlayerTextDrawShow(playerid, tLabel[playerid]);
			// -----
			
			large_string[0] = EOS;
			User[playerid][p_label] = true;
		}
		else
			MSG(playerid, GOLD, "ERROR:"GR" Disable your current label before setting a new one.");
	}
	return 1;
}
CMD:dplabels(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(!strcmp(params,"confirm",true))
		{
			format(large_string, 256, "DELETE FROM plabels WHERE userid = %d", User[playerid][UserID]);
			db_query(Database, large_string);
			MSG(playerid, GOLD, "Info:"GR" You have successfully deleted all of your player labels.");
			return 1;
		}		
		else MSG(playerid, GOLD, "SERVER:"GR" You are going to delete all of your player labels. Type (/dpmylabels confirm) to proceed.");
		return 1;
	}
	return 0;
}
Dialog:dPlayerLabelCreate(playerid, response, listitem, inputtext[])
{
	if(response && !isnull(inputtext))
	{
		new id = GetPVarInt(playerid, "pLabelPlayer");
		if(strlen(inputtext) > 64)
				return MSG(playerid, GOLD, "ERROR:"GR" Label cannot exceed 64 characters.");
		new query[124];
		format(query,sizeof query,"SELECT labelid FROM plabels WHERE userid = %d ORDER BY labelid DESC",User[id][UserID]);
		new DBResult: Result = db_query(Database, query);
		new slot = 0;
		if(db_num_rows(Result)) slot = db_get_field_assoc_int(Result, "labelid")+1;
		format(query, sizeof query,"INSERT INTO plabels (labelid, userid, label) VALUES (%d, %d, '%q')", slot, User[id][UserID], inputtext);
		db_query(Database, query);
	}
	return 1;
}
// ---
CMD:gotolabel(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3 || GetPVarInt(playerid, "pNPCPerm") == 1 || IsStoryteller(playerid))
	{
	    new id;
	    if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /gotolabel [labeid]");
		if(Label[id][labelcreator] == 0) return MSG(playerid, GOLD, "ERROR:"GR" Invalid Label specified.");	
		SetPlayerVirtualWorld(playerid, Label[id][labelvw]);
		SetPlayerInterior(playerid, Label[id][labelinterior]);
		SetPlayerPos(playerid, Label[id][labelx], Label[id][labely], Label[id][labelz]);
	}
	else return MSG(playerid, GOLD, "Info:"GR" You do not have the appropriate permissions to operate this command.");
	return 1;
}

CMD:label(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new name[130];
		if(User[playerid][Useradmin] == 0 && isnull(User[playerid][donator]))
		{
			format(name, 124, "SELECT 1 FROM labels WHERE userid = %d", User[playerid][UserID]);
			new DBResult: Result = db_query(Database, name);
			if(db_num_rows(Result) > 5)
			{
				db_free_result(Result);
				MSG(playerid, GOLD, "ERROR:"GR" You have five labels spawned! Discard one to be able to create another label.");
				return 1;
			}
		}
		if(sscanf(params,"s[124]", name))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /label [label]");
		new id = Iter_Free(Labels),
			Float:x,
			Float:y,
			Float:z,
			sX[10],
			sY[10],
			sZ[10],
			vw,
			interior
		;
		if(id == MAX_LABELS)
			return MSG(playerid, GOLD, "ERROR:"GR" Limit reached.");
		GetPlayerPos(playerid, x, y, z);
		vw = GetPlayerVirtualWorld(playerid);
		interior = GetPlayerInterior(playerid);
		Label[id][labelx] = x;
		Label[id][labely] = y;
		Label[id][labelz] = z;
		Label[id][labelcreator] = User[playerid][UserID];
		format(large_string, sizeof large_string,"%s (%d)", name, id);
		//
		if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159) 
			Label[id][labeltag] = CreateDynamic3DTextLabel(large_string,RP,x,y,z,LABEL_DRAW_DISTANCE,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1, vw, interior);
		else Label[id][labeltag] = CreateDynamic3DTextLabel(large_string,RP,x,y,z-0.2,LABEL_DRAW_DISTANCE,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1, vw, interior);
		//CreateDynamic3DTextLabel( const text[], color, Float:x, Float:y, Float:z, Float:drawdistance, attachedplayer = INVALID_PLAYER_ID, attachedvehicle = INVALID_VEHICLE_ID,
		// testlos = 0, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_3D_TEXT_LABEL_SD, areaid = -1, priority = 0 )
		//Attach3DTextLabelToActor(actorid, text[], color, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:distance = 10.0, worldid = 0, testlos = 0);
		SFM(playerid, WHITE, "SERVER: You have created label ID %d.", id);
		format(sX, 10, "%f", x);
		format(sY, 10, "%f", y);
		format(sZ, 10, "%f", z);
		
		format(large_string, sizeof large_string,"INSERT INTO labels (labelid, userid, labelname, x, y, z, vw, interior) VALUES (%d, %d, '%q', '%s', '%s', '%s', %d, %d)",
		id, User[playerid][UserID], name, sX, sY, sZ, vw, interior);
		db_query(Database, large_string);
		Iter_Add(Labels, id);
		//db_query(Database, "CREATE TABLE IF NOT EXISTS labels (labelid INTEGER, x CHAR(10),y CHAR(10), z CHAR(10), vw INTEGER, interior INTEGER, labelname VARCHAR(124), userid INTEGER)");
		return 1;
	}
	else return MSG(playerid, GOLD, "Info:"GR" You do not have the appropriate permissions to operate this command.");
}
CMD:dlabel(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new npcid;
		if(sscanf(params,"i", npcid))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /dlabel [labelid]");
		if(Label[npcid][labelcreator] != User[playerid][UserID] && User[playerid][Useradmin] == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You didn't create this label.");
		DestroyDynamic3DTextLabel(Label[npcid][labeltag]);
		SFM(playerid, WHITE, "SERVER: Label (ID: %d) has been removed.", npcid);
		format(large_string, sizeof large_string, "DELETE FROM labels WHERE labelid = %d", npcid);
		db_query(Database, large_string);		
		new tmp[LABEL_DATA];
		Label[npcid] = tmp;
		Iter_Remove(Labels, npcid);
		return 1;
	}
	else return MSG(playerid, GOLD, "Info:"GR" You do not have the appropriate permissions to operate this command.");
}
CMD:mylabels(playerid, params[])
{
	if(User[playerid][Logged])
	{
		format(large_string, sizeof large_string, "SELECT * FROM labels WHERE userid = %d", User[playerid][UserID]);
		new DBResult: Result = db_query(Database,large_string);
		large_string[0] = EOS;
		new bool:found = false;
		do
		{
			if(db_num_rows(Result))
			{
				new labelid;
				new labelname[130];
				labelid = db_get_field_assoc_int(Result, "labelid");
				db_get_field_assoc(Result, "labelname", labelname, 130);
				format(large_string, sizeof large_string,"%s[%d] %s\n", large_string, labelid, labelname);	
				found = true;
			}
			else break;
		}
		while(db_next_row(Result));
		if(!found)	
			return MSG(playerid, GOLD, "Info:"GR" You don't have any labels spawned. (/label)");
		Dialog_Show(playerid, dLabelList, DIALOG_STYLE_MSGBOX, "Spawned Labels", large_string, "Close", "");
		return 1;
	}
	return 0;
}
CMD:dmylabels(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(!strcmp(params,"confirm",true))
		{
			format(large_string, 256, "DELETE FROM labels WHERE userid = %d", User[playerid][UserID]);
			db_query(Database, large_string);
			new count;
			new tmp[LABEL_DATA];
			foreach(Labels, i)
			{
				if(Label[i][labelcreator] == User[playerid][UserID])
				{
					DestroyDynamic3DTextLabel(Label[i][labeltag]);	
					Label[i] = tmp;
					Iter_SafeRemove(Labels, i, i);	
					count++;		
				}
			}
			SFM(playerid, GOLD, "SERVER:"GR" %d labels have been removed.", count);
			return 1;
		}		
		else MSG(playerid, GOLD, "SERVER:"GR" You are going to delete all labels spawned by you in the server. Type (/dmylabels confirm) to proceed.");
		return 1;
	}
	return 0;
}

CMD:rnpcstat(playerid, params[])
{
	if(User[playerid][Useradmin] != 0 || GetPVarInt(playerid, "pNPCPerm") == 1 || IsStoryteller(playerid))
	{
		new npc,
			stat[MAX_TRAIT_NAME];
		if(sscanf(params, "is[48]", npc, stat))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /rnpcstat [npcid] [stat (exact name of the stat]");
		if(isnull(NPC[npc][npc_name]))
			return MSG(playerid, GOLD, "ERROR:"GR" Invalid NPC.");
		new bool:found;
		for(new i = 0; i < MAX_NPC_TRAITS; i++)
		{
			if(!strcmp(stat, npctrait[npc][i]))
			{
				npctrait[npc][i][0] = EOS;
				npctrait_value[npc][i] = 0;
				format(large_string, sizeof large_string, "DELETE FROM npc_sheet WHERE npcname = '%s' AND trait = '%s'", NPC[npc][npc_name], stat);
				db_query(Database, large_string);
				MSG(playerid, GOLD, "Info: Trait removed from NPC.");
				format(large_string, sizeof large_string, "NPCRMV: %s (ID: %d) has removed %s (NPC: %d) %s.", sendername(playerid), playerid, NPC[npc][npc_name], npc, stat);
				Staff(ADMIN, large_string);
				found = true;
				break;
			}
		}
		if(!found) return MSG(playerid, GOLD, "Info:"GR" Specified trait not found.");
		return 1;
	}
	return MSG(playerid, GOLD, "Info:"GR" You do not have the appropriate permissions to operate this command.");
}
CMD:npccs(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new npc;
		if(sscanf(params, "i", npc)) return MSG(playerid, GOLD, "SYNTAX:"GR" /npccs [npcid]");
		if(isnull(NPC[npc][npc_name])) return MSG(playerid, GOLD, "ERROR:"GR" This NPC does not exist.");
		if(!IsPlayerInRangeOfPoint(playerid, 100, NPC[npc][npc_x], NPC[npc][npc_y], NPC[npc][npc_z]) && User[playerid][Useradmin] == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in range of this NPC.");
		new count = 1;
		format(large_string, sizeof large_string, "[Character Sheet]\nNPC Name: %s\nNPC ID: %d\n***\n", NPC[npc][npc_name], npc);
		for(new i = 0; i < MAX_NPC_TRAITS; i++)
		{
			if(npctrait_value[npc][i] != 0)
			{
				if(count >= 2) 
				{
					format(large_string, sizeof large_string, "%s[%s %d]\n", large_string, npctrait[npc][i], npctrait_value[npc][i]);
					count = 0;
				}
				else
					format(large_string, sizeof large_string, "%s[%s %d] ", large_string, npctrait[npc][i], npctrait_value[npc][i]);
				count++;
				//printf("count %d", count);
				//tprint(large_string);
			}
		}
		Dialog_Show(playerid,dNPCcs,DIALOG_STYLE_MSGBOX,"NPC",large_string,"Close","");
		return 1;
	}
	return 0;
}
stock GetNPCTraitValue(npcid, traitname[MAX_TRAIT_NAME])
{
	if(!isnull(NPC[npcid][npc_name]))
	{
		for(new i = 0; i < MAX_NPC_TRAITS; i++)
		{
			if(strfind(npctrait[npcid][i], traitname, true) != -1)
			{
				return npctrait_value[npcid][i];
			}
		}
		return 0;
	}
	return -1;
}
CMD:npcroll(playerid, params[])
{
	if(User[playerid][Useradmin] != 0 || GetPVarInt(playerid, "pNPCPerm") == 1 || IsStoryteller(playerid))
	{
		new npc, trait[MAX_TRAIT_NAME], sectrait[MAX_TRAIT_NAME], difficulty = 6;
		if(isnull(params)) return MSG(playerid, GOLD, "SYNTAX:"GR" /npcroll [npcid] [trait] [trait] [difficulty]");
		sscanf(params, "is[48]s[48]i", npc, trait, sectrait, difficulty);
		if(IsNumeric(sectrait))
		{
			if(!isnull(sectrait))
			{
				difficulty = strval(sectrait);
				sectrait[0] = EOS;
			}
			else difficulty = 6;
		}
		if(difficulty < 3 || difficulty > 10) return MSG(playerid,GOLD,"ERROR:"GR" Invalid difficulty specified.");
		if(isnull(trait)) return MSG(playerid, GOLD, "SYNTAX:"GR" /npcroll [npcid] [trait] [trait] [difficulty]");
		if(strfind("initiative", trait, true) != -1)
		{
			new extra = 0,
				celerity = GetNPCTraitValue(npc, "Celerity");
			if(celerity > 0)
				extra += celerity;
			new dex = GetNPCTraitValue(npc, "Dexterity");
			new wits = GetNPCTraitValue(npc, "Wits");
			new roll = 1+(random(10));
			new rollsum = dex+wits+roll+extra;
			if(celerity > 0) format(large_string, sizeof large_string, "(( [NPC] %s rolls initiative (Dexterity: %d (+%d); Wits: %d; Roll: %d): %d ))", NPC[npc][npc_name],dex, celerity ,wits, roll, rollsum);
			else format(large_string, sizeof large_string, "(( [NPC] %s rolls initiative (Dexterity: %d; Wits: %d; Roll: %d): %d ))", NPC[npc][npc_name],dex,wits, roll, rollsum);
			AutoMSG(playerid, large_string);
			printf("(( [NPC] %s rolls initiative (Dexterity: %d; Wits: %d; Roll: %d; Extra: %d): %d ))", NPC[npc][npc_name],dex,wits, roll, extra, rollsum);
			new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
			//foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);		
			format(large_string, sizeof large_string, "[%s][%s] [npcini] %s rolls initiative: %d",PasteDate(),PasteTime(), User[playerid][Username], rollsum);
			print(large_string);
			return 1;
		}
		new vtra,
		vstra;
		for(new i = 0; i < MAX_NPC_TRAITS; i++)
		{
			if(strfind(npctrait[npc][i], trait, true) != -1)
			{
				trait[0] = EOS;
				strcat(trait, npctrait[npc][i]);
				vtra = npctrait_value[npc][i];
				printf("TRAIT 1 FOUND; %s %d", npctrait[npc][i], npctrait_value[npc][i]);
			}		
			else if(strfind(npctrait[npc][i], sectrait, true) != -1 && !isnull(sectrait))
			{
				sectrait[0] = EOS;
				strcat(sectrait, npctrait[npc][i]);
				vstra = npctrait_value[npc][i];
				printf("TRAIT 2 FOUND; %s %d", npctrait[npc][i], npctrait_value[npc][i]);
			}
		}
		new rolls[60],
			count = 0,
			success[45],
			suc,
			botch
		;
		if(vtra == 0 && !isnull(trait)) return SFM(playerid,GOLD,"ERROR:"GR" NPC has no dots in  %s.", trait);
		if(vstra == 0 && !isnull(sectrait))	return SFM(playerid,GOLD,"ERROR:"GR" NPC has no dots in %s.", sectrait);
		while(count < vtra+vstra)
		{
			new roll = 1+random(10),rtemp[10];
			if(count+1 >= vtra+vstra) format(rtemp, sizeof rtemp, "%d ", roll);
			else format(rtemp, sizeof rtemp, "%d, ", roll);
			strcat(rolls, rtemp);
			if(roll >= difficulty) suc++;
			if(roll != 10) count++;
			if(roll == 1) botch++;
		}
		if(suc-botch == 1) format(success, sizeof success, "%d Success",suc-botch); //{006600}
		if(suc-botch > 1) format(success, sizeof success, "%d Successes",suc-botch); //{006600}
		if(suc == botch) strcat(success, "Failed"); //{cc0000}
		if(botch > 0 && suc == 0) strcat(success, "BOTCH"); // MAR
		if(suc != 0 && botch > suc) strcat(success, ""); // {cc0000}
		if(botch > 0 && suc < botch && isnull(success)) strcat(success, "Failed");
		if(isnull(success)) strcat(success, "ERROR");

		if(isnull(sectrait)) 
			format(large_string, sizeof large_string, "(( [NPC] %s rolls %s (%d); difficulty %d: %s (%s) ))", NPC[npc][npc_name], trait, vtra, difficulty, rolls, success);
		else format(large_string, sizeof large_string, "(( [NPC] %s rolls %s (%d) + %s (%d); difficulty %d: %s (%s) ))", NPC[npc][npc_name], trait, vtra, sectrait, vstra, difficulty, rolls, success);
		AutoMSG(playerid, large_string);		
		return 1;
	}
	return MSG(playerid, GOLD, "Info:"GR" You do not have the appropriate permissions to operate this command.");
}
CMD:npcstat(playerid, params[])
{
	if(User[playerid][Useradmin] != 0 || GetPVarInt(playerid, "pNPCPerm") == 1 || IsStoryteller(playerid))
	{
		new npc,
			stat[MAX_TRAIT_NAME],
			value;
		if(sscanf(params, "iis[48]", npc, value, stat)) 
			return MSG(playerid, GOLD, "SYNTAX:"GR" /npcstat [npcid] [value] [stat]");
		if(value < 1 || value > 10) return MSG(playerid, GOLD, "ERROR:"GR" Invalid value specified.");
		if(isnull(NPC[npc][npc_name]))
			return MSG(playerid, GOLD, "ERROR:"GR" Invalid NPC.");
		new slot = -1;
		for(new i = 0; i < MAX_NPC_TRAITS; i++)
		{
			if(isnull(npctrait[npc][i]))
			{
				slot = i;
			}
			else
			{
				if(!strcmp(stat, npctrait[npc][i]))
					break;
			}
		}
		if(slot == -1) return MSG(playerid, GOLD, "ERROR:"GR" This NPC cannot have anymore traits. Limit reached.");
		for(new b = 0; b < sizeof stat; b++) if(stat[b] == ' ') stat[b] = '-';
		format(npctrait[npc][slot], MAX_TRAIT_NAME, "%s", stat);
		npctrait_value[npc][slot] = value;
		format(large_string, sizeof large_string, "SELECT 1 FROM npc_sheet WHERE npcname = '%s' AND trait = '%s'", NPC[npc][npc_name], stat);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
			format(large_string, sizeof large_string, "UPDATE npc_sheet SET value = %d WHERE trait = '%q' AND npcname = '%s'", value, stat, NPC[npc][npc_name]);
		}
		else
		{
			//format(query,sizeof query,"INSERT INTO sheet (userid,trait,value,type) VALUES (%d,'%s','%q',%d)",User[playerid][UserID],trait,value,type);
			format(large_string, sizeof large_string, "INSERT INTO npc_sheet (npcname, trait, value) VALUES ('%s', '%s', '%d')", NPC[npc][npc_name], stat, value);
		}
		db_query(Database, large_string);

		SFM(playerid, GOLD, "NPC:"GR" You have edited %s (NPC: %d) %s to %d.", NPC[npc][npc_name], npc, stat, value);

		format(large_string, sizeof large_string, "NPCEDIT: %s (ID: %d) has edited %s (NPC: %d) %s to %d.", sendername(playerid), playerid, NPC[npc][npc_name], npc, stat, value);
		Staff(ADMIN, large_string);
		return 1;
	}
	return MSG(playerid, GOLD, "Info:"GR" You do not have the appropriate permissions to operate this command.");
}
CMD:npcanim(playerid, params[])
{
	if(User[playerid][Useradmin] != 0 || GetPVarInt(playerid, "pNPCPerm") == 1 || IsStoryteller(playerid))
	{
		new npc,
			animlib[24],
			animname[24],
			Float:fDelta,
			loop,
			lockx,
			locky,
			freeze,
			time;
		if(sscanf(params,"is[24]s[24]fiiiiii", npc, animlib, animname, fDelta, loop, lockx, locky, freeze, time))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /npcanim [npcid] [animlib] [animname] [fdelta] [loop] [lockx] [locky] [freeze] [time]");
		ApplyDynamicActorAnimation(npc, animlib, animname, fDelta, loop, lockx, locky, freeze, time);
		return 1;
	}	
	else 
		return MSG(playerid, GOLD, "Info:"GR" You do not have the appropriate permissions to operate this command.");
}
//native SetDynamicActorPos(STREAMER_TAG_ACTOR actorid, Float:x, Float:y, Float:z);
CMD:cnpc(playerid, params[])
{
	if(User[playerid][Useradmin] != 0 || GetPVarInt(playerid, "pNPCPerm") == 1 || IsStoryteller(playerid))
	{
		new skin, name[MAX_PLAYER_NAME];
		if(sscanf(params,"is[24]", skin, name))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /cnpc [skinid] [nametag] (NPCs are meant to carry realistic names; not Drug Dealer)");
		if(strlen(name) > 24)
			return MSG(playerid, GOLD, "ERROR:"GR" Name of the NPC cannot exceed 24 characters.");
		if(skin < 1)
			return MSG(playerid, GOLD, "ERROR:"GR" Invalid skin ID specified.");
		new id = Iter_Free(NPCs),
			Float:x,
			Float:y,
			Float:z,
			vw,
			Float:rot,
			interior,
			dynamicid
		;
		if(id == MAX_ACTORS)
			return MSG(playerid, GOLD, "ERROR:"GR" Limit reached.");
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, rot);
		vw = GetPlayerVirtualWorld(playerid);
		interior = GetPlayerInterior(playerid);
		//CreateDynamicActor(modelid, Float:x, Float:y, Float:z, Float:r, invulnerable = 1, Float:health = 100.0, worldid = -1, 
		//interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_ACTOR_SD, 
		//areaid = -1, priority = 0)
		dynamicid = CreateDynamicActor(skin, x+0.4, y, z, rot, 1, 100, vw, interior);
		NPC[dynamicid][npc_dynamicid] = dynamicid;
		NPC[dynamicid][npc_x] = x;
		NPC[dynamicid][npc_y] = y;
		NPC[dynamicid][npc_z] = z;
		NPC[dynamicid][npc_rot] = rot;
		NPC[dynamicid][npc_vw] = vw;
		NPC[dynamicid][npc_interior] = interior;

		format(NPC[dynamicid][npc_name], 24, "%s", name);
		NPC[dynamicid][npc_skin] = skin;
		//
		new npcname[30];
		format(npcname, 64, "%s (%d)", name, dynamicid);
		NPC[dynamicid][npc_nametag] = CreateDynamic3DTextLabel(npcname,SOLIDWHITE, x+0.4, y, z+1.1,LABEL_DRAW_DISTANCE,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1, vw, interior);
		//CreateDynamic3DTextLabel( const text[], color, Float:x, Float:y, Float:z, Float:drawdistance, attachedplayer = INVALID_PLAYER_ID, attachedvehicle = INVALID_VEHICLE_ID,
		// testlos = 0, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_3D_TEXT_LABEL_SD, areaid = -1, priority = 0 )
		//Attach3DTextLabelToActor(actorid, text[], color, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:distance = 10.0, worldid = 0, testlos = 0);
		Iter_Add(NPCs, id);
		SFM(playerid, WHITE, "SERVER: You have created the NPC ID %d. (Name: %s, Skin: %d)", dynamicid, name, skin);

		format(large_string, sizeof large_string, "SELECT 1 FROM actors WHERE nametag = '%s'", name);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
			return MSG(playerid, GOLD, "Note:"GR" An NPC already exists with this name. This NPC has been spawned but will not be saved.");
		}
		else
		{
			new sX[10],
				sY[10],
				sZ[10],
				sRot[10]
			;
			format(sX, 10, "%f", x);
			format(sY, 10, "%f", y);
			format(sZ, 10, "%f", z);
			format(sRot, 10, "%f", rot);
			format(large_string, sizeof large_string, "INSERT INTO actors (skin, x, y, z, rot, vw, interior, nametag) VALUES (%d, '%s', '%s', '%s', '%s', %d, %d, '%q')"
			,skin, sX, sY, sZ, sRot, vw, interior, name);
			db_query(Database, large_string);
		}
		db_free_result(Result);
		return 1;
	}
	else return MSG(playerid, GOLD, "Info:"GR" You do not have the appropriate permissions to operate this command.");
}

CMD:getherenpc(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3 || GetPVarInt(playerid, "pNPCPerm") == 1 || IsStoryteller(playerid))
	{
	    new id;
	    if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /getherenpc [npcid]");
		if(!NPC[id][npc_skin]) return MSG(playerid, GOLD, "ERROR:"GR" Invalid NPC specified.");	

		// Positioning
		new Float:x, Float:y, Float:z, Float:rot, vw, interior;
		GetPlayerPos(playerid, x, y, z);
		vw = GetPlayerVirtualWorld(playerid);
		interior = GetPlayerInterior(playerid);
		GetPlayerFacingAngle(playerid, rot);
		x += 0.5;

		NPC[id][npc_x] = x;
		NPC[id][npc_y] = y;
		NPC[id][npc_z] = z;
		NPC[id][npc_rot] = rot;
		NPC[id][npc_vw] = vw;
		NPC[id][npc_interior] = interior;

 		SetDynamicActorFacingAngle(id, rot);
 		SetDynamicActorPos(id, x, y, z);
		SetDynamicActorVirtualWorld(id, vw);
		Streamer_SetIntData(STREAMER_TYPE_ACTOR, id, E_STREAMER_INTERIOR_ID, interior);

		new sX[10],
			sY[10],
			sZ[10],
			sRot[10]
		;
		format(sX, 10, "%f", x);
		format(sY, 10, "%f", y);
		format(sZ, 10, "%f", z);
		format(sRot, 10, "%f", rot);

		format(large_string, sizeof large_string, "UPDATE actors SET x = '%s',y = '%s',z = '%s',rot = '%s',vw = %d, interior = %d WHERE nametag = '%s'", 
		sX, sY, sZ, sRot, vw, interior, NPC[id][npc_name]);
		db_query(Database, large_string);

		// Label
		DestroyDynamic3DTextLabel(NPC[id][npc_nametag]);
		new npcname[30];
		format(npcname, 64, "%s (%d)", NPC[id][npc_name], id);
		NPC[id][npc_nametag] = CreateDynamic3DTextLabel(npcname,SOLIDWHITE, x, y, z+1.1,LABEL_DRAW_DISTANCE,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1, vw, interior);

		// output
		format(large_string, 129, "Info:"GR" You have teleported %s (NPCID: %d) to you.", NPC[id][npc_name], id);
		MSG(playerid, GOLD, large_string);
	}
	else return MSG(playerid, GOLD, "Info:"GR" You do not have the appropriate permissions to operate this command.");
	return 1;
}
CMD:gotonpc(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3 || GetPVarInt(playerid, "pNPCPerm") == 1 || IsStoryteller(playerid))
	{
	    new id;
	    if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /gotonpc [npcid]");
		if(!NPC[id][npc_skin]) return MSG(playerid, GOLD, "ERROR:"GR" Invalid NPC specified.");	
		SetPlayerInterior(playerid, NPC[id][npc_interior]);
		SetPlayerVirtualWorld(playerid, NPC[id][npc_vw]);
		SetPlayerPos(playerid, NPC[id][npc_x], NPC[id][npc_y], NPC[id][npc_z]);
	}
	else return MSG(playerid, GOLD, "Info:"GR" You do not have the appropriate permissions to operate this command.");
	return 1;
}
CMD:dnpc(playerid, params[])
{
	if(User[playerid][Useradmin] != 0 || GetPVarInt(playerid, "pNPCPerm") == 1 || IsStoryteller(playerid))
	{
		new npcid;
		if(sscanf(params,"i", npcid))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /dnpc [npcid]");
		DestroyDynamicActor(npcid);
		DestroyDynamic3DTextLabel(NPC[npcid][npc_nametag]);
		SFM(playerid, WHITE, "SERVER: NPC %s (ID: %d) has been removed.", NPC[npcid][npc_name], npcid);
		format(large_string, sizeof large_string, "DELETE FROM actors WHERE nametag = '%s'", NPC[npcid][npc_name]);
		db_query(Database, large_string);		
		new tmp[NPC_DATA];
		NPC[npcid] = tmp;
		foreach(NPCs, i)
		{
			if(NPC[i][npc_dynamicid] == npcid)
			{
				Iter_Remove(NPCs,i);
			}
		}
		return 1;
	}
	else return MSG(playerid, GOLD, "Info:"GR" You do not have the appropriate permissions to operate this command.");
}
CMD:vcreate(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	if(User[playerid][Useradmin] > 4)
	{
		new c1,c2,model,mod[25],ssiren;
		//if(sscanf(params,"iii",model,c1,c2)) return MSG(playerid,GOLD,"SYNTAX:"GR" /vcreate [model] [color1] [color2]");
		sscanf(params,"s[25]iiii",mod,c1,c2,ssiren);
		if(isnull(mod))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /vcreate [modelname/vehicleid] [color1] [color2]");
		if(IsNumeric(mod))
			model = strval(mod);
		else
		    model = GetVehicleModelIDFromName(mod);
		if(model == -1) return MSG(playerid,GOLD,"ERROR:"GR" Invalid vehicle model.");
		
		if(c1 <= -1) c1 = random(255);
		if(c2 <= -1) c2 = random(255);
		new Float:x,Float:y,Float:z,Float:rot;
		GetPlayerPos(playerid,x,y,z);
		GetPlayerFacingAngle(playerid,rot);
		switch(IsPlayerInAnyVehicle(playerid))
		{
			case 1: GetXYInFrontOfPlayer(playerid, x, y, 8);
			default: GetXYInFrontOfPlayer(playerid, x, y, 5);
		}
		SpawnVehicle(0,model,x,y,z,rot,c1,c2, -1, ssiren);
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:setvehicleowner(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	if(User[playerid][Useradmin] > 4)
	{
	    new id,f;
	    if(sscanf(params,"ii",id,f)) return MSG(playerid,GOLD,"SYNTAX:"GR" /setvehicleowner [vehicleid] [userid]");
	    if(!IsValidVehicle(id)) return MSG(playerid,GOLD,"ERROR:"GR" Invalid vehicle specified.");

	    new query[124];
		V[id][cowner] = f;
		format(query,sizeof query,"UPDATE cars SET owner = %d WHERE vid = %d",f,V[id][dataid]);
		db_query(Database, query);
		return 1;
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:setvehiclefaction(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	if(User[playerid][Useradmin] > 4)
	{
	    new id,f;
	    if(sscanf(params,"ii",id,f)) return MSG(playerid,GOLD,"SYNTAX:"GR" /setvehiclefaction [vehicleid] [factionid]");
	    if(!IsValidVehicle(id)) return MSG(playerid,GOLD,"ERROR:"GR" Invalid vehicle specified.");
	    if(F[f][ftype] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Invalid faction specified.");
	    new query[124];
	    format(query,sizeof query,"STFCMD: %s has set vehicle ID %d a faction vehicle (Faction: %s).",User[playerid][Username],id,F[f][fname]);
		Staff(GOLD,query);

		V[id][vfac] = f;

		format(query,sizeof query,"UPDATE cars SET faction = %d WHERE vid = %d",f,V[id][dataid]);
		db_query(Database, query);
		return 1;
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:vsetrentable(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	if(User[playerid][Useradmin] > 4)
	{
	    new id,f;
	    if(sscanf(params,"ii",id,f)) return MSG(playerid,GOLD,"SYNTAX:"GR" /vsetrentable [vehicleid] [rentprice]");
	    if(!IsValidVehicle(id)) return MSG(playerid,GOLD,"ERROR:"GR" Invalid vehicle specified.");
	    if(1 > f) return MSG(playerid,GOLD,"ERROR:"GR" Invalid price specified.");
	    new query[124];
	    format(query,sizeof query,"STFCMD: %s has set vehicle ID %d a rentable vehicle (RentPrice: %d).",User[playerid][Username],id,f);
		Staff(GOLD,query);

		V[id][vrent] = f;

		format(query,sizeof query,"UPDATE cars SET rent = %d WHERE vid = %d",f,V[id][dataid]);
		db_query(Database, query);
		return 1;
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:rentvehicle(playerid,params[])
{
	if(User[playerid][Logged])
	{
	    new id = GetPlayerVehicleID(playerid);
	    if(V[id][claimed] == true)
			return MSG(playerid,GOLD,"ERROR:"GR" This vehicle is already rented by someone else.");
	    if(User[playerid][vrented] > 0)
	        return MSG(playerid,GOLD,"ERROR:"GR" You already have a vehicle rented. Type (/unrentvehicle) to despawn it first.");
		if(User[playerid][uMoney] < V[id][vrent])
			return MSG(playerid,GOLD,"ERROR:"GR" You cannot afford the rent.");
        if(V[id][vrent] == 0)
            return MSG(playerid,GOLD,"ERROR:"GR" This isn't a rentable vehicle.");
		User[playerid][vrented] = id;
		SFM(playerid,GREEN,"Info:"GR" You have rented the %s for "G"$%d"GR". Type (/v engine) or simply press ~k~~CONVERSATION_NO~ to turn it on/off. Type (/unrentvehicle) to unrent it.",GetVehicleName(GetVehicleModel(id)),V[id][vrent]);
		GiveMoney(playerid,-V[id][vrent]);
		if(GetVehicleType(id) == BIKE)
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(id, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(id, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
		}
	    return 1;
	} 
	return 0;
}
CMD:unrentvehicle(playerid,params[])
{
	if(User[playerid][Logged])
	{
	    if(User[playerid][vrented] == 0)
	        return MSG(playerid,GOLD,"ERROR:"GR" You aren't renting any vehicle.");
        new id = GetPlayerVehicleID(playerid);
        if(V[id][vrent] == 0)
            return MSG(playerid,GOLD,"ERROR:"GR" This isn't a rentable vehicle.");
		if(User[playerid][vrented] != id)
		    return MSG(playerid,GOLD,"ERROR:"GR" You aren't renting this vehicle.");
		User[playerid][vrented] = 0;
		V[id][claimed] = false;
		SFM(playerid,GREEN,"Info:"GR" You have stopped renting the %s.",GetVehicleName(GetVehicleModel(id)));
		new Float:x, Float;y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x+1, y, z);
		RespawnVehicle(id);
		SetVehiclePos(id, V[id][vx], V[id][vy], V[id][vz]);
	    return 1;
	} 
	return 0;
}
CMD:vdelete(playerid,params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new id;
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /vdelete [gameid]");
		if(id < 1) return MSG(playerid,GOLD,"Error:"GR" Invalid vehicle ID.");
		if( V[id][vmodel])
		{
		    new query[150];
		    //format(query,sizeof(query),"DELETE FROM bans WHERE userid = '%i'",userid);
		    format(query,sizeof query,"DELETE FROM cars WHERE vid = %i",V[id][dataid]);
		    db_query(Database,query);
			format(query,sizeof query,"DELETE FROM cartrunk WHERE vid = %d",V[id][dataid]);
			db_query(Database,query);
			format(query,sizeof query,"DELETE FROM carmods WHERE car = %d",V[id][dataid]);
			db_query(Database,query);
		    DestroyVehicle(id);
			new tmp[CAR_DATA];
			V[id] = tmp;
		}
		else MSG(playerid,GOLD,"Error:"GR" Invalid vehicle ID.");
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}


// Vehicle system ends here
/*
0 = EXTRASUNNY_LA
1 = SUNNY_LA
2 = EXTRASUNNY_SMOG_LA
3 = SUNNY_SMOG_LA
4 = CLOUDY_LA
5 = SUNNY_SF
6 = EXTRASUNNY_SF
7 = CLOUDY_SF
8 = RAINY_SF
9 = FOGGY_SF
10 = SUNNY_VEGAS
11 = EXTRASUNNY_VEGAS (heat waves)
12 = CLOUDY_VEGAS
13 = EXTRASUNNY_COUNTRYSIDE
14 = SUNNY_COUNTRYSIDE
15 = CLOUDY_COUNTRYSIDE
16 = RAINY_COUNTRYSIDE
17 = EXTRASUNNY_DESERT
18 = SUNNY_DESERT
19 = SANDSTORM_DESERT
20 = UNDERWATER (greenish, foggy)

In the Northern Hemisphere, the four astronomical seasons are:
Spring - March Equinox to June Solstice;
Summer - June Solstice to September Equinox;
Fall (autumn) - September Equinox to December Solstice; and,
Winter - December Solstice to March Equinox.


SEASONS:
1 - WINTER

*/

stock randomEx(min, max)
{
    new rand = random(max-min)+min;
    return rand;
}
stock GetPhase(phour)
{
	new phase;
	switch(phour)
	{
	    case 0..3: phase = 1;
	    case 4..7: phase = 2;
	    case 8..10: phase = 3;
	    case 11..13: phase = 4;
	    case 14..16: phase = 5;
	    case 17..20: phase = 6;
	    case 21..23: phase = 7;
	}
	return phase;
}
CMD:rnd(playerid,params[])
{
	new mina,maxa;
	sscanf(params,"ii",mina,maxa);
	new rand = randomEx(mina,maxa);
	SFM(playerid,-1,"MIN %i MAX %i = %i",mina,maxa,rand);
	return 1;
}
CMD:setweather(playerid,params[])
{
    if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	SetWeather(strval(params));
	return 1;
}
stock GetSeason(month)
{
	new season;
	switch(month)
	{
	    case 12,1,2: season = 1; // WINTER
	    case 9,10,11: season = 2; // AUTUMN
	    case 6,7,8: season = 3; // SUMMER
	    case 3,4,5: season = 4; // SPRING
	}
	return season;
}

stock GetAverageTemperature(season)
{
	new temperature;
	switch(season)
	{
	    case 1: temperature = 10; // WINTER
	    case 2: temperature = 15; // AUTUMN
	    case 3: temperature = 20;//25; // SUMMER
	    case 4: temperature = 13; // SPRING
	}
	return temperature;
}

stock GetWeatherName(weatherid)
{
	new Weathername[18];
	switch(weatherid)
	{
	    case 0, 6, 13, 17: 		Weathername = "VERY SUNNY";
	    case 1, 5, 10, 14, 18: 	Weathername = "MODERATE SUNNY";
	    case 4, 7, 12, 15: 		Weathername = "CLOUDY";
	    case 8, 16: 			Weathername = "RAINY";
	    case 2, 3: 				Weathername = "SMOGGY";
	    case 9, 20: 			Weathername = "FOGGY";
		case 11: 				Weathername = "HEATWAVE";
		case 19: 				Weathername = "SANDSTORM";
	}
	return Weathername;
}

CMD:temperature(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
    SetWeatherPhases(PasteDate());
    return 1;
}

stock SetWeatherPhases(date[])
{
/*
	    case 1: temperature = 5; // WINTER
	    case 2: temperature = 10; // AUTUMN
	    case 3: temperature = 20; // SUMMER
	    case 4: temperature = 9; // SPRING
*/
	new
	    phase[8],
	    weather[8],
		highest,
		lowest,
		rain;

	new month,year,day;
	getdate(year,month,day);
	new season = GetSeason(month);
	new average = GetAverageTemperature(season);
	highest = average+random(21);
	lowest = highest-random(11);
	new sum = highest - lowest;
	if(sum <= 3)
	{
	    if(sum == 0) highest += 3;
     	else highest += 2;
	}
	printf("[weatherphase_debug] Highest: %i - Lowest: %i - Season: %i - Average: %i",highest,lowest,season,average);
	for(new i = 0; i < sizeof(phase); i++)
	{
		phase[i] =  randomEx(lowest,highest);
		if(rain == 0) weather[i] = random(8);
		else weather[i] = 8,rain = 0;
	 	if(i != 0)
	 	{
			new thisphase = phase[i];
			new prevphase = phase[i-1];
			if(thisphase < prevphase)
			{
				if(prevphase-thisphase >= 3)
				{
				    if(sizeof(phase)-1 == i)
				    {
				        weather[i] = 8;
				    }
					rain = 1;
					//PlayerPlaySound(0, 1130, 0.0, 0.0, 10.0);
				}
				printf("[weatherphase_debug] thisphase: %i; prevphase: %i; thisphase-prevphase: %i",thisphase,prevphase,prevphase-thisphase);
			}

		}
		printf("[weatherphase_debug] Temperature %i: %i; Weather: %i",i,phase[i],weather[i]);
	}
	new query[250],
	    merge[8][8];
	for(new m = 0; m < sizeof(phase); m++)
	{
	    format(merge[m],8,"%i,%i",phase[m],weather[m]);
	    print(merge[m]);
	}
	format(query,sizeof(query),"INSERT INTO weathers (date, phase1, phase2, phase3, phase4, phase5, phase6, phase7, phase8) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s','%s')"
	,date,merge[0],merge[1],merge[2],merge[3],merge[4],merge[5],merge[6],merge[7]);
	db_query(Database,query);
	return 1;
}

/*new Text:mainbox[2];
new Text:stripe1[2];
new Text:stripe2[2];
new Text:stripe3[2];
new Text:stripe4[2];
new Text:inventorytextbackground;
new PlayerText:inventorytitle[MAX_PLAYERS];*/


CMD:pickupmake(playerid,params[])
{
    if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	//(model, type, Float:X, Float:Y, Float:Z, virtualworld)
	new model, type, Float:x, Float:y, Float:z;
	if(sscanf(params,"iii",model,type)) return MSG(playerid,-1,"/pickupmake model type");
	GetPlayerPos(playerid,x,y,z);
	CreatePickup(model,type,x,y,z);
	return 1;
}

stock KnockHouse(playerid,houseid)
{
	TogglePlayerControllable(playerid,1);
	new i = houseid;
	cmd_ame(playerid,"knocks on the door.");
 	foreach(Player,p)
	{
		if(User[p][HouseIN] == i)
		{
			MSG(p,RP,"*** Knock knock knock!");
			TogglePlayerControllable(playerid,1);
			break;
		}
	}
}
CMD:setspawn(playerid,params[])
{
	if(User[playerid][Logged])
	{
	    new id,bool:lazy;
		if(!strcmp(params, "faction", true))
		{
			if(User[playerid][faction] < 1)
				return MSG(playerid, GOLD, "ERROR:"GR" You need to be in a faction to use this command.");
  		    MSG(playerid,GREEN,"Info:"GR" Your spawn point has been set.");
  		    User[playerid][spawnat] = 9000+User[playerid][faction];
			new query[124];
			format(query,sizeof query,"UPDATE users SET spawnat = %d WHERE userid = %d",User[playerid][spawnat], User[playerid][UserID]);
			db_query(Database, query);
			return 1;			
		}
	    if(sscanf(params,"d",id)) return MSG(playerid,GOLD,"ERROR:"GR" /setspawn [house id]");
  		//if(User[playerid][renting] != id || H[id][howner] != User[playerid][UserID])
  		if(id == -1)
  		{
  		    MSG(playerid,GREEN,"Info:"GR" Your spawn point has been reset.");
  		    User[playerid][spawnat] = -1;
		    User[playerid][px] = RESPAWN_X;
			User[playerid][py] = RESPAWN_Y;
			User[playerid][pz] = RESPAWN_Z;
			User[playerid][pvw] = 0;
			// User[playerid][pint] = H[User[playerid][spawnat]][hinti];
			User[playerid][pint] = 0;
			new query[124];
			format(query,sizeof query,"UPDATE users SET spawnat = %d WHERE userid = %d",id,User[playerid][UserID]);
			db_query(Database, query);
			return 1;
  		}
	    else if(!H[id][hexist])
	        return MSG(playerid,GOLD,"ERROR:"GR" Specified house doesn't exist.");
		else if(User[playerid][renting] == id)
		{
			User[playerid][spawnat] = id;
			new query[124];
			format(query,sizeof query,"UPDATE users SET spawnat = %d WHERE userid = %d",id,User[playerid][UserID]);
			db_query(Database, query);
			format(query,sizeof query,"Info:"GR" Your spawn point has been set to %s.",H[id][hname]);
			MSG(playerid,GREEN,query);
			lazy = true;
		}
		else if(H[id][howner] == User[playerid][UserID])
		{
			User[playerid][spawnat] = id;
			new query[124];
			format(query,sizeof query,"UPDATE users SET spawnat = %d WHERE userid = %d",id,User[playerid][UserID]);
			db_query(Database, query);
			format(query,sizeof query,"Info:"GR" Your spawn point has been set to %s.",H[id][hname]);
			MSG(playerid,GREEN,query);
			lazy = true;
		}
		if(!lazy) return MSG(playerid,GOLD,"ERROR:"GR" You don't own or rent the specified house.");
	    return 1;
	}
	return 0;
}
CMD:evict(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new id;
		if(sscanf(params,"d",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /evict [tenantid]");
		new query[124];
		format(query,sizeof query,"SELECT renting FROM users WHERE userid = %d",id);
		db_query(Database, query);
		new DBResult:Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
            new at = db_get_field_assoc_int(Result,"renting");
			if(User[playerid][HouseIN] == -1)
			    return MSG(playerid,GOLD,"ERROR:"GR" You aren't in a house.");
            if(at != User[playerid][HouseIN])
                return MSG(playerid,GOLD,"ERROR:"GR" Specified tenant is either isn't in the house you wish to evict them from or you aren't in the house that they are renting at.");
			if(User[playerid][UserID] != H[at][howner])
				return MSG(playerid,GOLD,"ERROR:"GR" You don't own the house that the tenant is renting at.");
			format(query,sizeof query,"UPDATE users SET renting = NULL,spawnat = NULL,x = '%s',y = '%s',z = '%s' WHERE userid = %d",SPAWNX,SPAWNY,SPAWNZ,id);
			db_query(Database, query);
            foreach(Player,i)
			{
			    if(User[i][Logged] && User[i][UserID] == id)
			    {
			        format(query,sizeof query,"Info:"GR" You have been evicted from %s.",H[at][hname]);
					MSG(i,RED,query);
					User[i][renting] = 0;
					User[i][spawnat] = 0;

			    }
			}
			format(query, sizeof query,"Info:"GR" Tenant ID %d has been evicted.",id);
			MSG(playerid,GREEN,query);
		}
		else
		{
			MSG(playerid,GOLD,"ERROR:"GR" Specified Tenant ID is invalid.");
		}
		db_free_result(Result);
	}
	else return 0;
	return 1;
}

CMD:breakin(playerid,params[])
{
		if(!User[playerid][Logged]) return 0;
		if(User[playerid][animation] || User[playerid][tazed] != 0) return MSG(playerid,GOLD,"ERROR:"GR" You cannot use this feature right now.");
		new bool:b;
		
		if(User[playerid][breaking] > 0)
		{
		    User[playerid][breaking] = -1;
		    MSG(playerid,WHITE,"** Breaking in process has been stopped.");
		    TogglePlayerControllable(playerid,1);
		    KillTimer(BreakingTimer[playerid]);
			foreach(Player,z)
				SetPlayerMarkerForPlayer(z,playerid,COLOR_LOGGED);
		    return 1;
		}
		new itemid = FindPlayerItem_Name(playerid, "Toolkit");
        if(UserItem[playerid][itemid][Value] < 1)
            return MSG(playerid,GOLD,"ERROR:"GR" You don't have a toolkit.");
		foreach(Houses,i)
		{
		    //printf("i: %d",i);
		    if(!H[i][hexist]) continue;
			if(IsPlayerInRangeOfPoint(playerid,2,H[i][hx],H[i][hy],H[i][hz]))
			{
			    if(H[i][hlock] == 0)
			    {
					MSG(playerid,GOLD,"ERROR:"GR" This house isn't locked.");
					b = true;
					break;
			    }
			    TogglePlayerControllable(playerid,0);
			    cmd_bme(playerid,"starts breaking in the house.");
				new string[140];
				format(string, sizeof string,"SELECT locklevel,alarm from house WHERE hid = %d",H[i][hid]);
				new DBResult:Result = db_query(Database, string);
				new lock = db_get_field_assoc_int(Result, "locklevel");
				new alarm = db_get_field_assoc_int(Result, "alarm");
				db_free_result(Result);
				print("E");
				new sec,rad = alarm*100;
				//printf("radius: %d",rad);
				switch(lock)
				{
					case 1: sec = 120;
					case 2: sec = 180;
					case 3: sec = 300;
					default: sec = 60;
				}
				new count;
				new area[40];
				Get2DZone(H[i][hx],H[i][hy],H[i][hz],area,sizeof area);
			    foreach(Player,x)
			    {
			        if(!User[x][Logged]) continue;
			        if(User[x][faction] != -1)
					{
						if(F[User[x][faction]][ftype] == PD)
						{
							count++;
							format(string,sizeof string,"[Radio] Dispatcher says: To all units, an alarm in %s has went off.",area);
							MSG(x,RADIO,string);
						}
					}
			        if(alarm) // if the house has an alarm
			        {
	                    if(ProxDetectorS(rad,playerid,x))
							SetPlayerMarkerForPlayer(x,playerid,COLOR_BLIP);
                    }
                    if(User[x][HouseIN] == i)
					{
						MSG(x,RP,"*** The house's alarm has went off!");
					}
			    }
			    if(count < 4) { }
			    //return MSG(playerid,GOLD,"*** You cannot do this right now as there are less than four law enforcement officers online.");
				format(string,sizeof string,"Info:"GR" You have started breaking in %s %d. Type (/breakin) once more to stop the process.",area,i);
				MSG(playerid,GOLD,string);
				format(string,sizeof string,"Info:"GR" The process will take %d seconds.",sec);
				MSG(playerid,GOLD,string);
				if(rad == 0) User[playerid][breaking] = 1;
				else User[playerid][breaking] = rad;
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 0, 0, 0, 0);
				BreakingTimer[playerid] = SetTimerEx("BreakingHouse",sec*1000,0,"dd",playerid,i);

				if(alarm) // if the house has an alarm
				{
					format(string,sizeof string,"*** %s's alarm went off!",H[i][hname]);
					ProxDetector(30.0, playerid, string, RP,RP,RP,RP,RP);
				}
				b = true;
				new id = FindPlayerItemFree(playerid, "Toolkit");
				UpdateItem(playerid, id, UserItem[playerid][id][Item], UserItem[playerid][id][ItemName], -1, -UserItem[playerid][id][Value]);
				break;
			}
		}
		if(!b) return MSG(playerid,GOLD,"ERROR:"GR" You are not in range of a house entrance.");
		return 1;
}

public BreakingHouse(playerid,houseid)
{
	if(User[playerid][Logged])
	{
	    if(User[playerid][breaking] != -1)
	    {
			foreach(Player,z)
				SetPlayerMarkerForPlayer(z,playerid,COLOR_LOGGED);
	        User[playerid][breaking] = 0;
			new string[100];
			format(string, sizeof string,"SELECT locklevel,alarm from house WHERE hid = %d",H[houseid][hid]);
			new DBResult:Result = db_query(Database, string);
			new lock = db_get_field_assoc_int(Result, "locklevel");
			db_free_result(Result);
			new chance = random(10);
			new bool:suc;
			TogglePlayerControllable(playerid,1);
			switch(lock)
			{
			    case 0:
			    {
			        switch(chance)
			        {
			            case 0..8: suc = true;
			            default: suc = false;

			        }
			    }
			    case 1:
			    {
			        switch(chance)
			        {
			            case 0..6: suc = true;
			            default: suc = false;
			        }
			    }
			    case 2:
			    {
			        switch(chance)
			        {
			            case 0..4: suc = true;
			            default: suc = false;
			        }
			    }
			    case 3:
			    {
			        switch(chance)
			        {
			            case 0..2: suc = true;
			            default: suc = false;
			        }
			    }
			}
			if(suc) printf("[housebreakin_debug] chance: %d; success!",chance);
			else printf("[housebreakin_debug]: chance: %d; fail!",chance);
	        if(suc) PlayerActionMessageBubble(playerid,"breaks in the house.");
	        else return PlayerActionMessageBubble(playerid,"has failed breaking in the house.");
	        H[houseid][hlock] = 0;
			format(string,sizeof string,"UPDATE house SET lock = %d WHERE hid = %d",H[houseid][hlock],houseid);
			db_query(Database, string);

	    }
	    else return -1;
	}
	return 1;
}

CMD:writeletter(playerid,params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][cmdFlood] > gettime()) 
			return MSG(playerid,GOLD,"ERROR:"GR" You must wait ten seconds between each mail.");
	    new address,message[124],wakit = 2+random(4);
		if(sscanf(params,"ds[124]",address,message))
		    return MSG(playerid,GOLD,"SYNTAX:"GR" /writeletter [house address (numeric)] [message]");
		if(User[playerid][uMoney] < 2) return MSG(playerid,GOLD,"ERROR:"GR" You need at least two dollars.");
		if(address < 1) return MSG(playerid,GOLD,"ERROR:"GR" Invalid input.");
		new bool:found;
		foreach(Houses,i)
		{
		    if(H[i][haddress] == address)
		    {
				new string[124];
				format(string,sizeof string,"* You have written the letter, the mail will arrive to %s in %d minute(s).",H[i][hname],wakit);
				MSG(playerid,WHITE,string);
				MSG(playerid,WHITE,message);
				cmd_bme(playerid,"writes a letter and sends it through the mail.");
				//format(string,sizeof string,"INSERT INTO mail (id,mail) VALUES (%d,'%q')",H[i][hid],message);
				//db_query(Database, string);
				GiveMoney(playerid,-2);
				SetTimerEx("OnMailArrive", wakit*60000,0, "sddds", message, i, playerid, User[playerid][UserID], "PPP");
				printf("LETTER ON CMD AFTER TIMER: %s",message);
				found = true;
				User[playerid][cmdFlood] = gettime()+10;
				break;
		    }
			else continue;
		}
		if(!found) MSG(playerid,GOLD,"ERROR:"GR" Invalid house address specified.");
	    return 1;
	}
	return 0;
}

public OnMailArrive(hmsgg[124], houseid, playerid, uid, backup[])
{
    printf("LETTER ON CALLBACK: %s | %s", hmsgg, backup);
	new string[240];
	format(string,sizeof string,"INSERT INTO mail (id,mail,by,read) VALUES (%d,'%q',%d,0)", houseid, hmsgg, uid); // SQL INJECTION POSSIBLE
	db_query(Database, string);
	format(string,sizeof string,"Info: Your letter has been successfully delievered to %s.", H[houseid][hname]);
	MSG(playerid,GREEN,string);
	foreach(Player,i)
	{
	    if(User[i][HouseIN] == houseid)
	    {
	        MSG(i,RP,"*** Mail has arrived.");
	    }
	}
}
CMD:house(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new bool:b;
		if(User[playerid][breaking] > 0) return MSG(playerid,GOLD,"ERROR:"GR" You cannot access this command when you're breaking in!");
		foreach(Houses,i)
		{
		    //printf("i: %d",i);
		    if(!H[i][hexist]) continue;
            if(User[playerid][HouseIN] == i && User[playerid][UserID] == H[i][howner])
            {
                ShowMenuForPlayer(house_bought_for_owner, playerid);
                b = true;
                TogglePlayerControllable(playerid,0);
				MSG(playerid, GOLD, "Info:"GR" Use Arrows (UP, DOWN) to navigate and SPACE to select an option. Type (/house) ");
                break;
            }
            else if(User[playerid][HouseIN] == i && User[playerid][renting] == i)
            {
                ShowMenuForPlayer(house_bought_guest, playerid);
                b = true;
                TogglePlayerControllable(playerid,0);
				MSG(playerid, GOLD, "Info:"GR" Use Arrows (UP, DOWN) to navigate and SPACE to select an option.");
                break;
            }
			else if(IsPlayerInRangeOfPoint(playerid,2,H[i][hx],H[i][hy],H[i][hz]))
			{
			    //printf("i: %d",i);
			    if(H[i][howner] == 0)
       				ShowMenuForPlayer(mhouse, playerid);
			    else if(H[i][howner] == User[playerid][UserID])
                    ShowMenuForPlayer(house_bought_for_owner, playerid);
				else ShowMenuForPlayer(house_bought_guest, playerid);
			    b = true;
			    TogglePlayerControllable(playerid,0);
				MSG(playerid, GOLD, "Info:"GR" Use Arrows (UP, DOWN) to navigate and SPACE to select an option.");
			}
		}
		SetPVarInt(playerid, "HouseMenu", 1);
		if(!b) return MSG(playerid,GOLD,"ERROR:"GR" You are not in range of a house entrance.");
		return 1;
	}
	return 0;
}
public OnPlayerSelectedMenuRow(playerid, row)
{
	SetPVarInt(playerid, "HouseMenu", 0);
	new Menu:menuid = GetPlayerMenu(playerid);
    if(menuid == mhouse)
    {
        switch(row)
        {
            case 0: // Knock
			{
				foreach(Houses,i)
				{
				        TogglePlayerControllable(playerid,1);
				        if(!H[i][hexist]) continue; // if it doesnt exist then skip it
				        else if(i == User[playerid][HouseIN])
						{
						    MSG(playerid,GOLD,"ERROR:"GR" You can't do this option while inside a house.");
						    TogglePlayerControllable(playerid, 1);
						    break;
						}
                        else if(!IsPlayerInRangeOfPoint(playerid,2,H[i][hx],H[i][hy],H[i][hz])) continue;
						KnockHouse(playerid,i);
				}

		 	}
            case 1: // Buy
            {
				foreach(Houses,i)
				{
 					if(!H[i][hexist]) continue;
				    else if(!IsPlayerInRangeOfPoint(playerid,2,H[i][hx],H[i][hy],H[i][hz])) continue;
					else if(H[i][howner] != 0) return MSG(playerid,GOLD,"ERROR:"GR" This house is already owned.");
					ShowMenuForPlayer(house_confirm, playerid);
					BusinessID[playerid] = i;
				}
            }
        }
    }

    else if(menuid == house_confirm)
    {
        switch(row)
        {
            case 0: // Confirm
            {
                TogglePlayerControllable(playerid,1);
				new string[124];
				new id = BusinessID[playerid];
				if(User[playerid][uMoney] < H[id][hprice]) return MSG(playerid,GOLD,"ERROR:"GR" You don't have enough money.");
				GiveMoney(playerid,-H[id][hprice]);
				format(string,sizeof string,""G"House\n"W"%s",H[id][hname],id);
				UpdateDynamic3DTextLabelText(H[id][HLabel],SOLIDWHITE,string);
				H[id][howner] = User[playerid][UserID];
				MSG(playerid,GREEN,"Info:"GR" Congratulations, you have purchased this house!");
				format(string,sizeof string,"UPDATE house SET owner = %d WHERE hid = %d",H[id][howner],id);
				db_query(Database,string);
            }
            case 1: { TogglePlayerControllable(playerid,1); } // Cancel
        }
    }

    else if(menuid == house_confirm_sell)
    {
        switch(row)
        {
            case 0: // Confirm
            {
				new string[124];
				new id = BusinessID[playerid];
				GiveMoney(playerid,floatround(H[id][hprice]*0.2));
				format(string,sizeof string,"FOR SALE!\n"G"House\n"W"%s\n"G"ID:"W" %i\n"G"Price:"W" $%i",H[id][hname],id,H[id][hprice]); // FOR SALE
				UpdateDynamic3DTextLabelText(H[id][HLabel],SOLIDWHITE,string);
				H[id][howner] = 0;
				MSG(playerid,GREEN,"Info:"GR" You have sold your house!");
				format(string,sizeof string,"UPDATE house SET owner = 0 WHERE hid = %d",id);
				db_query(Database,string);
				TogglePlayerControllable(playerid,1);
            }
            case 1: { TogglePlayerControllable(playerid,1); } // Cancel
        }
    }

    else if(menuid == house_bought_for_owner)
    {
        new bool:check;
        switch(row)
        {
            case 0: // Knock
			{
				foreach(Houses,i)
				{

				        if(!H[i][hexist]) continue; // if it doesnt exist then skip it
				        else if(i == User[playerid][HouseIN])
						{
						    MSG(playerid,GOLD,"ERROR:"GR" You can't do this option while inside a house.");
						    TogglePlayerControllable(playerid,1);
						    break;
						}
                        else if(!IsPlayerInRangeOfPoint(playerid,2,H[i][hx],H[i][hy],H[i][hz])) continue;
						KnockHouse(playerid,i);
				}

		 	}
            case 1: // Lock/Unlock
            {
				foreach(Houses,i)
				{

    				if(!H[i][hexist]) continue; // if it doesnt exist then skip it
					if(User[playerid][HouseIN] != i) check = true;
					else check = false;
    				if(check == true && !IsPlayerInRangeOfPoint(playerid,2,H[i][hx],H[i][hy],H[i][hz])) continue;
    				//printf("b; H[i][hlock]: %d",H[i][hlock]);
    				switch(H[i][hlock])
    				{
    				    case 0:
						{
						    cmd_ame(playerid,"locks the house.");
						    ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 0, 0, 0, 0, 0, 1);
						    H[i][hlock] = 1;
						}
						case 1:
						{
						    cmd_ame(playerid,"unlocks the house.");
						    ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 0, 0, 0, 0, 0, 1);
						    H[i][hlock] = 0;
						}
    				}
    				TogglePlayerControllable(playerid,1);
    				new query[120];
    				format(query,sizeof query,"UPDATE house SET lock = %d WHERE hid = %d",H[i][hlock],i);
    				db_query(Database,query);
				}
            }
            /*case 2: // Set Rentable
			{
				foreach(Houses,i)
				{
    				if(!H[i][hexist]) continue; // if it doesnt exist then skip it
					if(User[playerid][HouseIN] != i) check = true;
					else check = false;
    				if(check == true && !IsPlayerInRangeOfPoint(playerid,2,H[i][hx],H[i][hy],H[i][hz])) continue;
    				new query[124];
					if(H[i][hrentable] == 0)
					{
					    H[i][hrentable] = 1;
					    format(query,sizeof query,""G"House\n"W"%s\nRent: %d",H[i][hname],H[i][hrent]);
					    MSG(playerid,GREEN,"Info:"GR" This house can now be rented.");
					}
					else
					{
					    H[i][hrentable] = 0;
					    format(query,sizeof query,""G"House\n"W"%s",H[i][hname]);
					    MSG(playerid,GREEN,"Info:"GR" This house can no longer be rented.");
					}
					UpdateDynamic3DTextLabelText(H[i][HLabel],SOLIDWHITE,query);
					TogglePlayerControllable(playerid,1);
    				format(query,sizeof query,"UPDATE house SET rentable = %d WHERE hid = %d",H[i][hrentable],i);
    				db_query(Database,query);
				}
			}
            case 3: // Set Rent
            {
				foreach(Houses,i)
				{
    				if(!H[i][hexist]) continue; // if it doesnt exist then skip it
					if(User[playerid][HouseIN] != i) check = true;
					else check = false;
    				if(check == true && !IsPlayerInRangeOfPoint(playerid,2,H[i][hx],H[i][hy],H[i][hz])) continue;
    			    Dialog_Show(playerid,SetHouseRent,DIALOG_STYLE_INPUT,"House Rent","Input a positive value in the field below which represents your house rental price:","Set","Cancel");
					BusinessID[playerid] = i;
				}

            }*/
            case 2: // Sell
            {
				foreach(Houses,i)
				{
    				if(!H[i][hexist]) continue; // if it doesnt exist then skip it
					if(User[playerid][HouseIN] != i) check = true;
					else check = false;
    				if(check == true && !IsPlayerInRangeOfPoint(playerid,2,H[i][hx],H[i][hy],H[i][hz])) continue;
					if(User[playerid][UserID] != H[i][howner])
					    return MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
					BusinessID[playerid] = i;
					ShowMenuForPlayer(house_confirm_sell, playerid);
				}
            }
            case 3: // Safe
			{
					if(User[playerid][HouseIN] == -1)
						return MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
					if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
						return MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
					ShowMenuForPlayer(house_safe, playerid);
			}
			case 4: // Tenants
			{
					if(User[playerid][HouseIN] == -1)
					    return MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
					if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
    					return MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
					ShowMenuForPlayer(house_tenants, playerid);
			}
			case 5: // Upgrades
			{
			    	TogglePlayerControllable(playerid, 0);
					if(User[playerid][HouseIN] == -1)
					    return MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
					if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
						return MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
					ShowMenuForPlayer(house_upgrades, playerid);
			}
			case 6: // Lights
			{
			    	TogglePlayerControllable(playerid, 1);
					if(User[playerid][HouseIN] == -1)
					{
					    MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
					    return 1;
					}
					if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
    				{
						MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
						return 1;
					}
					switch(H[User[playerid][HouseIN]][hlights])
					{
					    case false: // lights are on, turn them off
					    {
					        foreach(Player,p)
					        {
					            if(User[p][HouseIN] == User[playerid][HouseIN])
					            	TextDrawShowForPlayer(p, LightsOff);
							}
							PlayerActionMessageBubble(playerid,"switches the lights off.");
							H[User[playerid][HouseIN]][hlights] = true;
					    }
					    case true: // lights are off, turn them on
					    {
					        foreach(Player,p)
					        {
					            if(User[p][HouseIN] == User[playerid][HouseIN])
									TextDrawHideForPlayer(p, LightsOff);
							}
							PlayerActionMessageBubble(playerid,"switches the lights on.");
							H[User[playerid][HouseIN]][hlights] = false;
					    }
				}
			}
			case 7: // Mailbox
			{
				if(User[playerid][HouseIN] == -1)
   					return MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
				if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
					return MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
				ShowMenuForPlayer(house_mailbox, playerid);
			}
        }
    }
	else if(menuid == house_mailbox)
	{
		TogglePlayerControllable(playerid, 1);
		switch(row)
		{
			case 0:
			{
				new string[90];
				format(string,sizeof string,"SELECT id,mail,read,uid FROM mail WHERE id = %d",User[playerid][HouseIN]);
				new DBResult: Result = db_query(Database, string);
				new count = 1;
				format(large_string,sizeof large_string,"");
				do
				{
				    if(db_num_rows(Result))
				    {
						new mail[124],read,uid;
						//id = db_get_field_assoc_int(Result, "id");
						read = db_get_field_assoc_int(Result, "read");
						db_get_field_assoc(Result, "mail", mail, 124);
						uid = db_get_field_assoc_int(Result, "uid");
						if(read == 0)
						{
							format(string,sizeof string,"UPDATE mail SET read = 1 WHERE uid = %d",uid);
							db_query(Database, string);
							format(large_string,sizeof large_string,"%s"G"[%d] %s\n",large_string,count,mail);
						}
						else
						{
						    format(large_string,sizeof large_string,"%s[%d] %s\n",large_string,count,mail);
						}

						count++;
					}
					else break;
				}
				while(db_next_row(Result));
				if(count == 1) return MSG(playerid, GOLD,"House:"GR" Your mailbox is empty.");
				db_free_result(Result);
				Dialog_Show(playerid,dMailBox,DIALOG_STYLE_MSGBOX,"Mailbox",large_string,"Close","");
			}
			case 1:
			{
				new string[90];
				format(string,sizeof string,"DELETE FROM mail WHERE id = %d",User[playerid][HouseIN]);
				db_query(Database, string);
				PlayerActionMessageBubble(playerid,"empties their mail.");
			}
		}
	}
    else if(menuid == house_tenants)
    {
        switch(row)
        {
			case 0: // Add Tenant
			{
					if(User[playerid][HouseIN] == -1)
					    return MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
					if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
    					return MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
					Dialog_Show(playerid,dAddTenant,DIALOG_STYLE_INPUT,"Add Tenant","Insert the exact name of the player you wish to add as a tenant:\nNote: Exact name must be typed. [Firstname_Lastname]","Add","Cancel");
			}
			case 1: // Tenants
			{
			    	TogglePlayerControllable(playerid, 1);
					if(User[playerid][HouseIN] == -1)
						return MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
					if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
						return MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");

					new query[124];
					format(query,sizeof query,"SELECT username,userid FROM users WHERE renting = %d",H[User[playerid][HouseIN]][hid]);
					db_query(Database, query);
    				MSG(playerid,GRAD2,"|____ ["G"Tenants"GR"] ____|");
					new DBResult:Result = db_query(Database, query);
					do
					{
						if(db_num_rows(Result))
						{
						    new playername[24],
						        ppid;
				   			db_get_field_assoc(Result, "username",playername, 24);
							ppid = db_get_field_assoc_int(Result, "userid");
						    format(query,sizeof query,"["G"*"GR"] Tenant: %s [Tenant ID: %d]",playername,ppid);
						    MSG(playerid,GRAD2,query);
						}
						else
      					{
						    MSG(playerid,GREEN,"House:"GR" There are no tenants to list.");
    					 	break;
						}
					}
					while(db_next_row(Result));
					db_free_result(Result);
					MSG(playerid,GRAD2,"|___________________|");
			}
		}
    }
    else if(menuid == house_upgrades)
    {
		switch(row)
		{
			case 0: // lock upgrade
			{
			    TogglePlayerControllable(playerid, 1);
				foreach(Houses,i)
				{
    				if(!H[i][hexist]) continue; // if it doesnt exist then skip it
					if(User[playerid][HouseIN] == -1)
					{
					    MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
					    break;
					}
					if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
    				{
						MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
						break;
					}
					new string[200];
					format(string, sizeof string,"SELECT locklevel from house WHERE hid = %d",User[playerid][HouseIN]);
					new DBResult:Result = db_query(Database, string);
					new alarm = db_get_field_assoc_int(Result, "locklevel");
					format(string,sizeof string,"House ID: %d\nCurrent Lock Level: %d\nPress 'Upgrade' to increase the level of your lock for $3000.",H[i][hid],alarm);
					Dialog_Show(playerid,dLockUpgrade,DIALOG_STYLE_MSGBOX,"House Alarm Upgrade",string,"Upgrade","Cancel");
					db_free_result(Result);
					break;
				}
			}
			case 1: // alarm upgrade
			{
			    TogglePlayerControllable(playerid, 1);
				foreach(Houses,i)
				{
    				if(!H[i][hexist]) continue; // if it doesnt exist then skip it
					if(User[playerid][HouseIN] == -1)
					{
					    MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
					    break;
					}
					if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
    				{
						MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
						break;
					}
					new string[200];
					format(string, sizeof string,"SELECT alarm from house WHERE hid = %d",User[playerid][HouseIN]);
					new DBResult:Result = db_query(Database, string);
					new alarm = db_get_field_assoc_int(Result, "alarm");
					format(string,sizeof string,"House ID: %d\nCurrent Alarm Level: %d\nPress 'Upgrade' to increase the level of your alarm for $3000.",H[i][hid],alarm);
					Dialog_Show(playerid,dAlarmUpgrade,DIALOG_STYLE_MSGBOX,"House Alarm Upgrade",string,"Upgrade","Cancel");
					db_free_result(Result);
					break;
				}
			}
		}
	}
    else if(menuid == house_safe)
    {
        switch(row)
        {
	        case 0: // Money
	        {
					foreach(Houses,i)
					{
	    				if(!H[i][hexist]) continue; // if it doesnt exist then skip it
						if(User[playerid][HouseIN] == -1)
						{
						    MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
						    break;
						}
						if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
	    				{
							MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
							break;
						}
						ShowMenuForPlayer(house_safe_open, playerid);
					}
	        }
	        case 1: // Storage
	        {
			 	if(User[playerid][HouseIN] == -1)
				{
				    MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
				    return 1;
				}
				if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
				{
					MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
					return 1;
				}
				ShowMenuForPlayer(house_storage, playerid);
	        }
        }
    }
    else if(menuid == house_storage)
    {
        switch(row)
        {
            case 0: // Check Wep
            {
                TogglePlayerControllable(playerid, 1);
			 	if(User[playerid][HouseIN] == -1)
				{
				    MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
				    return 1;
				}
				if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
				{
					MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
					return 1;
				}
				new query[140];
				new ammo[101];
				new weapons[101];
				format(query,sizeof query,"SELECT storage,storageammo FROM house WHERE hid = %d",User[playerid][HouseIN]);
				new DBResult: Result = db_query(Database, query);
				if(db_num_rows(Result))
				{
                    db_get_field_assoc(Result, "storage",weapons, 100);
                    db_get_field_assoc(Result, "storageammo",ammo, 100);
				}
				else
				{
				    MSG(playerid,GREEN,"Info:"GR" There are no weapons in the safe.");
                    return MSG(playerid,GRAD2,"|___________________|");
				}
				new wep[10];
				new am[10];
				sscanf(weapons,"p<,>dddddddddd",wep[0],wep[1],wep[2],wep[3],wep[4],wep[5],wep[6],wep[7],wep[8],wep[9]);
				sscanf(ammo,"p<,>dddddddddd",am[0],am[1],am[2],am[3],am[4],am[5],am[6],am[7],am[8],am[9]);
				MSG(playerid,GRAD2,"|____ ["G"Weapons"GR"] ____|");
				for(new i = 0; i < 10; i++)
				{
 					GetWeaponName(wep[i],query,sizeof query);
					format(query,sizeof query,"[%d] "R"Weapon"GR": %s; Ammo: %d",i+1,query,am[i]);
					MSG(playerid,GRAD2,query);
				}
				MSG(playerid,GRAD2,"|___________________|");
				db_free_result(Result);
            }
			case 1: // Check Inv
			{
				TogglePlayerControllable(playerid, 1);
			 	if(User[playerid][HouseIN] == -1)
				{
				    MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
				    return 1;
				}
				if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
				{
					MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
					return 1;
				}
				format(large_string, sizeof large_string, "SELECT * FROM houseinv WHERE hid = %d", User[playerid][HouseIN]);
				new DBResult: Result = db_query(Database, large_string);
				large_string[0] = EOS;
				new count = 1;
				do
				{
					if(!db_num_rows(Result)) break;
					//db_query(Database,"CREATE TABLE IF NOT EXISTS houseinv (itemid INTEGER, itemname VARCHAR(16), value INTEGER, condition TINYINT, mergable BIT, fakeitem BIT)");	
					new itemname[MAX_ITEM_NAME],
						value = db_get_field_assoc_int(Result, "value");
					db_get_field_assoc(Result, "itemname", itemname, MAX_ITEM_NAME);
					if(value == 0) 
						format(large_string, sizeof large_string, "%s%d. Empty Slot\n", large_string, count, itemname, value); 
					else 
						format(large_string, sizeof large_string, "%s%d. %s (%d)\n", large_string, count, itemname, value);
				}
				while(db_next_row(Result));
				if(isnull(large_string))
					return MSG(playerid, GOLD, "House:"GR" Your house storage is empty.");
				Dialog_Show(playerid,dHouseShowInv, DIALOG_STYLE_MSGBOX, "House Storage", large_string,"Close", "");
				db_free_result(Result);
				PlayerActionMessageBubble(playerid, "checks their house storage.");
				TogglePlayerControllable(playerid, 1);
			}
            case 2: // Store
            {
				foreach(Houses,i)
				{
    				if(!H[i][hexist]) continue; // if it doesnt exist then skip it
					if(User[playerid][HouseIN] == -1)
					{
					    MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
					    break;
					}
					if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
    				{
						MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
						break;
					}
					ShowMenuForPlayer(house_storage_sel, playerid);
				}
            }
            case 3: // Take
			{
				foreach(Houses,i)
				{
    				if(!H[i][hexist]) continue; // if it doesnt exist then skip it
					if(User[playerid][HouseIN] == -1)
					{
					    MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
					    break;
					}
					if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
    				{
						MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
						break;
					}
					ShowMenuForPlayer(house_storage_sel_take, playerid);

				}
            }
        }
    }

    else if(menuid == house_storage_sel_take)
    {
        switch(row)
        {
			case 0: // Take Weapon
			{
					if(User[playerid][HouseIN] == -1)
					{
					    MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
					    return 1;
					}
					if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner])
    				{
						MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
						return 1;
					}
					new query[224];
					format(query,sizeof query,"SELECT storage,storageammo FROM house WHERE hid = %d",User[playerid][HouseIN]);
					new DBResult: Result = db_query(Database, query);
					new weapons[101],
					    ammo[101];
					db_get_field_assoc(Result, "storage",weapons, 100);
	    			db_get_field_assoc(Result, "storageammo",ammo, 100);
					new wep[10];
					new am[10];
					sscanf(weapons,"p<,>dddddddddd",wep[0],wep[1],wep[2],wep[3],wep[4],wep[5],wep[6],wep[7],wep[8],wep[9]);
					sscanf(ammo,"p<,>dddddddddd",am[0],am[1],am[2],am[3],am[4],am[5],am[6],am[7],am[8],am[9]);
					format(query,sizeof query,"");
				    for(new i = 0; i < 10; i++)
				    {
				        new wepname[24];
						GetWeaponName(wep[i],wepname,sizeof wepname);
						if(wep[i] == 0)
						    wepname = "None";
						format(query,sizeof query,"%s%i. %s (%d)\n",query,i+1,wepname,am[i]);
						Dialog_Show(playerid,TakeWeapon,DIALOG_STYLE_LIST,"House",query,"Take","Cancel");
				    }
				    db_free_result(Result);
			}
			case 1: // take inv item
			{
				TogglePlayerControllable(playerid, 1);
				if(User[playerid][HouseIN] == -1) return MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
				if(User[playerid][UserID] != H[User[playerid][HouseIN]][howner]) return MSG(playerid,GOLD,"ERROR:"GR" You do not own this house.");
				format(large_string, sizeof large_string, "SELECT * FROM houseinv WHERE hid = %d", User[playerid][HouseIN]);
				new DBResult: Result = db_query(Database, large_string);
				large_string[0] = EOS;
				do
				{
					if(!db_num_rows(Result)) break;
					//db_query(Database,"CREATE TABLE IF NOT EXISTS houseinv (itemid INTEGER, itemname VARCHAR(16), value INTEGER, condition TINYINT, mergable BIT, fakeitem BIT)");	
					new itemname[MAX_ITEM_NAME],
						value = db_get_field_assoc_int(Result, "value"),
						slot = db_get_field_assoc_int(Result, "slot");
					db_get_field_assoc(Result, "itemname", itemname, MAX_ITEM_NAME);
					if(value == 0) 
						format(large_string, sizeof large_string, "%s%d. Empty Slot\n", large_string, slot, itemname, value); 
					else 
						format(large_string, sizeof large_string, "%s%d. %s (%d)\n", large_string, slot, itemname, value);
				}
				while(db_next_row(Result));
				if(isnull(large_string))
					return MSG(playerid, GOLD, "House:"GR" Your house storage is empty.");
				strcat(large_string, "\n** Input the slot of the item you wish to retrieve:");
				Dialog_Show(playerid,dHouseTakeInv, DIALOG_STYLE_INPUT, "House Storage", large_string, "Take", "Close");
				db_free_result(Result);
				PlayerActionMessageBubble(playerid, "checks their house storage.");
				TogglePlayerControllable(playerid, 1);			
				// I AM HERE	
			}
        }
    }
	else if(menuid == house_storage_sel)
	{
		switch(row)
		{
		    case 0:
		    {
				TogglePlayerControllable(playerid, 1);
				if(User[playerid][WeaponEquipped] == 0)
				{
					MSG(playerid,GOLD,"ERROR:"GR" You are not wielding a weapon to store.");
					return 1;
				}
				new query[224];
				format(query,sizeof query,"SELECT storage,storageammo FROM house WHERE hid = %d",User[playerid][HouseIN]);
				new DBResult: Result = db_query(Database, query);
				new weapons[101],
				    ammo[101];
				db_get_field_assoc(Result, "storage",weapons, 100);
    			db_get_field_assoc(Result, "storageammo",ammo, 100);
				new wep[10];
				new am[10];
				sscanf(weapons,"p<,>dddddddddd",wep[0],wep[1],wep[2],wep[3],wep[4],wep[5],wep[6],wep[7],wep[8],wep[9]);
				sscanf(ammo,"p<,>dddddddddd",am[0],am[1],am[2],am[3],am[4],am[5],am[6],am[7],am[8],am[9]);

				for(new i = 0;  i <= 10; i++)
				{
   					//new bool:sp = false;
				    printf("[housestorage_debug] When I is %d",i);
				    if(wep[i] == 0)
				    {
				        printf("[housestorage_debug] when wep[%i] is 0 (%d)",i,wep[i]);
				        new wepname[24];
				        GetWeaponName(User[playerid][WeaponEquipped],wepname, sizeof wepname);
				        format(query,sizeof query,"puts their %s in the house safe.",wepname);
				        cmd_ame(playerid,query);
				        print("[housestorage_debug] when /ame is done");
				        wep[i] = User[playerid][WeaponEquipped];
						am[i] = User[playerid][WeaponEquipped_Ammo];
						printf("[housestorage_debug] when wep[%d] and am[%d] are set to %d and %d (%d;%d)",i,i,am[i],wep[i],User[playerid][WeaponEquipped],User[playerid][WeaponEquipped_Ammo]);
						User[playerid][WeaponEquipped] = 0;
						User[playerid][WeaponEquipped_Ammo] = 0;
						ResetPlayerWeapons(playerid);
						format(query,sizeof query,"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",wep[0],wep[1],wep[2],wep[3],wep[4],wep[5],wep[6],wep[7],wep[8],wep[9]);
						new ammostor[101];
						format(ammostor,sizeof query,"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",am[0],am[1],am[2],am[3],am[4],am[5],am[6],am[7],am[8],am[9]);
						format(query, sizeof query,"UPDATE house SET storage = '%s',storageammo = '%s' WHERE hid = %d",query,ammostor,User[playerid][HouseIN]);
						db_query(Database, query);


						format(ammo,sizeof ammo,"%d,%d,0",User[playerid][uWeapon_Ammo][0],User[playerid][uWeapon_Ammo][1]);
						format(wep,sizeof wep,"%d,%d,%d",User[playerid][uWeapon][0],User[playerid][uWeapon][1],User[playerid][WeaponEquipped]);
						format(query,sizeof query,"UPDATE users SET weapon = '%s',ammo = '%s' WHERE userid = %d",wep,ammo,User[playerid][UserID]);
						db_query(Database, query);
						//sp = true;
						break;
				    }
				}
				db_free_result(Result);

		    }
			case 1:
			{
				TogglePlayerControllable(playerid, 1);
				large_string[0] = EOS;
				for(new i = 0; i < MAX_INVENTORY; i++)
				{
					if(UserItem[playerid][i][Value] > 0)
						format(large_string, sizeof large_string, "%s%d. %s (%d)\n", large_string, i+1, UserItem[playerid][i][ItemName], UserItem[playerid][i][Value]);
					else format(large_string, sizeof large_string, "%s%d. Empty Slot\n", large_string, i+1, UserItem[playerid][i][ItemName], UserItem[playerid][i][Value]);
				}
				Dialog_Show(playerid, dHouseStoreInv, DIALOG_STYLE_LIST, sendernameEx(playerid), large_string, "Close", "");					
			}
		}
	}
	else if(menuid == house_safe_open)
	{
		switch(row)
		{
		    case 0: // Check
		    {
				new query[60];
				format(query,sizeof query,""G"Safe:"GR" $%d.",H[User[playerid][HouseIN]][hsafe]);
				MSG(playerid,GRAD2,query);
				TogglePlayerControllable(playerid, 1);
		    }
		    case 1: // Deposit
		    {
                Dialog_Show(playerid,HouseDepo,DIALOG_STYLE_INPUT,"House","Insert the amount of cash you would like to deposit in your home in the empty field below:","Deposit","Cancel");
		    }
		    case 2: // Withdraw
		    {
      			Dialog_Show(playerid,HouseWithdraw,DIALOG_STYLE_INPUT,"House","Insert the amount of cash you would like to withdraw from your home in the empty field below:","Withdraw","Cancel");
		    }
		}
	}
    else if(menuid == house_bought_guest)
    {
        new bool:check;
        switch(row)
        {
            case 0:
            {
				foreach(Houses,i)
				{
    				if(!H[i][hexist]) continue; // if it doesnt exist then skip it
        			else if(i == User[playerid][HouseIN])
					{
    					MSG(playerid,GOLD,"ERROR:"GR" You can't do this option while inside a house.");
    					TogglePlayerControllable(playerid, 1);
    					break;
					}
    				else if(!IsPlayerInRangeOfPoint(playerid,2,H[i][hx],H[i][hy],H[i][hz])) continue;
					KnockHouse(playerid,i);
				}
            }
            case 1: // Lock/Unlock
            {
				foreach(Houses,i)
				{
    				if(!H[i][hexist]) continue; // if it doesnt exist then skip it
					if(User[playerid][HouseIN] != i) check = true;
					else check = false;
    				if(check == true && !IsPlayerInRangeOfPoint(playerid,2,H[i][hx],H[i][hy],H[i][hz])) continue;
    				LockHouse(playerid,i);

				}
            }
            case 3: // Rent/Unrent
            {
                TogglePlayerControllable(playerid,1);
				foreach(Houses,i)
				{
    				if(!H[i][hexist]) continue; // if it doesnt exist then skip it
        			if(i == User[playerid][HouseIN])
					{
    					MSG(playerid,GOLD,"ERROR:"GR" You can't do this option while inside a house.");
    					break;
					}
    				if(!IsPlayerInRangeOfPoint(playerid,2,H[i][hx],H[i][hy],H[i][hz])) continue;
					if(H[i][hrentable] == 0)
					{
					    MSG(playerid,GOLD,"ERROR:"GR" This house is not rentable.");
					    return 1;
					}
					else
					{
					    if(User[playerid][renting] > 0)
					    {
					    	if(User[playerid][renting] != i)
					        	return MSG(playerid,GOLD,"ERROR:"GR" You are already renting somewhere.");
					        User[playerid][renting] = 0;
							new query[100];
							format(query,sizeof query,"UPDATE users SET renting = 0 WHERE userid = %d",User[playerid][UserID]);
							db_query(Database, query);
							MSG(playerid,GREEN,"Info:"GR" You have stopped renting.");
							foreach(Player,p)
							{
								if(User[p][UserID] == H[i][howner])
									SFM(p,GREEN,"Info:"GR" %s has stopped renting your house (%s).",sendernameEx(playerid),H[i][hname]);
							}
					    }
					    else
					    {
						    if(User[playerid][uMoney] < H[i][hrent])
						        return MSG(playerid,GOLD,"ERROR:"GR" You do not have enough cash to start renting.");
							GiveMoney(playerid,-H[i][hrent]);
							User[playerid][renting] = i;
							new query[100];
							format(query,sizeof query,"UPDATE users SET renting = %d WHERE userid = %d",User[playerid][renting],User[playerid][UserID]);
							db_query(Database, query);
							MSG(playerid,GREEN,"Info:"GR" You have started renting this house.");
							foreach(Player,p)
							{
								if(User[p][UserID] == H[i][howner])
									SFM(p,GREEN,"Info:"GR" %s has started renting your house (%s).",sendernameEx(playerid),H[i][hname]);
							}
						}

					}
				}
            }
			case 2: // Lights
			{
			    	TogglePlayerControllable(playerid, 1);
					if(User[playerid][HouseIN] == -1)
					{
					    MSG(playerid,GOLD,"ERROR:"GR" You must be inside your house to use this option.");
					    return 1;
					}
					//printf("User[playerid][renting] = %d; User[playerid][HouseIN] = %d",User[playerid][renting],User[playerid][HouseIN]);
					if(User[playerid][renting] != User[playerid][HouseIN])
    				{
						MSG(playerid,GOLD,"ERROR:"GR" You don't own or rent this house.");
						return 1;
					}
					switch(H[User[playerid][HouseIN]][hlights])
					{
					    case false: // lights are on, turn them off
					    {
							foreach(Player,p)
					        {
					            if(User[p][HouseIN] == User[playerid][HouseIN])
					            	TextDrawShowForPlayer(p, LightsOff);
							}
							PlayerActionMessageBubble(playerid,"switches the lights off.");
							H[User[playerid][HouseIN]][hlights] = true;
					    }
					    case true: // lights are off, turn them on
					    {
					        foreach(Player,p)
					        {
					            if(User[p][HouseIN] == User[playerid][HouseIN])
									TextDrawHideForPlayer(p, LightsOff);
							}
							PlayerActionMessageBubble(playerid,"switches the lights on.");
							H[User[playerid][HouseIN]][hlights] = false;
					    }
				}
			}
        }
    }
    return 1;
}
Dialog:dCarStoreInv(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		
		if(UserItem[playerid][listitem][Item] == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" Specified inventory slot is empty.");		
		format(large_string,sizeof large_string,"SELECT 1 FROM cartrunk WHERE vid = %d",V[User[playerid][gVar]][dataid]);
		new DBResult: Result = db_query(Database, large_string);
		new count = db_num_rows(Result);
		db_free_result(Result);
		new modifier = 0;
		switch(GetVehicleType(User[playerid][gVar]))
		{
			case CAR: modifier = DEFAULT_TRUNK_SLOTS;
			case BIKE: modifier = 1;
			case MOTORBIKE: modifier = 2;
		}
		if(count >= modifier) return MSG(playerid,GOLD,"Info:"GR" This trunk is full.");
		//(playerid, slot, itemid, itemname[], value, condition = 100, bool:mergable = false, bool:fakeitem = false)
		format(large_string,sizeof large_string,"INSERT INTO cartrunk (vid,thing,amount,type,condition,mergable,fakeitem,itemname,itemid) VALUES (%d,%d,%d,3, %d, %d, %d, '%s', %d)"
		,V[User[playerid][gVar]][dataid],
		UserItem[playerid][listitem][Item],
		UserItem[playerid][listitem][Value]
		,UserItem[playerid][listitem][Condition],
		UserItem[playerid][listitem][iMergable],
		UserItem[playerid][listitem][iFake]
		,UserItem[playerid][listitem][ItemName],
		UserItem[playerid][listitem][ItemID]);
		db_query(Database, large_string);

		format(large_string, sizeof large_string, "DELETE FROM inventory WHERE userid = %d AND slot = %d", User[playerid][UserID], listitem);
		db_query(Database, large_string);
		UserItem[playerid][listitem][Item] = 0;
		UserItem[playerid][listitem][Value] = 0;
		UserItem[playerid][listitem][Condition] = 0;
		UserItem[playerid][listitem][iFake] = false;
		UserItem[playerid][listitem][iMergable] = false;
		UserItem[playerid][listitem][ItemID] = 0;
		format(UserItem[playerid][listitem][ItemName], MAX_ITEM_NAME, "");	
		UpdateInventoryHeader(playerid);
		UpdateInventorySlot(playerid, listitem);

		PlayerActionMessageBubble(playerid, "stores an item in the trunk.");
		cmd_v(playerid,"trunk");
	}
	return 1;
}
#define MAX_HOUSE_INVENTORY 30
Dialog:dHouseTakeInv(playerid, response, listitem, inputtext[])
{
	TogglePlayerControllable(playerid, 1);
	if(response)
	{
		format(large_string, sizeof large_string, "SELECT 1 FROM houseinv WHERE hid = %d", User[playerid][HouseIN]);
		new DBResult: Result = db_query(Database, large_string);
		if(!db_num_rows(Result))
		{
			MSG(playerid, GOLD, "ERROR:"GR" Your house storage is empty.");
			return db_free_result(Result);
		}
		if(!IsNumeric(inputtext))
		 	return MSG(playerid, GOLD, "ERROR:"GR" Invalid input.");
		new slot = strval(inputtext);
		format(large_string, sizeof large_string, "SELECT * FROM houseinv WHERE hid = %d AND slot = %d", User[playerid][HouseIN], slot);
		Result = db_query(Database, large_string);
		if(!db_num_rows(Result))
		{
			MSG(playerid, GOLD, "ERROR:"GR" Invalid slot specified.");
			return db_free_result(Result);
		}
		new item,value,cond,merg,fake,name[MAX_ITEM_NAME];
		item = db_get_field_assoc_int(Result, "itemid");
		value = db_get_field_assoc_int(Result, "value");
		cond = db_get_field_assoc_int(Result, "condition");
		merg = db_get_field_assoc_int(Result, "mergable");
		fake = db_get_field_assoc_int(Result, "fakeitem");
		db_get_field_assoc(Result, "itemname", name, MAX_TRAIT_NAME);
		if(merg == 0)
		{			
			if(fake == 0) UpdateItem(playerid, GetInventoryFreeSlot(playerid), item, name, value, cond, false, false);
			else UpdateItem(playerid, GetInventoryFreeSlot(playerid), item, name, value, cond, false, true);
		}
		else if(merg == 1)
		{
			new pslot = FindPlayerItemFree(playerid, name);
			//SFM(playerid, -1, "pslot %d", pslot);
			if(fake == 0) UpdateItem(playerid, pslot, item, name, value, cond, true, false);
			else UpdateItem(playerid, pslot, item, name, value, cond, true, true);
		}
		
		format(large_string, sizeof large_string,"DELETE FROM houseinv WHERE hid = %d AND slot = %d", User[playerid][HouseIN], slot);
		db_query(Database, large_string);
		//UpdateItem(playerid, slot, itemid, itemname[], value, condition = 100, bool:mergable = false, bool:fakeitem = false)		
		UpdateInventoryHeader(playerid);
		UpdateInventorySlot(playerid, listitem);

		PlayerActionMessageBubble(playerid, "retrieves an item from their house storage.");
	}
	return 1;
}
Dialog:dHouseStoreInv(playerid, response, listitem, inputtext[])
{
	TogglePlayerControllable(playerid, 1);
	if(response)
	{
		if(UserItem[playerid][listitem][Item] == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" Specified inventory slot is empty.");
		format(large_string, sizeof large_string, "SELECT 1 FROM houseinv WHERE hid = %d", User[playerid][HouseIN]);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result) >= MAX_HOUSE_INVENTORY)
		{
			MSG(playerid, GOLD, "ERROR:"GR" Your house storage is full.");
			return db_free_result(Result);
		}

		new query[124];
		format(query, sizeof query, "SELECT slot FROM houseinv WHERE hid = %d ORDER BY slot DESC", User[playerid][HouseIN]);
		Result = db_query(Database, query);
		if(!db_num_rows(Result)) query[0] = 0;
		query[0] = db_get_field_assoc_int(Result, "slot")+1;

		format(large_string, sizeof large_string,"INSERT INTO houseinv (slot, hid, itemid, itemname, value, condition, mergable, fakeitem) VALUES (%d, %d, %d, '%s', %d, %d, %d, %d)",
		query[0],User[playerid][HouseIN], UserItem[playerid][listitem][Item], UserItem[playerid][listitem][ItemName], UserItem[playerid][listitem][Value], UserItem[playerid][listitem][Condition], UserItem[playerid][listitem][iMergable], UserItem[playerid][listitem][iFake]);
		db_query(Database, large_string);

		format(large_string, sizeof large_string, "DELETE FROM inventory WHERE userid = %d AND slot = %d", User[playerid][UserID], listitem);
		db_query(Database, large_string);
		UserItem[playerid][listitem][Item] = 0;
		UserItem[playerid][listitem][Value] = 0;
		UserItem[playerid][listitem][Condition] = 0;
		UserItem[playerid][listitem][iFake] = false;
		UserItem[playerid][listitem][iMergable] = false;
		format(UserItem[playerid][listitem][ItemName], MAX_ITEM_NAME, "");	
		UpdateInventoryHeader(playerid);
		UpdateInventorySlot(playerid, listitem);

		PlayerActionMessageBubble(playerid, "stores an item in their house storage.");
	}
	return 1;
}

Dialog:TakeWeapon(playerid, response, listitem, inputtext[])
{
    TogglePlayerControllable(playerid, 1);
    if(response)
    {
		if(User[playerid][WeaponEquipped] > 0)
		    return MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
		new query[224];
		format(query,sizeof query,"SELECT storage,storageammo FROM house WHERE hid = %d",User[playerid][HouseIN]);
		new DBResult: Result = db_query(Database, query);
		new weapons[101],
  			ammo[101];


		db_get_field_assoc(Result, "storage",weapons, 100);
		db_get_field_assoc(Result, "storageammo",ammo, 100);
		new wep[10];
		new am[10];
		sscanf(weapons,"p<,>dddddddddd",wep[0],wep[1],wep[2],wep[3],wep[4],wep[5],wep[6],wep[7],wep[8],wep[9]);
		sscanf(ammo,"p<,>dddddddddd",am[0],am[1],am[2],am[3],am[4],am[5],am[6],am[7],am[8],am[9]);
		User[playerid][WeaponEquipped] = wep[listitem];
		printf("[housestorage_takeweapon_debug] listitem: %d",listitem);
		User[playerid][WeaponEquipped_Ammo] = am[listitem];
		GivePlayerWeapon(playerid,User[playerid][WeaponEquipped],User[playerid][WeaponEquipped_Ammo]);
		am[listitem] = 0;
		wep[listitem] = 0;

		new wepname[24];
		GetWeaponName(User[playerid][WeaponEquipped],wepname, sizeof wepname);
		format(query,sizeof query,"takes their %s from the house safe.",wepname);
		cmd_ame(playerid,query);
		format(query,sizeof query,"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",wep[0],wep[1],wep[2],wep[3],wep[4],wep[5],wep[6],wep[7],wep[8],wep[9]);
		new ammostor[101];
		format(ammostor,sizeof query,"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",am[0],am[1],am[2],am[3],am[4],am[5],am[6],am[7],am[8],am[9]);
		format(query, sizeof query,"UPDATE house SET storage = '%s',storageammo = '%s' WHERE hid = %d",query,ammostor,User[playerid][HouseIN]);
		db_query(Database, query);
		db_free_result(Result);
    }
	return 1;
}
Dialog:dAlarmUpgrade(playerid, response, listitem, inputtext[])
{
	TogglePlayerControllable(playerid, 1);
	if(response)
	{
	    new query[124];
		format(query, sizeof query,"SELECT alarm from house WHERE hid = %d",User[playerid][HouseIN]);
		new DBResult:Result = db_query(Database, query);
		new alarm = db_get_field_assoc_int(Result, "alarm");
		if(alarm > 2)
		{
		    MSG(playerid,GOLD,"ERROR:"GR" Your house alarm is already at maximum level.");
		    db_free_result(Result);
		    return 1;
		}
		if(User[playerid][uMoney] < 3000)
		{
		    db_free_result(Result);
			return MSG(playerid,GOLD,"ERROR:"GR" You cannot afford the upgrade.");
		}
		alarm++;
		MSG(playerid,WHITE,"SERVER: You have upgraded your house alarm for $3000!");
		format(query,sizeof query,"UPDATE house SET alarm = %d WHERE hid = %d",alarm,User[playerid][HouseIN]);
		db_query(Database, query);
		db_free_result(Result);
		GiveMoney(playerid,-3000);
	}
	return 1;
}
Dialog:dLockUpgrade(playerid, response, listitem, inputtext[])
{
	TogglePlayerControllable(playerid, 1);
	if(response)
	{
	    new query[124];
		format(query, sizeof query,"SELECT locklevel from house WHERE hid = %d",User[playerid][HouseIN]);
		new DBResult:Result = db_query(Database, query);
		new alarm = db_get_field_assoc_int(Result, "locklevel");
		if(alarm > 2)
		{
		    MSG(playerid,GOLD,"ERROR:"GR" Your house lock is already at maximum level.");
		    db_free_result(Result);
		    return 1;
		}
		if(User[playerid][uMoney] < 3000)
		{
		    db_free_result(Result);
			return MSG(playerid,GOLD,"ERROR:"GR" You cannot afford the upgrade.");
		}
		GiveMoney(playerid,-3000);
		alarm++;

		MSG(playerid,WHITE,"SERVER: You have upgraded your house lock for $3000!");
		format(query,sizeof query,"UPDATE house SET locklevel = %d WHERE hid = %d",alarm,User[playerid][HouseIN]);
		db_query(Database, query);
		db_free_result(Result);


	}
	return 1;
}
Dialog:dAddTenant(playerid, response, listitem, inputtext[])
{
    TogglePlayerControllable(playerid, 1);
    if(response)
    {
        if(IsNumeric(inputtext))
		{
		    MSG(playerid,GOLD,"ERROR:"GR" Specified name does not exist.");
		    return cmd_house(playerid,"");
		}
        if(User[playerid][HouseIN] < 1)
            return MSG(playerid,GOLD,"ERROR:"GR" You are not inside your house.");
		new query[124];
		format(query,sizeof query,"SELECT userid FROM users WHERE username = '%q' LIMIT 1",inputtext);
		new DBResult: Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
		    format(query,sizeof query,"SERVER: %s is now a tenant in this house.",inputtext);
		    MSG(playerid,WHITE,query);
		    new userid = db_get_field_assoc_int(Result, "userid");
		    foreach(Player,i)
		    {
		        if(!strcmp(User[i][Username],inputtext))
		        {
					format(query,sizeof query,"SERVER: You are now a tenant in "G"%s"W". Type (/setspawn %d) to set it as your spawn point.",H[User[playerid][HouseIN]][hname],User[playerid][HouseIN]);
					MSG(i,WHITE,query);
					User[i][renting] = User[playerid][HouseIN];
				}
		    }
		    format(query,sizeof query,"UPDATE users SET renting = %d WHERE userid = %d",User[playerid][HouseIN],userid);
			db_query(Database, query);
		}
		else
		{
			cmd_house(playerid,"");
			MSG(playerid,GOLD,"ERROR:"GR" Specified name does not exist.");
			return 1;
		}
		db_free_result(Result);
    }
    return 1;
}
Dialog:HouseDepo(playerid, response, listitem, inputtext[])
{
	TogglePlayerControllable(playerid, 1);
	if(response)
	{
		if(!IsNumeric(inputtext))
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid input."),
			Dialog_Show(playerid,HouseDepo,DIALOG_STYLE_INPUT,"House","Insert the amount of cash you would like to deposit in your home in the empty field below:","Deposit","Cancel");
		new cash = strval(inputtext);
		if(cash < 1)
		    return MSG(playerid,GOLD,"ERROR:"GR" Invalid input."),
		    Dialog_Show(playerid,HouseDepo,DIALOG_STYLE_INPUT,"House","Insert the amount of cash you would like to deposit in your home in the empty field below:","Deposit","Cancel");
		else if(cash > User[playerid][uMoney])
		    return MSG(playerid,GOLD,"ERROR:"GR" You don't have this much."),
            Dialog_Show(playerid,HouseDepo,DIALOG_STYLE_INPUT,"House","Insert the amount of cash you would like to deposit in your home in the empty field below:","Deposit","Cancel");
		new query[124];
		format(query, sizeof query,"Info: You have deposited "G"$%d"GR" in your house safe.",cash);
		MSG(playerid,GRAD2,query);
		GiveMoney(playerid,-cash);
		H[User[playerid][HouseIN]][hsafe] += cash;
		format(query,sizeof query,"UPDATE house SET safe = %d WHERE hid = %d",H[User[playerid][HouseIN]][hsafe],User[playerid][HouseIN]);
		db_query(Database, query);
	}
	return 1;
}
Dialog:HouseWithdraw(playerid, response, listitem, inputtext[])
{
	TogglePlayerControllable(playerid, 1);
	if(response)
	{
		if(!IsNumeric(inputtext))
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid input."),
			            Dialog_Show(playerid,HouseWithdraw,DIALOG_STYLE_INPUT,"House","Insert the amount of cash you would like to withdraw from your home in the empty field below:","Withdraw","Cancel");
		new cash = strval(inputtext);
		if(cash < 1)
		    return MSG(playerid,GOLD,"ERROR:"GR" Invalid input."),
		                Dialog_Show(playerid,HouseWithdraw,DIALOG_STYLE_INPUT,"House","Insert the amount of cash you would like to withdraw from your home in the empty field below:","Withdraw","Cancel");
		else if(cash > H[User[playerid][HouseIN]][hsafe])
		    return MSG(playerid,GOLD,"ERROR:"GR" You don't have this much in the safe."),
            Dialog_Show(playerid,HouseWithdraw,DIALOG_STYLE_INPUT,"House","Insert the amount of cash you would like to withdraw from your home in the empty field below:","Withdraw","Cancel");
		new query[124];
		format(query, sizeof query,"Info: You have withdrawn "G"$%d"GR" from your house safe.",cash);
		MSG(playerid,GRAD2,query);
		GiveMoney(playerid,cash);
		H[User[playerid][HouseIN]][hsafe] -= cash;
		format(query,sizeof query,"UPDATE house SET safe = %d WHERE hid = %d",H[User[playerid][HouseIN]][hsafe],User[playerid][HouseIN]);
		db_query(Database, query);
	}
	return 1;
}


stock LockHouse(playerid,houseid)
{
	new i = houseid;
    if(User[playerid][UserID] == H[i][howner] || User[playerid][renting] == i)
    {
		switch(H[i][hlock])
		{
			case 0:
			{
	 			cmd_ame(playerid,"locks the house.");
	 			ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 0, 0, 0, 0, 0, 1);
	 			H[i][hlock] = 1;
			}
			case 1:
			{
	 			cmd_ame(playerid,"unlocks the house.");
	 			ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 0, 0, 0, 0, 0, 1);
	 			H[i][hlock] = 0;
			}
		}
		TogglePlayerControllable(playerid,1);
		new query[120];
		format(query,sizeof query,"UPDATE house SET lock = %d WHERE hid = %d",H[i][hlock],i);
		db_query(Database,query);
	}
	else
	{	MSG(playerid,GOLD,"ERROR:"GR" You do not have the keys to this house.");
	    TogglePlayerControllable(playerid,1); }

	return 1;
}
// CMD:setattacho(playerid,params[])
// {
// 	new id,index;
// 	sscanf(params,"dd",id,index);
// 	SetPlayerAttachedObject(playerid, index, id, 1);
// 	EditAttachedObject(playerid, index);
// 	SFM(playerid,GREEN,"index: %d; modelid: %d",index,id);
// 	return 1;
// }
CMD:editattacho(playerid,params[])
{
	EditAttachedObject(playerid, strval(params));
	SFM(playerid,GREEN,"index: %d",strval(params));
	return 1;
}
// CMD:setmyskin(playerid,params[])
// {
// 	SetPlayerSkin(playerid,strval(params));
// 	return 1;
// }
CMD:setskin(playerid,params[])
{
	if(User[playerid][Useradmin] >= 2)
	{
	    new id,amount;
		if(sscanf(params,"ui",id,amount)) return MSG(playerid,GOLD,"[Syntax]:"GR" /setskin [playerid/partofname] [skinid]");
		if(User[id][Logged] == false) return MSG(playerid,GOLD,"[ERROR]:"GR" Specified player is offline.");
		SetPlayerSkin(id, amount);
		User[id][uSkin] = amount;
		format(large_string,sizeof large_string,"UPDATE users SET skin = %d WHERE userid = %d", amount, User[id][UserID]);
		db_query(Database, large_string);
		Wait(playerid,"Skin has been set");
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:setvw(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new id,amount;
		if(sscanf(params,"ui",id,amount)) return MSG(playerid,GOLD,"[Syntax]:"GR" /setvw [playerid/partofname] [vw]");
		if(User[id][Logged] == false) return MSG(playerid,GOLD,"[ERROR]:"GR" Specified player is offline.");
		User[id][pvw] = amount;
		SetPlayerVirtualWorld(id, amount);
		SFM(playerid,-1,"VW has been set to %d",amount);
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:setint(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new id,amount;
		if(sscanf(params,"ui",id,amount)) return MSG(playerid,GOLD,"[Syntax]:"GR" /setint [playerid/partofname] [int]");
		if(User[id][Logged] == false) return MSG(playerid,GOLD,"[ERROR]:"GR" Specified player is offline.");
		User[id][pint] = amount;
		SetPlayerInterior(id, amount);
		SFM(playerid,-1,"Interior has been set to %d",amount);
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
/*public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if(playertextid == csname[playerid])
		return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
	if(playertextid == csnature[playerid])
	{
		new trait[MAX_TRAIT_NAME];
		GetPVarString(playerid, "Nature", trait, MAX_TRAIT_NAME);
		if(isnull(trait)) Dialog_Show(playerid,dSheetSetNature,DIALOG_STYLE_INPUT,
		"Interactive Character Sheet",
		"A character's Nature is her true self, her innermost being the person she truly is.\n** Type (/learn archetypes) to bring up a sample list for Nature and Demeanor.","Set","Cancel");
		else MSG(playerid,GRAD2,"ERROR: Nature is already set.");
		return 1;	
	}
	if(playertextid == csdemeanor[playerid])
	{
		Dialog_Show(playerid,dSheetSetDemeanor,DIALOG_STYLE_INPUT,"Interactive Character Sheet","A character's Demeanor is the face which she shows to the world.\n** Type (/learn archetypes) to bring up a sample list for Nature and Demeanor.","Set","Cancel");			
		return 1;
	}
	if(playertextid == csage[playerid])
	{
		if(GetPVarInt(playerid,"vAge") < 1 || User[playerid][Useradmin] > 0)
			Dialog_Show(playerid,dSheetSetAge,DIALOG_STYLE_INPUT,"Interactive Character Sheet","One of the ways that Vampires determine the social pecking order is through age.\nThe older you are, the less leniency you'll receive in character when making mistakes.","Set","Cancel");			
		return 1;
	}
	if(playertextid == csgen[playerid])
		return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
	if(playertextid == csconcept[playerid])
	{
		Dialog_Show(playerid,dSheetSetConcept,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Your character's concept is a brief ''sketch'' of who your character is, anything from Crazed Vigilante to Aging Porn Star.\n** Press F6 and type (/learn concept) to bring up a list of sample concepts.","Set","Cancel");
		return 1;
	}
	if(playertextid == csclan[playerid])
		return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
	if(playertextid == cssect[playerid])
	{
		return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
	}
	if(playertextid == cssire[playerid])
	{
		new trait[MAX_TRAIT_NAME];
		GetPVarString(User[playerid][SheetMonitor], "Sire", trait, MAX_TRAIT_NAME);
		if(isnull(trait)) Dialog_Show(playerid,dSheetSetSire,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Your sire's name.","Set","Cancel");
		else MSG(playerid,GRAD2,"ERROR: Sire is already set.");
		return 1;	
	}
	if(GetPVarInt(playerid, "FreshCS") == 1)
	{
		MSG(playerid,MAROON,"Character Creation Process (type (/next) to move to the next step):");
		MSG(playerid,GRAD2,"Step I (Character Concept): Choose concept, Nature, and Demeanor. (type /learn [term] to learn more about a specified term)");
		return 1;
	}
	if(playertextid == csstr[playerid])
	{

	}
    return 0;
}*/
/*CMD:showmecs(playerid,params[])
{
	SelectTextDraw(playerid, 0x00FF00FF);
	TextDrawShowForPlayer(playerid, csback);
	TextDrawShowForPlayer(playerid, cshead);
	TextDrawShowForPlayer(playerid, csheadsec);
	PlayerTextDrawShow(playerid, csname[playerid]);
	PlayerTextDrawShow(playerid, csnature[playerid]);
	PlayerTextDrawShow(playerid, csdemeanor[playerid]);
	PlayerTextDrawShow(playerid, csage[playerid]);
	PlayerTextDrawShow(playerid, csgen[playerid]);
	PlayerTextDrawShow(playerid, csconcept[playerid]);
	PlayerTextDrawShow(playerid, csclan[playerid]);
	PlayerTextDrawShow(playerid, cssect[playerid]);
	PlayerTextDrawShow(playerid, cssire[playerid]);
	TextDrawShowForPlayer(playerid, csabs);
	PlayerTextDrawShow(playerid, csstr[playerid]);
	PlayerTextDrawShow(playerid, csdex[playerid]);
	PlayerTextDrawShow(playerid, csstam[playerid]);
	PlayerTextDrawShow(playerid, cscharisma[playerid]);
	PlayerTextDrawShow(playerid, csmanip[playerid]);
	PlayerTextDrawShow(playerid, csapp[playerid]);
	PlayerTextDrawShow(playerid, csperc[playerid]);
	PlayerTextDrawShow(playerid, csintel[playerid]);
	PlayerTextDrawShow(playerid, cswits[playerid]);
	TextDrawShowForPlayer(playerid, csattr);
	PlayerTextDrawShow(playerid, csalert[playerid]);
	PlayerTextDrawShow(playerid, csath[playerid]);
	PlayerTextDrawShow(playerid, csaware[playerid]);
	PlayerTextDrawShow(playerid, csbrawl[playerid]);
	PlayerTextDrawShow(playerid, csempathy[playerid]);
	PlayerTextDrawShow(playerid, csexpression[playerid]);
	PlayerTextDrawShow(playerid, csintim[playerid]);
	TextDrawShowForPlayer(playerid, csmental);
	PlayerTextDrawShow(playerid, csleader[playerid]);
	PlayerTextDrawShow(playerid, csstreetwise[playerid]);
	PlayerTextDrawShow(playerid, cssubterfuge[playerid]);
	PlayerTextDrawShow(playerid, csanimal[playerid]);
	PlayerTextDrawShow(playerid, cscrafts[playerid]);
	PlayerTextDrawShow(playerid, csdrive[playerid]);
	PlayerTextDrawShow(playerid, csetiquette[playerid]);
	PlayerTextDrawShow(playerid, csfirearms[playerid]);
	PlayerTextDrawShow(playerid, cslarceny[playerid]);
	PlayerTextDrawShow(playerid, csmelee[playerid]);
	PlayerTextDrawShow(playerid, csperformance[playerid]);
	PlayerTextDrawShow(playerid, csstealth[playerid]);
	PlayerTextDrawShow(playerid, cssurvival[playerid]);
	PlayerTextDrawShow(playerid, csacademics[playerid]);
	PlayerTextDrawShow(playerid, cscomputer[playerid]);
	PlayerTextDrawShow(playerid, csfinance[playerid]);
	PlayerTextDrawShow(playerid, csinvestigation[playerid]);
	PlayerTextDrawShow(playerid, cslaw[playerid]);
	PlayerTextDrawShow(playerid, csmedicine[playerid]);
	PlayerTextDrawShow(playerid, csoccult[playerid]);
	PlayerTextDrawShow(playerid, cspolitics[playerid]);
	PlayerTextDrawShow(playerid, csscience[playerid]);
	PlayerTextDrawShow(playerid, cstechnology[playerid]);
	PlayerTextDrawShow(playerid, cshealth[playerid]);
	PlayerTextDrawShow(playerid, cswillpower[playerid]);
	PlayerTextDrawShow(playerid, cshumanity[playerid]);
	PlayerTextDrawShow(playerid, csstrrate[playerid]);
	PlayerTextDrawShow(playerid, csdexrate[playerid]);
	PlayerTextDrawShow(playerid, csstaminarate[playerid]);
	PlayerTextDrawShow(playerid, cscharismarate[playerid]);
	PlayerTextDrawShow(playerid, csmaniprate[playerid]);
	PlayerTextDrawShow(playerid, csapprate[playerid]);
	PlayerTextDrawShow(playerid, cspercrate[playerid]);
	PlayerTextDrawShow(playerid, csintelrate[playerid]);
	PlayerTextDrawShow(playerid, cswitsrate[playerid]);
	PlayerTextDrawShow(playerid, csalertrate[playerid]);
	PlayerTextDrawShow(playerid, csathrate[playerid]);
	PlayerTextDrawShow(playerid, csawarerate[playerid]);
	PlayerTextDrawShow(playerid, csbrawlrate[playerid]);
	PlayerTextDrawShow(playerid, csempathyrate[playerid]);
	PlayerTextDrawShow(playerid, csexpressionrate[playerid]);
	PlayerTextDrawShow(playerid, csintimrate[playerid]);
	PlayerTextDrawShow(playerid, csleadershiprate[playerid]);
	PlayerTextDrawShow(playerid, csstreetwiserate[playerid]);
	PlayerTextDrawShow(playerid, cssubterfugerate[playerid]);
	PlayerTextDrawShow(playerid, csanimalrate[playerid]);
	PlayerTextDrawShow(playerid, cscraftsrate[playerid]);
	PlayerTextDrawShow(playerid, csdriverate[playerid]);
	PlayerTextDrawShow(playerid, csetiquetterate[playerid]);
	PlayerTextDrawShow(playerid, csfirearmsrate[playerid]);
	PlayerTextDrawShow(playerid, cslarcenyrate[playerid]);
	PlayerTextDrawShow(playerid, csmeleerate[playerid]);
	PlayerTextDrawShow(playerid, csperformancerate[playerid]);
	PlayerTextDrawShow(playerid, csstealthrate[playerid]);
	PlayerTextDrawShow(playerid, cssurvivalrate[playerid]);
	PlayerTextDrawShow(playerid, csacademicsrate[playerid]);
	PlayerTextDrawShow(playerid, cscomputerrate[playerid]);
	PlayerTextDrawShow(playerid, csfinancerate[playerid]);
	PlayerTextDrawShow(playerid, csinvestigationrate[playerid]);
	PlayerTextDrawShow(playerid, cslawrate[playerid]);
	PlayerTextDrawShow(playerid, csmedicinerate[playerid]);
	PlayerTextDrawShow(playerid, csoccultrate[playerid]);
	PlayerTextDrawShow(playerid, cspoliticsrate[playerid]);
	PlayerTextDrawShow(playerid, cssciencerate[playerid]);
	PlayerTextDrawShow(playerid, cstechnologyrate[playerid]);
	//vamp
	TextDrawShowForPlayer(playerid, csdisciplines);
	PlayerTextDrawShow(playerid, csdiscipline1[playerid]);
	PlayerTextDrawShow(playerid, csdiscipline2[playerid]);
	PlayerTextDrawShow(playerid, csdiscipline3[playerid]);
	PlayerTextDrawShow(playerid, csdiscipline4[playerid]);
	PlayerTextDrawShow(playerid, csdiscipline5[playerid]); 
	PlayerTextDrawShow(playerid, csdiscipline6[playerid]);
	return 1;
}*/
// Animal Variables
#define MAX_ANIMALS 2
#define DEER 0
#define WOLF 1
#define ANIMAL_SPEED 5
#define WOLF_OBJECT -1000
new Animal[MAX_ANIMALS];
new DeerPath;
new WolfPath;
new AnimalStatus[MAX_ANIMALS];
new AnimalDeath[MAX_ANIMALS];
new Float:AnimalX[MAX_ANIMALS];
new Float:AnimalY[MAX_ANIMALS];
new Float:AnimalZ[MAX_ANIMALS];
new AnimalWarning;
new AnimalWarningRun;
new AnimalAttack[MAX_ANIMALS];
new AttackCooldown[MAX_ANIMALS];
new bool:AnimalSkinned[MAX_ANIMALS];
#define ALIVE 1
#define DEAD  0
new Float:DeerPathway[][] =
{
	{936.710998,-429.698913,57.287811,344.871978},
	{940.335754,-413.671905,59.091217,48.061485},
	{924.236022,-400.079681,54.949554,87.353858},
	{907.293579,-399.658599,50.235092,144.569076},
	{893.901977,-418.458709,45.676685,62.078079},
	{878.381530,-411.360656,41.045875,13.364749},
	{875.825134,-388.878204,40.528682,50.589103},
	{858.243835,-387.568939,34.933761,74.256454},
	{842.806335,-369.502075,31.494279,43.006374},
	{828.887145,-358.676544,28.232688,61.388774},
	{818.629211,-350.819641,25.594383,108.493682},
	{805.009277,-356.954895,22.338500,195.120727},
	{808.007812,-367.973724,23.368190,156.747482},
	{801.078552,-384.804809,20.912714,205.920394},
	{808.406188,-396.767211,22.860181,135.837478},
	{798.884338,-408.193450,21.381973,121.591117},
	{790.559082,-424.917877,18.660732,256.012451},
	{813.131591,-428.925415,22.860139,284.964752},
	{831.281066,-424.264190,28.288154,321.040222},
	{842.817260,-411.419921,31.492019,287.722106},
	{866.048278,-407.687805,37.271022,274.624572},
	{886.850097,-408.592956,43.865573,259.459136},
	{900.761047,-411.591705,48.011615,200.635467},
	{910.341308,-431.915100,49.830127,210.745819},
	{930.361083,-430.861450,55.395492,278.530853},
	{943.037048,-420.128784,59.646278,309.551177},
	{959.727233,-408.306976,63.574672,303.117309},
	{969.364379,-405.849914,65.532699,280.139190},
	{990.153381,-408.255004,65.822746,265.203460},
	{1002.923645,-413.905944,64.340446,150.543273},
	{991.518981,-428.372283,58.795089,137.905334},
	{975.901916,-435.074188,58.630844,127.795021},
	{959.948425,-434.270385,58.729125,91.489791},
	{940.018371,-433.334594,58.042900,68.052246}

};
// DEERPATHWAY FNRP North Rock 
//new Float:DeerPathway[][] =
// {
// 	{2477.921386,-890.000427,97.199150,70.887771},
// 	{2468.798095,-886.125488,99.087921,66.187721},
// 	{2456.564208,-878.854553,101.688323,69.007751},
// 	{2444.260498,-882.841125,102.881156,131.048339},
// 	{2437.499267,-889.547180,102.695983,80.601196},
// 	{2433.487792,-886.978515,103.812622,56.474288},
// 	{2430.059570,-884.814086,104.341918,54.594272},
// 	{2420.952880,-876.675292,105.628219,157.681884},
// 	{2417.716796,-884.472595,104.681869,176.482070},
// 	{2418.056396,-890.863403,103.403755,186.822143},
// 	{2419.004638,-901.698425,101.576957,138.568328},
// 	{2411.336425,-904.166198,100.603363,55.534210},
// 	{2405.906982,-899.618164,101.285110,44.880790},
// 	{2401.363037,-889.111145,103.253662,17.307199},
// 	{2402.893066,-875.337707,106.076446,306.806427},
// 	{2411.854980,-869.639526,106.867584,21.693855},
// 	{2409.253417,-861.862609,107.587341,42.374065},
// 	{2401.263427,-853.289916,110.064926,46.760761},
// 	{2393.181152,-853.275207,112.011276,17.620492},
// 	{2392.153808,-846.462463,113.266227,7.280415},
// 	{2395.926757,-841.445800,113.100776,29.840629},
// 	{2388.585937,-840.106750,115.575103,83.734474},
// 	{2382.162597,-840.943481,117.274192,101.907974},
// 	{2373.795654,-842.517456,118.897735,161.128509},
// 	{2373.741455,-847.557495,117.726562,158.308502},
// 	{2376.806640,-855.690063,114.919204,197.162200},
// 	{2383.336181,-862.363830,111.762077,237.269332},
// 	{2392.482666,-865.861938,109.404411,253.562850},
// 	{2400.172607,-869.557617,107.396232,241.342727},
// 	{2409.040527,-874.038696,106.523681,244.789474},
// 	{2421.600097,-880.060668,105.338867,244.162796},
// 	{2433.538574,-887.230957,103.757293,239.149459},
// 	{2445.062011,-880.584716,103.175476,302.780212},
// 	{2453.534912,-873.790161,102.741394,303.720184},
// 	{2459.950683,-874.906921,101.589614,230.086090},
// 	{2462.791503,-882.049499,100.409133,199.065780}
// };
new Float:WolfPathway[][] = 
{
	{2632.880371,-449.368774,67.966247,121.137001},
	{2625.829101,-454.031494,70.134757,121.137001},
	{2619.219238,-459.028656,72.395484,128.657073},
	{2614.057617,-463.157470,74.190093,128.657073},
	{2608.408691,-468.149780,76.222244,134.610458},
	{2608.386962,-472.460906,76.847229,187.250961},
	{2609.905273,-477.073150,77.157211,195.711044},
	{2612.668945,-481.081298,77.090576,214.197891},
	{2615.830810,-483.866210,76.755409,241.771499},
	{2621.417968,-485.373748,75.672286,258.691680},
	{2626.185546,-485.852722,74.629104,258.691680},
	{2630.992431,-489.955627,74.089500,191.951049},
	{2628.127197,-494.926177,75.478103,150.590652},
	{2622.754882,-496.299468,76.932334,76.016609},
	{2616.573730,-495.091735,78.196762,76.016609},
	{2612.691650,-492.308715,78.699768,76.016609},
	{2608.183349,-490.997650,79.439216,76.016609},
	{2603.360351,-493.386932,79.997406,121.450378},
	{2598.745117,-493.350036,80.522415,72.256584},
	{2595.739501,-489.541931,80.849441,27.136157},
	{2597.050292,-483.768096,80.677581,314.128845},
	{2599.864013,-482.638793,80.293716,314.128845},
	{2602.206054,-479.002655,79.225952,314.128845},
	{2601.579589,-474.340240,78.701263,30.269550},
	{2603.402343,-471.170501,77.821380,5.515940},
	{2599.416015,-468.155120,78.315231,61.603187},
	{2593.490966,-469.776580,79.926902,107.036949},
	{2588.625732,-469.241149,80.981849,60.349842},
	{2586.620361,-465.007324,80.839599,21.496156},
	{2588.343750,-460.607025,79.805885,344.522491},
	{2590.283935,-455.598266,78.634239,307.548797},
	{2594.114501,-450.357849,76.988449,319.961853},
	{2599.219238,-450.110015,75.767044,310.441406},
	{2601.369628,-452.717681,75.640838,203.521194},
	{2602.748535,-457.886444,76.063278,196.001129},
	{2605.548583,-458.565765,75.509513,270.888488},
	{2608.738769,-459.198974,74.858345,270.888488},
	{2610.954833,-456.552551,73.962211,285.302001},
	{2611.908447,-448.791717,72.635528,357.682769},
	{2612.726806,-444.319152,71.837692,333.869262},
	{2615.620117,-440.227294,70.186553,310.055664},
	{2620.928710,-436.233825,67.902854,278.095367},
	{2624.295410,-435.894897,66.922958,246.135070},
	{2627.859375,-440.587890,67.145317,219.814849},
	{2632.245361,-443.041076,66.849639,243.001770},
	{2636.459716,-445.213592,66.500419,203.834732},
	{2637.676269,-449.404113,66.978767,136.780731}

};

public OnDynamicObjectMoved(objectid)
{
	if(objectid == Animal[DEER] && AnimalStatus[DEER] == ALIVE) 
	{
		DeerPath++;
		if(DeerPath >= sizeof(DeerPathway))
			DeerPath = 0;
		//printf("DeerPath %d", DeerPath);
		new speed = ANIMAL_SPEED;
		new Float:x, Float:y, Float:z;
		GetDynamicObjectPos(objectid, x, y, z);
		
		foreach(Player, i)
		{
			if(IsPlayerInRangeOfPoint(i, 25, x, y, z))
			{
				if(GetPlayerAnimationIndex(i) != 1274 && GetPlayerAnimationIndex(i) != 1159)
				{
					speed += 25;
					if(gettime() > AnimalWarning) MSG(i, RP, "* Deer notices the sudden movement in the surroundings and dashes away as a result.");
					AnimalWarning = gettime()+2;
				}
				else
				{
					if(gettime() > AnimalWarning) MSG(i, RP, "* Deer notices the movement in the surroundings and paces away as a result.");
					AnimalWarning = gettime()+2;
					speed += 15;
				}
			}
		}
		SetDynamicObjectRot(Animal[DEER], 0, 0, DeerPathway[DeerPath][3]+90);
		MoveDynamicObject(Animal[DEER], DeerPathway[DeerPath][0], DeerPathway[DeerPath][1], DeerPathway[DeerPath][2]-0.5, speed);
		//MoveDynamicObject(STREAMER_TAG_OBJECT objectid, Float:x, Float:y, Float:z, Float:speed, Float:rx = -1000.0, Float:ry = -1000.0, Float:rz = -1000.0)
	}
	if(objectid == Animal[WOLF] && AnimalStatus[WOLF] == ALIVE) 
	{
		if(AnimalAttack[WOLF] != 1)
			WolfPath++;
		if(WolfPath >= sizeof(WolfPathway))
			WolfPath = 0;
		//printf("WolfPath %d AnimalAttack %d", WolfPath, AnimalAttack[WOLF]);
		new speed = ANIMAL_SPEED;
		new Float:x, Float:y, Float:z;
		GetDynamicObjectPos(objectid, x, y, z);
		new bool:found;
		foreach(Player, i)
		{
			if(IsPlayerInRangeOfPoint(i, 15, x, y, z) && User[i][specing] == -1 && !IsPlayerInAnyVehicle(i))
			{
				if(GetPlayerAnimationIndex(i) != 1274 && GetPlayerAnimationIndex(i) != 1159)
				{
					if(User[i][Userrace] == 2) continue;
					if(GetPVarInt(i, "Animal Ken") < 3)
					{
						if(User[i][Death] < 1 && User[i][Health] > 10 && User[i][shapeshift] == 0)
						{
								if(GetDistance(x, y, z, WolfPathway[WolfPath][0], WolfPathway[WolfPath][1], WolfPathway[WolfPath][2]) > 30)
								{
									if(AnimalAttack[WOLF] == 1)
									{
										AnimalAttack[WOLF] = 0;
										AttackCooldown[WOLF] = 0;
										if(gettime() > AnimalWarningRun) MSG(i, RP, "* Wild Wolf dashes away.");
										AnimalWarningRun = gettime()+1;
										speed += 40;
									}
								}
								else
								{
									speed += 10;
									if(gettime() > AnimalWarning) MSG(i, RP, "* Wild Wolf attacks the present threat.");
									AnimalWarning = gettime()+1;
									GetPlayerPos(i, x, y, z);
									x += 1; // irregardless of facing angle it will be infront
									// Use getxyzbehindofplayer here(?)
									MoveDynamicObject(Animal[WOLF], x, y, z, speed);	
									AnimalAttack[WOLF] = 1;				
									// new Float:angle;
									// GetPlayerFacingAngle(i, angle);
									SetDynamicObjectRot(Animal[WOLF], 0, 0, 180);
									// SFM(i, -1, "Your angle: %f", angle);
									// if i set (angle+90), the wolf will look at the direction im looking at; this makes it pretty cool for pet-like systems

									if(gettime() > AttackCooldown[WOLF])
									{
										SetHealth(i, User[i][Health]-5);
										AttackCooldown[WOLF] = gettime()+1;
									}
								}
						}
					}
					else
					{
						speed += 12;
						if(gettime() > AnimalWarning) MSG(i, RP, "* Wild Wolf notices the movement in the surroundings and paces away peacefully as a result.");
						AnimalWarning = gettime()+2;							
					}
				}
				else
				{
					if(gettime() > AnimalWarning) MSG(i, RP, "* Wild Wolf notices the movement in the surroundings and dashes away as a result.");
					AnimalWarning = gettime()+2;
					speed += 20;
				}
				found = true;
			}
		}
		if(!found && AnimalAttack[WOLF] == 1)
		{
			AnimalAttack[WOLF] = 0;
			SetDynamicObjectPos(Animal[WOLF], WolfPathway[WolfPath][0], WolfPathway[WolfPath][1], WolfPathway[WolfPath][2]);
		}
		if(AnimalAttack[WOLF] != 1)
		{
			MoveDynamicObject(Animal[WOLF], WolfPathway[WolfPath][0], WolfPathway[WolfPath][1], WolfPathway[WolfPath][2], speed);
			SetDynamicObjectRot(Animal[WOLF], 0, 0, WolfPathway[WolfPath][3]+90);
		}
		//MoveDynamicObject(STREAMER_TAG_OBJECT objectid, Float:x, Float:y, Float:z, Float:speed, Float:rx = -1000.0, Float:ry = -1000.0, Float:rz = -1000.0)
	}
}
public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(objectid == Animal[DEER] && User[playerid][WeaponEquipped] == WEAPON_HUNTING_RIFLE)
	{
		//SetDynamicObjectRot(Animal[DEER], -90, 0, 0);
		SetDynamicObjectPos(Animal[DEER], DeerPathway[DeerPath][0], DeerPathway[DeerPath][1], DeerPathway[DeerPath][2]-0.5);
		SetTimerEx("AnimalRot", 150, false, "i", DEER);
		AnimalStatus[DEER] = DEAD;
		MSG(playerid, WHITE, "SERVER:"GR" You successfully killed the deer! Type (/skinanimal) while crouching besides it to start skinning it.");
		GetDynamicObjectPos(objectid, AnimalX[DEER], AnimalY[DEER], AnimalZ[DEER]);
		if(IsPlayerAdmin(playerid))
			SetPlayerPos(playerid, AnimalX[DEER], AnimalY[DEER], AnimalZ[DEER]);
	}
	else if(objectid == Animal[WOLF])
	{
		//SetDynamicObjectRot(Animal[DEER], -90, 0, 0);
		SetDynamicObjectPos(Animal[WOLF], WolfPathway[WolfPath][0], WolfPathway[WolfPath][1], WolfPathway[WolfPath][2]-0.5);
		SetTimerEx("AnimalRot", 150, false, "i", WOLF);
		AnimalStatus[WOLF] = DEAD;
		MSG(playerid, WHITE, "SERVER:"GR" You successfully killed the Wolf! Type (/skinanimal) while crouching besides it to start skinning it.");
		GetDynamicObjectPos(objectid, AnimalX[WOLF], AnimalY[WOLF], AnimalZ[WOLF]);
		if(IsPlayerAdmin(playerid))
			SetPlayerPos(playerid, AnimalX[WOLF], AnimalY[WOLF], AnimalZ[WOLF]);
	}
}

CMD:skinanimal(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159)
			return Wait(playerid,"~h~You are not crouching!");
		if(User[playerid][WeaponEquipped] != WEAPON_KNIFE)
			return MSG(playerid, GOLD, "ERROR:"GR" Wield your knife to use this command.");
		new bool:found = false;
		for(new i = 0; i < MAX_ANIMALS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2, AnimalX[i], AnimalY[i], AnimalZ[i]) && AnimalStatus[i] == DEAD)
			{
				if(AnimalSkinned[i] == true)
					return MSG(playerid, GOLD, "ERROR:"GR" This animal is already skinned.");
				ApplyAnim(playerid, "KNIFE", "knife_G", 4.1, 1, 1, 1, 1, -1, 1);
				//ApplyAnim(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
				SetTimerEx("SkinningAnimal", 1500, false, "dd", playerid, i);
				foreach(Player, p)
					if(IsPlayerInRangeOfPoint(p, 9, AnimalX[i], AnimalY[i], AnimalZ[i]))
						PlayAudioStreamForPlayer(p, "http://finalnights-rp.com/skinning.mp3");
				found = true;
			}
		}
		if(found == false)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in range of any dead animal.");
		return 1;
	}
	return 0;
}
forward SkinningAnimal(playerid, animal);
public SkinningAnimal(playerid, animal)
{
	if(User[playerid][Logged])
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2, AnimalX[animal], AnimalY[animal], AnimalZ[animal])) return MSG(playerid, GOLD, "ERROR:"GR" You moved away from the animal.");
		if(GetPVarInt(playerid, "SkinningAnimal") > 15)
		{
			if(AnimalSkinned[animal] == true) return MSG(playerid, GOLD, "ERROR:"GR" This animal is already skinned.");
			switch(animal)
			{
				case DEER:
				{
					new antler = random(1);
					new id;
					if(antler == 0) MSG(playerid, WHITE, "SERVER: You have finished skinning; collected: Venison (4), Animal Hide (1)");
					else 
					{
						MSG(playerid, WHITE, "SERVER: You have finished skinning; collected: Venison (4), Animal Hide (1), Deer Antler (2)");
						id = FindPlayerItemFree(playerid,"Deer Antler");
						UpdateItem(playerid, id, 27, "Deer Antler", 2, 100, true);		
						
					}	
					id = FindPlayerItemFree(playerid,"Animal Hide");
					UpdateItem(playerid, id, 26, "Animal Hide", 1, 100, true);		
					id = FindPlayerItemFree(playerid,"Venison");
					UpdateItem(playerid, id, 31, "Venison", 4, 100, true);							
					ClearAnimations(playerid, 1);
					AnimalSkinned[DEER] = true;
					DeletePVar(playerid, "SkinningAnimal");
				}
				case WOLF:
				{
					new id;
					id = FindPlayerItemFree(playerid,"Animal Hide");
					UpdateItem(playerid, id, 26, "Animal Hide", 5, 100, true);			
					id = FindPlayerItemFree(playerid,"Wolf Canines");
					UpdateItem(playerid, id, GetItemID("Wolf Canines"), "Wolf Canines", 1, 100, true);
					MSG(playerid, WHITE, "SERVER: You have finished skinning; collected: Animal Hide (5), Wolf Canines (1)");
					ClearAnimations(playerid, 1);
					AnimalSkinned[WOLF] = true;
					DeletePVar(playerid, "SkinningAnimal");
				}
			}
			return 1;
		}
		SetPVarInt(playerid, "SkinningAnimal", GetPVarInt(playerid, "SkinningAnimal")+1);
		GameTextForPlayer(playerid, "Skinning...", 1400, 1);
		SetTimerEx("SkinningAnimal", 1500, false, "dd", playerid, animal);
		return 1;
	}
	return 0;
}
forward AnimalRot(animal);
public AnimalRot(animal)
{
	if(IsValidDynamicObject(Animal[animal]))
	{
		SetDynamicObjectRot(Animal[animal], -90, 0, 0);
	}
}
stock SortValuesInArray(array[], size_of = sizeof(array))
{
    for(new i = (size_of - 1), j, temp; i != 0; i --)
    {
        for(j = 0; j < i; j ++)
        {
            if(array[i] < array[j])
            {
                temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }
    }
    return 1;
}
public OnGameModeInit()
{
	new tick = GetTickCount();
	SetGameModeText(GAMEMODENAME);
	/*-------------------------------[HOUSE MENU]------------------------------*/
    mhouse = CreateMenu("House", 1, 200.000000, 100.000000, 78.000000, 0.000000);
    SetMenuColumnHeader(mhouse, 0, "Options:");
    AddMenuItem(mhouse, 0, "Knock");
    AddMenuItem(mhouse, 0, "Buy");

    house_confirm = CreateMenu("Confirm?", 1, 200.000000, 100.000000, 78.000000, 0.000000);
    //SetMenuColumnHeader(house_confirm, 0, "Confirmation");
    AddMenuItem(house_confirm, 0, "Confirm");
    AddMenuItem(house_confirm, 0, "Cancel");

	house_confirm_sell = CreateMenu("House", 1, 200.000000, 100.000000, 78.000000, 0.000000);
    //SetMenuColumnHeader(house_confirm_sell, 0, "Confirmation");
    AddMenuItem(house_confirm_sell, 0, "Confirm");
    AddMenuItem(house_confirm_sell, 0, "Cancel");

	house_bought_for_owner = CreateMenu("House", 1, 200.000000, 100.000000, 78.000000, 0.000000);
    SetMenuColumnHeader(house_bought_for_owner, 0, "Options");
    AddMenuItem(house_bought_for_owner, 0, "Knock");
    AddMenuItem(house_bought_for_owner, 0, "Lock/Unlock");
    //AddMenuItem(house_bought_for_owner, 0, "Set Rentable");
    //AddMenuItem(house_bought_for_owner, 0, "Set Rent");
    AddMenuItem(house_bought_for_owner, 0, "Sell");
    AddMenuItem(house_bought_for_owner, 0, "Safe");
	AddMenuItem(house_bought_for_owner, 0, "Tenants");
 	AddMenuItem(house_bought_for_owner, 0, "Upgrades");
 	AddMenuItem(house_bought_for_owner, 0, "Lights");
 	AddMenuItem(house_bought_for_owner, 0, "Mailbox");

    house_mailbox = CreateMenu("Mailbox", 1, 200.000000, 100.000000, 78.000000, 0.000000);
    //SetMenuColumnHeader(house_confirm, 0, "Confirmation");
    AddMenuItem(house_mailbox, 0, "Check Mailbox");
    AddMenuItem(house_mailbox, 0, "Empty Mailbox");

    house_bought_guest = CreateMenu("House", 1, 200.000000, 100.000000, 78.000000, 0.000000);
    SetMenuColumnHeader(house_bought_guest, 0, "Options");
    AddMenuItem(house_bought_guest, 0, "Knock");
    AddMenuItem(house_bought_guest, 0, "Lock/Unlock");
    AddMenuItem(house_bought_guest, 0, "Lights");
    //AddMenuItem(house_bought_guest, 0, "Rent");

    house_safe = CreateMenu("House", 1, 200.000000, 100.000000, 78.000000, 0.000000);
    AddMenuItem(house_safe, 0, "Money");
    AddMenuItem(house_safe, 0, "Storage");

    house_safe_open = CreateMenu("House", 1, 200.000000, 100.000000, 78.000000, 0.000000);
    AddMenuItem(house_safe_open, 0, "Check");
    AddMenuItem(house_safe_open, 0, "Deposit");
    AddMenuItem(house_safe_open, 0, "Withdraw");

    house_storage = CreateMenu("House", 1, 200.000000, 100.000000, 78.000000, 0.000000);
    AddMenuItem(house_storage, 0, "Check Weapons");
	AddMenuItem(house_storage, 0, "Check Inventory Items");
    AddMenuItem(house_storage, 0, "Store");
    AddMenuItem(house_storage, 0, "Take");

    house_storage_sel = CreateMenu("House", 1, 200.000000, 100.000000, 78.000000, 0.000000);
    AddMenuItem(house_storage_sel, 0, "Store Weapon");
	AddMenuItem(house_storage_sel, 0, "Store Inventory Item");

    house_storage_sel_take = CreateMenu("House", 1, 200.000000, 100.000000, 78.000000, 0.000000);
    AddMenuItem(house_storage_sel_take, 0, "Take Weapon");
	AddMenuItem(house_storage_sel_take, 0, "Take Inventory Item");

    house_upgrades = CreateMenu("House", 1, 200.000000, 100.000000, 78.000000, 0.000000);
    AddMenuItem(house_upgrades, 0, "Lock Upgrade");
    AddMenuItem(house_upgrades, 0, "Alarm Upgrade");

    house_tenants = CreateMenu("House", 1, 200.000000, 100.000000, 78.000000, 0.000000);
    AddMenuItem(house_tenants, 0, "Add Tenant");
    AddMenuItem(house_tenants, 0, "Check Tenants");
    /*-------------------------------[SERVER SETTINGS]------------------------------*/
    ShowNameTags(0);
	EnableStuntBonusForAll(0);
	ManualVehicleEngineAndLights();
	DisableInteriorEnterExits();
	/*-------------------------------[DATABASE SETUP]-------------------------------*/
	if ((Database = db_open("server.db")) == DB: 0)
    {
        print("Failed to open a connection to \"server.db\"");
    }
    else
    {
        print("Successfully created a connection to \"server.db\".");
        db_query(Database, "PRAGMA synchronous = OFF");
		db_query(Database,
		"CREATE TABLE IF NOT EXISTS users (userid INTEGER PRIMARY KEY AUTOINCREMENT,username VARCHAR(24) COLLATE NOCASE,ip VARCHAR(18),mainaccount INTEGER,maxhealth TINYINT,chatstyle TINYINT(1), fightstyle TINYINT(1),adminrank VARCHAR(5),rpoints INTEGER,rpl VARCHAR(5),inwhere INTEGER,gpci VARCHAR(41),forumname VARCHAR(24),hunger TINYINT, thirst TINYINT,division VARCHAR(24),crash BIT,userxp TINYINT(1),race TINYINT(1),salary INTEGER,payment SMALLINT,drugskill TINYINT(1),drugtime SMALLINT,bprimary INTEGER,drugexp SMALLINT(3),drugpureness TINYINT(2),ondrug TINYINT(2),druglevel SMALLINT,drughp TINYINT(3),num SMALLINT(5),ptog TINYINT(1),localmin SMALLINT(2),jailtype TINYINT(1),jailtime SMALLINT(4),bound CHAR(10),duty TINYINT(1),uniform TINYINT,tier TINYINT(1),rname VARCHAR(24),faction TINYINT(2),vw INTEGER,interior INTEGER,spawnat SMALLINT,renting SMALLINT,health TINYINT(3),weapon VARCHAR(12),weaponbind TINYINT(1) DEFAULT -1,ammo VARCHAR(20),hours SMALLINT(5),seecon TINYINT(1) DEFAULT 0,level TINYINT(2) DEFAULT 1,ujob TINYINT(2) DEFAULT 0,donator VARCHAR(20), password VARCHAR(129), admin TINYINT(1) DEFAULT 0 NOT NULL, money INTEGER DEFAULT 0 NOT NULL, gender TINYINT(1) DEFAULT 0 NOT NULL, skin INTEGER DEFAULT 0 NOT NULL, x VARCHAR(10), y VARCHAR(10), z VARCHAR(10), xprec TINYINT(1))");
		db_query(Database,"CREATE TABLE IF NOT EXISTS bans (username VARCHAR(24) PRIMARY KEY, userid INTEGER DEFAULT 0 NOT NULL,ip VARCHAR(18), reason VARCHAR(129), bannedby VARCHAR(24), gpci VARCHAR(41), date VARCHAR(15), time VARCHAR(11))");
		db_query(Database,"CREATE TABLE IF NOT EXISTS weathers (date CHAR(10) PRIMARY KEY, phase1 VARCHAR(7), phase2 VARCHAR(7), phase3 VARCHAR(7), phase4 VARCHAR(7), phase5 VARCHAR(7), phase6 VARCHAR(7), phase7 VARCHAR(7), phase8 VARCHAR(7))");
		db_query(Database,"CREATE TABLE IF NOT EXISTS cars (vid INTEGER PRIMARY KEY AUTOINCREMENT,plate VARCHAR(24),impound INTEGER,garage INTEGER,vw INTEGER,interior INTEGER,rent SMALLINT,fuel TINYINT(3),faction TINYINT(1),owner INTEGER DEFAULT 0,model INTEGER DEFAULT 0 NOT NULL,x CHAR(10),y CHAR(10),z CHAR(10),rot CHAR(10),color1 SMALLINT(3),color2 SMALLINT(3),paintjob TINYTINT,siren BIT, trunklock BIT)");
		db_query(Database,"CREATE TABLE IF NOT EXISTS cartrunk (vid INTEGER,thing TINYINT(1),type TINYINT(1),amount INTEGER,takeid INTEGER PRIMARY KEY AUTOINCREMENT, condition INTEGER, itemname VARCHAR(16), itemid INTEGER, fakeitem BIT, mergable BIT)");
		db_query(Database,"CREATE TABLE IF NOT EXISTS business (owner INTEGER DEFAULT 0 NOT NULL,address INTEGER,bid INTEGER,safe INTEGER,gas BIT,icon INTEGER, dealerpos VARCHAR(30),gov INTEGER,x CHAR(10) ,y CHAR(10),z CHAR(10) ,xi CHAR(10) ,yi CHAR(10) ,zi CHAR(10) ,vw INTEGER,vwi INTEGER ,interior INTEGER NOT NULL,interiori INTEGER ,type INTEGER,name CHAR(10),price INTEGER)");
		db_query(Database,"CREATE TABLE IF NOT EXISTS attachments (userid INTEGER,boneid TINYINT(2),model INTEGER,aindex TINYINT,x CHAR(10),y CHAR(10),z CHAR(10),rx CHAR(10),ry CHAR(10),rz CHAR(10),sx CHAR(10),sy CHAR(10),sz CHAR(10),equip BIT DEFAULT 0,ocolor INTEGER DEFAULT 0)");
 		db_query(Database,"CREATE TABLE IF NOT EXISTS jobs (userid INTEGER PRIMARY KEY,mower CHAR(10),bus CHAR(10), sweeper CHAR(10), courier CHAR(10),warehouse CHAR(10),pizzaboy CHAR(10),mechanic CHAR(10),cardealer CHAR(10))");
		db_query(Database,"CREATE TABLE IF NOT EXISTS connections (connection INTEGER PRIMARY KEY AUTOINCREMENT,username VARCHAR(24),userid INTEGER,time CHAR(10),date VARCHAR(20), ip VARCHAR(18), gpci VARCHAR(41))");
		db_query(Database,"CREATE TABLE IF NOT EXISTS weapons (weaponid INTEGER PRIMARY KEY AUTOINCREMENT,time INTEGER, x VARCHAR(7),y VARCHAR(7),z VARCHAR(7),weapon INTEGER, ammo INTEGER,vw INTEGER,interior INTEGER) ");
		db_query(Database,"CREATE TABLE IF NOT EXISTS house (owner INTEGER,hid INTEGER,address INTEGER,alarm INTEGER,locklevel INTEGER,storage VARCHAR(30),storageammo VARCHAR(50),safe INTEGER,x CHAR(10),y CHAR(10),z CHAR(10),xi CHAR(10),yi CHAR(10),zi CHAR(10),vw INTEGER,vwi INTEGER,interior INTEGER,interiori INTEGER,price INTEGER,name VARCHAR(40),rent INTEGER,rentable INTEGER,lock TINYINT(1))");
		db_query(Database,"CREATE TABLE IF NOT EXISTS houseinv (slot TINYINT, hid INTEGER, itemid INTEGER, itemname VARCHAR(16), value INTEGER, condition TINYINT, mergable BIT, fakeitem BIT)");
		//itemid, itemname[], value, condition = 100, bool:mergable = false, bool:fakeitem = false
		db_query(Database,"CREATE TABLE IF NOT EXISTS props (owner INTEGER,pid INTEGER,faction TINYINT(1),lab TINYINT(1),address INTEGER,lock TINYINT(1),x CHAR(10),y CHAR(10),z CHAR(10),xi CHAR(10),yi CHAR(10),zi CHAR(10),vw INTEGER,vwi INTEGER,interior INTEGER,interiori INTEGER,tax INTEGER,name VARCHAR(40))");
		db_query(Database,"CREATE TABLE IF NOT EXISTS factions (fid INTEGER, name VARCHAR (48),count INTEGER,type INTEGER, fx CHAR(10), fy CHAR(10), fz CHAR(10), fvw INT, fint INT)");
		db_query(Database,"CREATE TABLE IF NOT EXISTS crecords (id INTEGER,name VARCHAR(24), crime VARCHAR (124),date VARCHAR(20),issuer VARCHAR(24))");
		db_query(Database,"CREATE TABLE IF NOT EXISTS banks (id INTEGER,type TINYINT(1), bankid INTEGER, branch VARCHAR(24),branchid INTEGER,pin INTEGER,balance INTEGER DEFAULT 0 NOT NULL)");
		db_query(Database,"CREATE TABLE IF NOT EXISTS mail (uid INTEGER PRIMARY KEY AUTOINCREMENT, id INTEGER, mail VARCHAR(140),read INTEGER,by INTEGER)");
		db_query(Database,"CREATE TABLE IF NOT EXISTS phone_general (pid INTEGER,number INTEGER,contact VARCHAR(24),contact_number INTEGER)");
		db_query(Database,"CREATE TABLE IF NOT EXISTS phone_operation (number INTEGER,pto INTEGER,sms VARCHAR(124),type TINYINT(1),ctype TINYINT(1),date VARCHAR(22),msgcond TINYINT(1))");
  		db_query(Database,"CREATE TABLE IF NOT EXISTS doors (doorid INTEGER,model INTEGER,x CHAR(10),y CHAR(10),z CHAR(10),xc CHAR(10),yc CHAR(10),zc CHAR(10),interior INTEGER,vw INTEGER,link INTEGER DEFAULT -1 NOT NULL,closeX CHAR(10),closeY CHAR(10),closeZ CHAR(10),closeRX CHAR(10),closeRY CHAR(10),closeRZ CHAR(10),sx CHAR(10),sy CHAR(10),sz CHAR(10),sx2 CHAR(10),sy2 CHAR(10),sz2 CHAR(10),biz TINYINT,house TINYINT,prop TINYINT,faction TINYINT)");
		// ctype 1 = missed call; ctype 2 = answered; ctype 3 = declined
		// type 1= SMS; type 2 = CALL
		db_query(Database,"CREATE TABLE IF NOT EXISTS garages (gid INTEGER,owner INTEGER DEFAULT -1 NOT NULL,faction TINYINT(1),link INTEGER,maxcars INTEGER,lock TINYINT(1),anglex CHAR(10),angle CHAR(10),x CHAR(10),y CHAR(10),z CHAR(10),xi CHAR(10),yi CHAR(10),zi CHAR(10),vw INTEGER,vwi INTEGER,interior INTEGER,interiori INTEGER)");
		db_query(Database,"CREATE TABLE IF NOT EXISTS drugs (userid INTEGER,drug TINYINT(1),amount SMALLINT,pure TINYINT(2))");
		db_query(Database,"CREATE TABLE IF NOT EXISTS faction_stocks (item TINYINT(2),amount SMALLINT,type TINYINT(1),pieces TINYINT(3))");
		db_query(Database,"CREATE TABLE IF NOT EXISTS ammobox (userid INTEGER,type TINYINT(3),amount INTEGER)");
		db_query(Database,"CREATE TABLE IF NOT EXISTS plants (plant INTEGER,vw INTEGER,object SMALLINT, type TINYINT(1),x CHAR(10),y CHAR(10),z CHAR(10))");
		db_query(Database,"CREATE TABLE IF NOT EXISTS adminrecord (userid INTEGER, log VARCHAR)");
		db_query(Database,"CREATE TABLE IF NOT EXISTS fishdata (userid INTEGER, fish TINYINT(1), weight TINYINT(3))");
		db_query(Database,"CREATE TABLE IF NOT EXISTS sheet (userid INTEGER, trait VARCHAR(48), value VARCHAR(48),type TINYINT(1))");
		db_query(Database,"CREATE TABLE IF NOT EXISTS objects (objectid INTEGER,model INTEGER,x VARCHAR(10),y VARCHAR(10),z VARCHAR(10),rx VARCHAR(10),ry VARCHAR(10), rz VARCHAR(10), interior INTEGER, vw INTEGER, oindex TINYINT,modelid INTEGER,txdname VARCHAR(60),txtname VARCHAR(60),color INTEGER)");
		db_query(Database,"CREATE TABLE IF NOT EXISTS material (objectid INTEGER, oindex TINYINT,modelid INTEGER,txdname VARCHAR(60),txtname VARCHAR(60),color INTEGER)");
		db_query(Database,"CREATE TABLE IF NOT EXISTS features (slot INTEGER, userid INTEGER, desc VARCHAR(250),type TINYINT(1))");
		db_query(Database, "CREATE TABLE IF NOT EXISTS xprecord (userid INTEGER, description VARCHAR, type TINYINT)"); // type 0 = xp, type 1 = renown
		//CREATE TABLE limits (item VARCHAR(40), value TINYINT, race TINYINT, type VARCHAR(256), start TINYINT(1), camp VARCHAR(24))
		db_query(Database, "CREATE TABLE IF NOT EXISTS limits (item VARCHAR(40), value TINYINT, race TINYINT, type VARCHAR(256), start TINYINT(1), camp VARCHAR(24))"); 
		db_query(Database, "CREATE TABLE IF NOT EXISTS advantages (userid INTEGER, item VARCHAR(40), value TINYINT, start TINYINT(1))");
		db_query(Database, "CREATE TABLE IF NOT EXISTS roleplay (userid INTEGER, slot SMALLINT, desc VARCHAR(256), date VARCHAR(10), time VARCHAR(10))");
		db_query(Database, "CREATE TABLE IF NOT EXISTS chardesc (userid INTEGER, slot TINYINT, desc VARCHAR(128))");
		db_query(Database, "CREATE TABLE IF NOT EXISTS carmods (car INTEGER, mod INTEGER)");
		db_query(Database, "CREATE TABLE IF NOT EXISTS livestream (radioid INTEGER, radio VARCHAR(50), radiolink VARCHAR(256))");
		db_query(Database, "CREATE TABLE IF NOT EXISTS actors (skin INTEGER, x CHAR(10),y CHAR(10), z CHAR(10), rot CHAR(10), vw INTEGER, interior INTEGER, nametag VARCHAR(24))");
		db_query(Database, "CREATE TABLE IF NOT EXISTS labels (labelid INTEGER, x CHAR(10),y CHAR(10), z CHAR(10), vw INTEGER, interior INTEGER, labelname VARCHAR(130), userid INTEGER)");
		db_query(Database, "CREATE TABLE IF NOT EXISTS warrants (warrantid INTEGER, warrantee VARCHAR(24), warrant VARCHAR(256), wdate VARCHAR(20), wtime VARCHAR(20))");
		db_query(Database, "CREATE TABLE IF NOT EXISTS plabels (labelid TINYINT, userid INTEGER, label VARCHAR(64))");
		db_query(Database, "CREATE TABLE IF NOT EXISTS inventory (userid INTEGER, slot TINYINT, item INTEGER, itemname VARCHAR(24), value INTEGER,condition TINYINT, fake BIT, mergeable BIT, itemid INTEGER,freq INTEGER,toggle BIT)");
		db_query(Database, "CREATE TABLE IF NOT EXISTS rpitem (number INTEGER, itemid INTEGER, description VARCHAR(256))");
		db_query(Database, "CREATE TABLE IF NOT EXISTS linked_accounts (main INTEGER, alt INTEGER)");
		db_query(Database, "CREATE TABLE IF NOT EXISTS lumberjack (tree INTEGER, model INTEGER, x CHAR(10), y CHAR(10), z CHAR(10))");
		db_query(Database, "CREATE TABLE IF NOT EXISTS rocks (rock INTEGER, model INTEGER, x CHAR(10), y CHAR(10), z CHAR(10))");
		db_query(Database, "CREATE TABLE IF NOT EXISTS health (userid INTEGER, healthlevel TINYINT, mark TINYINT(1))");
		db_query(Database, "CREATE TABLE IF NOT EXISTS offmsgs (userid INTEGER, message VARCHAR(124))");
		db_query(Database, "CREATE TABLE IF NOT exists ini (playerid INTEGER, tempsave TINYINT, roll TINYINT)");
		db_query(Database,"CREATE TABLE IF NOT EXISTS npc_sheet (npcname VARCHAR(24), trait VARCHAR(48), value VARCHAR(48))");
		//db_query(Database, "CREATE TABLE IF NOT EXISTS furniture (house, objectid INTEGER, model INTEGER,x VARCHAR(10),y VARCHAR(10),z VARCHAR(10),rx VARCHAR(10),ry VARCHAR(10), rz VARCHAR(10), interior INTEGER, vw INTEGER, oindex TINYINT,modelid INTEGER,txdname VARCHAR(60),txtname VARCHAR(60),color INTEGER)");
	}
	/*-------------------------------[ANIMALS]------------------------------*/
	Animal[DEER] = CreateDynamicObject(19315, DeerPathway[0][0], DeerPathway[0][1], DeerPathway[0][2]-1.2, 0, 0, 0);
	MoveDynamicObject(Animal[DEER], DeerPathway[1][0], DeerPathway[1][1], DeerPathway[1][2]-1.2, ANIMAL_SPEED);
	DeerPath = 1;
	AnimalStatus[DEER] = ALIVE;
	print("deer created");
	Animal[WOLF] = CreateDynamicObject(WOLF_OBJECT, WolfPathway[0][0], WolfPathway[0][1], WolfPathway[0][2], 0, 0, 0);
	MoveDynamicObject(Animal[WOLF], WolfPathway[1][0], WolfPathway[1][1], WolfPathway[1][2], ANIMAL_SPEED);
	WolfPath = 1;
	AnimalStatus[WOLF] = ALIVE;
	print("wolf created");
	/*-------------------------------[PICKUPS]------------------------------*/
	AddPlayerClass(0,SPAWNPOINT, 0, 0, 0, 0, 0, 0);
	CourierPick = CreatePickup(1239,2,CourierJob); // TRUCKER JOB
	WHPick = CreatePickup(1239,2,WHOperative); // WH Operative JOB
	PizzaPick = CreatePickup(1239,2,PizzaboyPick); 
	SweepPick = CreatePickup(1239,2,SWEEPER);
	MownerPick = CreatePickup(1239,2,MOWNER);
	BusPick = CreatePickup(1239,2,BUS);
	/*-------------------------------[ZONES]---------------------------------*/
   	zones[0] = CreateDynamicCircle(zones_points_0[0], zones_points_0[1], zones_points_0[2]);
	/*------------------------------[LOADINGS]-------------------------------*/
   	LoadBiz();
   	LoadCars();
   	LoadWeapons();
   	LoadHou();
   	LoadFac();
	LoadGarages();
	LoadProps();
	LoadDoors();
	LoadPlants();
	LoadObjects();
	LoadObjectsMaterial();
	LoadMoon();
	LoadCarMods();
	LoadNPCs();
	LoadLabels();
	LoadTrees();
	/*-------------------------------[TEXTDRAWS]--------------------------*/
	inventory_box = TextDrawCreate(598.000000, 282.000000, "_");
	TextDrawFont(inventory_box, 1);
	TextDrawLetterSize(inventory_box, 0.600000, 14.150027);
	TextDrawTextSize(inventory_box, 300.500000, 83.500000);
	TextDrawSetOutline(inventory_box, 1);
	TextDrawAlignment(inventory_box, 2);
	TextDrawColor(inventory_box, -1);
	TextDrawBackgroundColor(inventory_box, 255);
	TextDrawBoxColor(inventory_box, 94);
	TextDrawUseBox(inventory_box, 1);
	TextDrawSetProportional(inventory_box, 1);
	/*
	TextDrawShowForPlayer(playerid, csback);
	TextDrawShowForPlayer(playerid, cshead);
	TextDrawShowForPlayer(playerid, csheadsec);
	PlayerTextDrawShow(playerid, csname[playerid]);
	PlayerTextDrawShow(playerid, csnature[playerid]);
	PlayerTextDrawShow(playerid, csdemeanor[playerid]);
	PlayerTextDrawShow(playerid, csage[playerid]);
	PlayerTextDrawShow(playerid, csgen[playerid]);
	PlayerTextDrawShow(playerid, csconcep[playerid]);
	PlayerTextDrawShow(playerid, csclan[playerid]);
	PlayerTextDrawShow(playerid, cssect[playerid]);
	PlayerTextDrawShow(playerid, cssire[playerid]);
	TextDrawShowForPlayer(playerid, csabs);
	PlayerTextDrawShow(playerid, csstr[playerid]);
	PlayerTextDrawShow(playerid, csdex[playerid]);
	PlayerTextDrawShow(playerid, csstam[playerid]);
	PlayerTextDrawShow(playerid, cscharisma[playerid]);
	PlayerTextDrawShow(playerid, csmanip[playerid]);
	PlayerTextDrawShow(playerid, csapp[playerid]);
	PlayerTextDrawShow(playerid, csperc[playerid]);
	PlayerTextDrawShow(playerid, csintel[playerid]);
	PlayerTextDrawShow(playerid, cswits[playerid]);
	TextDrawShowForPlayer(playerid, csattr);
	PlayerTextDrawShow(playerid, csalert[playerid]);
	PlayerTextDrawShow(playerid, csath[playerid]);
	PlayerTextDrawShow(playerid, csaware[playerid]);
	PlayerTextDrawShow(playerid, csbrawl[playerid]);
	PlayerTextDrawShow(playerid, csempathy[playerid]);
	PlayerTextDrawShow(playerid, csexpression[playerid]);
	PlayerTextDrawShow(playerid, csintim[playerid]);
	TextDrawShowForPlayer(playerid, csmental);
	PlayerTextDrawShow(playerid, csleader[playerid]);
	PlayerTextDrawShow(playerid, csstreetwise[playerid]);
	PlayerTextDrawShow(playerid, cssubterfuge[playerid]);
	PlayerTextDrawShow(playerid, csanimal[playerid]);
	PlayerTextDrawShow(playerid, cscrafts[playerid]);
	PlayerTextDrawShow(playerid, csdrive[playerid]);
	PlayerTextDrawShow(playerid, csetiquette[playerid]);
	PlayerTextDrawShow(playerid, csfirearms[playerid]);
	PlayerTextDrawShow(playerid, cslarceny[playerid]);
	PlayerTextDrawShow(playerid, csmelee[playerid]);
	PlayerTextDrawShow(playerid, csperformance[playerid]);
	PlayerTextDrawShow(playerid, csstealth[playerid]);
	PlayerTextDrawShow(playerid, cssurvival[playerid]);
	PlayerTextDrawShow(playerid, csacademics[playerid]);
	PlayerTextDrawShow(playerid, cscomputer[playerid]);
	PlayerTextDrawShow(playerid, csfinance[playerid]);
	PlayerTextDrawShow(playerid, csinvestigation[playerid]);
	PlayerTextDrawShow(playerid, cslaw[playerid]);
	PlayerTextDrawShow(playerid, csmedicine[playerid]);
	PlayerTextDrawShow(playerid, csoccult[playerid]);
	PlayerTextDrawShow(playerid, cspolitics[playerid]);
	PlayerTextDrawShow(playerid, csscience[playerid]);
	PlayerTextDrawShow(playerid, cstechnology[playerid]);
	PlayerTextDrawShow(playerid, cshealth[playerid]);
	PlayerTextDrawShow(playerid, cswillpower[playerid]);
	PlayerTextDrawShow(playerid, cshumanity[playerid]);
	PlayerTextDrawShow(playerid, csstrrate[playerid]);
	PlayerTextDrawShow(playerid, csdexrate[playerid]);
	PlayerTextDrawShow(playerid, csstaminarate[playerid]);
	PlayerTextDrawShow(playerid, cscharismarate[playerid]);
	PlayerTextDrawShow(playerid, csmaniprate[playerid]);
	PlayerTextDrawShow(playerid, csapprate[playerid]);
	PlayerTextDrawShow(playerid, cspercrate[playerid]);
	PlayerTextDrawShow(playerid, csintelrate[playerid]);
	PlayerTextDrawShow(playerid, cswitsrate[playerid]);
	PlayerTextDrawShow(playerid, csalertrate[playerid]);
	PlayerTextDrawShow(playerid, csathrate[playerid]);
	PlayerTextDrawShow(playerid, csawarerate[playerid]);
	PlayerTextDrawShow(playerid, csbrawlrate[playerid]);
	PlayerTextDrawShow(playerid, csempathyrate[playerid]);
	PlayerTextDrawShow(playerid, csexpressionrate[playerid]);
	PlayerTextDrawShow(playerid, csintimrate[playerid]);
	PlayerTextDrawShow(playerid, csleadershiprate[playerid]);
	PlayerTextDrawShow(playerid, csstreetwiserate[playerid]);
	PlayerTextDrawShow(playerid, cssubterfugerate[playerid]);
	PlayerTextDrawShow(playerid, csanimalrate[playerid]);
	PlayerTextDrawShow(playerid, cscraftsrate[playerid]);
	PlayerTextDrawShow(playerid, csdriverate[playerid]);
	PlayerTextDrawShow(playerid, csetiquetterate[playerid]);
	PlayerTextDrawShow(playerid, csfirearmsrate[playerid]);
	PlayerTextDrawShow(playerid, cslarcenyrate[playerid]);
	PlayerTextDrawShow(playerid, csmeleerate[playerid]);
	PlayerTextDrawShow(playerid, csperformancerate[playerid]);
	PlayerTextDrawShow(playerid, csstealthrate[playerid]);
	PlayerTextDrawShow(playerid, cssurvivalrate[playerid]);
	PlayerTextDrawShow(playerid, csacademicsrate[playerid]);
	PlayerTextDrawShow(playerid, cscomputerrate[playerid]);
	PlayerTextDrawShow(playerid, csfinancerate[playerid]);
	PlayerTextDrawShow(playerid, csinvestigationrate[playerid]);
	PlayerTextDrawShow(playerid, cslawrate[playerid]);
	PlayerTextDrawShow(playerid, csmedicinerate[playerid]);
	PlayerTextDrawShow(playerid, csoccultrate[playerid]);
	PlayerTextDrawShow(playerid, cspoliticsrate[playerid]);
	PlayerTextDrawShow(playerid, cssciencerate[playerid]);
	PlayerTextDrawShow(playerid, cstechnologyrate[playerid]);
	PlayerTextDrawShow(playerid, cshealthrate[playerid]);
	PlayerTextDrawShow(playerid, cswillpowerrate[playerid]);
	PlayerTextDrawShow(playerid, cshumanityrate[playerid]);
	
	*/
	//CS TEXT
	/*
	csback = TextDrawCreate(317.000000, 41.000000, "_");
	TextDrawFont(csback, 1);
	TextDrawLetterSize(csback, 0.600000, 44.000000);
	TextDrawTextSize(csback, 338.000000, 347.500000);
	TextDrawSetOutline(csback, 1);
	TextDrawSetShadow(csback, 0);
	TextDrawAlignment(csback, 2);
	TextDrawColor(csback, 255);
	TextDrawBackgroundColor(csback, 255);
	TextDrawBoxColor(csback, 214);
	TextDrawUseBox(csback, 1);
	TextDrawSetProportional(csback, 1);
	TextDrawSetSelectable(csback, 0);

	cshead = TextDrawCreate(313.000000, 41.000000, "VAMPIRE");
	TextDrawFont(cshead, 2);
	TextDrawLetterSize(cshead, 0.258332, 1.750000);
	TextDrawTextSize(cshead, 69.500000, 185.500000);
	TextDrawSetOutline(cshead, 1);
	TextDrawSetShadow(cshead, 0);
	TextDrawAlignment(cshead, 2);
	TextDrawColor(cshead, -1962934017);
	TextDrawBackgroundColor(cshead, 255);
	TextDrawBoxColor(cshead, 200);
	TextDrawUseBox(cshead, 0);
	TextDrawSetProportional(cshead, 1);
	TextDrawSetSelectable(cshead, 0);

	csheadsec = TextDrawCreate(313.000000, 54.000000, "The Masquerade");
	TextDrawFont(csheadsec, 2);
	TextDrawLetterSize(csheadsec, 0.154164, 1.100000);
	TextDrawTextSize(csheadsec, 69.500000, 185.500000);
	TextDrawSetOutline(csheadsec, 1);
	TextDrawSetShadow(csheadsec, 0);
	TextDrawAlignment(csheadsec, 2);
	TextDrawColor(csheadsec, -1962934017);
	TextDrawBackgroundColor(csheadsec, 255);
	TextDrawBoxColor(csheadsec, 200);
	TextDrawUseBox(csheadsec, 0);
	TextDrawSetProportional(csheadsec, 1);
	TextDrawSetSelectable(csheadsec, 0);



	csheadersocial = TextDrawCreate(291.000000, 137.000000, "Social");
	TextDrawFont(csheadersocial, 1);
	TextDrawLetterSize(csheadersocial, 0.174998, 0.699997);
	TextDrawTextSize(csheadersocial, 197.500000, 17.0000000);//197.500000, 17.000000);
	//PlayerTextDrawTextSize(playerid, textdraw_3[playerid], 197.500000, 17.0000000);
	TextDrawSetOutline(csheadersocial, 0);
	TextDrawSetShadow(csheadersocial, 1);
	TextDrawAlignment(csheadersocial, 1);
	TextDrawColor(csheadersocial, 1296911871);
	TextDrawBackgroundColor(csheadersocial, 255);
	TextDrawBoxColor(csheadersocial, 50);
	TextDrawUseBox(csheadersocial, 0);
	TextDrawSetProportional(csheadersocial, 1);
	TextDrawSetSelectable(csheadersocial, 0);

	csheaderphysical = TextDrawCreate(173.000000, 137.000000, "Physical");
	TextDrawFont(csheaderphysical, 1);
	TextDrawLetterSize(csheaderphysical, 0.174998, 0.699997);
	TextDrawTextSize(csheaderphysical, 197.500000, 17.000000);
	TextDrawSetOutline(csheaderphysical, 0);
	TextDrawSetShadow(csheaderphysical, 1);
	TextDrawAlignment(csheaderphysical, 1);
	TextDrawColor(csheaderphysical, 1296911871);
	TextDrawBackgroundColor(csheaderphysical, 255);
	TextDrawBoxColor(csheaderphysical, 50);
	TextDrawUseBox(csheaderphysical, 0);
	TextDrawSetProportional(csheaderphysical, 1);
	TextDrawSetSelectable(csheaderphysical, 0);

	csheaderknowledges = TextDrawCreate(384.000000, 215.000000, "Knowledges");
	TextDrawFont(csheaderknowledges, 1);
	TextDrawLetterSize(csheaderknowledges, 0.174998, 0.699997);
	TextDrawTextSize(csheaderknowledges, 197.500000, 17.000000);
	TextDrawSetOutline(csheaderknowledges, 0);
	TextDrawSetShadow(csheaderknowledges, 1);
	TextDrawAlignment(csheaderknowledges, 1);
	TextDrawColor(csheaderknowledges, 1296911871);
	TextDrawBackgroundColor(csheaderknowledges, 255);
	TextDrawBoxColor(csheaderknowledges, 50);
	TextDrawUseBox(csheaderknowledges, 0);
	TextDrawSetProportional(csheaderknowledges, 1);
	TextDrawSetSelectable(csheaderknowledges, 0);

	csheaderskills = TextDrawCreate(293.000000, 215.000000, "Skills");
	TextDrawFont(csheaderskills, 1);
	TextDrawLetterSize(csheaderskills, 0.174998, 0.699997);
	TextDrawTextSize(csheaderskills, 197.500000, 17.000000);
	TextDrawSetOutline(csheaderskills, 0);
	TextDrawSetShadow(csheaderskills, 1);
	TextDrawAlignment(csheaderskills, 1);
	TextDrawColor(csheaderskills, 1296911871);
	TextDrawBackgroundColor(csheaderskills, 255);
	TextDrawBoxColor(csheaderskills, 50);
	TextDrawUseBox(csheaderskills, 0);
	TextDrawSetProportional(csheaderskills, 1);
	TextDrawSetSelectable(csheaderskills, 0);

	csheadertalents = TextDrawCreate(173.000000, 215.000000, "Talents");
	TextDrawFont(csheadertalents, 1);
	TextDrawLetterSize(csheadertalents, 0.174998, 0.699997);
	TextDrawTextSize(csheadertalents, 197.500000, 17.000000);
	TextDrawSetOutline(csheadertalents, 0);
	TextDrawSetShadow(csheadertalents, 1);
	TextDrawAlignment(csheadertalents, 1);
	TextDrawColor(csheadertalents, 1296911871);
	TextDrawBackgroundColor(csheadertalents, 255);
	TextDrawBoxColor(csheadertalents, 50);
	TextDrawUseBox(csheadertalents, 0);
	TextDrawSetProportional(csheadertalents, 1);
	TextDrawSetSelectable(csheadertalents, 0);

	csnext = TextDrawCreate(478.000000, 424.000000, "Next");
	TextDrawFont(csnext, 2);
	TextDrawLetterSize(csnext, 0.095833, 0.899999);
	TextDrawTextSize(csnext, -16.500000, 25.500000);
	TextDrawSetOutline(csnext, 1);
	TextDrawSetShadow(csnext, 0);
	TextDrawAlignment(csnext, 2);
	TextDrawColor(csnext, -1);
	TextDrawBackgroundColor(csnext, 255);
	TextDrawBoxColor(csnext, 200);
	TextDrawUseBox(csnext, 0);
	TextDrawSetProportional(csnext, 1);
	TextDrawSetSelectable(csnext, 1);

	cshealth1 = TextDrawCreate(154.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cshealth1, 4);
	TextDrawLetterSize(cshealth1, 0.600000, 2.000000);
	TextDrawTextSize(cshealth1, 9.000000, 13.000000);
	TextDrawSetOutline(cshealth1, 0);
	TextDrawSetShadow(cshealth1, 0);
	TextDrawAlignment(cshealth1, 1);
	TextDrawColor(cshealth1, -741092353);
	TextDrawBackgroundColor(cshealth1, 255);
	TextDrawBoxColor(cshealth1, 50);
	TextDrawUseBox(cshealth1, 1);
	TextDrawSetProportional(cshealth1, 1);
	TextDrawSetSelectable(cshealth1, 0);

	cshealth2 = TextDrawCreate(164.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cshealth2, 4);
	TextDrawLetterSize(cshealth2, 0.600000, 2.000000);
	TextDrawTextSize(cshealth2, 9.000000, 13.000000);
	TextDrawSetOutline(cshealth2, 0);
	TextDrawSetShadow(cshealth2, 0);
	TextDrawAlignment(cshealth2, 1);
	TextDrawColor(cshealth2, -741092353);
	TextDrawBackgroundColor(cshealth2, 255);
	TextDrawBoxColor(cshealth2, 50);
	TextDrawUseBox(cshealth2, 1);
	TextDrawSetProportional(cshealth2, 1);
	TextDrawSetSelectable(cshealth2, 0);

	cshealth3 = TextDrawCreate(174.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cshealth3, 4);
	TextDrawLetterSize(cshealth3, 0.600000, 2.000000);
	TextDrawTextSize(cshealth3, 9.000000, 13.000000);
	TextDrawSetOutline(cshealth3, 0);
	TextDrawSetShadow(cshealth3, 0);
	TextDrawAlignment(cshealth3, 1);
	TextDrawColor(cshealth3, -741092353);
	TextDrawBackgroundColor(cshealth3, 255);
	TextDrawBoxColor(cshealth3, 50);
	TextDrawUseBox(cshealth3, 1);
	TextDrawSetProportional(cshealth3, 1);
	TextDrawSetSelectable(cshealth3, 0);

	cshealth4 = TextDrawCreate(184.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cshealth4, 4);
	TextDrawLetterSize(cshealth4, 0.600000, 2.000000);
	TextDrawTextSize(cshealth4, 9.000000, 13.000000);
	TextDrawSetOutline(cshealth4, 0);
	TextDrawSetShadow(cshealth4, 0);
	TextDrawAlignment(cshealth4, 1);
	TextDrawColor(cshealth4, -741092353);
	TextDrawBackgroundColor(cshealth4, 255);
	TextDrawBoxColor(cshealth4, 50);
	TextDrawUseBox(cshealth4, 1);
	TextDrawSetProportional(cshealth4, 1);
	TextDrawSetSelectable(cshealth4, 0);

	cshealth5 = TextDrawCreate(194.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cshealth5, 4);
	TextDrawLetterSize(cshealth5, 0.600000, 2.000000);
	TextDrawTextSize(cshealth5, 9.000000, 13.000000);
	TextDrawSetOutline(cshealth5, 0);
	TextDrawSetShadow(cshealth5, 0);
	TextDrawAlignment(cshealth5, 1);
	TextDrawColor(cshealth5, -741092353);
	TextDrawBackgroundColor(cshealth5, 255);
	TextDrawBoxColor(cshealth5, 50);
	TextDrawUseBox(cshealth5, 1);
	TextDrawSetProportional(cshealth5, 1);
	TextDrawSetSelectable(cshealth5, 0);

	cshealth6 = TextDrawCreate(204.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cshealth6, 4);
	TextDrawLetterSize(cshealth6, 0.600000, 2.000000);
	TextDrawTextSize(cshealth6, 9.000000, 13.000000);
	TextDrawSetOutline(cshealth6, 0);
	TextDrawSetShadow(cshealth6, 0);
	TextDrawAlignment(cshealth6, 1);
	TextDrawColor(cshealth6, -741092353);
	TextDrawBackgroundColor(cshealth6, 255);
	TextDrawBoxColor(cshealth6, 50);
	TextDrawUseBox(cshealth6, 1);
	TextDrawSetProportional(cshealth6, 1);
	TextDrawSetSelectable(cshealth6, 0);

	cshealth7 = TextDrawCreate(154.000000, 365.000000, "ld_pool:ball");
	TextDrawFont(cshealth7, 4);
	TextDrawLetterSize(cshealth7, 0.600000, 2.000000);
	TextDrawTextSize(cshealth7, 9.000000, 13.000000);
	TextDrawSetOutline(cshealth7, 0);
	TextDrawSetShadow(cshealth7, 0);
	TextDrawAlignment(cshealth7, 1);
	TextDrawColor(cshealth7, -741092353);
	TextDrawBackgroundColor(cshealth7, 255);
	TextDrawBoxColor(cshealth7, 50);
	TextDrawUseBox(cshealth7, 1);
	TextDrawSetProportional(cshealth7, 1);
	TextDrawSetSelectable(cshealth7, 0);

	cswillpower1 = TextDrawCreate(276.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cswillpower1, 4);
	TextDrawLetterSize(cswillpower1, 0.600000, 2.000000);
	TextDrawTextSize(cswillpower1, 9.000000, 13.000000);
	TextDrawSetOutline(cswillpower1, 0);
	TextDrawSetShadow(cswillpower1, 0);
	TextDrawAlignment(cswillpower1, 1);
	TextDrawColor(cswillpower1, -741092353);
	TextDrawBackgroundColor(cswillpower1, 255);
	TextDrawBoxColor(cswillpower1, 50);
	TextDrawUseBox(cswillpower1, 1);
	TextDrawSetProportional(cswillpower1, 1);
	TextDrawSetSelectable(cswillpower1, 0);

	cswillpower2 = TextDrawCreate(287.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cswillpower2, 4);
	TextDrawLetterSize(cswillpower2, 0.600000, 2.000000);
	TextDrawTextSize(cswillpower2, 9.000000, 13.000000);
	TextDrawSetOutline(cswillpower2, 0);
	TextDrawSetShadow(cswillpower2, 0);
	TextDrawAlignment(cswillpower2, 1);
	TextDrawColor(cswillpower2, -741092353);
	TextDrawBackgroundColor(cswillpower2, 255);
	TextDrawBoxColor(cswillpower2, 50);
	TextDrawUseBox(cswillpower2, 1);
	TextDrawSetProportional(cswillpower2, 1);
	TextDrawSetSelectable(cswillpower2, 0);

	cswillpower3 = TextDrawCreate(298.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cswillpower3, 4);
	TextDrawLetterSize(cswillpower3, 0.600000, 2.000000);
	TextDrawTextSize(cswillpower3, 9.000000, 13.000000);
	TextDrawSetOutline(cswillpower3, 0);
	TextDrawSetShadow(cswillpower3, 0);
	TextDrawAlignment(cswillpower3, 1);
	TextDrawColor(cswillpower3, -741092353);
	TextDrawBackgroundColor(cswillpower3, 255);
	TextDrawBoxColor(cswillpower3, 50);
	TextDrawUseBox(cswillpower3, 1);
	TextDrawSetProportional(cswillpower3, 1);
	TextDrawSetSelectable(cswillpower3, 0);

	cswillpower4 = TextDrawCreate(309.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cswillpower4, 4);
	TextDrawLetterSize(cswillpower4, 0.600000, 2.000000);
	TextDrawTextSize(cswillpower4, 9.000000, 13.000000);
	TextDrawSetOutline(cswillpower4, 0);
	TextDrawSetShadow(cswillpower4, 0);
	TextDrawAlignment(cswillpower4, 1);
	TextDrawColor(cswillpower4, -741092353);
	TextDrawBackgroundColor(cswillpower4, 255);
	TextDrawBoxColor(cswillpower4, 50);
	TextDrawUseBox(cswillpower4, 1);
	TextDrawSetProportional(cswillpower4, 1);
	TextDrawSetSelectable(cswillpower4, 0);

	cswillpower5 = TextDrawCreate(320.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cswillpower5, 4);
	TextDrawLetterSize(cswillpower5, 0.600000, 2.000000);
	TextDrawTextSize(cswillpower5, 9.000000, 13.000000);
	TextDrawSetOutline(cswillpower5, 0);
	TextDrawSetShadow(cswillpower5, 0);
	TextDrawAlignment(cswillpower5, 1);
	TextDrawColor(cswillpower5, -741092353);
	TextDrawBackgroundColor(cswillpower5, 255);
	TextDrawBoxColor(cswillpower5, 50);
	TextDrawUseBox(cswillpower5, 1);
	TextDrawSetProportional(cswillpower5, 1);
	TextDrawSetSelectable(cswillpower5, 0);

	cswillpower6 = TextDrawCreate(276.000000, 366.000000, "ld_pool:ball");
	TextDrawFont(cswillpower6, 4);
	TextDrawLetterSize(cswillpower6, 0.600000, 2.000000);
	TextDrawTextSize(cswillpower6, 9.000000, 13.000000);
	TextDrawSetOutline(cswillpower6, 0);
	TextDrawSetShadow(cswillpower6, 0);
	TextDrawAlignment(cswillpower6, 1);
	TextDrawColor(cswillpower6, -741092353);
	TextDrawBackgroundColor(cswillpower6, 255);
	TextDrawBoxColor(cswillpower6, 50);
	TextDrawUseBox(cswillpower6, 1);
	TextDrawSetProportional(cswillpower6, 1);
	TextDrawSetSelectable(cswillpower6, 0);

	cswillpower7 = TextDrawCreate(287.000000, 366.000000, "ld_pool:ball");
	TextDrawFont(cswillpower7, 4);
	TextDrawLetterSize(cswillpower7, 0.600000, 2.000000);
	TextDrawTextSize(cswillpower7, 9.000000, 13.000000);
	TextDrawSetOutline(cswillpower7, 0);
	TextDrawSetShadow(cswillpower7, 0);
	TextDrawAlignment(cswillpower7, 1);
	TextDrawColor(cswillpower7, -741092353);
	TextDrawBackgroundColor(cswillpower7, 255);
	TextDrawBoxColor(cswillpower7, 50);
	TextDrawUseBox(cswillpower7, 1);
	TextDrawSetProportional(cswillpower7, 1);
	TextDrawSetSelectable(cswillpower7, 0);

	cswillpower8 = TextDrawCreate(299.000000, 366.000000, "ld_pool:ball");
	TextDrawFont(cswillpower8, 4);
	TextDrawLetterSize(cswillpower8, 0.600000, 2.000000);
	TextDrawTextSize(cswillpower8, 9.000000, 13.000000);
	TextDrawSetOutline(cswillpower8, 0);
	TextDrawSetShadow(cswillpower8, 0);
	TextDrawAlignment(cswillpower8, 1);
	TextDrawColor(cswillpower8, -741092353);
	TextDrawBackgroundColor(cswillpower8, 255);
	TextDrawBoxColor(cswillpower8, 50);
	TextDrawUseBox(cswillpower8, 1);
	TextDrawSetProportional(cswillpower8, 1);
	TextDrawSetSelectable(cswillpower8, 0);

	cswillpower9 = TextDrawCreate(310.000000, 366.000000, "ld_pool:ball");
	TextDrawFont(cswillpower9, 4);
	TextDrawLetterSize(cswillpower9, 0.600000, 2.000000);
	TextDrawTextSize(cswillpower9, 9.000000, 13.000000);
	TextDrawSetOutline(cswillpower9, 0);
	TextDrawSetShadow(cswillpower9, 0);
	TextDrawAlignment(cswillpower9, 1);
	TextDrawColor(cswillpower9, -741092353);
	TextDrawBackgroundColor(cswillpower9, 255);
	TextDrawBoxColor(cswillpower9, 50);
	TextDrawUseBox(cswillpower9, 1);
	TextDrawSetProportional(cswillpower9, 1);
	TextDrawSetSelectable(cswillpower9, 0);

	cswillpower10 = TextDrawCreate(320.000000, 366.000000, "ld_pool:ball");
	TextDrawFont(cswillpower10, 4);
	TextDrawLetterSize(cswillpower10, 0.600000, 2.000000);
	TextDrawTextSize(cswillpower10, 9.000000, 13.000000);
	TextDrawSetOutline(cswillpower10, 0);
	TextDrawSetShadow(cswillpower10, 0);
	TextDrawAlignment(cswillpower10, 1);
	TextDrawColor(cswillpower10, -741092353);
	TextDrawBackgroundColor(cswillpower10, 255);
	TextDrawBoxColor(cswillpower10, 50);
	TextDrawUseBox(cswillpower10, 1);
	TextDrawSetProportional(cswillpower10, 1);
	TextDrawSetSelectable(cswillpower10, 0);

	cshumanity1 = TextDrawCreate(369.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cshumanity1, 4);
	TextDrawLetterSize(cshumanity1, 0.600000, 2.000000);
	TextDrawTextSize(cshumanity1, 9.000000, 13.000000);
	TextDrawSetOutline(cshumanity1, 0);
	TextDrawSetShadow(cshumanity1, 0);
	TextDrawAlignment(cshumanity1, 1);
	TextDrawColor(cshumanity1, -741092353);
	TextDrawBackgroundColor(cshumanity1, 255);
	TextDrawBoxColor(cshumanity1, 50);
	TextDrawUseBox(cshumanity1, 1);
	TextDrawSetProportional(cshumanity1, 1);
	TextDrawSetSelectable(cshumanity1, 0);

	cshumanity2 = TextDrawCreate(380.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cshumanity2, 4);
	TextDrawLetterSize(cshumanity2, 0.600000, 2.000000);
	TextDrawTextSize(cshumanity2, 9.000000, 13.000000);
	TextDrawSetOutline(cshumanity2, 0);
	TextDrawSetShadow(cshumanity2, 0);
	TextDrawAlignment(cshumanity2, 1);
	TextDrawColor(cshumanity2, -741092353);
	TextDrawBackgroundColor(cshumanity2, 255);
	TextDrawBoxColor(cshumanity2, 50);
	TextDrawUseBox(cshumanity2, 1);
	TextDrawSetProportional(cshumanity2, 1);
	TextDrawSetSelectable(cshumanity2, 0);

	cshumanity3 = TextDrawCreate(390.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cshumanity3, 4);
	TextDrawLetterSize(cshumanity3, 0.600000, 2.000000);
	TextDrawTextSize(cshumanity3, 9.000000, 13.000000);
	TextDrawSetOutline(cshumanity3, 0);
	TextDrawSetShadow(cshumanity3, 0);
	TextDrawAlignment(cshumanity3, 1);
	TextDrawColor(cshumanity3, -741092353);
	TextDrawBackgroundColor(cshumanity3, 255);
	TextDrawBoxColor(cshumanity3, 50);
	TextDrawUseBox(cshumanity3, 1);
	TextDrawSetProportional(cshumanity3, 1);
	TextDrawSetSelectable(cshumanity3, 0);

	cshumanity4 = TextDrawCreate(400.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cshumanity4, 4);
	TextDrawLetterSize(cshumanity4, 0.600000, 2.000000);
	TextDrawTextSize(cshumanity4, 9.000000, 13.000000);
	TextDrawSetOutline(cshumanity4, 0);
	TextDrawSetShadow(cshumanity4, 0);
	TextDrawAlignment(cshumanity4, 1);
	TextDrawColor(cshumanity4, -741092353);
	TextDrawBackgroundColor(cshumanity4, 255);
	TextDrawBoxColor(cshumanity4, 50);
	TextDrawUseBox(cshumanity4, 1);
	TextDrawSetProportional(cshumanity4, 1);
	TextDrawSetSelectable(cshumanity4, 0);

	cshumanity5 = TextDrawCreate(410.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(cshumanity5, 4);
	TextDrawLetterSize(cshumanity5, 0.600000, 2.000000);
	TextDrawTextSize(cshumanity5, 9.000000, 13.000000);
	TextDrawSetOutline(cshumanity5, 0);
	TextDrawSetShadow(cshumanity5, 0);
	TextDrawAlignment(cshumanity5, 1);
	TextDrawColor(cshumanity5, -741092353);
	TextDrawBackgroundColor(cshumanity5, 255);
	TextDrawBoxColor(cshumanity5, 50);
	TextDrawUseBox(cshumanity5, 1);
	TextDrawSetProportional(cshumanity5, 1);
	TextDrawSetSelectable(cshumanity5, 0);

	cshumanity6 = TextDrawCreate(369.000000, 366.000000, "ld_pool:ball");
	TextDrawFont(cshumanity6, 4);
	TextDrawLetterSize(cshumanity6, 0.600000, 2.000000);
	TextDrawTextSize(cshumanity6, 9.000000, 13.000000);
	TextDrawSetOutline(cshumanity6, 0);
	TextDrawSetShadow(cshumanity6, 0);
	TextDrawAlignment(cshumanity6, 1);
	TextDrawColor(cshumanity6, -741092353);
	TextDrawBackgroundColor(cshumanity6, 255);
	TextDrawBoxColor(cshumanity6, 50);
	TextDrawUseBox(cshumanity6, 1);
	TextDrawSetProportional(cshumanity6, 1);
	TextDrawSetSelectable(cshumanity6, 0);

	cshumanity7 = TextDrawCreate(380.000000, 366.000000, "ld_pool:ball");
	TextDrawFont(cshumanity7, 4);
	TextDrawLetterSize(cshumanity7, 0.600000, 2.000000);
	TextDrawTextSize(cshumanity7, 9.000000, 13.000000);
	TextDrawSetOutline(cshumanity7, 0);
	TextDrawSetShadow(cshumanity7, 0);
	TextDrawAlignment(cshumanity7, 1);
	TextDrawColor(cshumanity7, -741092353);
	TextDrawBackgroundColor(cshumanity7, 255);
	TextDrawBoxColor(cshumanity7, 50);
	TextDrawUseBox(cshumanity7, 1);
	TextDrawSetProportional(cshumanity7, 1);
	TextDrawSetSelectable(cshumanity7, 0);

	cshumanity8 = TextDrawCreate(391.000000, 366.000000, "ld_pool:ball");
	TextDrawFont(cshumanity8, 4);
	TextDrawLetterSize(cshumanity8, 0.600000, 2.000000);
	TextDrawTextSize(cshumanity8, 9.000000, 13.000000);
	TextDrawSetOutline(cshumanity8, 0);
	TextDrawSetShadow(cshumanity8, 0);
	TextDrawAlignment(cshumanity8, 1);
	TextDrawColor(cshumanity8, -741092353);
	TextDrawBackgroundColor(cshumanity8, 255);
	TextDrawBoxColor(cshumanity8, 50);
	TextDrawUseBox(cshumanity8, 1);
	TextDrawSetProportional(cshumanity8, 1);
	TextDrawSetSelectable(cshumanity8, 0);

	cshumanity9 = TextDrawCreate(402.000000, 366.000000, "ld_pool:ball");
	TextDrawFont(cshumanity9, 4);
	TextDrawLetterSize(cshumanity9, 0.600000, 2.000000);
	TextDrawTextSize(cshumanity9, 9.000000, 13.000000);
	TextDrawSetOutline(cshumanity9, 0);
	TextDrawSetShadow(cshumanity9, 0);
	TextDrawAlignment(cshumanity9, 1);
	TextDrawColor(cshumanity9, -741092353);
	TextDrawBackgroundColor(cshumanity9, 255);
	TextDrawBoxColor(cshumanity9, 50);
	TextDrawUseBox(cshumanity9, 1);
	TextDrawSetProportional(cshumanity9, 1);
	TextDrawSetSelectable(cshumanity9, 0);

	cshumanity10 = TextDrawCreate(412.000000, 366.000000, "ld_pool:ball");
	TextDrawFont(cshumanity10, 4);
	TextDrawLetterSize(cshumanity10, 0.600000, 2.000000);
	TextDrawTextSize(cshumanity10, 9.000000, 13.000000);
	TextDrawSetOutline(cshumanity10, 0);
	TextDrawSetShadow(cshumanity10, 0);
	TextDrawAlignment(cshumanity10, 1);
	TextDrawColor(cshumanity10, -741092353);
	TextDrawBackgroundColor(cshumanity10, 255);
	TextDrawBoxColor(cshumanity10, 50);
	TextDrawUseBox(cshumanity10, 1);
	TextDrawSetProportional(cshumanity10, 1);
	TextDrawSetSelectable(cshumanity10, 0);	 */
	// servertag
	// Servertag = TextDrawCreate(607.000000, 100.000000, "~y~S~w~ERVER ~y~N~w~AME");
	// TextDrawFont(Servertag, 3);
	// TextDrawLetterSize(Servertag, 0.324999, 0.999998);
	// TextDrawTextSize(Servertag, 370.000000, 13.500000);
	// TextDrawSetOutline(Servertag, 1);
	// TextDrawSetShadow(Servertag, 3);
	// TextDrawAlignment(Servertag, 3);
	// TextDrawColor(Servertag, -1);
	// TextDrawBackgroundColor(Servertag, 255);
	// TextDrawSetProportional(Servertag, 1);
	// TextDrawSetSelectable(Servertag, 0);

	ShowFrame = TextDrawCreate(141.333328, 196.048171, "usebox");
	TextDrawLetterSize(ShowFrame, 0.000000, 13.787035);
	TextDrawTextSize(ShowFrame, 11.000000, 0.000000);
	TextDrawAlignment(ShowFrame, 1);
	TextDrawColor(ShowFrame, 0);
	TextDrawUseBox(ShowFrame, true);
	TextDrawBoxColor(ShowFrame, -2139062017);
	TextDrawSetShadow(ShowFrame, 0);
	TextDrawSetOutline(ShowFrame, 0);
	TextDrawFont(ShowFrame, 0);

	// lights in interiors
	LightsOff = TextDrawCreate(641.666687, 1.500000, "usebox");
	TextDrawLetterSize(LightsOff, 0.000000, 49.415019);
	TextDrawTextSize(LightsOff, -2.000000, 0.000000);
	TextDrawAlignment(LightsOff, 1);
	TextDrawColor(LightsOff, 0);
	TextDrawUseBox(LightsOff, true);
	TextDrawBoxColor(LightsOff, 102);
	TextDrawSetShadow(LightsOff, 0);
	TextDrawSetOutline(LightsOff, 0);
	TextDrawFont(LightsOff, 0);

	// --- RED SCREEN
	gRedScreen = TextDrawCreate(641.599975, 1.500000, "usebox");
	TextDrawLetterSize(gRedScreen, 0.000000, 49.405799);
	TextDrawTextSize(gRedScreen, -2.000000, 0.000000);
	TextDrawAlignment(gRedScreen, 1);
	TextDrawColor(gRedScreen, 0);
	TextDrawUseBox(gRedScreen, true);
	TextDrawBoxColor(gRedScreen, -1862270891);
	TextDrawSetShadow(gRedScreen, 0);
	TextDrawSetOutline(gRedScreen, 0);
	TextDrawFont(gRedScreen, 0);

	// GREEN SCREEN
	gGreenScreen = TextDrawCreate(641.599975, 1.500000, "usebox");
	TextDrawLetterSize(gGreenScreen, 0.000000, 49.405799);
	TextDrawTextSize(gGreenScreen, -2.000000, 0.000000);
	TextDrawAlignment(gGreenScreen, 1);
	TextDrawColor(gGreenScreen, 0);
	TextDrawUseBox(gGreenScreen, true);
	TextDrawBoxColor(gGreenScreen, 16711782);
	TextDrawSetShadow(gGreenScreen, 0);
	TextDrawSetOutline(gGreenScreen, 0);
	TextDrawFont(gGreenScreen, 0);

	// --- PLEASE WAIT textdraw
	warning = TextDrawCreate(259.666503, 434.725952, "eee");
	TextDrawLetterSize(warning, 0.097666, 0.894815);
	TextDrawAlignment(warning, 1);
	TextDrawColor(warning, -1);
	TextDrawSetShadow(warning, 0);
	TextDrawSetOutline(warning, 1);
	TextDrawBackgroundColor(warning, 51);
	TextDrawFont(warning, 2);
	TextDrawSetProportional(warning, 1);

   	// --- Weather Textdraws
	weathertext = TextDrawCreate(532.000000, 110.000000, "~y~");
	TextDrawFont(weathertext, 2);
	TextDrawLetterSize(weathertext, 0.108332, 0.750000);
	TextDrawTextSize(weathertext, 197.500000, 17.000000);
	TextDrawSetOutline(weathertext, 0);
	TextDrawSetShadow(weathertext, 0);
	TextDrawAlignment(weathertext, 2);
	TextDrawColor(weathertext, -1);
	TextDrawBackgroundColor(weathertext, 255);
	TextDrawBoxColor(weathertext, 50);
	TextDrawUseBox(weathertext, 0);
	TextDrawSetProportional(weathertext, 1);
	TextDrawSetSelectable(weathertext, 0);

	temperaturetext = TextDrawCreate(594.000000, 110.000000, "~y~");
	TextDrawFont(temperaturetext, 2);
	TextDrawLetterSize(temperaturetext, 0.108332, 0.750000);
	TextDrawTextSize(temperaturetext, 197.500000, 17.000000);
	TextDrawSetOutline(temperaturetext, 0);
	TextDrawSetShadow(temperaturetext, 0);
	TextDrawAlignment(temperaturetext, 3);//3);
	TextDrawColor(temperaturetext, -1);
	TextDrawBackgroundColor(temperaturetext, 255);
	TextDrawBoxColor(temperaturetext, 50);
	TextDrawUseBox(temperaturetext, 0);
	TextDrawSetProportional(temperaturetext, 1);
	TextDrawSetSelectable(temperaturetext, 0);
   	// --- Weather

   	// --- Inventory hud
	/*InventoryText = TextDrawCreate(541.000000, 201.000000, "Inventory");
	TextDrawFont(InventoryText, 1);
	TextDrawLetterSize(InventoryText, 0.212500, 1.250000);
	TextDrawTextSize(InventoryText, 374.000000, 17.000000);
	TextDrawSetOutline(InventoryText, 1);
	TextDrawSetShadow(InventoryText, 2);
	TextDrawAlignment(InventoryText, 1);
	TextDrawColor(InventoryText, -1);
	TextDrawBackgroundColor(InventoryText, 255);
	TextDrawBoxColor(InventoryText, 50);
	TextDrawUseBox(InventoryText, 0);
	TextDrawSetProportional(InventoryText, 1);
	TextDrawSetSelectable(InventoryText, 0);

	InventoryBackground = TextDrawCreate(561.000000, 204.000000, "_");
	TextDrawFont(InventoryBackground, 1);
	TextDrawLetterSize(InventoryBackground, 0.608333, 23.350017);
	TextDrawTextSize(InventoryBackground, 356.000000, 138.000000);
	TextDrawSetOutline(InventoryBackground, 1);
	TextDrawSetShadow(InventoryBackground, 0);
	TextDrawAlignment(InventoryBackground, 2);
	TextDrawColor(InventoryBackground, -1);
	TextDrawBackgroundColor(InventoryBackground, 255);
	TextDrawBoxColor(InventoryBackground, 135);
	TextDrawUseBox(InventoryBackground, 1);
	TextDrawSetProportional(InventoryBackground, 1);
	TextDrawSetSelectable(InventoryBackground, 0);*/

   	// --- Inventory

   	speedometer = TextDrawCreate(524.666503, 379.140686, "Speedometer");
	TextDrawLetterSize(speedometer, 0.229000, 1.039999);
	TextDrawAlignment(speedometer, 1);
	TextDrawColor(speedometer, -1);
	TextDrawSetShadow(speedometer, 0);
	TextDrawSetOutline(speedometer, -257);
	TextDrawBackgroundColor(speedometer, 51);
	TextDrawFont(speedometer, 2);
	TextDrawSetProportional(speedometer, 1);


   	// --- Speedometer
	/*--------------------------------[TIMERS]------------------------------------*/
   	SetTimer("WeatherTimer",3600000/**3*/,1); // one hour
   	SetTimer("OnMinPass",60*1000,1);
   	//SetTimer("OnTwoMinsPass",120*1000,1);// cars fuel
	/*---------------------------------[WEATHER LOADING]--------------------------*/
	new query[60],
		DBResult: Result,
		sample[8],
		chour,cmin,csec;

	format(query,sizeof query,"SELECT * FROM weathers WHERE date = '%s'",PasteDate());
	Result = db_query(Database,query);

	if(db_num_rows(Result))
	{
	    gettime(chour,cmin,csec);
	    format(sample,sizeof sample,"phase%i",GetPhase(chour));
        db_get_field_assoc(Result, sample, sample, 8);
		printf("[weather_debug] Current Phase: %s",sample);

		new phase,weather;
		sscanf(sample,"p<,>ii",phase,weather);

		printf("[%s][%s] [weather_debug] Current Temperature (Split): %i; Current Weather (Split): %i",PasteDate(),PasteTime(),phase,weather);

		new weathername[18];
		format(weathername, 18, "~y~%s" ,GetWeatherName(weather));
		TextDrawSetString(weathertext, weathername);
		printf("[weather_debug] WEATHER (%i): %s",weather,weathername);
		format(query,sizeof query,"~y~%d CELSIUS", phase);
		TextDrawSetString(temperaturetext, query);
		SetWeather(weather);
	}
	else
	{
        SetWeatherPhases(PasteDate());
        WeatherTimer();
	}
	db_free_result(Result);

	// Train
	//AddStaticVehicle(538, 815.015686,-1372.294677,-1.678642, 0, 1, 1);
	//--- Server Objects
	new tmpobjid,oexport,interior;
	/*
		#	interior 1 USED
		#	interior 2 USED
		# interior 3 USED 
		#
	*/
	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "2019-07-06 17:49:13" by "Ryan"
		Created by "Ryan"
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	interior = 1;
	//reateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, 
	//Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_OBJECT_SD, Float:drawdistance = STREAMER_OBJECT_DD
	tmpobjid = CreateDynamicObject(18981, 1350.210937, 1850.068481, 9.520308, 360.000000, 270.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_carpet2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1337.650146, 1842.355468, 11.740307, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6332, "rodeo01_law2", "ceaserpillar01_256", 0xFF999999);
	tmpobjid = CreateDynamicObject(19447, 1342.529907, 1837.514892, 11.740307, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6332, "rodeo01_law2", "ceaserpillar01_256", 0xFF999999);
	tmpobjid = CreateDynamicObject(19926, 1339.623657, 1838.553100, 10.020309, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	tmpobjid = CreateDynamicObject(19926, 1339.623657, 1840.463378, 10.020309, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	tmpobjid = CreateDynamicObject(19925, 1339.628784, 1841.853271, 10.020310, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	tmpobjid = CreateDynamicObject(19926, 1338.234008, 1841.854125, 10.020309, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	tmpobjid = CreateDynamicObject(2115, 1344.093505, 1838.128295, 10.020310, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1344.300292, 1842.404907, 11.740307, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6332, "rodeo01_law2", "ceaserpillar01_256", 0xFF999999);
	tmpobjid = CreateDynamicObject(2115, 1344.093505, 1838.128295, 10.790316, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	tmpobjid = CreateDynamicObject(2115, 1344.093505, 1840.379272, 10.020310, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	tmpobjid = CreateDynamicObject(2115, 1344.093505, 1840.379272, 10.790316, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	tmpobjid = CreateDynamicObject(2028, 1343.883422, 1840.516967, 10.890316, 0.000000, 0.000000, -177.899932, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF009900);
	SetDynamicObjectMaterial(tmpobjid, 2, -1, "none", "none", 0xFF006600);
	SetDynamicObjectMaterial(tmpobjid, 3, -1, "none", "none", 0xFF009900);
	SetDynamicObjectMaterial(tmpobjid, 4, -1, "none", "none", 0xFF009900);
	tmpobjid = CreateDynamicObject(2387, 1341.932617, 1840.035644, 10.000309, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 4, 14748, "sfhsm1", "ah_pnwainscot5", 0x00000000);
	tmpobjid = CreateDynamicObject(19807, 1341.721679, 1840.020141, 11.070313, 0.000000, 0.000000, -94.699989, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF333333);
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF333333);
	tmpobjid = CreateDynamicObject(19447, 1345.510864, 1843.632690, 11.740307, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6332, "rodeo01_law2", "ceaserpillar01_256", 0xFF999999);
	tmpobjid = CreateDynamicObject(19391, 1339.094116, 1843.635742, 11.750313, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6332, "rodeo01_law2", "ceaserpillar01_256", 0xFF999999);
	tmpobjid = CreateDynamicObject(19447, 1339.649658, 1847.133911, 11.740307, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6332, "rodeo01_law2", "ceaserpillar01_256", 0xFF999999);
	tmpobjid = CreateDynamicObject(2959, 1338.185180, 1847.017333, 9.960309, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF999999);
	tmpobjid = CreateDynamicObject(18981, 1350.210937, 1850.068481, 13.500239, 360.000000, 270.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_carpet2", 0xFF333333);
	tmpobjid = CreateDynamicObject(19367, 1339.343994, 1837.516723, 10.710301, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6095, "shops01_law", "GB_shop01", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1342.632934, 1837.516723, 10.710301, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6095, "shops01_law", "GB_shop01", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(1518, 1343.921020, 1838.152832, 11.090316, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2322, 1343.904296, 1839.088012, 11.110318, 0.000000, 0.000000, -86.900032, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1786, 1344.120361, 1838.758544, 11.520315, 0.000000, 0.000000, -91.699981, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2028, 1343.953491, 1841.333496, 10.890316, 0.000000, 0.000000, -4.899999, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2102, 1343.923828, 1841.471435, 11.580317, 0.000000, 0.000000, -77.999992, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1785, 1343.880981, 1840.369873, 11.690309, 0.000000, 0.000000, 630.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1782, 1343.929687, 1840.364135, 11.880316, 0.000000, 0.000000, -96.599983, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1809, 1339.511840, 1841.765258, 10.940313, 0.000000, 0.000000, 79.399978, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1778, 1338.001220, 1842.184448, 10.020310, 0.000000, 0.000000, -174.199996, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2229, 1344.200805, 1841.877563, 9.990309, 0.000000, 0.000000, -85.099998, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18874, 1341.702636, 1839.745605, 11.060305, 84.200012, 0.000007, -0.000007, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18872, 1342.092041, 1839.741455, 11.060734, 84.200012, 0.000007, -0.000007, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18870, 1342.457275, 1839.744140, 11.060465, 84.200012, 0.000007, -0.000007, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18869, 1341.707885, 1840.513305, 11.069409, 82.800003, -0.000030, 179.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18865, 1342.066894, 1840.515136, 11.069644, 82.800003, -0.000030, 179.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18868, 1342.448242, 1840.520385, 11.070286, 82.800003, -0.000030, 179.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19807, 1341.722656, 1840.260375, 11.070313, 0.000000, 0.000000, -90.200004, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2967, 1342.447021, 1839.950927, 11.010316, 0.000000, 0.000000, 98.699989, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2967, 1342.424682, 1840.099243, 11.010316, 0.000000, 0.000000, 78.599990, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2941, 1339.616088, 1838.353881, 11.050317, 0.000000, 0.000000, 85.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2099, 1342.434082, 1843.545532, 10.020310, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2231, 1344.100219, 1842.918334, 9.980309, 0.000000, 0.000000, -46.400001, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2231, 1344.135620, 1842.992553, 10.860318, 0.000000, 0.000000, -39.600006, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19786, 1341.939086, 1843.654174, 12.160306, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1532, 1342.211791, 1837.628540, 9.950308, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 1338.356323, 1843.593383, 11.240318, 0.000000, 0.000000, 109.499992, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11631, 1343.534912, 1846.004150, 11.250310, 360.000000, 0.000000, 630.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1431, 1342.994384, 1844.068725, 10.550319, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1431, 1340.863525, 1844.068725, 10.550319, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1431, 1340.863525, 1846.669677, 10.550319, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2777, 1343.115844, 1845.864746, 10.480318, 0.000000, 0.000000, 58.299987, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2777, 1338.461791, 1837.954345, 10.470316, 0.000000, 0.000000, -177.300003, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14699, 1342.573730, 1838.599975, 11.420320, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14699, 1342.573730, 1843.800903, 11.420320, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2585, 1337.876220, 1839.342163, 11.480309, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2579, 1337.873168, 1840.394165, 11.480312, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	// loggery
	tmpobjid = CreateDynamicObject(3403, 1764.855224, -806.877807, 62.388626, 0.000000, 0.000000, -33.199996, 0, 0);
	tmpobjid = CreateDynamicObject(11292, 1772.024047, -811.153930, 62.072574, 0.000000, -3.500000, 58.099998, 0, 0);
	SetDynamicObjectMaterial(tmpobjid, 0, 1418, "BREAK_F_w", "CJ_SLATEDWOOD", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 1418, "BREAK_F_w", "CJ_SLATEDWOOD", 0);
	SetDynamicObjectMaterial(tmpobjid, 2, 1418, "BREAK_F_w", "CJ_SLATEDWOOD", 0);
	SetDynamicObjectMaterial(tmpobjid, 3, 1418, "BREAK_F_w", "CJ_SLATEDWOOD", 0);
	SetDynamicObjectMaterial(tmpobjid, 4, 1418, "BREAK_F_w", "CJ_SLATEDWOOD", 0);
	SetDynamicObjectMaterial(tmpobjid, 5, 1418, "none", "none", 0);
	tmpobjid = CreateDynamicObject(3109, 1771.830810, -814.507202, 61.904212, 2.200000, 0.000000, -28.499994, 0, 0);
	tmpobjid = CreateDynamicObject(847, 1779.913818, -834.610107, 64.257713, 0.000000, 0.000000, 0.000000, 0, 0);
	tmpobjid = CreateDynamicObject(847, 1787.090454, -812.469482, 64.844390, 0.000000, -15.400000, 0.000000, 0, 0);
	tmpobjid = CreateDynamicObject(847, 1804.821044, -819.314025, 68.599098, 0.000000, 0.000000, 0.000000, 0, 0);
	tmpobjid = CreateDynamicObject(841, 1776.266235, -815.680297, 60.876506, 0.000000, -4.599999, 0.000000, 0, 0);
	tmpobjid = CreateDynamicObject(833, 1764.651855, -819.574401, 60.511314, 7.099999, 0.000000, 81.099967, 0, 0);
	tmpobjid = CreateDynamicObject(13435, 1752.874877, -805.923583, 63.341239, 3.199999, 0.200000, -31.299999, 0, 0);
	tmpobjid = CreateDynamicObject(3403, 1755.474731, -800.739257, 62.388626, 0.000000, 0.000000, -33.199996, 0, 0);
	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "2019-07-13 20:09:40" by "Ryan"
		Created by "Ryan"
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	interior = 2;
	tmpobjid = CreateDynamicObject(18981, 1326.640869, 1790.359741, 9.510309, 360.000000, 450.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14534, "ab_wooziea", "ab_tileDiamond", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(19447, 1339.111328, 1798.021850, 11.560301, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17566, "contachou1_lae2", "mp_apt1_woodpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1334.301757, 1793.151733, 11.560301, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17566, "contachou1_lae2", "mp_apt1_woodpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1334.301757, 1802.863891, 11.560301, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17566, "contachou1_lae2", "mp_apt1_woodpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(19391, 1327.888549, 1793.156372, 11.560314, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17566, "contachou1_lae2", "mp_apt1_woodpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1326.505249, 1800.783813, 11.560301, 0.000000, 0.000000, 124.400016, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17566, "contachou1_lae2", "mp_apt1_woodpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1326.654296, 1797.931762, 11.560301, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17566, "contachou1_lae2", "mp_apt1_woodpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(19929, 1331.269775, 1797.515869, 10.000308, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 8710, "nuhotel01", "nuhotel01_128", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 15054, "savesfmid", "ah_pnwainscot", 0xFF59402B);
	tmpobjid = CreateDynamicObject(19447, 1331.553955, 1796.970336, 9.170288, 180.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17566, "contachou1_lae2", "mp_apt1_woodpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(19929, 1331.269775, 1794.655517, 10.000308, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 8710, "nuhotel01", "nuhotel01_128", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 15054, "savesfmid", "ah_pnwainscot", 0xFF59402B);
	tmpobjid = CreateDynamicObject(19929, 1331.269775, 1800.365478, 10.000308, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 8710, "nuhotel01", "nuhotel01_128", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 15054, "savesfmid", "ah_pnwainscot", 0xFF59402B);
	tmpobjid = CreateDynamicObject(11435, 1331.758666, 1795.913940, 15.330303, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF59402B);
	tmpobjid = CreateDynamicObject(11435, 1331.758666, 1799.456298, 15.330303, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF59402B);
	tmpobjid = CreateDynamicObject(19447, 1334.301757, 1801.414062, 14.119073, 360.000000, 420.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1334.301757, 1794.627563, 14.173213, 360.000000, 480.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1334.301757, 1796.278442, 14.173213, 360.000000, 810.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1334.301757, 1799.759277, 14.173213, 360.000000, 810.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1337.710693, 1797.978881, 14.134467, 360.000000, 840.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19391, 1326.208740, 1791.576171, 11.560314, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17566, "contachou1_lae2", "mp_apt1_woodpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1334.882324, 1791.970581, 11.560301, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17566, "contachou1_lae2", "mp_apt1_woodpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1334.451904, 1787.121093, 11.560301, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17566, "contachou1_lae2", "mp_apt1_woodpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1329.662841, 1786.479614, 11.560301, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17566, "contachou1_lae2", "mp_apt1_woodpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1326.073730, 1797.931762, 11.560301, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretewall22_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19391, 1326.078613, 1791.576171, 11.560314, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretewall22_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1322.572875, 1793.511840, 11.560301, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretewall22_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1321.232788, 1796.641357, 11.560301, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretewall22_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1321.232788, 1790.712036, 11.560301, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretewall22_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1334.862304, 1791.600219, 11.560301, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17566, "contachou1_lae2", "mp_apt1_woodpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1330.133911, 1792.316894, 11.560308, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17566, "contachou1_lae2", "mp_apt1_woodpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1328.529785, 1785.940795, 11.560301, 0.000000, 0.000000, 210.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17566, "contachou1_lae2", "mp_apt1_woodpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(11435, 1326.636230, 1790.783569, 14.180298, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF59402B);
	tmpobjid = CreateDynamicObject(11435, 1326.636230, 1792.343383, 14.180298, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF59402B);
	tmpobjid = CreateDynamicObject(11435, 1326.145751, 1788.241577, 12.820284, 180.000000, 90.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF59402B);
	tmpobjid = CreateDynamicObject(1572, 1325.224609, 1794.541748, 10.570317, 0.000000, 0.000000, 143.100097, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 16640, "a51", "ventb64", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1329.539306, 1797.978881, 14.974466, 360.000000, 900.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1327.868652, 1797.978881, 13.284460, 360.000000, 990.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(11714, 1339.022338, 1797.924194, 11.210315, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "corporate1", 0x00000000);
	tmpobjid = CreateDynamicObject(19329, 1329.644287, 1797.624511, 13.670316, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16434, "des_stwnsigns1", "des_banksign", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1331.032226, 1791.369140, 13.353206, 360.000000, 810.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1331.032226, 1787.868041, 13.353206, 360.000000, 810.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1324.961669, 1795.547485, 13.283192, 360.000000, 810.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "barrier", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1321.461669, 1795.547485, 13.283192, 360.000000, 810.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "barrier", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1332.488403, 1800.153808, 14.080311, 90.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3741, "cehillhse14", "glassblocks1", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1335.948852, 1800.153808, 14.080311, 90.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3741, "cehillhse14", "glassblocks1", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1335.948852, 1795.792358, 14.080311, 90.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3741, "cehillhse14", "glassblocks1", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1332.647583, 1795.792358, 14.080311, 90.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3741, "cehillhse14", "glassblocks1", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1791.120239, 10.690308, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1791.980468, 10.690308, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1791.120239, 11.580318, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1791.980468, 11.580318, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1791.120239, 12.460320, 0.000014, 0.000000, 89.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1791.980468, 12.460320, 0.000014, 0.000000, 89.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1792.901977, 10.690308, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1793.762207, 10.690308, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1792.901977, 11.580318, 0.000014, 0.000000, 89.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1793.762207, 11.580318, 0.000014, 0.000000, 89.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1792.901977, 12.460320, 0.000022, 0.000000, 89.999931, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1793.762207, 12.460320, 0.000022, 0.000000, 89.999931, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1794.653686, 10.690308, 0.000014, 0.000000, 89.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1795.513916, 10.690308, 0.000014, 0.000000, 89.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1794.653686, 11.580318, 0.000022, 0.000000, 89.999931, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1795.513916, 11.580318, 0.000022, 0.000000, 89.999931, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1794.653686, 12.460320, 0.000029, 0.000000, 89.999908, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2004, 1322.662597, 1795.513916, 12.460320, 0.000029, 0.000000, 89.999908, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(941, 1324.528198, 1796.083984, 10.440314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1550, 1325.418579, 1794.543457, 10.330146, 91.099983, 8.599964, -32.500003, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1210, 1323.888793, 1796.246826, 11.000316, 90.000000, 360.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1210, 1323.888793, 1796.246826, 11.070318, 90.000000, 16.400003, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1210, 1325.628417, 1796.246826, 11.000316, 90.000000, -87.700012, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19303, 1326.186889, 1791.386474, 11.240311, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2165, 1332.855224, 1789.997070, 10.010310, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2165, 1331.875122, 1791.007324, 10.010310, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2165, 1332.855224, 1787.024780, 10.010310, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2165, 1331.875122, 1788.035034, 10.010310, -0.000007, 0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1714, 1334.038330, 1790.739013, 10.010310, 0.000000, 0.000000, -77.700004, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1714, 1333.380981, 1787.605590, 10.010310, 0.000000, 0.000000, -96.999984, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1714, 1331.228881, 1787.111083, 10.010310, 0.000000, 0.000000, 125.500045, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1714, 1331.141357, 1790.430908, 10.010310, 0.000000, 0.000000, 92.900070, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2161, 1328.280761, 1786.680297, 10.010310, 0.000000, 0.000000, 120.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2161, 1326.674194, 1789.462280, 10.010310, 0.000000, 0.000000, 120.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2202, 1327.982788, 1788.018554, 10.010310, 0.000000, 0.000000, 120.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2161, 1328.280761, 1786.680297, 11.350316, 0.000000, 0.000000, 120.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2161, 1326.674194, 1789.462280, 11.350313, 0.000000, 0.000000, 120.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1886, 1329.782714, 1792.802612, 13.414342, 23.199998, 0.000000, -48.200004, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2190, 1331.647216, 1798.038818, 10.760306, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2190, 1331.647216, 1800.929931, 10.760306, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2190, 1331.647216, 1795.049316, 10.760306, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19808, 1331.065185, 1797.776733, 10.950315, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19808, 1331.065185, 1800.667846, 10.950315, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19808, 1331.065185, 1794.857421, 10.950315, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14527, 1334.917602, 1797.628417, 11.510313, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2773, 1333.849609, 1795.877197, 10.520315, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2773, 1333.849609, 1799.468505, 10.520315, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1811, 1338.518310, 1802.101074, 10.560312, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1811, 1338.518310, 1801.150634, 10.560312, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1811, 1338.518310, 1800.240478, 10.560312, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1811, 1338.518310, 1793.760131, 10.560312, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1811, 1338.518310, 1794.740478, 10.560312, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1811, 1338.518310, 1795.721191, 10.560312, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	// trailer interior
	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "2019-09-10 13:24:59" by "Ryan_McDuffy"
		Created by "Ryan_McDuffy"
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(2558, 2510.912597, -1722.675292, 778.477050, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 2047, "cj_ammo_posters", "cj_flag2", 0x00000000);
	tmpobjid = CreateDynamicObject(2558, 2510.151855, -1721.744384, 778.477050, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 2047, "cj_ammo_posters", "cj_flag2", 0x00000000);
	tmpobjid = CreateDynamicObject(321, 2512.174316, -1719.260742, 778.225036, -80.199981, -76.899993, 14.100005, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2047, "cj_ammo_posters", "cj_flag2", 0x00000000);
	tmpobjid = CreateDynamicObject(19939, 2512.994140, -1725.082153, 778.697265, 0.000000, 0.000000, -64.999992, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "sa_wood08_128", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(14385, 2511.644042, -1725.437255, 779.208679, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14386, 2511.684814, -1726.334960, 779.071166, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(6959, 2509.990478, -1725.065673, 777.641418, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2509.533203, -1731.390136, 779.616333, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2509.328369, -1728.603515, 779.616333, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2509.532958, -1726.112548, 779.616333, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2509.512695, -1722.178466, 779.616333, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2508.473632, -1723.264160, 779.616333, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2511.749023, -1732.355712, 779.641357, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2512.504638, -1718.448730, 779.616333, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2508.472167, -1720.576660, 779.616333, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2510.499267, -1718.535400, 779.616333, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2513.871337, -1722.263793, 779.616333, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2513.824462, -1718.464965, 779.616333, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2513.879150, -1726.265625, 779.616333, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2513.859130, -1732.006103, 779.616333, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1506, 2513.857177, -1728.388671, 777.635192, 0.000000, 0.000000, 270.270263, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1506, 2513.912353, -1728.408203, 779.470764, 0.000000, 0.000000, 270.269165, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2511.748291, -1732.076538, 778.161621, 90.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2509.783935, -1732.343505, 778.188537, 90.000000, 168.463012, 281.537017, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2513.583007, -1732.324096, 778.088439, 90.000000, 165.522460, 104.477508, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2513.578857, -1725.892211, 778.063415, 90.000000, 191.096939, 78.897491, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2513.876953, -1726.113769, 778.082763, 90.000000, 179.994506, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2509.602050, -1728.105346, 778.763977, 90.000000, 173.277770, 276.716796, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1271, 2510.178955, -1723.830932, 778.137207, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1271, 2510.177246, -1725.785888, 778.337402, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1271, 2510.128173, -1724.273193, 777.987060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2508.426757, -1724.936401, 778.637817, 90.000000, 179.994506, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2508.716796, -1726.805786, 778.188537, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2508.711669, -1726.373291, 778.188537, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2513.859375, -1725.266845, 778.613952, 90.000000, 179.994506, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2513.403076, -1723.748657, 778.638977, 90.000000, 180.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2513.827148, -1725.818481, 778.188537, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1271, 2509.669433, -1727.243774, 779.763061, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2238, 2509.910400, -1729.964111, 779.805480, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2238, 2510.361328, -1726.619140, 778.604797, 90.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2511.143066, -1720.630737, 778.789123, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2513.451171, -1720.599609, 778.739074, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2512.920654, -1720.628173, 780.888854, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2510.539306, -1721.078613, 778.188537, 0.000000, 90.000000, 269.999969, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2510.784423, -1719.459838, 777.963317, 90.000000, 180.005493, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2510.711914, -1718.869140, 778.061523, 90.000000, 179.994506, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2238, 2513.512451, -1724.433837, 779.598937, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2238, 2513.540039, -1723.882202, 779.570983, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2238, 2513.496093, -1722.422363, 779.682250, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2238, 2513.496093, -1721.912963, 779.629882, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2238, 2513.517822, -1723.092895, 779.812805, 0.000000, 90.000000, 89.999938, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2238, 2512.339111, -1725.892578, 779.845764, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2238, 2513.220214, -1725.838623, 779.866088, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2238, 2510.319091, -1726.633544, 778.825744, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2509.522705, -1728.529052, 782.333374, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2511.664550, -1731.286132, 780.869018, 0.000000, 90.000000, 89.999938, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1749, 2509.795654, -1725.851318, 778.653320, 0.000000, 0.000000, 89.730041, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2511.682373, -1727.163940, 780.869018, 0.000000, 90.000000, 89.999938, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2511.669433, -1723.127807, 780.869018, 0.000000, 90.000000, 89.999877, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(5856, 2511.678955, -1719.765625, 780.869018, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2510.547851, -1721.165039, 780.803161, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3461, 2510.541748, -1722.739868, 779.887756, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3461, 2510.536621, -1723.158081, 779.912780, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19787, 2509.773437, -1728.681274, 779.797363, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19820, 2510.023193, -1729.597534, 778.777160, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2525, 2510.033447, -1721.151977, 777.617065, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2524, 2510.498046, -1722.697753, 777.627075, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19582, 2512.782470, -1725.307617, 778.717346, 0.000000, 0.000000, 62.799995, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19583, 2513.272216, -1724.787353, 778.727172, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19836, 2512.812011, -1725.234130, 778.717834, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1736, 2511.575439, -1732.147460, 780.311523, 8.200008, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2069, 2513.450195, -1721.045288, 777.677062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(358, 2509.674804, -1728.884155, 780.407592, 0.000000, 0.000000, 96.599960, -1, -1, -1, 300.00, 300.00); 

	// employment center
	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "2019-09-09 16:22:03" by "Ryan_McDuffy"
		Created by "Ryan_McDuffy"
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	interior = 1;
	tmpobjid = CreateDynamicObject(18981, 1627.513549, 1365.970825, 9.406631, 180.000000, 90.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6102, "gazlaw1", "law_gazwhitefloor", 0xFF999999);
	tmpobjid = CreateDynamicObject(19447, 1619.855468, 1378.199218, 11.576628, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6157, "gazlaw3", "law_archthing5", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1615.125854, 1373.800170, 11.576628, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6157, "gazlaw3", "law_archthing5", 0x00000000);
	tmpobjid = CreateDynamicObject(11714, 1615.208862, 1375.693115, 11.116634, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13363, "cephotoblockcs_t", "sw_door16", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1613.781005, 1369.808715, 11.576628, 0.000000, 0.000000, 240.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6157, "gazlaw3", "law_archthing5", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1619.855468, 1367.479614, 11.576628, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6157, "gazlaw3", "law_archthing5", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1624.606567, 1373.800170, 11.576628, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6157, "gazlaw3", "law_archthing5", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1624.606567, 1364.170288, 11.576628, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6157, "gazlaw3", "law_archthing5", 0x00000000);
	tmpobjid = CreateDynamicObject(19456, 1621.924194, 1377.581054, 9.246625, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0xFF999999);
	tmpobjid = CreateDynamicObject(19940, 1621.935546, 1373.747558, 11.006635, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1621.935546, 1375.747924, 11.006635, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1621.935546, 1377.748291, 11.006635, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1624.499511, 1374.829101, 12.266638, -0.000007, -0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} JEFFERSON", 80, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1624.499511, 1375.359619, 11.956637, -0.000015, 0.000000, -89.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} EMPLOYMENT", 80, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1624.499511, 1373.929809, 11.956637, -0.000015, 0.000000, -89.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} CENTER", 80, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2668, 1616.776245, 1378.046020, 11.876630, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "247sign1", 0x00000000);
	tmpobjid = CreateDynamicObject(2668, 1617.966918, 1378.046020, 11.876630, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11301, "carshow_sfse", "ws_Transfender_dirty", 0x00000000);
	tmpobjid = CreateDynamicObject(2668, 1619.167724, 1378.046020, 11.876630, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1426, "break_scaffold", "CJ_avery", 0x00000000);
	tmpobjid = CreateDynamicObject(2668, 1620.338867, 1378.046020, 11.876630, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13361, "ce_pizza", "pizzasign_LAe", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1619.039062, 1378.098754, 12.246640, -0.000015, 0.000000, 0.000045, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} OUR PARTNERS...", 80, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1615.218750, 1372.458374, 12.016635, -0.000015, 0.000000, 90.000045, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} PUBLIC POSTS", 80, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(18981, 1627.513549, 1365.970825, 13.806620, 180.000000, 90.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6102, "gazlaw1", "law_gazwhitefloor", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(2187, 1620.997802, 1368.258789, 9.906632, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2187, 1617.786743, 1368.258789, 9.906632, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2187, 1618.717407, 1369.219360, 9.906632, 0.000000, 0.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2187, 1621.927246, 1369.219360, 9.906632, 0.000000, 0.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2165, 1623.083251, 1368.847412, 9.876631, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2165, 1619.952636, 1368.847412, 9.876631, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1806, 1623.561401, 1368.144531, 9.906632, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1806, 1620.921142, 1368.144531, 9.906632, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2309, 1623.863525, 1370.314941, 9.906632, 0.000000, 0.000000, 162.199981, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2309, 1620.804565, 1370.218627, 9.906632, 0.000000, 0.000000, -178.199981, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2202, 1617.176513, 1368.490722, 9.906632, 0.000000, 0.000000, 150.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2163, 1622.037231, 1373.256103, 9.906632, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2163, 1622.037231, 1375.036499, 9.906632, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2163, 1622.037231, 1376.817016, 9.906632, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19805, 1615.223266, 1371.845825, 11.666626, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14699, 1621.321899, 1370.687988, 11.846651, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 

	// jefferson cells
	interior = 4;
	tmpobjid = CreateDynamicObject(18981, 1309.316040, 1367.313964, 9.510304, 0.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14853, "gen_pol_vegas", "office_wallnu1", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1296.901489, 1361.148437, 11.710302, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1296.956787, 1361.907470, 11.720307, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1298.755126, 1361.902221, 11.170310, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1300.754516, 1361.902221, 11.170310, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1298.533081, 1361.919189, 9.430300, 0.000000, 180.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1302.547607, 1361.907470, 11.720307, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1303.676513, 1362.561523, 11.720307, 0.000000, 0.000000, 150.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19392, 1304.059082, 1364.804443, 11.710302, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1299.171752, 1366.049804, 11.710302, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1298.533081, 1361.919189, 14.220319, 0.000000, 180.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1302.537597, 1361.937500, 11.720307, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1296.976806, 1361.937500, 11.720307, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1298.512695, 1356.427978, 11.710302, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1303.272827, 1353.846923, 11.710302, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19392, 1303.278564, 1360.253906, 11.710302, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.375854, 11.660305, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} 7'0", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.375854, 11.490302, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} 6'6", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.375854, 11.320298, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} 6'0", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.375854, 11.160295, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} 5'6", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.375854, 11.000291, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} 5'0", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.375854, 10.840288, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} 4'6", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.375854, 10.690285, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} 4'0", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.255737, 10.730286, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} ________________________", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.255737, 10.880290, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} ________________________", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.255737, 11.040293, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} ________________________", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.255737, 11.200297, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} ________________________", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.255737, 11.350300, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} ________________________", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.255737, 11.520302, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} ________________________", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.255737, 11.690306, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} ________________________", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.255737, 11.600304, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} ________________________", 130, "Ariel", 20, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.255737, 11.440300, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} ________________________", 130, "Ariel", 20, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.255737, 11.280297, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} ________________________", 130, "Ariel", 20, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.255737, 11.120293, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} ________________________", 130, "Ariel", 20, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.255737, 10.960289, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} ________________________", 130, "Ariel", 20, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1303.121337, 1357.255737, 10.810287, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} ________________________", 130, "Ariel", 20, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1297.011596, 1358.595947, 12.170296, 0.000000, 0.000000, 450.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} COMMIT THE CRIME", 50, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1297.011596, 1359.526611, 11.980292, 0.000000, 0.000000, 450.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{0f0f0f} SERVE THE TIME", 50, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19447, 1307.953002, 1354.958740, 11.710302, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1304.156738, 1358.907592, 11.720307, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1304.863403, 1354.177246, 11.710302, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1308.283569, 1354.067138, 11.710302, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19392, 1306.559204, 1358.903198, 11.710302, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1317.584350, 1354.958740, 11.710302, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19392, 1309.761962, 1358.903198, 11.710302, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1311.345825, 1354.067138, 11.710302, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19392, 1312.963378, 1358.903198, 11.710302, 0.000015, 0.000000, 89.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1314.547241, 1354.067138, 11.710302, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19392, 1316.154907, 1358.903198, 11.710302, 0.000022, 0.000000, 89.999931, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1317.738769, 1354.067138, 11.710302, 0.000000, 0.000015, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19392, 1319.345703, 1358.903198, 11.710302, 0.000030, 0.000000, 89.999908, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1320.929565, 1354.067138, 11.710302, 0.000000, 0.000022, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1320.929565, 1363.526733, 11.710302, 0.000000, 0.000022, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1312.688842, 1361.995239, 11.710302, 0.000000, 0.000022, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1307.549072, 1362.659912, 11.720307, 0.000000, 0.000000, 210.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1307.152954, 1368.131225, 11.710302, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1307.032836, 1366.431030, 11.710302, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1322.318725, 1361.995239, 11.710302, 0.000000, 0.000022, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14881, "gf5", "mp_jail_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1319.365600, 1361.705688, 10.620312, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1717, "cj_tv", "CJ_STEEL", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1320.278198, 1362.517944, 12.875855, -22.900007, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11145, "carrierint_sfs", "ws_cogtrack", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1318.446899, 1362.517944, 12.875855, -22.900007, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11145, "carrierint_sfs", "ws_cogtrack", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1316.443481, 1361.705688, 10.620312, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1717, "cj_tv", "CJ_STEEL", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1317.356079, 1362.517944, 12.875855, -22.900005, 0.000008, 0.000003, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11145, "carrierint_sfs", "ws_cogtrack", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1315.524780, 1362.517944, 12.875855, -22.900005, 0.000008, 0.000003, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11145, "carrierint_sfs", "ws_cogtrack", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1313.060424, 1361.705688, 10.620312, 0.000015, 0.000000, 89.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1717, "cj_tv", "CJ_STEEL", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1313.973022, 1362.517944, 12.875855, -22.900003, 0.000016, 0.000006, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11145, "carrierint_sfs", "ws_cogtrack", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1312.141723, 1362.517944, 12.875855, -22.900003, 0.000016, 0.000006, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11145, "carrierint_sfs", "ws_cogtrack", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1309.697998, 1361.705688, 10.620312, 0.000022, 0.000000, 89.999931, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1717, "cj_tv", "CJ_STEEL", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1310.610595, 1362.517944, 12.875855, -22.900001, 0.000024, 0.000009, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11145, "carrierint_sfs", "ws_cogtrack", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1308.779296, 1362.517944, 12.875855, -22.900001, 0.000024, 0.000009, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11145, "carrierint_sfs", "ws_cogtrack", 0x00000000);
	tmpobjid = CreateDynamicObject(2775, 1299.783691, 1362.334350, 12.750312, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1414, "break_street1", "CJ_TV_SCREEN", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 1309.316040, 1367.313964, 13.820312, 0.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14853, "gen_pol_vegas", "office_wallnu1", 0xFF666666);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(19302, 1301.021606, 1361.872924, 12.350308, 0.000000, 270.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19302, 1298.521362, 1361.872924, 12.350308, 0.000000, 270.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11714, 1299.777343, 1356.514160, 11.240302, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1721, 1297.055786, 1357.129638, 10.020304, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1721, 1297.055786, 1357.820312, 10.020304, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1721, 1297.055786, 1358.490966, 10.020304, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1721, 1297.055786, 1359.141601, 10.020304, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1721, 1297.055786, 1359.822265, 10.020304, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1721, 1297.055786, 1360.502929, 10.020304, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1721, 1297.055786, 1361.163452, 10.020304, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19805, 1303.171997, 1357.988403, 11.520308, 0.000000, 90.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19611, 1301.370849, 1357.966308, 10.010304, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19623, 1301.366455, 1357.969238, 11.679593, -9.699997, 0.000000, 88.900016, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19302, 1306.460937, 1358.933715, 11.240311, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19302, 1309.663696, 1358.933715, 11.240311, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19302, 1312.865112, 1358.933715, 11.240311, 0.000000, 0.000015, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19302, 1316.056640, 1358.933715, 11.240311, 0.000000, 0.000022, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19302, 1319.247436, 1358.933715, 11.240311, 0.000000, 0.000030, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11714, 1305.597412, 1366.354370, 11.240302, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1771, 1305.424682, 1356.325683, 10.260309, 0.000000, 0.000000, -1.600000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1771, 1305.414672, 1356.325927, 11.350318, 0.000000, 0.000000, -1.600000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2602, 1307.823852, 1355.570434, 10.540306, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1771, 1308.935302, 1356.325683, 10.260309, -0.000000, 0.000022, -1.599999, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1771, 1308.925292, 1356.325927, 11.350318, -0.000000, 0.000022, -1.599999, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2602, 1310.894042, 1355.570434, 10.540306, -0.000007, -0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1771, 1311.966918, 1356.325683, 10.260309, -0.000001, 0.000038, -1.599999, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1771, 1311.956909, 1356.325927, 11.350318, -0.000001, 0.000038, -1.599999, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2602, 1314.085815, 1355.570434, 10.540306, -0.000022, 0.000000, -89.999931, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1771, 1315.158203, 1356.325683, 10.260309, -0.000001, 0.000045, -1.599999, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1771, 1315.148193, 1356.325927, 11.350318, -0.000001, 0.000045, -1.599999, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2602, 1317.277099, 1355.570434, 10.540306, -0.000030, 0.000000, -89.999908, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1771, 1318.349487, 1356.325683, 10.260309, -0.000001, 0.000053, -1.599999, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1771, 1318.339477, 1356.325927, 11.350318, -0.000001, 0.000053, -1.599999, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2602, 1320.468383, 1355.570434, 10.540306, -0.000038, 0.000000, -89.999885, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2604, 1299.827514, 1362.503417, 10.530314, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2356, 1298.271362, 1363.006591, 9.990303, 0.000000, 0.000000, -140.399978, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2356, 1300.421630, 1363.035888, 9.990303, 0.000000, 0.000000, -179.200042, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19942, 1300.795043, 1362.602539, 10.970307, 0.000000, 0.000000, -167.799972, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11749, 1300.656127, 1361.935913, 11.190313, 0.000000, 0.000000, 0.399999, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11749, 1300.806274, 1361.937255, 11.190313, 0.000000, 0.000000, -98.899993, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11749, 1300.864746, 1361.796264, 11.190313, 0.000000, 0.000000, -118.799987, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18642, 1299.095947, 1362.698242, 10.640314, 90.000000, 90.000000, 20.800001, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1808, 1303.442504, 1362.752197, 9.970303, 0.000000, 0.000000, 240.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1316.916992, 1360.428222, 13.690317, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1311.075317, 1360.428222, 13.690317, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1306.122924, 1360.428222, 13.690317, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1299.361938, 1359.057128, 13.690317, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1305.683715, 1363.087890, 13.690317, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1300.102783, 1363.878417, 13.690317, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	// leprechaun
	tmpobjid = CreateDynamicObject(19447, 1548.417968, 1855.834594, 9.890314, 0.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "woodfloor1", 0xFF663300);
	tmpobjid = CreateDynamicObject(19447, 1544.927490, 1855.834594, 9.890314, 0.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "woodfloor1", 0xFF663300);
	tmpobjid = CreateDynamicObject(19369, 1548.955078, 1859.437866, 11.620332, 0.000000, 0.000000, 45.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1550.106445, 1853.473999, 9.586245, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(18060, 1548.727783, 1848.005981, 11.746249, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF336633);
	tmpobjid = CreateDynamicObject(18059, 1548.737304, 1848.008911, 10.376249, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF663300);
	tmpobjid = CreateDynamicObject(19447, 1548.417968, 1846.213134, 9.890314, 0.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "woodfloor1", 0xFF663300);
	tmpobjid = CreateDynamicObject(19447, 1544.927490, 1846.215087, 9.890314, 0.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "woodfloor1", 0xFF663300);
	tmpobjid = CreateDynamicObject(19447, 1541.426513, 1855.834594, 9.890314, 0.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "woodfloor1", 0xFF663300);
	tmpobjid = CreateDynamicObject(19447, 1541.426513, 1846.204711, 9.890314, 0.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "woodfloor1", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1544.596069, 1854.074462, 9.976251, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19925, 1544.596557, 1855.456665, 9.976251, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1543.206420, 1855.455444, 9.976251, -0.000007, -0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1541.295654, 1855.455444, 12.156271, -0.000015, 0.000000, -89.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1544.596069, 1852.164916, 9.976251, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1544.596069, 1850.245239, 9.976251, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1544.596069, 1848.325195, 9.976251, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19925, 1544.596557, 1846.955810, 9.976251, 0.000000, -0.000007, 449.999938, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1543.206420, 1846.954956, 9.976251, -0.000007, -0.000000, 90.000022, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1541.296386, 1846.954956, 9.976251, -0.000007, -0.000000, 90.000022, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1544.596069, 1854.074462, 12.156271, 0.000000, -0.000015, 179.999908, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19925, 1544.596557, 1855.456665, 12.156271, 0.000000, -0.000015, 179.999908, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1543.206420, 1855.455444, 12.156271, -0.000015, 0.000000, -89.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(1990, 1541.006591, 1852.171264, 8.506243, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12844, "cos_liquorstore", "cos_beercab", 0x00000000);
	tmpobjid = CreateDynamicObject(19926, 1544.596069, 1852.164916, 12.156271, 0.000000, -0.000015, 179.999908, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1544.596069, 1850.245239, 12.156271, 0.000000, -0.000015, 179.999908, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1544.596069, 1848.325195, 12.156271, 0.000000, -0.000015, 179.999908, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19925, 1544.596557, 1846.955810, 12.156271, 0.000007, -0.000007, 89.999916, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1543.206420, 1846.954956, 12.156271, 0.000000, -0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1541.296386, 1846.954956, 12.156271, 0.000000, -0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19447, 1550.106445, 1843.841796, 9.586245, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1550.136474, 1853.452636, 10.756251, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar13", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1550.136474, 1843.822265, 10.756251, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar13", 0x00000000);
	tmpobjid = CreateDynamicObject(14651, 1543.997680, 1857.641479, 12.076261, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 2, -1, "none", "none", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 4, -1, "none", "none", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 5, -1, "none", "none", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 6, -1, "none", "none", 0xFF663300);
	tmpobjid = CreateDynamicObject(11714, 1548.887451, 1859.377807, 11.166248, 0.000000, 0.000000, 45.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5986, "chateau_lawn", "doorkb_1_256", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(19447, 1542.977050, 1860.578491, 9.586245, 0.000007, 0.000007, 89.999946, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1542.998413, 1860.608520, 10.756251, 0.000007, 0.000007, 89.999946, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar13", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1548.465332, 1843.125976, 11.620332, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1545.791381, 1842.009155, 11.620332, 0.000000, 0.000000, 135.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1544.496093, 1842.020874, 11.626258, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1541.396484, 1842.701904, 11.626258, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(19926, 1541.005371, 1854.074462, 9.976251, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1541.005371, 1852.154663, 9.976251, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(1990, 1541.006591, 1853.122192, 8.506243, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12844, "cos_liquorstore", "cos_beercab", 0x00000000);
	tmpobjid = CreateDynamicObject(19926, 1541.005371, 1850.235595, 9.976251, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19926, 1541.005371, 1848.325195, 9.976251, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar06", 0xFF663300);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF663300);
	tmpobjid = CreateDynamicObject(19369, 1539.865234, 1847.436889, 11.620332, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1540.906372, 1850.195190, 11.626258, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1539.865234, 1855.067871, 11.620332, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(1990, 1541.006591, 1848.799804, 8.506243, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12844, "cos_liquorstore", "cos_beercab", 0x00000000);
	tmpobjid = CreateDynamicObject(1990, 1541.006591, 1849.770751, 8.506243, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12844, "cos_liquorstore", "cos_beercab", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1541.382568, 1855.785400, 11.336263, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1539.865234, 1856.508544, 11.620332, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1540.465942, 1861.338134, 11.626258, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1541.014892, 1851.217163, 11.856251, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1414, "break_street1", "CJ_TV_SCREEN", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1541.024902, 1851.597534, 11.666249, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{143618} THE", 130, "Ariel", 40, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1541.024902, 1851.677612, 11.536247, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{143618} DRUNKEN", 130, "Ariel", 50, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1541.024902, 1851.827758, 11.356243, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{143618} LEPRECHAUN", 130, "Ariel", 50, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1541.024902, 1852.518310, 11.546244, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{143618} |", 130, "Wingdings", 50, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2647, 1541.865356, 1847.090820, 12.036255, 180.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10412, "hotel1", "gold128", 0xFF996600);
	tmpobjid = CreateDynamicObject(11435, 1545.065917, 1855.347534, 15.076254, 360.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF663300);
	tmpobjid = CreateDynamicObject(11435, 1545.065917, 1847.235595, 15.076254, 360.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF663300);
	tmpobjid = CreateDynamicObject(19369, 1541.880493, 1842.624389, 11.620332, 0.000000, 0.000000, 225.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(1805, 1544.209228, 1841.886962, 11.666252, 90.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 18064, "ab_sfammuunits", "gun_targetc", 0xFF666666);
	tmpobjid = CreateDynamicObject(2715, 1543.340576, 1842.085327, 11.596250, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "coasty_bit3_sfe", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1548.417968, 1855.834594, 13.060301, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0xFF666666);
	tmpobjid = CreateDynamicObject(19447, 1544.927490, 1855.834594, 13.060301, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0xFF666666);
	tmpobjid = CreateDynamicObject(19447, 1548.417968, 1846.213134, 13.060301, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0xFF666666);
	tmpobjid = CreateDynamicObject(19447, 1544.927490, 1846.215087, 13.060301, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0xFF666666);
	tmpobjid = CreateDynamicObject(19447, 1541.426513, 1855.834594, 13.060301, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0xFF666666);
	tmpobjid = CreateDynamicObject(19447, 1541.426513, 1846.204711, 13.060301, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0xFF666666);
	tmpobjid = CreateDynamicObject(19447, 1542.977050, 1860.578491, 14.116251, 0.000007, 0.000007, 89.999946, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1550.106445, 1853.473999, 14.116250, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1550.106445, 1843.841796, 14.116248, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObject(1732, 1549.791992, 1857.132934, 10.786249, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "carp20S", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(1541, 1544.115966, 1853.240234, 11.086265, 0.000000, 0.000000, 450.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1541, 1544.115966, 1848.688110, 11.086265, 0.000000, 0.000000, 450.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1548, 1544.444580, 1848.682128, 10.906261, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1548, 1544.444580, 1853.262817, 10.906261, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2941, 1544.487792, 1850.895507, 10.976259, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19087, 1541.880249, 1847.081665, 14.136260, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1488, 1541.081665, 1848.579956, 11.696254, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1511, 1541.073974, 1848.871826, 11.696251, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1488, 1541.081665, 1853.610351, 11.696254, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1511, 1541.073974, 1853.902221, 11.696251, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1520, 1541.080200, 1852.999633, 10.946257, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1520, 1541.080200, 1853.169799, 10.946257, 0.000000, 0.000000, -20.600000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.290405, 1849.793334, 12.076261, 180.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.450561, 1849.793334, 12.076261, 180.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.590698, 1849.793334, 12.076261, 180.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.290405, 1849.673217, 12.076261, 0.000000, 179.999984, -179.999984, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.450561, 1849.673217, 12.076261, 0.000000, 179.999984, -179.999984, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.590698, 1849.673217, 12.076261, 0.000000, 179.999984, -179.999984, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.290405, 1849.543090, 12.076261, -0.000000, 179.999984, -179.999938, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.450561, 1849.543090, 12.076261, -0.000000, 179.999984, -179.999938, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.590698, 1849.543090, 12.076261, -0.000000, 179.999984, -179.999938, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.290405, 1852.494995, 12.076261, -0.000000, 179.999984, -179.999893, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.450561, 1852.494995, 12.076261, -0.000000, 179.999984, -179.999893, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.590698, 1852.494995, 12.076261, -0.000000, 179.999984, -179.999893, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.290405, 1852.354858, 12.076261, -0.000000, 179.999984, -179.999847, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.450561, 1852.354858, 12.076261, -0.000000, 179.999984, -179.999847, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.590698, 1852.354858, 12.076261, -0.000000, 179.999984, -179.999847, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.290405, 1852.204711, 12.076261, -0.000000, 179.999984, -179.999801, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.450561, 1852.204711, 12.076261, -0.000000, 179.999984, -179.999801, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19818, 1544.590698, 1852.204711, 12.076261, -0.000000, 179.999984, -179.999801, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11687, 1542.203735, 1846.283813, 9.976251, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11687, 1543.213989, 1846.283813, 9.976251, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11687, 1544.104858, 1846.283813, 9.976251, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11687, 1545.355102, 1848.134033, 9.976251, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11687, 1545.355102, 1849.352294, 9.976251, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11687, 1545.355102, 1854.274169, 9.976251, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11687, 1545.355102, 1852.833374, 9.976251, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 1541.488159, 1843.910888, 11.236260, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 1540.557861, 1856.583740, 11.176259, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 1548.708129, 1852.518554, 11.866254, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 1548.708129, 1849.336547, 11.866254, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 1548.708129, 1846.225708, 11.866254, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 1548.708129, 1843.475341, 11.866254, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 1548.708129, 1846.616088, 11.866254, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 1548.708129, 1849.707031, 11.866254, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 1548.708129, 1852.908325, 11.866254, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1546.634155, 1856.203857, 13.486269, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1546.634155, 1850.803100, 13.486269, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1546.634155, 1845.403076, 13.486269, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2074, 1544.583129, 1854.737792, 12.256257, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2074, 1544.583129, 1852.876342, 12.256257, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2074, 1544.583129, 1850.515014, 12.256257, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2074, 1544.583129, 1848.343383, 12.256257, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2074, 1542.881713, 1847.032958, 12.256257, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////Smoggie (Lannister) - Map Creation[uL] Pottus - Texture Studio Exporting
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	new ointerior = 2,vw = 0;
	oexport = CreateDynamicObject(19378, 1894.293334, -2429.381103, 13.539115, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19378, 1899.548339, -2427.645019, 12.479107, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 1491, "int_doors", "CJ_W_wood", 0);
	oexport = CreateDynamicObject(19378, 1899.548950, -2418.043945, 12.469099, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 1491, "int_doors", "CJ_W_wood", 0);
	oexport = CreateDynamicObject(19378, 1910.049560, -2427.650878, 12.475028, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 1491, "int_doors", "CJ_W_wood", 0);
	oexport = CreateDynamicObject(19378, 1910.032348, -2418.044921, 12.469105, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 1491, "int_doors", "CJ_W_wood", 0);
	SetDynamicObjectMaterial(oexport, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	oexport = CreateDynamicObject(19378, 1894.302001, -2418.044921, 13.540965, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(19458, 1901.806762, -2414.915039, 14.185038, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(19458, 1897.080566, -2421.304931, 14.285055, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(1497, 1901.808837, -2421.172851, 12.525033, 0.000000, 0.000000, 180.000000, vw, ointerior);
	oexport = CreateDynamicObject(19366, 1900.956054, -2422.885009, 14.270961, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(19458, 1894.573974, -2424.415039, 14.260954, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(1497, 1900.794189, -2424.500000, 12.500953, 0.000000, 0.000000, 97.199897, vw, ointerior);
	oexport = CreateDynamicObject(19929, 1903.272949, -2419.104003, 12.540954, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 3906, "libertyhi5", "marblekb_256128", 0);
	SetDynamicObjectMaterial(oexport, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	oexport = CreateDynamicObject(19929, 1905.134033, -2420.093994, 12.540954, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 3906, "libertyhi5", "marblekb_256128", 0);
	SetDynamicObjectMaterial(oexport, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	oexport = CreateDynamicObject(19929, 1905.134033, -2422.955078, 12.540954, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 3906, "libertyhi5", "marblekb_256128", 0);
	SetDynamicObjectMaterial(oexport, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	oexport = CreateDynamicObject(19929, 1903.272949, -2423.944091, 12.540954, 0.000000, 0.000000, 270.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 3906, "libertyhi5", "marblekb_256128", 0);
	SetDynamicObjectMaterial(oexport, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	oexport = CreateDynamicObject(3498, 1905.099975, -2419.050048, 14.395051, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(3498, 1905.099975, -2423.940917, 14.425040, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19929, 1903.272949, -2419.104003, 15.140969, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	oexport = CreateDynamicObject(19929, 1905.134033, -2420.093994, 15.140962, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	oexport = CreateDynamicObject(19929, 1905.134033, -2422.955078, 15.140958, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	oexport = CreateDynamicObject(19929, 1903.272949, -2423.944091, 15.140962, 0.000000, 0.000000, 270.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	oexport = CreateDynamicObject(19929, 1900.412719, -2423.944091, 15.140962, 0.000000, 0.000000, 270.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	oexport = CreateDynamicObject(2350, 1902.933227, -2418.257080, 12.835039, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2350, 1904.262573, -2418.257080, 12.835039, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2350, 1905.943115, -2420.069091, 12.835039, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2350, 1905.943115, -2421.479980, 12.835039, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2350, 1905.943115, -2422.928955, 12.835039, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2748, 1897.458251, -2426.519042, 13.110958, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(oexport, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	oexport = CreateDynamicObject(0, 1899.789306, -2428.790039, 13.565046, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	oexport = CreateDynamicObject(2748, 1897.458251, -2428.150878, 13.110958, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(oexport, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	oexport = CreateDynamicObject(2748, 1897.458251, -2430.509033, 13.110958, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(oexport, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	oexport = CreateDynamicObject(14651, 1902.919677, -2429.359375, 14.750959, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(14651, 1903.619995, -2426.932373, 14.750959, 0.000000, 0.000000, -89.900001, vw, ointerior);
	oexport = CreateDynamicObject(2111, 1899.322265, -2427.368896, 12.730951, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1820, 1898.871948, -2431.016113, 12.565036, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 12954, "sw_furniture", "CJ_WOOD5", 0);
	oexport = CreateDynamicObject(19378, 1896.802856, -2429.374023, 13.539115, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(19378, 1910.523803, -2427.645019, 13.539115, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(19378, 1910.523803, -2418.044921, 13.539115, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(2746, 1909.625122, -2423.355957, 13.119112, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(oexport, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	oexport = CreateDynamicObject(2746, 1909.625122, -2420.125000, 13.119112, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(oexport, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	oexport = CreateDynamicObject(2746, 1909.605102, -2416.815917, 13.119112, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(oexport, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	oexport = CreateDynamicObject(2748, 1909.625732, -2426.129882, 13.095038, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(oexport, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	oexport = CreateDynamicObject(2747, 1909.422363, -2421.736083, 12.989113, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2747, 1908.321655, -2415.177978, 12.989113, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2747, 1909.422363, -2418.507080, 12.989113, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19378, 1906.173950, -2413.354980, 13.539115, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(3498, 1902.188964, -2413.693115, 15.155048, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(3498, 1897.178955, -2424.872070, 15.155048, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(3498, 1897.178955, -2432.024902, 15.155048, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(3498, 1910.159667, -2428.572021, 15.685058, 0.000000, 90.000000, 270.000000, vw, ointerior);
	oexport = CreateDynamicObject(3498, 1897.083862, -2428.876708, 15.720974, 90.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(3498, 1910.159667, -2419.541015, 15.685058, 0.000000, 90.000000, 270.000000, vw, ointerior);
	oexport = CreateDynamicObject(3498, 1910.159667, -2410.512939, 15.685058, 0.000000, 90.000000, 270.000000, vw, ointerior);
	oexport = CreateDynamicObject(3498, 1906.669921, -2413.583984, 15.685058, 0.000000, 90.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(11689, 1903.934570, -2414.372070, 12.485042, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(oexport, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	oexport = CreateDynamicObject(11689, 1908.435546, -2414.372070, 12.485042, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(oexport, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	oexport = CreateDynamicObject(3498, 1910.109741, -2413.693115, 15.155048, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2747, 1904.001953, -2415.177978, 12.989113, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(14892, 1909.680908, -2426.143066, 12.245020, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19458, 1911.587768, -2429.087890, 14.280947, 0.000000, 0.000000, -45.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(1498, 1908.950439, -2431.695068, 12.540947, 0.000000, 0.000000, 45.000000, vw, ointerior);
	oexport = CreateDynamicObject(2747, 1909.422363, -2425.028076, 12.989113, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1514, 1903.324951, -2423.937988, 13.715029, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19939, 1901.285644, -2421.855957, 13.765039, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19812, 1901.273559, -2421.822021, 12.995029, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19939, 1901.285644, -2421.855957, 14.475041, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19939, 1901.285644, -2421.855957, 15.185046, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19940, 1901.276245, -2422.356933, 13.545036, 90.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19940, 1901.276245, -2422.356933, 15.545036, 90.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19940, 1901.276245, -2421.395996, 13.545036, 90.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19940, 1901.276245, -2421.395996, 15.545036, 90.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19378, 1899.548339, -2427.645019, 16.049095, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 1491, "int_doors", "CJ_W_wood", 0);
	oexport = CreateDynamicObject(19378, 1910.048706, -2427.645019, 16.049095, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 1491, "int_doors", "CJ_W_wood", 0);
	oexport = CreateDynamicObject(19378, 1910.048706, -2418.006103, 16.049095, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 1491, "int_doors", "CJ_W_wood", 0);
	oexport = CreateDynamicObject(19378, 1899.548339, -2418.016113, 16.049095, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 1491, "int_doors", "CJ_W_wood", 0);
	oexport = CreateDynamicObject(1736, 1903.859863, -2413.781005, 14.490973, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1736, 1908.341552, -2413.781005, 14.490973, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19314, 1905.527465, -2420.230957, 15.455041, 90.000000, 180.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19314, 1905.527465, -2422.461914, 15.455041, 90.000000, 180.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1828, 1905.893676, -2416.878906, 12.560958, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 1, "none", "none", 0);
	oexport = CreateDynamicObject(1828, 1903.373657, -2428.313964, 12.560958, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19439, 1901.787963, -2420.491943, 16.780956, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(19439, 1900.078125, -2424.405517, 16.760955, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(2207, 1897.080322, -2415.969970, 12.565025, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19812, 1898.760986, -2420.845947, 13.049107, 0.000000, 0.000000, 180.000000, vw, ointerior);
	oexport = CreateDynamicObject(19812, 1898.070922, -2420.845947, 13.049107, 0.000000, 0.000000, 180.000000, vw, ointerior);
	oexport = CreateDynamicObject(19812, 1898.440673, -2420.845947, 14.039106, 0.000000, 0.000000, 180.000000, vw, ointerior);
	oexport = CreateDynamicObject(2063, 1895.995727, -2420.897460, 13.435031, 0.000000, 0.000000, 180.000000, vw, ointerior);
	oexport = CreateDynamicObject(19637, 1896.718994, -2420.896484, 13.355029, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19637, 1895.117431, -2420.896484, 13.355029, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19636, 1895.932861, -2420.892089, 13.355031, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19639, 1894.761840, -2420.175537, 12.545029, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19639, 1894.761840, -2420.175537, 12.715033, 0.000000, 0.000000, -20.699995, vw, ointerior);
	oexport = CreateDynamicObject(1575, 1896.738403, -2420.844970, 13.805037, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1575, 1896.187866, -2420.844970, 13.805037, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1580, 1895.626831, -2420.864746, 13.805041, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1580, 1895.066650, -2420.864746, 13.805041, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1754, 1897.916870, -2417.717773, 12.585032, 0.000000, 0.000000, 180.000000, vw, ointerior);
	oexport = CreateDynamicObject(1754, 1899.769042, -2417.107421, 12.585032, 0.000000, 0.000000, -119.099990, vw, ointerior);
	oexport = CreateDynamicObject(1754, 1896.112304, -2417.257568, 12.585032, 0.000000, 0.000000, 131.500015, vw, ointerior);
	oexport = CreateDynamicObject(1735, 1897.991088, -2414.031005, 12.485029, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19572, 1896.387084, -2420.861328, 14.225035, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19572, 1895.907470, -2420.861328, 14.225035, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19572, 1895.386718, -2420.861328, 14.225035, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19572, 1896.146240, -2420.861328, 14.555042, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19572, 1896.927124, -2420.861328, 14.225035, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19572, 1896.696777, -2420.861328, 14.545035, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19572, 1895.705810, -2420.861328, 12.895034, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19572, 1896.497680, -2420.861328, 12.885026, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19572, 1895.176513, -2420.911376, 12.885015, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2610, 1901.412719, -2413.841308, 13.345027, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2610, 1901.412719, -2413.841308, 13.345027, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2610, 1900.422363, -2413.841308, 13.345027, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2164, 1894.898315, -2413.519287, 12.555025, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2518, 1899.515625, -2421.887939, 12.545042, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2518, 1898.264648, -2421.887939, 12.545042, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2525, 1897.169433, -2421.885742, 12.545029, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2525, 1894.808593, -2421.885742, 12.545029, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19439, 1897.887329, -2422.173583, 14.270948, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(19439, 1896.006713, -2422.173583, 14.270948, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(1649, 1898.731323, -2421.402587, 15.259118, 0.000000, 0.000000, -0.499999, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 1214, "metal", "CJ_FRAME_Glass", 0);
	oexport = CreateDynamicObject(19820, 1901.166870, -2421.523437, 13.785040, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19820, 1901.166870, -2421.833740, 13.785040, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19820, 1901.166870, -2422.184082, 13.775040, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19823, 1901.341308, -2422.026123, 13.785037, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19823, 1901.341308, -2421.675781, 13.785037, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19822, 1901.105102, -2422.227050, 14.475035, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19822, 1901.135131, -2421.966796, 14.475035, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19822, 1901.285278, -2422.106933, 14.475035, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19824, 1901.216186, -2421.774169, 14.475034, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19824, 1901.216186, -2421.553955, 14.475034, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19821, 1901.292236, -2422.030029, 15.185033, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(19821, 1901.292236, -2421.689697, 15.185033, 0.000000, 0.000000, 90.000000, vw, ointerior);
	oexport = CreateDynamicObject(2074, 1905.243530, -2422.887939, 14.910976, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2074, 1905.243530, -2420.000000, 14.910976, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2074, 1903.362670, -2418.999023, 14.910976, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2074, 1904.843261, -2428.419433, 15.710979, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2074, 1898.793457, -2428.419433, 15.710979, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2074, 1909.313598, -2430.801757, 15.710979, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2074, 1904.793334, -2416.890625, 15.710979, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2074, 1909.242797, -2416.890625, 15.710979, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2074, 1898.470703, -2422.811523, 15.710979, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(2074, 1897.791381, -2416.211914, 15.710979, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19818, 1904.862548, -2420.898681, 15.065037, 0.000000, 180.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19818, 1905.082763, -2420.898681, 15.065037, 0.000000, 180.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19818, 1904.862548, -2421.138916, 15.065037, 0.000000, 180.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19818, 1904.862548, -2421.359130, 15.065037, 0.000000, 180.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19818, 1905.082763, -2421.118896, 15.065037, 0.000000, 180.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19818, 1905.082763, -2421.349121, 15.065037, 0.000000, 180.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19819, 1904.860839, -2421.807373, 15.055044, 0.000000, 180.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19819, 1904.860839, -2422.087646, 15.055044, 0.000000, 180.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19819, 1904.860839, -2422.347900, 15.055044, 0.000000, 180.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19819, 1905.091064, -2421.807373, 15.055044, 0.000000, 180.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19819, 1905.091064, -2422.077636, 15.055044, 0.000000, 180.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19819, 1905.091064, -2422.327880, 15.055044, 0.000000, 180.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19940, 1904.552856, -2420.529296, 13.275034, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 8482, "csrspalace02", "marble01_128", 0);
	oexport = CreateDynamicObject(19940, 1904.552856, -2422.530273, 13.275034, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 8482, "csrspalace02", "marble01_128", 0);
	oexport = CreateDynamicObject(19830, 1904.510864, -2419.826416, 13.265033, 0.000000, 0.000000, -23.099998, vw, ointerior);
	oexport = CreateDynamicObject(19818, 1904.573120, -2420.097900, 13.365030, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1541, 1903.241699, -2419.556640, 13.575037, 0.000000, 0.000000, 180.000000, vw, ointerior);
	oexport = CreateDynamicObject(1665, 1905.329956, -2421.666992, 13.495034, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1665, 1908.359252, -2415.155761, 13.425032, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1665, 1908.989501, -2426.589843, 13.725034, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1665, 1899.360351, -2430.445068, 13.105029, 0.000000, 0.000000, -151.099975, vw, ointerior);
	oexport = CreateDynamicObject(1667, 1905.199829, -2421.483154, 13.575043, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1667, 1899.398681, -2427.533691, 13.235040, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1667, 1899.078369, -2427.383544, 13.235040, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1667, 1909.131225, -2421.993652, 13.505042, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1668, 1899.407592, -2427.265380, 13.310961, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(1668, 1909.239379, -2421.896972, 13.550965, 0.000000, 0.000000, 48.900001, vw, ointerior);
	oexport = CreateDynamicObject(2100, 1910.169799, -2428.135986, 12.540950, 0.000000, 0.000000, 270.000000, vw, ointerior);
	oexport = CreateDynamicObject(19378, 1894.323730, -2426.132812, 13.539115, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(19378, 1896.543457, -2413.354980, 13.539115, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(19378, 1903.493652, -2432.406738, 13.539115, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	oexport = CreateDynamicObject(2690, 1907.671020, -2432.246582, 14.065048, 0.000000, 0.000000, 180.000000, vw, ointerior);
	oexport = CreateDynamicObject(2690, 1899.440673, -2421.163818, 14.065048, 0.000000, 0.000000, 180.000000, vw, ointerior);
	oexport = CreateDynamicObject(11711, 1909.424072, -2431.112548, 15.280967, 0.000000, 0.000000, 45.000000, vw, ointerior);
	oexport = CreateDynamicObject(14892, 1901.559936, -2431.569091, 12.245020, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(632, 1898.210083, -2428.849121, 12.900957, 0.000000, 0.000000, 31.399991, vw, ointerior);
	oexport = CreateDynamicObject(646, 1899.830322, -2414.000000, 13.985040, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19174, 1897.971679, -2413.462890, 14.275043, 0.000000, 0.000000, 0.000000, vw, ointerior);
	oexport = CreateDynamicObject(19315, 1910.566894, -2425.000488, 14.145045, 0.000000, 0.000000, 180.000000, vw, ointerior);
	oexport = CreateDynamicObject(19315, 1910.566894, -2418.490722, 14.145045, 0.000000, 0.000000, 180.000000, vw, ointerior);
	oexport = CreateDynamicObject(2894, 1897.614624, -2415.752685, 13.365038, 0.000000, 0.000000, -20.299999, vw, ointerior);
	oexport = CreateDynamicObject(2196, 1898.090087, -2415.972167, 13.352395, 0.000000, 0.000000, 163.000076, vw, ointerior);
	oexport = CreateDynamicObject(19439, 1897.886474, -2432.369384, 14.350948, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(oexport, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(19377, -1680.805908, -218.753433, 13.138437, 0.000000, 90.000015, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, -1680.805908, -228.373733, 13.138437, 0.000000, 90.000015, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, -1691.295898, -228.373733, 13.138437, 0.000000, 90.000015, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19437, -1685.914672, -213.940246, 14.944383, 0.000000, 0.000000, -89.899955, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1694.910034, -228.368957, 14.944378, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1686.059936, -218.759033, 14.944378, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1686.793212, -233.280166, 14.944378, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1690.787475, -223.492950, 14.944378, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19437, -1675.572509, -213.922576, 14.944383, 0.000000, 0.000000, -89.899955, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1675.469726, -218.759033, 14.944378, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19362, -1683.548095, -213.947814, 12.324370, 0.000000, 0.000000, -90.199989, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19362, -1677.946655, -213.957122, 12.324370, 0.000000, 0.000000, -89.599998, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19362, -1680.687744, -213.966461, 14.934386, 0.000000, 0.000000, -90.199989, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19362, -1683.528076, -213.947998, 17.544391, 0.000000, 0.000000, -90.399986, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19362, -1677.695190, -213.968948, 17.544391, 0.000000, 0.000000, -90.399986, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1680.638916, -213.660949, 14.944378, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 6908, "vgndwntwn21", "newbank", 0x00000000);
	tmpobjid = CreateDynamicObject(19397, -1684.370605, -223.514724, 14.954375, 0.000000, 0.000000, 89.500000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1677.957153, -223.535400, 14.944378, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19397, -1681.876953, -225.208358, 14.954379, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19411, -1681.877075, -228.404144, 14.954380, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1681.888305, -234.818893, 14.944378, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1696.413818, -233.263381, 14.944378, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1676.976318, -223.606964, 14.944378, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_wall1b", 0x00000000);
	tmpobjid = CreateDynamicObject(19397, -1681.706787, -225.208358, 14.954379, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_wall1b", 0x00000000);
	tmpobjid = CreateDynamicObject(19411, -1681.706909, -228.404144, 14.954380, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_wall1b", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1681.708129, -234.818893, 14.944378, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_wall1b", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1675.516479, -228.499008, 14.944378, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_wall1b", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1676.995971, -233.217010, 14.944378, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_wall1b", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, -1680.805908, -218.753433, 16.328441, 0.000000, 90.000015, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_whitewall2_top", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, -1691.295898, -228.373733, 16.718439, 0.000000, 90.000015, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_whitewall2_top", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, -1680.805908, -228.373733, 16.718460, 0.000000, 90.000015, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_whitewall2_top", 0x00000000);
	tmpobjid = CreateDynamicObject(19926, -1682.396362, -223.046218, 13.224373, 0.000000, 0.000000, -89.999961, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14584, "ab_abbatoir01", "ab_tiles", 0x00000000);
	tmpobjid = CreateDynamicObject(19926, -1680.476318, -223.046218, 13.224373, 0.000000, 0.000000, -89.999961, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14584, "ab_abbatoir01", "ab_tiles", 0x00000000);
	tmpobjid = CreateDynamicObject(19926, -1678.556030, -223.046218, 13.224373, 0.000000, 0.000000, -89.999961, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14584, "ab_abbatoir01", "ab_tiles", 0x00000000);
	tmpobjid = CreateDynamicObject(19926, -1687.006958, -226.316070, 13.224373, 0.000000, 0.000000, -89.999961, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14584, "ab_abbatoir01", "ab_tiles", 0x00000000);
	tmpobjid = CreateDynamicObject(19926, -1688.927612, -226.316070, 13.224373, 0.000000, 0.000000, -89.999961, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14584, "ab_abbatoir01", "ab_tiles", 0x00000000);
	tmpobjid = CreateDynamicObject(19926, -1688.927612, -229.555984, 13.224373, 0.000000, 0.000000, -89.999961, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14584, "ab_abbatoir01", "ab_tiles", 0x00000000);
	tmpobjid = CreateDynamicObject(19926, -1687.006958, -229.555984, 13.224373, 0.000000, 0.000000, -89.999961, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14584, "ab_abbatoir01", "ab_tiles", 0x00000000);
	tmpobjid = CreateDynamicObject(2173, -1678.547485, -230.895385, 13.224373, 0.000000, 0.000000, 13.400006, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObject(1671, -1677.481323, -232.139419, 13.674375, 0.000000, 0.000000, -153.500030, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3881, "apsecurity_sfxrf", "ws_rooftarmac2", 0x00000000);
	tmpobjid = CreateDynamicObject(19893, -1677.572875, -230.595550, 14.024378, 0.000000, 0.000000, -7.399999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 8394, "ballysign01", "hortonsnug2_256", 0x00000000);
	tmpobjid = CreateDynamicObject(2048, -1678.726318, -233.118850, 15.444374, 0.000000, 0.000000, 179.700057, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 6864, "vgnvrock", "vrocksign1_256", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(1522, -1681.454711, -214.008514, 13.194374, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19325, -1685.434814, -213.917602, 13.814379, 0.000000, 0.000000, -90.100028, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19325, -1675.963867, -213.934173, 13.814379, 0.000000, 0.000000, -90.100028, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(17951, -1686.625000, -233.212890, 14.764370, 0.000000, 0.000000, 89.399963, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2949, -1690.767211, -233.165344, 13.194374, 0.000000, 0.000000, -89.999954, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1523, -1685.166259, -223.518280, 13.194375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1523, -1681.849975, -224.423721, 13.194375, 0.000000, 0.000000, -91.799980, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19325, -1681.780517, -230.577423, 13.794382, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1845, -1681.477661, -219.135452, 13.224374, 0.000000, 0.000000, 179.899826, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1845, -1684.479125, -219.130249, 13.224374, 0.000000, 0.000000, 179.899826, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1845, -1678.477539, -219.140762, 13.224374, 0.000000, 0.000000, 179.899826, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2418, -1676.078491, -222.824096, 13.224374, 0.000000, 0.000000, 179.600021, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2804, -1682.526855, -219.061859, 13.884374, 0.000000, 0.000000, -87.399917, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2804, -1682.023681, -219.111312, 13.884374, 0.000000, 0.000000, -176.700134, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2804, -1681.754516, -219.095809, 13.884374, 2.699999, 0.000000, -168.200134, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2804, -1681.445556, -219.090164, 13.887201, 2.699999, 0.000000, 176.099838, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2804, -1681.012329, -219.188339, 13.888772, -3.000000, 0.000000, 17.799827, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2804, -1680.628662, -219.145690, 13.893484, -3.000000, 0.000000, 33.199836, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2804, -1680.343017, -218.962417, 13.668570, 82.499961, 78.799980, 33.199836, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2804, -1680.436157, -219.107040, 13.677825, 82.499961, 78.799980, 33.199836, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2806, -1676.073974, -222.891754, 14.264387, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1677.248901, -223.153762, 14.184378, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1677.248901, -223.153762, 14.204379, 0.000000, 0.000000, 29.500001, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1677.248901, -223.153762, 14.224379, 0.000000, 0.000000, -18.200002, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1677.158813, -222.873764, 14.184378, 0.000000, 0.000000, 60.099998, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19583, -1676.619140, -222.886260, 14.184390, 0.000000, 0.000000, 34.200000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2369, -1682.499023, -222.879791, 14.014385, 0.000000, 0.000000, -8.500000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2369, -1678.625366, -222.824676, 14.014385, 0.000000, 0.000000, 12.300000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1736, -1680.241943, -223.153930, 15.714379, 0.000000, 0.000000, 177.499984, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1679.678100, -218.956817, 13.864120, -13.300008, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1679.487915, -218.956817, 13.864120, -13.300008, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1679.317749, -218.956817, 13.864120, -13.300008, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1679.087524, -218.956817, 13.864120, -13.300008, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1678.647094, -218.956817, 13.864120, -13.300008, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1678.476928, -218.956817, 13.864120, -13.300008, 0.000000, -15.900002, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1678.235717, -219.023162, 13.873852, -13.300008, 0.000000, -15.900002, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1677.677124, -218.998184, 13.883407, -13.300008, 0.000000, -15.900002, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2590, -1693.748779, -224.469100, 17.154392, 0.000000, 0.000000, 139.599975, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2806, -1693.653930, -224.523406, 14.818830, -73.000091, 1.900001, 0.600000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2590, -1693.616455, -226.288589, 17.154392, 0.000000, 0.000000, -118.300010, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2590, -1692.348754, -225.347213, 17.154392, 0.000000, 0.000000, 17.399921, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2590, -1694.488403, -229.559417, 18.034406, 0.000000, 0.000000, -134.400070, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2805, -1694.428100, -229.570953, 15.094380, 0.000000, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2590, -1694.409790, -228.518920, 18.034406, 0.000000, 0.000000, -134.400070, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2590, -1694.672485, -231.159255, 18.034406, 0.000000, 0.000000, -134.400070, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2805, -1694.338012, -228.531066, 15.094380, 0.000000, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2805, -1694.618286, -231.171096, 15.094380, 0.000000, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(14774, -1688.430664, -223.628143, 16.164382, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(14774, -1685.905517, -216.383666, 15.514370, 0.000000, 0.000000, 90.100036, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19825, -1675.591552, -218.360671, 15.744376, 0.000000, 0.000000, -90.300010, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19847, -1684.064819, -218.935501, 13.904383, 0.000000, 0.000000, 93.599975, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19847, -1685.048217, -219.142715, 13.904383, 0.000000, 0.000000, 129.099945, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1615, -1690.396606, -233.260818, 16.184379, 0.000000, 0.000000, -87.699974, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2804, -1686.621582, -226.333419, 14.174380, 0.000000, 0.000000, -23.299999, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2804, -1687.147094, -226.292404, 14.174380, 0.000000, 0.000000, 111.899986, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2804, -1688.506713, -226.321685, 13.924493, 88.300003, 0.000000, 111.899986, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2804, -1688.311401, -226.193954, 13.931279, 88.300003, 49.699993, 111.899986, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2804, -1688.314086, -226.392623, 13.929012, 88.300003, 145.000000, 111.899986, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19583, -1687.284179, -226.382400, 14.569823, 93.699966, 32.799999, 19.500000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19587, -1689.134033, -229.530838, 14.154393, 0.000000, 0.000000, 178.099960, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1688.626831, -229.750762, 14.154392, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1688.847045, -229.750762, 14.154392, 0.000000, 0.000000, 29.299999, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1689.028198, -229.428131, 14.154392, 0.000000, 0.000000, 104.500000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1689.410034, -229.743942, 14.154392, 0.000000, 0.000000, 71.900024, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1689.351806, -229.563323, 14.154392, 0.000000, 0.000000, 40.700023, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1686.336425, -229.575836, 14.154374, 0.000000, 0.000000, 30.400001, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1686.336425, -229.575836, 14.184374, 0.000000, 0.000000, 8.199999, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1686.336425, -229.575836, 14.204375, 0.000000, 0.000000, -36.099998, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1687.899169, -229.703704, 14.154390, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1687.899169, -229.703704, 14.174390, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1687.899169, -229.703704, 14.194391, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1687.899169, -229.703704, 14.214391, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1687.123901, -229.455261, 14.204370, 0.000000, 87.899986, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1687.143920, -229.455261, 14.203638, 0.000000, 87.899986, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1687.163940, -229.455261, 14.202905, 0.000000, 87.899986, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1687.183959, -229.455261, 14.202173, 0.000000, 87.899986, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1687.203979, -229.455261, 14.201440, 0.000000, 87.899986, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1687.223999, -229.455261, 14.200708, 0.000000, 87.899986, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1687.243896, -229.455261, 14.199975, 0.000000, 87.899986, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, -1687.263916, -229.455261, 14.199242, 0.000000, 87.899986, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19583, -1687.250366, -229.173065, 14.374187, 34.000011, -96.299972, -2.499999, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2803, -1690.599975, -226.419525, 13.814390, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1620, -1681.984375, -232.041778, 16.034383, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1620, -1694.819824, -231.994674, 16.034383, 0.000000, 0.000000, -179.900054, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1620, -1694.831420, -225.534790, 16.034383, 0.000000, 0.000000, -179.900054, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(18736, -1695.400268, -226.055236, 15.354619, 0.000000, 79.600105, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(18736, -1695.463989, -232.335021, 15.698864, 0.000000, 79.600105, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1431, -1686.813110, -230.383392, 13.224375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1431, -1688.934326, -230.383392, 13.224375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1431, -1688.944335, -232.753295, 13.754382, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2713, -1685.928222, -223.800079, 13.364377, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2712, -1685.502929, -223.855026, 13.804376, 0.000000, 0.000000, 96.299972, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19826, -1683.248413, -223.610092, 14.734381, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19826, -1681.957763, -224.035232, 14.734381, 0.000000, 0.000000, -88.899963, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19826, -1683.329589, -223.441665, 14.734381, 0.000000, 0.000000, -179.000045, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19826, -1680.239501, -223.680694, 14.794380, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1736, -1678.571044, -224.021743, 15.994392, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19897, -1677.805419, -230.638854, 14.034385, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2186, -1676.987915, -224.178543, 13.204373, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(3017, -1678.439575, -230.646041, 14.054383, 0.000000, 0.000000, -166.600143, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2260, -1676.080078, -226.262847, 15.064383, 0.000000, 0.000000, -89.999931, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2267, -1675.631835, -229.703750, 15.314381, 0.000000, 0.000000, -89.999923, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1728, -1681.136596, -229.190582, 13.224373, 0.000000, 0.000000, 90.400001, -1, -1, -1, 300.00, 300.00);

	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "2019-05-21 20:17:55" by "N0rdic"
		Created by "N0rdic"
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(18981, 1514.024780, 1172.015747, 9.430303, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0xFF333333);
	tmpobjid = CreateDynamicObject(18765, 1530.496215, 1164.497192, 8.800288, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "LASLACMA93", 0xFF333333);
	tmpobjid = CreateDynamicObject(18765, 1530.496215, 1174.497558, 8.800288, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "LASLACMA93", 0xFF333333);
	tmpobjid = CreateDynamicObject(18762, 1525.508300, 1169.494628, 10.740317, 89.999992, 270.000000, -90.000007, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(18762, 1525.017822, 1169.494628, 10.530311, 89.999992, 270.000000, -90.000007, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(18762, 1524.527343, 1169.494628, 10.340308, 89.999992, 270.000000, -90.000007, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(18762, 1524.026855, 1169.494628, 10.170304, 89.999992, 270.000000, -90.000007, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(18762, 1523.536376, 1169.494628, 9.960300, 89.999992, 270.000000, -90.000007, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(18762, 1523.075927, 1169.494628, 9.780296, 89.999992, 270.000000, -90.000007, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(18762, 1522.605468, 1169.494628, 9.570292, 89.999992, 270.000000, -90.000007, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(19447, 1521.899169, 1172.026367, 7.929965, 690.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19447, 1521.899169, 1167.045776, 7.929965, 690.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19447, 1525.556640, 1174.674682, 9.540298, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19447, 1525.556640, 1165.044433, 9.540298, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(18981, 1514.004760, 1160.014160, 4.780314, 0.000000, 180.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10824, "subpen1_sfse", "ws_sub_pen_conc", 0xFF330000);
	tmpobjid = CreateDynamicObject(18981, 1513.033813, 1172.015747, 17.040269, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0xFF333333);
	tmpobjid = CreateDynamicObject(19943, 1524.760742, 1161.214843, 9.570310, 0.000000, 0.000000, -46.899974, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(18981, 1513.990112, 1178.988403, 4.780313, 0.000000, 180.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10824, "subpen1_sfse", "ws_sub_pen_conc", 0xFF330000);
	tmpobjid = CreateDynamicObject(18981, 1501.151245, 1171.428222, 4.780313, 0.000000, 180.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10824, "subpen1_sfse", "ws_sub_pen_conc", 0xFF330000);
	tmpobjid = CreateDynamicObject(18765, 1530.496215, 1164.497192, 16.540269, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "bathtile01_int", 0xFFCCCCCC);
	tmpobjid = CreateDynamicObject(18765, 1530.496215, 1174.497558, 16.540269, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "bathtile01_int", 0xFFCCCCCC);
	tmpobjid = CreateDynamicObject(3850, 1523.604614, 1172.036254, 10.937150, 330.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(3850, 1525.503784, 1161.935424, 11.790287, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1535.541748, 1173.978759, 12.410277, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19447, 1530.661865, 1159.448608, 12.410277, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19447, 1535.541748, 1164.347412, 12.410277, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(18765, 1501.037719, 1169.517089, 8.400275, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "LASLACMA93", 0xFF333333);
	tmpobjid = CreateDynamicObject(19943, 1524.760742, 1177.796386, 9.570310, 0.000000, 0.000000, -42.699989, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(19943, 1502.358276, 1177.796386, 9.570310, 0.000000, 0.000000, -47.200016, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(19943, 1502.358276, 1161.225708, 9.570310, 0.000000, 0.000000, -47.500003, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(19943, 1512.868286, 1161.225708, 9.570310, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(19943, 1512.868286, 1177.816894, 9.570310, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(18981, 1525.954467, 1172.015747, 26.580249, 90.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0xFF333333);
	tmpobjid = CreateDynamicObject(3850, 1525.503784, 1173.774902, 11.790287, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(3850, 1525.503784, 1177.236083, 11.790287, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(3850, 1523.604614, 1167.045776, 10.937150, 330.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(3850, 1525.503784, 1165.395874, 11.790287, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1506.067016, 1169.545288, 10.140308, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(18762, 1505.819335, 1164.869018, 10.310294, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(18762, 1505.819335, 1174.199707, 10.310294, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19447, 1500.617675, 1174.455566, 10.140308, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19447, 1500.617675, 1164.534545, 10.140308, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(941, 1505.444580, 1169.265014, 11.230278, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF666666);
	tmpobjid = CreateDynamicObject(19786, 1501.618774, 1170.452026, 13.840324, 0.000014, 0.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 14415, "carter_block_2", "mp_carter_cage", 0x00000000);
	tmpobjid = CreateDynamicObject(19786, 1501.628784, 1170.452026, 15.110335, 0.000014, 0.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 14415, "carter_block_2", "mp_carter_cage", 0x00000000);
	tmpobjid = CreateDynamicObject(19786, 1501.628784, 1168.111206, 15.110335, 0.000014, 0.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 14415, "carter_block_2", "mp_carter_cage", 0x00000000);
	tmpobjid = CreateDynamicObject(19786, 1501.628784, 1168.111206, 13.840331, 0.000014, 0.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 14415, "carter_block_2", "mp_carter_cage", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1501.760131, 1168.272827, 13.590282, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} CHAMBERS", 120, "Ariel", 80, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1501.740112, 1168.292846, 13.590282, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{b70000} CHAMBERS", 120, "Ariel", 80, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1501.720092, 1170.644042, 13.590282, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} CHAMBERS", 120, "Ariel", 80, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1501.700073, 1170.664062, 13.590282, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{b70000} CHAMBERS", 120, "Ariel", 80, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1501.720092, 1170.644042, 14.870295, 0.000014, 0.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} CHAMBERS", 120, "Ariel", 80, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1501.700073, 1170.664062, 14.870295, 0.000014, 0.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{b70000} CHAMBERS", 120, "Ariel", 80, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1501.720092, 1168.282348, 14.870295, 0.000022, 0.000000, 89.999931, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} CHAMBERS", 120, "Ariel", 80, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1501.700073, 1168.302368, 14.870295, 0.000022, 0.000000, 89.999931, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{b70000} CHAMBERS", 120, "Ariel", 80, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19087, 1505.797363, 1173.707885, 10.920266, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF330000);
	tmpobjid = CreateDynamicObject(19087, 1505.797363, 1171.259155, 10.920266, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF330000);
	tmpobjid = CreateDynamicObject(19087, 1505.797363, 1168.811401, 10.920266, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF330000);
	tmpobjid = CreateDynamicObject(19087, 1505.797363, 1167.820434, 10.920266, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF330000);
	tmpobjid = CreateDynamicObject(19087, 1505.797363, 1173.687866, 9.990262, 0.000000, 180.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF330000);
	tmpobjid = CreateDynamicObject(19087, 1505.797363, 1165.377563, 9.990262, 0.000000, 180.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF330000);
	tmpobjid = CreateDynamicObject(19893, 1505.740966, 1168.584228, 11.930274, 0.000000, 0.000000, -111.999984, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 10226, "sfeship1", "sf_shipcomp", 0x00000000);
	tmpobjid = CreateDynamicObject(11689, 1520.501953, 1177.486938, 9.900302, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2028, "cj_games", "CJ_speaker4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2562, "cj_hotel_sw", "CJ-COUCHL1", 0xFF330000);
	tmpobjid = CreateDynamicObject(11689, 1524.471801, 1174.186645, 9.900302, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2028, "cj_games", "CJ_speaker4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2562, "cj_hotel_sw", "CJ-COUCHL1", 0xFF330000);
	tmpobjid = CreateDynamicObject(11689, 1516.431274, 1177.486938, 9.900302, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2028, "cj_games", "CJ_speaker4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2562, "cj_hotel_sw", "CJ-COUCHL1", 0xFF330000);
	tmpobjid = CreateDynamicObject(11689, 1516.429565, 1161.515380, 9.900302, 0.000007, -0.000007, 179.999710, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2028, "cj_games", "CJ_speaker4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2562, "cj_hotel_sw", "CJ-COUCHL1", 0xFF330000);
	tmpobjid = CreateDynamicObject(11689, 1524.473022, 1164.925781, 9.900302, -0.000022, 0.000007, -90.000068, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2028, "cj_games", "CJ_speaker4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2562, "cj_hotel_sw", "CJ-COUCHL1", 0xFF330000);
	tmpobjid = CreateDynamicObject(11689, 1520.500244, 1161.515380, 9.900302, 0.000007, -0.000007, 179.999710, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2028, "cj_games", "CJ_speaker4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2562, "cj_hotel_sw", "CJ-COUCHL1", 0xFF330000);
	tmpobjid = CreateDynamicObject(1516, 1516.400268, 1161.881347, 10.070305, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(1516, 1520.462158, 1161.881347, 10.070305, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(1516, 1524.042724, 1164.901245, 10.070305, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(1516, 1524.042724, 1174.151977, 10.070305, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(1516, 1520.512939, 1177.102783, 10.070305, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(1516, 1516.482055, 1177.102783, 10.070305, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(18762, 1525.388549, 1166.640136, 9.900293, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(18762, 1525.388549, 1172.421997, 9.900293, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(11714, 1527.982910, 1159.558349, 12.510286, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5986, "chateau_lawn", "doorkb_1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1522.401367, 1160.530761, 14.830330, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "pierwin01_law", 0xFF333333);
	tmpobjid = CreateDynamicObject(19327, 1516.130004, 1160.530761, 14.830330, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "pierwin01_law", 0xFF333333);
	tmpobjid = CreateDynamicObject(19327, 1507.518920, 1160.530761, 14.830330, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "pierwin01_law", 0xFF333333);
	tmpobjid = CreateDynamicObject(19368, 1527.755249, 1179.082397, 12.320301, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19387, 1530.960815, 1179.078369, 12.610301, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19447, 1537.375000, 1179.083129, 12.330291, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19368, 1536.046386, 1177.662231, 12.320301, 0.000000, 0.000000, 210.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(18762, 1532.312500, 1179.507812, 10.822507, 0.000000, 90.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(18762, 1532.312500, 1179.988281, 10.652504, 0.000000, 90.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(18762, 1532.312500, 1180.488403, 10.452501, 0.000000, 90.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(18762, 1529.791259, 1180.468383, 10.142494, 0.000007, 90.000007, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(18762, 1529.330932, 1180.468383, 9.922489, 0.000007, 90.000007, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(18762, 1528.830444, 1180.468383, 9.692482, 0.000007, 90.000007, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(18762, 1528.349975, 1180.468383, 9.452479, 0.000007, 90.000007, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(19437, 1529.763793, 1179.947387, 12.332502, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(18763, 1531.330322, 1181.473388, 8.312499, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(19437, 1529.033081, 1183.039428, 11.662487, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19437, 1527.441528, 1180.838256, 11.652486, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19437, 1529.033081, 1180.838256, 11.662487, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19437, 1527.441528, 1183.039794, 11.652484, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19437, 1530.633789, 1183.039428, 11.662487, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19437, 1532.005615, 1179.947387, 12.332502, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19437, 1532.005615, 1181.548950, 12.332502, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19437, 1531.593505, 1182.362670, 12.332502, 0.000000, 0.000000, 30.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(18763, 1527.939697, 1181.473388, 7.402493, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12869, "ce_ground04", "carpark_128", 0xFF330000);
	tmpobjid = CreateDynamicObject(19368, 1526.604858, 1184.572265, 11.630311, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19437, 1526.600708, 1180.117919, 11.682488, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7985, "vgsswarehse02c", "muddywater", 0xFF333333);
	tmpobjid = CreateDynamicObject(19447, 1521.711547, 1179.528442, 11.550266, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19447, 1516.819946, 1184.418334, 11.550266, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19447, 1521.711547, 1184.567260, 11.550266, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(18765, 1530.496215, 1184.127075, 15.890254, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "bathtile01_int", 0xFFCCCCCC);
	tmpobjid = CreateDynamicObject(18765, 1520.525878, 1184.127075, 15.750250, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "bathtile01_int", 0xFFCCCCCC);
	tmpobjid = CreateDynamicObject(19893, 1518.453857, 1180.182250, 10.720305, 0.000000, 0.000000, -167.900024, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 9818, "ship_brijsfw", "ship_screen1sfw", 0x00000000);
	tmpobjid = CreateDynamicObject(2030, 1523.988281, 1181.735717, 10.320309, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF333333);
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF333333);
	tmpobjid = CreateDynamicObject(3027, 1523.774658, 1182.333862, 10.730312, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "pcut_bot_law", 0x00000000);
	tmpobjid = CreateDynamicObject(3027, 1523.774658, 1182.313842, 10.730312, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "pcut_bot_law", 0x00000000);
	tmpobjid = CreateDynamicObject(3027, 1523.774658, 1182.273803, 10.720312, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "pcut_bot_law", 0x00000000);
	tmpobjid = CreateDynamicObject(19874, 1523.824340, 1182.311401, 10.690311, 0.000000, 0.000000, 176.399963, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18889, "forcefields", "glass1", 0x00000000);
	tmpobjid = CreateDynamicObject(19928, 1528.551879, 1179.037475, 11.300288, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 3922, "bistro", "Marble2", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 2, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19929, 1528.547241, 1176.089599, 11.300288, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19925, 1528.548583, 1174.237548, 11.300288, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19929, 1530.407348, 1174.239013, 11.300288, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19929, 1533.268798, 1174.239013, 11.300288, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19929, 1536.128662, 1174.239013, 11.300288, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19929, 1528.547241, 1176.089599, 13.340323, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19925, 1528.548583, 1174.237548, 13.340323, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19929, 1530.407348, 1174.239013, 13.340323, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19929, 1533.268798, 1174.239013, 13.340323, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19929, 1536.128662, 1174.239013, 13.340323, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(19929, 1528.547241, 1178.950561, 13.340323, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, 14771, "int_brothelint3", "Bow_bar_panelfront", 0xFF666666);
	tmpobjid = CreateDynamicObject(2558, 1530.355712, 1178.681396, 12.000297, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF333333);
	tmpobjid = CreateDynamicObject(2558, 1531.416625, 1179.472167, 12.000297, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF333333);
	tmpobjid = CreateDynamicObject(11689, 1534.455322, 1161.574096, 11.240313, -0.000029, 0.000007, -90.000045, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2028, "cj_games", "CJ_speaker4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2562, "cj_hotel_sw", "CJ-COUCHL1", 0xFF330000);
	tmpobjid = CreateDynamicObject(1516, 1534.025024, 1161.549560, 11.410317, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(11689, 1534.455322, 1165.625732, 11.240313, -0.000037, 0.000007, -90.000022, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2028, "cj_games", "CJ_speaker4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2562, "cj_hotel_sw", "CJ-COUCHL1", 0xFF330000);
	tmpobjid = CreateDynamicObject(1516, 1534.025024, 1165.601196, 11.410317, 0.000000, 0.000014, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(11689, 1534.455322, 1169.695068, 11.240313, -0.000045, 0.000007, -90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2028, "cj_games", "CJ_speaker4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2562, "cj_hotel_sw", "CJ-COUCHL1", 0xFF330000);
	tmpobjid = CreateDynamicObject(1516, 1534.025024, 1169.670532, 11.410317, 0.000000, 0.000022, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(1547, 1530.131347, 1174.054931, 12.230290, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6357, "sunstrans_law2", "dogbill01", 0x00000000);
	tmpobjid = CreateDynamicObject(1547, 1533.843505, 1174.054931, 12.230290, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "SW_dinersigns", 0x00000000);
	tmpobjid = CreateDynamicObject(1547, 1531.868652, 1174.144897, 12.230290, 0.000000, 0.000000, -4.499999, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12847, "sprunkworks", "bigsprunkcan", 0x00000000);
	tmpobjid = CreateDynamicObject(19937, 1535.275512, 1175.547241, 11.140282, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0xFF666666);
	tmpobjid = CreateDynamicObject(19937, 1535.275512, 1177.447509, 11.140282, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0xFF666666);
	tmpobjid = CreateDynamicObject(19937, 1535.275512, 1177.447509, 13.130290, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0xFF666666);
	tmpobjid = CreateDynamicObject(19937, 1535.275512, 1175.537109, 13.130290, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0xFF666666);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(14820, 1505.253540, 1169.509643, 11.810276, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19610, 1504.956909, 1169.687255, 11.740283, 0.000000, 0.000000, 35.499996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19612, 1505.718505, 1169.494506, 11.799178, -17.500001, 0.000000, -90.099975, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2232, 1505.810180, 1174.187622, 13.390275, 0.000000, 0.000000, 88.200012, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2232, 1505.805419, 1164.821533, 13.390275, 0.000000, 0.000000, 88.200012, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19918, 1505.786010, 1168.620605, 11.710280, 0.000000, 0.000000, -91.100006, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19624, 1505.128906, 1170.735229, 11.313319, -15.099996, 0.000000, -179.600006, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2229, 1506.038696, 1165.174560, 10.900275, 0.000000, 0.000000, 89.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2229, 1506.054199, 1174.495605, 10.900275, 0.000000, 0.000000, 89.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19786, 1501.518676, 1168.090942, 15.120327, 0.000022, 0.000000, 89.999931, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19786, 1501.518676, 1170.452026, 15.120327, 0.000022, 0.000000, 89.999931, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19786, 1501.518676, 1170.452026, 13.840324, 0.000022, 0.000000, 89.999931, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19786, 1501.518676, 1168.090942, 13.840324, 0.000022, 0.000000, 89.999931, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19814, 1505.788818, 1165.379028, 12.510278, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19814, 1505.788818, 1173.689697, 12.510278, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19820, 1505.810791, 1170.434448, 11.700275, 0.000000, 0.000000, 156.599990, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11685, 1502.131347, 1173.891601, 10.880273, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11685, 1504.693237, 1173.891601, 10.880273, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11685, 1503.401977, 1173.891601, 10.880273, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8878, 1518.879272, 1169.488281, 12.440314, 0.000000, 0.000000, -46.099990, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18653, 1502.546875, 1161.491333, 12.880311, 0.000000, 0.000000, -144.299987, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18653, 1502.633544, 1177.672973, 12.880311, 0.000000, 0.000000, 156.299987, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19159, 1512.154663, 1170.447875, 16.420305, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19128, 1509.514892, 1167.528930, 9.910305, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19128, 1509.514892, 1171.529541, 9.910305, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19128, 1513.515136, 1167.528930, 9.910305, 0.000000, 0.000014, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19128, 1513.515136, 1171.529541, 9.910305, 0.000000, 0.000014, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19128, 1517.505371, 1167.528930, 9.910305, 0.000000, 0.000022, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19128, 1517.505371, 1171.529541, 9.910305, 0.000000, 0.000022, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3872, 1512.679321, 1167.153686, 12.590619, 0.000000, 0.000000, -88.999984, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3872, 1513.516235, 1171.957275, 12.590619, 0.000000, 0.000000, 94.600013, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(16101, 1525.577880, 1172.407958, 9.130299, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(16101, 1525.577880, 1166.596191, 9.130299, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11710, 1528.010498, 1159.547973, 13.910289, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3785, 1526.406860, 1183.741821, 11.780311, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3785, 1526.406860, 1180.080688, 11.780311, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(16779, 1520.875854, 1182.130493, 13.770324, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2166, 1518.996948, 1181.073608, 9.930303, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1663, 1517.777709, 1180.985961, 10.360301, 0.000000, 0.000000, 83.099983, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2724, 1520.661865, 1180.061279, 10.410313, 0.000000, 0.000000, -115.699989, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2724, 1520.746093, 1181.439331, 10.410313, 0.000000, 0.000000, -82.399971, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11686, 1516.766113, 1184.284545, 9.870303, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19173, 1516.929687, 1181.948242, 12.120306, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2949, 1531.298950, 1182.748291, 10.732501, 0.000000, 0.000000, 24.000019, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11743, 1518.836303, 1184.266357, 10.950305, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19619, 1518.486816, 1179.676269, 11.500311, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11682, 1526.112915, 1183.899414, 9.900302, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11685, 1525.064697, 1183.940673, 9.880303, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11685, 1523.774536, 1183.940673, 9.880303, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11684, 1522.741943, 1183.923706, 9.870303, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19914, 1522.320556, 1184.348266, 10.642741, 0.000000, 106.299995, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19942, 1519.027709, 1180.376220, 10.790310, 0.000000, 0.000000, -170.900009, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11746, 1523.663940, 1182.312622, 10.720303, 90.000000, 164.699981, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1665, 1524.460083, 1181.928833, 10.740315, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19792, 1523.959106, 1182.335815, 10.720315, 0.000000, 0.000000, -41.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3785, 1525.986450, 1166.629638, 11.780311, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3785, 1525.986450, 1172.411499, 11.780311, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2074, 1534.430419, 1169.795898, 13.820293, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2074, 1534.430419, 1165.552246, 13.820293, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2074, 1534.430419, 1161.544799, 13.820293, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1541, 1533.737670, 1174.724609, 12.400296, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1541, 1530.146362, 1174.724609, 12.400296, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1548, 1533.792602, 1174.374877, 12.240291, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1548, 1530.150634, 1174.374877, 12.240291, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1542, 1531.928955, 1174.724121, 12.240287, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1488, 1535.347045, 1177.762329, 12.760293, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1488, 1535.347045, 1177.482055, 12.760293, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1511, 1535.350585, 1176.569091, 12.790292, 0.000000, 0.000000, 630.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1511, 1535.350585, 1176.298828, 12.790292, 0.000000, 0.000000, 630.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1668, 1535.227050, 1175.839233, 12.310292, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1668, 1535.367187, 1175.839233, 12.310292, 0.000000, 0.000000, -26.999998, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1668, 1535.308471, 1175.723388, 12.310292, 0.000000, 0.000000, -49.399990, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1668, 1535.393066, 1175.625000, 12.310292, 0.000000, 0.000000, -142.300033, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19823, 1535.349487, 1177.100708, 12.170293, 0.000000, 0.000000, -48.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19823, 1535.252563, 1177.014892, 12.170293, 0.000000, 0.000000, -26.200002, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1520, 1535.389892, 1178.307006, 12.220289, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1520, 1535.309814, 1178.186889, 12.220289, 0.000000, 0.000000, -26.799999, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1520, 1535.149414, 1178.268188, 12.220289, 0.000000, 0.000000, -119.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19821, 1535.275024, 1174.861694, 12.170286, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19820, 1535.301147, 1175.068725, 12.160293, 0.000000, 0.000000, -59.199996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1545, 1534.978393, 1176.744262, 13.520294, 0.000000, 0.000000, 630.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1716, 1530.851684, 1173.825683, 11.270286, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1716, 1531.981933, 1173.825683, 11.270286, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1716, 1533.920532, 1173.825683, 11.270286, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 

	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(18981, 1539.474731, -1094.246582, 179.813156, 0.000000, 90.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(19456, 1547.155395, -1106.661254, 181.863159, 0.000000, 0.000000, 90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1551.846191, -1106.514160, 180.182937, 90.199981, 57.799980, -89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19456, 1551.944335, -1101.764526, 181.863113, 0.000000, 0.000000, -179.999893, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1551.889648, -1103.152221, 180.393157, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1551.889648, -1096.292602, 180.393157, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1541.558105, -1106.590332, 180.393157, 0.000000, 0.000000, -89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1548.407470, -1106.590332, 180.393157, 0.000000, 0.000000, -89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1551.889648, -1103.152221, 183.163162, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1551.889648, -1096.301879, 183.163162, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1548.407470, -1106.590332, 183.153152, 0.000000, 0.000000, -89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1541.557006, -1106.590332, 183.153152, 0.000000, 0.000000, -89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1542.348144, -1106.607299, 180.149993, 90.199981, -1.200028, -89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1546.960937, -1106.583862, 180.166046, 90.199981, -1.200028, -89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1551.897827, -1101.900512, 180.183105, 90.199981, 90.099990, -89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1551.890014, -1097.039550, 180.183105, 90.199981, 90.099990, -89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19437, 1541.633422, -1106.051513, 182.403198, 0.000000, 0.000000, 46.399993, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3314, "ce_burbhouse", "sw_wallbrick_06", 0x00000000);
	tmpobjid = CreateDynamicObject(19456, 1536.293579, -1105.530273, 182.413131, 0.000000, 0.000000, 90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3314, "ce_burbhouse", "sw_wallbrick_06", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 1537.280151, -1104.051757, 180.423263, 90.000007, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 1537.280151, -1101.492797, 180.423263, 90.000007, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19456, 1534.644165, -1103.810668, 182.413131, 0.000000, 0.000000, 0.000016, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3314, "ce_burbhouse", "sw_wallbrick_06", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1542.161621, -1101.509521, 180.413131, 90.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1542.491943, -1101.509521, 180.243164, 90.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1542.782226, -1101.509521, 180.033218, 90.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(19456, 1537.484252, -1098.929199, 182.413131, 0.000000, 0.000000, 90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3314, "ce_burbhouse", "sw_wallbrick_06", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1542.588378, -1098.263671, 182.003082, 0.000000, 0.000000, -27.799995, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19456, 1547.075561, -1096.869262, 182.033172, 0.000000, 0.000000, 90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1543.334960, -1096.849365, 182.003082, 0.000000, 0.000000, -27.799995, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1543.376831, -1096.951416, 180.363357, 90.199981, -150.199981, -89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1548.407470, -1097.019287, 183.153152, 0.000000, 0.000000, -89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1251, 1541.576293, -1097.019287, 183.153152, 0.000000, 0.000000, -89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 1539.474731, -1094.246582, 183.743072, 0.000000, 90.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3984, "lanbloki", "greytile_LA", 0x00000000);
	tmpobjid = CreateDynamicObject(19926, 1551.415161, -1098.784423, 180.313156, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3922, "bistro", "Marble2", 0x00000000);
	tmpobjid = CreateDynamicObject(19928, 1551.406250, -1097.399902, 180.313156, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 6871, "vegascourtbld", "marbletilewal1_256", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 3922, "bistro", "Marble2", 0x00000000);
	tmpobjid = CreateDynamicObject(19923, 1550.131958, -1097.160278, 180.253173, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0x00000000);
	tmpobjid = CreateDynamicObject(19927, 1547.466186, -1097.366455, 180.273208, 0.000000, 0.000000, 89.900001, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 3922, "bistro", "Marble2", 0x00000000);
	tmpobjid = CreateDynamicObject(19928, 1548.805175, -1097.329833, 180.293167, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 6871, "vegascourtbld", "marbletilewal1_256", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 3922, "bistro", "Marble2", 0x00000000);
	tmpobjid = CreateDynamicObject(2818, 1549.579223, -1105.001708, 180.323104, 0.000000, 0.000000, 41.599998, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17933, "carter_mainmap", "mp_carter_carpet", 0x00000000);
	tmpobjid = CreateDynamicObject(19786, 1551.068237, -1105.667602, 181.443145, 0.000000, 0.000000, -135.100006, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 13761, "lahills_whisky", "discharger", 0x00000000);
	tmpobjid = CreateDynamicObject(14446, 1536.545410, -1101.409057, 181.483123, 0.000000, 0.000000, 89.899986, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 6095, "shops01_law", "GB_chatwall03b", 0x00000000);
	tmpobjid = CreateDynamicObject(19893, 1542.505981, -1104.611206, 181.203216, 0.000000, 0.000000, 76.800003, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 1217, "dynbarrels", "redallu", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(1569, 1543.235351, -1097.170410, 180.303176, 0.000000, 0.000000, -117.600021, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19924, 1550.055786, -1097.068115, 183.183135, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19585, 1549.753540, -1097.217651, 181.443130, 0.000000, 0.000000, 72.300003, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19581, 1550.709838, -1097.373901, 181.283020, 0.000000, 0.000000, -71.499992, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19582, 1550.291503, -1097.511352, 181.293136, 0.000000, 0.000000, -32.399997, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19830, 1551.628173, -1097.211425, 181.243087, 0.000000, 0.000000, -37.600002, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2082, 1550.368164, -1105.798706, 180.313156, 0.000000, 0.000000, -44.299999, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11743, 1548.718261, -1097.179443, 181.193191, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1708, 1547.450805, -1105.922607, 180.283172, 0.000000, 0.000000, 103.599983, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1713, 1548.806030, -1101.890136, 180.283157, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2030, 1549.472167, -1104.288818, 180.423217, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1664, 1549.739257, -1103.886718, 180.983139, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1667, 1549.478515, -1103.840576, 180.913177, 0.000000, 0.000000, -18.400001, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1667, 1548.871215, -1104.491210, 180.913177, 0.000000, 0.000000, -61.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2307, 1540.640991, -1103.931030, 180.853164, 0.000000, 0.000000, 179.499984, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2256, 1536.808227, -1099.038208, 182.213165, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2257, 1540.502807, -1099.052734, 182.073272, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2267, 1545.049316, -1096.968261, 182.013137, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2267, 1545.539794, -1096.968261, 181.703155, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(948, 1545.015502, -1097.383544, 180.293151, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19802, 1534.751708, -1105.380493, 180.803253, 0.000000, 0.000000, 90.700042, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2206, 1542.769897, -1106.031738, 180.273178, 0.000000, 0.000000, 89.699943, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2201, 1543.007202, -1106.141113, 181.213134, 0.000000, 0.000000, -42.900001, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2194, 1542.675415, -1104.077758, 181.443130, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19999, 1543.869018, -1105.576416, 180.293136, 0.000000, 0.000000, -153.100021, -1, -1, -1, 300.00, 300.00);

	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(18981, -1540.512817, -247.642303, 12.742191, 0.000000, -90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1552.797729, -239.997573, 14.948435, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1552.797729, -249.627624, 14.948435, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1548.035888, -235.259963, 14.948435, 0.000000, 0.000000, 89.899948, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1538.405883, -235.276733, 14.948435, 0.000000, 0.000000, 89.899948, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1538.405883, -235.336715, 12.668427, 0.000000, 0.000000, 89.899948, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1548.036376, -235.319900, 12.668427, 0.000000, 0.000000, 89.899948, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1552.747680, -239.997573, 12.668427, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1552.747680, -249.627716, 12.668427, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(11714, -1545.729614, -235.417053, 14.482193, 0.000000, 0.000000, -90.400032, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13363, "cephotoblockcs_t", "sw_door16", 0x00000000);
	tmpobjid = CreateDynamicObject(19362, -1545.719238, -235.306594, 14.062192, 0.000000, 0.000000, -90.499977, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1542.301025, -240.579788, 12.678429, 0.000000, 0.000000, 89.899948, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, -1546.623046, -240.869705, 15.702189, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "sjmhoodlawn42", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1545.130615, -240.592330, 14.422200, 0.000000, 0.000000, -90.099998, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1543.139282, -240.595794, 14.422200, 0.000000, 0.000000, -90.099998, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1541.148559, -240.599258, 14.422200, 0.000000, 0.000000, -90.099998, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1540.088500, -240.067718, 14.948435, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1540.167480, -240.057678, 12.668427, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1546.915893, -246.157577, 12.628417, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1546.899536, -242.369171, 14.372192, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1546.899536, -244.369216, 14.372192, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1546.899536, -246.359207, 14.372192, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1546.899536, -248.349243, 14.372192, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1546.899536, -250.349212, 14.372192, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1548.064697, -251.060028, 14.948435, 0.000000, 0.000000, 89.899948, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1548.062133, -251.009750, 12.668427, 0.000000, 0.000000, 89.899948, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1540.088500, -249.697738, 14.948435, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1540.167480, -249.687698, 12.668427, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1538.443969, -251.076766, 14.948435, 0.000000, 0.000000, 89.899948, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1538.431274, -251.026412, 12.668427, 0.000000, 0.000000, 89.899948, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(2766, -1540.209350, -244.351501, 15.382192, 0.000000, 0.000000, -89.100021, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(2766, -1540.204833, -247.811950, 15.382192, 0.000000, 0.000000, -89.100021, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19329, -1542.093383, -235.365814, 15.292190, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} DO YOU KNOW YOUR ROAD SIGNS?", 80, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1542.093383, -235.365814, 15.142188, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} 1/3 People do not know the following signs.", 80, "Ariel", 10, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.229003, -245.370758, 15.492198, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} Z", 80, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.229003, -245.340789, 15.292195, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} Z  A", 80, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, -1550.009521, -235.388320, 15.062205, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16377, "des_byofficeint", "ufo_pics2", 0x00000000);
	tmpobjid = CreateDynamicObject(19329, -1540.229003, -245.220809, 15.082191, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} P  C  K  E", 90, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.229003, -245.240798, 14.942188, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} S  J  S  F  B", 90, "Ariel", 10, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.229003, -245.220809, 14.822184, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} E  Y  J  F  X  S", 100, "Ariel", 10, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.229003, -245.300781, 14.722183, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} A  R  Y  Q  P  O  S", 120, "Ariel", 8, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.235107, -248.840713, 15.492198, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} Z", 80, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.234375, -248.810714, 15.292195, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} Z  A", 80, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.235229, -248.700790, 15.082191, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} P  C  K  E", 90, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.234619, -248.710784, 14.942188, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} S  J  S  F  B", 90, "Ariel", 10, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.234130, -248.680786, 14.822184, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} E  Y  J  F  X  S", 100, "Ariel", 10, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.234375, -248.770797, 14.722183, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} A  R  Y  Q  P  O  S", 120, "Ariel", 8, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2190, -1544.808349, -240.338531, 14.432205, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1545.130615, -240.762283, 14.062191, 0.000000, 0.000000, -90.099998, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1543.140869, -240.765762, 14.062191, 0.000000, 0.000000, -90.099998, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1541.150268, -240.769241, 14.062191, 0.000000, 0.000000, -90.099998, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(2356, -1544.498413, -241.168197, 13.232191, 0.000000, 0.000000, 25.899999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(2187, -1546.126098, -245.733016, 13.042186, 0.000000, 0.000000, 90.100074, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(2190, -1547.146972, -244.984436, 14.362202, 0.000000, 0.000000, 89.800033, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(2190, -1547.155273, -247.304351, 14.362202, 0.000000, 0.000000, 90.600021, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(2356, -1546.160156, -244.674591, 13.232191, 0.000000, 0.000000, 100.299987, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(2356, -1546.192382, -246.702926, 13.232191, 0.000000, 0.000000, 148.199996, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1546.639282, -242.779342, 14.062187, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1546.639282, -247.309295, 14.062187, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1546.639282, -244.779342, 14.062187, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, -1546.639282, -249.299270, 14.062187, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall03_128", 0x00000000);
	tmpobjid = CreateDynamicObject(3034, -1552.694458, -239.328491, 15.262187, 0.000000, 0.000000, 89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 6522, "cuntclub_law2", "marinawindow1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(3034, -1552.694458, -242.968490, 15.262187, 0.000000, 0.000000, 89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 6522, "cuntclub_law2", "marinawindow1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(3034, -1552.694458, -246.608428, 15.262187, 0.000000, 0.000000, 89.999984, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 6522, "cuntclub_law2", "marinawindow1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19329, -1540.193237, -237.928115, 15.382187, 0.000000, 0.000000, 90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} LOS SANTOS", 120, "courier", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.193237, -237.928131, 15.312188, 0.000000, 0.000000, 90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{960000} D", 120, "Ariel", 40, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.193237, -238.038131, 15.312188, 0.000000, 0.000000, 90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} EPARTMENT OF", 120, "Ariel", 40, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.193237, -237.928131, 15.102183, 0.000000, 0.000000, 90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{960000} M", 120, "Ariel", 40, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.193237, -238.058120, 15.102183, 0.000000, 0.000000, 90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} OTOR", 120, "Ariel", 40, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.193237, -238.518035, 15.102183, 0.000000, 0.000000, 90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{960000} V", 120, "Ariel", 40, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.193237, -238.608078, 15.102183, 0.000000, 0.000000, 90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} EHICLES", 120, "Ariel", 40, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.193237, -239.158050, 15.602186, 0.000000, 0.000000, 90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} K", 120, "Webdings", 100, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1540.193237, -239.368087, 15.342185, 0.000000, 0.000000, 90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{960000} D.M.V", 120, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1551.727661, -250.968444, 15.522190, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} PUBLIC BATHROOM", 120, "Ariel", 25, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(18981, -1540.512817, -247.642303, 17.062162, 0.000000, -90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "dam_terazzo", 0x00000000);
	tmpobjid = CreateDynamicObject(2596, -1552.376098, -235.672210, 16.097677, 10.999998, 0.000000, 43.099998, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8201, "vgs_stadium", "dirtringtex2_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19329, -1549.807128, -250.968444, 15.732192, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} Thinking of speeding?", 120, "Ariel", 25, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, -1549.807128, -250.968444, 15.592188, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} Think again.", 120, "Ariel", 25, 0, 0x00000000, 0x00000000, 0);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(1498, -1551.894897, -250.967163, 13.242191, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1498, -1540.885009, -250.945266, 13.242191, 0.000000, 0.000000, -179.899917, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19805, -1550.040649, -235.336959, 15.062184, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19962, -1543.534057, -235.363449, 12.192181, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19949, -1542.778686, -235.361862, 12.102183, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19966, -1541.911376, -235.358520, 12.222181, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19973, -1540.998901, -235.359817, 12.212186, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19808, -1544.524169, -240.819107, 14.092191, 0.000000, 0.000000, 4.899999, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2202, -1540.759521, -241.268341, 13.242191, 0.000000, 0.000000, -89.799980, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2197, -1541.785888, -243.025421, 13.232191, 0.000000, 0.000000, -89.799972, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2197, -1541.776733, -245.465301, 13.232191, 0.000000, 0.000000, -89.799972, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2197, -1541.773925, -246.175277, 13.232191, 0.000000, 0.000000, -89.799972, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2197, -1541.771240, -246.875228, 13.232191, 0.000000, 0.000000, -89.799972, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1808, -1543.261596, -250.649383, 13.242191, 0.000000, 0.000000, -178.600067, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19808, -1546.666137, -244.705657, 14.092191, 0.000000, 0.000000, 94.799995, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19808, -1546.654907, -246.978591, 14.092191, 0.000000, 0.000000, 90.200004, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1811, -1546.056030, -250.423828, 13.832198, 0.000000, 0.000000, -90.199981, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1811, -1545.205444, -250.426818, 13.832198, 0.000000, 0.000000, -90.199981, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1811, -1544.354858, -250.429809, 13.832198, 0.000000, 0.000000, -90.199981, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1811, -1552.145751, -248.500991, 13.832198, 0.000000, 0.000000, -179.100006, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1811, -1552.140258, -247.590759, 13.832198, 0.000000, 0.000000, -179.100006, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1811, -1552.155029, -246.640884, 13.832198, 0.000000, 0.000000, -179.100006, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1811, -1552.169555, -245.730957, 13.832198, 0.000000, 0.000000, 173.400009, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1811, -1552.204956, -244.801574, 13.832198, 0.000000, 0.000000, -177.799987, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1811, -1552.218261, -243.663101, 13.832198, 0.000000, 0.000000, 178.599990, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1811, -1552.195556, -242.733444, 13.832198, 0.000000, 0.000000, 178.599990, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1811, -1552.172119, -241.773895, 13.832198, 0.000000, 0.000000, -174.200027, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1811, -1552.212036, -240.769607, 13.832198, 0.000000, 0.000000, 178.899948, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1811, -1552.192993, -239.789825, 13.832198, 0.000000, 0.000000, 178.899948, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1723, -1540.863037, -237.044281, 13.202189, 0.000000, 0.000000, -88.599983, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2725, -1540.881591, -236.002441, 13.392192, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2725, -1540.881591, -240.022415, 13.392192, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(14699, -1548.115966, -247.361602, 14.892195, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(14699, -1541.604492, -247.361602, 14.892195, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(14699, -1544.535278, -240.621719, 14.892195, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19814, -1541.317016, -235.434051, 13.402194, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19814, -1551.608154, -235.434051, 13.402194, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19807, -1543.762817, -240.836990, 14.152199, 0.000000, 0.000000, -24.599998, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2855, -1540.906738, -235.994720, 13.832201, 0.000000, 0.000000, -19.100002, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(18880, -1549.038330, -251.117721, 9.912172, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1238, -1552.306274, -237.587921, 13.552195, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1238, -1552.306274, -237.587921, 13.652197, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1238, -1552.306274, -237.587921, 13.752201, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1238, -1552.306274, -237.587921, 13.862202, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(367, -1546.440673, -243.997741, 14.112195, 0.000000, 0.000000, 112.199989, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(367, -1546.687255, -247.567245, 14.112195, 0.000000, 0.000000, -122.200027, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1238, -1552.306274, -236.947937, 13.552195, 0.000000, 0.000000, -42.500000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1238, -1552.306274, -236.947937, 13.652197, 0.000000, 0.000000, -42.500000, -1, -1, -1, 300.00, 300.00);

	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Remove Buildings///////////////////////////////////////////////////////////////////////////////////////////////


	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(11008, 1132.519165, -1302.003540, 19.398571, 0.000000, 0.000000, 89.999992, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 3603, "bevmans01_la", "rooftiles1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 4, 11631, "mp_ranchcut", "mpCJ_Black_metal", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 18234, "cuntwbtxcs_t", "offwhitebrix", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 6, 18234, "cuntwbtxcs_t", "offwhitebrix", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1130.208007, -1290.341674, 22.076671, 0.000000, 0.000000, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "LOS", 80, "Calibri", 65, 1, 0xEEEEEEEF, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19433, 1128.530761, -1290.835327, 23.457983, -90.100006, 0.000000, -89.999954, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1135.531372, -1290.835327, 23.445749, -90.100006, 0.000000, -89.999954, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1132.030395, -1290.835327, 23.451841, -90.100006, 0.000000, -89.999954, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1125.039428, -1290.835327, 23.464059, -90.100006, 0.000000, -89.999954, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1121.539062, -1290.835327, 23.470178, -90.100006, 0.000000, -89.999954, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1127.258422, -1290.348632, 22.076671, 0.000000, 0.000000, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "FIRE", 80, "Calibri", 65, 1, 0xEEEEEEEF, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1126.078857, -1290.351196, 22.076671, 0.000000, 0.000000, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "DEPARTME", 80, "Calibri", 65, 1, 0xEEEEEEEF, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1123.860107, -1290.357421, 22.076671, 0.000000, 0.000000, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "NT", 80, "Calibri", 65, 1, 0xEEEEEEEF, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1145.284301, -1290.669677, 16.353069, 0.000000, -3.099998, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "LOS SANTOS", 80, "Calibri", 25, 1, 0xEEEEEEEF, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1144.226074, -1290.661132, 16.410392, 0.000000, -3.099998, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "FIRE DEPARTMENT", 80, "Calibri", 25, 1, 0xEEEEEEEF, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1144.919067, -1290.660888, 16.062435, 0.000000, -3.099998, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "PUBLIC ENTRANCE ", 80, "Calibri", 30, 1, 0xEEEEEEEF, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19447, 1120.955810, -1311.915771, 12.092329, 0.000000, 0.000000, 90.099960, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17324, "cwsbarn", "des_redslats", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1130.577026, -1311.900146, 15.592338, 0.000000, 0.000000, 90.099960, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17324, "cwsbarn", "des_redslats", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1120.955810, -1311.915771, 15.592338, 0.000000, 0.000000, 90.099960, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17324, "cwsbarn", "des_redslats", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1138.466064, -1311.885498, 15.592338, 0.000000, 0.000000, 90.099960, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17324, "cwsbarn", "des_redslats", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1138.466064, -1311.885498, 12.092335, 0.000000, 0.000000, 90.099960, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17324, "cwsbarn", "des_redslats", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1128.834960, -1311.902221, 12.092335, 0.000000, 0.000000, 90.099960, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17324, "cwsbarn", "des_redslats", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1137.036865, -1284.672607, 12.472216, -94.800041, 0.300001, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "NO PARKING", 80, "Calibri", 50, 1, 0xFFFFF667, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1128.435058, -1284.643310, 12.475991, -94.800041, 0.300001, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "NO PARKING", 80, "Calibri", 50, 1, 0xFFFFF667, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1119.734497, -1284.613159, 12.479805, -94.800041, 0.300001, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "NO PARKING", 80, "Calibri", 50, 1, 0xFFFFF667, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1121.464233, -1284.998901, 12.447251, -94.800041, 0.300001, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "________", 80, "Calibri", 50, 1, 0xFFFFF667, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1123.704711, -1285.006835, 12.446269, -94.800041, 0.300001, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "________", 80, "Calibri", 50, 1, 0xFFFFF667, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1125.974975, -1285.014038, 12.445275, -94.800041, 0.300001, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "________", 80, "Calibri", 50, 1, 0xFFFFF667, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1130.055541, -1285.028442, 12.443488, -94.800041, 0.300001, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "________", 80, "Calibri", 50, 1, 0xFFFFF667, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1133.375366, -1285.039550, 12.442028, -94.800041, 0.300001, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "________", 80, "Calibri", 50, 1, 0xFFFFF667, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1131.675048, -1285.033691, 12.442774, -94.800041, 0.300001, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "________", 80, "Calibri", 50, 1, 0xFFFFF667, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1137.105590, -1285.052246, 12.440393, -94.800041, 0.300001, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "________", 80, "Calibri", 50, 1, 0xFFFFF667, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1138.995605, -1285.058837, 12.439564, -94.800041, 0.300001, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "________", 80, "Calibri", 50, 1, 0xFFFFF667, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1140.915527, -1285.065673, 12.438722, -94.800041, 0.300001, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "________", 80, "Calibri", 50, 1, 0xFFFFF667, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19433, 1121.539062, -1312.796630, 23.470178, -90.100006, 0.000000, -89.999954, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1125.029052, -1312.796630, 23.464082, -90.100006, 0.000000, -89.999954, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1128.528808, -1312.796630, 23.457971, -90.100006, 0.000000, -89.999954, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1132.029174, -1312.796630, 23.451858, -90.100006, 0.000000, -89.999954, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1129.258178, -1290.343872, 22.076671, 0.000000, 0.000000, -179.900131, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "SANTOS", 80, "Calibri", 65, 1, 0xEEEEEEEF, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(11245, 1117.633789, -1290.144409, 22.709512, 0.000000, 0.000000, 90.699989, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 12853, "cunte_gas01", "starspangban1_256", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(11710, 1145.343139, -1312.668823, 15.782292, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(3263, 1115.835571, -1290.827880, 12.419063, 0.000000, 0.000000, -179.999984, -1, -1, -1, 300.00, 300.00);
		
	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(18981, 1582.635375, 1450.091674, 9.405602, 0.000000, -90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 1582.635375, 1475.081909, 9.405602, 0.000000, -90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1570.212524, 1487.797241, 11.634807, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1570.212524, 1478.208129, 11.634807, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1570.212524, 1458.957397, 11.634807, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1570.212524, 1468.586669, 11.634807, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(17951, 1570.312500, 1469.969116, 11.635601, 0.000000, 0.000000, 179.799972, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10763, "airport1_sfse", "ws_rollerdoor_fire", 0x00000000);
	tmpobjid = CreateDynamicObject(17951, 1570.337402, 1462.798706, 11.635601, 0.000000, 0.000000, 179.799972, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10763, "airport1_sfse", "ws_rollerdoor_fire", 0x00000000);
	tmpobjid = CreateDynamicObject(17951, 1570.312133, 1455.638427, 11.635601, 0.000000, 0.000000, 179.799972, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10763, "airport1_sfse", "ws_rollerdoor_fire", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1570.789184, 1459.212890, 12.345602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1570.779174, 1466.383544, 12.345602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1570.789184, 1452.061035, 12.345602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1570.779174, 1473.533691, 12.345602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1571.093383, 1475.416015, 11.634807, 0.000000, 0.000000, -89.999954, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19411, 1577.499511, 1475.416015, 11.625610, 0.000000, 0.000000, -90.000007, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 1596.195068, 1462.436645, 13.055616, 0.000000, -90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1570.212524, 1469.207275, 14.654803, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1570.212524, 1459.577392, 14.654803, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1570.212524, 1449.947387, 14.654803, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1570.789184, 1452.061035, 17.335599, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1570.789184, 1459.212890, 17.325603, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1570.779174, 1466.383544, 17.345603, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1570.779174, 1473.533691, 17.325611, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1580.706054, 1475.265258, 11.635607, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1582.237548, 1475.094848, 11.635607, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1587.759155, 1475.086425, 11.635607, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1586.985229, 1476.724609, 11.635607, 0.000000, 0.000000, 178.000091, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1586.869873, 1473.416503, 11.635607, 0.000000, 0.000000, 178.000091, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1586.757934, 1470.208496, 11.635607, 0.000000, 0.000000, 178.000091, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1585.670288, 1467.563964, 11.635607, 0.000000, 0.000000, 137.200103, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1584.863647, 1466.442260, 11.635607, 0.000000, 0.000000, 137.200103, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1583.762329, 1460.506591, 11.634807, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1583.762573, 1450.876098, 11.634806, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1584.159423, 1472.439575, 13.035608, 89.999992, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1585.140380, 1467.439575, 13.035608, 89.999992, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1584.159423, 1462.438720, 13.035608, 89.999992, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1584.159423, 1457.448852, 13.035608, 89.999992, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1584.159423, 1452.459228, 13.035608, 89.999992, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1584.168945, 1472.474365, 15.985609, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1584.168945, 1459.272094, 15.985609, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1586.563110, 1473.315429, 15.045596, 0.000000, 0.000000, 178.000091, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1587.932617, 1471.159423, 15.045596, 0.000000, 0.000000, -113.199905, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1590.874511, 1469.897949, 15.045596, 0.000000, 0.000000, -113.199905, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1592.352172, 1464.557495, 15.044819, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1592.352172, 1454.927734, 15.044819, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1584.168945, 1452.129882, 15.985609, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1583.777587, 1454.333740, 13.321318, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_red_COUNTER", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1583.777587, 1457.823242, 13.327406, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_red_COUNTER", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1583.767578, 1460.742065, 13.342506, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_red_COUNTER", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1583.767578, 1464.232788, 13.348599, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_red_COUNTER", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1583.767578, 1467.714111, 13.354681, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_red_COUNTER", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1583.767578, 1471.194824, 13.360757, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_red_COUNTER", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1583.797607, 1452.767700, 16.778583, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_red_COUNTER", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1583.787597, 1456.267333, 16.784692, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_red_COUNTER", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1583.767578, 1470.258666, 16.809104, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_red_COUNTER", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1583.767578, 1466.767700, 16.803022, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_red_COUNTER", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1583.767578, 1463.267578, 16.796913, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_red_COUNTER", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1583.767578, 1459.766723, 16.790807, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_red_COUNTER", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1585.288818, 1474.970092, 15.045621, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1584.788208, 1475.069702, 14.255616, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1585.160400, 1472.439575, 13.035608, 89.999992, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1586.160644, 1472.439575, 13.035608, 89.999992, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1587.160644, 1472.439575, 13.035608, 89.999992, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1584.159423, 1467.439575, 13.035608, 89.999992, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1586.140747, 1467.439575, 13.035608, 89.999992, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1587.140380, 1467.439575, 13.035608, 89.999992, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1570.212524, 1449.316894, 11.634806, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1575.136718, 1451.582153, 11.634806, 0.000000, 0.000000, 91.199974, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1584.735107, 1451.782714, 11.634806, 0.000000, 0.000000, 91.199974, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1584.735107, 1451.782714, 15.124810, 0.000000, 0.000000, 91.199974, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1575.136718, 1451.582153, 15.124815, 0.000000, 0.000000, 91.199974, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1589.431152, 1451.991333, 15.124810, 0.000000, 0.000000, 91.199974, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19387, 1589.696289, 1459.364135, 15.045618, 0.000000, 0.000000, -89.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1586.351318, 1459.302368, 16.799999, 90.100013, -88.999992, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1596.115966, 1459.494018, 15.044808, 0.000000, 0.000000, 91.199974, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1586.351318, 1459.308593, 13.320000, 90.100013, -88.999992, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1574.286743, 1475.428833, 15.124813, 0.000000, 0.000000, 89.799995, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1580.706054, 1475.265258, 15.135613, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1582.236572, 1475.092773, 15.135613, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1584.168945, 1466.353271, 15.985609, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "conc_wall_stripd128H", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1587.042968, 1483.146240, 11.634806, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1574.600097, 1483.928833, 11.634806, 0.000000, 0.000000, 91.199974, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1584.229248, 1484.130371, 11.634806, 0.000000, 0.000000, 91.199974, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19929, 1578.671142, 1476.931274, 9.895604, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 3444, "vegashse8", "badhousewall05_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19929, 1578.671142, 1479.791870, 9.895604, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 3444, "vegashse8", "badhousewall05_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19387, 1579.012451, 1482.826660, 11.525611, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17324, "cwsbarn", "des_redslats", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1579.021118, 1480.283569, 14.154810, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17324, "cwsbarn", "des_redslats", 0x00000000);
	tmpobjid = CreateDynamicObject(2952, 1570.250488, 1480.694702, 9.905602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11008, "firehouse_sfse", "halldoor01_law", 0x00000000);
	tmpobjid = CreateDynamicObject(19329, 1578.310913, 1478.091064, 10.135600, 0.000000, 0.000000, -90.000045, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2f3030} RECEPTION", 80, "Engravers MT", 40, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1578.931518, 1479.321411, 12.625607, 0.000000, 0.000000, -90.000045, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{fffcfc} LOS SANTOS", 80, "Engravers MT", 25, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1578.931518, 1479.362548, 12.445602, 0.000000, 0.000000, -90.000045, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{fffcfc} FIRE", 80, "Engravers MT", 40, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1578.931518, 1478.551391, 12.445602, 0.000000, 0.000000, -90.000045, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{fffcfc} DEPARTMENT", 80, "Engravers MT", 40, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1578.931518, 1477.630981, 12.515604, 0.000000, 0.000000, -90.000045, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{fffcfc} EMERGENCY SERVICES", 80, "Engravers MT", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2047, 1573.313232, 1475.523803, 12.915615, 0.000000, 0.000000, 179.699905, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10028, "copshop_sfe", "dt_cops_US_flag", 0x00000000);
	tmpobjid = CreateDynamicObject(2274, 1573.262817, 1476.006103, 11.785616, 0.000000, 0.000000, -179.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 11631, "mp_ranchcut", "mpCJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19329, 1572.291259, 1475.518310, 11.725609, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} IN MEMORY", 120, "Engravers MT", 10, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1571.720825, 1475.517944, 11.645607, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} O. THOMAS", 120, "Engravers MT", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1572.261230, 1475.518310, 11.555605, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} 2004", 120, "Engravers MT", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2274, 1573.883422, 1476.006103, 11.785616, 0.000000, 0.000000, -179.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 11631, "mp_ranchcut", "mpCJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(2274, 1572.652343, 1476.004028, 11.785616, 0.000000, 0.000000, -179.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 11631, "mp_ranchcut", "mpCJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(2274, 1572.952636, 1476.004150, 11.215612, 0.000000, 0.000000, -179.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 11631, "mp_ranchcut", "mpCJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(2274, 1573.573242, 1476.004394, 11.215612, 0.000000, 0.000000, -179.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 11631, "mp_ranchcut", "mpCJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19329, 1571.680664, 1475.517700, 11.725609, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} IN MEMORY", 120, "Engravers MT", 10, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1572.910400, 1475.520141, 11.725609, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} IN MEMORY", 120, "Engravers MT", 10, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1572.610107, 1475.520141, 11.145603, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} IN MEMORY", 120, "Engravers MT", 10, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1571.979492, 1475.519775, 11.145603, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} IN MEMORY", 120, "Engravers MT", 10, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1572.331298, 1475.518310, 11.645607, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} CPT. YATES", 120, "Engravers MT", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1572.951660, 1475.519409, 11.645607, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} O.LENNON", 120, "Engravers MT", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1572.621337, 1475.519165, 11.065602, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} O.CHUNG", 120, "Engravers MT", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1572.000732, 1475.518554, 11.065602, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} LT. HAYES", 120, "Engravers MT", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1571.640991, 1475.517578, 11.555605, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} 2007", 120, "Engravers MT", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1572.880981, 1475.519287, 11.555605, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} 2004", 120, "Engravers MT", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1572.570678, 1475.519287, 10.975602, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} 2009", 120, "Engravers MT", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1571.950073, 1475.519042, 10.975602, 0.000000, 0.000000, -179.900024, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} 2014", 120, "Engravers MT", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19939, 1579.312011, 1480.298217, 10.745603, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19938, 1579.316894, 1481.010009, 10.745605, 0.000000, 0.000000, 179.699829, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19939, 1579.312011, 1479.298095, 10.745603, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19939, 1579.312011, 1478.297485, 10.745603, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19939, 1579.312011, 1477.296997, 10.745603, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19939, 1579.312011, 1476.306152, 10.745603, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19938, 1579.311889, 1475.588500, 10.745605, 0.000000, 0.000000, 89.699798, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(2952, 1586.983154, 1480.694702, 9.905602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11008, "firehouse_sfse", "halldoor01_law", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1586.979858, 1481.275634, 8.964786, 0.000000, 0.000000, 91.199974, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1592.348144, 1457.598876, 15.437005, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1592.348144, 1465.930786, 15.451553, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1570.235839, 1464.139770, 15.258425, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1592.348144, 1462.430053, 15.445442, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1592.348144, 1454.099121, 15.430892, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1570.235839, 1467.828613, 15.264871, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1570.235839, 1471.320190, 15.270962, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1570.235839, 1460.650268, 15.252337, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1570.235839, 1456.959594, 15.245892, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1570.235839, 1453.468139, 15.239796, 90.100013, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = CreateDynamicObject(19329, 1588.869384, 1470.616943, 15.765621, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{720000} SHIFT PATTERN", 80, "Calibri", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1588.832763, 1470.633178, 15.625618, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2d2c2c} SHIFT 1", 80, "Calibri", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1589.280395, 1470.433593, 15.625618, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2d2c2c} SHIFT 2", 80, "Calibri", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1588.841918, 1470.629150, 15.495615, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2d2c2c} O. COLLINS", 120, "Calibri", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1588.841918, 1470.629150, 15.435614, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2d2c2c} O. FRANKLYN", 120, "Calibri", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1588.841918, 1470.629150, 15.375614, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2d2c2c} CPT. ANDREWS *", 120, "Calibri", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1588.841918, 1470.629150, 15.315612, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2d2c2c} O. MURPHY", 120, "Calibri", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1588.841918, 1470.629150, 15.255612, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2d2c2c} O. LEE", 120, "Calibri", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1589.289550, 1470.429809, 15.495612, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2d2c2c} CPT. SMITH *", 120, "Calibri", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1589.289550, 1470.429809, 15.435610, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2d2c2c} LT. POTTER *", 120, "Calibri", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1589.289550, 1470.429809, 15.375609, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2d2c2c} O. KYLE", 120, "Calibri", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1589.289550, 1470.429809, 15.315608, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2d2c2c} O. JONES", 120, "Calibri", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1589.289550, 1470.429809, 15.255606, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2d2c2c} O. MURPHY", 120, "Calibri", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1590.038940, 1470.095581, 15.765621, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{5b9ed8} NOTICES", 80, "Calibri", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1589.891845, 1470.159790, 15.605618, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{313233} - Whoever keeps leaving the rotten egg", 120, "Calibri", 14, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1589.910156, 1470.151733, 15.555617, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{313233} sandwiches in the trucks please stop.", 120, "Calibri", 14, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1589.891845, 1470.159790, 15.455615, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{313233} - Happy birthday to Lauran who has turned", 120, "Calibri", 14, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19329, 1589.910156, 1470.151855, 15.405613, 0.000000, 0.000000, -24.099990, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{313233} 30. Drinks at Sticky Fingers on Friday 6:00", 120, "Calibri", 14, 0, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(18981, 1582.447509, 1463.822387, 16.825517, 0.000000, -90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 1578.961547, 1487.875122, 13.418930, -5.499997, -90.399986, -0.699999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1570.212524, 1478.208129, 15.124806, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1586.985229, 1476.724609, 15.105611, 0.000000, 0.000000, 178.000091, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1587.097778, 1479.933105, 15.105611, 0.000000, 0.000000, 178.000091, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1587.210327, 1483.141357, 15.105611, 0.000000, 0.000000, 178.000091, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1587.759155, 1475.086425, 15.125611, 0.000000, 0.000000, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1585.342163, 1476.868896, 14.210210, 0.000000, -87.599967, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1582.131469, 1476.874023, 14.190228, 0.000000, -87.599967, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, 1578.920532, 1476.878662, 14.170243, 0.000000, -87.599967, 89.899978, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13364, "cetown3cs_t", "ws_sandstone2", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(8614, 1582.453857, 1474.018920, 12.115609, 0.000000, 0.000000, 179.599990, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1583.771850, 1470.875122, 15.065610, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1583.771850, 1468.634521, 15.065610, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1583.771850, 1466.393676, 15.065610, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1583.771850, 1464.152587, 15.065610, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1583.771850, 1461.912231, 15.065610, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1583.771850, 1459.670776, 15.065610, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1583.771850, 1457.429321, 15.065610, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1583.771850, 1455.189208, 15.065610, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1583.771850, 1452.948608, 15.065610, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1577.541259, 1475.488647, 11.635604, 0.000000, 0.000000, -90.100013, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1585.045288, 1459.263793, 15.075621, 0.000000, 0.000000, 91.099983, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1587.277099, 1459.307495, 15.075630, 0.000000, 0.000000, 91.099983, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1578.964477, 1476.478759, 12.135613, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1578.964477, 1478.719116, 12.135613, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19466, 1578.964477, 1480.960571, 12.135613, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2310, 1571.017944, 1483.396484, 10.385606, 0.000000, 0.000000, 90.599990, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2310, 1571.808715, 1483.405517, 10.385606, 0.000000, 0.000000, 90.599990, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2310, 1572.609130, 1483.414184, 10.385606, 0.000000, 0.000000, 93.899940, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2310, 1573.459716, 1483.423461, 10.385606, 0.000000, 0.000000, 88.100006, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2310, 1574.280395, 1483.433105, 10.385606, 0.000000, 0.000000, 92.299972, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2961, 1576.145507, 1475.524780, 11.395601, 0.000000, 0.000000, 179.800018, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11710, 1570.303344, 1479.617797, 12.805605, 0.000000, 0.000000, 90.299980, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2190, 1579.058593, 1476.955200, 10.745610, 0.000000, 0.000000, 89.500022, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19808, 1579.364257, 1477.371337, 10.785610, 0.000000, 0.000000, 97.600006, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19807, 1579.249755, 1478.488891, 10.835606, 0.000000, 0.000000, 87.199996, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2356, 1579.943237, 1476.736816, 9.905601, 0.000000, 0.000000, 55.600002, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11729, 1586.563842, 1483.757812, 9.905602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11729, 1585.873168, 1483.757812, 9.905602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11729, 1585.182495, 1483.757812, 9.905602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11729, 1584.482055, 1483.757812, 9.905602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11729, 1583.781372, 1483.757812, 9.905602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11729, 1583.091064, 1483.757812, 9.905602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11729, 1582.400390, 1483.757812, 9.905602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19330, 1584.425659, 1483.761718, 12.050803, -2.700002, -89.799987, 171.599960, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19330, 1585.165039, 1483.773437, 12.059004, -2.700002, -89.199989, -156.800079, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19330, 1583.102050, 1483.720336, 12.035076, -2.700002, -87.599967, 35.999954, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11710, 1586.929321, 1479.633911, 12.825608, 0.000000, 0.000000, 89.700012, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2356, 1579.789550, 1479.589477, 9.905601, 0.000000, 0.000000, 108.099998, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19815, 1586.729248, 1471.577514, 11.515605, 0.000000, 0.000000, -92.099960, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19899, 1573.456420, 1474.872436, 9.905602, 0.000000, 0.000000, -90.199974, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19900, 1570.673461, 1474.972778, 9.905602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2690, 1573.331176, 1475.153930, 11.505605, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2690, 1573.681518, 1475.153930, 11.505605, 0.000000, 0.000000, 21.500001, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2690, 1573.416748, 1474.792114, 11.505605, 0.000000, 0.000000, 21.500001, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2690, 1574.113891, 1475.066772, 11.505605, 0.000000, 0.000000, 111.300003, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2690, 1574.529174, 1474.938842, 11.505605, 0.000000, 0.000000, 111.300003, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2690, 1574.198852, 1474.713256, 11.505605, 0.000000, 0.000000, -68.699989, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2165, 1590.713989, 1461.606323, 13.545616, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2165, 1591.793090, 1466.998779, 13.545616, 0.000000, 0.000000, 179.499984, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2165, 1591.714965, 1462.588623, 13.545616, 0.000000, 0.000000, 179.499984, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2165, 1590.794067, 1466.026855, 13.545616, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2356, 1591.837646, 1465.475341, 13.555616, 0.000000, 0.000000, 33.099994, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2356, 1591.901245, 1460.634399, 13.555616, 0.000000, 0.000000, 85.399993, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2356, 1591.587524, 1463.446411, 13.555616, 0.000000, 0.000000, 131.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2356, 1591.186889, 1467.867553, 13.555616, 0.000000, 0.000000, 169.300018, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2202, 1588.680541, 1470.210937, 13.525615, 0.000000, 0.000000, -23.100002, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1808, 1590.451416, 1469.720947, 13.535611, 0.000000, 0.000000, -22.700000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19805, 1588.827392, 1470.696777, 15.615618, 0.000000, 0.000000, -23.200000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1713, 1584.413818, 1460.648681, 13.515613, 0.000000, 0.000000, 90.200035, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1713, 1584.403930, 1463.429199, 13.515613, 0.000000, 0.000000, 90.200035, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2236, 1586.026733, 1459.368774, 13.555616, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11743, 1586.902587, 1459.845458, 14.065618, 0.000000, 0.000000, -163.899978, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2165, 1586.668212, 1456.170898, 13.535614, 0.000000, 0.000000, -89.299995, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19999, 1585.524414, 1455.469604, 13.555617, 0.000000, 0.000000, 98.600013, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2161, 1591.707519, 1452.204101, 13.555616, 0.000000, 0.000000, -177.900009, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2161, 1590.368041, 1452.155029, 13.555616, 0.000000, 0.000000, -177.900009, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2167, 1589.032836, 1452.110351, 13.555611, 0.000000, 0.000000, -178.099975, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2310, 1588.244873, 1456.380126, 14.025626, 0.000000, 0.000000, 27.500001, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2310, 1588.197753, 1455.231323, 14.025626, 0.000000, 0.000000, -9.799996, -1, -1, -1, 300.00, 300.00);


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////DOOR CLOSED
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(1495, 1578.989990, 1483.597534, 9.835600, 0.000000, 0.000000, -90.000015, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14385, "trailerkb", "tr_wood1", 0x00000000);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////DOOR OPEN
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(1495, 1578.989990, 1483.597534, 9.835600, 0.000000, 0.000000, 5.599976, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14385, "trailerkb", "tr_wood1", 0x00000000);
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(19377, -1677.017211, -396.869873, 13.168438, 0.000000, -90.000007, 44.700023, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, -1670.244628, -403.714630, 13.168438, 0.000000, -90.000007, 44.700023, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19386, -1682.747558, -395.888458, 14.758459, 0.000000, 0.000000, -45.200000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19402, -1679.340209, -392.511932, 14.754384, 0.000000, 0.000000, -45.299980, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1680.455200, -400.369873, 14.754382, 0.000000, 0.000000, -135.500061, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11150, "ab_acc_control", "ws_shipmetal5", 0x00000000);
	tmpobjid = CreateDynamicObject(19429, -1681.048583, -394.200866, 14.754381, 0.000000, 0.000000, -45.199993, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1677.059326, -390.259582, 14.754382, 0.000000, 0.000000, -45.299995, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1675.902709, -390.934295, 14.754382, 0.000000, 0.000000, -135.500061, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19402, -1673.691528, -393.196533, 14.754384, 0.000000, 0.000000, 44.300014, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1682.514282, -398.032440, 14.754382, 0.000000, 0.000000, -135.500061, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1675.770996, -404.892242, 14.754382, 0.000000, 0.000000, -135.300048, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19402, -1680.270874, -400.329376, 15.004385, 0.000000, 0.000000, 44.300014, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19386, -1669.346191, -402.318786, 14.758459, 0.000000, 0.000000, -135.199981, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1671.437255, -395.479888, 14.754382, 0.000000, 0.000000, -135.000045, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1670.935180, -398.324493, 14.754382, 0.000000, 0.000000, -45.299995, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1671.075927, -400.592376, 14.754382, 0.000000, 0.000000, -135.000045, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1675.490600, -402.833129, 14.754382, 0.000000, 0.000000, -45.299995, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19386, -1673.219116, -400.574371, 14.758459, 0.000000, 0.000000, -45.200000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1673.520507, -407.166931, 14.754382, 0.000000, 0.000000, -135.300048, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1667.088867, -402.212554, 14.754382, 0.000000, 0.000000, -45.299995, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19402, -1666.922241, -400.032287, 14.754384, 0.000000, 0.000000, 44.100021, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8486, "ballys02", "walltiles_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19386, -1678.029418, -402.613098, 14.758459, 0.000000, 0.000000, -135.199981, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1669.166625, -397.749694, 14.754382, 0.000000, 0.000000, -135.000045, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1670.976806, -400.663085, 14.754382, 0.000000, 0.000000, -135.000045, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8486, "ballys02", "walltiles_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1670.920898, -398.324615, 14.754382, 0.000000, 0.000000, -45.299995, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8486, "ballys02", "walltiles_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1668.571899, -398.357940, 14.754382, 0.000000, 0.000000, -135.000045, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8486, "ballys02", "walltiles_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1667.110107, -402.191223, 14.754382, 0.000000, 0.000000, -45.299995, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8486, "ballys02", "walltiles_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19386, -1669.346191, -402.304626, 14.738458, 0.000000, 0.000000, -135.199981, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8486, "ballys02", "walltiles_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1671.171752, -407.197631, 14.754382, 0.000000, 0.000000, -45.299995, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1668.890747, -404.939941, 14.754382, 0.000000, 0.000000, -45.299995, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1667.079956, -404.587493, 14.754382, 0.000000, 0.000000, -135.000045, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1673.294433, -393.332977, 14.754382, 0.000000, 0.000000, -135.500061, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11150, "ab_acc_control", "ws_shipmetal5", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1666.698608, -400.030426, 14.754382, 0.000000, 0.000000, -135.500061, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11150, "ab_acc_control", "ws_shipmetal5", 0x00000000);
	tmpobjid = CreateDynamicObject(19356, -1679.478515, -392.432525, 14.754382, 0.000000, 0.000000, 134.699935, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11150, "ab_acc_control", "ws_shipmetal5", 0x00000000);
	tmpobjid = CreateDynamicObject(1506, -1683.263793, -396.422851, 13.104372, 0.000000, 0.000000, 44.299964, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "cof_wood2", 0x00000000);
	tmpobjid = CreateDynamicObject(1506, -1677.468261, -403.148284, 13.104372, 0.000000, 0.000000, 135.299942, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "cof_wood2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, -1677.017211, -396.869873, 16.218437, 0.000000, -90.000007, 44.700023, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "gun_floor1", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, -1670.244628, -403.714630, 16.218454, 0.000000, -90.000007, 44.700023, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "gun_floor1", 0x00000000);
	tmpobjid = CreateDynamicObject(19929, -1675.968505, -402.554595, 13.254376, 0.000000, 0.000000, -45.400009, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 4835, "airoads_las", "tardor2", 0x00000000);
	tmpobjid = CreateDynamicObject(19927, -1679.894897, -399.977233, 13.254376, 0.000000, 0.000000, -135.700103, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 4835, "airoads_las", "tardor2", 0x00000000);
	tmpobjid = CreateDynamicObject(19928, -1680.915649, -399.029785, 13.254376, 0.000000, 0.000000, -135.600097, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 4835, "airoads_las", "tardor2", 0x00000000);
	tmpobjid = CreateDynamicObject(19929, -1675.968505, -402.554595, 15.284382, 0.000000, 0.000000, -45.400009, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 4835, "airoads_las", "tardor2", 0x00000000);
	tmpobjid = CreateDynamicObject(2106, -1673.443847, -406.746826, 14.024383, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 14548, "ab_cargo_int", "cargo_pipes", 0x00000000);
	tmpobjid = CreateDynamicObject(2106, -1675.174072, -405.006835, 14.024383, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "carpet5kb", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14584, "ab_abbatoir01", "carpet5kb", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14548, "ab_cargo_int", "cargo_pipes", 0x00000000);
	tmpobjid = CreateDynamicObject(19922, -1673.625976, -396.570861, 13.224375, 0.000000, 0.000000, -43.799964, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1814, -1677.174682, -392.031127, 13.254376, 0.000000, 0.000000, -0.199985, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(2262, -1671.808715, -398.386718, 14.654379, 0.000000, 0.000000, -135.199951, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 19173, "samppictures", "samppicture2", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(19325, -1673.915771, -392.846160, 14.064387, 0.000000, 0.000000, 44.299991, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19325, -1680.865722, -399.627807, 14.064387, 0.000000, 0.000000, 44.299991, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19325, -1680.951782, -399.711669, 14.064387, 0.000000, 0.000000, 44.299991, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19325, -1674.023559, -392.950988, 14.064387, 0.000000, 0.000000, 44.299991, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19325, -1666.869628, -400.011840, 14.064387, 0.000000, 0.000000, 44.299991, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19325, -1666.948608, -400.088714, 14.064387, 0.000000, 0.000000, 44.299991, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19325, -1679.355957, -392.467712, 14.064387, 0.000000, 0.000000, -45.199977, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19325, -1679.278198, -392.545898, 14.064387, 0.000000, 0.000000, -45.199977, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1567, -1672.713378, -400.005950, 13.014370, 0.000000, 0.000000, -19.600000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1567, -1668.842407, -402.869049, 13.014370, 0.000000, 0.000000, 26.799985, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19916, -1674.687377, -401.218109, 13.224373, 0.000000, 0.000000, -133.400115, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19915, -1679.091308, -400.996551, 13.254376, 0.000000, 0.000000, 134.799987, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2514, -1668.495971, -399.270172, 13.254376, 0.000000, 0.000000, -44.700016, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2522, -1670.715820, -398.908935, 13.254376, 0.000000, 0.000000, 43.599987, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2524, -1669.763549, -401.057098, 13.238097, 0.000000, -0.300000, 134.700073, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2299, -1671.634155, -403.887054, 13.254376, 0.000000, 0.000000, 135.499954, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1740, -1672.554931, -405.905853, 13.254376, 0.000000, 0.000000, 134.199874, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1740, -1674.297363, -404.113311, 13.254376, 0.000000, 0.000000, 134.199874, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2094, -1669.396118, -403.171264, 13.254376, 0.000000, 0.000000, -135.200180, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2267, -1674.438964, -406.041198, 15.204384, 0.000000, 0.000000, 134.500030, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2262, -1670.930664, -401.551269, 14.644376, 0.000000, 0.000000, -44.599979, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2266, -1671.147827, -406.350860, 14.794383, 0.000000, 0.000000, -135.600021, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2120, -1672.196899, -397.875732, 13.834371, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2120, -1673.260864, -395.928283, 13.834371, 0.000000, 0.000000, 41.099998, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2120, -1674.219360, -396.893585, 13.834371, 0.000000, 0.000000, -134.799942, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2120, -1674.749877, -395.592651, 13.834371, 0.000000, 0.000000, 140.200027, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2194, -1673.577026, -396.565277, 14.254384, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2811, -1678.640014, -401.535034, 13.194371, 0.000000, 0.000000, -45.300006, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11682, -1680.899047, -394.799102, 13.254376, 0.000000, 0.000000, 134.300048, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11685, -1680.016113, -393.997100, 13.244376, 0.000000, 0.000000, 44.500022, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11685, -1679.074707, -393.072113, 13.244376, 0.000000, 0.000000, 44.500022, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11685, -1680.123046, -395.554901, 13.244376, 0.000000, 0.000000, 134.499877, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11682, -1678.287597, -392.348907, 13.254376, 0.000000, 0.000000, 44.300025, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(11685, -1679.190917, -396.503540, 13.244376, 0.000000, 0.000000, 134.499877, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19920, -1678.890991, -393.112030, 13.754387, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2815, -1678.126953, -395.248596, 13.254376, 0.000000, 0.000000, 45.300003, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2835, -1669.770141, -400.243011, 13.244376, 0.000000, 0.000000, -27.900005, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19787, -1676.693359, -391.398437, 14.174381, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2841, -1682.325683, -397.080657, 13.264376, 0.000000, 0.000000, 41.799991, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2258, -1671.767822, -395.320220, 14.984376, 0.000000, 0.000000, -45.100006, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2264, -1680.569091, -394.574249, 14.654377, 0.000000, 0.000000, 44.800025, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19826, -1677.268066, -403.265380, 14.804380, 0.000000, 0.000000, 134.699935, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19826, -1672.526245, -399.762481, 14.804376, 0.000000, 0.000000, -134.500152, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19826, -1681.888549, -395.155609, 14.644373, 0.000000, 0.000000, 44.599998, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19826, -1668.636840, -403.164764, 14.724385, 0.000000, 0.000000, -45.099990, -1, -1, -1, 300.00, 300.00);

	CreateDynamicObject(19377, 1436.535767, 1581.725586, 9.752980, 0.000000, 90.000000, 0.000000);
	CreateDynamicObject(8614, 1436.664795, 1584.663818, 12.032969, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(19377, 1436.535767, 1591.356201, 9.752980, 0.000000, 90.000000, 0.000000);
	CreateDynamicObject(19357, 1437.671875, 1578.513550, 11.518924, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1437.671875, 1581.723633, 11.518924, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1437.671875, 1584.933350, 11.518924, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1437.671875, 1588.142578, 11.518924, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1435.982544, 1588.851440, 11.518924, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19357, 1435.982544, 1588.851440, 15.018923, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19357, 1432.772949, 1588.851440, 11.518924, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19357, 1433.252197, 1587.211182, 11.518924, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1433.252563, 1584.001099, 11.518924, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1433.253662, 1580.791626, 11.518924, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1433.252808, 1577.581299, 11.518924, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1433.662109, 1577.581299, 11.518924, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19357, 1436.862427, 1577.581299, 11.518924, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19377, 1442.826660, 1590.175171, 13.183007, 0.000000, 90.000000, 0.000000);
	CreateDynamicObject(19357, 1436.862427, 1577.581299, 15.008928, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19357, 1433.662598, 1577.581299, 15.008928, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19357, 1437.661865, 1584.124756, 15.018921, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1437.661865, 1580.915161, 15.018921, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1437.661865, 1577.705444, 15.018921, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1433.252930, 1577.581299, 15.018930, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1433.252808, 1580.791626, 15.018933, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1433.252441, 1584.001099, 15.018930, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1433.253174, 1587.201172, 15.018919, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1432.772949, 1588.851440, 15.018925, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19387, 1437.658691, 1587.336304, 15.019536, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19387, 1440.901367, 1587.336304, 15.019536, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1439.373901, 1588.851440, 15.018923, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19357, 1439.373901, 1585.641235, 15.018923, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19357, 1437.671875, 1590.534180, 15.018921, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1437.671875, 1593.743774, 15.018921, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1439.363892, 1594.901123, 15.018923, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19357, 1442.573975, 1594.901123, 15.018923, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19357, 1445.783447, 1594.901123, 15.018923, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19357, 1446.772339, 1593.221191, 15.018923, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1448.993164, 1594.901123, 15.018923, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19357, 1446.772339, 1590.011475, 15.018923, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1446.772339, 1586.801636, 15.018923, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1442.593506, 1585.641235, 15.018923, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19357, 1445.803101, 1585.641235, 15.018923, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19387, 1440.901367, 1593.737915, 15.019536, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1440.901855, 1590.534180, 15.018921, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19387, 1437.858887, 1587.336304, 15.019536, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1440.721680, 1590.534180, 15.018921, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19387, 1440.721191, 1593.737915, 15.019536, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19357, 1439.373901, 1588.881470, 15.018923, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19377, 1435.565674, 1593.604248, 13.193007, 0.000000, 90.000000, 0.000000);
	CreateDynamicObject(19377, 1432.415894, 1584.406372, 15.962978, 0.000000, 90.000000, 0.000000);
	CreateDynamicObject(19377, 1432.415894, 1574.766846, 15.962978, 0.000000, 90.000000, 0.000000);
	CreateDynamicObject(19377, 1442.826660, 1590.175171, 16.673002, 0.000000, 90.000000, 0.000000);
	CreateDynamicObject(1415, 1437.043701, 1587.091431, 9.938916, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(2229, 1437.237671, 1588.197998, 9.827880, -14.799999, 0.000000, -77.299988);
	CreateDynamicObject(1440, 1436.409668, 1584.378296, 10.318913, 0.000000, 0.000000, -63.899998);
	CreateDynamicObject(926, 1437.037964, 1585.763306, 10.078910, 0.000000, 0.000000, 40.899998);
	CreateDynamicObject(2754, 1434.001343, 1587.879517, 10.745452, 0.000000, 19.399999, -178.099960);
	CreateDynamicObject(1421, 1435.449951, 1587.037109, 10.568913, 0.000000, 0.000000, 51.699997);
	CreateDynamicObject(1757, 1433.713257, 1586.194458, 9.994387, 0.000000, -50.400093, 89.599991);
	CreateDynamicObject(1450, 1433.932617, 1584.091064, 10.408909, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(1431, 1434.019653, 1582.228149, 10.378912, 0.000000, 0.000000, 73.000008);
	CreateDynamicObject(1357, 1433.964600, 1582.268799, 11.188922, 0.000000, 0.000000, 78.399986);
	CreateDynamicObject(3015, 1437.088257, 1582.687378, 9.948909, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(3015, 1436.451538, 1582.555054, 9.948909, 0.000000, 0.000000, 44.299999);
	CreateDynamicObject(1449, 1435.088989, 1585.992432, 10.318910, 0.000000, 0.099999, 31.799997);
	CreateDynamicObject(2670, 1436.062134, 1578.500977, 9.922658, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2670, 1436.275024, 1579.726929, 9.922657, 0.000000, 0.000000, 46.200001);
	CreateDynamicObject(2677, 1434.614014, 1579.934570, 10.118915, 0.000000, 0.000000, -1.599997);
	CreateDynamicObject(2676, 1435.073242, 1582.624146, 9.948916, 0.000000, 0.000000, 116.299973);
	CreateDynamicObject(2673, 1436.641479, 1587.378540, 13.339521, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2412, 1438.062012, 1586.605957, 13.258935, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2412, 1438.472412, 1588.125854, 13.258935, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(2080, 1439.246216, 1586.232422, 13.228937, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(346, 1439.772095, 1586.284668, 13.998938, 90.000000, 43.299999, 0.000000);
	CreateDynamicObject(335, 1439.925171, 1586.084351, 13.988945, 90.000000, -44.400001, 0.000000);
	CreateDynamicObject(1575, 1440.406128, 1586.250000, 13.988943, 0.000000, 0.000000, 58.999996);
	CreateDynamicObject(1575, 1440.406128, 1586.250000, 14.148946, 0.000000, 0.000000, 9.199993);
	CreateDynamicObject(2855, 1439.418823, 1586.155029, 14.028941, 0.000000, 0.000000, -159.600021);
	CreateDynamicObject(2069, 1440.511475, 1588.505127, 13.288938, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2674, 1439.554688, 1587.538818, 13.278932, 0.000000, 0.000000, 44.100006);
	CreateDynamicObject(1441, 1436.245483, 1578.091309, 10.478912, 0.000000, 0.000000, 180.000000);
	CreateDynamicObject(1498, 1433.310547, 1579.126465, 9.788916, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19302, 1433.876831, 1578.731689, 11.038920, 0.000000, 0.000000, -40.299995);
	CreateDynamicObject(19357, 1444.191895, 1594.800781, 15.018923, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19387, 1445.701782, 1593.107544, 15.019536, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2518, 1446.173706, 1594.535767, 13.348943, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(2525, 1444.636719, 1594.318481, 13.258935, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19826, 1444.690186, 1593.189575, 14.618948, 0.000000, 0.000000, 180.000000);
	CreateDynamicObject(19826, 1440.990234, 1588.329224, 14.618948, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19826, 1439.749634, 1588.769653, 14.618948, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(11707, 1445.597778, 1594.748047, 14.268944, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19826, 1440.639893, 1594.699341, 14.668950, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(3015, 1436.047729, 1588.388428, 13.369526, 0.000000, 0.000000, 15.000000);
	CreateDynamicObject(1748, 1436.368896, 1588.795166, 13.959527, 0.000000, 0.000000, 14.100001);
	CreateDynamicObject(3015, 1436.530396, 1588.439941, 13.369526, 0.000000, 0.000000, -2.300000);
	CreateDynamicObject(2855, 1444.620850, 1593.477783, 13.258934, 0.000000, 0.000000, 136.100037);
	CreateDynamicObject(1778, 1446.339233, 1594.754883, 13.268941, 0.000000, 0.000000, 36.500000);
	CreateDynamicObject(1828, 1442.467163, 1589.267700, 13.248945, 0.000000, 0.000000, -83.300011);
	CreateDynamicObject(2206, 1444.306885, 1588.686768, 13.248936, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(1714, 1445.848145, 1589.568115, 13.258943, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(1210, 1444.177246, 1590.622559, 14.278944, 90.000000, 42.299995, 0.000000);
	CreateDynamicObject(1722, 1442.577026, 1588.929565, 13.268934, 0.000000, 0.000000, -62.599998);
	CreateDynamicObject(1722, 1442.577026, 1590.220215, 13.268934, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(2894, 1444.361328, 1589.961792, 14.188943, 0.000000, 0.000000, 59.399994);
	CreateDynamicObject(19820, 1444.634644, 1590.350342, 14.178942, 0.000000, 0.000000, 61.299992);
	CreateDynamicObject(19818, 1444.639404, 1590.617798, 14.258944, 0.000000, 0.000000, -42.000000);
	CreateDynamicObject(348, 1444.428223, 1589.452881, 13.280893, 90.000000, -41.099983, 0.000000);
	CreateDynamicObject(14455, 1441.659912, 1585.671631, 14.848951, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2073, 1439.549072, 1587.351196, 16.768963, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2073, 1444.308594, 1589.632080, 16.768963, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2074, 1445.612061, 1594.045776, 16.358957, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1893, 1439.192383, 1593.220337, 16.638945, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(1893, 1439.192383, 1589.839478, 16.638945, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2756, 1443.443115, 1594.164307, 14.448945, 0.000000, 0.000000, -46.499996);
	CreateDynamicObject(2674, 1444.795654, 1587.098877, 13.278939, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2676, 1443.845703, 1585.344238, 13.378945, 0.000000, 0.000000, 130.199966);
	CreateDynamicObject(2673, 1441.809082, 1586.647339, 13.348940, 0.000000, 0.000000, 31.500004);
	CreateDynamicObject(2675, 1442.429932, 1592.822510, 13.338940, 0.000000, 0.000000, -108.899986);
	CreateDynamicObject(2670, 1445.202393, 1591.864746, 13.348944, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(18100, 1444.736816, 1590.737427, 13.278935, 0.000000, 0.000000, -34.299992);
	CreateDynamicObject(2066, 1441.457520, 1591.567871, 13.248937, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2066, 1441.457520, 1590.987427, 13.248937, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(1719, 1441.294067, 1591.423584, 14.678947, 0.000000, 0.000000, 74.900002);
	CreateDynamicObject(2854, 1441.499878, 1592.287231, 13.268937, 0.000000, 0.000000, 148.000000);
	CreateDynamicObject(14772, 1441.230713, 1591.447998, 14.958945, 0.000000, 0.000000, 69.999992);
	CreateDynamicObject(1738, 1446.518555, 1587.773682, 13.878938, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2069, 1446.414673, 1591.163452, 13.298940, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1810, 1441.420044, 1589.551270, 13.248937, 0.000000, 0.000000, 118.499977);
	CreateDynamicObject(1499, 1444.924072, 1593.116699, 13.258939, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1497, 1437.649048, 1588.107544, 13.259527, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(19302, 1440.908691, 1587.433472, 14.518949, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(1497, 1440.748779, 1594.507324, 13.259527, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(2110, 1439.136108, 1589.443604, 13.268936, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1550, 1438.362061, 1589.248169, 13.608943, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1550, 1437.965698, 1589.537109, 13.608943, 0.000000, 0.000000, -64.200012);
	CreateDynamicObject(1210, 1440.140137, 1589.354492, 14.158942, 90.000000, -141.299972, 0.000000);
	CreateDynamicObject(1810, 1440.201660, 1590.605591, 13.278941, 0.000000, 0.000000, -34.600002);
	CreateDynamicObject(2332, 1437.534790, 1591.445068, 14.798948, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2332, 1437.534790, 1592.515137, 14.798948, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2332, 1437.534790, 1593.585327, 14.798948, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(1829, 1438.649780, 1593.953369, 13.748935, 0.000000, 0.000000, 39.600002);
	CreateDynamicObject(349, 1440.400757, 1592.316040, 13.539251, -7.199997, -90.899986, -169.900009);
	CreateDynamicObject(1575, 1439.191162, 1589.445435, 14.028943, 0.000000, 0.000000, 49.999992);
	CreateDynamicObject(1575, 1439.191162, 1589.445435, 14.168946, 0.000000, 0.000000, 21.899990);
	CreateDynamicObject(19624, 1439.784180, 1589.207153, 13.358948, 90.000000, -32.800003, 0.000000);
	CreateDynamicObject(2609, 1439.063965, 1595.091675, 15.048947, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2609, 1439.514404, 1595.091675, 15.048947, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2609, 1439.964478, 1595.091675, 15.048947, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2670, 1439.036987, 1591.651733, 13.358942, 0.000000, 0.000000, 50.999996);
	CreateDynamicObject(2671, 1439.127930, 1591.800171, 13.278943, 0.000000, 0.000000, 78.799995);
	CreateDynamicObject(14705, 1441.289917, 1590.888062, 14.898954, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(11705, 1444.247559, 1588.953979, 14.178942, 0.000000, 0.000000, 102.900002);
	CreateDynamicObject(19893, 1444.520508, 1588.523682, 14.178942, 0.000000, 0.000000, 121.099983);
	CreateDynamicObject(927, 1446.713013, 1589.685547, 15.328944, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2922, 1446.688477, 1590.445068, 15.038949, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2886, 1446.725708, 1588.694946, 14.228943, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(1670, 1444.116089, 1589.457642, 14.198943, 0.000000, 0.000000, -64.400002);
	CreateDynamicObject(1736, 1441.599487, 1594.530151, 15.478947, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2718, 1441.083862, 1589.328125, 15.618946, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2103, 1441.355591, 1590.177612, 13.268933, 0.000000, 0.000000, 73.400002);
	CreateDynamicObject(2283, 1443.294067, 1594.792114, 15.408947, 0.000000, -14.700000, 0.000000);
	CreateDynamicObject(2255, 1446.196411, 1592.147217, 14.878947, 0.000000, 3.499999, 270.000000);
	CreateDynamicObject(2258, 1446.664307, 1586.897461, 15.448945, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(2282, 1445.508667, 1594.336670, 14.967945, 0.000000, 56.999996, 0.000000);
	CreateDynamicObject(2558, 1441.358154, 1586.854492, 14.708945, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2261, 1440.144165, 1591.354736, 14.778944, 0.000000, 21.099996, 270.000000);
	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "2019-05-21 20:23:29" by "N0rdic"
		Created by "N0rdic"
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(19865, 2352.736328, -1695.702026, 12.358605, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1408, "break_fence1", "compfence2_LAe", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2372.668701, -1693.081909, 12.358605, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 8869, "buildingsitevge", "boardgate_law", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2369.848632, -1698.260864, 12.138602, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1413, "break_f_mesh", "CJ_CORRIGATED", 0x00000000);
	tmpobjid = CreateDynamicObject(8674, 2369.406005, -1723.203613, 13.472466, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1413, "break_f_mesh", "CJ_CORRIGATED", 0x00000000);
	tmpobjid = CreateDynamicObject(8674, 2357.834472, -1723.203613, 13.472466, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1413, "break_f_mesh", "CJ_CORRIGATED", 0x00000000);
	tmpobjid = CreateDynamicObject(8674, 2352.653320, -1718.034301, 13.472466, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1413, "break_f_mesh", "CJ_CORRIGATED", 0x00000000);
	tmpobjid = CreateDynamicObject(8674, 2352.723388, -1703.553222, 13.472466, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1413, "break_f_mesh", "CJ_CORRIGATED", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2332.705566, -1697.272827, 12.358605, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1408, "break_fence1", "compfence2_LAe", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2298.559082, -1695.692382, 12.488603, 0.000000, 0.000000, -5.199996, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1408, "break_fence1", "compfence2_LAe", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 2288.914306, -1722.384887, 15.936881, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12946, "ce_bankalley1", "sw_furnisign", 0x00000000);
	tmpobjid = CreateDynamicObject(2658, 2260.848876, -1722.379882, 13.712815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12944, "ce_bankalley2", "sw_dryclean", 0x00000000);
	tmpobjid = CreateDynamicObject(2658, 2263.229492, -1722.379882, 13.712815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12944, "ce_bankalley2", "sw_dryclean", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2265.989501, -1721.854858, 13.696887, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19297, "matlights", "invisible", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19297, "matlights", "invisible", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2271.270751, -1721.854858, 13.696887, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19297, "matlights", "invisible", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19297, "matlights", "invisible", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2276.403564, -1721.854858, 13.696887, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19297, "matlights", "invisible", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19297, "matlights", "invisible", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2281.486083, -1721.854858, 13.696887, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19297, "matlights", "invisible", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19297, "matlights", "invisible", 0x00000000);
	tmpobjid = CreateDynamicObject(2736, 2240.351806, -1722.431396, 15.852827, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5774, "garag3_lawn", "sprysig1", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, 2229.873535, -1721.266967, 15.872499, 0.000000, 0.000000, -44.999996, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7488, "vegasdwntwn1", "gen_gym1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19324, 2228.636474, -1711.226196, 13.155575, 8.699999, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19394, 2230.325927, -1689.963378, 14.318384, 3.099998, 0.000000, -13.400006, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17634, "landlae2b", "compfence4b_LAe", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 2231.081787, -1686.851684, 14.480647, 2.899998, 0.000000, -13.599993, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17634, "landlae2b", "compfence4b_LAe", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 2229.576171, -1693.074462, 14.156337, 2.899998, 0.000000, -13.599993, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17634, "landlae2b", "compfence4b_LAe", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(19865, 2413.566894, -1700.861206, 12.358605, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19865, 2413.566894, -1705.872070, 12.358605, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19865, 2413.566894, -1710.882934, 12.358605, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19865, 2413.566894, -1715.934936, 12.358605, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19865, 2412.736816, -1720.778930, 12.358605, 0.000000, 0.000000, -19.200012, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19865, 2409.429443, -1723.150634, 12.358605, 0.000000, 0.000000, 89.899993, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1505, 2401.753173, -1714.533203, 13.125427, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3497, 2390.037109, -1709.452026, 15.599631, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2370.149169, -1703.553222, 13.472466, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2370.149169, -1718.015502, 13.472466, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(850, 2354.421875, -1710.530151, 12.678755, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(851, 2360.418212, -1710.244750, 12.808073, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(853, 2355.295654, -1701.209106, 12.818660, 0.000000, 0.000000, -152.300003, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1358, 2367.845703, -1717.408935, 13.686292, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(823, 2367.210937, -1711.175781, 11.253557, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(823, 2367.210937, -1705.625488, 11.253557, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(823, 2362.850341, -1705.625488, 11.253557, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(823, 2357.350097, -1705.625488, 11.253557, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(823, 2358.790771, -1700.905639, 10.983551, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(823, 2364.196533, -1701.094116, 11.283553, 0.000000, 0.000000, -47.099998, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(823, 2362.808349, -1714.838867, 11.283553, 0.000000, 0.000000, 1.300004, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(823, 2355.979980, -1714.994140, 11.283553, 0.000000, 0.000000, 1.300004, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(823, 2355.880126, -1710.595092, 11.283553, 0.000000, 0.000000, 1.300004, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(823, 2360.749023, -1710.484497, 11.283553, 0.000000, 0.000000, 1.300004, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(16101, 2361.639892, -1723.099609, 14.609418, -2.600003, 150.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(16101, 2354.769042, -1723.111083, 14.637683, -2.600003, 150.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(16101, 2352.736328, -1717.873413, 14.805935, -2.600003, 150.000000, 6.899991, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(16101, 2352.817138, -1703.726562, 14.607375, -2.600003, 150.000000, 6.899991, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(17969, 2293.796875, -1699.687622, 14.590162, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1528, 2293.756347, -1707.087768, 14.444473, 11.399997, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1412, 2296.377929, -1722.298461, 13.701073, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1532, 2261.240234, -1722.301147, 12.526873, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1280, 2280.236328, -1722.011108, 12.906882, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1280, 2266.270996, -1722.011108, 12.906882, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1280, 2273.584716, -1722.011108, 12.906882, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1300, 2269.715332, -1725.921752, 12.926872, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1300, 2291.495849, -1725.921752, 12.896870, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2242.268066, -1722.341186, 13.756875, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1216, 2228.361816, -1715.137084, 13.141293, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1366, 2255.374267, -1726.124267, 13.112811, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1366, 2309.258300, -1726.124267, 13.112811, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1366, 2357.911376, -1726.124267, 13.112811, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1366, 2408.322509, -1726.124267, 13.112811, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19869, 2228.920166, -1742.320068, 12.519718, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19869, 2234.223144, -1742.320068, 12.519718, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19869, 2239.473632, -1742.320068, 12.519718, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19869, 2246.375976, -1742.320068, 12.519718, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19869, 2251.676513, -1742.320068, 12.519718, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19869, 2256.968994, -1742.320068, 12.519718, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19869, 2262.270019, -1742.320068, 12.519718, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19869, 2268.932617, -1742.320068, 12.519718, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19869, 2274.253906, -1742.320068, 12.519718, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19869, 2279.596191, -1742.320068, 12.519718, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19869, 2284.876708, -1742.320068, 12.519718, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19869, 2291.677978, -1742.320068, 12.519718, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19869, 2296.948974, -1742.320068, 12.519718, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2207.001464, -1749.459716, 13.624320, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2207.001464, -1759.809814, 13.624320, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2207.001464, -1770.168945, 13.624320, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2207.001464, -1780.529785, 13.624320, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2207.001464, -1790.899047, 13.624320, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2207.001464, -1801.269653, 13.624320, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2207.001464, -1811.650390, 13.624320, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2207.001464, -1822.019531, 13.624320, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2207.001464, -1832.410034, 13.624320, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2207.021484, -1715.190063, 13.624320, 0.000000, 0.000000, 87.300041, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2207.671386, -1704.853271, 13.624320, 0.000000, 0.000000, 85.500061, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2208.793701, -1694.557617, 13.624320, 0.000000, -0.800000, 82.100097, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2210.357666, -1684.301025, 13.769246, 0.000000, -0.800000, 80.500122, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2212.427978, -1674.183227, 14.283691, 0.000000, -1.899999, 76.300155, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2214.878173, -1664.134399, 14.626843, 0.000000, -1.899999, 76.300155, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2203.217773, -1661.294677, 14.626843, 0.000000, -1.899999, 75.200172, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2200.574951, -1671.305175, 14.283347, 0.000000, -1.899999, 75.200172, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2198.286621, -1681.403320, 13.939195, 0.000000, -1.899999, 79.200141, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2196.726074, -1691.618164, 13.595714, 0.000000, -1.899999, 83.400115, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2195.714111, -1701.931762, 13.531872, 0.000000, -0.599999, 85.300102, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2195.043701, -1712.264282, 13.423389, 0.000000, -0.599999, 87.200088, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1462, 2230.345947, -1687.310302, 13.081210, 0.000000, 0.000000, -106.299987, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8614, 2246.880859, -1691.847534, 15.129590, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19860, 2250.493408, -1692.381469, 17.633113, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 

	// northern hills
	tmpobjid = CreateDynamicObject(2774, 2335.994384, -681.079040, 110.587348, 0.000000, 0.000000, 28.899999, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 982, "bar_chainlink", "awirex2", 0x00000000);
	tmpobjid = CreateDynamicObject(18271, 2416.989257, -890.874877, 119.490005, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18271, 2425.619384, -876.765014, 119.490005, 0.000000, 0.000000, -119.899978, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18270, 2458.458740, -840.605346, 112.500961, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18270, 2420.869873, -842.666137, 117.720794, 0.000000, 0.000000, -36.599994, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18271, 2482.959228, -862.031494, 117.016067, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18271, 2482.800048, -861.940307, 115.911109, 9.399997, 0.000000, 60.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18271, 2486.498291, -860.513305, 114.467735, 3.799999, -3.700000, 109.999977, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2427.891845, -895.286560, 100.341857, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2415.831542, -895.286560, 100.341857, 0.000000, 8.399998, -59.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2422.363037, -882.620056, 101.460845, 0.000000, 8.399998, -59.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2438.891357, -880.075988, 100.542007, 0.000000, 11.799996, -15.199996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2453.352050, -884.005004, 99.209617, 0.000000, 11.799996, -15.199996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2470.421386, -884.025207, 96.044441, 0.000000, 11.799996, 50.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2465.495849, -890.087219, 97.676338, 20.100000, 11.799996, 50.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2489.212890, -860.841735, 94.850883, 12.799996, -2.400003, 50.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2489.610839, -875.292175, 94.292114, 12.799996, -2.400003, 50.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18273, 2336.662841, -803.289855, 148.541992, 7.100000, 0.000000, 22.200000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18273, 2336.662841, -803.176513, 147.770309, 7.100000, 4.400000, -32.200004, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18273, 2255.358398, -812.950561, 139.874343, 7.100000, 0.899999, -93.100021, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18273, 2272.936035, -905.010437, 112.183372, -18.100000, 2.400001, -170.400009, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18273, 2299.236328, -900.913208, 113.243766, -18.100000, 2.400001, -170.400009, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18273, 2341.394531, -894.346252, 114.943374, -18.100000, 2.400001, 169.399963, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18273, 2418.837890, -777.935913, 135.218505, 11.699999, -5.299999, 117.799987, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18272, 2462.655761, -698.703918, 130.586288, 0.000000, -12.599993, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18272, 2462.655761, -698.703918, 130.586288, 0.000000, -12.599993, -34.500019, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18272, 2464.486328, -697.405944, 130.043243, 0.000000, -12.599993, -144.700012, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(896, 2344.369140, -654.747253, 132.554367, 106.699996, -28.400003, -4.800000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2347.657226, -644.916564, 129.394729, 26.300014, 13.900001, -0.299998, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2355.398437, -643.390991, 123.288627, -16.299985, 0.900004, -0.299998, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2342.686035, -646.417968, 130.882949, 26.300014, -57.500007, -0.299998, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2347.491699, -646.621032, 132.660278, -1.099984, -4.300014, -21.199996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2348.648437, -654.281188, 133.078796, -1.099984, -4.300014, -21.199996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2351.233154, -651.228332, 133.104446, -1.099984, 11.499983, -47.300003, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2356.264404, -654.722900, 130.506500, -7.399982, 39.899978, -47.300003, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2352.667968, -658.926574, 129.301773, -7.399982, 39.899978, -114.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(897, 2357.122558, -655.660583, 127.230438, 0.000000, 0.000000, 44.100002, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(897, 2360.765380, -651.372436, 127.170349, 3.600011, 5.400000, 102.400024, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2352.084472, -649.535339, 122.429008, 0.899990, 0.500000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2352.070556, -656.120483, 120.234992, 0.899990, 0.500000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2352.058349, -662.128112, 118.270080, 0.899990, 0.500000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2352.045166, -667.838806, 116.439941, 0.899990, 0.500000, -23.500013, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2340.520751, -666.623046, 116.381591, 0.899990, 0.500000, -23.500013, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2341.276367, -673.312194, 113.970031, -17.900009, 0.500000, -23.500013, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2348.590332, -673.131286, 114.133605, -17.900009, 0.500000, -23.500013, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2346.979248, -676.805053, 114.210159, -17.900009, -0.499998, -32.800010, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2343.525390, -682.190551, 114.153808, -17.900009, -0.499998, -32.800010, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2339.505859, -682.595642, 114.166717, -19.200014, -0.499998, -84.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2355.054443, -669.210998, 121.125572, -7.399982, 39.899978, -114.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2352.981201, -680.194335, 115.358688, -7.399982, 39.899978, -114.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2348.395507, -685.411193, 118.061073, -20.299982, 8.399971, -114.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2340.926513, -689.345825, 118.749893, -20.299982, 8.399971, 171.100021, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2332.927734, -685.060974, 120.121856, -10.099983, -3.800024, 90.900024, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2331.382080, -676.133605, 119.681709, -10.099983, -3.800024, 44.200046, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2334.049316, -666.254943, 120.882453, 7.600016, -3.800024, 44.200046, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2340.999755, -659.650146, 121.702384, 7.600016, -3.800024, 44.200046, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2342.247070, -659.573791, 126.058387, 20.900014, -3.800024, 44.200046, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2348.869384, -667.352416, 128.675720, -18.699989, 150.499954, 83.900062, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2352.967773, -672.811340, 125.737754, -18.699989, 150.499954, 83.900062, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2344.970947, -681.574279, 126.143234, -18.699989, 164.599945, 83.900062, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2336.752929, -681.315307, 125.729087, -18.699989, 164.599945, 83.900062, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2337.735595, -671.436279, 125.941368, -18.699989, 164.599945, 83.900062, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2343.426757, -671.920959, 127.406486, -18.699989, 164.599945, 83.900062, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2357.440673, -662.181396, 125.094825, 11.900017, 39.899978, -114.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3499, 2338.755615, -684.656372, 116.976455, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3499, 2336.615234, -672.945983, 117.026458, -2.999999, 1.700000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3499, 2349.383300, -673.383178, 115.917175, 7.199997, 1.700000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3499, 2349.720947, -665.125610, 119.884773, 7.199997, 1.700000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3260, 2353.316162, -649.564086, 126.603675, 117.200065, -10.800009, 18.000003, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2906, 2336.456542, -681.226379, 118.296157, 0.000000, 0.000000, -134.100021, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2680, 2336.574707, -680.644470, 118.870346, 0.000000, 30.100002, -40.200012, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2843, 2335.316406, -679.985656, 118.209693, -2.400002, 0.399998, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1442, 2340.296630, -677.648498, 118.706451, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18693, 2340.252441, -677.645935, 116.994079, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3260, 2357.574218, -647.584106, 127.951065, 0.000000, 0.000000, -48.299983, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3260, 2356.270996, -646.120605, 127.951065, 0.000000, 0.000000, -48.299983, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3260, 2354.953125, -644.642089, 127.951065, 0.000000, 0.000000, -48.299983, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3264, 2356.352783, -641.613952, 127.038223, 0.000000, -13.999995, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2367.914062, -657.490173, 128.761520, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2367.914062, -651.980163, 128.041549, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2362.894531, -637.819885, 128.891571, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2368.405273, -637.819885, 128.171585, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2357.795410, -637.819885, 129.731567, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2367.914062, -645.769897, 128.041549, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2367.914062, -641.739868, 128.041549, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2361.182373, -642.970214, 128.041549, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2353.512207, -638.220336, 129.941528, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(698, 2352.964599, -723.885925, 136.766738, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(698, 2334.554199, -711.285888, 135.936767, 0.000000, 0.000000, -36.799995, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(698, 2308.851806, -722.405029, 134.296813, 0.000000, 0.000000, -65.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(698, 2345.237792, -803.747619, 132.666839, 0.000000, 0.000000, -65.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(698, 2320.336669, -814.887329, 130.996948, 0.000000, 0.000000, -115.399978, -1, -1, -1, 300.00, 300.00); 

	// fix of northern hills + cabin
	tmpobjid = CreateDynamicObject(2774, 2335.994384, -681.079040, 110.587348, 0.000000, 0.000000, 28.899999, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 982, "bar_chainlink", "awirex2", 0x00000000);
	tmpobjid = CreateDynamicObject(2096, 2284.708251, -845.039794, 123.315017, 0.000000, 0.000000, 50.599998, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17005, "farmhouse", "sjmbigold2", 0x00000000);
	tmpobjid = CreateDynamicObject(3265, 2291.913818, -845.997131, 121.992218, 0.000000, 0.000000, 19.599988, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF333333);
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF333333);
	SetDynamicObjectMaterial(tmpobjid, 2, -1, "none", "none", 0xFF333333);
	tmpobjid = CreateDynamicObject(19339, 2279.295166, -852.071838, 120.819824, 12.600001, -3.399999, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 5462, "glenpark6_lae", "dirty256", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 5462, "glenpark6_lae", "dirty256", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(18271, 2416.989257, -890.874877, 119.490005, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18271, 2425.619384, -876.765014, 119.490005, 0.000000, 0.000000, -119.899978, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18270, 2458.458740, -840.605346, 112.500961, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18270, 2420.869873, -842.666137, 117.720794, 0.000000, 0.000000, -36.599994, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18271, 2482.959228, -862.031494, 117.016067, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18271, 2482.800048, -861.940307, 115.911109, 9.399997, 0.000000, 60.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18271, 2486.498291, -860.513305, 114.467735, 3.799999, -3.700000, 109.999977, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2427.891845, -895.286560, 100.341857, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2415.831542, -895.286560, 100.341857, 0.000000, 8.399998, -59.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2422.363037, -882.620056, 101.460845, 0.000000, 8.399998, -59.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2438.891357, -880.075988, 100.542007, 0.000000, 11.799996, -15.199996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2453.352050, -884.005004, 99.209617, 0.000000, 11.799996, -15.199996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2470.421386, -884.025207, 96.044441, 0.000000, 11.799996, 50.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2465.495849, -890.087219, 97.676338, 20.100000, 11.799996, 50.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2489.212890, -860.841735, 94.850883, 12.799996, -2.400003, 50.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(683, 2489.610839, -875.292175, 94.292114, 12.799996, -2.400003, 50.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18273, 2336.662841, -803.289855, 148.541992, 7.100000, 0.000000, 22.200000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18273, 2336.662841, -803.176513, 147.770309, 7.100000, 4.400000, -32.200004, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18273, 2255.358398, -812.950561, 139.874343, 7.100000, 0.899999, -93.100021, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18273, 2272.936035, -905.010437, 112.183372, -18.100000, 2.400001, -170.400009, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18273, 2299.236328, -900.913208, 113.243766, -18.100000, 2.400001, -170.400009, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18273, 2341.394531, -894.346252, 114.943374, -18.100000, 2.400001, 169.399963, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18273, 2418.837890, -777.935913, 135.218505, 11.699999, -5.299999, 117.799987, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18272, 2462.655761, -698.703918, 130.586288, 0.000000, -12.599993, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18272, 2462.655761, -698.703918, 130.586288, 0.000000, -12.599993, -34.500019, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18272, 2464.486328, -697.405944, 130.043243, 0.000000, -12.599993, -144.700012, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(896, 2344.369140, -654.747253, 132.554367, 106.699996, -28.400003, -4.800000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2347.657226, -644.916564, 129.394729, 26.300014, 13.900001, -0.299998, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2355.398437, -643.390991, 123.288627, -16.299985, 0.900004, -0.299998, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2342.686035, -646.417968, 130.882949, 26.300014, -57.500007, -0.299998, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2347.491699, -646.621032, 132.660278, -1.099984, -4.300014, -21.199996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2348.648437, -654.281188, 133.078796, -1.099984, -4.300014, -21.199996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2351.233154, -651.228332, 133.104446, -1.099984, 11.499983, -47.300003, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2356.264404, -654.722900, 130.506500, -7.399982, 39.899978, -47.300003, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2352.667968, -658.926574, 129.301773, -7.399982, 39.899978, -114.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(897, 2357.122558, -655.660583, 127.230438, 0.000000, 0.000000, 44.100002, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(897, 2360.765380, -651.372436, 127.170349, 3.600011, 5.400000, 102.400024, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2352.084472, -649.535339, 122.429008, 0.899990, 0.500000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2352.070556, -656.120483, 120.234992, 0.899990, 0.500000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2352.058349, -662.128112, 118.270080, 0.899990, 0.500000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2352.045166, -667.838806, 116.439941, 0.899990, 0.500000, -23.500013, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2340.520751, -666.623046, 116.381591, 0.899990, 0.500000, -23.500013, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2341.276367, -673.312194, 113.970031, -17.900009, 0.500000, -23.500013, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2348.590332, -673.131286, 114.133605, -17.900009, 0.500000, -23.500013, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2346.979248, -676.805053, 114.210159, -17.900009, -0.499998, -32.800010, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2343.525390, -682.190551, 114.153808, -17.900009, -0.499998, -32.800010, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2339.505859, -682.595642, 114.166717, -19.200014, -0.499998, -84.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2355.054443, -669.210998, 121.125572, -7.399982, 39.899978, -114.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2352.981201, -680.194335, 115.358688, -7.399982, 39.899978, -114.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2348.395507, -685.411193, 118.061073, -20.299982, 8.399971, -114.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2340.926513, -689.345825, 118.749893, -20.299982, 8.399971, 171.100021, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2332.927734, -685.060974, 120.121856, -10.099983, -3.800024, 90.900024, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2331.382080, -676.133605, 119.681709, -10.099983, -3.800024, 44.200046, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2334.049316, -666.254943, 120.882453, 7.600016, -3.800024, 44.200046, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2340.999755, -659.650146, 121.702384, 7.600016, -3.800024, 44.200046, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2342.247070, -659.573791, 126.058387, 20.900014, -3.800024, 44.200046, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2348.869384, -667.352416, 128.675720, -18.699989, 150.499954, 83.900062, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2352.967773, -672.811340, 125.737754, -18.699989, 150.499954, 83.900062, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2344.970947, -681.574279, 126.143234, -18.699989, 164.599945, 83.900062, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2336.752929, -681.315307, 125.729087, -18.699989, 164.599945, 83.900062, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2337.735595, -671.436279, 125.941368, -18.699989, 164.599945, 83.900062, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2343.426757, -671.920959, 127.406486, -18.699989, 164.599945, 83.900062, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(901, 2357.440673, -662.181396, 125.094825, 11.900017, 39.899978, -114.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3499, 2338.755615, -684.656372, 116.976455, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3499, 2336.615234, -672.945983, 117.026458, -2.999999, 1.700000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3499, 2349.383300, -673.383178, 115.917175, 7.199997, 1.700000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3499, 2349.720947, -665.125610, 119.884773, 7.199997, 1.700000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3260, 2353.316162, -649.564086, 126.603675, 117.200065, -10.800009, 18.000003, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2906, 2336.456542, -681.226379, 118.296157, 0.000000, 0.000000, -134.100021, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2680, 2336.574707, -680.644470, 118.870346, 0.000000, 30.100002, -40.200012, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2843, 2335.316406, -679.985656, 118.209693, -2.400002, 0.399998, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1442, 2340.296630, -677.648498, 118.706451, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18693, 2340.252441, -677.645935, 116.994079, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3260, 2357.574218, -647.584106, 127.951065, 0.000000, 0.000000, -48.299983, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3260, 2356.270996, -646.120605, 127.951065, 0.000000, 0.000000, -48.299983, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3260, 2354.953125, -644.642089, 127.951065, 0.000000, 0.000000, -48.299983, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3264, 2356.352783, -641.613952, 127.038223, 0.000000, -13.999995, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2367.914062, -657.490173, 128.761520, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2367.914062, -651.980163, 128.041549, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2362.894531, -637.819885, 128.891571, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2368.405273, -637.819885, 128.171585, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2357.795410, -637.819885, 129.731567, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2367.914062, -645.769897, 128.041549, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2367.914062, -641.739868, 128.041549, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2361.182373, -642.970214, 128.041549, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(800, 2353.512207, -638.220336, 129.941528, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(698, 2352.964599, -723.885925, 136.766738, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(698, 2334.554199, -711.285888, 135.936767, 0.000000, 0.000000, -36.799995, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(698, 2308.851806, -722.405029, 134.296813, 0.000000, 0.000000, -65.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(698, 2345.237792, -803.747619, 132.666839, 0.000000, 0.000000, -65.900001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(698, 2320.336669, -814.887329, 130.996948, 0.000000, 0.000000, -115.399978, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(12937, 2290.182373, -841.080444, 125.727333, 4.999997, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(13360, 2287.696044, -844.111877, 124.495155, 4.799997, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18725, 2284.320800, -842.116882, 125.972953, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2295.733886, -857.217956, 119.897750, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2288.224121, -854.477844, 119.897750, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2289.943847, -859.497985, 118.267761, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2282.514648, -857.358093, 118.267761, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2279.254394, -855.177978, 118.267761, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2277.034179, -849.077880, 120.897743, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2275.423583, -842.837768, 121.827743, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2276.273925, -837.317443, 122.627731, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2275.493652, -828.267272, 123.687721, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2273.473388, -832.727172, 123.287719, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2285.963623, -832.727172, 123.137725, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2282.853271, -827.287353, 123.137725, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2296.314453, -826.867370, 123.067710, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2298.435058, -833.867370, 123.417732, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(687, 2292.543701, -829.237365, 123.227729, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(813, 2299.447265, -833.916198, 124.780395, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(813, 2299.537353, -848.476257, 122.880409, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(813, 2299.537353, -850.286315, 122.350410, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19626, 2280.178710, -852.098266, 121.842086, -4.299999, 0.000000, 31.399997, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3930, 2278.534423, -852.722656, 120.567794, 0.000000, 0.000000, -17.100000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3930, 2279.839355, -852.695373, 120.567794, 0.000000, 0.000000, -17.100000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3930, 2280.215087, -851.471923, 120.957832, 0.000000, 0.000000, -17.100000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3930, 2277.965332, -851.550415, 120.957832, 0.000000, 0.000000, 2.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3930, 2278.365722, -851.536376, 120.787826, 0.000000, 0.000000, 2.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3930, 2278.806152, -851.520935, 120.787826, 0.000000, 0.000000, 149.199966, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3930, 2279.236572, -851.505920, 120.787826, 0.000000, 0.000000, 2.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3930, 2279.568603, -851.554443, 120.867835, 0.000000, 0.000000, 2.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3930, 2279.878906, -851.543518, 120.867835, 0.000000, 0.000000, -60.499984, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3930, 2278.956787, -852.602355, 120.587875, 0.000000, 0.000000, -0.500031, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3930, 2279.467285, -852.606201, 120.587875, 0.000000, 0.000000, -0.500031, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3930, 2280.418212, -852.614318, 120.687889, 0.000000, 0.000000, -0.500031, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(325, 2278.426513, -852.421691, 121.095375, -78.099975, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 

	// log cabin
	interior = 1;
	tmpobjid = CreateDynamicObject(19447, 1450.068969, 1224.533447, 13.340324, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1407, "break_f_w", "CJ_SLATEDWOOD", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1446.568481, 1224.533447, 13.340324, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1407, "break_f_w", "CJ_SLATEDWOOD", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1451.862792, 1224.531494, 14.306247, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1451.331787, 1224.531494, 16.351110, 0.000000, -59.999992, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17005, "farmhouse", "sjmbigold6", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, 1451.737426, 1226.501586, 14.900325, -0.000007, 0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13363, "cephotoblockcs_t", "sw_wind23", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, 1451.737426, 1222.830932, 14.900325, -0.000007, 0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13363, "cephotoblockcs_t", "sw_wind23", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1447.173095, 1229.362304, 14.306247, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, 1449.025512, 1229.222167, 14.900325, 0.000000, 0.000045, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13363, "cephotoblockcs_t", "sw_wind23", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, 1447.795410, 1229.222167, 14.900325, 0.000000, 0.000045, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13363, "cephotoblockcs_t", "sw_wind23", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, 1447.085449, 1219.830200, 14.900325, 0.000007, -0.000022, 179.999694, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13363, "cephotoblockcs_t", "sw_wind23", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, 1448.315551, 1219.830200, 14.900325, 0.000007, -0.000022, 179.999694, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13363, "cephotoblockcs_t", "sw_wind23", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1447.172241, 1219.700561, 14.306247, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1448.104858, 1219.815429, 15.195540, 12.900007, 90.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6404, "beafron1_law2", "Gen_Scaffold_Wood_Under", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1447.247314, 1219.834472, 15.134055, -4.099986, 90.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6404, "beafron1_law2", "Gen_Scaffold_Wood_Under", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1446.912963, 1219.804443, 14.927032, -62.499965, 90.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6404, "beafron1_law2", "Gen_Scaffold_Wood_Under", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1447.921020, 1219.824462, 14.560610, -0.999954, 90.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6404, "beafron1_law2", "Gen_Scaffold_Wood_Under", 0x00000000);
	tmpobjid = CreateDynamicObject(2147, 1445.191894, 1221.213989, 13.406261, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2246, "plants_office", "cooker3", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1445.296142, 1219.079101, 14.776273, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1443.775390, 1220.589721, 14.776268, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1444.581909, 1218.362182, 14.976260, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1443.067626, 1220.471923, 13.340324, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1407, "break_f_w", "CJ_SLATEDWOOD", 0x00000000);
	tmpobjid = CreateDynamicObject(19585, 1450.542358, 1220.398559, 14.596276, -0.000007, 0.000001, -73.499977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
	tmpobjid = CreateDynamicObject(2747, 1448.250488, 1222.685791, 13.736265, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_tabletop_wood", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14651, "ab_trukstpd", "Bow_bar_tabletop_wood", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(2747, 1448.250488, 1222.685791, 13.746264, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14754, "sfhsb3", "ah_wpaper6", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(11724, 1451.050415, 1228.556030, 13.966261, -0.000004, 0.000004, -46.200000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "wood01", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 3899, "hospital2", "burnt_faggots64", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1451.220336, 1228.771240, 14.696272, 0.000004, 0.000004, 43.799949, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(2267, 1451.163818, 1228.656372, 15.266258, -0.000004, 0.000004, -45.899944, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19173, "samppictures", "samppicture3", 0x00000000);
	tmpobjid = CreateDynamicObject(1764, 1449.607299, 1225.478393, 13.396261, 0.000004, -0.000004, 133.999938, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14760, "sfhosemed2", "ah_wpaper5", 0x00000000);
	tmpobjid = CreateDynamicObject(1735, 1448.504150, 1228.586181, 13.426260, 0.000003, 0.000006, 37.200008, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14760, "sfhosemed2", "ah_wpaper5", 0x00000000);
	tmpobjid = CreateDynamicObject(2833, 1449.179199, 1227.442871, 13.426262, -0.000004, 0.000004, -48.299991, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14754, "sfhsb3", "ah_wpaper6", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1446.323120, 1229.932861, 14.916252, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1443.067626, 1230.100830, 13.340324, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10399, "countryclbgnd_sfs", "ws_tantiles1btm", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1446.338378, 1228.409057, 14.856270, 0.000014, 0.000000, 89.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1447.061889, 1229.926513, 14.726273, 0.000007, 0.000014, -0.000068, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(19387, 1443.217285, 1225.202880, 15.006260, 0.000014, 0.000000, 89.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1445.618286, 1225.198730, 14.956274, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19387, 1441.605712, 1223.851684, 15.046258, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1443.054687, 1223.090576, 14.976275, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1444.892578, 1230.083007, 14.986262, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5444, "chicano10_lae", "crakwall1_LAe2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1440.072875, 1228.081787, 14.306247, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5444, "chicano10_lae", "crakwall1_LAe2", 0x00000000);
	tmpobjid = CreateDynamicObject(19387, 1443.207275, 1225.373046, 15.026259, 0.000014, 0.000000, 89.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5444, "chicano10_lae", "crakwall1_LAe2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1441.541503, 1230.083007, 14.966260, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5444, "chicano10_lae", "crakwall1_LAe2", 0x00000000);
	tmpobjid = CreateDynamicObject(2097, 1442.794189, 1227.526611, 13.706260, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14668, "711c", "cj_white_wall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19329, 1441.643798, 1226.567138, 15.110315, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1439.566894, 1227.815917, 13.340324, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1407, "break_f_w", "CJ_SLATEDWOOD", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1436.066894, 1227.055175, 13.340324, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1407, "break_f_w", "CJ_SLATEDWOOD", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1437.602539, 1227.053344, 14.306247, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1436.601684, 1227.713500, 14.306247, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1441.252563, 1230.073242, 14.976259, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1441.432739, 1230.073242, 14.956257, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1442.257690, 1222.932739, 14.970341, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1436.817504, 1222.932739, 14.310331, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1436.601684, 1221.131835, 14.306247, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1438.157592, 1221.413208, 14.310331, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1440.978881, 1221.413208, 14.970339, 0.000000, 360.000000, 179.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1440.567016, 1221.401733, 11.676263, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1436.845336, 1218.194946, 13.340331, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1407, "break_f_w", "CJ_SLATEDWOOD", 0x00000000);
	tmpobjid = CreateDynamicObject(2561, 1441.560302, 1223.299072, 14.166268, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 2047, "cj_ammo_posters", "cj_flag2", 0x00000000);
	tmpobjid = CreateDynamicObject(2561, 1437.609130, 1222.559082, 14.176267, 0.000000, 0.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 2047, "cj_ammo_posters", "cj_flag2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1436.601684, 1222.843505, 17.256252, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObject(2833, 1439.032592, 1222.365844, 13.426260, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	tmpobjid = CreateDynamicObject(2833, 1439.042480, 1222.275878, 13.426260, 180.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1442.235229, 1218.194946, 13.340331, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1407, "break_f_w", "CJ_SLATEDWOOD", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1438.515991, 1221.401733, 11.676263, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1446.611938, 1227.325683, 14.346261, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "wood01", 0x00000000);
	tmpobjid = CreateDynamicObject(19938, 1446.608398, 1226.104003, 14.346265, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "wood01", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1440.305175, 1224.723999, 9.870313, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5986, "chateau_lawn", "backstagefloor1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1443.795410, 1224.723999, 9.870313, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5986, "chateau_lawn", "backstagefloor1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1447.296020, 1224.723999, 9.870313, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5986, "chateau_lawn", "backstagefloor1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1438.513427, 1224.732788, 10.806247, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3988, "civic06_lan", "Bow_stained_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1438.896362, 1221.161499, 11.676263, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1438.904052, 1227.814697, 12.630314, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1407, "break_f_w", "CJ_SLATEDWOOD", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1439.535156, 1223.009765, 13.206257, 0.000000, 90.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1443.344848, 1221.124145, 10.816248, 0.000000, 0.000007, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3988, "civic06_lan", "Bow_stained_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1442.405761, 1226.003295, 12.630314, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1407, "break_f_w", "CJ_SLATEDWOOD", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1445.904907, 1226.003295, 12.630314, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1407, "break_f_w", "CJ_SLATEDWOOD", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1439.535156, 1223.009765, 12.766253, 0.000000, 90.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(2833, 1439.032592, 1221.255737, 13.426260, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	tmpobjid = CreateDynamicObject(2833, 1439.042480, 1223.376586, 13.426260, 180.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1446.873657, 1224.732788, 10.816247, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3988, "civic06_lan", "Bow_stained_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1443.344848, 1229.272338, 10.806247, 0.000000, 0.000007, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3988, "civic06_lan", "Bow_stained_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1447.396118, 1222.149658, 10.876260, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1445.885009, 1220.629516, 10.876260, 0.000007, 0.000000, 179.999969, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1445.880615, 1229.866455, 10.876260, 0.000014, -0.000007, 179.999801, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1447.400756, 1228.355346, 10.876260, -0.000000, -0.000007, -90.000068, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1437.814575, 1228.350830, 10.876260, 0.000007, -0.000015, -90.000160, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(19366, 1439.325683, 1229.870971, 10.876260, -0.000008, -0.000000, -0.000076, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(941, 1444.366333, 1228.854736, 10.276249, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "wood01", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "gun_ceiling2_128", 0x00000000);
	tmpobjid = CreateDynamicObject(941, 1446.426879, 1226.824340, 10.276249, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "wood01", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "gun_ceiling2_128", 0x00000000);
	tmpobjid = CreateDynamicObject(2002, 1443.253417, 1228.657470, 8.716243, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(2002, 1442.863037, 1228.597412, 8.696243, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(2002, 1443.153320, 1228.207031, 8.696243, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(2002, 1443.683837, 1228.677368, 9.506247, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(2238, 1444.791870, 1228.934448, 11.146249, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6284, "bev_law2", "lasjmposh1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 6284, "bev_law2", "lasjmposh1", 0x00000000);
	tmpobjid = CreateDynamicObject(2726, 1444.792724, 1228.932617, 11.376252, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6284, "bev_law2", "lasjmposh1", 0x00000000);
	tmpobjid = CreateDynamicObject(2750, 1444.705688, 1228.914062, 11.413278, 0.000000, 81.400024, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6284, "bev_law2", "lasjmposh1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 6284, "bev_law2", "lasjmposh1", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1446.641967, 1228.579467, 16.498092, 0.000000, -59.999992, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17005, "farmhouse", "sjmbigold6", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1438.848510, 1226.382568, 16.698163, 0.000000, -59.999992, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17005, "farmhouse", "sjmbigold6", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1447.019165, 1220.673828, 16.602056, 0.000000, -59.999992, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17005, "farmhouse", "sjmbigold6", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1440.192138, 1226.645385, 16.690277, 0.000000, -59.999992, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17005, "farmhouse", "sjmbigold6", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1450.068969, 1224.533447, 16.770338, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1407, "break_f_w", "CJ_SLATEDWOOD", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1446.577392, 1224.533447, 16.770338, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1407, "break_f_w", "CJ_SLATEDWOOD", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1443.076904, 1224.533447, 16.770338, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1407, "break_f_w", "CJ_SLATEDWOOD", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1439.577514, 1224.533447, 16.770338, 0.000000, 90.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1407, "break_f_w", "CJ_SLATEDWOOD", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(12937, 1464.203613, 1224.619262, 16.100311, -0.000007, 0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(13360, 1451.764404, 1224.636840, 14.486268, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19915, 1450.449096, 1220.166748, 13.426261, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11709, 1448.088378, 1220.155273, 13.886264, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2558, 1448.900634, 1220.862548, 12.556254, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14752, 1451.618408, 1222.878906, 14.886265, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14752, 1451.618408, 1226.350219, 14.886265, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2157, 1449.651855, 1220.069458, 13.306260, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2338, 1451.266723, 1220.354858, 13.306260, -0.000007, 0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2334, 1451.252807, 1221.346923, 13.306260, -0.000007, 0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2334, 1446.916748, 1220.360229, 13.306260, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2337, 1445.927856, 1220.351318, 13.296258, 0.000000, -0.000007, 179.999954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11706, 1445.023925, 1222.148925, 13.396260, 0.000007, -0.000001, 111.299972, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18705, 1448.153564, 1218.662719, 13.561427, -59.799995, 0.000014, 0.000012, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2850, 1448.324218, 1220.205688, 13.936265, -0.000003, -0.000004, -141.499954, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19836, 1450.343139, 1220.330688, 14.446270, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1810, 1447.258178, 1222.706298, 13.396261, 0.000004, -0.000004, 131.399948, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1810, 1448.217163, 1223.069091, 13.396261, 0.000000, 0.000007, 7.799938, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1810, 1449.085937, 1223.081298, 13.396261, -0.000000, 0.000007, -7.800059, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1810, 1448.213623, 1222.231811, 13.396261, 0.000000, -0.000007, -178.100006, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11725, 1450.983642, 1228.477294, 13.856270, -0.000004, 0.000004, -45.699985, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18693, 1451.873168, 1229.459106, 12.305096, 0.000004, -38.000011, 48.599990, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1816, 1449.743774, 1228.614379, 13.386260, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19813, 1451.755737, 1221.687988, 14.596260, -0.000007, 0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2713, 1451.386962, 1222.141479, 13.566267, 0.000001, 0.000007, 21.699998, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19825, 1444.708740, 1222.427978, 15.496265, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2828, 1451.075805, 1228.610229, 14.486263, 0.000006, -0.000003, 120.800010, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19622, 1444.780883, 1222.738159, 14.121994, -9.099987, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2528, 1444.302368, 1226.502075, 13.446249, -0.000007, 0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2518, 1442.150268, 1225.954345, 13.496262, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2575, 1437.946655, 1225.136840, 13.786259, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2846, 1439.424560, 1221.750732, 13.446262, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2845, 1439.446899, 1221.738037, 13.426260, 0.000000, 0.000000, 108.200004, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19826, 1446.420532, 1225.277343, 14.996261, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19826, 1444.688964, 1223.007080, 14.996261, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19826, 1441.518432, 1224.727172, 14.996261, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19624, 1438.454833, 1223.238281, 13.876267, 0.000000, 0.000000, 134.900009, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1736, 1439.465332, 1227.304077, 15.406261, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11707, 1443.220703, 1227.963256, 14.546268, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2718, 1451.678955, 1220.689819, 15.466267, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1738, 1437.859619, 1224.090942, 14.066272, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11712, 1446.437988, 1226.957153, 15.326268, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19820, 1446.557861, 1226.296508, 14.376262, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19823, 1446.504760, 1226.563598, 14.346269, 0.000000, 0.000000, -48.500000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19821, 1446.609375, 1228.128784, 14.356266, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2101, 1446.617553, 1227.280761, 14.346266, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19562, 1451.505859, 1220.025878, 14.366274, 0.000000, 0.000000, -23.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2846, 1446.286865, 1220.285156, 13.436262, 0.000000, 0.000000, 67.799972, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2394, 1438.443359, 1221.763427, 14.146264, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2394, 1440.672973, 1221.793457, 14.156263, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1438.642578, 1221.151855, 13.436256, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1440.872314, 1221.151855, 13.436248, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19826, 1444.088378, 1225.467529, 14.996261, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2060, 1439.718505, 1227.295532, 13.966262, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2060, 1439.127929, 1227.295532, 13.966262, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2069, 1447.472900, 1228.847045, 13.456262, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2063, 1438.920776, 1226.901245, 10.866250, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2063, 1440.771362, 1228.882080, 10.866250, 0.000000, 0.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(361, 1444.837036, 1228.917968, 10.743114, 0.000000, -149.500030, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2057, 1441.641357, 1228.884887, 11.826250, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19570, 1445.055664, 1228.887939, 10.746253, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19570, 1445.225830, 1229.048095, 10.746253, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19570, 1445.416015, 1229.048095, 10.746253, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19570, 1445.265869, 1228.876831, 10.746253, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19570, 1445.654174, 1228.876831, 10.746253, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19570, 1445.654174, 1229.117065, 10.746253, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1279, 1446.338623, 1228.041137, 10.726255, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1279, 1446.338623, 1227.490600, 10.726255, 0.000000, 0.000000, 4.399999, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1279, 1446.317871, 1227.759887, 11.026258, 0.000000, 0.000000, 46.999996, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11745, 1446.347778, 1225.666503, 10.106254, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11745, 1446.347778, 1226.337036, 10.916260, 0.000000, 0.000000, 136.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(934, 1443.310913, 1221.368164, 11.176259, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2203, 1446.252685, 1222.750000, 10.096253, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2203, 1446.252685, 1223.560302, 10.096253, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2203, 1446.252685, 1224.350952, 10.096253, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19473, 1446.193603, 1222.759399, 10.206255, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19473, 1446.193603, 1223.569946, 10.206255, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19473, 1446.193603, 1224.360351, 10.206255, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2945, 1446.760742, 1223.473876, 10.596259, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2945, 1445.809814, 1223.473876, 10.596259, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2945, 1447.420410, 1225.134399, 10.596259, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14774, 1446.809814, 1223.106689, 11.866253, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14774, 1446.809814, 1224.307617, 11.866253, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14774, 1446.809814, 1223.106689, 10.996244, -0.000007, -0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14774, 1446.809814, 1224.307617, 10.996244, -0.000007, -0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18735, 1445.947387, 1223.341796, 9.146243, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18702, 1444.792846, 1227.327392, 11.496254, 270.000000, 360.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1620, 1443.579711, 1229.153808, 11.946258, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1442.284667, 1227.236938, 12.866254, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1442.284667, 1224.355224, 12.866254, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(16779, 1448.376342, 1224.280883, 17.046283, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 

	// motel room
	tmpobjid = CreateDynamicObject(18981, -1260.724365, -54.410495, 12.778430, 0.000000, 90.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "cof_wood2", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(19447, -1248.318847, -62.077476, 14.988441, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6293, "lawland2", "asanlithus1", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1253.178833, -66.937446, 14.988441, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6293, "lawland2", "asanlithus1", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, -1248.454467, -64.839431, 15.088434, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14534, "ab_wooziea", "mcstraps_window", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, -1248.454467, -60.719463, 15.088434, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14534, "ab_wooziea", "mcstraps_window", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, -1248.454467, -59.489486, 15.088434, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14534, "ab_wooziea", "mcstraps_window", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1253.178833, -58.907390, 14.988441, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6293, "lawland2", "asanlithus1", 0x00000000);
	tmpobjid = CreateDynamicObject(2576, -1248.386230, -66.389053, 13.278430, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	tmpobjid = CreateDynamicObject(2562, -1251.870361, -66.335144, 13.278430, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	tmpobjid = CreateDynamicObject(2595, -1250.631958, -66.546020, 14.748445, 0.000000, 0.000000, 132.699996, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 14737, "whorewallstuff", "AH_paintbond", 0x00000000);
	tmpobjid = CreateDynamicObject(11720, -1250.364990, -60.374259, 13.258430, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5397, "barrio1_lae", "concretenewgery256", 0xFF333333);
	tmpobjid = CreateDynamicObject(11720, -1253.585205, -60.374259, 13.258430, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5397, "barrio1_lae", "concretenewgery256", 0xFF333333);
	tmpobjid = CreateDynamicObject(2267, -1252.218627, -59.034626, 15.398435, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 14530, "estate2", "Auto_feltzer", 0x00000000);
	tmpobjid = CreateDynamicObject(2306, -1251.994384, -60.492286, 13.278430, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	tmpobjid = CreateDynamicObject(2306, -1255.146362, -60.492286, 13.278430, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, -1255.904052, -66.807708, 14.988435, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6293, "lawland2", "asanlithus1", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, -1257.414916, -65.267669, 14.988435, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6293, "lawland2", "asanlithus1", 0x00000000);
	tmpobjid = CreateDynamicObject(19387, -1256.592773, -63.614185, 14.988435, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6293, "lawland2", "asanlithus1", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1256.598754, -57.207485, 14.988441, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6293, "lawland2", "asanlithus1", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, -1259.064086, -63.677688, 15.008436, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17049, "cuntwf", "sw_walltile", 0x00000000);
	tmpobjid = CreateDynamicObject(2526, -1257.282226, -64.755828, 13.278430, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17049, "cuntwf", "sw_walltile", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, -1258.195678, -61.977699, 15.008436, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17049, "cuntwf", "sw_walltile", 0x00000000);
	tmpobjid = CreateDynamicObject(19369, -1258.155517, -65.237663, 15.008436, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17049, "cuntwf", "sw_walltile", 0x00000000);
	tmpobjid = CreateDynamicObject(19387, -1256.622802, -63.624183, 15.008436, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17049, "cuntwf", "sw_walltile", 0x00000000);
	tmpobjid = CreateDynamicObject(2267, -1256.469726, -60.834609, 15.398435, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 14530, "estate2", "Auto_hustler", 0x00000000);
	tmpobjid = CreateDynamicObject(2267, -1253.388916, -66.814636, 15.398435, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 14530, "estate2", "Auto_windsor", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, -1260.724365, -54.410495, 16.788379, 0.000000, 90.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6293, "lawland2", "asanlithus1", 0xFF999999);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(19858, -1248.395141, -63.504051, 14.488440, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2524, -1258.482421, -64.026962, 13.278430, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2528, -1258.496093, -62.489524, 13.278430, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2069, -1256.135375, -59.392101, 13.338427, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2069, -1248.895141, -59.392101, 13.338427, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19826, -1256.502807, -64.489891, 14.638434, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19826, -1248.412719, -61.719936, 14.638434, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11705, -1254.281738, -66.433235, 14.118437, 0.000000, 0.000000, 150.199981, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1735, -1256.025634, -60.877079, 13.278430, 0.000000, 0.000000, 67.400009, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(16779, -1252.094726, -62.101406, 16.828456, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 

	// 1 story house
	tmpobjid = CreateDynamicObject(18981, -1247.862792, -12.938961, 12.788437, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11631, "mp_ranchcut", "mpCJ_DarkWood", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(19447, -1260.270996, -19.745712, 14.998450, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17934, "coochieghous", "comptwall16", 0x00000000);
	tmpobjid = CreateDynamicObject(2959, -1260.172119, -20.505260, 13.288437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3061, "addoorx", "lasjmdoorgud", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, -1260.151000, -18.052642, 15.138442, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10031, "chinatown2", "ws_trans_window1", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, -1260.151000, -16.832647, 15.138442, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10031, "chinatown2", "ws_trans_window1", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, -1260.151000, -21.362651, 15.138442, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10031, "chinatown2", "ws_trans_window1", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, -1260.151000, -22.592649, 15.138442, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10031, "chinatown2", "ws_trans_window1", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, -1259.404541, -14.871388, 14.998430, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17934, "coochieghous", "comptwall16", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, -1258.673828, -14.151380, 14.998430, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17934, "coochieghous", "comptwall16", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1258.630981, -13.495724, 14.998450, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17934, "coochieghous", "comptwall16", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1256.210571, -25.055688, 14.998450, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17934, "coochieghous", "comptwall16", 0x00000000);
	tmpobjid = CreateDynamicObject(19387, -1253.896118, -14.350800, 14.998443, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17934, "coochieghous", "comptwall16", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1249.161132, -17.015668, 14.998450, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9507, "boxybld2_sfw", "compcouwall1", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, -1253.894897, -11.941370, 14.998430, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17934, "coochieghous", "comptwall16", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, -1253.894897, -16.751371, 14.998430, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17934, "coochieghous", "comptwall16", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1249.161132, -11.115660, 14.998450, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9507, "boxybld2_sfw", "compcouwall1", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1249.951904, -12.575683, 14.998450, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9507, "boxybld2_sfw", "compcouwall1", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1249.161132, -17.455678, 14.998450, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17934, "coochieghous", "comptwall16", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, -1247.862792, -12.938961, 17.178442, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17079, "cuntwland", "ws_tunnelwall2", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(19433, -1255.153442, -24.521381, 14.998430, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17934, "coochieghous", "comptwall16", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1251.261474, -22.335710, 14.998450, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17934, "coochieghous", "comptwall16", 0x00000000);
	tmpobjid = CreateDynamicObject(2648, -1256.466308, -14.186765, 13.978444, 0.000000, 0.000000, -14.100000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 8201, "vgs_stadium", "dirtringtex2_256", 0x00000000);
	tmpobjid = CreateDynamicObject(1740, -1253.407958, -12.740170, 13.288437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "cof_wood2", 0x00000000);
	tmpobjid = CreateDynamicObject(1740, -1250.627319, -12.740170, 13.288437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "cof_wood2", 0x00000000);
	tmpobjid = CreateDynamicObject(911, -1253.038940, -16.346853, 13.818444, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "cof_wood2", 0xFF999999);
	tmpobjid = CreateDynamicObject(2307, -1250.636108, -15.306693, 13.208436, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "cof_wood2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, -1259.900024, -23.805660, 14.998450, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17934, "coochieghous", "comptwall16", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, -1250.119995, -13.102630, 15.138442, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10031, "chinatown2", "ws_trans_window1", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, -1251.390991, -22.082651, 15.138442, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10031, "chinatown2", "ws_trans_window1", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, -1251.390991, -20.852647, 15.138442, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10031, "chinatown2", "ws_trans_window1", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, -1250.119995, -14.332636, 15.138442, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10031, "chinatown2", "ws_trans_window1", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(1766, -1259.678222, -17.373752, 13.288437, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1766, -1256.171386, -17.928106, 13.288437, 0.000000, 0.000000, -170.399993, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14384, -1254.820312, -21.361240, 14.768440, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2833, -1257.583740, -16.976251, 13.288437, 0.000000, 0.000000, 34.799995, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2315, -1258.031616, -14.139388, 13.198436, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2111, -1255.083496, -21.519859, 13.668437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2079, -1254.464965, -22.237812, 13.908445, 0.000000, 0.000000, -52.899990, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2079, -1254.493041, -20.880081, 13.908445, 0.000000, 0.000000, 37.800010, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19807, -1258.248168, -13.921647, 13.758440, 0.000000, 0.000000, 29.500000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19813, -1256.771606, -13.591887, 13.758432, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19825, -1256.476074, -13.622618, 15.808440, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2102, -1255.191894, -21.784276, 14.058441, 0.000000, 0.000000, -147.299987, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2718, -1251.456054, -23.767292, 15.968430, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1738, -1256.085449, -23.568748, 13.888443, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19622, -1260.038696, -21.972415, 13.959850, -11.499999, 0.000000, 88.400016, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11718, -1253.751220, -18.237861, 14.398444, 0.000000, 1.500000, -40.000003, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2302, -1252.540039, -14.694747, 13.288437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2026, -1257.147460, -19.275032, 16.948453, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	// jefferson addons
	tmpobjid = CreateDynamicObject(18766, 2292.981445, -1270.608764, 23.049388, 90.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 2292.981445, -1260.609375, 23.049388, 90.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2292.189208, -1255.344360, 22.498542, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2292.189208, -1276.087158, 22.498542, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 2176.911621, -1333.635986, 27.044401, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12962, "sw_apartflat", "sw_genstore2", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 2176.911621, -1325.173950, 27.044401, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7526, "vgnlowbild", "gaygordos_128", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 2176.911621, -1316.822509, 27.044401, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12946, "ce_bankalley1", "sw_dicksounds", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 2199.584716, -1310.802124, 27.044401, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12822, "ce_bankalley3", "sw_Fleishberg01", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 2182.833740, -1310.842041, 27.044401, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12846, "coe_offtrackshop", "otb_bigsignf", 0x00000000);
	tmpobjid = CreateDynamicObject(18763, 2293.976318, -1256.759887, 20.898216, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(18763, 2293.966308, -1256.389526, 20.758213, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 2280.979736, -1260.822753, 23.049388, 89.999992, 334.471160, -64.471252, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 2280.979736, -1270.822265, 23.049388, 89.999992, 334.471160, -64.471252, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2281.771972, -1276.087402, 22.498542, 0.000007, -0.000007, 179.999832, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2281.771972, -1255.344482, 22.498542, 0.000007, -0.000007, 179.999832, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(18763, 2279.984863, -1274.671875, 20.898216, 0.000007, -0.000007, 179.999832, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(18763, 2279.994873, -1275.041992, 20.758213, 0.000007, -0.000007, 179.999832, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(2736, 2413.781494, -1434.119018, 29.352945, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3975, "lanbloke", "ottos_SFE", 0x00000000);
	tmpobjid = CreateDynamicObject(2736, 2413.781494, -1434.119018, 29.352945, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3975, "lanbloke", "ottos_SFE", 0x00000000);
	tmpobjid = CreateDynamicObject(10575, 2415.039306, -1426.021972, 24.910602, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11092, "burgalrystore_sfse", "Bow_LoadingBayDoor", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2415.168945, -1423.566162, 27.385473, 89.999992, -89.999992, -90.000022, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12805, "ce_loadbay", "sw_corrug", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2415.168945, -1428.566528, 27.385473, 89.999992, -89.999992, -90.000022, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12805, "ce_loadbay", "sw_corrug", 0x00000000);
	tmpobjid = CreateDynamicObject(2952, 2415.030029, -1418.401611, 22.954048, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12805, "ce_loadbay", "sw_waredoor", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2401.260009, -1407.238525, 22.706426, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2401.260009, -1412.499267, 22.706426, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2401.340087, -1417.758666, 22.706426, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2401.390136, -1423.027954, 22.706426, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2401.390136, -1428.298339, 22.706426, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2401.430175, -1431.589965, 22.706426, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2409.412841, -1434.149902, 22.706426, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2414.683837, -1434.099853, 22.706426, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2401.219970, -1396.977661, 22.706426, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2404.350830, -1393.977294, 22.706426, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2409.622558, -1393.977294, 22.706426, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2412.604003, -1393.977294, 22.706426, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2415.214599, -1397.137573, 22.706426, 0.000000, 0.000000, 810.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2415.214599, -1402.396972, 22.706426, 0.000000, 0.000000, 810.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2415.214599, -1407.707397, 22.706426, 0.000000, 0.000000, 810.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2415.214599, -1409.237915, 22.706426, 0.000000, 0.000000, 810.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, 2233.578125, -1158.152099, 27.621429, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18232, "cw_truckstopcs_t", "dinerwel", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1166.779785, 25.894113, 0.000000, -1.200000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1177.147949, 25.676927, 0.000000, -1.200000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1187.498291, 25.390356, 0.000000, -1.999999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1197.839233, 24.929534, 0.000000, -3.099998, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1208.192993, 24.348768, 0.000000, -3.099998, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1218.549560, 23.837926, 0.000000, -2.500000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1228.972656, 23.565071, 0.000000, -0.500000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1239.342163, 23.474575, 0.000000, -0.500000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1249.702148, 23.384153, 0.000000, -0.500000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1280.812500, 23.162654, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1291.173706, 23.180717, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1301.534179, 23.198797, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1311.904907, 23.216884, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1322.275268, 23.234981, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1332.645629, 23.253078, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1343.016357, 23.271175, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1353.375976, 23.289260, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2281.443359, -1363.746215, 23.307359, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1363.746215, 23.507364, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1353.377441, 23.489248, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1343.008911, 23.471118, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1332.629028, 23.452980, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1322.259399, 23.434871, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1311.889526, 23.416767, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1301.519042, 23.398675, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1291.149047, 23.380571, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1280.780761, 23.412454, 0.000000, -0.300000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1249.668823, 23.508153, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1239.297973, 23.490053, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1228.937377, 23.471986, 0.000000, 0.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1218.583251, 23.573951, 0.000000, -1.200001, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1208.225708, 23.876136, 0.000000, -2.100001, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1197.854248, 24.321552, 0.000000, -2.799999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1187.496459, 24.828119, 0.000000, -2.799999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1177.138549, 25.334672, 0.000000, -2.799999, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8674, 2292.685302, -1166.818359, 25.691827, 0.000000, -1.200000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(910, 2259.743164, -1258.309326, 24.205915, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1337, 2242.670898, -1258.111816, 23.559886, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1337, 2240.960693, -1263.243286, 23.559886, 0.000000, 0.000000, -168.599990, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(850, 2259.160156, -1261.418090, 23.078784, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1328, 2188.110839, -1261.688598, 23.420606, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1885, 2176.632324, -1332.623168, 22.984375, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2295.452392, -1257.731201, 23.999397, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2295.452392, -1261.901977, 23.999397, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2295.452392, -1266.072265, 23.999397, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2295.452392, -1270.243164, 23.999397, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2295.442382, -1273.503540, 23.999397, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2293.352783, -1275.573730, 23.999397, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1256, 2294.978027, -1261.174072, 24.190008, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1256, 2294.978027, -1268.886474, 24.190008, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2278.508789, -1273.700439, 23.999397, -0.000007, -0.000007, -89.999984, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2278.508789, -1269.529785, 23.999397, -0.000007, -0.000007, -89.999984, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2278.508789, -1265.359375, 23.999397, -0.000007, -0.000007, -89.999984, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2278.508789, -1261.188476, 23.999397, -0.000007, -0.000007, -89.999984, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2278.518798, -1257.928222, 23.999397, -0.000007, -0.000007, -89.999984, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(970, 2280.608398, -1255.857910, 23.999397, -0.000007, 0.000007, 0.000007, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1256, 2278.983154, -1270.257568, 24.190008, 0.000007, -0.000007, 179.999832, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1256, 2278.983154, -1262.545166, 24.190008, 0.000007, -0.000007, 179.999832, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1290, 2279.092529, -1266.376586, 24.490001, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1290, 2295.144531, -1265.055786, 24.490001, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(935, 2414.467285, -1433.412231, 23.552639, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19772, 2414.102050, -1431.628540, 23.486293, 0.000000, 0.000000, 19.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1393, 2413.349365, -1426.083251, 27.892333, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1256, 2048.440917, -1204.790527, 23.026784, 1.300000, 0.000000, -17.500000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1300, 2049.144287, -1202.426757, 22.813171, 0.000000, 0.000000, -106.200050, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(703, 2032.269287, -1193.627441, 20.681066, 0.000000, -8.399991, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1281, 1985.659667, -1173.619140, 19.933248, 0.000000, -3.599999, 78.200004, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 1990.837158, -1177.161010, 19.393442, 0.000000, 0.099999, 161.700103, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 1994.293334, -1178.304077, 19.399799, 0.000000, 0.099999, 155.200103, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 1997.920043, -1179.704711, 19.406570, 0.000000, 0.099999, 152.800109, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 2001.765014, -1181.695068, 19.414113, 0.000000, 0.099999, 146.800109, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 2005.198364, -1183.590087, 19.420934, 0.000000, 0.099999, 142.900100, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 2008.436401, -1186.039306, 19.428022, 0.000000, 0.099999, 142.900100, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 2010.813232, -1188.384277, 19.433986, 0.000000, 0.099999, 128.900085, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 2013.772705, -1192.025146, 19.442174, 0.000000, 0.099999, 117.000083, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 2014.987548, -1204.531127, 19.465564, 0.000000, 0.099999, 72.000083, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 2015.433959, -1196.066406, 19.450014, 0.000000, 0.099999, 96.100074, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 2015.937377, -1200.780517, 19.458288, 0.000000, 0.099999, 96.100074, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 2013.032836, -1208.061401, 19.472929, 0.000000, 0.099999, 53.400104, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 2010.812500, -1211.349731, 19.479804, 0.000000, 0.099999, 45.800102, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 2007.931030, -1214.015014, 19.396686, 0.000000, 0.099999, 37.700107, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 2005.105957, -1215.935668, 19.402692, 0.000000, 0.099999, 29.400094, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 2001.821899, -1217.786254, 19.409255, 0.000000, 0.099999, 29.400094, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 1997.651855, -1219.865722, 19.417415, 0.000000, 0.099999, 23.500095, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 1994.219848, -1220.904174, 19.423732, 0.000000, 0.099999, 15.400091, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 1990.044799, -1222.054565, 19.431285, 0.000000, 0.099999, 15.400091, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 1985.983154, -1223.464111, 19.438774, 0.000000, 0.099999, 15.400091, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2200.857177, -1159.083374, 26.114183, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2200.857177, -1169.235961, 26.114183, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2200.857177, -1179.586547, 26.114183, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2200.857177, -1179.666259, 30.064168, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2200.857177, -1169.282592, 30.064168, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2200.857177, -1161.141113, 30.064168, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2210.481689, -1180.956787, 26.114183, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2219.271972, -1180.956787, 26.114183, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2229.915283, -1180.956787, 26.114183, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2229.645019, -1180.956787, 30.074193, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2220.494384, -1180.956787, 30.074193, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2210.972656, -1180.956787, 30.074193, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2233.576904, -1175.296020, 26.114183, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2233.576904, -1164.835937, 26.114183, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2233.576904, -1174.366455, 30.064197, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2233.576904, -1166.386230, 30.054197, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19858, 2233.606933, -1157.184814, 30.054187, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1776, 2233.927490, -1159.609497, 29.899099, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	// jefferson PD

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////

	tmpobjid = CreateDynamicObject(18765, 2318.615234, -1344.107055, 26.957691, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3897, "libertyhi", "wallmix64HV", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 2321.347900, -1354.106567, 26.957691, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3897, "libertyhi", "wallmix64HV", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 2318.635253, -1362.286254, 26.957681, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3897, "libertyhi", "wallmix64HV", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 2318.615234, -1369.339111, 26.977668, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3897, "libertyhi", "wallmix64HV", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 2318.615234, -1344.107055, 21.957700, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3897, "libertyhi", "wallmix64HV", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 2321.347900, -1354.106567, 21.957681, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3897, "libertyhi", "wallmix64HV", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 2318.635253, -1362.286254, 21.957698, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3897, "libertyhi", "wallmix64HV", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 2318.615234, -1369.339111, 21.977674, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3897, "libertyhi", "wallmix64HV", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2326.270996, -1374.340332, 22.980138, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 2326.196777, -1358.618896, 23.817676, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12980, "sw_block10", "sw_woodslats2", 0xFFCCCCCC);
	tmpobjid = CreateDynamicObject(18765, 2326.196777, -1348.619384, 23.817676, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12980, "sw_block10", "sw_woodslats2", 0xFFCCCCCC);
	tmpobjid = CreateDynamicObject(11714, 2316.313964, -1353.184692, 24.916841, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12855, "cunte_cop", "sw_copdoor1", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2313.954345, -1374.004394, 17.225603, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_whitewall2_top", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2313.954345, -1357.621704, 17.225603, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_whitewall2_top", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2313.954345, -1348.748901, 17.225603, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_whitewall2_top", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2313.954345, -1339.447631, 17.225603, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_whitewall2_top", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 2318.745361, -1354.106567, 20.787656, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 2318.985595, -1354.106567, 20.997661, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 2319.265869, -1354.106567, 21.177665, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_concretewall1", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2323.216796, -1374.004394, 17.225603, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_whitewall2_top", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2323.294677, -1339.447631, 17.225603, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_whitewall2_top", 0x00000000);
	tmpobjid = CreateDynamicObject(2691, 2316.307373, -1351.041381, 27.906534, -0.000007, 0.000000, -89.999992, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3306, "cunte_house1", "ws_boxhouse_wins6", 0x00000000);
	tmpobjid = CreateDynamicObject(2691, 2316.307373, -1355.162109, 27.906534, -0.000007, 0.000000, -89.999992, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3306, "cunte_house1", "ws_boxhouse_wins6", 0x00000000);
	tmpobjid = CreateDynamicObject(2691, 2313.596923, -1360.882568, 27.906534, -0.000007, 0.000000, -89.999992, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3306, "cunte_house1", "ws_boxhouse_wins6", 0x00000000);
	tmpobjid = CreateDynamicObject(2691, 2313.576904, -1370.971923, 27.906534, -0.000007, 0.000000, -89.999992, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3306, "cunte_house1", "ws_boxhouse_wins6", 0x00000000);
	tmpobjid = CreateDynamicObject(2691, 2313.576904, -1365.662231, 27.906534, -0.000007, 0.000000, -89.999992, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3306, "cunte_house1", "ws_boxhouse_wins6", 0x00000000);
	tmpobjid = CreateDynamicObject(2691, 2313.566894, -1346.201416, 27.906534, -0.000007, 0.000000, -89.999992, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3306, "cunte_house1", "ws_boxhouse_wins6", 0x00000000);
	tmpobjid = CreateDynamicObject(2691, 2313.566894, -1341.980957, 27.906534, -0.000007, 0.000000, -89.999992, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3306, "cunte_house1", "ws_boxhouse_wins6", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2317.097412, -1353.268798, 26.335012, 0.000000, 90.000076, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_whitewall2_top", 0x00000000);
	tmpobjid = CreateDynamicObject(2691, 2316.673339, -1374.373046, 27.906534, 0.000000, 0.000007, 0.099982, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3306, "cunte_house1", "ws_boxhouse_wins6", 0x00000000);
	tmpobjid = CreateDynamicObject(2691, 2320.405273, -1374.367675, 27.906534, 0.000000, 0.000007, 0.099982, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3306, "cunte_house1", "ws_boxhouse_wins6", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2331.281005, -1374.340332, 22.980138, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2336.290283, -1374.340332, 22.980138, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2341.300048, -1374.340332, 22.980138, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2346.289794, -1374.340332, 22.980138, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2351.290771, -1374.340332, 22.980138, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2354.246337, -1374.004394, 12.755599, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_whitewall2_top", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2360.629150, -1374.004394, 12.755599, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_whitewall2_top", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2361.027587, -1353.275146, 22.984157, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2361.027587, -1358.285766, 22.984157, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2361.027587, -1371.017089, 22.984157, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2360.629150, -1368.034545, 12.755599, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_whitewall2_top", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2360.629150, -1361.293334, 12.755599, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_whitewall2_top", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2341.874267, -1350.608886, 22.980138, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2336.873535, -1350.608886, 22.980138, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 2331.880371, -1350.608886, 22.980138, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(3034, 2316.319580, -1355.547607, 24.349288, 0.000000, 89.999916, -90.000015, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10755, "airportrminl_sfse", "mirrwind4_LAn", 0xFF999999);
	tmpobjid = CreateDynamicObject(3034, 2316.309570, -1350.817016, 24.349288, 0.000000, 89.999916, -90.000015, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10755, "airportrminl_sfse", "mirrwind4_LAn", 0xFF999999);
	tmpobjid = CreateDynamicObject(19327, 2355.184570, -1374.511962, 24.261787, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{222323} EXIT", 120, "Ariel", 45, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 2361.586181, -1374.511962, 24.261787, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{222323} EXIT", 120, "Ariel", 45, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 2361.132812, -1367.232177, 24.281675, 0.000000, 0.000000, 90.700073, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{353535} ENTRY", 120, "Ariel", 45, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 2361.134033, -1360.460693, 24.281675, 0.000000, 0.000000, 90.700073, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{353535} ENTRY", 120, "Ariel", 45, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(1256, 2313.190429, -1362.471679, 23.682123, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9614, "donut_sfw", "donut3_sfw", 0x00000000);
	tmpobjid = CreateDynamicObject(1256, 2313.190429, -1370.752685, 23.682123, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10891, "bakery_sfse", "ws_RShaul_dirt", 0x00000000);
	tmpobjid = CreateDynamicObject(1256, 2313.190429, -1343.211059, 23.682123, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 6282, "beafron2_law2", "homies_2", 0x00000000);
	tmpobjid = CreateDynamicObject(11245, 2313.892578, -1348.695922, 28.181528, 0.000000, -14.800003, -177.199920, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12853, "cunte_gas01", "starspangban1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(11245, 2313.946777, -1357.473876, 28.135580, 0.000000, -14.800003, -177.199920, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12853, "cunte_gas01", "starspangban1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(2668, 2313.576904, -1365.264282, 25.090217, 0.000000, -12.300001, -89.999900, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12853, "cunte_gas01", "sw_gasso", 0x00000000);
	tmpobjid = CreateDynamicObject(2668, 2313.576904, -1366.589233, 25.564134, 0.000000, 6.300000, -89.999900, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10388, "scum2_sfs", "ws_cobrasign_small", 0x00000000);
	tmpobjid = CreateDynamicObject(2668, 2313.576904, -1368.319824, 24.839820, 0.000000, -3.899998, -89.999900, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13361, "ce_pizza", "pizzasign_LAe", 0x00000000);
	tmpobjid = CreateDynamicObject(19843, 2315.316162, -1353.687866, 26.772550, 0.000000, 89.899909, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11631, "mp_ranchcut", "mpCJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19843, 2315.316162, -1352.696899, 26.772550, 0.000000, 89.899909, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11631, "mp_ranchcut", "mpCJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 2315.301025, -1353.682006, 26.558504, -0.000007, 0.000000, -89.899917, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{c0c4c4} LOS SANTOS POLICE DEPARTMENT", 120, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 2315.301025, -1353.601928, 26.378498, -0.000007, 0.000000, -89.899917, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{c0c4c4} JEFFERSON STATION", 120, "Ariel", 35, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 2315.301025, -1353.832153, 26.088493, -0.000007, 0.000000, -89.899917, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{c0c4c4} ''TO PROTECT AND SERVE''", 120, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 2315.301025, -1354.182495, 25.938489, -0.000007, 0.000000, -89.899917, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{c0c4c4} EST. 1972", 120, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2691, 2323.652343, -1371.356445, 27.906534, 0.000000, 0.000007, 89.899948, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3306, "cunte_house1", "ws_boxhouse_wins6", 0x00000000);
	tmpobjid = CreateDynamicObject(2691, 2323.661132, -1366.106079, 27.906534, 0.000000, 0.000007, 89.899948, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3306, "cunte_house1", "ws_boxhouse_wins6", 0x00000000);
	tmpobjid = CreateDynamicObject(2691, 2323.668212, -1361.135131, 27.906534, 0.000000, 0.000007, 89.899948, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3306, "cunte_house1", "ws_boxhouse_wins6", 0x00000000);
	tmpobjid = CreateDynamicObject(2691, 2323.693359, -1346.695068, 27.906534, 0.000000, 0.000007, 89.899948, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3306, "cunte_house1", "ws_boxhouse_wins6", 0x00000000);
	tmpobjid = CreateDynamicObject(2691, 2323.703613, -1342.486206, 27.906534, 0.000000, 0.000007, 89.899948, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3306, "cunte_house1", "ws_boxhouse_wins6", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2328.746582, -1363.868774, 23.406032, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2323.667480, -1363.868774, 23.406032, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2331.468505, -1361.417602, 23.406032, 0.000000, 0.000000, 90.299995, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2331.442138, -1356.207153, 23.406032, 0.000000, 0.000000, 90.299995, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2331.413574, -1351.117431, 23.406032, 0.000000, 0.000000, 90.299995, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2331.388427, -1346.066162, 23.406032, 0.000000, 0.000000, 90.299995, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2328.784667, -1343.342651, 23.406032, 0.000000, 0.000000, -179.600173, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 2323.723876, -1343.377197, 23.406032, 0.000000, 0.000000, -179.600173, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(1693, 2320.967773, -1353.218505, 30.497709, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF666666);
	tmpobjid = CreateDynamicObject(19327, 2360.135498, -1368.865112, 24.281675, 0.000000, 0.000000, 270.700073, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{353535} ENTRY", 120, "Ariel", 45, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 2360.117431, -1362.124267, 24.281675, 0.000000, 0.000000, 270.700073, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{353535} ENTRY", 120, "Ariel", 45, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 2353.333984, -1373.501586, 24.261787, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{222323} EXIT", 120, "Ariel", 45, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 2359.695312, -1373.501586, 24.261787, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{222323} EXIT", 120, "Ariel", 45, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 2366.478271, -1365.809692, 22.883693, -89.999992, 179.999984, -90.000015, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8e300} KEEP", 40, "Ariel", 40, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 2366.478271, -1363.799682, 22.883693, -89.999992, 179.999984, -90.000015, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8e300} CLEAR", 40, "Ariel", 40, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 2356.261474, -1379.795288, 22.883693, -89.999992, 135.049468, 135.049499, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8e300} KEEP", 40, "Ariel", 40, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 2358.271728, -1379.795288, 22.883693, -89.999992, 135.049468, 135.049499, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8e300} CLEAR", 40, "Ariel", 40, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19393, 2331.100585, -1365.196777, 24.257402, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9575, "archbrij", "conc_wall_stripd2128h", 0xFFCCCCCC);
	tmpobjid = CreateDynamicObject(19447, 2326.366943, -1366.726806, 24.247543, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9575, "archbrij", "conc_wall_stripd2128h", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2326.366943, -1365.065185, 25.927553, 360.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9575, "archbrij", "conc_wall_stripd2128h", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(1291, 2313.254638, -1367.303833, 23.506063, 0.000000, 0.000000, -90.200019, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1346, 2312.905517, -1347.362792, 24.362173, 0.000000, 0.000000, -90.799980, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1286, 2313.334960, -1366.597045, 23.537330, 0.000000, 0.000000, 89.499977, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(957, 2315.787841, -1353.345214, 26.228115, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(957, 2315.787841, -1350.813842, 26.228115, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(957, 2315.787841, -1355.864868, 26.228115, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11714, 2325.409179, -1363.633789, 24.286235, 0.000000, 0.000000, -89.999946, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19425, 2357.333251, -1374.098022, 23.016712, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19425, 2360.794921, -1364.738037, 22.996711, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1244, 2334.810058, -1363.237060, 23.780199, 1.600000, 0.000000, -6.199998, -1, -1, -1, 300.00, 300.00); 

	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "2018-09-16 13:16:25" by "N0rdic"
		Created by "N0rdic"
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(9482, 1668.577270, -1514.444946, 16.782846, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 1641.034667, -1530.161132, 12.588871, 0.000000, 0.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 1634.543823, -1530.161132, 12.588871, 0.000000, 0.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1647.875000, -1519.001220, 13.336865, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9494, "chinatownsfe", "sf_windos_12_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1638.232788, -1550.259765, 13.336865, 0.000000, 0.000000, 90.000038, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9494, "chinatownsfe", "sf_windos_12_wall", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(19447, 1631.973876, -1534.991333, 13.736873, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17634, "landlae2b", "compfence5b_LAe", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1631.973876, -1525.361450, 13.736873, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17634, "landlae2b", "compfence5b_LAe", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1633.493041, -1555.001953, 13.336865, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9494, "chinatownsfe", "sf_windos_12_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 1631.833007, -1527.549072, 12.504126, -0.000007, 0.000000, -89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 1631.833007, -1522.318725, 12.504126, -0.000007, 0.000000, -89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObject(1494, 1637.019897, -1530.142089, 12.087457, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3629, "arprtxxref_las", "ws_corrugateddoor1", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 1645.416137, -1530.161132, 12.588871, 0.000000, 0.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1643.223632, -1530.210083, 12.358036, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "cityhallroof", 0x00000000);
	tmpobjid = CreateDynamicObject(19368, 1647.879272, -1531.732666, 13.342817, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9494, "chinatownsfe", "sf_windos_12_wall", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 1634.493774, -1550.242919, 12.588871, 0.000000, 0.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1631.973876, -1545.441406, 13.736873, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17634, "landlae2b", "compfence5b_LAe", 0x00000000);
	tmpobjid = CreateDynamicObject(3260, 1632.079223, -1540.192260, 13.431941, 0.000000, 2.000000, -90.000083, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11631, "mp_ranchcut", "mpCJ_DarkWood", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 1631.833007, -1537.909667, 12.504126, -0.000014, 0.000000, -89.999931, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 1631.833007, -1532.679321, 12.504126, -0.000014, 0.000000, -89.999931, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 1631.833007, -1547.960083, 12.504126, -0.000029, 0.000000, -89.999885, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObject(19868, 1631.833007, -1542.729736, 12.504126, -0.000029, 0.000000, -89.999885, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, 1635.461791, -1554.620483, 18.673448, 0.000000, 0.000000, -179.799972, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3241, "conhooses", "des_hooswinwee1", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1630.904174, -1554.656982, 18.703441, 0.000000, 0.000000, 179.999893, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "pierwin01_law", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1626.665039, -1554.656982, 18.703441, 0.000000, 0.000000, 179.999893, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "pierwin01_law", 0x00000000);
	tmpobjid = CreateDynamicObject(3861, 1641.431762, -1548.648193, 13.703448, 0.000000, 0.000000, 178.900024, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14415, "carter_block_2", "walp29S", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14415, "carter_block_2", "mp_gs_woodpanel1", 0x00000000);
	tmpobjid = CreateDynamicObject(3861, 1636.172485, -1547.528930, 13.703448, 0.000000, 0.000000, 159.399993, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17933, "carter_mainmap", "mp_apt1_brokedoor", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 12805, "ce_loadbay", "sw_corrug", 0x00000000);
	tmpobjid = CreateDynamicObject(3861, 1634.071777, -1537.224975, 13.703448, 0.000000, 0.000000, 84.599998, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13139, "cecuntetunnel", "ab_walllite", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3374, "ce_farmxref", "sw_barnwood4", 0x00000000);
	tmpobjid = CreateDynamicObject(3861, 1636.436523, -1533.566162, 13.703448, 0.000000, 0.000000, 29.499984, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "venshade01_law", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14415, "carter_block_2", "mp_gs_woodpanel1", 0x00000000);
	tmpobjid = CreateDynamicObject(3861, 1645.722900, -1532.113769, 13.703448, 0.000000, 0.000000, -10.700015, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 8639, "chinatownmall", "ctmall01_128", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1736, "cj_ammo", "CJ_LIGHTWOOD(E)", 0x00000000);
	tmpobjid = CreateDynamicObject(3040, 1642.070068, -1540.351562, 15.012949, 0.000000, 0.000000, -90.199981, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2669, "cj_chris", "CJ_Floral", 0x00000000);
	tmpobjid = CreateDynamicObject(19630, 1635.917968, -1535.114868, 13.438645, 87.099990, 137.199996, 164.200103, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1608, "shark", "sharky", 0x00000000);
	tmpobjid = CreateDynamicObject(19630, 1636.118652, -1535.000122, 13.438622, 87.099990, 137.199996, -85.699905, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1608, "shark", "sharky", 0x00000000);
	tmpobjid = CreateDynamicObject(19630, 1636.170898, -1535.062500, 13.409585, 87.099990, 137.199996, 76.700134, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1608, "shark", "sharky", 0x00000000);
	tmpobjid = CreateDynamicObject(19329, 1637.187377, -1534.777465, 15.045533, 0.000000, 0.000000, 29.500000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11631, "mp_ranchcut", "mpCJ_DarkWood", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1637.667236, -1534.524902, 14.887910, 0.000000, 0.000000, 29.500000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{bababa} FRESH FISH!", 120, "Ariel", 50, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1637.554443, -1534.588500, 14.507909, 0.000000, 0.000000, 29.500000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{bababa} CANTONESE, SICHUAN, XIAN, EMPURAU", 120, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1637.710937, -1534.500122, 14.367906, 0.000000, 0.000000, 29.500000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{bababa} ALL FRESH FROM SEA TODAY!", 120, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(11735, 1634.807617, -1538.651245, 13.313502, 0.000000, 0.000000, 102.099998, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2562, "cj_hotel_sw", "CJ-COUCHL1", 0x00000000);
	tmpobjid = CreateDynamicObject(11735, 1634.780639, -1538.524291, 13.313502, 0.000000, 0.000000, 102.099998, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2562, "cj_hotel_sw", "CJ-COUCHL1", 0x00000000);
	tmpobjid = CreateDynamicObject(11735, 1634.819335, -1538.368408, 13.313502, 0.000000, 0.000000, 76.100006, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ-COUCHL2", 0x00000000);
	tmpobjid = CreateDynamicObject(11735, 1634.851074, -1538.241455, 13.313502, 0.000000, 0.000000, 76.100006, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ-COUCHL2", 0x00000000);
	tmpobjid = CreateDynamicObject(11735, 1634.549560, -1538.166748, 13.313502, 0.000000, 0.000000, 146.900009, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11391, "hubprops2_sfse", "blackbag", 0x00000000);
	tmpobjid = CreateDynamicObject(11735, 1634.309448, -1538.535766, 13.313502, 0.000000, 0.000000, 46.799991, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 11391, "hubprops2_sfse", "blackbag", 0x00000000);
	tmpobjid = CreateDynamicObject(18968, 1634.818115, -1537.541748, 13.377544, 0.000000, 0.000000, 30.499998, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5422, "idlewood6_lae", "las69str2", 0x00000000);
	tmpobjid = CreateDynamicObject(18968, 1635.074829, -1537.477294, 13.377544, 0.000000, 0.000000, -10.600000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18067, "intclothes_acc", "CJ_VIC_4", 0x00000000);
	tmpobjid = CreateDynamicObject(18961, 1634.952392, -1537.126464, 13.367607, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14780, "lring_gmint3", "crash_pad", 0x00000000);
	tmpobjid = CreateDynamicObject(18961, 1634.952392, -1536.926269, 13.367607, 0.000000, 0.000000, -14.500000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14780, "lring_gmint3", "crash_pad_red", 0x00000000);
	tmpobjid = CreateDynamicObject(18961, 1635.005249, -1536.722900, 13.367607, 0.000000, 0.000000, 11.799999, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5142, "lashops1b_las2", "mural03_LA", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1635.435668, -1538.638061, 15.391735, 0.000000, 0.000000, 74.699966, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2d2c2c} REPLICA CLOTHING!!!", 80, "Ariel", 22, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1635.430541, -1538.657348, 15.391735, 0.000000, 0.000000, 74.699966, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{7a0303} REPLICA CLOTHING!!!", 80, "Ariel", 22, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1635.452026, -1538.580200, 14.981727, 0.000000, 0.000000, 74.699966, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{7a0303} ARMANI", 80, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1635.452026, -1538.580200, 14.751724, 0.000000, 0.000000, 74.699966, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{7a0303} RALPH LAUREN", 80, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1635.452026, -1538.580200, 14.531721, 0.000000, 0.000000, 74.699966, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{7a0303} GUCCI", 80, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1635.452026, -1538.580200, 14.291714, 0.000000, 0.000000, 74.699966, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{7a0303} SPORTSLINE", 80, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1635.779296, -1537.384399, 14.961716, 0.000000, 0.000000, 74.699966, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{7a0303} RAY-BAN", 80, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1635.779296, -1537.384399, 14.751711, 0.000000, 0.000000, 74.699966, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{7a0303} NIKE", 80, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1635.673095, -1537.770141, 14.401705, 0.000000, 0.000000, 74.699966, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{3f3e3e} ALL FROM $9.99", 80, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(11714, 1648.008666, -1518.271728, 13.776877, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3187, "cxref_quarrytest", "gs_door1", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1647.917724, -1539.941894, 13.776878, 0.000000, 0.000000, 89.899925, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{b29c0a} CHINATOWN", 90, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1647.917724, -1540.142089, 13.526871, 0.000000, 0.000000, 89.899925, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{b29c0a} PUBLIC MARKET", 90, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1647.907714, -1539.921875, 13.776878, 0.000000, 0.000000, 89.899925, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d3d3d1} CHINATOWN", 90, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1647.897705, -1540.122070, 13.526871, 0.000000, 0.000000, 89.899925, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d3d3d1} PUBLIC MARKET", 90, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(738, 1651.646972, -1496.871582, 12.762815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF990000);
	tmpobjid = CreateDynamicObject(738, 1651.646972, -1481.761108, 12.762815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF990000);
	tmpobjid = CreateDynamicObject(738, 1651.646972, -1459.010986, 12.762815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF990000);
	tmpobjid = CreateDynamicObject(738, 1664.118408, -1460.151123, 12.762815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF990000);
	tmpobjid = CreateDynamicObject(738, 1664.118408, -1498.281494, 12.762815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF990000);
	tmpobjid = CreateDynamicObject(738, 1664.118408, -1511.851684, 12.762815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF990000);
	tmpobjid = CreateDynamicObject(738, 1664.118408, -1526.941040, 12.762815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF990000);
	tmpobjid = CreateDynamicObject(738, 1664.118408, -1560.681884, 12.762815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF990000);
	tmpobjid = CreateDynamicObject(738, 1664.118408, -1578.772216, 12.762815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF990000);
	tmpobjid = CreateDynamicObject(738, 1651.426513, -1578.772216, 12.762815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF990000);
	tmpobjid = CreateDynamicObject(738, 1651.426513, -1566.502197, 12.762815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF990000);
	tmpobjid = CreateDynamicObject(738, 1651.426513, -1555.710815, 12.762815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFF990000);
	tmpobjid = CreateDynamicObject(1256, 1667.496093, -1528.404663, 13.212808, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9494, "chinatownsfe", "chtown_brightcarcafe", 0x00000000);
	tmpobjid = CreateDynamicObject(1256, 1667.496093, -1516.203125, 13.212808, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9494, "chinatownsfe", "chtown_brightcarcafe", 0x00000000);
	tmpobjid = CreateDynamicObject(1256, 1667.496093, -1504.042968, 13.212808, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9494, "chinatownsfe", "chtown_brightcarcafe", 0x00000000);
	tmpobjid = CreateDynamicObject(1256, 1667.496093, -1492.862792, 13.212808, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 9494, "chinatownsfe", "chtown_brightcarcafe", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(10262, 1649.146606, -1513.932128, 7.542812, 0.000000, 0.000000, 90.300064, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(10262, 1649.492919, -1489.807495, 7.542812, 0.000000, 0.000000, 90.300064, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(9482, 1658.018554, -1573.503784, 15.942811, 0.000000, 0.000000, -89.999992, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(9482, 1658.018554, -1463.983276, 16.002813, 0.000000, 0.000000, -89.999992, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3471, 1648.017333, -1497.041748, 13.292812, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3471, 1648.017333, -1511.731567, 13.292812, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(8615, 1637.656494, -1553.878662, 15.256876, 0.000000, 0.000000, -179.999954, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3035, 1634.380859, -1551.626953, 13.340621, 0.000000, 0.000000, 93.299995, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1328, 1633.977661, -1554.239746, 13.117691, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1328, 1634.317993, -1553.328857, 13.117691, 0.000000, 0.000000, -59.799991, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2672, 1635.635620, -1553.473266, 12.908290, 0.000000, 0.000000, -22.399990, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3061, 1633.778076, -1554.628662, 18.133455, 0.000000, 0.000000, -90.100021, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18632, 1645.394287, -1533.140625, 13.368234, 90.600044, 0.000000, 60.399986, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18632, 1645.585571, -1532.802368, 13.368234, 90.600044, 0.000000, 72.499992, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18632, 1646.770996, -1533.452758, 13.363102, 90.600044, 0.000000, -7.500009, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2969, 1646.206665, -1532.893310, 13.462165, 0.000000, 0.000000, -86.200012, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2969, 1646.206665, -1532.893310, 13.702172, 0.000000, 0.000000, -110.900024, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19639, 1635.917846, -1534.870727, 13.442990, 15.300005, 0.000000, 28.500017, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19639, 1636.418823, -1534.599365, 13.442990, 15.300005, 0.000000, 28.500017, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19639, 1637.948120, -1533.768920, 13.442990, 15.300005, 0.000000, 28.500017, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19639, 1637.447143, -1534.040405, 13.442990, 15.300005, 0.000000, 28.500017, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(924, 1636.727172, -1534.513549, 12.760478, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19630, 1636.506713, -1534.892456, 13.398756, 87.099990, -83.099998, -66.699989, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19630, 1636.483398, -1534.724365, 13.429753, 87.099990, -83.099998, -88.699996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19630, 1636.627563, -1534.570800, 13.481969, 87.099990, -83.099998, -144.999938, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19630, 1636.668090, -1534.796386, 13.421402, 87.099990, 137.199996, -144.999938, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19560, 1637.645263, -1534.094238, 13.414552, 0.000000, 14.700000, -62.599994, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19560, 1637.485107, -1534.177490, 13.414552, 0.000000, 14.700000, -81.199996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19560, 1637.489257, -1534.180175, 13.433898, 0.000000, 14.700000, -33.299999, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19793, 1637.827758, -1533.591064, 13.421354, 0.000000, 0.000000, 27.700006, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19793, 1637.339965, -1533.846191, 13.421354, 0.000000, 0.000000, 27.700006, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19793, 1635.797485, -1534.653808, 13.421354, 0.000000, 0.000000, 27.700006, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19793, 1636.285766, -1534.398681, 13.421354, 0.000000, 0.000000, 27.700006, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2842, 1641.048950, -1548.517333, 13.337206, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2967, 1642.420288, -1547.774047, 13.357509, 0.000000, 0.000000, -174.900009, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2967, 1642.291503, -1547.759765, 13.357509, 0.000000, 0.000000, 173.599960, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2967, 1642.214111, -1547.922363, 13.357509, 0.000000, 0.000000, -115.600051, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2967, 1642.132812, -1547.732788, 13.357509, 0.000000, 0.000000, 9.299944, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18866, 1641.652832, -1547.900756, 13.347513, 0.000000, 0.000000, -64.799995, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18866, 1641.659057, -1547.720581, 13.347513, 0.000000, 0.000000, 178.099975, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18866, 1641.959228, -1547.730834, 13.347513, 0.000000, 0.000000, 88.699966, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18866, 1642.006958, -1547.829833, 13.347513, 0.000000, 0.000000, -154.200042, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18867, 1641.853759, -1547.912841, 13.338876, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18867, 1641.523559, -1547.859863, 13.338876, 0.000000, 0.000000, 29.800003, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18874, 1641.767944, -1547.771240, 13.336874, 0.000000, 0.000000, -8.500000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18868, 1641.423339, -1547.899536, 13.348789, 0.000000, 0.000000, -124.399986, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2232, 1640.268920, -1547.937866, 13.931764, 0.000000, 0.000000, 172.500045, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19424, 1640.991210, -1547.835815, 13.369004, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19424, 1641.079711, -1548.069946, 13.369004, 0.000000, 0.000000, -69.300003, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19424, 1641.296264, -1547.757080, 13.369004, 0.000000, 0.000000, 78.400009, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19612, 1642.727416, -1548.276977, 13.344287, 0.000000, 0.000000, 177.300003, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19590, 1637.554443, -1547.053710, 13.373479, 0.000000, 90.499984, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19590, 1637.294677, -1546.980102, 13.375841, 0.000000, 90.499984, -15.899999, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19590, 1637.034423, -1546.906738, 13.378203, 0.000000, 90.499984, -33.800003, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(339, 1635.085815, -1545.999511, 13.942934, 0.000000, 86.199935, -108.600013, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(339, 1635.089233, -1545.990356, 14.092605, 0.000000, 86.199935, -108.600013, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(339, 1635.085815, -1546.000610, 14.233624, 0.000000, 86.199935, -108.600013, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(335, 1636.232788, -1546.749267, 13.390879, -90.100028, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(335, 1636.232788, -1546.749267, 13.390879, -90.100028, 0.000000, 149.399978, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(335, 1636.509033, -1546.912353, 13.390879, -90.100028, 0.000000, -117.000030, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(335, 1636.474609, -1546.709228, 13.390707, -90.100028, 0.000000, -79.000030, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(331, 1635.584106, -1546.478881, 13.383260, -82.899986, 95.200019, -8.500000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(331, 1635.739990, -1546.516357, 13.381472, -82.899986, 95.200019, -8.500000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(331, 1635.779785, -1546.352416, 13.402400, -82.899986, 95.200019, -65.099990, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(341, 1634.989135, -1546.992553, 13.546416, 0.000000, 29.999996, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(369, 1636.280883, -1547.296997, 13.470973, 0.000000, 87.099975, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(369, 1636.419433, -1547.411254, 13.480087, 0.000000, 87.099975, -39.399997, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1650, 1635.067871, -1546.670776, 13.643736, 0.000000, 0.000000, 74.100013, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19515, 1637.341064, -1547.974487, 14.603710, -4.599998, -89.299987, -16.500000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19515, 1636.889526, -1547.840820, 14.609434, -4.599998, -90.399993, -12.099999, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2394, 1634.594116, -1535.714477, 14.302099, 0.000000, 0.000000, -5.699995, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2392, 1634.620361, -1538.847045, 14.233298, 0.000000, 0.000000, -96.099983, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2384, 1634.421508, -1537.567260, 13.458253, 0.000000, 0.000000, 79.700012, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2689, 1632.745239, -1537.070312, 14.417957, 0.000000, 0.000000, 83.099975, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2706, 1632.671508, -1537.816528, 14.412874, 0.000000, 0.000000, 81.099990, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2705, 1632.824096, -1536.309326, 14.413000, 0.000000, 0.000000, 79.199974, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2386, 1634.484008, -1537.004638, 13.448060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1635.631958, -1538.015991, 12.291641, 0.000000, 0.000000, -5.099999, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18968, 1634.934936, -1537.739990, 13.377544, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19033, 1634.415649, -1536.311279, 13.397223, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19033, 1634.525756, -1536.291259, 13.397223, 0.000000, 0.000000, 19.100000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19033, 1634.640258, -1536.371582, 13.397223, 0.000000, 0.000000, -35.200000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3927, 1635.249633, -1539.025024, 14.573665, 0.000000, 0.000000, -105.199996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1568, 1652.150268, -1547.490478, 12.512815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1568, 1652.150268, -1532.889892, 12.512815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1568, 1642.179077, -1538.250244, 12.512815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1568, 1642.179077, -1542.449951, 12.512815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1568, 1652.150268, -1489.799560, 12.512815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1568, 1652.150268, -1475.198852, 12.512815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1568, 1664.111083, -1487.917724, 12.512815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1568, 1664.111083, -1516.498046, 12.512815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1568, 1663.980957, -1535.859619, 12.512815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1568, 1663.980957, -1566.699340, 12.512815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1568, 1652.150268, -1560.451293, 12.512815, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3576, 1634.140991, -1528.464477, 14.056138, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1448, 1635.402221, -1528.157226, 14.137543, 0.000000, 0.000000, -44.200004, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1449, 1634.860717, -1526.754150, 13.055846, 0.000000, 0.000000, -179.399978, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1390, 1637.164062, -1520.792602, 16.026556, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3042, 1632.624023, -1520.585815, 17.340372, 0.000000, 0.000000, -176.800033, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3531, 1647.857299, -1540.418701, 13.772811, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18725, 1632.629638, -1521.251220, 16.720487, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14772, 1642.705566, -1548.345825, 13.715886, 0.000000, 0.000000, -178.599960, -1, -1, -1, 300.00, 300.00); 

	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "2018-09-16 13:17:42" by "N0rdic"
		Created by "N0rdic"
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Remove Buildings///////////////////////////////////////////////////////////////////////////////////////////////


	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////

	tmpobjid = CreateDynamicObject(12953, 805.970031, -1615.773071, 16.802806, 0.000000, 0.000000, 41.899986, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 3902, "libertyhi3", "marcos02_128", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 6095, "shops01_law", "greenshade2_64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 9507, "boxybld2_sfw", "gz_vic4e", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 8, 17324, "cwsbarn", "des_redslats", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 807.014770, -1621.781127, 10.042803, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 797.025024, -1621.781127, 10.042803, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 797.025024, -1609.480712, 10.042803, 0.199999, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 797.035034, -1615.819824, 10.022804, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 806.983886, -1607.160156, 10.042803, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10023, "bigwhitesfe", "forestfloor3", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 801.577331, -1610.171020, 13.653034, 0.000000, 0.000000, 41.699996, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3241, "conhooses", "des_greyslats", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 801.438842, -1620.804931, 13.653034, 0.000000, 0.000000, -47.399967, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3241, "conhooses", "des_greyslats", 0x00000000);
	tmpobjid = CreateDynamicObject(18763, 797.289123, -1615.083618, 13.652808, 0.000000, 0.000000, 42.699974, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3241, "conhooses", "des_greyslats", 0x00000000);
	tmpobjid = CreateDynamicObject(18763, 797.780151, -1615.349853, 13.642807, 0.000000, 0.000000, 42.699974, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3241, "conhooses", "des_greyslats", 0x00000000);
	tmpobjid = CreateDynamicObject(3521, 820.804931, -1614.812744, 13.840607, 0.000000, 0.000000, 76.200012, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 11631, "mp_ranchcut", "mpCJ_Black_metal", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 4, 11631, "mp_ranchcut", "mpCJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 820.591552, -1616.257568, 14.116868, 0.000014, 0.000003, 76.499977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2aa841} LIT", 90, "courier", 60, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 820.835693, -1615.277465, 14.116868, 0.000014, 0.000003, 76.499977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{f7f7f7} TLE", 90, "courier", 60, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 821.262756, -1613.498291, 14.116868, 0.000014, 0.000003, 76.499977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{c90e0e} ALY", 90, "courier", 60, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 821.122009, -1614.079833, 14.116868, 0.000014, 0.000003, 76.499977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{f7f7f7} IT", 90, "courier", 60, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 820.712341, -1615.751831, 14.366869, 0.000014, 0.000003, 76.499977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{f2eded} Welcome To ...", 90, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 821.193908, -1613.790405, 13.556862, 0.000014, 0.000003, 76.499977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{f9f9f9} ESTABLISHED 1966", 90, "Ariel", 21, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(3521, 755.381164, -1574.214599, 13.840607, 0.000007, 0.000000, -62.200000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 11631, "mp_ranchcut", "mpCJ_Black_metal", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 4, 11631, "mp_ranchcut", "mpCJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 754.581481, -1572.992431, 14.116868, 0.000022, 0.000004, -61.900035, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2aa841} LIT", 90, "courier", 60, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 755.049621, -1573.887451, 14.116868, 0.000022, 0.000004, -61.900035, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{f7f7f7} TLE", 90, "courier", 60, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 755.911499, -1575.501464, 14.116868, 0.000022, 0.000004, -61.900035, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{c90e0e} ALY", 90, "courier", 60, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 755.630615, -1574.973144, 14.116868, 0.000022, 0.000004, -61.900035, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{f7f7f7} IT", 90, "courier", 60, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 754.826904, -1573.450805, 14.366869, 0.000022, 0.000004, -61.900035, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{f2eded} Welcome To ...", 90, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 755.769042, -1575.237304, 13.556862, 0.000022, 0.000004, -61.900035, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{f9f9f9} ESTABLISHED 1966", 90, "Ariel", 21, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(16630, 807.727844, -1605.627197, 12.494359, 0.000000, 0.000000, -91.099945, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(16630, 807.723693, -1611.089843, 12.554360, 0.000000, 0.000000, -91.099945, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(16630, 805.131042, -1602.768432, 12.494359, 0.000000, 0.000000, -0.699957, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(16630, 802.066650, -1605.627929, 12.494359, 0.000000, 0.000000, -91.099945, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(16630, 802.010437, -1611.158081, 12.494359, 0.000000, 0.000000, -91.099945, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 810.140136, -1624.275756, 11.522802, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 808.399047, -1619.995971, 11.522801, 0.000000, 0.000000, 44.299999, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(2801, 807.853210, -1622.518920, 13.022807, 0.000000, 0.000000, -17.099996, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 11, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObject(2801, 805.007873, -1625.577270, 13.022807, 0.000000, 0.000000, 76.200019, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 11, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObject(3109, 796.756225, -1616.612060, 13.692811, 0.000000, 0.000000, 43.100009, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12805, "ce_loadbay", "sw_waredoor", 0x00000000);
	tmpobjid = CreateDynamicObject(16630, 794.859985, -1604.473266, 12.494359, 0.000000, 0.000000, -0.699957, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(16630, 801.660522, -1604.476196, 12.494359, 0.000000, 0.000000, -0.699957, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(3861, 797.767089, -1611.032104, 13.677254, 0.000000, 0.000000, -138.299789, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5111, "ground2_las2", "sanpedpawn1a", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 642, "canopy", "wood02", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 808.629760, -1581.122192, 16.296594, 2.499995, -7.499989, -21.100008, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} TONY'S", 80, "Ariel", 45, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19865, 811.667114, -1582.197875, 11.794439, 0.000000, 0.000000, 68.699989, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(19937, 818.051025, -1585.248535, 17.816459, 90.000000, 0.000000, -21.300003, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5111, "ground2_las2", "sanpedpawn1a", 0x00000000);
	tmpobjid = CreateDynamicObject(1478, 818.275512, -1584.737426, 17.076171, 90.599967, 0.000000, 158.700012, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObject(1478, 818.279541, -1584.725830, 18.276096, 90.599967, 0.000000, 158.700012, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 817.307373, -1586.535888, 17.954462, -0.000028, -0.000009, -110.899841, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} T", 90, "Ariel", 42, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 817.314453, -1586.517089, 17.694458, -0.000028, -0.000009, -110.899841, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} O", 90, "Ariel", 42, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 817.314331, -1586.516845, 17.424451, -0.000028, -0.000009, -110.899841, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} N", 90, "Ariel", 42, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 817.310791, -1586.526245, 17.144443, -0.000028, -0.000009, -110.899841, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} Y", 90, "Ariel", 42, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 817.307556, -1586.536254, 16.884435, -0.000028, -0.000009, -110.899841, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} S", 90, "Ariel", 42, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 817.321533, -1586.498291, 18.154468, -0.000028, -0.000009, -110.899841, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} FAT", 90, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 817.424316, -1586.225952, 16.464460, -0.000028, -0.000009, -110.899841, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} LATE BAR", 90, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 817.413696, -1586.254150, 16.684463, -0.000028, -0.000009, -110.899841, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} ________", 90, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 817.413696, -1586.254150, 18.154466, -0.000028, -0.000009, -110.899841, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} ________", 90, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 818.428894, -1584.883911, 17.954462, -0.000020, -0.000007, 68.900009, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} T", 90, "Ariel", 42, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 818.421752, -1584.902709, 17.694458, -0.000020, -0.000007, 68.900009, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} O", 90, "Ariel", 42, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 818.421875, -1584.902954, 17.424451, -0.000020, -0.000007, 68.900009, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} N", 90, "Ariel", 42, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 818.425415, -1584.893554, 17.144443, -0.000020, -0.000007, 68.900009, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} Y", 90, "Ariel", 42, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 818.428710, -1584.883544, 16.884435, -0.000020, -0.000007, 68.900009, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} S", 90, "Ariel", 42, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 818.414611, -1584.921508, 18.154468, -0.000020, -0.000007, 68.900009, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} FAT", 90, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 818.310852, -1585.193481, 16.464460, -0.000020, -0.000007, 68.900009, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} LATE BAR", 90, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 818.321594, -1585.165283, 16.684463, -0.000020, -0.000007, 68.900009, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} ________", 90, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 818.321594, -1585.165283, 18.154466, -0.000020, -0.000007, 68.900009, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} ________", 90, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 808.645324, -1581.138549, 16.521024, 2.499995, -7.499989, -21.100008, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} FAT", 80, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 808.802429, -1581.160034, 15.664516, 2.499995, -7.499989, -21.100008, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{111111} LATE-NIGHT BAR", 80, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 808.607727, -1581.124023, 16.293546, 2.499995, -7.499989, -21.100008, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{c91c1c} TONY'S", 80, "Ariel", 45, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19865, 806.999633, -1580.378662, 11.794439, 0.000000, 0.000000, 68.699989, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 802.331848, -1578.558471, 11.794439, 0.000000, 0.000000, 68.699989, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0x00000000);
	tmpobjid = CreateDynamicObject(3853, 828.054931, -1599.092285, 16.372819, 0.000000, 0.000000, 51.299961, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5111, "ground2_las2", "sanpedpawn1a", 0x00000000);
	tmpobjid = CreateDynamicObject(3853, 822.378845, -1605.646240, 16.372819, 0.000000, 0.000000, -130.899978, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5111, "ground2_las2", "sanpedpawn1a", 0x00000000);
	tmpobjid = CreateDynamicObject(3853, 808.454528, -1596.369750, 16.372819, 0.000000, 0.000000, -111.499961, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5111, "ground2_las2", "sanpedpawn1a", 0x00000000);
	tmpobjid = CreateDynamicObject(3853, 812.458557, -1588.657592, 16.372819, 0.000000, 0.000000, 69.799957, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5111, "ground2_las2", "sanpedpawn1a", 0x00000000);
	tmpobjid = CreateDynamicObject(3853, 793.604125, -1583.285766, 16.372819, 0.000000, 0.000000, 86.099899, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5111, "ground2_las2", "sanpedpawn1a", 0x00000000);
	tmpobjid = CreateDynamicObject(3853, 798.154907, -1592.589111, 16.372819, 0.000000, 0.000000, -102.400009, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5111, "ground2_las2", "sanpedpawn1a", 0x00000000);
	tmpobjid = CreateDynamicObject(3853, 774.239013, -1590.961303, 16.372819, 0.000000, 0.000000, -84.600051, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5111, "ground2_las2", "sanpedpawn1a", 0x00000000);
	tmpobjid = CreateDynamicObject(3853, 760.531250, -1582.212646, 16.372819, 0.000000, 0.000000, 86.099899, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5111, "ground2_las2", "sanpedpawn1a", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(3802, 812.716125, -1617.918090, 14.744841, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3802, 812.896301, -1614.605346, 14.744841, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(647, 810.381469, -1606.710693, 12.549365, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(647, 815.031860, -1611.624389, 12.439361, 0.000000, 0.000000, 83.099990, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(647, 814.320556, -1620.559570, 12.439361, 0.000000, 0.000000, 68.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(647, 812.426086, -1623.836425, 12.269357, 0.000000, 0.000000, -7.299993, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 804.636230, -1603.641479, 12.816870, 0.000000, 0.000000, -175.299987, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 806.287414, -1606.224731, 12.446864, 0.000000, 0.000000, -91.300003, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(759, 803.424316, -1606.473510, 11.532791, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(893, 805.280944, -1605.025390, 12.395571, 0.000000, 0.000000, 32.300003, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19865, 804.465454, -1624.264892, 12.262808, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19865, 794.518127, -1626.785766, 12.262808, 0.000000, 0.000000, -89.999984, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19865, 799.528259, -1626.785766, 12.262808, 0.000000, 0.000000, -89.999984, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19865, 804.528381, -1626.785766, 12.262808, 0.000000, 0.000000, -89.999984, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 811.100646, -1618.909301, 12.682909, 0.000000, -10.500000, -50.499996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 810.311218, -1620.544555, 12.691770, 0.000000, -10.500000, -50.499996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 809.080810, -1619.051513, 12.485718, 0.000000, -10.500000, -50.499996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2764, 805.071960, -1625.600097, 12.952806, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2636, 805.016967, -1626.221923, 13.122810, 0.000000, 0.000000, -115.799980, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2636, 805.194152, -1624.692626, 13.122810, 0.000000, 0.000000, 135.599945, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2764, 807.834350, -1622.564331, 12.952806, 0.000000, 0.000000, 42.899997, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2636, 807.030151, -1623.145385, 13.122810, 0.000000, 0.000000, -169.300079, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2636, 808.595336, -1621.837158, 13.122810, 0.000000, 0.000000, 41.299915, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19865, 792.014831, -1624.264892, 12.262808, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19865, 792.014831, -1606.974975, 12.262808, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19865, 792.014831, -1611.985595, 12.262808, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19865, 792.024841, -1615.274902, 12.262808, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19865, 794.548156, -1614.994140, 12.262808, 0.000000, 0.000000, -89.999984, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3929, 798.448303, -1603.970214, 12.246912, -7.500002, 67.000053, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3929, 797.606018, -1603.069580, 12.348441, -23.099994, 77.500091, -88.099983, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3929, 798.644409, -1602.476074, 12.413669, -23.099994, 72.200103, -28.700008, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3929, 797.819152, -1601.373901, 12.428954, -23.099994, 62.000102, -28.700008, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3929, 798.900939, -1601.078369, 12.367092, -25.499998, 62.000102, -90.599975, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3929, 798.355834, -1599.954345, 12.338791, -12.399992, 62.000102, -90.599975, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1280, 801.523071, -1606.982910, 12.932801, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1280, 792.481811, -1606.986694, 12.932801, 0.000000, 0.000000, -179.299957, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1280, 792.535766, -1611.406372, 12.932801, 0.000000, 0.000000, -179.299957, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3462, 794.819641, -1601.485595, 13.698760, 0.000000, 0.000000, -133.600036, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19279, 795.259521, -1600.957641, 12.587946, 17.300003, 3.199999, 139.899932, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1355, 796.348449, -1611.073242, 12.734931, 0.000000, 0.000000, -39.200000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1355, 796.399719, -1611.120727, 13.514932, 0.000000, 0.000000, 47.100002, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19637, 798.048950, -1609.594726, 13.410015, -14.800003, 0.000000, 42.799999, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19638, 797.584533, -1610.008666, 13.410275, -14.600012, 0.000000, 42.099994, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19636, 797.109863, -1610.419067, 13.407596, -14.400001, 0.000000, 42.300010, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19793, 798.193115, -1609.745483, 13.390333, 0.000000, 0.000000, 42.299999, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19793, 797.734313, -1610.162719, 13.390333, 0.000000, 0.000000, 42.299999, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19793, 797.261108, -1610.593139, 13.390333, 0.000000, 0.000000, 42.299999, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 803.875549, -1607.394897, 15.876684, 0.000000, 0.000000, -138.700073, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 802.282958, -1608.794067, 15.876684, 0.000000, 0.000000, -138.700073, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 800.622558, -1610.253051, 15.876684, 0.000000, 0.000000, -138.700073, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 798.969787, -1611.704589, 15.876684, 0.000000, 0.000000, -138.700073, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 799.578308, -1611.170166, 15.876684, 0.000000, 0.000000, -138.700073, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 801.261169, -1609.691772, 15.876684, 0.000000, 0.000000, -138.700073, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 802.688720, -1608.437866, 15.876684, 0.000000, 0.000000, -138.700073, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2345, 804.259155, -1607.058105, 15.876684, 0.000000, 0.000000, -138.700073, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19812, 792.511413, -1615.475463, 12.972809, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19812, 793.241638, -1615.325317, 12.972809, 0.000000, 0.000000, -47.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19812, 792.778747, -1615.383544, 13.952813, 0.000000, 0.000000, -115.400001, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1333, 793.274536, -1626.070922, 13.382813, 0.000000, 0.000000, -178.999969, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1334, 796.847229, -1625.970092, 13.262802, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1339, 795.130737, -1625.725585, 13.212803, 0.000000, 0.000000, -125.199996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1358, 801.556152, -1624.155761, 13.702796, 0.000000, 0.000000, -43.099945, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(938, 808.487670, -1580.149780, 15.634449, 0.000000, 0.000000, -21.299999, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(938, 804.378234, -1578.545532, 15.634449, 0.000000, 0.000000, -21.299999, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(938, 812.363220, -1581.660278, 15.634449, 0.000000, 0.000000, -21.299999, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(639, 805.479675, -1578.313476, 15.074460, 0.000000, 0.000000, 69.300033, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(639, 810.755676, -1580.307617, 14.744458, 0.000000, 0.000000, 69.300033, -1, -1, -1, 300.00, 300.00); 

	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "2018-09-16 13:20:30" by "N0rdic"
		Created by "Gage_Manson"
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Jefferson station interior
	interior = 4;
	tmpobjid = CreateDynamicObject(18981, 1305.957885, 1294.100463, 9.580310, 0.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10023, "bigwhitesfe", "archgrnd2_SFE", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1293.785278, 1293.032714, 11.780305, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1290.113403, 1291.092529, 11.780305, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1290.113403, 1295.072875, 11.780305, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(11714, 1293.883178, 1293.086425, 11.310309, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12855, "cunte_cop", "sw_copdoor1", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.838989, 1295.807983, 11.780314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.859008, 1290.377075, 11.780314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.698852, 1288.817016, 11.770306, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4877, "downtown1_las", "GB_nastybar14", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.698852, 1297.307495, 11.770313, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4877, "downtown1_las", "GB_nastybar14", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.828979, 1297.308105, 9.110324, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.828979, 1288.807006, 9.110324, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.838989, 1298.888427, 11.780314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.838989, 1287.317626, 11.780314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1294.702758, 1297.314697, 10.870321, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1294.702758, 1288.863037, 10.870321, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 1299.938232, 1295.497802, 12.540313, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19929, 1301.852905, 1295.382690, 10.080310, 0.000007, 360.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19929, 1299.831298, 1297.412597, 10.080310, 0.000000, 360.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1305.701171, 1295.397583, 11.780314, 0.000000, 0.000014, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19930, 1303.839111, 1295.386230, 10.080310, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19930, 1305.019653, 1295.386230, 10.080310, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19929, 1299.831298, 1300.272949, 10.080310, 0.000000, 360.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1302.042358, 1295.039672, 12.700304, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1301.051635, 1295.039672, 9.200301, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1304.261962, 1295.039672, 9.200301, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1299.501464, 1296.560546, 9.200301, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1299.501464, 1299.770874, 9.200301, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1300.230346, 1301.106689, 11.780314, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1304.013671, 1295.069702, 12.700304, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1299.513183, 1297.579345, 12.700304, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1299.513183, 1299.769775, 12.700304, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.698852, 1300.369995, 11.770313, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4877, "downtown1_las", "GB_nastybar14", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.828979, 1300.370605, 9.110323, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1294.702758, 1300.377197, 10.870321, 0.000000, 0.000007, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.838989, 1301.969116, 11.780314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19398, 1296.231933, 1302.171020, 11.760320, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1297.897216, 1301.838745, 11.780314, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1298.629150, 1301.106689, 11.780314, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1298.619140, 1302.557495, 11.780314, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1300.219482, 1302.557495, 11.780314, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1300.958618, 1301.838745, 11.780314, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.848999, 1302.549072, 11.780314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.838989, 1305.639160, 11.780314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.698852, 1304.041992, 11.770313, 0.000000, 0.000037, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4877, "downtown1_las", "GB_nastybar14", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.828979, 1304.042602, 9.110323, 0.000000, 0.000037, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1294.702758, 1304.049194, 10.870321, 0.000000, 0.000037, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1299.704467, 1306.083618, 11.780304, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1300.667846, 1302.517456, 11.780314, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1304.958862, 1302.547485, 11.780314, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1305.701171, 1296.997802, 11.780314, 0.000000, 0.000014, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1305.681152, 1301.118164, 11.780314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1309.334350, 1306.083618, 11.780304, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.698852, 1285.752197, 11.770313, 0.000000, 0.000045, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4877, "downtown1_las", "GB_nastybar14", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.828979, 1285.752807, 9.110323, 0.000000, 0.000045, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 1294.702758, 1285.759399, 10.870321, 0.000000, 0.000045, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1294.838989, 1284.267333, 11.780314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1303.918701, 1284.783325, 11.780304, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1299.147094, 1283.483764, 11.780304, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1305.461914, 1289.558349, 11.780307, 0.000014, 0.000000, 89.999954, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1305.702148, 1292.990234, 11.780307, 0.000000, -0.000014, 179.999908, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1305.702148, 1289.781372, 11.780307, 0.000000, -0.000014, 179.999908, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(11714, 1305.591430, 1292.120361, 11.320306, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17036, "cuntwbt", "carparkdoor1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(11714, 1305.801635, 1292.120361, 11.320305, 0.000000, 0.000014, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17036, "cuntwbt", "carparkdoor1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(2190, 1304.783935, 1295.040283, 10.990313, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 12855, "cunte_cop", "sw_PD", 0x00000000);
	tmpobjid = CreateDynamicObject(2190, 1301.943847, 1295.040283, 10.990313, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 12855, "cunte_cop", "sw_PD", 0x00000000);
	tmpobjid = CreateDynamicObject(2190, 1299.492919, 1297.091186, 10.990313, 0.000000, 0.000000, 450.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 12855, "cunte_cop", "sw_PD", 0x00000000);
	tmpobjid = CreateDynamicObject(2190, 1299.492919, 1299.431640, 10.990313, 0.000000, 0.000000, 450.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 12855, "cunte_cop", "sw_PD", 0x00000000);
	tmpobjid = CreateDynamicObject(1806, 1304.723876, 1296.349731, 10.070309, 0.000000, 0.000000, -177.699996, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17547, "eastbeach4a_lae2", "bluestucco1", 0x00000000);
	tmpobjid = CreateDynamicObject(1806, 1300.940795, 1296.044799, 10.070309, 0.000000, 0.000000, -149.900009, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17547, "eastbeach4a_lae2", "bluestucco1", 0x00000000);
	tmpobjid = CreateDynamicObject(1806, 1300.376098, 1296.917846, 10.070309, 0.000000, 0.000000, 75.999969, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17547, "eastbeach4a_lae2", "bluestucco1", 0x00000000);
	tmpobjid = CreateDynamicObject(1806, 1300.475219, 1299.719726, 10.070309, 0.000000, 0.000000, 101.999969, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17547, "eastbeach4a_lae2", "bluestucco1", 0x00000000);
	tmpobjid = CreateDynamicObject(19807, 1299.982543, 1296.413330, 11.080313, 0.000000, 0.000000, 119.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	tmpobjid = CreateDynamicObject(19807, 1300.006713, 1298.766357, 11.080313, 0.000000, 0.000000, 122.199966, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	tmpobjid = CreateDynamicObject(19807, 1301.447998, 1295.408081, 11.080313, 0.000000, 0.000000, -178.000045, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	tmpobjid = CreateDynamicObject(19807, 1304.310180, 1295.418334, 11.080313, 0.000000, 0.000000, -178.000045, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	tmpobjid = CreateDynamicObject(19787, 1303.831909, 1286.428833, 12.270315, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "policeshield", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1295.255371, 1285.765869, 10.080309, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1295.255371, 1286.474243, 10.080309, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1295.255371, 1287.113769, 10.080309, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1295.255371, 1287.794067, 10.080309, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1295.255371, 1288.454101, 10.080309, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1295.255371, 1289.172485, 10.080309, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1297.686279, 1288.361816, 10.080309, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1297.686279, 1287.641357, 10.080309, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1297.686279, 1286.913452, 10.080309, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1297.686279, 1286.215576, 10.080309, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1298.356933, 1286.215576, 10.080309, 0.000000, 0.000000, 450.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1298.356933, 1286.866210, 10.080309, 0.000000, 0.000000, 450.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1298.356933, 1287.616577, 10.080309, 0.000000, 0.000000, 450.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1298.356933, 1288.337280, 10.080309, 0.000000, 0.000000, 450.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1300.367553, 1288.361816, 10.080309, -0.000007, 0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1300.367553, 1287.641357, 10.080309, -0.000007, 0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1300.367553, 1286.913452, 10.080309, -0.000007, 0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1300.367553, 1286.215576, 10.080309, -0.000007, 0.000000, -89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1301.038208, 1286.215576, 10.080309, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1301.038208, 1286.866210, 10.080309, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1301.038208, 1287.616577, 10.080309, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1301.038208, 1288.337280, 10.080309, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1295.255371, 1285.045166, 10.080309, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19994, 1295.255371, 1284.354858, 10.080309, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(2611, 1300.297363, 1283.633300, 11.920310, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 18065, "ab_sfammumain", "gun_floor1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 19418, "police_things", "badge01", 0x00000000);
	tmpobjid = CreateDynamicObject(2611, 1297.505859, 1283.643310, 11.920310, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 18065, "ab_sfammumain", "gun_floor1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 19099, "policecaps", "policecap2", 0x00000000);
	tmpobjid = CreateDynamicObject(2412, 1294.220092, 1291.713989, 10.080309, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	tmpobjid = CreateDynamicObject(2412, 1294.220092, 1295.134765, 10.080309, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_SPEAKER_c", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1306.341796, 1293.966796, 11.780314, 0.000000, 0.000014, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1307.152099, 1294.687500, 11.780314, 0.000000, 0.000014, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1306.421875, 1295.407836, 11.780314, 0.000000, 0.000014, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1317.263793, 1302.552856, 11.780303, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1313.014892, 1307.423461, 11.780303, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(11714, 1312.900756, 1304.331420, 11.320304, 0.000000, 0.000014, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17036, "cuntwbt", "carparkdoor1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1312.857421, 1304.134399, 11.970314, -0.000022, 0.000000, -89.999931, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{222323} PROCESSING", 120, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1312.857421, 1302.753173, 11.970314, -0.000022, 0.000000, -89.999931, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{222323} PROCESSING", 120, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(18981, 1330.955444, 1294.100463, 9.580309, 0.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10023, "bigwhitesfe", "archgrnd2_SFE", 0x00000000);
	tmpobjid = CreateDynamicObject(19387, 1313.016235, 1300.932495, 11.780314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19387, 1313.016235, 1297.732299, 11.780314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1313.011230, 1295.327514, 11.780314, 0.000000, 0.000014, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1313.261474, 1294.606811, 15.280315, 0.000000, 0.000014, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1313.261474, 1290.466430, 11.780312, 0.000000, 0.000014, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1313.011230, 1289.586303, 11.780314, 0.000000, 0.000014, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1318.875244, 1294.610961, 11.780303, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1318.875244, 1290.470703, 11.780303, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1318.875244, 1290.470703, 15.280305, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1318.875244, 1294.610961, 15.280297, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1313.261474, 1294.606811, 11.780314, 0.000000, 0.000014, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1313.261474, 1290.466430, 15.280314, 0.000000, 0.000014, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1320.393066, 1294.827270, 15.280319, 0.000000, 0.000014, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1320.393066, 1290.266601, 15.280319, 0.000000, 0.000014, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 1331.745971, 1294.100463, 13.760322, 0.000000, 90.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10023, "bigwhitesfe", "archgrnd2_SFE", 0x00000000);
	tmpobjid = CreateDynamicObject(19929, 1305.413208, 1299.061767, 10.080309, 0.000000, 360.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1305.661743, 1299.250366, 9.220300, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1305.671142, 1301.818847, 11.780314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(1806, 1304.610473, 1299.177734, 10.070308, 0.000000, 0.000000, -113.099967, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17547, "eastbeach4a_lae2", "bluestucco1", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1306.444335, 1284.674438, 11.780303, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4809, "freeway_las", "whitetile_plain_hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1310.853881, 1281.822143, 11.780303, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4809, "freeway_las", "whitetile_plain_hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1320.472900, 1281.822143, 11.780303, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4809, "freeway_las", "whitetile_plain_hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1311.343261, 1289.550659, 11.790304, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19398, 1308.141479, 1289.561035, 11.790321, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19398, 1308.121459, 1289.500976, 11.790321, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4809, "freeway_las", "whitetile_plain_hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1311.323242, 1289.500610, 11.790304, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4809, "freeway_las", "whitetile_plain_hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1306.894775, 1283.093505, 8.710303, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1305.362426, 1287.839599, 8.700308, 0.000000, -0.000014, 269.999908, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1309.432861, 1282.443481, 8.710303, 0.000000, -0.000007, -0.000182, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1310.245605, 1282.455688, 8.710303, 0.000000, 0.000000, -179.799926, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1309.845214, 1282.455200, 8.710303, 0.000000, 0.000000, -179.799926, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1312.963623, 1287.850463, 11.790304, 0.000000, 0.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4809, "freeway_las", "whitetile_plain_hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19367, 1312.963623, 1282.979736, 11.790304, 0.000000, 0.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4809, "freeway_las", "whitetile_plain_hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1317.853759, 1287.034301, 11.780303, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4809, "freeway_las", "whitetile_plain_hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1318.883544, 1282.355346, 11.780303, 0.000000, 0.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4809, "freeway_las", "whitetile_plain_hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19843, 1318.899291, 1285.109985, 10.050312, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "ws_drain_small", 0x00000000);
	tmpobjid = CreateDynamicObject(19843, 1318.899291, 1283.779418, 10.050312, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "ws_drain_small", 0x00000000);
	tmpobjid = CreateDynamicObject(19843, 1318.899291, 1282.418334, 10.050312, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "ws_drain_small", 0x00000000);
	tmpobjid = CreateDynamicObject(19843, 1317.487915, 1281.787719, 10.050312, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "ws_drain_small", 0x00000000);
	tmpobjid = CreateDynamicObject(19843, 1316.077270, 1281.787719, 10.050312, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "ws_drain_small", 0x00000000);
	tmpobjid = CreateDynamicObject(19843, 1314.686889, 1281.787719, 10.050312, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "ws_drain_small", 0x00000000);
	tmpobjid = CreateDynamicObject(19843, 1312.956420, 1282.408325, 10.050312, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "ws_drain_small", 0x00000000);
	tmpobjid = CreateDynamicObject(19843, 1312.956420, 1283.718505, 10.050312, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "ws_drain_small", 0x00000000);
	tmpobjid = CreateDynamicObject(19929, 1312.495239, 1282.946044, 9.710303, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19929, 1312.495239, 1287.997558, 9.710303, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 1300.557739, 1294.230590, 14.010266, 0.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3967, "cj_airprt", "ceiling_256", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 1317.148071, 1294.230590, 17.510269, 0.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3967, "cj_airprt", "ceiling_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1313.086425, 1294.610961, 15.280303, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1320.397094, 1294.610961, 18.460308, 180.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13131, "cunte_blockammo", "newall10", 0x00000000);
	tmpobjid = CreateDynamicObject(2047, 1313.203857, 1292.576660, 15.284987, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12853, "cunte_gas01", "starspangban1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(2047, 1305.602539, 1295.746948, 12.624987, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12853, "cunte_gas01", "starspangban1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 1299.509155, 1300.975585, 12.460318, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2a2b2b} LOS SANTOS", 130, "Ariel", 30, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1299.439086, 1300.975585, 12.370319, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2a2b2b} JEFFERSON STATION", 130, "Ariel", 50, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1300.770019, 1300.975585, 12.460318, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2a2b2b} POLICE DPT.", 130, "Ariel", 30, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 1299.939208, 1300.975585, 12.190315, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{2a2b2b} ''TO PROTECT AND SERVE''", 130, "Ariel", 30, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(18981, 1325.545288, 1275.212036, 14.010266, 0.000000, 90.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3967, "cj_airprt", "ceiling_256", 0x00000000);
	/*tmpobjid = CreateDynamicObject(1495, 1295.465332, 1302.079589, 10.005625, 0.000007, 0.000000, 359.999969, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 6293, "lawland2", "lightglass", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(1495, 1295.465332, 1302.119628, 10.005625, 0.000007, 0.000000, 449.999969, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 6293, "lawland2", "lightglass", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);*/
	tmpobjid = CreateDynamicObject(11714, 1320.282592, 1292.550781, 15.480317, 0.000000, 0.000014, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17036, "cuntwbt", "carparkdoor1_256", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(19808, 1304.885864, 1295.637573, 11.020321, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19808, 1301.926025, 1295.647583, 11.020321, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19808, 1300.105834, 1297.138061, 11.020321, 0.000000, 0.000000, 450.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19808, 1300.105834, 1299.528808, 11.020321, 0.000000, 0.000000, 450.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2007, 1302.614135, 1295.699218, 9.530303, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2007, 1303.594482, 1295.699218, 9.530303, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2007, 1300.203979, 1298.279174, 9.530303, 0.000000, 0.000000, 450.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1776, 1303.394775, 1288.812500, 11.180315, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19825, 1303.785888, 1286.432006, 13.060313, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(955, 1303.347778, 1284.318481, 10.460306, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11728, 1305.750732, 1293.810302, 11.700310, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14416, 1317.346191, 1292.497314, 11.050313, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1314.771240, 1289.609619, 11.950737, -34.499988, 90.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1316.668334, 1289.609619, 13.253467, -34.499988, 90.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1318.548095, 1289.609619, 14.544879, -34.499988, 90.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1314.550659, 1295.461669, 12.272150, -34.499988, 270.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1316.504516, 1295.461669, 13.614533, -34.499988, 270.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1318.491088, 1295.461669, 14.979572, -34.499988, 270.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1569, 1312.958007, 1301.705688, 10.080309, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19802, 1301.398315, 1302.556152, 10.070309, 0.000000, 0.000000, -97.800003, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19802, 1304.142578, 1302.561523, 10.070309, 0.000000, 0.000000, -64.099967, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1808, 1305.380737, 1300.791259, 10.040308, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2007, 1305.105590, 1298.139282, 9.540302, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2007, 1305.105590, 1300.000976, 9.540302, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2201, 1305.458984, 1299.995483, 10.980311, 0.000000, 0.000000, -89.800003, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1569, 1312.958007, 1297.004272, 10.080309, 0.000000, 0.000000, 450.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1306.730224, 1287.584716, 10.270314, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1306.730224, 1286.934082, 10.270314, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1306.730224, 1286.253417, 10.270314, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1306.730224, 1285.583007, 10.270314, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1306.730224, 1284.922363, 10.270314, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1306.730224, 1284.262084, 10.270314, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1306.730224, 1283.592041, 10.270314, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1306.730224, 1282.921386, 10.270314, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1306.730224, 1282.250732, 10.270314, 0.000007, 0.000000, 89.999977, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1309.597412, 1282.252807, 10.270314, 0.000014, 0.000000, -90.000183, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1309.597412, 1282.903442, 10.270314, 0.000014, 0.000000, -90.000183, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1309.597412, 1283.584106, 10.270314, 0.000014, 0.000000, -90.000183, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1309.597412, 1284.254516, 10.270314, 0.000014, 0.000000, -90.000183, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1309.597412, 1284.915161, 10.270314, 0.000014, 0.000000, -90.000183, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1309.597412, 1285.575439, 10.270314, 0.000014, 0.000000, -90.000183, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1309.597412, 1286.245483, 10.270314, 0.000014, 0.000000, -90.000183, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1309.597412, 1286.916137, 10.270314, 0.000014, 0.000000, -90.000183, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1310.065307, 1286.916381, 10.270314, 0.000007, 0.000000, 90.200004, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1310.067626, 1286.265747, 10.270314, 0.000007, 0.000000, 90.200004, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1310.069946, 1285.585083, 10.270314, 0.000007, 0.000000, 90.200004, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1310.072387, 1284.914672, 10.270314, 0.000007, 0.000000, 90.200004, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1310.074584, 1284.254028, 10.270314, 0.000007, 0.000000, 90.200004, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1310.076904, 1283.593750, 10.270314, 0.000007, 0.000000, 90.200004, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1310.079345, 1282.923706, 10.270314, 0.000007, 0.000000, 90.200004, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11729, 1310.081665, 1282.253051, 10.270314, 0.000007, 0.000000, 90.200004, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14842, 1314.604858, 1282.796264, 12.000327, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14842, 1317.896972, 1283.476806, 12.000327, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11707, 1314.398559, 1286.874145, 11.300314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11707, 1315.549194, 1286.874145, 11.300314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11707, 1316.790283, 1286.874145, 11.300314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11707, 1318.021240, 1286.874145, 11.300314, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(955, 1311.869873, 1290.126220, 10.480317, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1776, 1310.586303, 1290.047729, 11.150316, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19942, 1305.397460, 1298.118530, 11.100311, 0.000000, 0.000000, -122.400001, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19814, 1309.776855, 1289.659301, 10.360316, 0.000000, 0.000000, 180.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19814, 1303.817504, 1285.047607, 10.360316, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19835, 1301.707397, 1295.359863, 11.090316, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11706, 1303.577148, 1287.799682, 10.060310, 0.000000, 0.000000, 89.400001, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14527, 1302.478759, 1298.749877, 11.290324, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1298.576049, 1285.720092, 14.010313, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1298.576049, 1291.740966, 14.010313, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1303.368530, 1291.740966, 14.010313, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1297.435546, 1297.721679, 14.010313, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1299.015991, 1304.123168, 14.010313, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1308.087768, 1304.123168, 14.010313, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1308.087768, 1298.712402, 14.010313, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1308.087768, 1292.460937, 14.010313, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1307.547241, 1284.728271, 14.010313, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1310.829711, 1284.728271, 14.010313, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1893, 1315.568237, 1292.761230, 17.490293, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1569, 1307.327758, 1289.483032, 10.030307, 0.000000, 0.000000, -114.499984, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19826, 1309.147949, 1289.407958, 11.560310, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2690, 1307.338745, 1294.634643, 10.960309, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2961, 1307.269042, 1294.662109, 11.510309, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11710, 1305.817138, 1292.131713, 12.770316, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2690, 1298.537719, 1300.905761, 10.960309, 0.000000, 0.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2961, 1298.548828, 1300.971923, 11.510309, 0.000000, 0.000000, 360.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11710, 1293.976562, 1292.931884, 12.770316, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1300.626831, 1286.708374, 9.400306, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1301.187377, 1286.708374, 9.400306, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1298.456665, 1286.708374, 9.400306, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1297.956176, 1286.708374, 9.400306, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1295.485473, 1287.528930, 9.400306, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2372, 1295.485473, 1284.828247, 9.400306, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2010, 1305.203125, 1290.052124, 10.070314, 0.000000, 0.000000, -117.699974, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2010, 1295.432006, 1290.303100, 10.080309, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 

	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "2018-09-16 13:19:33" by "N0rdic"
		Created by "N0rdic"
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(3867, 1560.181030, -1716.120971, 14.627319, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(3867, 1560.183593, -1635.500854, 14.627319, 0.000000, 0.000000, -179.500030, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(3867, 1552.451782, -1659.632202, 14.627319, 0.000000, 0.000000, -89.899993, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(3867, 1552.507812, -1691.401855, 14.627319, 0.000000, 0.000000, -89.899993, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	tmpobjid = CreateDynamicObject(3867, 1584.700439, -1636.217773, 6.527285, 0.000000, 0.000000, -179.500030, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(1521, 1555.001098, -1675.574462, 16.269138, 0.000000, 0.000000, -90.199951, -1, -1, -1, 300.00, 300.00); 
	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "2018-09-16 13:21:39" by "N0rdic"
		Created by ""
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////

	tmpobjid = CreateDynamicObject(18765, 447.042877, -1799.158203, 6.966858, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3241, "conhooses", "des_greyslats", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 443.752685, -1798.767822, 6.996860, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3241, "conhooses", "des_greyslats", 0x00000000);
	tmpobjid = CreateDynamicObject(18765, 445.352600, -1807.355346, 6.946858, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3241, "conhooses", "des_greyslats", 0x00000000);
	tmpobjid = CreateDynamicObject(11714, 438.733245, -1796.761962, 6.516876, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12855, "cunte_cop", "sw_copdoor1", 0x00000000);
	tmpobjid = CreateDynamicObject(11245, 438.857238, -1794.180908, 8.545457, 0.000000, -14.099992, 179.699829, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12853, "cunte_gas01", "starspangban1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 438.198791, -1789.426879, 4.546875, 0.000000, 0.000000, -89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 435.201232, -1788.948608, 4.046868, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4600, "theatrelan2", "sl_whitewash1", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 448.058959, -1789.426879, 4.546875, 0.000000, 0.000000, -89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 451.051269, -1788.948608, 4.046868, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4600, "theatrelan2", "sl_whitewash1", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 443.089141, -1789.426879, 4.546875, 0.000000, 0.000000, -89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 420.738861, -1792.939086, 4.546875, 0.000000, 0.000000, 0.000030, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 421.211517, -1789.937988, 4.046868, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4600, "theatrelan2", "sl_whitewash1", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 420.738861, -1797.929809, 4.546875, 0.000000, 0.000000, 0.000030, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 420.738861, -1802.920654, 4.546875, 0.000000, 0.000000, 0.000030, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 420.738861, -1810.531127, 4.546875, 0.000000, 0.000000, 0.000030, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 420.738861, -1815.522460, 4.546875, 0.000000, 0.000000, 0.000030, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 421.221527, -1818.521728, 4.046868, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4600, "theatrelan2", "sl_whitewash1", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 421.211517, -1804.929077, 4.046868, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4600, "theatrelan2", "sl_whitewash1", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 421.211517, -1807.539672, 4.046868, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4600, "theatrelan2", "sl_whitewash1", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 421.738372, -1786.025512, 4.006873, 0.000000, 0.000000, 55.099990, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4600, "theatrelan2", "sl_whitewash1", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 421.350524, -1785.642944, 4.876879, 0.000000, 0.000000, 145.399932, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{202021} SANTA MARIA", 130, "Ariel", 45, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 421.144592, -1785.499755, 4.736876, 0.000000, 0.000000, 145.399932, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{202021} STATION", 130, "Ariel", 45, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 421.317535, -1785.619628, 4.936879, 0.000000, 0.000000, 145.399932, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{202021} LOS SANTOS POLICE DPT.", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 421.161163, -1785.511352, 4.546875, 0.000000, 0.000000, 145.399932, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{202021} ''TO PROTECT AND SERVE''", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 420.609558, -1785.129516, 4.466876, 0.000000, 0.000000, 145.399932, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{202021} Est. 1988", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19940, 421.739288, -1786.028930, 5.756886, 0.000000, 0.000000, 55.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 421.739288, -1786.028930, 4.566882, 0.000000, 0.000000, 55.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 424.208618, -1818.877319, 4.546875, 0.000000, 0.000000, -89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 429.208557, -1818.877319, 4.546875, 0.000000, 0.000000, -89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 432.161865, -1818.521728, 4.046868, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4600, "theatrelan2", "sl_whitewash1", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 435.231689, -1818.521728, 4.046868, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4600, "theatrelan2", "sl_whitewash1", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 438.218414, -1818.887329, 4.546875, 0.000000, 0.000000, -89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 443.218200, -1818.887329, 4.546875, 0.000000, 0.000000, -89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 448.208099, -1818.887329, 4.546875, 0.000000, 0.000000, -89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 454.887725, -1818.957397, 4.546875, 0.000000, 0.000000, -89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 459.887847, -1818.957397, 4.546875, 0.000000, 0.000000, -89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 451.951599, -1818.521728, 4.046868, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4600, "theatrelan2", "sl_whitewash1", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 464.887756, -1818.957397, 4.546875, 0.000000, 0.000000, -89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 13659, "8bars", "Upt_Fence_Mesh", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 467.871826, -1818.521728, 4.046868, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4600, "theatrelan2", "sl_whitewash1", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 450.961639, -1818.521728, 4.046868, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4600, "theatrelan2", "sl_whitewash1", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 420.929077, -1806.267333, 4.641366, 0.000000, 24.700002, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4600, "theatrelan2", "sl_whitewash1", 0x00000000);
	tmpobjid = CreateDynamicObject(3034, 440.322509, -1806.121337, 6.916881, 0.000000, 0.000000, -89.900047, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18232, "cw_truckstopcs_t", "des_roswin3", 0x00000000);
	tmpobjid = CreateDynamicObject(3034, 438.743896, -1801.462036, 6.916881, 0.000000, 0.000000, -89.900047, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18232, "cw_truckstopcs_t", "des_roswin3", 0x00000000);
	tmpobjid = CreateDynamicObject(3034, 440.328826, -1809.761840, 6.916881, 0.000000, 0.000000, -89.900047, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18232, "cw_truckstopcs_t", "des_roswin3", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 438.878753, -1800.436767, 6.036877, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 438.878753, -1802.437255, 6.036877, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 440.468811, -1805.016845, 6.036877, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 440.468811, -1806.936645, 6.036877, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 440.468811, -1808.927246, 6.036877, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 440.468811, -1810.918457, 6.036877, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(2743, 425.672943, -1814.775634, 6.992928, 0.000000, 0.000000, 137.300003, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "concretenewb256", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 4835, "airoads_las", "concretenewb256", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 4835, "airoads_las", "concretenewb256", 0x00000000);
	tmpobjid = CreateDynamicObject(2809, 425.676635, -1814.777832, 6.974061, 0.000000, 0.000000, 139.899932, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "concretenewb256", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 4835, "airoads_las", "concretenewb256", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 4835, "airoads_las", "concretenewb256", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 4835, "airoads_las", "concretenewb256", 0x00000000);
	tmpobjid = CreateDynamicObject(19521, 425.748229, -1814.870727, 8.334218, -24.100000, -85.500015, -52.600009, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "concretenewb256", 0x00000000);
	tmpobjid = CreateDynamicObject(19942, 425.550964, -1814.721313, 7.554067, -3.299998, 7.500000, -136.299987, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "concretenewb256", 0x00000000);
	tmpobjid = CreateDynamicObject(19773, 425.819458, -1814.975341, 7.424868, -8.699998, 0.000000, 140.699981, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "concretenewb256", 0x00000000);
	tmpobjid = CreateDynamicObject(334, 425.568847, -1814.746215, 7.578265, 6.900001, 153.799987, 51.999996, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "concretenewb256", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 425.284088, -1813.899169, 5.558973, 0.000000, 0.000000, 137.600234, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{202021} IN MEMORY OF", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 425.335784, -1813.946166, 5.468972, 0.000000, 0.000000, 137.600234, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{202021} CPT. THOMAS DUNN", 130, "Ariel", 18, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 425.188079, -1813.811767, 5.388970, 0.000000, 0.000000, 137.600234, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{202021} 1990-2017", 130, "Ariel", 18, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(3034, 445.661376, -1793.761962, 6.916881, 0.000000, 0.000000, 179.999893, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18232, "cw_truckstopcs_t", "des_roswin3", 0x00000000);
	tmpobjid = CreateDynamicObject(3034, 442.021362, -1793.761962, 6.916881, 0.000000, 0.000000, 179.999893, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18232, "cw_truckstopcs_t", "des_roswin3", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 444.758636, -1793.886352, 6.036877, 0.000000, 0.000000, -90.099937, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 446.748840, -1793.889892, 6.036877, 0.000000, 0.000000, -90.099937, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 440.919036, -1793.880004, 6.036877, 0.000000, 0.000000, -90.099937, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 442.768707, -1793.882812, 6.036877, 0.000000, 0.000000, -90.099937, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(3034, 452.040740, -1796.796875, 6.916881, 0.000000, 0.000000, 89.999885, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18232, "cw_truckstopcs_t", "des_roswin3", 0x00000000);
	tmpobjid = CreateDynamicObject(3034, 452.040740, -1801.246826, 6.916881, 0.000000, 0.000000, 89.999885, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18232, "cw_truckstopcs_t", "des_roswin3", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 451.978759, -1802.246704, 6.036877, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 451.978759, -1800.256713, 6.036877, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 451.978759, -1797.795654, 6.036877, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19940, 451.978759, -1795.794921, 6.036877, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 450.293334, -1794.112915, 5.889877, 0.000000, 0.000000, 179.900024, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{770303} AUTHORISED", 130, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 450.273315, -1794.112915, 5.809876, 0.000000, 0.000000, 179.900024, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{770303} PERSONNEL", 130, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 450.103240, -1794.112915, 5.729875, 0.000000, 0.000000, 179.900024, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{770303} ONLY", 130, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 450.084655, -1793.287475, 4.566668, -91.500091, 0.000000, 179.900024, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d502} FIRE EXIT", 130, "Ariel", 80, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 450.335510, -1793.007202, 4.573997, -91.500091, 0.000000, 179.900024, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d502} KEEP CLEAR", 130, "Ariel", 80, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 439.046508, -1807.030517, 4.556875, -89.999977, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 437.166503, -1807.030517, 4.556875, -89.999977, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 435.276519, -1807.030517, 4.556875, -89.999977, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 439.046508, -1810.050659, 4.556875, -89.999992, 75.167419, 75.167411, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 437.166503, -1810.050659, 4.556875, -89.999992, 75.167419, 75.167411, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 435.276519, -1810.050659, 4.556875, -89.999992, 75.167419, 75.167411, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 425.376525, -1804.140136, 4.556875, -89.999992, 82.461486, 82.461463, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 423.496520, -1804.140136, 4.556875, -89.999992, 82.461486, 82.461463, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 421.606536, -1804.140136, 4.556875, -89.999992, 82.461486, 82.461463, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 425.376525, -1801.109252, 4.556875, -89.999992, 86.214508, 86.214469, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 423.496520, -1801.109252, 4.556875, -89.999992, 86.214508, 86.214469, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 421.606536, -1801.109252, 4.556875, -89.999992, 86.214508, 86.214469, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 425.376525, -1798.018920, 4.556875, -89.999992, 89.052375, 89.052291, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 423.496520, -1798.018920, 4.556875, -89.999992, 89.052375, 89.052291, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 421.606536, -1798.018920, 4.556875, -89.999992, 89.052375, 89.052291, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 425.376525, -1794.977905, 4.556875, -89.999992, 89.763145, 89.763023, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 423.496520, -1794.977905, 4.556875, -89.999992, 89.763145, 89.763023, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 421.606536, -1794.977905, 4.556875, -89.999992, 89.763145, 89.763023, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 425.376525, -1791.877563, 4.556875, -89.999992, 89.881629, 89.881492, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 423.496520, -1791.877563, 4.556875, -89.999992, 89.881629, 89.881492, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 421.606536, -1791.877563, 4.556875, -89.999992, 89.881629, 89.881492, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{d8d8d6} ____________________________", 10, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(997, 437.494842, -1798.927001, 4.655423, 0.000000, -23.999992, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(997, 437.494842, -1794.566894, 4.655423, 0.000000, -23.999992, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(647, 438.496246, -1786.721557, 4.136872, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(647, 440.586639, -1787.536010, 4.086873, 0.000000, 0.000000, -94.699996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(647, 447.140625, -1787.392089, 4.426876, 0.000000, 0.000000, -94.699996, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(647, 444.139190, -1787.104370, 3.946871, 0.000000, 0.000000, 164.599990, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11714, 450.385284, -1794.149169, 5.799876, 0.000000, 0.000000, 89.900032, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1692, 443.794616, -1798.361572, 10.276865, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1692, 444.824615, -1807.432006, 10.276865, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "2018-09-16 13:17:12" by "N0rdic"
		Created by "N0rdic"
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Remove Buildings///////////////////////////////////////////////////////////////////////////////////////////////


	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(6334, 472.437988, -1509.449951, 30.125000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 7, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 8, 16640, "a51", "ws_metalpanel1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 9, 8395, "pyramid", "luxorwindow01_128", 0xFFAB63B2);
	SetDynamicObjectMaterial(tmpobjid, 10, 10041, "archybuild10", "whitedecosfe1", 0x00000000);
	tmpobjid = CreateDynamicObject(11714, 488.619506, -1557.424316, 18.027156, 0.000000, 0.000000, 32.400012, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5986, "chateau_lawn", "doorkb_1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(18764, 486.486450, -1558.774169, 18.779737, 0.000000, 0.000000, 32.400001, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
	tmpobjid = CreateDynamicObject(11714, 488.614746, -1557.417236, 15.527173, -179.799972, 0.000000, 32.400012, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5986, "chateau_lawn", "doorkb_1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 488.663787, -1557.417724, 20.646549, 0.000006, -0.000003, 122.399909, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 488.432189, -1557.013061, 20.366548, 0.000018, -0.000012, 122.399864, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{f294fc} MALIBU", 120, "Fixedsys", 60, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 488.421417, -1556.996215, 20.366548, 0.000018, -0.000012, 122.399864, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{f1edf2} MALIBU", 120, "Fixedsys", 60, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 488.072998, -1556.448120, 19.936538, 0.000018, -0.000012, 122.399864, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{eca3ff} CLUB", 120, "Fixedsys", 30, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 488.399932, -1556.962890, 20.496549, 0.000018, -0.000012, 122.399864, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{eca3ff} THE", 120, "Fixedsys", 30, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 488.399932, -1556.962890, 20.496549, 0.000018, -0.000012, 122.399864, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{eca3ff} THE", 120, "Fixedsys", 30, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 488.693328, -1557.426025, 19.792181, 0.000018, 89.799880, 122.399864, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{f9f9f9} RODEO", 120, "Fixedsys", 30, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(3040, 487.854339, -1557.871582, 19.292200, 0.000000, 0.000000, -57.799957, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 491.597625, -1557.580688, 14.348573, 0.000000, 0.000000, 32.399993, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 489.732940, -1554.641479, 14.538572, 0.000000, 0.000000, 32.399993, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
	tmpobjid = CreateDynamicObject(3935, 488.417449, -1557.526367, 22.032302, -28.600021, 0.000000, -55.299987, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14533, "pleas_dome", "ab_velvor", 0x00000000);
	tmpobjid = CreateDynamicObject(8330, 460.072021, -1500.745117, 38.309391, 0.000000, 0.000000, -80.900001, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "vinesign1_LAw", 0xFF666666);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0xFF666666);
	tmpobjid = CreateDynamicObject(8330, 460.111755, -1500.738769, 38.309391, 0.000000, 0.000000, -80.900001, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2669, "cj_chris", "cj_metalplate2", 0xFF999999);
	SetDynamicObjectMaterial(tmpobjid, 1, 2669, "cj_chris", "cj_metalplate2", 0xFF666666);
	tmpobjid = CreateDynamicObject(11714, 493.488281, -1510.951416, 20.692691, 0.000000, 0.000000, 4.699997, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18241, "cw_tempstuffcs_t", "des_metaldoor1", 0x00000000);
	tmpobjid = CreateDynamicObject(11714, 475.524993, -1498.833740, 20.672229, 0.000000, 0.000000, -4.099997, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18241, "cw_tempstuffcs_t", "des_metaldoor1", 0x00000000);
	tmpobjid = CreateDynamicObject(18763, 474.012481, -1498.722045, 19.449792, 0.000000, 0.000000, -4.399999, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 10756, "airportroads_sfse", "ws_white_wall1", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 491.889862, -1500.431396, 24.454214, 0.000000, 89.999977, -3.499999, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3902, "libertyhi3", "metfence2_64HV", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 491.734191, -1505.552612, 24.454214, 0.000000, 89.999977, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3902, "libertyhi3", "metfence2_64HV", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 491.909454, -1510.680786, 24.454214, 0.000000, 89.999977, 3.999999, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3902, "libertyhi3", "metfence2_64HV", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 492.259155, -1515.676513, 24.454214, 0.000000, 89.999977, 3.999999, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3902, "libertyhi3", "metfence2_64HV", 0x00000000);
	tmpobjid = CreateDynamicObject(19865, 492.920379, -1520.845703, 24.454214, 0.000000, 89.999977, 10.700007, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3902, "libertyhi3", "metfence2_64HV", 0x00000000);
	tmpobjid = CreateDynamicObject(2734, 493.437408, -1510.973999, 22.580659, 0.000000, 0.000000, -85.400024, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 8481, "csrsfence01", "sign_Caligulas", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(3505, 494.271392, -1568.128417, 16.051134, 0.000000, 0.000000, 66.200004, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(639, 486.834686, -1554.702636, 26.469863, 0.000000, 0.000000, -147.699890, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(639, 490.522033, -1560.253906, 26.469863, 0.000000, 0.000000, -145.399871, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(639, 491.811614, -1566.995239, 26.469863, 0.000000, 0.000000, 165.600173, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(639, 486.355682, -1571.372436, 26.469863, 0.000000, 0.000000, 89.400192, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(639, 479.226074, -1571.297485, 26.469863, 0.000000, 0.000000, 89.400192, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2773, 487.506713, -1553.631958, 17.508707, 4.899997, 0.000000, 31.000015, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19279, 486.229095, -1554.230468, 17.367019, 9.799991, -4.300000, 124.300033, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19279, 490.498870, -1560.957885, 16.774438, 9.799991, -4.300000, 124.300033, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2773, 485.946350, -1551.034667, 17.758407, 4.899997, 0.000000, 31.000015, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 493.806976, -1521.269531, 24.461442, 0.000000, 0.000000, 99.399993, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 493.265228, -1517.169555, 24.461442, 0.000000, 0.000000, 92.699966, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 493.060363, -1512.824584, 24.461442, 0.000000, 0.000000, 92.699966, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 492.852142, -1508.409667, 24.461442, 0.000000, 0.000000, 92.699966, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 492.641998, -1503.954956, 24.461442, 0.000000, 0.000000, 92.699966, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(14468, 492.862243, -1500.251831, 24.461442, 0.000000, 0.000000, 86.599990, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3494, 493.223754, -1506.699096, 20.411575, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3494, 493.493835, -1498.527343, 20.411575, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3494, 493.753845, -1514.755615, 20.411575, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3494, 494.983642, -1523.035278, 20.411575, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 

	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information (Market Station)////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "2018-09-30 15:07:40" by "N0rdic"
		Created by "N0rdic"
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	/*
	tmpobjid = CreateDynamicObject(1256, 814.484130, -1341.881958, 13.207447, 0.000000, 0.000000, 180.000000, -1, -1);
	SetDynamicObjectMaterial(tmpobjid, 0, 8412, "wddngchpl", "wddngchapelsign03_128", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 5134, "wasteland_las2", "concretenewb256", 0);
	tmpobjid = CreateDynamicObject(1256, 813.623291, -1341.901977, 13.207447, 0.000000, 0.000000, 360.000000, -1, -1);
	SetDynamicObjectMaterial(tmpobjid, 0, 8412, "wddngchpl", "wddngchapelsign03_128", 0);
	tmpobjid = CreateDynamicObject(1256, 814.484130, -1349.213989, 13.207447, 0.000000, 0.000000, 180.000000, -1, -1);
	SetDynamicObjectMaterial(tmpobjid, 0, 8412, "wddngchpl", "wddngchapelsign03_128", 0);
	tmpobjid = CreateDynamicObject(1256, 813.614196, -1349.213012, 13.207447, 0.000000, 0.000000, 0.000000, -1, -1);
	SetDynamicObjectMaterial(tmpobjid, 0, 8412, "wddngchpl", "wddngchapelsign03_128", 0);
	tmpobjid = CreateDynamicObject(1256, 813.671691, -1341.942260, 13.175628, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12944, "ce_bankalley2", "sw_jazz", 0x00000000);
	tmpobjid = CreateDynamicObject(1256, 814.481933, -1341.942260, 13.175628, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12946, "ce_bankalley1", "sw_furnisign", 0x00000000);
	tmpobjid = CreateDynamicObject(1256, 813.671691, -1349.254028, 13.175628, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12822, "ce_bankalley3", "sw_Fleishberg01", 0x00000000);
	tmpobjid = CreateDynamicObject(1256, 814.481933, -1349.254028, 13.175628, 0.000000, -0.000007, 179.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12944, "ce_bankalley2", "sw_litlad", 0x00000000);
	tmpobjid = CreateDynamicObject(2729, 818.623352, -1356.817749, 15.032337, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1256, "benchm", "TaxiCo1_64", 0x00000000);
	tmpobjid = CreateDynamicObject(4642, 835.728149, -1336.474853, 14.107620, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 1, 1256, "benchm", "TaxiCo1_64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1256, "benchm", "TaxiCo1_64", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 838.662841, -1331.753417, 12.472462, 270.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{BCD013} TAXIS ONLY", 50, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 834.992797, -1331.753417, 12.472462, 270.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{BCD013} TAXIS ONLY", 50, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 831.462707, -1331.753417, 12.432461, 270.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{BCD013} TAXIS ONLY", 50, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 827.582641, -1331.743408, 12.432461, 270.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{BCD013} TAXIS ONLY", 50, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 824.072387, -1331.743408, 12.412462, 270.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{BCD013} TAXIS ONLY", 50, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(1772, 810.212890, -1354.706909, 13.942190, -0.000000, -0.000007, -175.399856, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 960, "cj_crate_will", "CJ_FLIGHT_CASE", 0x00000000);
	tmpobjid = CreateDynamicObject(642, 810.108642, -1354.467285, 14.117287, -0.000000, -0.000007, -175.399856, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18901, "matclothes", "bowlerred", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19297, "matlights", "invisible", 0x00000000);
	tmpobjid = CreateDynamicObject(2789, 827.451965, -1353.238403, 17.598585, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 1736, "cj_ammo", "CJ_Black_metal", 0x00000000);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1351.397583, 18.342348, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} TIME", 30, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1352.408325, 18.342348, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} PLAT.", 30, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1353.398315, 18.342348, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} TRAIN", 30, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1354.829101, 18.342348, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} DEST.", 30, "Ariel", 15, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1351.397583, 17.952339, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} 10:20", 30, "Ariel", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1352.408325, 17.952339, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} 1a", 30, "Ariel", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1353.398315, 17.952350, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} 241 EXPRE.", 30, "Ariel", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1354.829101, 17.942346, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} L.VENTURAS", 30, "Ariel", 11, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1351.397583, 17.592330, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} 11:10", 30, "Ariel", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1352.408325, 17.592330, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} 1c", 30, "Ariel", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1353.398315, 17.592342, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} 69 ETRAVEL", 30, "Ariel", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1354.829101, 17.582338, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} SAN FIERRO", 30, "Ariel", 11, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1351.397583, 17.232322, 0.000014, 0.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} 12:00", 30, "Ariel", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1352.408325, 17.232322, 0.000014, 0.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} 1a", 30, "Ariel", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1353.398315, 17.232334, 0.000014, 0.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} 66 ETRAVEL", 30, "Ariel", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1354.829101, 17.222330, 0.000014, 0.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} PALOMINO", 30, "Ariel", 11, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1351.397583, 16.852317, 0.000022, 0.000000, 89.999931, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} 12:35", 30, "Ariel", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1352.408325, 16.852317, 0.000022, 0.000000, 89.999931, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} 1b", 30, "Ariel", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1353.398315, 16.852329, 0.000022, 0.000000, 89.999931, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} 220 EXPRE.", 30, "Ariel", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1354.829101, 16.842325, 0.000022, 0.000000, 89.999931, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF} BAYSIDE", 30, "Ariel", 12, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 827.343322, -1355.959472, 17.542337, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{9A0000} DELAY", 30, "Ariel", 8, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 839.598632, -1382.037841, 0.982336, 0.000000, 0.000000, -42.799953, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{000000} 1A", 90, "Ariel", 60, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 821.974243, -1365.716674, 0.982336, 0.000000, 0.000000, -42.799953, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{000000} 1B", 90, "Ariel", 60, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(2729, 804.342407, -1349.388427, 0.982336, 0.000000, 0.000000, -42.799953, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{000000} 1C", 90, "Ariel", 60, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19456, 807.596862, -1361.711303, 14.226866, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18264, "cw2_cinemablockcs_t", "sw_storewin03", 0x00000000);
	tmpobjid = CreateDynamicObject(19329, 807.477600, -1359.326416, 15.472820, 360.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12964, "sw_block09", "sw_genstore", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 820.762084, -1331.743408, 12.412462, 270.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{BCD013} TAXIS ONLY", 50, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	tmpobjid = CreateDynamicObject(19327, 817.421569, -1331.743408, 12.412462, 270.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid, 0, "{BCD013} TAXIS ONLY", 50, "Ariel", 25, 1, 0x00000000, 0x00000000, 0);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//tmpobjid = CreateDynamicObject(3430, 826.820190, -1348.835449, 14.095181, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	//tmpobjid = CreateDynamicObject(3109, 827.590515, -1352.176269, 13.722911, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(997, 824.275512, -1344.647827, 12.522250, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(997, 824.275512, -1338.406494, 12.522250, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1216, 819.978393, -1356.549560, 13.188664, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1216, 819.117675, -1356.549560, 13.188664, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1216, 818.197570, -1356.549560, 13.188664, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1216, 817.297058, -1356.549560, 13.188664, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2451, 809.716857, -1354.954467, 12.738311, 0.000000, 0.000007, 4.600006, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11722, 809.520629, -1354.369262, 14.039831, -0.000000, -0.000007, -175.399856, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(11723, 809.743957, -1354.348999, 14.040131, -0.000000, -0.000007, -175.399856, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19346, 809.406433, -1354.663940, 13.728093, -0.000000, -0.000007, -175.399856, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19346, 809.526123, -1354.654296, 13.728093, 0.000000, -0.000007, 178.299880, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2703, 809.707702, -1354.804565, 13.740159, -89.999992, 224.907546, 49.507625, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19586, 810.926391, -1355.243774, 13.720115, 3.999994, -0.000006, -147.299911, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(997, 824.737182, -1341.467407, 12.221261, 0.000000, 30.000036, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(997, 829.436279, -1341.467407, 9.820084, 0.000000, 30.000036, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(997, 832.207458, -1341.467407, 8.220085, 0.000000, 30.000036, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19121, 822.447021, -1337.261718, 12.956871, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19121, 817.446960, -1337.261718, 12.956871, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19121, 812.406738, -1337.261718, 12.956871, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19121, 807.335876, -1337.261718, 12.956871, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19121, 807.335876, -1341.393432, 12.956871, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19121, 807.335876, -1345.024536, 12.956871, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19121, 807.335876, -1349.215698, 12.956871, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19121, 807.335876, -1353.335571, 12.956871, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1532, 807.458679, -1358.557617, 12.520588, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(997, 837.091125, -1347.532836, 6.006342, -0.000005, 30.000030, -133.200027, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(997, 835.182495, -1349.564575, 4.396338, -0.000005, 30.000030, -133.200027, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(997, 832.042968, -1352.907592, 2.140783, -0.000005, 30.000030, -133.200027, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(997, 830.139587, -1354.933471, 0.535781, -0.000005, 30.000030, -133.200027, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2769, 810.330993, -1354.296875, 13.932000, 0.000000, 0.000000, -17.500000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18673, 809.833312, -1354.495605, 12.071846, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18673, 809.903381, -1354.495605, 12.071846, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);

	*/


	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "" by "N0rdic"
		Created by "Creator"
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	interior = 3;
	tmpobjid = CreateDynamicObject(18981, 1328.967773, 1784.262817, 9.410377, 360.000000, -90.000038, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 5986, "chateau_lawn", "backstagefloor1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1321.666259, 1784.025146, 11.610387, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12848, "cunte_town1", "wall256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1326.565917, 1779.683593, 11.610387, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12848, "cunte_town1", "wall256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1326.565917, 1788.181518, 11.610387, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12848, "cunte_town1", "wall256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1336.206054, 1779.683593, 11.610387, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12848, "cunte_town1", "wall256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1336.195922, 1788.181518, 11.610387, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12848, "cunte_town1", "wall256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1334.585083, 1784.025146, 11.610387, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12848, "cunte_town1", "wall256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1334.585083, 1784.025146, 15.110391, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12848, "cunte_town1", "wall256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 1321.666259, 1784.025146, 15.090385, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12848, "cunte_town1", "wall256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 1328.967773, 1783.677246, 16.143594, 390.000000, -90.000038, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18249, "cw_junkyardccs_t", "Was_scrpyd_trk_contnr_sd", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 1328.967773, 1783.677246, 16.143594, 510.000000, -90.000038, 360.000000, -1, interior, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 18249, "cw_junkyardccs_t", "Was_scrpyd_trk_contnr_sd", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(17951, 1334.467529, 1783.558593, 11.680377, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3109, 1322.080444, 1779.749023, 11.100370, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(19815, 1321.759155, 1784.192993, 11.870372, 0.000000, 0.000000, 90.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1420, 1321.547241, 1785.379516, 13.340375, 0.000000, 0.000000, 270.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(935, 1322.205078, 1787.686157, 10.490369, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2074, 1325.611206, 1783.665039, 15.380393, 0.000000, 0.000000, 0.000000, -1, interior, -1, 300.00, 300.00); 

	// ten green bottles bar
	ointerior = 1,vw = -1;
	
	tmpobjid = CreateDynamicObject(19378, 1899.548339, -2427.645019, 12.479107, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1491, "int_doors", "CJ_W_wood", 0);
	tmpobjid = CreateDynamicObject(19378, 1899.548950, -2418.043945, 12.469099, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1491, "int_doors", "CJ_W_wood", 0);
	tmpobjid = CreateDynamicObject(19378, 1910.049560, -2427.650878, 12.475028, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1491, "int_doors", "CJ_W_wood", 0);
	tmpobjid = CreateDynamicObject(19378, 1910.032348, -2418.044921, 12.469105, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1491, "int_doors", "CJ_W_wood", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	tmpobjid = CreateDynamicObject(19378, 1894.302001, -2418.044921, 13.540965, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(19458, 1901.806762, -2414.915039, 14.185038, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(19458, 1897.080566, -2421.304931, 14.285055, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	// tmpobjid = CreateDynamicObject(1497, 1901.808837, -2421.172851, 12.525033, 0.000000, 0.000000, 180.000000, vw, ointerior); office dor
	tmpobjid = CreateDynamicObject(19366, 1900.956054, -2422.885009, 14.270961, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(19458, 1894.573974, -2424.415039, 14.260954, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(1497, 1900.794189, -2424.500000, 12.500953, 0.000000, 0.000000, 97.199897, vw, ointerior);
	tmpobjid = CreateDynamicObject(19929, 1903.272949, -2419.104003, 12.540954, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3906, "libertyhi5", "marblekb_256128", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	tmpobjid = CreateDynamicObject(19929, 1905.134033, -2420.093994, 12.540954, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3906, "libertyhi5", "marblekb_256128", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	tmpobjid = CreateDynamicObject(19929, 1905.134033, -2422.955078, 12.540954, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3906, "libertyhi5", "marblekb_256128", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	tmpobjid = CreateDynamicObject(19929, 1903.272949, -2423.944091, 12.540954, 0.000000, 0.000000, 270.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3906, "libertyhi5", "marblekb_256128", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	tmpobjid = CreateDynamicObject(3498, 1905.099975, -2419.050048, 14.395051, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3498, 1905.099975, -2423.940917, 14.425040, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19929, 1903.272949, -2419.104003, 15.140969, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	tmpobjid = CreateDynamicObject(19929, 1905.134033, -2420.093994, 15.140962, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	tmpobjid = CreateDynamicObject(19929, 1905.134033, -2422.955078, 15.140958, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	tmpobjid = CreateDynamicObject(19929, 1903.272949, -2423.944091, 15.140962, 0.000000, 0.000000, 270.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	tmpobjid = CreateDynamicObject(19929, 1900.412719, -2423.944091, 15.140962, 0.000000, 0.000000, 270.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	tmpobjid = CreateDynamicObject(2350, 1902.933227, -2418.257080, 12.835039, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2350, 1904.262573, -2418.257080, 12.835039, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2350, 1905.943115, -2420.069091, 12.835039, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2350, 1905.943115, -2421.479980, 12.835039, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2350, 1905.943115, -2422.928955, 12.835039, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2748, 1897.458251, -2426.519042, 13.110958, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	tmpobjid = CreateDynamicObject(0, 1899.789306, -2428.790039, 13.565046, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	tmpobjid = CreateDynamicObject(2748, 1897.458251, -2428.150878, 13.110958, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	tmpobjid = CreateDynamicObject(2748, 1897.458251, -2430.509033, 13.110958, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	tmpobjid = CreateDynamicObject(14651, 1902.919677, -2429.359375, 14.750959, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14651, 1903.619995, -2426.932373, 14.750959, 0.000000, 0.000000, -89.900001, vw, ointerior);
	tmpobjid = CreateDynamicObject(2111, 1899.322265, -2427.368896, 12.730951, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1820, 1898.871948, -2431.016113, 12.565036, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12954, "sw_furniture", "CJ_WOOD5", 0);
	tmpobjid = CreateDynamicObject(19378, 1896.802856, -2429.374023, 13.539115, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(19378, 1910.523803, -2427.645019, 13.539115, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(19378, 1910.523803, -2418.044921, 13.539115, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(2746, 1909.625122, -2423.355957, 13.119112, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	tmpobjid = CreateDynamicObject(2746, 1909.625122, -2420.125000, 13.119112, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	tmpobjid = CreateDynamicObject(2746, 1909.605102, -2416.815917, 13.119112, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	tmpobjid = CreateDynamicObject(2748, 1909.625732, -2426.129882, 13.095038, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	tmpobjid = CreateDynamicObject(2747, 1909.422363, -2421.736083, 12.989113, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2747, 1908.321655, -2415.177978, 12.989113, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2747, 1909.422363, -2418.507080, 12.989113, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19378, 1906.173950, -2413.354980, 13.539115, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(3498, 1902.188964, -2413.693115, 15.155048, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3498, 1897.178955, -2424.872070, 15.155048, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3498, 1897.178955, -2432.024902, 15.155048, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3498, 1910.159667, -2428.572021, 15.685058, 0.000000, 90.000000, 270.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3498, 1897.083862, -2428.876708, 15.720974, 90.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3498, 1910.159667, -2419.541015, 15.685058, 0.000000, 90.000000, 270.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3498, 1910.159667, -2410.512939, 15.685058, 0.000000, 90.000000, 270.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3498, 1906.669921, -2413.583984, 15.685058, 0.000000, 90.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(11689, 1903.934570, -2414.372070, 12.485042, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	tmpobjid = CreateDynamicObject(11689, 1908.435546, -2414.372070, 12.485042, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 18265, "w_town3cs_t", "boardwalk_la", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 3749, "law2misc_lax", "CJ-COUCHL1", 0);
	tmpobjid = CreateDynamicObject(3498, 1910.109741, -2413.693115, 15.155048, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2747, 1904.001953, -2415.177978, 12.989113, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14892, 1909.680908, -2426.143066, 12.245020, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19458, 1911.587768, -2429.087890, 14.280947, 0.000000, 0.000000, -45.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(1498, 1908.950439, -2431.695068, 12.540947, 0.000000, 0.000000, 45.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2747, 1909.422363, -2425.028076, 12.989113, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1514, 1903.324951, -2423.937988, 13.715029, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19939, 1901.285644, -2421.855957, 13.765039, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19812, 1901.273559, -2421.822021, 12.995029, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19939, 1901.285644, -2421.855957, 14.475041, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19939, 1901.285644, -2421.855957, 15.185046, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19940, 1901.276245, -2422.356933, 13.545036, 90.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19940, 1901.276245, -2422.356933, 15.545036, 90.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19940, 1901.276245, -2421.395996, 13.545036, 90.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19940, 1901.276245, -2421.395996, 15.545036, 90.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19378, 1899.548339, -2427.645019, 16.049095, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1491, "int_doors", "CJ_W_wood", 0);
	tmpobjid = CreateDynamicObject(19378, 1910.048706, -2427.645019, 16.049095, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1491, "int_doors", "CJ_W_wood", 0);
	tmpobjid = CreateDynamicObject(19378, 1910.048706, -2418.006103, 16.049095, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1491, "int_doors", "CJ_W_wood", 0);
	tmpobjid = CreateDynamicObject(19378, 1899.548339, -2418.016113, 16.049095, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1491, "int_doors", "CJ_W_wood", 0);
	tmpobjid = CreateDynamicObject(1736, 1903.859863, -2413.781005, 14.490973, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1736, 1908.341552, -2413.781005, 14.490973, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19314, 1905.527465, -2420.230957, 15.455041, 90.000000, 180.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19314, 1905.527465, -2422.461914, 15.455041, 90.000000, 180.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1828, 1905.893676, -2416.878906, 12.560958, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1, "none", "none", 0);
	tmpobjid = CreateDynamicObject(1828, 1903.373657, -2428.313964, 12.560958, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19439, 1901.787963, -2420.491943, 16.780956, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(19439, 1900.078125, -2424.405517, 16.760955, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(2207, 1897.080322, -2415.969970, 12.565025, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19812, 1898.760986, -2420.845947, 13.049107, 0.000000, 0.000000, 180.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19812, 1898.070922, -2420.845947, 13.049107, 0.000000, 0.000000, 180.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19812, 1898.440673, -2420.845947, 14.039106, 0.000000, 0.000000, 180.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2063, 1895.995727, -2420.897460, 13.435031, 0.000000, 0.000000, 180.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19637, 1896.718994, -2420.896484, 13.355029, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19637, 1895.117431, -2420.896484, 13.355029, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19636, 1895.932861, -2420.892089, 13.355031, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19639, 1894.761840, -2420.175537, 12.545029, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19639, 1894.761840, -2420.175537, 12.715033, 0.000000, 0.000000, -20.699995, vw, ointerior);
	tmpobjid = CreateDynamicObject(1575, 1896.738403, -2420.844970, 13.805037, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1575, 1896.187866, -2420.844970, 13.805037, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1580, 1895.626831, -2420.864746, 13.805041, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1580, 1895.066650, -2420.864746, 13.805041, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1754, 1897.916870, -2417.717773, 12.585032, 0.000000, 0.000000, 180.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1754, 1899.769042, -2417.107421, 12.585032, 0.000000, 0.000000, -119.099990, vw, ointerior);
	tmpobjid = CreateDynamicObject(1754, 1896.112304, -2417.257568, 12.585032, 0.000000, 0.000000, 131.500015, vw, ointerior);
	tmpobjid = CreateDynamicObject(1735, 1897.991088, -2414.031005, 12.485029, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19572, 1896.387084, -2420.861328, 14.225035, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19572, 1895.907470, -2420.861328, 14.225035, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19572, 1895.386718, -2420.861328, 14.225035, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19572, 1896.146240, -2420.861328, 14.555042, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19572, 1896.927124, -2420.861328, 14.225035, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19572, 1896.696777, -2420.861328, 14.545035, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19572, 1895.705810, -2420.861328, 12.895034, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19572, 1896.497680, -2420.861328, 12.885026, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19572, 1895.176513, -2420.911376, 12.885015, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2610, 1901.412719, -2413.841308, 13.345027, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2610, 1901.412719, -2413.841308, 13.345027, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2610, 1900.422363, -2413.841308, 13.345027, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2164, 1894.898315, -2413.519287, 12.555025, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2518, 1899.515625, -2421.887939, 12.545042, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2518, 1898.264648, -2421.887939, 12.545042, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2525, 1897.169433, -2421.885742, 12.545029, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2525, 1894.808593, -2421.885742, 12.545029, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19439, 1897.887329, -2422.173583, 14.270948, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(19439, 1896.006713, -2422.173583, 14.270948, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(1649, 1898.731323, -2421.402587, 15.259118, 0.000000, 0.000000, -0.499999, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1214, "metal", "CJ_FRAME_Glass", 0);
	tmpobjid = CreateDynamicObject(19820, 1901.166870, -2421.523437, 13.785040, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19820, 1901.166870, -2421.833740, 13.785040, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19820, 1901.166870, -2422.184082, 13.775040, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19823, 1901.341308, -2422.026123, 13.785037, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19823, 1901.341308, -2421.675781, 13.785037, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19822, 1901.105102, -2422.227050, 14.475035, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19822, 1901.135131, -2421.966796, 14.475035, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19822, 1901.285278, -2422.106933, 14.475035, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19824, 1901.216186, -2421.774169, 14.475034, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19824, 1901.216186, -2421.553955, 14.475034, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19821, 1901.292236, -2422.030029, 15.185033, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19821, 1901.292236, -2421.689697, 15.185033, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2074, 1905.243530, -2422.887939, 14.910976, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2074, 1905.243530, -2420.000000, 14.910976, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2074, 1903.362670, -2418.999023, 14.910976, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2074, 1904.843261, -2428.419433, 15.710979, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2074, 1898.793457, -2428.419433, 15.710979, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2074, 1909.313598, -2430.801757, 15.710979, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2074, 1904.793334, -2416.890625, 15.710979, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2074, 1909.242797, -2416.890625, 15.710979, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2074, 1898.470703, -2422.811523, 15.710979, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2074, 1897.791381, -2416.211914, 15.710979, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19818, 1904.862548, -2420.898681, 15.065037, 0.000000, 180.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19818, 1905.082763, -2420.898681, 15.065037, 0.000000, 180.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19818, 1904.862548, -2421.138916, 15.065037, 0.000000, 180.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19818, 1904.862548, -2421.359130, 15.065037, 0.000000, 180.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19818, 1905.082763, -2421.118896, 15.065037, 0.000000, 180.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19818, 1905.082763, -2421.349121, 15.065037, 0.000000, 180.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19819, 1904.860839, -2421.807373, 15.055044, 0.000000, 180.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19819, 1904.860839, -2422.087646, 15.055044, 0.000000, 180.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19819, 1904.860839, -2422.347900, 15.055044, 0.000000, 180.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19819, 1905.091064, -2421.807373, 15.055044, 0.000000, 180.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19819, 1905.091064, -2422.077636, 15.055044, 0.000000, 180.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19819, 1905.091064, -2422.327880, 15.055044, 0.000000, 180.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19940, 1904.552856, -2420.529296, 13.275034, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8482, "csrspalace02", "marble01_128", 0);
	tmpobjid = CreateDynamicObject(19940, 1904.552856, -2422.530273, 13.275034, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8482, "csrspalace02", "marble01_128", 0);
	tmpobjid = CreateDynamicObject(19830, 1904.510864, -2419.826416, 13.265033, 0.000000, 0.000000, -23.099998, vw, ointerior);
	tmpobjid = CreateDynamicObject(19818, 1904.573120, -2420.097900, 13.365030, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1541, 1903.241699, -2419.556640, 13.575037, 0.000000, 0.000000, 180.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1665, 1905.329956, -2421.666992, 13.495034, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1665, 1908.359252, -2415.155761, 13.425032, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1665, 1908.989501, -2426.589843, 13.725034, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1665, 1899.360351, -2430.445068, 13.105029, 0.000000, 0.000000, -151.099975, vw, ointerior);
	tmpobjid = CreateDynamicObject(1667, 1905.199829, -2421.483154, 13.575043, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1667, 1899.398681, -2427.533691, 13.235040, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1667, 1899.078369, -2427.383544, 13.235040, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1667, 1909.131225, -2421.993652, 13.505042, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1668, 1899.407592, -2427.265380, 13.310961, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1668, 1909.239379, -2421.896972, 13.550965, 0.000000, 0.000000, 48.900001, vw, ointerior);
	tmpobjid = CreateDynamicObject(2100, 1910.169799, -2428.135986, 12.540950, 0.000000, 0.000000, 270.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19378, 1894.323730, -2426.132812, 13.539115, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(19378, 1896.543457, -2413.354980, 13.539115, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(19378, 1903.493652, -2432.406738, 13.539115, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	tmpobjid = CreateDynamicObject(2690, 1907.671020, -2432.246582, 14.065048, 0.000000, 0.000000, 180.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2690, 1899.440673, -2421.163818, 14.065048, 0.000000, 0.000000, 180.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(11711, 1909.424072, -2431.112548, 15.280967, 0.000000, 0.000000, 45.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14892, 1901.559936, -2431.569091, 12.245020, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(632, 1898.210083, -2428.849121, 12.900957, 0.000000, 0.000000, 31.399991, vw, ointerior);
	tmpobjid = CreateDynamicObject(646, 1899.830322, -2414.000000, 13.985040, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19174, 1897.971679, -2413.462890, 14.275043, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19315, 1910.566894, -2425.000488, 14.145045, 0.000000, 0.000000, 180.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19315, 1910.566894, -2418.490722, 14.145045, 0.000000, 0.000000, 180.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2894, 1897.614624, -2415.752685, 13.365038, 0.000000, 0.000000, -20.299999, vw, ointerior);
	tmpobjid = CreateDynamicObject(2196, 1898.090087, -2415.972167, 13.352395, 0.000000, 0.000000, 163.000076, vw, ointerior);
	tmpobjid = CreateDynamicObject(19439, 1897.886474, -2432.369384, 14.350948, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", 0);
	// fort carson decorations (i wasnt asked to add this, i just got the objects by accident when exporting mansion)
	// tmpobjid = CreateDynamicObject(1290, -87.721618, 1210.673217, 20.932184, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.038497, 1052.069458, 19.023748, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19447, -152.092269, 1038.940917, 20.279073, 0.000000, 0.000000, -179.300125, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	// tmpobjid = CreateDynamicObject(19381, -136.260467, 1039.145751, 18.853919, 1.199999, 89.499969, 0.699999, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 17500, "stormdrain", "golf_heavygrass", 0);
	// tmpobjid = CreateDynamicObject(3598, -136.548004, 1021.229797, 20.974437, 0.000000, 0.000000, 90.699958, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18664, -172.035095, 1108.302734, 20.692188, 0.000000, 0.000000, 89.799995, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2687, -175.059997, 1109.891845, 20.392185, 0.000000, 0.000000, -89.399978, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -192.750701, 1123.473632, 18.811544, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -193.434600, 1140.686645, 18.846870, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -192.487792, 1158.581665, 18.756864, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -192.408905, 1163.858032, 18.776874, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -192.864501, 1078.057006, 18.650346, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -192.374404, 1063.613037, 18.629058, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -192.792495, 1049.142333, 18.761299, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -193.081497, 1037.659057, 18.773748, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.159194, 1034.829345, 19.051305, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.003601, 1040.368652, 19.051298, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.060806, 1046.053344, 18.999055, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18270, -242.169494, 833.917724, 24.664751, 0.000000, 0.000000, 13.299997, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.007400, 1059.623168, 19.059055, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -192.795104, 1068.028076, 19.069049, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.196105, 1076.004272, 19.063076, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.044601, 1081.098876, 19.026090, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -192.985900, 1117.652709, 19.025852, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -192.848602, 1128.125244, 19.036865, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.064193, 1137.350708, 19.056867, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -192.977005, 1144.862426, 19.046867, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.022201, 1152.811157, 19.036867, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -192.628906, 1161.160156, 19.056871, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -192.869400, 1167.611450, 19.056867, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -192.701797, 1176.948852, 19.036853, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.044692, 1184.410522, 19.016868, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18665, -177.504104, 1138.206665, 20.659982, 0.000000, 0.000000, -90.200012, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -182.312698, 790.497680, 15.269661, 0.000000, 0.000000, 36.600006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -163.647399, 793.273681, 15.269661, 0.000000, 0.000000, 36.600006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -144.378601, 793.844848, 15.269661, 0.000000, 0.000000, 36.600006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -135.011901, 781.232543, 15.269661, 0.000000, 0.000000, 36.600006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -146.855392, 767.778381, 15.269661, 0.000000, 0.000000, 36.600006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -168.404907, 760.281921, 15.269661, 0.000000, 0.000000, 36.600006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18268, -246.987197, 852.141479, 32.400630, 0.000000, 0.000000, -4.699999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -249.810302, 852.363586, 8.849481, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -220.310501, 836.292297, 11.067132, 0.000000, 0.000000, 27.399993, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -286.336090, 884.578369, 8.609244, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -287.265686, 899.215209, 8.766778, 0.000000, 0.000000, 69.899986, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -293.704986, 918.660095, 9.950954, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -303.751312, 934.355895, 9.891226, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -318.816894, 943.800354, 8.828704, 0.000000, -0.699998, -13.399990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -333.726898, 953.138854, 8.870184, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -344.982604, 964.394958, 8.691364, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -354.891387, 975.523925, 7.339365, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -360.929992, 989.182861, 8.023906, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -371.001098, 1004.618530, 7.201978, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -385.678497, 1019.235229, 9.291989, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -396.199096, 1022.966613, 7.978551, 0.000000, 0.000000, 63.299991, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19381, -126.880584, 1039.262084, 18.873632, 1.399999, 90.099960, 0.699999, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 17500, "stormdrain", "golf_heavygrass", 0);
	// tmpobjid = CreateDynamicObject(3173, 114.133758, 1047.400878, 12.599368, 0.000000, 0.000000, 85.399986, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3168, 90.697105, 1085.663696, 12.589371, 0.000000, 0.000000, 134.400039, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3169, 96.952392, 1052.356933, 12.609369, 0.000000, 0.000000, 9.499986, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3785, -228.774337, 1050.484252, 21.634389, 0.000000, 0.000000, -76.600044, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3167, 93.506729, 1067.920410, 12.579367, 0.000000, 0.000000, 3.199999, vw, ointerior);
	
	// Keviin (Salvatore Diego)'s custom made mansion for donators
	ointerior = 0,vw = 0;
	tmpobjid = CreateDynamicObject(19381, -126.763061, 1029.656616, 18.768827, 0.000000, 90.099960, 0.699999, vw, ointerior); // mansion starts here
	SetDynamicObjectMaterial(tmpobjid, 0, 5722, "sunrise01_lawn", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObject(19381, -126.645553, 1020.037231, 18.768827, 0.000000, 90.099960, 0.699999, vw, ointerior);
	tmpobjid = CreateDynamicObject(19381, -126.560173, 1013.057495, 18.788827, 0.000000, 90.099960, 0.699999, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 5722, "sunrise01_lawn", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObject(19381, -126.442588, 1003.428955, 18.788827, 0.000000, 90.099960, 0.699999, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 17500, "stormdrain", "golf_heavygrass", 0);
	tmpobjid = CreateDynamicObject(19381, -135.832092, 1003.324096, 18.785236, 0.000000, 90.099960, 0.699999, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 17500, "stormdrain", "golf_heavygrass", 0);
	tmpobjid = CreateDynamicObject(19381, -146.321365, 1003.196044, 18.823547, 0.000000, 90.099960, 0.699999, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 17500, "stormdrain", "golf_heavygrass", 0);
	tmpobjid = CreateDynamicObject(19381, -146.438919, 1012.825195, 18.823547, 0.000000, 90.099960, 0.699999, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 5413, "motel_lae", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObject(19381, -146.556396, 1022.444274, 18.823547, 0.000000, 90.099960, 0.699999, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 17500, "stormdrain", "golf_heavygrass", 0);
	tmpobjid = CreateDynamicObject(19381, -146.640975, 1029.371826, 18.833547, 0.000000, 90.099960, 0.699999, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 5413, "motel_lae", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObject(19381, -146.758529, 1039.011352, 18.913549, 0.400000, 90.099960, 0.699999, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 17500, "stormdrain", "golf_heavygrass", 0);
	tmpobjid = CreateDynamicObject(19447, -151.588378, 1003.138183, 20.279073, 0.000000, 0.000000, -179.700164, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19447, -146.843902, 998.330078, 20.279073, 0.000000, 0.000000, -90.100158, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19447, -137.214630, 998.393066, 20.279073, 0.000000, 0.000000, -89.400161, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19447, -126.045211, 998.510253, 20.279073, 0.000000, 0.000000, -89.400161, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19439, -131.620193, 998.461486, 20.281969, 0.000000, 0.000000, -89.799964, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0);
	tmpobjid = CreateDynamicObject(19447, -121.149818, 1003.287475, 20.279073, 0.000000, 0.000000, 0.099836, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19447, -121.184501, 1011.706909, 20.279073, 0.000000, 0.000000, 0.699836, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(1308, 110.944038, 1057.193847, 12.829372, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19447, -121.301856, 1021.315612, 20.279073, 0.000000, 0.000000, 0.699836, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0);
	tmpobjid = CreateDynamicObject(19447, -121.419586, 1030.954833, 20.279073, 0.000000, 0.000000, 0.699836, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19447, -151.631912, 1011.417663, 20.279073, 0.000000, 0.000000, -179.700164, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19869, 86.270790, 1076.698120, 12.579370, 0.000000, 0.000000, 10.100001, vw, ointerior);
	tmpobjid = CreateDynamicObject(19447, -151.747665, 1020.906982, 20.379064, 0.000000, 0.000000, -179.000152, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0);
	tmpobjid = CreateDynamicObject(19869, 91.459098, 1077.622192, 12.579370, 0.000000, 0.000000, 10.100001, vw, ointerior);
	tmpobjid = CreateDynamicObject(19869, 96.647422, 1078.546508, 12.579370, 0.000000, 0.000000, 10.100001, vw, ointerior);
	tmpobjid = CreateDynamicObject(19869, 97.262428, 1060.667114, 12.579370, 0.000000, 0.000000, 10.100001, vw, ointerior);
	tmpobjid = CreateDynamicObject(19869, 92.034652, 1059.735351, 12.579370, 0.000000, 0.000000, 10.100001, vw, ointerior);
	tmpobjid = CreateDynamicObject(19869, 88.155693, 1059.044677, 12.579370, 0.000000, 0.000000, 10.100001, vw, ointerior);
	tmpobjid = CreateDynamicObject(19447, -151.994705, 1029.319946, 20.279073, 0.000000, 0.000000, -179.300094, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19447, -121.531806, 1039.326049, 20.279073, 0.000000, 0.000000, 0.699836, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19447, -132.208541, 1021.132629, 18.852516, -0.299999, -89.400016, -89.699974, vw, ointerior);
	tmpobjid = CreateDynamicObject(19447, -126.198593, 1021.163940, 18.831050, -0.299999, -89.400016, -89.699974, vw, ointerior);
	tmpobjid = CreateDynamicObject(737, -126.412574, 1003.508422, 18.800251, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -123.373344, 1004.099548, 19.250761, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -126.173309, 1006.299682, 19.250761, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -128.853302, 1003.839416, 19.250761, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -126.463294, 1000.879394, 19.250761, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19447, -126.325141, 1044.058227, 20.269073, 0.000000, 0.000000, -89.800155, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19447, -135.925155, 1044.024414, 20.269073, 0.000000, 0.000000, -89.800155, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19447, -144.504531, 1043.942993, 20.269073, 0.000000, 0.000000, -89.300163, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19447, -147.414001, 1043.907714, 20.259073, 0.000000, 0.000000, -88.900169, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19447, -142.679122, 1021.073669, 18.850835, 0.000000, 90.099975, -89.699958, vw, ointerior);
	tmpobjid = CreateDynamicObject(19447, -147.018890, 1021.050659, 18.860836, 0.000000, 90.099975, -89.499961, vw, ointerior);
	tmpobjid = CreateDynamicObject(737, -126.968315, 1039.394897, 18.842086, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -127.015975, 1036.369873, 19.141357, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -129.175949, 1039.420776, 19.201358, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -126.845954, 1041.610961, 19.201358, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -124.435974, 1039.190795, 19.201358, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19831, -135.396469, 998.929260, 18.950435, 0.000000, 0.000000, -179.399978, vw, ointerior);
	tmpobjid = CreateDynamicObject(3041, -138.531097, 1000.435119, 18.888650, 0.000000, 0.000000, -45.599998, vw, ointerior);
	tmpobjid = CreateDynamicObject(1281, -135.197601, 1003.050781, 19.686317, 0.000000, 0.000000, -31.899997, vw, ointerior);
	tmpobjid = CreateDynamicObject(2804, -135.379531, 998.968933, 19.789257, 0.000000, 0.000000, 99.000007, vw, ointerior);
	tmpobjid = CreateDynamicObject(946, -136.768936, 1035.088989, 21.069305, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1946, -136.527572, 1038.398071, 19.024152, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2551, -135.820617, 1043.480590, 19.978893, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2399, -137.748901, 1043.662475, 20.882474, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2390, -133.478591, 1043.691406, 20.570827, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(737, -145.044540, 1040.840698, 18.880523, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(737, -149.554473, 1037.871215, 18.880523, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(737, -145.804550, 1001.570800, 18.880523, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(737, -149.064498, 1004.350891, 18.880523, 0.000000, 0.000000, 0.000000, vw, ointerior);
	//Map Exported with Texture Studio By: [uL]Pottus////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////and Crayder////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Map Information////////////////////////////////////////////////////////////////////////////////////////////////
	/*
		Exported on "2019-09-08 12:43:43" by "Ryan_McDuffy"
		Created by "Ryan_McDuffy"
	*/
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Wasn't added before due to being small, added upon the request of Keviin in CDRP (SEWERS, SEWER)
	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(18981, 2882.280029, 2987.995117, 9.902023, 0.000007, 90.000000, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(19447, 2877.402099, 2985.275146, 11.982136, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2877.812255, 2985.275146, 14.098806, 0.000000, -30.000007, 179.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2879.129638, 2985.275146, 15.656357, 0.000000, -60.000007, 179.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2882.050537, 2985.275146, 16.356363, 0.000000, -90.000007, 179.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2884.121093, 2985.275146, 15.972599, 0.000000, -120.000007, 179.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2885.506591, 2985.275146, 14.962980, 0.000000, -150.000000, 179.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2886.197265, 2985.285156, 12.983002, 0.000000, -180.000000, 179.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2877.402099, 2994.950439, 11.982136, 0.000000, 0.000014, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2877.812255, 2994.950439, 14.098806, 0.000000, -30.000015, 179.999908, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2879.129638, 2994.950439, 15.656357, 0.000000, -60.000015, 179.999908, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2882.050537, 2994.950439, 16.356363, 0.000000, -90.000015, 179.999908, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2884.121093, 2994.950439, 15.972599, 0.000000, -120.000015, 179.999908, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2885.506591, 2994.950439, 14.962980, 0.000000, -150.000000, 179.999908, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2886.197265, 2994.960449, 12.983002, 0.000000, -180.000000, 179.999908, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2886.585693, 2990.081054, 11.262102, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "rustyboltpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2885.294677, 2990.081054, 16.101045, 0.000000, -29.999992, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "rustyboltpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2885.066406, 2990.081054, 15.868950, 0.000000, -59.999992, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "rustyboltpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2882.035400, 2990.081054, 16.738954, 0.000000, -89.999992, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "rustyboltpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2878.127685, 2990.081054, 15.496052, 0.000000, -119.999992, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "rustyboltpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2876.878662, 2990.081054, 13.264055, 0.000000, -150.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "rustyboltpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2877.013427, 2990.081054, 11.061022, 0.000000, -180.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "rustyboltpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(3675, 2880.147949, 2997.810546, 15.922024, 0.000007, 90.000000, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17003, "countrys", "rustc256128", 0x00000000);
	tmpobjid = CreateDynamicObject(3675, 2880.998779, 2984.148437, 16.772043, 89.999992, 630.000000, 89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17003, "countrys", "rustc256128", 0x00000000);
	tmpobjid = CreateDynamicObject(3675, 2880.998779, 2984.148437, 16.772043, 89.999992, 630.000000, 89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17003, "countrys", "rustc256128", 0x00000000);
	tmpobjid = CreateDynamicObject(3675, 2881.929687, 2997.810546, 15.922024, 0.000014, 90.000000, 89.999954, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17003, "countrys", "rustc256128", 0x00000000);
	tmpobjid = CreateDynamicObject(3675, 2882.780517, 2984.148437, 16.772043, 89.999992, 719.950561, 0.049417, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17003, "countrys", "rustc256128", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 2876.958740, 2988.596923, 11.549833, 89.999992, 180.000015, -89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 2886.889404, 2988.596923, 11.549833, 89.999992, 180.000015, -89.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 2876.958740, 2988.596923, 10.549820, 89.999992, 180.000030, -89.999961, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 2886.889404, 2988.596923, 10.549820, 89.999992, 180.000030, -89.999961, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 2876.958740, 2998.593017, 11.549833, 89.999992, 180.000030, -89.999961, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 2886.889404, 2998.593017, 11.549833, 89.999992, 180.000030, -89.999961, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 2876.958740, 2998.593017, 10.549820, 89.999992, 180.000045, -89.999961, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 2886.889404, 2998.593017, 10.549820, 89.999992, 180.000045, -89.999961, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(6964, 2881.806396, 2991.373779, 10.432159, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF333300);
	tmpobjid = CreateDynamicObject(18766, 2882.473632, 2981.099121, 11.549833, 89.999992, 270.000000, -89.999992, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 2882.473632, 2981.099121, 10.549843, 89.999992, 270.000000, -89.999992, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 2882.473632, 2979.619873, 12.459843, 89.999992, 270.000000, -89.999992, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2874.623046, 2999.874755, 14.472148, 0.000000, 0.000014, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2881.945312, 3004.973632, 8.603640, -20.000000, 90.000007, 0.000001, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(18762, 2881.939941, 3000.309814, 12.869675, 89.999992, 0.000000, -89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "rustyboltpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2883.940917, 3000.309814, 9.879652, 0.000000, 179.999984, -90.000007, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "rustyboltpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2879.939453, 3000.309814, 9.879652, 0.000000, 179.999984, -90.000007, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "rustyboltpanel", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 2880.715087, 2999.823486, 11.921998, 0.000000, 0.000014, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4833, "airprtrunway_las", "lasjmfence1", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 2883.045166, 2999.823486, 11.921998, 0.000000, 0.000014, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4833, "airprtrunway_las", "lasjmfence1", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 2883.045166, 2999.823486, 11.921998, 0.000007, 0.000007, 179.999877, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4833, "airprtrunway_las", "lasjmfence1", 0x00000000);
	tmpobjid = CreateDynamicObject(19327, 2880.715087, 2999.823486, 11.921998, 0.000007, 0.000007, 179.999877, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 4833, "airprtrunway_las", "lasjmfence1", 0x00000000);
	tmpobjid = CreateDynamicObject(3675, 2882.780517, 2999.932128, 19.702028, 0.000000, 0.000014, -0.000060, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17003, "countrys", "rustc256128", 0x00000000);
	tmpobjid = CreateDynamicObject(3675, 2880.988769, 2999.932128, 19.702028, 0.000000, 0.000014, -0.000060, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17003, "countrys", "rustc256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2880.309326, 3005.074462, 10.309002, -20.800024, 0.000011, 0.000003, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(19447, 2883.552490, 3005.031738, 10.196823, -20.800024, 0.000011, 0.000003, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(19447, 2881.945312, 3004.997558, 10.874496, -20.000000, 90.000007, 0.000001, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(6964, 2881.806396, 3007.688232, 7.529017, -20.199996, 0.000007, 0.000001, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF333300);
	tmpobjid = CreateDynamicObject(19447, 2881.945312, 3011.508056, 6.185569, -20.000000, 90.000007, 0.000001, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(19447, 2880.259277, 3012.101074, 7.758953, -20.800024, 0.000035, 0.000012, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(19447, 2883.502441, 3012.058349, 7.646771, -20.800024, 0.000035, 0.000012, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(19447, 2881.895263, 3012.024169, 8.324444, -20.000000, 90.000030, 0.000011, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(18766, 2882.473632, 2980.020263, 13.959833, 0.000000, 360.000000, 179.999984, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 14738, "whorebar", "AH_Architrave", 0xFF333333);
	tmpobjid = CreateDynamicObject(11714, 2881.980224, 2980.508789, 14.199799, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "inddoor1", 0x00000000);
	tmpobjid = CreateDynamicObject(19437, 2878.195312, 2983.396484, 11.764593, 0.000000, 310.000000, 90.000007, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19437, 2885.419433, 2983.396484, 11.764593, 0.000000, 310.000000, 90.000007, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2882.280029, 3021.336181, -5.367992, 0.000007, 90.000000, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(18981, 2880.568359, 3015.610107, -7.887973, 90.000007, 180.000000, 89.999977, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(18766, 2886.889404, 3021.081298, 0.829818, 89.999992, 180.000045, -89.999961, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(18766, 2877.568359, 3021.081298, 0.829819, 89.999992, 180.000045, -89.999961, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2884.769042, 3027.888183, -12.127975, 90.000007, 180.000000, 179.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(18981, 2879.625000, 3027.888183, -12.127975, 90.000007, 180.000000, 179.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(19367, 2881.863037, 3017.516113, 6.369830, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(19367, 2880.596191, 3016.817382, 6.369830, 0.000000, 0.000000, 150.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(19367, 2883.111572, 3016.832519, 6.369830, 0.000000, 0.000000, 390.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(19367, 2881.773925, 3016.532958, 6.842394, 178.399932, 107.899971, -85.699928, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(19447, 2882.595458, 3016.103027, 2.849818, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2882.595458, 3016.103027, 2.849818, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2877.254638, 3017.052001, 2.849818, 0.000000, 0.000000, 210.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2888.000000, 3018.076416, 2.849818, 0.000000, 0.000000, 330.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2887.829833, 3020.885009, 1.379819, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2887.537353, 3020.885009, 3.468857, 360.000000, -30.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2876.407470, 3020.885009, 5.005187, 360.000000, 30.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2875.498535, 3020.885009, 1.769819, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2879.289062, 3020.885009, 4.515173, 720.000000, 90.000000, 720.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2884.442138, 3020.885009, 4.515173, 720.000000, 90.000000, 720.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2881.979736, 3022.326416, 4.555173, 720.000000, 90.000000, 720.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "ws_drain_small", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2875.788330, 3020.885009, 4.515173, 720.000000, 90.000000, 720.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2875.233398, 3025.587402, 2.829818, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2889.205078, 3025.587402, 2.829818, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 2950, "col_wallx", "gangwall2", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2884.769042, 3026.046386, -6.427957, 90.000007, 180.000000, 269.999969, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0xFF999999);
	tmpobjid = CreateDynamicObject(19447, 2874.623046, 2999.874755, 10.972143, 0.000000, 0.000014, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2884.249023, 2999.914794, 15.082156, 0.000000, 0.000014, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	tmpobjid = CreateDynamicObject(19447, 2889.239746, 2999.914794, 11.592159, 0.000000, 0.000014, 90.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterial(tmpobjid, 0, 12814, "factorycunte", "newall3_16c128", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(3109, 2879.457519, 2999.771972, 13.199824, 0.000000, 0.000000, 91.099975, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(815, 2883.294677, 2984.078613, 9.061203, 0.000000, -64.099990, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18707, 2881.070068, 2999.012207, 11.242027, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18707, 2882.781005, 2999.012207, 11.242027, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(16630, 2881.911865, 2982.092773, 13.319822, -2.899998, 0.000007, -0.999998, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18747, 2882.819824, 3014.312500, -2.190179, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(18721, 2881.828369, 3016.423339, 2.999818, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(1460, 2882.182861, 3020.554199, 1.369817, 92.199981, 0.000000, 179.800033, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(3109, 2876.967773, 3017.648437, 2.509818, 0.000000, 0.000000, 210.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(2671, 2881.594970, 2989.509521, 10.422023, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(811, 2880.392089, 2998.963378, 11.212030, 2.999999, 25.000005, -20.799999, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(866, 2882.440673, 2998.707275, 9.842020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(866, 2881.940185, 2996.937011, 9.842020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(866, 2881.289550, 2995.286132, 9.842020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(866, 2881.289550, 2992.546875, 9.842020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(866, 2883.000488, 2991.976318, 9.842020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(866, 2883.000488, 2988.955322, 9.842020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(866, 2881.119140, 2988.955322, 9.842020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(866, 2881.119140, 2985.834960, 9.842020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(866, 2883.099853, 2985.834960, 9.842020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(802, 2882.242919, 2994.234130, 10.562026, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(802, 2882.242919, 2997.514648, 10.562026, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(802, 2880.742431, 2997.514648, 10.562026, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(802, 2880.742431, 2992.763916, 10.562026, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(802, 2880.742431, 2991.202880, 10.562026, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(802, 2880.742431, 2987.153808, 10.562026, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(802, 2881.612060, 2987.153808, 10.562026, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(802, 2880.051269, 2985.693359, 10.562026, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid = CreateDynamicObject(814, 2883.974121, 2996.229248, 11.162024, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 

	// Forest South
	// ointerior = 0,vw = 0;
	// tmpobjid = CreateDynamicObject(690, -362.295501, 935.973632, 6.494070, 0.000000, 0.000000, -21.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(905, -403.853088, 1322.761474, 11.909978, 34.799995, 0.000000, -84.199996, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3061, -403.385498, 1321.417846, 11.873694, 0.000000, 32.400012, 13.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(10444, -18.293130, 1231.545532, 17.675613, -0.199999, 0.000000, -96.199981, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18741, -27.867240, 1236.868652, 16.635623, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18741, -17.770439, 1235.073974, 16.692806, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -333.449707, 695.565368, 21.729661, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(905, -403.192687, 1322.887329, 12.802481, -84.599990, -6.099987, 89.900070, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -371.806304, 948.963317, 6.494070, 0.000000, 0.000000, -43.700000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(905, -403.191589, 1321.111938, 11.916169, -74.299980, 0.899999, 119.800003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -383.762512, 964.676147, 6.494070, 0.000000, 0.000000, -43.700000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(905, -402.768585, 1321.283325, 12.753166, -76.899986, 0.000000, 106.299987, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -402.201690, 991.313781, 2.614068, 0.000000, 0.000000, -59.500000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 17009, "truth_farm", "des_ghotwood1", 0);
	// tmpobjid = CreateDynamicObject(690, -390.501708, 981.318359, 6.494070, 0.000000, 0.000000, -48.999988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(905, -402.952087, 1321.838623, 13.045612, 0.000000, -85.400001, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -403.007110, 970.447265, 6.494070, 0.000000, 0.000000, -48.999988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -417.263610, 981.161987, 3.694070, 0.000000, 0.000000, -48.999988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2803, 45.415283, 1170.391113, 18.074052, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -415.368103, 954.432128, 3.694070, 0.000000, 0.000000, -48.999988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1290, -87.721618, 1210.673217, 20.932184, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.038497, 1052.069458, 19.023748, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19447, -152.112304, 1038.958740, 20.279073, 0.000000, 0.000000, -179.300003, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	// tmpobjid = CreateDynamicObject(690, -385.280914, 919.820922, -0.595929, 0.000000, 0.000000, -48.999988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -387.562011, 943.662170, -0.595929, 0.000000, 0.000000, -48.999988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -415.788391, 925.711303, 0.734071, 0.000000, 0.000000, -48.999988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -403.244598, 911.281188, 0.734071, 0.000000, 0.000000, -48.999988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -387.302307, 892.941772, 0.734071, 0.000000, 0.000000, -48.999988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19378, -424.819000, 1323.905639, 24.856163, 0.000000, 0.000000, 30.100004, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(690, -407.490814, 875.392089, 0.734071, 0.000000, 0.000000, -48.999988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -418.705810, 865.643249, 0.734071, 0.000000, 0.000000, -48.999988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -417.079711, 899.135437, 0.734071, 0.000000, 0.000000, -48.999988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -434.269592, 907.843994, 0.734071, 0.000000, 0.000000, -48.999988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -403.170593, 855.453918, 0.734071, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3598, -136.588302, 1021.240478, 21.038145, 0.000000, 0.000000, -89.699996, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -391.567993, 841.384643, 0.734071, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -385.981292, 808.819519, 7.214069, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -447.783996, 763.224487, 14.194069, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -407.190307, 808.676635, 0.734071, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -427.401306, 812.312683, 0.734071, 0.000000, 0.000000, -25.399999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -419.791107, 794.406738, 0.734071, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -412.856292, 774.267150, 12.824069, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -406.315612, 755.271667, 12.824069, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -422.890502, 749.564453, 12.824069, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18664, -172.035095, 1108.302734, 20.692188, 0.000000, 0.000000, 89.799995, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -433.843811, 773.143432, 11.124073, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -445.589813, 726.719970, 15.454067, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -439.989990, 710.456970, 15.454067, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -433.254089, 690.894226, 15.454067, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -425.616302, 668.712524, 15.454067, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -418.916107, 649.253662, 15.454067, 0.000000, 0.000000, -71.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -401.326202, 645.160278, 15.454067, 0.000000, 0.000000, -103.099899, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -397.146606, 663.120422, 15.454067, 0.000000, 0.000000, -103.099899, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -392.892395, 681.402099, 20.624065, 0.000000, 0.000000, -103.099899, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -361.187500, 743.588317, 22.964067, 0.000000, 0.000000, -74.600013, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -388.393402, 700.735534, 20.624065, 0.000000, 0.000000, -103.099899, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -383.919311, 719.962036, 20.624065, 0.000000, 0.000000, -103.099899, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -379.601715, 738.516296, 20.624065, 0.000000, 0.000000, -103.099899, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -345.000396, 748.046813, 22.964067, 0.000000, 0.000000, -74.600013, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -327.010406, 753.002380, 22.964067, 0.000000, 0.000000, -74.600013, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -366.897003, 764.316467, 22.964067, 0.000000, 0.000000, -74.600013, vw, ointerior);
	// tmpobjid = CreateDynamicObject(800, 184.181762, 830.025085, 16.449203, 0.000000, 0.000000, -44.900001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2687, -175.059997, 1109.891845, 20.392185, 0.000000, 0.000000, -89.399978, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -354.165496, 786.970581, 19.154066, 0.000000, 0.000000, -74.600013, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -358.959014, 804.372558, 6.354067, 0.000000, 0.000000, -74.600013, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -359.113800, 826.562133, 0.554068, 0.000000, 0.000000, -89.599998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, -379.811706, 845.307617, 5.163118, 0.000000, 0.000000, 116.799980, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -352.784484, 844.635864, 0.554068, 0.000000, 0.000000, -109.300003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -346.593902, 862.313354, 0.554068, 0.000000, 0.000000, -109.300003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(0, -333.784088, 851.316772, 13.793307, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -340.029785, 881.056945, 0.554068, 0.000000, 0.000000, -109.300003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -333.293914, 900.291564, 0.554068, 0.000000, 0.000000, -109.300003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -328.511413, 913.948364, 0.554068, 0.000000, 0.000000, -109.300003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -363.121612, 869.001770, 2.724067, 0.000000, 0.000000, -109.300003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -373.975006, 853.561157, 2.724067, 0.000000, 0.000000, -109.300003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -344.329406, 919.487548, 0.554068, 0.000000, 0.000000, -109.300003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -369.881805, 900.315734, 2.724067, 0.000000, 0.000000, -109.300003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -355.016906, 895.110290, 2.724067, 0.000000, 0.000000, -109.300003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, -390.195404, 865.863830, 3.913120, 0.000000, 0.000000, 116.799980, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, -370.902008, 826.684326, 8.112206, -140.599899, 0.000000, 116.799980, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -192.750701, 1123.473632, 18.811544, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -374.323608, 796.743469, 12.864068, 0.000000, 0.000000, -109.300003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -193.434600, 1140.686645, 18.846870, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -386.978302, 783.057006, 12.864068, 0.000000, 0.000000, -109.300003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -192.487792, 1158.581665, 18.756864, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -192.408905, 1163.858032, 18.776874, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -192.864501, 1078.057006, 18.650346, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -192.374404, 1063.613037, 18.629058, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -192.792495, 1049.142333, 18.761299, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, -193.081497, 1037.659057, 18.773748, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.159194, 1034.829345, 19.051305, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.003601, 1040.368652, 19.051298, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.060806, 1046.053344, 18.999055, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18270, -242.169494, 833.917724, 24.664751, 0.000000, 0.000000, 13.299997, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.007400, 1059.623168, 19.059055, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -192.795104, 1068.028076, 19.069049, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.196105, 1076.004272, 19.063076, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(751, -529.010070, 797.350158, 0.914488, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.044601, 1081.098876, 19.026090, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -192.985900, 1117.652709, 19.025852, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -192.848602, 1128.125244, 19.036865, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19550, -427.861206, 830.927978, 0.798918, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.064193, 1137.350708, 19.056867, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -192.977005, 1144.862426, 19.046867, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.022201, 1152.811157, 19.036867, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(826, -479.687988, 832.095397, 1.898916, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -192.628906, 1161.160156, 19.056871, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(826, -475.029510, 836.556335, 1.898916, 0.000000, 0.000000, -40.299991, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -192.869400, 1167.611450, 19.056867, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -192.701797, 1176.948852, 19.036853, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, -193.044692, 1184.410522, 19.016868, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18665, -177.504104, 1138.206665, 20.659982, 0.000000, 0.000000, -90.200012, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -313.179687, 764.335266, 24.809665, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -313.179687, 738.075134, 24.809665, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -313.179687, 718.095092, 21.949663, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -333.449798, 718.095092, 22.609663, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -293.959808, 718.095092, 18.279659, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -275.519805, 718.095092, 18.279659, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -255.219802, 718.095092, 19.619663, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -255.219802, 737.965087, 19.619663, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -279.449798, 737.965087, 19.619663, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -234.949798, 737.965087, 19.619663, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -234.949798, 756.695007, 19.619663, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -257.399902, 753.724731, 19.619663, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -214.169799, 756.695007, 19.619663, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -195.129898, 756.695007, 19.619663, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -195.129898, 773.775207, 19.619663, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(0, -201.826507, 765.875854, 26.220518, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -214.909896, 773.775207, 15.269661, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -279.129699, 761.855163, 15.269661, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -238.899795, 772.005249, 15.269661, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(0, -185.922897, 766.871337, 26.621902, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -182.312698, 790.497680, 15.269661, 0.000000, 0.000000, 36.600006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -163.647399, 793.273681, 15.269661, 0.000000, 0.000000, 36.600006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -144.378601, 793.844848, 15.269661, 0.000000, 0.000000, 36.600006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -135.011901, 781.232543, 15.269661, 0.000000, 0.000000, 36.600006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -146.855392, 767.778381, 15.269661, 0.000000, 0.000000, 36.600006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -168.404907, 760.281921, 15.269661, 0.000000, 0.000000, 36.600006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -182.740402, 752.363281, 18.299661, 0.000000, 0.000000, 36.600006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -145.414505, 729.325256, 15.269661, 0.000000, 0.000000, 36.600006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -164.231597, 723.892517, 15.269661, 0.000000, 0.000000, 17.100013, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -181.856399, 718.470458, 15.269661, 0.000000, 0.000000, 17.100013, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -199.586303, 713.016174, 15.269661, 0.000000, 0.000000, 17.100013, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -213.226196, 702.886230, 15.269661, 0.000000, 0.000000, 36.600013, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -229.571594, 690.747070, 15.269661, 0.000000, 0.000000, 36.600013, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -243.922805, 685.861694, 15.269661, 0.000000, 0.000000, 18.800016, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -260.157897, 680.334960, 15.269661, 0.000000, 0.000000, 18.800016, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -278.655487, 674.037780, 15.269661, 0.000000, 0.000000, 18.800016, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -282.161407, 659.968750, 15.269661, 0.000000, 0.000000, 6.300016, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -276.619293, 645.127807, 9.569661, 0.000000, 0.000000, 6.300016, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -264.647186, 632.736083, 9.569661, 0.000000, 0.000000, 6.300016, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -249.042495, 631.684814, 9.569661, 0.000000, 0.000000, 55.100009, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -234.592407, 641.002990, 9.569661, 0.000000, 0.000000, 55.100009, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -223.304092, 656.420959, 9.569661, 0.000000, 0.000000, 36.800010, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -207.358001, 669.661499, 12.339658, 0.000000, 0.000000, 36.800010, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -191.942092, 677.320678, 12.339658, 0.000000, 0.000000, 17.800014, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -177.517501, 681.951843, 12.339658, 0.000000, 0.000000, 17.800014, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -160.627807, 681.555847, 12.339658, 0.000000, 0.000000, 17.800014, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -143.544601, 676.817504, 12.339658, 0.000000, 0.000000, -24.599979, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -131.553497, 665.245788, 12.339658, 0.000000, 0.000000, -24.599979, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -117.569602, 652.981567, 12.339658, 0.000000, 0.000000, -24.599979, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -99.433059, 652.284912, 12.339658, 0.000000, 0.000000, -2.199980, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -78.526817, 658.036560, 12.339658, 0.000000, 0.000000, -2.199980, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -55.943481, 657.169128, 4.159660, 0.000000, 0.000000, -2.199980, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -39.190578, 664.874389, 9.199660, 0.000000, 0.000000, 24.700021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -21.254449, 664.670715, 9.199660, 0.000000, 0.000000, 24.700021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -4.084166, 673.239562, 9.199660, 0.000000, 0.000000, 24.700021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 13.059376, 681.124816, 9.199660, 0.000000, 0.000000, 24.700021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 28.149696, 688.065368, 9.199660, 0.000000, 0.000000, 24.700021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 44.811729, 695.729125, 9.199660, 0.000000, 0.000000, 24.700021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 62.736595, 703.973632, 15.169659, 0.000000, 0.000000, 24.700021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 79.471313, 711.670532, 15.169659, 0.000000, 0.000000, 24.700021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 93.610862, 723.161621, 15.169659, 0.000000, 0.000000, 39.100028, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 109.099632, 732.437255, 15.169659, 0.000000, 0.000000, -37.299961, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 122.332550, 743.966308, 15.169659, 0.000000, 0.000000, -37.299961, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 138.302673, 754.110656, 15.169659, 0.000000, 0.000000, -58.699958, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 152.939544, 763.010070, 15.169659, 0.000000, 0.000000, -58.699958, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 164.749923, 776.943481, 15.169659, 0.000000, 0.000000, -58.699958, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 171.281661, 794.900573, 15.169659, 0.000000, 0.000000, -58.699958, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18761, -116.899337, 1228.602905, 19.448930, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, 185.118606, 767.205078, 14.068980, -68.000007, -73.399978, 125.999992, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, 205.065521, 777.640991, 13.495999, -82.000007, -73.399978, -166.899993, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, 201.324066, 806.958496, 16.533769, -69.000022, -103.099899, -166.899993, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, 194.754516, 821.690124, 6.102283, 42.799976, -89.000022, -143.899902, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, 191.086807, 826.701293, 1.210469, 42.799976, -89.000022, -143.899902, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, 184.615005, 834.770629, 2.140199, 42.799976, -89.000022, -143.899902, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, 171.262023, 825.531311, 9.260824, 57.699970, 54.799934, -143.899902, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, 198.757904, 784.752258, 19.548896, 172.100006, 178.199996, -147.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, 178.445404, 771.934936, 18.801263, 172.100006, 178.199996, -147.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, 183.118942, 793.587280, 21.046699, 172.100006, 178.199996, -147.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, 186.954132, 811.806274, 21.468309, -175.099899, 178.199996, -80.599967, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, 184.722640, 824.890747, 23.156734, -175.099899, 178.199996, -80.599967, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, 188.475280, 831.467346, 4.580049, 176.399993, 82.699920, -127.999900, vw, ointerior);
	// tmpobjid = CreateDynamicObject(17025, 205.232147, 817.366149, 10.359005, 0.000000, 0.000000, 87.399978, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 164.218734, 815.159912, 8.809660, 0.000000, 0.000000, -58.699958, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 162.549423, 839.031555, 8.809660, 0.000000, 0.000000, -85.999961, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 189.134506, 840.890441, 8.809660, 0.000000, 0.000000, -85.999961, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 187.778366, 860.282775, 8.809660, 0.000000, 0.000000, -85.999961, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 169.381774, 855.578430, 8.809660, 0.000000, 0.000000, -85.999961, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 202.852081, 852.166381, 8.809660, 0.000000, 0.000000, -118.299896, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 210.576034, 838.183349, 8.809660, 0.000000, 0.000000, -118.299896, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 221.455642, 829.182861, 8.809660, 0.000000, 0.000000, -129.599899, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 227.114807, 814.206359, 2.799662, 0.000000, 0.000000, -159.299896, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 222.408523, 798.370544, 2.799662, 0.000000, 0.000000, -159.299896, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 220.546493, 782.957397, -2.550338, 0.000000, 0.000000, -159.299896, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 220.846313, 769.376892, -2.550338, 0.000000, 0.000000, -159.299896, vw, ointerior);
	// tmpobjid = CreateDynamicObject(658, -285.883605, 828.091247, 10.309975, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(658, -276.157409, 829.376770, 12.633563, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(658, -281.555603, 826.353637, 11.788969, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(658, -270.052001, 831.912719, 10.108757, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18268, -246.987197, 852.141479, 32.400630, 0.000000, 0.000000, -4.699999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -269.343902, 843.775024, 8.879192, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -249.810302, 852.363586, 8.849481, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -260.099914, 810.375000, 13.262116, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -239.291793, 810.381713, 14.925223, -13.100000, 1.199998, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -220.310501, 836.292297, 11.067132, 0.000000, 0.000000, 27.399993, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -284.509887, 852.660583, 9.401848, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -284.899810, 868.464660, 7.725321, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -286.336090, 884.578369, 8.609244, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -287.265686, 899.215209, 8.766778, 0.000000, 0.000000, 69.899986, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -293.704986, 918.660095, 9.950954, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -303.751312, 934.355895, 9.891226, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -318.816894, 943.800354, 8.828704, 0.000000, -0.699998, -13.399990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -333.726898, 953.138854, 8.870184, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -344.982604, 964.394958, 8.691364, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -354.891387, 975.523925, 7.339365, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -360.929992, 989.182861, 8.023906, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -371.001098, 1004.618530, 7.201978, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -385.678497, 1019.235229, 9.291989, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -396.199096, 1022.966613, 7.978551, 0.000000, 0.000000, 63.299991, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19381, -126.881500, 1039.259155, 18.945766, 1.199998, 89.499969, 0.699998, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 17500, "stormdrain", "golf_heavygrass", 0);
	// tmpobjid = CreateDynamicObject(3172, 125.875350, 1055.937500, 12.565356, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3173, 114.133750, 1047.400756, 12.599368, 0.000000, 0.000000, 85.399986, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3168, 90.697105, 1085.663574, 12.589370, 0.000000, 0.000000, 134.400024, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3169, 96.952392, 1052.356933, 12.609369, 0.000000, 0.000000, 9.499985, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3785, -228.774307, 1050.484252, 21.634389, 0.000000, 0.000000, -76.600036, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3167, 93.506729, 1067.920410, 12.579366, 0.000000, 0.000000, 3.199999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3169, 128.787506, 1076.233764, 12.549365, 0.000000, 0.000000, 170.100006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3171, 99.968963, 1092.566650, 12.529370, 0.000000, 0.000000, 146.999984, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3172, 110.635200, 1067.141967, 12.575345, 0.000000, 0.000000, -89.900009, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19381, -146.438903, 1012.825073, 18.823547, 0.000000, 90.099960, 0.699998, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 5413, "motel_lae", "fakestone1_LA", 0);
	// tmpobjid = CreateDynamicObject(3171, 106.565551, 1076.006958, 12.529370, 0.000000, 0.000000, 172.599960, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19381, -146.556304, 1022.444213, 18.823547, 0.000000, 90.099960, 0.699998, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 17500, "stormdrain", "golf_heavygrass", 0);
	// tmpobjid = CreateDynamicObject(639, 175.272552, 839.409912, 18.345815, 0.000000, 0.000000, -35.100009, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1308, 112.424110, 1085.613769, 12.829372, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(703, -99.150047, 1007.294128, 18.755477, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(703, -99.150047, 1026.124023, 18.755477, 0.000000, 0.000000, -53.999980, vw, ointerior);
	// tmpobjid = CreateDynamicObject(792, 105.349250, 1085.701660, 12.889369, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(703, -101.911300, 1046.478271, 17.555477, 0.000000, 0.000000, -53.999980, vw, ointerior);
	// tmpobjid = CreateDynamicObject(703, -80.380050, 1011.854125, 17.045471, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1358, 107.607398, 1082.133056, 13.809375, 0.000000, 0.000000, -6.399999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1415, 126.916542, 1069.889526, 12.685355, 0.000000, 0.000000, -9.799986, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3169, 127.139488, 1105.115844, 12.609369, 0.000000, 0.000000, -126.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(11491, -433.314910, 1298.255126, 26.017740, 0.000000, 0.000000, 119.700019, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "stonewall3_la", 0);
	// tmpobjid = CreateDynamicObject(1308, 121.194061, 1076.783569, 12.829372, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19375, -453.421905, 1295.484008, 24.599601, 0.000000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -456.345489, 1281.681152, 23.316703, 13.600001, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(1308, 110.944030, 1057.193847, 12.829372, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3169, 116.278282, 1087.450439, 12.549365, 0.000000, 0.000000, 87.099967, vw, ointerior);
	// tmpobjid = CreateDynamicObject(849, 122.010467, 1089.025634, 12.869370, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19447, -121.301803, 1021.315612, 20.279073, 0.000000, 0.000000, 0.699836, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0);
	// tmpobjid = CreateDynamicObject(2059, 131.832824, 1090.998168, 12.629364, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2671, 128.632385, 1084.100708, 12.629380, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(12957, 123.195709, 1085.088500, 13.329365, 0.000000, 0.000000, -3.599998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19375, -457.167297, 1301.968872, 24.679874, 0.000000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(1440, 109.681221, 1089.903076, 13.089373, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19447, -151.631896, 1011.417602, 20.279073, 0.000000, 0.000000, -179.700103, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	// tmpobjid = CreateDynamicObject(19869, 86.270790, 1076.698120, 12.579369, 0.000000, 0.000000, 10.100001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19375, -462.411804, 1311.052612, 24.808021, 0.000000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19869, 91.459098, 1077.622070, 12.579369, 0.000000, 0.000000, 10.100001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 96.647422, 1078.546508, 12.579369, 0.000000, 0.000000, 10.100001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 97.262428, 1060.667114, 12.579369, 0.000000, 0.000000, 10.100001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 92.034652, 1059.735351, 12.579369, 0.000000, 0.000000, 10.100001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 88.155693, 1059.044555, 12.579369, 0.000000, 0.000000, 10.100001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 126.472526, 1065.869750, 12.579369, 0.000000, 0.000000, 2.600002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 131.807022, 1066.111450, 12.579369, 0.000000, 0.000000, 2.600002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 137.081512, 1066.350952, 12.579369, 0.000000, 0.000000, 2.600002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 130.406051, 1083.877441, 12.579369, 0.000000, 0.000000, -13.499990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 135.520736, 1082.649047, 12.579369, 0.000000, 0.000000, -13.499990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19375, -454.072204, 1315.866943, 24.788024, 0.000000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(18862, 101.645332, 1101.069458, 12.764500, -14.899990, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19447, -121.531799, 1039.326049, 20.279073, 0.000000, 0.000000, 0.699836, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	// tmpobjid = CreateDynamicObject(19375, -448.822692, 1306.774658, 24.659748, 0.000000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -443.572814, 1297.680175, 24.531499, 0.000000, 90.699974, -59.999988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19375, -435.233093, 1302.495971, 24.531499, 0.000000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 9098, "vgesvhouse01", "redstones01_256", 0);
	// tmpobjid = CreateDynamicObject(3171, 137.973800, 1087.859741, 12.529370, 0.000000, 0.000000, -13.600090, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19375, -443.504211, 1278.304565, 24.336002, 0.000000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -430.059509, 1273.952148, 24.402702, 1.899999, 90.699974, -60.199989, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -438.157745, 1269.375244, 24.235250, 0.000000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -430.307800, 1285.363647, 24.678205, 1.600000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -425.275207, 1276.653808, 24.555355, 1.600000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -416.938903, 1281.465942, 24.824251, 1.600000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -422.186401, 1290.548217, 24.952325, 1.600000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -427.429199, 1299.621826, 25.080305, 1.600000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -432.667510, 1308.647460, 25.038366, 1.299999, 88.399978, -59.799991, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19447, -147.018798, 1021.050598, 18.860836, 0.000000, 90.099975, -89.499961, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19375, -440.984497, 1303.860961, 24.939306, -0.199999, 87.599960, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -440.474304, 1311.594848, 24.659748, 0.000000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -435.873809, 1314.249755, 24.782072, 2.500000, 88.299980, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -445.750000, 1320.672241, 24.788024, 0.000000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -419.092895, 1304.435058, 25.349199, 1.600000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -424.336608, 1313.473022, 25.257406, 1.299999, 88.399978, -59.799991, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -435.560302, 1294.453735, 24.806432, 1.600000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -413.893005, 1295.336059, 25.219804, 1.600000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(690, 150.968750, 869.712646, 15.023061, 0.000000, 0.000000, 30.600004, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19375, -437.419311, 1325.481323, 24.788024, 0.000000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -429.665496, 1322.472900, 25.036943, 2.500000, 88.299980, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -410.970703, 1309.143432, 24.312059, -14.000000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 16102, "des_cen", "sandgrnd128", 0);
	// tmpobjid = CreateDynamicObject(19375, -416.196685, 1318.204101, 24.164716, -14.000000, 87.800003, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 16102, "des_cen", "sandgrnd128", 0);
	// tmpobjid = CreateDynamicObject(19375, -405.782806, 1300.096313, 24.188428, -14.000000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 16102, "des_cen", "sandgrnd128", 0);
	// tmpobjid = CreateDynamicObject(19378, -409.868988, 1298.115844, 24.756168, 0.000000, 0.000000, 30.100004, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -419.979492, 1315.557250, 24.856163, 0.000000, 0.000000, 30.100004, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(0, -416.152191, 1318.975952, 26.682598, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19378, -428.788604, 1330.711914, 24.856163, 0.000000, 0.000000, 30.100004, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -435.385803, 1332.572143, 24.856163, 0.000000, 0.000000, -62.099990, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(690, 134.926696, 860.829528, 15.023061, 0.000000, 0.000000, 30.600004, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 113.534820, 853.920104, 18.433063, 0.000000, 0.000000, 17.900001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 94.235794, 857.092163, 25.023071, 0.000000, 0.000000, 17.900001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 74.186729, 858.247558, 25.023071, 0.000000, 0.000000, 7.900002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 56.855068, 860.023315, 25.093074, 0.000000, 0.000000, -10.399990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 40.046401, 860.231018, 25.023071, 0.000000, 0.000000, -10.399990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 23.935510, 854.996093, 25.023071, 0.000000, 0.000000, 18.000003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 4.804191, 853.879577, 25.023071, 0.000000, 0.000000, 18.000003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -14.860679, 849.130432, 25.023071, 0.000000, 0.000000, 18.000003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -31.286449, 839.492797, 25.023071, 0.000000, 0.000000, 18.000003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -49.365028, 831.252868, 25.023071, 0.000000, 0.000000, 18.000003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -64.443176, 822.997680, 25.023071, 0.000000, 0.000000, 28.700010, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -78.924850, 815.069152, 19.383068, 0.000000, 0.000000, 28.700010, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -96.663963, 810.008850, 13.133069, 0.000000, 0.000000, 28.700010, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -92.250091, 795.924011, 13.133069, 0.000000, 0.000000, 17.400011, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -87.602981, 781.094970, 11.333066, 0.000000, 0.000000, 17.400011, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -88.566673, 764.339904, 11.333066, 0.000000, 0.000000, 17.400011, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -99.761238, 750.893310, 11.333066, 0.000000, 0.000000, 62.900024, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -113.017303, 741.781982, 11.333066, 0.000000, 0.000000, 62.900024, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -128.210601, 733.077331, 11.333066, 0.000000, 0.000000, 62.900024, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -155.493606, 703.967956, 11.333066, 0.000000, 0.000000, 96.700027, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -133.514801, 706.549926, 11.333066, 0.000000, 0.000000, 96.700027, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -113.105102, 708.947387, 11.333066, 0.000000, 0.000000, 96.700027, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -95.784217, 710.982604, 11.333066, 0.000000, 0.000000, 96.700027, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -76.059799, 713.300048, 11.333066, 0.000000, 0.000000, 96.700027, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -57.944358, 715.428222, 11.333066, 0.000000, 0.000000, 96.700027, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -42.361511, 717.258483, 11.333066, 0.000000, 0.000000, 96.700027, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -13.867449, 720.605712, 11.333066, 0.000000, 0.000000, 96.700027, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 3.324331, 722.625183, 11.333066, 0.000000, 0.000000, 96.700027, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 19.602396, 724.537536, 11.333066, 0.000000, 0.000000, 96.700027, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 36.059234, 726.470947, 11.333066, 0.000000, 0.000000, 96.700027, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 52.237983, 728.371582, 11.333066, 0.000000, 0.000000, 96.700027, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 68.565696, 730.289672, 11.333066, 0.000000, 0.000000, 96.700027, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -87.708312, 732.188781, 14.793066, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -53.495689, 739.523681, 14.793066, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -27.017320, 745.200195, 14.793066, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -1.477632, 750.675415, 14.793066, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 18.078025, 754.867370, 14.793066, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 35.208793, 758.539672, 14.793066, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 54.813343, 762.742431, 21.703067, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 71.533424, 766.326904, 21.703067, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 87.138824, 769.672424, 21.703067, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 103.213592, 773.118591, 21.703067, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 127.961257, 778.423889, 21.703067, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(789, 46.360324, 810.102722, 25.808122, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(16061, 57.407615, 832.952758, 35.789863, 0.000000, 0.000000, -54.800010, vw, ointerior);
	// tmpobjid = CreateDynamicObject(16061, 64.818443, 806.313232, 32.839893, 0.000000, 0.000000, -54.800010, vw, ointerior);
	// tmpobjid = CreateDynamicObject(16061, 72.704032, 795.134704, 31.329881, 0.000000, 0.000000, -54.800010, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 123.383209, 799.778808, 21.703067, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 119.287231, 818.884521, 21.703067, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 105.470230, 795.938720, 21.703067, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 88.164459, 789.600036, 21.703067, 0.000000, 0.000000, 102.100021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(16061, 6.038436, 796.715820, 31.288328, 8.500000, 0.000000, -54.800010, vw, ointerior);
	// tmpobjid = CreateDynamicObject(16061, -3.994977, 810.527465, 32.458427, 4.300002, 0.000000, -54.800010, vw, ointerior);
	// tmpobjid = CreateDynamicObject(16061, -53.197151, 774.541320, 23.569164, 7.700000, 0.000000, -50.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(16061, -45.582920, 765.473937, 22.848823, 3.900002, 0.000000, -50.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(16061, -23.780260, 765.506042, 23.608161, 1.300001, 0.000000, -75.700050, vw, ointerior);
	// tmpobjid = CreateDynamicObject(16061, 33.239795, 780.039978, 29.864759, 1.300001, 0.000000, -75.700050, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 10.537214, 835.729492, 27.022134, 0.000000, 0.000000, 22.100000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -11.421509, 826.812744, 27.022134, 0.000000, 0.000000, 22.100000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -28.328029, 816.591247, 27.022134, 0.000000, 0.000000, 22.100000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -51.108051, 802.786621, 21.442134, 0.000000, 0.000000, 22.100000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -63.360858, 785.574462, 11.802132, 0.000000, 0.000000, 50.699996, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 168.957763, 886.279602, 17.387807, 0.000000, 0.000000, -39.199989, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 176.583572, 897.829101, 13.867808, 0.000000, 0.000000, -39.199989, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 186.906005, 912.779785, 13.867808, 0.000000, 0.000000, -39.199989, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 199.559173, 928.294311, 13.867808, 0.000000, 0.000000, -39.199989, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 210.347885, 941.522827, 16.267808, 0.000000, 0.000000, -39.199989, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 223.999053, 928.040832, 16.267808, 0.000000, 0.000000, -39.199989, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 232.597427, 907.540588, 16.267808, 0.000000, 0.000000, 4.400002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 238.982910, 885.164611, 16.267808, 0.000000, 0.000000, 4.400002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 235.917800, 864.388366, 7.407810, 0.000000, 0.000000, 4.400002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 237.678543, 841.506164, -0.452188, 0.000000, 0.000000, 4.400002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 255.943237, 834.326721, -0.452188, 0.000000, 0.000000, 4.400002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -392.436798, 1132.606445, 6.536303, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -392.436798, 1115.526733, 6.536303, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -392.436798, 1094.747070, 6.536303, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -392.436798, 1075.876953, 6.536303, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -364.656799, 1075.876953, 6.536303, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -364.656799, 1054.997070, 6.536303, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -364.656799, 1035.996948, 6.536303, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -354.205993, 1014.313903, 5.906303, 0.000000, 0.000000, 54.299999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -337.233398, 1002.117919, 9.886302, 0.000000, 0.000000, 54.299999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -321.852905, 985.598510, 5.326303, 0.000000, 0.000000, 54.299999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -300.610290, 982.155700, 4.236300, 0.000000, 0.000000, 54.299999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -311.575012, 966.896667, 9.576300, 0.000000, 0.000000, 54.299999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -294.700103, 954.770690, 9.576300, 0.000000, 0.000000, 54.299999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 235.598083, 1005.146972, 15.919216, 0.000000, 0.000000, 13.199998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19789, 20.918825, 1192.231445, 18.018337, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19789, 49.142944, 1192.215332, 17.984256, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19789, 20.892696, 1204.298339, 18.040044, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19789, -0.155888, 1192.219360, 18.029359, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19789, -11.789179, 1204.303100, 17.980930, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19789, -38.001091, 1204.322265, 18.009374, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18235, 48.905918, 1127.619262, 18.712181, 0.000000, 0.000000, -89.899917, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19357, 41.184906, 1126.089843, 18.658966, 0.000000, -89.800010, 0.000000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8565, "vgsebuild01", "ws_stonewall", 0);
	// tmpobjid = CreateDynamicObject(737, 41.602214, 1120.934448, 18.832180, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(737, 51.542217, 1120.934448, 18.832180, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(737, 51.542217, 1134.614868, 18.832180, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(737, 41.612258, 1134.614868, 18.832180, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(737, 61.147243, 1127.650024, 18.822996, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(8131, 43.184619, 1127.588745, 22.309843, 3.800002, 0.000000, -88.500000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 13065, "sw_fact02alt", "plainwoodenfence1_256", 0);
	// tmpobjid = CreateDynamicObject(757, 39.974693, 1129.127563, 18.762176, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(757, 39.910793, 1131.062133, 18.792190, 0.000000, 0.000000, 173.400024, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3819, 115.448799, 1040.872924, 13.499375, 0.000000, 0.000000, 89.899971, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3819, 105.968856, 1040.889160, 13.499375, 0.000000, 0.000000, 89.899971, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1256, -5.587600, 1159.229736, 19.287302, 0.000000, 0.000000, 89.900009, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1256, -80.593528, 1185.292724, 19.385520, 0.000000, 0.000000, 179.999954, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1256, -80.593528, 1181.042724, 19.385520, 0.000000, 0.000000, 179.999954, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1256, -80.593528, 1177.022460, 19.385520, 0.000000, 0.000000, 179.999954, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1343, -158.505599, 1122.622558, 18.122182, 0.000000, 0.000000, -179.699996, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3862, 45.486167, 1177.562255, 18.754062, 0.000000, 0.000000, 67.199989, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1570, 45.434673, 1172.760742, 18.824052, 0.000000, 0.000000, 89.400009, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1340, 45.471424, 1168.086059, 18.664062, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1342, 46.040138, 1164.312011, 18.674064, 0.000000, 0.000000, 24.700002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3861, 47.363094, 1159.700561, 18.774065, 0.000000, 0.000000, 134.100006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, 42.878547, 1174.856567, 17.824058, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, 42.878547, 1165.126708, 17.824058, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, 45.028549, 1156.056762, 17.804058, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19831, 52.599323, 1179.930419, 17.634042, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19582, 52.383563, 1179.938964, 18.464057, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19582, 52.833366, 1179.921264, 18.464057, 0.000000, 0.000000, 131.799972, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18727, 52.615901, 1180.026855, 17.014057, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1599, 45.882114, 1176.851440, 18.418937, -178.600006, -73.400009, 56.399971, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1600, 45.664459, 1176.266845, 18.341472, 0.000000, -73.599967, -110.199897, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19566, 46.443584, 1178.254516, 18.436304, -89.999908, 0.000000, 31.099981, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1604, 46.185089, 1177.266845, 18.467214, 0.000000, 73.099945, -116.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1599, 46.422092, 1177.663208, 18.438310, -178.600006, -73.400009, 56.399971, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1575, 45.231140, 1176.339111, 18.374069, 0.000000, 0.000000, -86.900001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19836, 46.203804, 1176.371459, 18.404056, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19836, 45.873821, 1177.661010, 18.404056, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1580, 46.692237, 1178.041503, 18.334054, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2804, 45.765537, 1171.558471, 18.383600, 0.000000, 31.800001, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2806, 45.756927, 1172.850952, 18.372919, 29.000000, -7.999989, 96.000129, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19560, 45.829189, 1172.229003, 18.317333, 33.199993, 1.899999, 88.299995, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2805, 46.383193, 1173.360473, 18.974063, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18725, 46.241931, 1164.269653, 17.284063, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19585, 47.062919, 1161.075439, 18.594060, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2822, 47.356132, 1160.388061, 18.424057, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2864, 47.906799, 1160.028930, 18.364055, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19581, 48.520477, 1159.683959, 18.434059, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19590, 48.375980, 1159.967163, 18.446334, -179.099899, 92.699996, 133.000015, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19377, 46.531806, 1158.598266, 17.643882, 0.000000, -89.800041, -3.199999, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "stonewall2_la", 0);
	// tmpobjid = CreateDynamicObject(19377, 47.069938, 1168.222900, 17.643882, 0.000000, -89.800041, -3.199999, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "stonewall2_la", 0);
	// tmpobjid = CreateDynamicObject(19377, 47.606410, 1177.817504, 17.643882, 0.000000, -89.800041, -3.199999, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "stonewall2_la", 0);
	// tmpobjid = CreateDynamicObject(19377, 52.223247, 1179.693603, 17.604871, 0.000000, -89.800041, -46.900001, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "stonewall2_la", 0);
	// tmpobjid = CreateDynamicObject(19377, 59.167106, 1186.191040, 17.604871, 0.000000, -89.800041, -46.900001, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "stonewall2_la", 0);
	// tmpobjid = CreateDynamicObject(3171, -228.214202, 1056.832153, 18.694381, 0.000000, 0.000000, 88.700012, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3171, -223.419998, 1045.940307, 18.754394, 0.000000, 0.000000, -25.899999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19378, -459.748809, 1318.738159, 23.686164, 0.000000, 0.000000, -60.000000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -443.205108, 1328.266357, 24.238563, 7.399999, 0.000000, -60.000000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -451.443511, 1323.532836, 23.676162, 0.000000, 0.000000, -60.000000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -465.075103, 1315.661743, 23.686164, 0.000000, 0.000000, -60.000000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -406.722991, 1292.668457, 24.756168, 0.000000, 0.000000, 30.100004, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -404.030212, 1288.020874, 24.756168, 0.000000, 0.000000, 30.100004, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19273, -411.867889, 1301.471313, 26.922048, 0.000000, 0.000000, -62.099998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19273, -411.741912, 1301.532836, 26.922048, 0.000000, 0.000000, 119.900032, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19378, -417.385192, 1274.994873, 24.317289, 5.600000, 0.000000, -60.400020, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -409.529998, 1279.458007, 24.756168, 0.000000, 0.000000, -60.400020, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -405.790985, 1281.579711, 24.756168, 0.000000, 0.000000, -60.400020, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -425.754302, 1270.237548, 23.816165, 0.000000, 0.000000, -60.400020, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -432.032012, 1266.669555, 23.816165, 0.000000, 0.000000, -60.400020, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -435.609405, 1264.626220, 23.816165, 0.000000, 0.000000, -60.400020, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// // tmpobjid = CreateDynamicObject(11490, -442.913085, 1292.796142, 24.563980, 0.000000, 0.000000, 120.000091, vw, ointerior);
	// // duplicate ^
	// tmpobjid = CreateDynamicObject(19378, -442.295684, 1266.412353, 23.836166, 0.000000, 0.000000, -148.899993, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -446.342987, 1273.237060, 22.698110, 16.400001, 0.000000, -150.500000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -466.872100, 1309.153076, 23.686164, 0.000000, 0.000000, 29.400011, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19378, -462.805603, 1301.936035, 22.712900, 13.300001, 0.000000, 29.400011, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	// tmpobjid = CreateDynamicObject(19375, -461.638610, 1290.747558, 23.466699, 13.500000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(19375, -448.206909, 1286.621948, 24.407735, 0.000000, 90.699974, -59.999988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	// tmpobjid = CreateDynamicObject(639, -462.645507, 1296.254760, 21.997318, 13.000000, 1.500000, -58.299999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -439.994110, 1320.401977, 17.125949, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -418.174011, 1288.142456, 17.125949, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(654, -464.169403, 1311.817016, 23.955934, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(654, -456.249298, 1315.856933, 23.955934, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(654, -439.631103, 1267.053222, 24.276159, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(654, -430.321197, 1272.512939, 24.276159, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(654, -422.691314, 1276.983032, 24.276159, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1703, -439.315002, 1293.810546, 25.971788, 0.000000, 0.000000, 120.099967, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2370, -438.202606, 1295.227539, 25.981796, 0.000000, 0.000000, 31.200008, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1704, -437.172607, 1293.165039, 25.991792, 0.000000, 0.000000, 166.300003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1704, -439.912811, 1296.934326, 25.991792, 0.000000, 0.000000, 66.300025, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18688, -436.556793, 1296.540405, 25.181789, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19793, -436.363006, 1296.797241, 26.111785, 0.000000, 0.000000, -58.099990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19793, -436.541198, 1296.686523, 26.111785, 0.000000, 0.000000, -58.099990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19793, -436.439392, 1296.750000, 26.241788, 0.000000, 0.000000, -58.099990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1736, -436.961700, 1296.249755, 28.781795, 0.000000, 0.000000, -58.299991, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2800, -438.186706, 1295.664306, 26.691785, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19824, -438.348693, 1296.089111, 26.831790, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19157, -463.978698, 1281.752929, 24.306364, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1723, -462.075988, 1282.830444, 23.326072, 0.000000, 0.000000, -87.699989, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2370, -464.396392, 1281.235351, 23.153926, 0.000000, 0.000000, 2.499999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2801, -464.122406, 1281.619018, 23.652675, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1704, -463.549285, 1279.493652, 23.234773, 0.000000, 0.000000, -177.199996, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1704, -464.552093, 1283.675659, 23.184774, 0.000000, 0.000000, 0.899900, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19121, -459.583007, 1275.021850, 24.118879, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19121, -470.523895, 1291.655151, 22.961292, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19172, -441.560302, 1298.802612, 27.761800, 0.000000, 0.000000, 30.200002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1742, -445.078796, 1287.866943, 26.081792, 0.000000, 0.000000, 119.599990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1828, -442.484313, 1292.799926, 26.061790, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18228, -465.799987, 893.020629, -5.573156, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18228, -493.530395, 860.593017, -5.283156, 0.000000, 0.000000, 35.800003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18228, -492.650604, 825.124572, -5.573156, 0.000000, 0.000000, 90.000007, vw, ointerior);
	// tmpobjid = CreateDynamicObject(826, -470.600891, 840.077392, 1.898916, 0.000000, 0.000000, -40.299991, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, -484.019500, 880.256896, 9.953927, 0.000000, 0.000000, -63.199970, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, -486.987701, 871.597656, 1.533184, -85.299987, -41.699989, 99.099990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, -481.520690, 880.294372, -0.841221, 115.799987, -138.399993, 80.700027, vw, ointerior);
	// tmpobjid = CreateDynamicObject(11696, -503.047912, 801.758361, -84.866127, 0.000000, 0.000000, 0.900086, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -469.324005, 762.837829, 7.497796, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -479.592407, 737.294616, 7.497796, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -487.749603, 717.002319, 7.497796, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -465.744903, 712.434814, 7.497796, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -484.321411, 695.610229, 7.497796, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -497.274108, 731.996643, 3.507797, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -494.796905, 753.547973, 7.497796, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -522.796020, 757.841369, -6.162206, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -528.401977, 743.896362, -6.162206, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -548.058715, 743.659301, -6.162206, 0.000000, 0.000000, -16.499990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -542.997375, 760.745300, -6.162206, 0.000000, 0.000000, -16.499990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -537.121276, 780.583618, -6.162206, 0.000000, 0.000000, -16.499990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -520.015686, 775.516662, -10.992199, 0.000000, 0.000000, -16.499990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -508.695190, 792.396545, -10.992199, 0.000000, 0.000000, -16.499990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -561.035095, 763.721252, -10.992199, 0.000000, 0.000000, -16.499990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -554.400390, 786.119079, -10.992199, 0.000000, 0.000000, -16.499990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -574.583618, 792.097473, -10.992199, 0.000000, 0.000000, -16.499990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -577.185302, 774.512390, -10.992199, 0.000000, 0.000000, -16.499990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -577.178405, 805.872192, -10.992199, 0.000000, 0.000000, -16.499990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -567.335205, 819.492919, -6.162206, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -570.538513, 837.960205, -6.162206, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -554.624084, 828.512695, -6.162206, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -535.225402, 824.756103, -6.162206, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -518.366699, 817.978698, -6.162206, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, -501.721405, 811.287536, -6.162206, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19381, -137.380294, 1039.131958, 18.854152, 1.199998, 89.499969, 0.699998, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 17500, "stormdrain", "golf_heavygrass", 0);
	// tmpobjid = CreateDynamicObject(690, -493.603393, 797.860961, -6.162206, 0.000000, 0.000000, -21.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(12937, -552.547912, 800.275329, 3.574489, 0.000000, 0.000000, 150.100006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(11459, -538.091003, 785.721435, 0.524489, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(11444, -510.815704, 800.682250, 0.744490, 0.000000, 0.000000, 78.300003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(11447, -529.258300, 813.751403, 0.694490, 0.000000, 0.000000, 102.599983, vw, ointerior);
	// tmpobjid = CreateDynamicObject(13360, -548.841308, 801.724975, 2.584489, 0.000000, 0.000000, -31.600019, vw, ointerior);
	// tmpobjid = CreateDynamicObject(901, 180.107986, 823.194030, 16.542192, 0.000000, 0.000000, 98.899963, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3253, -512.030517, 782.776000, 0.924490, 0.000000, 0.000000, -122.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3246, -562.029113, 809.906799, 0.694490, 0.000000, 0.000000, 117.599983, vw, ointerior);
	// tmpobjid = CreateDynamicObject(11444, -513.531005, 809.221313, 0.744490, 0.000000, 0.000000, 127.999961, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19632, -543.331726, 811.455932, -28.498039, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(905, -548.822875, 811.707885, 0.691956, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(905, -544.068176, 813.787048, 0.691956, 0.000000, 0.000000, -56.799999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(905, -541.830200, 813.480468, 0.651956, 0.000000, 0.000000, -114.199897, vw, ointerior);
	// tmpobjid = CreateDynamicObject(905, -540.777404, 810.670043, 0.651956, 0.000000, 0.000000, 7.699987, vw, ointerior);
	// tmpobjid = CreateDynamicObject(905, -540.842224, 815.678771, 0.651956, 0.000000, 0.000000, -114.199897, vw, ointerior);
	// tmpobjid = CreateDynamicObject(905, -543.121826, 815.924682, 0.651956, 0.000000, 0.000000, -114.199897, vw, ointerior);
	// tmpobjid = CreateDynamicObject(905, -545.459106, 815.912292, 0.691956, 0.000000, 0.000000, -56.799999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(905, -547.867370, 814.169189, 0.691956, 0.000000, 0.000000, -56.799999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(901, 181.144134, 821.214843, 15.507880, -0.099999, -30.000000, 106.299980, vw, ointerior);
	// tmpobjid = CreateDynamicObject(845, -540.976074, 819.694885, 1.511957, 0.000000, 0.000000, 153.499954, vw, ointerior);
	// tmpobjid = CreateDynamicObject(841, -545.324401, 810.037292, 0.824490, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(841, -545.324401, 810.037292, 0.824490, 0.000000, 0.000000, -51.800010, vw, ointerior);
	// tmpobjid = CreateDynamicObject(14400, 176.793182, 836.659240, 16.231563, 0.000000, 8.999995, -60.299991, vw, ointerior);
	// tmpobjid = CreateDynamicObject(836, -534.275085, 813.908752, 1.854490, 0.000000, 0.000000, -32.399990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(837, -537.915222, 812.479675, 1.224490, 0.000000, 0.000000, 100.500030, vw, ointerior);
	// tmpobjid = CreateDynamicObject(834, 181.354293, 832.135131, 17.477798, 0.000000, 0.000000, -49.399978, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18692, -545.181823, 809.824707, -1.725509, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(14400, 180.113815, 832.325988, 15.740129, 0.000000, 3.799998, -39.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(900, -479.374908, 855.780517, -13.917719, 0.799998, 90.000000, -3.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(826, -466.827697, 843.459594, 0.988916, 0.000000, 0.000000, -40.299991, vw, ointerior);
	// tmpobjid = CreateDynamicObject(826, -462.172698, 863.047546, 0.988916, 0.000000, 0.000000, 2.799994, vw, ointerior);
	// tmpobjid = CreateDynamicObject(826, -462.438385, 868.480957, 2.188916, 0.000000, 0.000000, 2.799994, vw, ointerior);
	// tmpobjid = CreateDynamicObject(826, -460.440399, 875.737182, 2.188916, 0.000000, 0.000000, 2.799994, vw, ointerior);
	// tmpobjid = CreateDynamicObject(703, -437.567687, 837.043273, 0.038917, 0.000000, 0.000000, 103.699981, vw, ointerior);
	// tmpobjid = CreateDynamicObject(826, -460.781799, 882.718933, 2.188916, 0.000000, 0.000000, 2.799994, vw, ointerior);
	// tmpobjid = CreateDynamicObject(703, -437.567687, 854.603454, 0.038917, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(703, -462.336486, 822.873901, -0.431080, 0.000000, 0.000000, 169.599990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(616, -444.406585, 846.968872, -1.141082, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19632, 194.325820, 800.335510, 11.036676, -6.999997, -2.199999, 48.700008, vw, ointerior);
	// tmpobjid = CreateDynamicObject(616, -444.406585, 865.028869, -1.141082, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(616, -448.726806, 870.344665, -1.141082, 0.000000, 0.000000, -50.899990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(616, -452.756805, 875.303588, -1.141082, 0.000000, 0.000000, 7.399995, vw, ointerior);
	// tmpobjid = CreateDynamicObject(616, -452.696685, 854.998840, -1.141082, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(616, -456.316711, 861.488891, -1.141082, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(616, -449.116607, 826.988769, -1.141082, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(616, -452.816497, 839.598876, -1.141082, 0.000000, 0.000000, 72.499992, vw, ointerior);
	// tmpobjid = CreateDynamicObject(616, -460.363708, 831.126281, -1.141082, 0.000000, 0.000000, 72.499992, vw, ointerior);
	// tmpobjid = CreateDynamicObject(839, 198.646896, 795.071777, 12.709160, 2.299999, 0.000000, -10.899999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(672, -453.565093, 859.739685, 1.578917, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(672, -453.565093, 847.739807, 1.578917, 0.000000, 0.000000, -91.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(672, -455.431213, 832.510009, 1.578917, 0.000000, 0.000000, -91.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(672, -468.179290, 832.732482, 1.578917, 0.000000, 0.000000, -42.400001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(684, 190.831680, 798.957824, 10.670884, 0.000000, 11.300036, -4.899932, vw, ointerior);
	// tmpobjid = CreateDynamicObject(825, -451.872192, 855.322937, 2.048918, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(825, -451.872192, 841.012878, 2.048918, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(825, -440.902191, 845.852905, 2.048918, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(835, 185.224624, 810.977600, 12.841099, 0.199999, -4.599998, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3920, 188.743896, 823.697509, 19.240980, 5.799996, 1.699998, 124.000022, vw, ointerior);
	// tmpobjid = CreateDynamicObject(846, 195.491363, 796.338134, 11.561384, 5.099997, -1.199996, -62.799999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(800, 194.281982, 790.265014, 11.821014, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(848, 196.723052, 802.525512, 12.701943, 2.000000, -1.799998, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(833, 185.154922, 809.473999, 12.157620, 49.199993, -23.899929, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, 186.277557, 776.614318, 8.023204, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(5713, 214.020874, 789.694152, 7.914505, 0.000000, 0.000000, 101.099929, vw, ointerior);
	// tmpobjid = CreateDynamicObject(800, 200.620010, 790.995422, 12.430830, 0.000000, 0.000000, -117.199996, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 198.155700, 787.191101, 10.768303, 3.999999, 4.899998, -71.899986, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 199.287033, 783.079162, 10.356664, -2.499999, 0.000000, 126.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18720, 200.019821, 776.939208, 13.367057, 0.000000, 0.000000, 49.499988, vw, ointerior);
	// tmpobjid = CreateDynamicObject(639, 195.604400, 823.927673, 20.736728, 0.000000, 0.000000, -154.799926, vw, ointerior);
	// tmpobjid = CreateDynamicObject(639, 195.969635, 818.530273, 20.736728, 0.000000, 0.000000, 164.400100, vw, ointerior);
	// tmpobjid = CreateDynamicObject(639, 192.411331, 827.983093, 20.736728, 0.000000, 0.000000, -131.799926, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2949, 195.366241, 823.126708, 18.937164, 0.000000, 22.800001, -157.099975, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	// tmpobjid = CreateDynamicObject(747, 194.752746, 822.418518, 19.763881, 0.000000, 0.000000, 37.800006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(747, 192.779052, 825.338928, 19.909215, 0.000000, -14.100001, 103.399986, vw, ointerior);
	// Forest West
	// ointerior = 0,vw = 0;
	// tmpobjid = CreateDynamicObject(3172, 125.875350, 1055.937500, 12.565356, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3173, 114.133750, 1047.400756, 12.599368, 0.000000, 0.000000, 85.399986, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3168, 90.697105, 1085.663574, 12.589370, 0.000000, 0.000000, 134.400024, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3169, 96.952392, 1052.356933, 12.609369, 0.000000, 0.000000, 9.499985, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3167, 93.506729, 1067.920410, 12.579366, 0.000000, 0.000000, 3.199999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3169, 128.787506, 1076.233764, 12.549365, 0.000000, 0.000000, 170.100006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3171, 99.968963, 1092.566650, 12.529370, 0.000000, 0.000000, 146.999984, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3172, 110.635200, 1067.141967, 12.575345, 0.000000, 0.000000, -89.900009, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3171, 106.565551, 1076.006958, 12.529370, 0.000000, 0.000000, 172.599960, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1308, 112.424110, 1085.613769, 12.829372, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(792, 105.349250, 1085.701660, 12.889369, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1358, 107.607398, 1082.133056, 13.809375, 0.000000, 0.000000, -6.399999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1415, 126.916542, 1069.889526, 12.685355, 0.000000, 0.000000, -9.799986, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3169, 127.139488, 1105.115844, 12.609369, 0.000000, 0.000000, -126.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1308, 121.194061, 1076.783569, 12.829372, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1308, 110.944030, 1057.193847, 12.829372, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3169, 116.278282, 1087.450439, 12.549365, 0.000000, 0.000000, 87.099967, vw, ointerior);
	// tmpobjid = CreateDynamicObject(849, 122.010467, 1089.025634, 12.869370, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2059, 131.832824, 1090.998168, 12.629364, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2671, 128.632385, 1084.100708, 12.629380, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(12957, 123.195709, 1085.088500, 13.329365, 0.000000, 0.000000, -3.599998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1440, 109.681221, 1089.903076, 13.089373, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 86.270790, 1076.698120, 12.579369, 0.000000, 0.000000, 10.100001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 91.459098, 1077.622070, 12.579369, 0.000000, 0.000000, 10.100001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 96.647422, 1078.546508, 12.579369, 0.000000, 0.000000, 10.100001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 97.262428, 1060.667114, 12.579369, 0.000000, 0.000000, 10.100001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 92.034652, 1059.735351, 12.579369, 0.000000, 0.000000, 10.100001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 88.155693, 1059.044555, 12.579369, 0.000000, 0.000000, 10.100001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 126.472526, 1065.869750, 12.579369, 0.000000, 0.000000, 2.600002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 131.807022, 1066.111450, 12.579369, 0.000000, 0.000000, 2.600002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 137.081512, 1066.350952, 12.579369, 0.000000, 0.000000, 2.600002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 130.406051, 1083.877441, 12.579369, 0.000000, 0.000000, -13.499990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19869, 135.520736, 1082.649047, 12.579369, 0.000000, 0.000000, -13.499990, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18862, 101.645332, 1101.069458, 12.764500, -14.899990, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3171, 137.973800, 1087.859741, 12.529370, 0.000000, 0.000000, -13.600090, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 176.583572, 897.829101, 13.867808, 0.000000, 0.000000, -39.199989, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 186.906005, 912.779785, 13.867808, 0.000000, 0.000000, -39.199989, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 199.559173, 928.294311, 13.867808, 0.000000, 0.000000, -39.199989, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 210.347885, 941.522827, 16.267808, 0.000000, 0.000000, -39.199989, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 223.999053, 928.040832, 16.267808, 0.000000, 0.000000, -39.199989, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 232.597427, 907.540588, 16.267808, 0.000000, 0.000000, 4.400002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 238.982910, 885.164611, 16.267808, 0.000000, 0.000000, 4.400002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 235.917800, 864.388366, 7.407810, 0.000000, 0.000000, 4.400002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 255.943237, 834.326721, -0.452188, 0.000000, 0.000000, 4.400002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(5520, 347.434936, 1162.653442, 12.261489, 0.000000, 0.000000, -85.200012, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 366.523956, 1169.528808, -3.030781, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 362.663970, 1153.148071, -3.030781, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 362.663970, 1131.208007, -0.560781, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 362.663970, 1114.917846, 2.909218, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 356.593933, 1096.297851, 7.199214, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 348.983947, 1078.197753, 7.199214, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 344.623901, 1098.607910, 4.489214, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 344.623901, 1117.877929, 4.489214, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 347.033874, 1134.458007, 4.489214, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 311.273956, 1115.338012, 0.739214, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 321.304138, 1081.567504, 6.939211, 0.000000, 0.000000, 18.799999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 300.922760, 1074.629150, 6.939211, 0.000000, 0.000000, 18.799999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 294.831970, 1092.520874, 6.939211, 0.000000, 0.000000, 18.799999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 288.773223, 1110.319213, 6.939211, 0.000000, 0.000000, 18.799999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 270.360870, 1104.051269, 6.939211, 0.000000, 0.000000, 18.799999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 250.152725, 1109.808227, 3.219211, 0.000000, 0.000000, -2.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 232.052032, 1109.958251, 3.219211, 0.000000, 0.000000, -2.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 209.813156, 1110.929443, 3.219211, 0.000000, 0.000000, -2.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 250.903915, 1092.507568, 1.819215, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 219.403930, 1092.507568, 7.439215, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 216.283950, 1076.907958, 7.439215, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 216.283950, 1058.897705, 11.219215, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 222.616500, 1040.568969, 11.219215, 0.000000, 0.000000, 13.199998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 231.455810, 1022.807617, 15.919216, 0.000000, 0.000000, 13.199998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 235.598083, 1005.146972, 15.919216, 0.000000, 0.000000, 13.199998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 256.364471, 1010.017822, 15.919216, 0.000000, 0.000000, 13.199998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 252.210693, 1027.727050, 15.919216, 0.000000, 0.000000, 13.199998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 272.898529, 1029.693603, 15.919216, 0.000000, 0.000000, 13.199998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 294.145141, 1039.874145, 15.919216, 0.000000, 0.000000, 13.199998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 312.302734, 1051.137573, 15.919216, 0.000000, 0.000000, 13.199998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 289.594177, 1059.277832, 15.919216, 0.000000, 0.000000, 13.199998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 268.389648, 1054.304443, 11.759214, 0.000000, 0.000000, 13.199998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 271.956420, 1039.096923, 15.719215, 0.000000, 0.000000, 13.199998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 262.790435, 1078.176757, 8.819212, 0.000000, 0.000000, 13.199998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 281.133422, 1074.723876, 8.819212, 0.000000, 0.000000, 13.199998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18235, 48.905918, 1127.619262, 18.712181, 0.000000, 0.000000, -89.899917, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19357, 41.184906, 1126.089843, 18.658966, 0.000000, -89.800010, 0.000000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 8565, "vgsebuild01", "ws_stonewall", 0);
	// tmpobjid = CreateDynamicObject(737, 41.602214, 1120.934448, 18.832180, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(737, 51.542217, 1120.934448, 18.832180, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(737, 51.542217, 1134.614868, 18.832180, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(737, 41.612258, 1134.614868, 18.832180, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(737, 61.147243, 1127.650024, 18.822996, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(8131, 43.184619, 1127.588745, 22.309843, 3.800002, 0.000000, -88.500000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 13065, "sw_fact02alt", "plainwoodenfence1_256", 0);
	// tmpobjid = CreateDynamicObject(757, 39.974693, 1129.127563, 18.762176, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(757, 39.910793, 1131.062133, 18.792190, 0.000000, 0.000000, 173.400024, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3819, 115.448799, 1040.872924, 13.499375, 0.000000, 0.000000, 89.899971, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3819, 105.968856, 1040.889160, 13.499375, 0.000000, 0.000000, 89.899971, vw, ointerior);

	// Fish Market
	// ointerior = 0,vw = 0;
	// tmpobjid = CreateDynamicObject(2803, 45.415283, 1170.391113, 18.074052, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3862, 45.486167, 1177.562255, 18.754062, 0.000000, 0.000000, 67.199989, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1570, 45.434673, 1172.760742, 18.824052, 0.000000, 0.000000, 89.400009, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1340, 45.471424, 1168.086059, 18.664062, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1342, 46.040138, 1164.312011, 18.674064, 0.000000, 0.000000, 24.700002, vw, ointerior);
	// tmpobjid = CreateDynamicObject(3861, 47.363094, 1159.700561, 18.774065, 0.000000, 0.000000, 134.100006, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, 42.878547, 1174.856567, 17.824058, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, 42.878547, 1165.126708, 17.824058, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(738, 45.028549, 1156.056762, 17.804058, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19831, 52.599323, 1179.930419, 17.634042, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19582, 52.383563, 1179.938964, 18.464057, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19582, 52.833366, 1179.921264, 18.464057, 0.000000, 0.000000, 131.799972, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18727, 52.615901, 1180.026855, 17.014057, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1599, 45.882114, 1176.851440, 18.418937, -178.600006, -73.400009, 56.399971, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1600, 45.664459, 1176.266845, 18.341472, 0.000000, -73.599967, -110.199897, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19566, 46.443584, 1178.254516, 18.436304, -89.999908, 0.000000, 31.099981, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1604, 46.185089, 1177.266845, 18.467214, 0.000000, 73.099945, -116.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1599, 46.422092, 1177.663208, 18.438310, -178.600006, -73.400009, 56.399971, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1575, 45.231140, 1176.339111, 18.374069, 0.000000, 0.000000, -86.900001, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19836, 46.203804, 1176.371459, 18.404056, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19836, 45.873821, 1177.661010, 18.404056, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1580, 46.692237, 1178.041503, 18.334054, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2804, 45.765537, 1171.558471, 18.383600, 0.000000, 31.800001, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2806, 45.756927, 1172.850952, 18.372919, 29.000000, -7.999989, 96.000129, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19560, 45.829189, 1172.229003, 18.317333, 33.199993, 1.899999, 88.299995, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2805, 46.383193, 1173.360473, 18.974063, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18725, 46.241931, 1164.269653, 17.284063, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19585, 47.062919, 1161.075439, 18.594060, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2822, 47.356132, 1160.388061, 18.424057, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(2864, 47.906799, 1160.028930, 18.364055, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19581, 48.520477, 1159.683959, 18.434059, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19590, 48.375980, 1159.967163, 18.446334, -179.099899, 92.699996, 133.000015, vw, ointerior);
	// tmpobjid = CreateDynamicObject(19377, 46.531806, 1158.598266, 17.643882, 0.000000, -89.800041, -3.199999, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "stonewall2_la", 0);
	// tmpobjid = CreateDynamicObject(19377, 47.069938, 1168.222900, 17.643882, 0.000000, -89.800041, -3.199999, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "stonewall2_la", 0);
	// tmpobjid = CreateDynamicObject(19377, 47.606410, 1177.817504, 17.643882, 0.000000, -89.800041, -3.199999, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "stonewall2_la", 0);
	// tmpobjid = CreateDynamicObject(19377, 52.223247, 1179.693603, 17.604871, 0.000000, -89.800041, -46.900001, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "stonewall2_la", 0);
	// tmpobjid = CreateDynamicObject(19377, 59.167106, 1186.191040, 17.604871, 0.000000, -89.800041, -46.900001, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "stonewall2_la", 0);

	// Donated Cave Interior
	ointerior = 2,vw = -1;
	tmpobjid = CreateDynamicObject(19377, 1083.588745, -49.644996, 1021.859619, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1073.483642, -49.644996, 1019.074829, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1083.588745, -59.285026, 1021.859619, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1073.464721, -59.285026, 1019.071350, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1073.464721, -40.025012, 1019.071350, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1083.580566, -40.025012, 1021.858215, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1093.656982, -40.025012, 1024.633178, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1093.695556, -49.665008, 1024.643920, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1093.695556, -59.274997, 1024.643920, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(18228, 1086.918090, -22.785242, 1019.285339, 0.000000, 0.000000, -43.699993, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1056.734252, -34.558788, 1019.285339, 0.000000, 0.000000, 25.400005, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1054.321777, -70.038101, 1019.285339, 0.000000, 10.600000, 106.600036, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1054.321777, -70.038101, 1019.285339, 0.000000, 0.000000, 97.400001, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1096.624267, -77.281234, 1020.903381, 0.999999, -17.999996, 172.499954, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1107.117309, -52.976711, 1022.219909, 0.999999, 17.300003, -150.300033, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1073.789672, -49.702121, 1047.674682, 0.600000, 166.100006, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1081.912475, -69.792304, 1041.857177, 0.600000, 172.999984, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1092.364990, -51.728519, 1046.069702, -34.199993, 174.799972, 98.700004, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1086.525024, -32.653869, 1037.293090, -15.999987, 174.799972, -133.999923, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1056.973999, -52.288322, 1018.394958, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19377, 1063.369384, -54.664993, 1016.289184, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10386, "mountainsfs", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19088, 1058.750366, -47.229160, 1035.066040, 0.599999, 1.500000, 32.399993, vw, ointerior);
	tmpobjid = CreateDynamicObject(2908, 1058.806030, -47.574649, 1032.280517, -81.200012, -92.400016, 26.100006, vw, ointerior);
	tmpobjid = CreateDynamicObject(2907, 1058.752441, -47.368415, 1031.797607, -112.000000, 0.000000, -160.399993, vw, ointerior);
	tmpobjid = CreateDynamicObject(2905, 1058.630737, -47.346542, 1031.127929, -92.099998, -1.900000, 115.099998, vw, ointerior);
	tmpobjid = CreateDynamicObject(2905, 1058.808959, -47.255813, 1031.135253, -92.099998, -1.900000, 115.099998, vw, ointerior);
	tmpobjid = CreateDynamicObject(2906, 1058.523925, -47.513389, 1031.904785, -109.300033, 43.699977, -67.099990, vw, ointerior);
	tmpobjid = CreateDynamicObject(2051, 1057.729248, -52.515781, 1030.433715, 0.000000, 0.000000, 111.399993, vw, ointerior);
	tmpobjid = CreateDynamicObject(2050, 1051.420776, -48.836200, 1031.644287, 0.000000, 0.000000, 78.699958, vw, ointerior);
	tmpobjid = CreateDynamicObject(3799, 1057.863525, -49.736408, 1027.450317, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3092, 1057.965698, -49.790668, 1029.921264, 89.100006, 0.000000, -87.800048, vw, ointerior);
	tmpobjid = CreateDynamicObject(19836, 1058.349731, -50.673580, 1029.809936, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19836, 1057.329345, -49.083595, 1029.809936, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19836, 1058.790161, -49.083595, 1029.809936, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19836, 1056.859619, -50.773544, 1029.809936, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19836, 1058.020629, -48.673576, 1029.809936, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(335, 1057.273803, -49.905441, 1030.298950, 0.000000, -173.899993, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19590, 1058.333129, -52.304550, 1030.334716, 0.000000, 0.000000, -72.100006, vw, ointerior);
	tmpobjid = CreateDynamicObject(841, 1057.944335, -49.758140, 1029.850097, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18689, 1057.598632, -50.142185, 1028.484130, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(841, 1074.718994, -49.736045, 1019.611267, 0.000000, -14.299997, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18688, 1074.717041, -49.960533, 1018.314453, 0.000000, -5.099999, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(846, 1073.322631, -53.659542, 1019.329589, 15.899998, 0.000000, -89.800010, vw, ointerior);
	tmpobjid = CreateDynamicObject(846, 1073.351318, -46.362003, 1019.329589, -12.099998, 0.000000, 84.699966, vw, ointerior);
	tmpobjid = CreateDynamicObject(843, 1078.025390, -50.411209, 1020.544494, 19.500001, 0.000000, -87.799987, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 1071.337402, -51.896991, 1018.450805, 0.000000, -20.799999, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 1072.066650, -47.876987, 1018.727661, 0.000000, -20.799999, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19375, 1087.130981, -41.066509, 1019.132385, -10.999998, -6.400001, 57.999980, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19375, 1095.650390, -43.408760, 1020.957763, -10.999998, -6.400001, 85.399978, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19841, 1089.833862, -34.814186, 1030.660034, 30.100000, 0.000000, -5.499992, vw, ointerior);
	tmpobjid = CreateDynamicObject(19603, 1086.336059, -38.327995, 1023.748596, 0.000000, -9.899999, -33.100002, vw, ointerior);
	tmpobjid = CreateDynamicObject(19603, 1092.674072, -41.147731, 1025.195068, 0.000000, -9.899999, -6.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19603, 1089.370727, -40.036247, 1024.365478, 0.000000, -9.899999, -32.700004, vw, ointerior);
	tmpobjid = CreateDynamicObject(18747, 1090.599487, -42.702808, 1023.920959, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1812, 1093.860595, -54.135425, 1025.670288, 14.000000, 0.000000, -109.500015, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8463, "vgseland", "triadcarpet", 0);
	tmpobjid = CreateDynamicObject(1812, 1095.521972, -50.416736, 1025.237548, 14.000000, 0.000000, -109.500015, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8463, "vgseland", "triadcarpet", 0);
	tmpobjid = CreateDynamicObject(834, 1095.836914, -52.796642, 1027.119262, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2399, 1095.229492, -52.312026, 1026.964233, 0.000000, 0.000000, -139.600112, vw, ointerior);
	tmpobjid = CreateDynamicObject(2390, 1094.925415, -53.204334, 1027.993896, 0.000000, 0.000000, -55.800010, vw, ointerior);
	tmpobjid = CreateDynamicObject(2949, 1083.132324, -48.847831, 1021.819824, 0.000000, 72.899978, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(745, 1085.573730, -46.618007, 1020.816528, 0.000000, 0.000000, -13.199999, vw, ointerior);
	tmpobjid = CreateDynamicObject(745, 1084.500244, -52.878528, 1020.856689, 0.000000, 0.000000, -164.100021, vw, ointerior);
	tmpobjid = CreateDynamicObject(745, 1088.183471, -49.490009, 1022.046813, 0.000000, 0.000000, -164.100021, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1088.566772, -58.681941, 1025.537597, 3.599999, -33.800006, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1085.510986, -60.340698, 1023.478210, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1081.030273, -60.340698, 1023.128112, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1077.545043, -60.080703, 1021.403442, 0.000000, 1.300000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1073.656250, -59.510696, 1021.491760, 0.000000, 10.799999, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1069.741333, -57.590694, 1020.446777, 0.000000, 10.799999, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1070.763183, -43.451816, 1020.264953, 0.000000, 10.799999, -64.799995, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1075.301391, -41.630073, 1020.143249, 0.000000, -9.099998, -1.199992, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1079.642333, -40.440708, 1021.087463, 0.000000, -9.099998, -1.199992, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1081.550781, -39.900524, 1021.390991, 0.000000, -9.099998, -30.299993, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1096.210205, -46.984275, 1025.712524, 0.000000, -9.099998, -30.299993, vw, ointerior);
	tmpobjid = CreateDynamicObject(1437, 1068.288818, -58.205589, 1018.919189, -19.100002, 0.000000, 73.799995, vw, ointerior);

	// Giovanni Mansion
	ointerior = 0,vw = 0;
	tmpobjid = CreateDynamicObject(905, -403.853088, 1322.761474, 11.909978, 34.799995, 0.000000, -84.199996, vw, ointerior);
	tmpobjid = CreateDynamicObject(3061, -403.385498, 1321.417846, 11.873694, 0.000000, 32.400012, 13.500000, vw, ointerior);
	tmpobjid = CreateDynamicObject(905, -403.192687, 1322.887329, 12.802481, -84.599990, -6.099987, 89.900070, vw, ointerior);
	tmpobjid = CreateDynamicObject(905, -403.191589, 1321.111938, 11.916169, -74.299980, 0.899999, 119.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(905, -402.768585, 1321.283325, 12.753166, -76.899986, 0.000000, 106.299987, vw, ointerior);
	tmpobjid = CreateDynamicObject(905, -402.952087, 1321.838623, 13.045612, 0.000000, -85.400001, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19378, -424.819000, 1323.905639, 24.856163, 0.000000, 0.000000, 30.100004, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(11491, -433.314910, 1298.255126, 26.017740, 0.000000, 0.000000, 119.700019, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "stonewall3_la", 0);
	tmpobjid = CreateDynamicObject(19375, -453.421905, 1295.484008, 24.599601, 0.000000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -456.345489, 1281.681152, 23.316703, 13.600001, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -457.167297, 1301.968872, 24.679874, 0.000000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -462.411804, 1311.052612, 24.808021, 0.000000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -454.072204, 1315.866943, 24.788024, 0.000000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -448.822692, 1306.774658, 24.659748, 0.000000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -443.572814, 1297.680175, 24.531499, 0.000000, 90.699974, -59.999988, vw, ointerior);
	tmpobjid = CreateDynamicObject(19375, -435.233093, 1302.495971, 24.531499, 0.000000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 9098, "vgesvhouse01", "redstones01_256", 0);
	tmpobjid = CreateDynamicObject(19375, -443.504211, 1278.304565, 24.336002, 0.000000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -430.059509, 1273.952148, 24.402702, 1.899999, 90.699974, -60.199989, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -438.157745, 1269.375244, 24.235250, 0.000000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -430.307800, 1285.363647, 24.678205, 1.600000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -425.275207, 1276.653808, 24.555355, 1.600000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -416.938903, 1281.465942, 24.824251, 1.600000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -422.186401, 1290.548217, 24.952325, 1.600000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -427.429199, 1299.621826, 25.080305, 1.600000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -432.667510, 1308.647460, 25.038366, 1.299999, 88.399978, -59.799991, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -440.984497, 1303.860961, 24.939306, -0.199999, 87.599960, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -440.474304, 1311.594848, 24.659748, 0.000000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -435.873809, 1314.249755, 24.782072, 2.500000, 88.299980, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -445.750000, 1320.672241, 24.788024, 0.000000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -419.092895, 1304.435058, 25.349199, 1.600000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -424.336608, 1313.473022, 25.257406, 1.299999, 88.399978, -59.799991, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -435.560302, 1294.453735, 24.806432, 1.600000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -413.893005, 1295.336059, 25.219804, 1.600000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -437.419311, 1325.481323, 24.788024, 0.000000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -429.665496, 1322.472900, 25.036943, 2.500000, 88.299980, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -410.970703, 1309.143432, 24.312059, -14.000000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 16102, "des_cen", "sandgrnd128", 0);
	tmpobjid = CreateDynamicObject(19375, -416.196685, 1318.204101, 24.164716, -14.000000, 87.800003, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 16102, "des_cen", "sandgrnd128", 0);
	tmpobjid = CreateDynamicObject(19375, -405.782806, 1300.096313, 24.188428, -14.000000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 16102, "des_cen", "sandgrnd128", 0);
	tmpobjid = CreateDynamicObject(19378, -409.868988, 1298.115844, 24.756168, 0.000000, 0.000000, 30.100004, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -419.979492, 1315.557250, 24.856163, 0.000000, 0.000000, 30.100004, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(0, -416.152191, 1318.975952, 26.682598, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19378, -428.788604, 1330.711914, 24.856163, 0.000000, 0.000000, 30.100004, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -435.385803, 1332.572143, 24.856163, 0.000000, 0.000000, -62.099990, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -459.748809, 1318.738159, 23.686164, 0.000000, 0.000000, -60.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -443.205108, 1328.266357, 24.238563, 7.399999, 0.000000, -60.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -451.443511, 1323.532836, 23.676162, 0.000000, 0.000000, -60.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -465.075103, 1315.661743, 23.686164, 0.000000, 0.000000, -60.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -406.722991, 1292.668457, 24.756168, 0.000000, 0.000000, 30.100004, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -404.030212, 1288.020874, 24.756168, 0.000000, 0.000000, 30.100004, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19273, -411.867889, 1301.471313, 26.922048, 0.000000, 0.000000, -62.099998, vw, ointerior);
	tmpobjid = CreateDynamicObject(19273, -411.741912, 1301.532836, 26.922048, 0.000000, 0.000000, 119.900032, vw, ointerior);
	tmpobjid = CreateDynamicObject(19378, -417.385192, 1274.994873, 24.317289, 5.600000, 0.000000, -60.400020, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -409.529998, 1279.458007, 24.756168, 0.000000, 0.000000, -60.400020, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -405.790985, 1281.579711, 24.756168, 0.000000, 0.000000, -60.400020, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -425.754302, 1270.237548, 23.816165, 0.000000, 0.000000, -60.400020, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -432.032012, 1266.669555, 23.816165, 0.000000, 0.000000, -60.400020, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -435.609405, 1264.626220, 23.816165, 0.000000, 0.000000, -60.400020, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(11490, -442.913085, 1292.796142, 24.563980, 0.000000, 0.000000, 120.000091, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 6, 8423, "pirateship01", "ab_wood01", 0);
	SetDynamicObjectMaterial(tmpobjid, 9, 1676, "wshxrefpump", "black64", 0);
	tmpobjid = CreateDynamicObject(19378, -442.295684, 1266.412353, 23.836166, 0.000000, 0.000000, -148.899993, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -446.342987, 1273.237060, 22.698110, 16.400001, 0.000000, -150.500000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -466.872100, 1309.153076, 23.686164, 0.000000, 0.000000, 29.400011, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19378, -462.805603, 1301.936035, 22.712900, 13.300001, 0.000000, 29.400011, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19375, -461.638610, 1290.747558, 23.466699, 13.500000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(19375, -448.206909, 1286.621948, 24.407735, 0.000000, 90.699974, -59.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8678, "wddngchplgrnd01", "Grass", 0);
	tmpobjid = CreateDynamicObject(639, -462.645507, 1296.254760, 21.997318, 13.000000, 1.500000, -58.299999, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, -439.994110, 1320.401977, 17.125949, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, -418.174011, 1288.142456, 17.125949, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(654, -464.169403, 1311.817016, 23.955934, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(654, -456.249298, 1315.856933, 23.955934, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(654, -439.631103, 1267.053222, 24.276159, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(654, -430.321197, 1272.512939, 24.276159, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(654, -422.691314, 1276.983032, 24.276159, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1703, -439.315002, 1293.810546, 25.971788, 0.000000, 0.000000, 120.099967, vw, ointerior);
	tmpobjid = CreateDynamicObject(2370, -438.202606, 1295.227539, 25.981796, 0.000000, 0.000000, 31.200008, vw, ointerior);
	tmpobjid = CreateDynamicObject(1704, -437.172607, 1293.165039, 25.991792, 0.000000, 0.000000, 166.300003, vw, ointerior);
	tmpobjid = CreateDynamicObject(1704, -439.912811, 1296.934326, 25.991792, 0.000000, 0.000000, 66.300025, vw, ointerior);
	tmpobjid = CreateDynamicObject(18688, -436.556793, 1296.540405, 25.181789, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19793, -436.363006, 1296.797241, 26.111785, 0.000000, 0.000000, -58.099990, vw, ointerior);
	tmpobjid = CreateDynamicObject(19793, -436.541198, 1296.686523, 26.111785, 0.000000, 0.000000, -58.099990, vw, ointerior);
	tmpobjid = CreateDynamicObject(19793, -436.439392, 1296.750000, 26.241788, 0.000000, 0.000000, -58.099990, vw, ointerior);
	tmpobjid = CreateDynamicObject(1736, -436.961700, 1296.249755, 28.781795, 0.000000, 0.000000, -58.299991, vw, ointerior);
	tmpobjid = CreateDynamicObject(2800, -438.186706, 1295.664306, 26.691785, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19824, -438.348693, 1296.089111, 26.831790, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19157, -463.978698, 1281.752929, 24.306364, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1723, -462.075988, 1282.830444, 23.326072, 0.000000, 0.000000, -87.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(2370, -464.396392, 1281.235351, 23.153926, 0.000000, 0.000000, 2.499999, vw, ointerior);
	tmpobjid = CreateDynamicObject(2801, -464.122406, 1281.619018, 23.652675, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1704, -463.549285, 1279.493652, 23.234773, 0.000000, 0.000000, -177.199996, vw, ointerior);
	tmpobjid = CreateDynamicObject(1704, -464.552093, 1283.675659, 23.184774, 0.000000, 0.000000, 0.899900, vw, ointerior);
	tmpobjid = CreateDynamicObject(19121, -459.583007, 1275.021850, 24.118879, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19121, -470.523895, 1291.655151, 22.961292, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19172, -441.560302, 1298.802612, 27.761800, 0.000000, 0.000000, 30.200002, vw, ointerior);
	tmpobjid = CreateDynamicObject(1742, -445.078796, 1287.866943, 26.081792, 0.000000, 0.000000, 119.599990, vw, ointerior);
	tmpobjid = CreateDynamicObject(1828, -442.484313, 1292.799926, 26.061790, 0.000000, 0.000000, 0.000000, vw, ointerior);

	ointerior = 0,vw = 0;
	tmpobjid = CreateDynamicObject(870, -193.038497, 1052.069458, 19.023748, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19447, -152.112304, 1038.958740, 20.279073, 0.000000, 0.000000, -179.300003, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(3598, -136.588302, 1021.240478, 21.038145, 0.000000, 0.000000, -89.699996, vw, ointerior);
	tmpobjid = CreateDynamicObject(18664, -172.035095, 1108.302734, 20.692188, 0.000000, 0.000000, 89.799995, vw, ointerior);
	tmpobjid = CreateDynamicObject(2687, -175.059997, 1109.891845, 20.392185, 0.000000, 0.000000, -89.399978, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, -192.750701, 1123.473632, 18.811544, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, -193.434600, 1140.686645, 18.846870, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, -192.487792, 1158.581665, 18.756864, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, -192.408905, 1163.858032, 18.776874, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, -192.864501, 1078.057006, 18.650346, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, -192.374404, 1063.613037, 18.629058, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, -192.792495, 1049.142333, 18.761299, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, -193.081497, 1037.659057, 18.773748, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -193.159194, 1034.829345, 19.051305, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -193.003601, 1040.368652, 19.051298, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -193.060806, 1046.053344, 18.999055, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -193.007400, 1059.623168, 19.059055, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -192.795104, 1068.028076, 19.069049, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -193.196105, 1076.004272, 19.063076, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -193.044601, 1081.098876, 19.026090, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -192.985900, 1117.652709, 19.025852, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -192.848602, 1128.125244, 19.036865, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -193.064193, 1137.350708, 19.056867, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -192.977005, 1144.862426, 19.046867, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -193.022201, 1152.811157, 19.036867, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -192.628906, 1161.160156, 19.056871, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -192.869400, 1167.611450, 19.056867, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -192.701797, 1176.948852, 19.036853, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, -193.044692, 1184.410522, 19.016868, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18665, -177.504104, 1138.206665, 20.659982, 0.000000, 0.000000, -90.200012, vw, ointerior);
	tmpobjid = CreateDynamicObject(19381, -126.881500, 1039.259155, 18.945766, 1.199998, 89.499969, 0.699998, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 17500, "stormdrain", "golf_heavygrass", 0);
	tmpobjid = CreateDynamicObject(3785, -228.774307, 1050.484252, 21.634389, 0.000000, 0.000000, -76.600036, vw, ointerior);
	tmpobjid = CreateDynamicObject(19381, -146.438903, 1012.825073, 18.823547, 0.000000, 90.099960, 0.699998, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 5413, "motel_lae", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObject(19381, -146.556304, 1022.444213, 18.823547, 0.000000, 90.099960, 0.699998, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 17500, "stormdrain", "golf_heavygrass", 0);
	tmpobjid = CreateDynamicObject(703, -101.911300, 1046.478271, 17.555477, 0.000000, 0.000000, -53.999980, vw, ointerior);
	tmpobjid = CreateDynamicObject(19447, -121.301803, 1021.315612, 20.279073, 0.000000, 0.000000, 0.699836, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 0);
	tmpobjid = CreateDynamicObject(19447, -151.631896, 1011.417602, 20.279073, 0.000000, 0.000000, -179.700103, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19447, -121.531799, 1039.326049, 20.279073, 0.000000, 0.000000, 0.699836, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_brick05", 0);
	tmpobjid = CreateDynamicObject(19447, -147.018798, 1021.050598, 18.860836, 0.000000, 90.099975, -89.499961, vw, ointerior);
	tmpobjid = CreateDynamicObject(1343, -158.505599, 1122.622558, 18.122182, 0.000000, 0.000000, -179.699996, vw, ointerior);
	tmpobjid = CreateDynamicObject(3171, -228.214202, 1056.832153, 18.694381, 0.000000, 0.000000, 88.700012, vw, ointerior);
	tmpobjid = CreateDynamicObject(3171, -223.419998, 1045.940307, 18.754394, 0.000000, 0.000000, -25.899999, vw, ointerior);
	tmpobjid = CreateDynamicObject(19381, -137.380294, 1039.131958, 18.854152, 1.199998, 89.499969, 0.699998, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 17500, "stormdrain", "golf_heavygrass", 0);	

	// Skeeper's Tent (Exterior)
	ointerior = 0,vw = 0;
	tmpobjid = CreateDynamicObject(3243, -779.152893, 2448.121582, 156.090911, 0.000000, 0.000000, 167.900039, vw, ointerior);
	tmpobjid = CreateDynamicObject(841, -780.307373, 2441.667236, 156.178421, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18689, -780.321777, 2441.299560, 154.859344, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// Skeeper's Tent (Interior) Part 1
	ointerior = 2,vw = 0;
	tmpobjid = CreateDynamicObject(19893, 273.796142, 305.035186, 999.098388, 0.000000, 0.000000, -90.800071, vw, ointerior);
	tmpobjid = CreateDynamicObject(2190, 274.082702, 305.416473, 999.095703, 0.000000, 0.000000, -75.700004, vw, ointerior);
	tmpobjid = CreateDynamicObject(2190, 273.871856, 304.184082, 999.095703, 0.000000, 0.000000, -142.899978, vw, ointerior);
	tmpobjid = CreateDynamicObject(19786, 274.349243, 304.918640, 1000.486145, 0.000000, 0.000000, -90.099975, vw, ointerior);
	tmpobjid = CreateDynamicObject(3111, 272.644989, 303.021606, 999.954345, -90.800003, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1962, 274.202667, 305.011566, 999.435852, 0.000000, 0.000000, 89.700027, vw, ointerior);
	tmpobjid = CreateDynamicObject(2198, 272.066619, 308.355621, 998.185974, 0.000000, 0.000000, -45.100002, vw, ointerior);
	tmpobjid = CreateDynamicObject(19999, 271.516448, 306.698242, 998.305297, 0.000000, 0.000000, 134.699951, vw, ointerior);
	tmpobjid = CreateDynamicObject(3061, 284.505676, 309.598175, 1003.390625, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19375, 284.624237, 309.649627, 1003.390625, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 16150, "ufo_bar", "des_ghotwood1", 0);
	tmpobjid = CreateDynamicObject(1812, 281.872253, 310.425384, 1002.410217, 0.000000, 0.000000, 88.599922, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8463, "vgseland", "triadcarpet", 0);
	tmpobjid = CreateDynamicObject(1736, 279.704071, 310.391418, 1004.390625, 0.000000, 0.000000, 87.899971, vw, ointerior);
	tmpobjid = CreateDynamicObject(2273, 279.852691, 309.095458, 1003.690795, 0.000000, 0.000000, 89.899993, vw, ointerior);
	tmpobjid = CreateDynamicObject(2846, 278.962249, 309.060913, 1003.350585, 0.000000, 0.000000, -51.999988, vw, ointerior);
	tmpobjid = CreateDynamicObject(3785, 281.999786, 306.749664, 1005.296813, -0.199999, 16.800004, 87.300010, vw, ointerior);
	tmpobjid = CreateDynamicObject(1828, 283.106170, 309.170013, 1002.400573, 0.000000, 0.000000, 64.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(2307, 283.120910, 308.593933, 1002.410522, 0.000000, 0.000000, -89.699966, vw, ointerior);
	tmpobjid = CreateDynamicObject(2394, 284.298492, 308.043853, 1004.201110, 0.000000, 0.000000, -88.000007, vw, ointerior);
	tmpobjid = CreateDynamicObject(2047, 281.438873, 310.836669, 1004.510681, 0.000000, -1.999999, -2.200000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 9593, "hosbibalsfw", "dt_cops_US_flag", 0);
	tmpobjid = CreateDynamicObject(1343, 281.867431, 306.796020, 1001.810546, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 17009, "truth_farm", "des_ghotwood1", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 17009, "truth_farm", "des_ghotwood1", 0);
	tmpobjid = CreateDynamicObject(19375, 285.092773, 307.832244, 999.148437, -89.900032, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 17009, "truth_farm", "des_ghotwood1", 0);
	// Skeeper's Tent (interior) Part 2
	ointerior = 2,vw = 0;
	tmpobjid = CreateDynamicObject(3061, 284.505676, 309.598175, 1003.390625, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19375, 284.624237, 309.649627, 1003.390625, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 16150, "ufo_bar", "des_ghotwood1", 0);
	tmpobjid = CreateDynamicObject(1812, 281.872253, 310.425384, 1002.410217, 0.000000, 0.000000, 88.599922, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8463, "vgseland", "triadcarpet", 0);
	tmpobjid = CreateDynamicObject(2273, 279.852691, 309.095458, 1003.690795, 0.000000, 0.000000, 89.899993, vw, ointerior);
	tmpobjid = CreateDynamicObject(2846, 278.962249, 309.060913, 1003.350585, 0.000000, 0.000000, -51.999988, vw, ointerior);
	tmpobjid = CreateDynamicObject(3785, 281.999786, 306.749664, 1005.296813, -0.199999, 16.800004, 87.300010, vw, ointerior);
	tmpobjid = CreateDynamicObject(1828, 283.106170, 309.170013, 1002.400573, 0.000000, 0.000000, 64.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(2307, 283.120910, 308.593933, 1002.410522, 0.000000, 0.000000, -89.699966, vw, ointerior);
	tmpobjid = CreateDynamicObject(2394, 284.298492, 308.043853, 1004.201110, 0.000000, 0.000000, -88.000007, vw, ointerior);
	tmpobjid = CreateDynamicObject(2047, 281.438873, 310.836669, 1004.510681, 0.000000, -1.999999, -2.200000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 9593, "hosbibalsfw", "dt_cops_US_flag", 0);
	tmpobjid = CreateDynamicObject(1343, 281.867431, 306.796020, 1001.810546, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 17009, "truth_farm", "des_ghotwood1", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 17009, "truth_farm", "des_ghotwood1", 0);
	tmpobjid = CreateDynamicObject(19375, 285.092773, 307.832244, 999.148437, -89.900032, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 17009, "truth_farm", "des_ghotwood1", 0);

	// Giovanni Mansion Interior
    tmpobjid = CreateDynamicObject(19464, 1405.207397, -33.613407, 1002.462768, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(8533, 1398.262939, -27.737220, 999.900146, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0x99FFFFFF);
    tmpobjid = CreateDynamicObject(19465, 1408.885986, -39.483196, 1002.466857, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1408.059936, -36.473442, 1002.462768, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19465, 1405.205444, -27.753200, 1002.466857, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1405.207397, -21.813419, 1002.462768, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1405.207397, -15.883428, 1002.462768, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1404.448852, -13.053407, 1002.462768, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1398.519287, -13.053407, 1002.462768, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1395.659545, -10.183401, 1002.462768, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1393.828491, -12.073407, 1002.462768, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1392.158691, -10.183401, 1002.462768, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1389.309814, -13.053407, 1002.462768, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1390.861206, -14.483410, 1002.462768, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19465, 1390.864013, -20.393188, 1002.466857, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1390.861206, -26.333406, 1002.462768, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1387.990478, -29.193433, 1002.462768, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_kitchwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1382.070556, -29.193433, 1002.462768, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_kitchwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1379.209106, -32.033454, 1002.462768, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_kitchwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1379.209106, -37.963459, 1002.462768, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_kitchwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1382.098999, -40.903476, 1002.462768, 0.000000, 0.000000, 630.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_kitchwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1388.019409, -40.903476, 1002.462768, 0.000000, 0.000000, 630.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_kitchwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19465, 1393.955200, -40.933197, 1002.466857, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1396.799316, -43.783443, 1002.462768, 0.000000, 0.000000, 720.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1408.720214, -42.383464, 1002.462768, 0.000000, 0.000000, 810.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1405.850463, -45.233531, 1002.462768, 0.000000, 0.000000, 900.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1401.389526, -45.233531, 1002.462768, 0.000000, 0.000000, 900.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1403.650146, -43.403530, 1002.462768, 0.000000, 0.000000, 990.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1398.549804, -42.373527, 1002.462768, 0.000000, 0.000000, 990.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1407.298950, -10.213409, 1002.462768, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1411.720458, -10.213409, 1002.462768, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1409.469726, -12.083415, 1002.462768, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1414.560668, -13.063421, 1002.462768, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1414.120239, -16.053432, 1002.462768, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1416.971557, -18.913444, 1002.462768, 0.000000, 0.000000, 630.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1416.971557, -23.253446, 1002.462768, 0.000000, 0.000000, 630.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1415.000488, -21.093452, 1002.462768, 0.000000, 0.000000, 720.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1414.120239, -26.103460, 1002.462768, 0.000000, 0.000000, 720.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1416.971557, -28.973434, 1002.462768, -0.000007, 0.000000, -89.999977, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1416.971557, -33.313438, 1002.462768, -0.000007, 0.000000, -89.999977, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1415.000488, -31.153442, 1002.462768, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1414.120239, -36.243495, 1002.462768, 0.000000, 0.000000, 720.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1413.999267, -36.473442, 1002.462768, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1412.147216, -42.333473, 1002.462768, 0.000000, 0.000000, 810.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
    tmpobjid = CreateDynamicObject(19465, 1390.613769, -20.393188, 1002.466857, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14420, "dr_gsbits", "mp_gs_libwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1414.087524, -39.563449, 1002.462768, 0.000000, 0.000000, 900.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
    tmpobjid = CreateDynamicObject(2898, 1410.930053, -39.314888, 999.880126, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_marble", 0x99FFFFFF);
    tmpobjid = CreateDynamicObject(2898, 1414.999511, -39.314888, 999.880126, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_marble", 0x99FFFFFF);
    tmpobjid = CreateDynamicObject(2898, 1410.930053, -44.724834, 999.880126, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_marble", 0x99FFFFFF);
    tmpobjid = CreateDynamicObject(2898, 1414.999511, -44.714836, 999.880126, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_marble", 0x99FFFFFF);
    tmpobjid = CreateDynamicObject(19366, 1393.905029, -12.115483, 1002.980529, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "windo_blinds", 0x00000000);
    tmpobjid = CreateDynamicObject(19366, 1409.514648, -12.125480, 1002.980529, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "windo_blinds", 0x00000000);
    tmpobjid = CreateDynamicObject(19366, 1414.956054, -21.075504, 1002.980529, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "windo_blinds", 0x00000000);
    tmpobjid = CreateDynamicObject(19366, 1414.956054, -31.195491, 1002.980529, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "windo_blinds", 0x00000000);
    tmpobjid = CreateDynamicObject(19366, 1403.606201, -43.335498, 1002.980529, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "windo_blinds", 0x00000000);
    tmpobjid = CreateDynamicObject(19479, 1383.464233, -37.607269, 999.920166, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 15055, "svlamid", "AH_flroortile3", 0x99FFFFFF);
    tmpobjid = CreateDynamicObject(1502, 1408.991943, -40.253929, 999.910156, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    SetDynamicObjectMaterial(tmpobjid, 1, 18028, "cj_bar2", "GB_nastybar01", 0x00000000);
    tmpobjid = CreateDynamicObject(1502, 1390.770263, -19.633892, 999.910156, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    SetDynamicObjectMaterial(tmpobjid, 1, 18028, "cj_bar2", "GB_nastybar01", 0x00000000);
    tmpobjid = CreateDynamicObject(1502, 1393.191040, -40.923912, 999.910156, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    SetDynamicObjectMaterial(tmpobjid, 1, 18028, "cj_bar2", "GB_nastybar01", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1374.793945, -24.163324, 1005.040466, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1374.793945, -14.533329, 1005.060485, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1387.770263, -17.273464, 1002.462768, 0.000000, 0.000000, 810.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14420, "dr_gsbits", "mp_gs_libwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1381.839599, -17.273464, 1002.462768, 0.000000, 0.000000, 810.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14420, "dr_gsbits", "mp_gs_libwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1385.474243, -24.343328, 999.930053, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1385.474243, -14.723327, 999.930053, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
    tmpobjid = CreateDynamicObject(19465, 1409.146240, -39.483196, 1002.466857, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1412.230346, -36.573436, 1002.462768, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1390.610961, -26.333406, 1002.462768, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14420, "dr_gsbits", "mp_gs_libwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1387.990478, -29.073431, 1002.462768, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14420, "dr_gsbits", "mp_gs_libwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1382.070556, -29.073431, 1002.462768, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14420, "dr_gsbits", "mp_gs_libwall", 0x00000000);
    tmpobjid = CreateDynamicObject(11313, 1386.119995, -17.391601, 1001.986145, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "ws_garagedoor3_white", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1385.264038, -24.163324, 1005.040466, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1385.264038, -14.563325, 1005.060485, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_stationfloor", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1397.794677, -20.743330, 1006.150878, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "AH_wdpanscum", 0xFF8C7B66);
    tmpobjid = CreateDynamicObject(19377, 1397.794677, -33.823314, 1006.160888, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "AH_wdpanscum", 0xFF8C7B66);
    tmpobjid = CreateDynamicObject(19456, 1395.793457, -27.261875, 1005.069641, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1405.413818, -27.261875, 1005.069641, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1392.462402, -33.823314, 1010.241027, 0.000000, -180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0xFFBFAD99);
    tmpobjid = CreateDynamicObject(19377, 1403.113037, -33.823314, 1010.251037, 0.000000, -180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0xFFBFAD99);
    tmpobjid = CreateDynamicObject(19377, 1397.791137, -28.923313, 1009.810607, 90.000000, -180.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0xFFBFAD99);
    tmpobjid = CreateDynamicObject(19377, 1397.791137, -38.723331, 1009.810607, 90.000000, -180.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0xFFBFAD99);
    tmpobjid = CreateDynamicObject(19377, 1397.791137, -25.573343, 1009.810607, 90.000000, -180.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0xFFBFAD99);
    tmpobjid = CreateDynamicObject(19377, 1397.791137, -15.853355, 1009.810607, 90.000000, -180.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0xFFBFAD99);
    tmpobjid = CreateDynamicObject(19377, 1403.113037, -20.703319, 1010.241027, 0.000000, -180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0xFFBFAD99);
    tmpobjid = CreateDynamicObject(19456, 1390.793334, -20.721834, 1005.069641, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1392.461059, -20.703319, 1010.241027, 0.000000, -180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0xFFBFAD99);
    tmpobjid = CreateDynamicObject(19456, 1395.793457, -14.191859, 1005.069641, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1395.793457, -10.701848, 1005.069641, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1405.401855, -14.191859, 1005.069641, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1404.793212, -20.721834, 1005.069641, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1390.793334, -33.811859, 1005.069641, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1404.794189, -33.811859, 1005.069641, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1401.295776, -43.451927, 1005.069641, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1390.793334, -43.441864, 1005.069641, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1404.794189, -43.431880, 1005.069641, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1408.295532, -41.261898, 1005.069641, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1397.795166, -43.451927, 1005.069641, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1394.294555, -43.451927, 1005.069641, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1381.063110, -34.111934, 1003.797973, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1381.063110, -43.711933, 1003.788024, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1382.743774, -43.711933, 1005.478149, 0.000000, 180.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1382.743774, -34.081893, 1005.478332, 0.000000, 180.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1387.311523, -34.131889, 1005.069641, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1383.809448, -34.131889, 1005.069641, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1384.229858, -40.691883, 1005.069641, 0.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "marblekb_256128", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1410.062866, -27.641868, 1005.059631, 0.000014, 90.000000, 89.999954, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_ceiling1", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1410.062866, -24.141885, 1005.059631, 0.000014, 90.000000, 89.999954, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_ceiling1", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1410.062866, -20.671886, 1005.059631, 0.000014, 90.000000, 89.999954, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_ceiling1", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1410.062866, -17.171882, 1005.059631, 0.000014, 90.000000, 89.999954, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_ceiling1", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1410.062866, -13.701889, 1005.059631, 0.000014, 90.000000, 89.999954, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_ceiling1", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1410.062866, -31.131868, 1005.059631, 0.000014, 90.000000, 89.999954, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_ceiling1", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1410.062866, -34.621868, 1005.059631, 0.000014, 90.000000, 89.999954, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_ceiling1", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1410.975708, -41.451904, 1003.589172, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "rest_wall4", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1414.475830, -41.451904, 1003.589172, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "rest_wall4", 0x00000000);
    tmpobjid = CreateDynamicObject(19366, 1398.433227, -13.121053, 1001.640136, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "lasbevcit7", 0x00000000);
    tmpobjid = CreateDynamicObject(19366, 1396.751953, -11.581046, 1001.960449, 90.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19366, 1400.131103, -11.581046, 1001.960449, 90.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19366, 1396.751953, -11.581046, 998.749267, 90.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19366, 1400.131103, -11.581046, 998.759948, 90.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19366, 1398.440917, -11.511026, 1003.500366, 0.000000, 270.000000, 450.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(1502, 1405.210815, -28.504827, 999.910156, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    SetDynamicObjectMaterial(tmpobjid, 1, 18028, "cj_bar2", "GB_nastybar01", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1395.698486, -43.783443, 1002.462768, 0.000000, 0.000000, 720.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1395.698486, -49.713462, 1002.462768, 0.000000, 0.000000, 720.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1392.628051, -52.783458, 1002.462768, 0.000000, 0.000000, 810.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1389.778442, -55.643398, 1002.462768, 0.000000, 0.000000, 900.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1384.797973, -55.643398, 1002.462768, 0.000000, 0.000000, 900.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1381.948730, -52.783458, 1002.462768, 0.000000, 0.000000, 810.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1382.779418, -49.723453, 1002.462768, 0.000000, 0.000000, 900.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1382.779418, -43.813507, 1002.462768, 0.000000, 0.000000, 900.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1386.928100, -54.183418, 1002.462768, 0.000000, 0.000000, 810.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1388.009643, -40.913520, 1002.462768, 0.000000, 0.000000, 990.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1382.079956, -40.913520, 1002.462768, 0.000000, 0.000000, 990.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1390.793334, -42.781864, 1005.049621, 0.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14808, "lee_strip2", "Strip_Ceiling", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1390.793334, -46.281867, 1005.049621, 0.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14808, "lee_strip2", "Strip_Ceiling", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1390.793334, -49.781879, 1005.049621, 0.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14808, "lee_strip2", "Strip_Ceiling", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1390.793334, -53.251876, 1005.049621, 0.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14808, "lee_strip2", "Strip_Ceiling", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1381.163208, -42.781894, 1005.049621, 0.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14808, "lee_strip2", "Strip_Ceiling", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1381.163208, -46.281913, 1005.049621, 0.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14808, "lee_strip2", "Strip_Ceiling", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1381.163208, -49.781925, 1005.049621, 0.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14808, "lee_strip2", "Strip_Ceiling", 0x00000000);
    tmpobjid = CreateDynamicObject(19456, 1381.163208, -53.261928, 1005.049621, 0.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14808, "lee_strip2", "Strip_Ceiling", 0x00000000);
    tmpobjid = CreateDynamicObject(19366, 1387.284667, -54.125488, 1002.980529, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "windo_blinds", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1376.150512, -29.073431, 1002.462768, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14420, "dr_gsbits", "mp_gs_libwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1374.964477, -24.343328, 999.930053, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1374.954467, -14.723327, 999.930053, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1375.910156, -17.273464, 1002.462768, 0.000000, 0.000000, 810.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14420, "dr_gsbits", "mp_gs_libwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1373.089477, -26.163444, 1002.462768, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14420, "dr_gsbits", "mp_gs_libwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1373.089477, -20.263441, 1002.462768, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14420, "dr_gsbits", "mp_gs_libwall", 0x00000000);
    tmpobjid = CreateDynamicObject(11313, 1377.559692, -17.391601, 1001.986145, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "ws_garagedoor3_white", 0x00000000);
    tmpobjid = CreateDynamicObject(2176, 1397.694824, -20.705856, 1002.539123, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 14535, "ab_wooziec", "ab_woodborder", 0x00000000);
    tmpobjid = CreateDynamicObject(19846, 1397.766601, -20.984830, 1002.070922, 0.000001, 0.000007, 18.599996, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "StainedGlass", 0x00000000);
    tmpobjid = CreateDynamicObject(19846, 1398.045288, -20.497997, 1002.340942, 0.000007, -0.000000, 110.099899, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(19846, 1397.430053, -20.818405, 1002.631103, -0.000006, 0.000003, -52.400012, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "StainedGlass", 0x00000000);
    tmpobjid = CreateDynamicObject(19846, 1397.706298, -20.240531, 1002.931213, 0.000000, -0.000007, 176.899948, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(19846, 1397.300903, -20.644842, 1003.341308, -0.000007, 0.000000, -89.299957, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "StainedGlass", 0x00000000);
    tmpobjid = CreateDynamicObject(19846, 1397.766601, -20.984830, 1003.711425, 0.000000, 0.000007, 18.599996, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(19846, 1397.971435, -20.482198, 1004.080932, 0.000007, 0.000000, 120.899940, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "StainedGlass", 0x00000000);
    tmpobjid = CreateDynamicObject(3385, 1397.699340, -20.651002, 1006.069519, 180.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(19843, 1397.684326, -20.675888, 1001.150512, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(19843, 1398.204833, -21.195901, 1001.180541, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(19843, 1397.184570, -21.195901, 1001.180541, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(19843, 1397.184570, -20.175888, 1001.180541, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(19843, 1398.204467, -20.175888, 1001.180541, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(19846, 1397.429931, -20.403129, 1004.371704, 0.000000, 0.000007, -134.399963, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(1953, 1386.547363, -34.545509, 1004.791259, 180.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "gen_chrome", 0xFFFFFFFF);
    SetDynamicObjectMaterial(tmpobjid, 1, 3080, "adjumpx", "gen_chrome", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(1953, 1386.547363, -36.035511, 1004.801269, 180.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "gen_chrome", 0xFFFFFFFF);
    SetDynamicObjectMaterial(tmpobjid, 1, 3080, "adjumpx", "gen_chrome", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(19834, 1390.916503, -34.965141, 999.920166, 90.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(19834, 1390.916503, -32.635131, 999.920166, 90.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(19834, 1390.916503, -30.295148, 999.920166, 90.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1390.909667, -37.873508, 1002.462768, 0.000000, 0.000000, 1080.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1411.720458, -10.213409, 1002.462768, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
    tmpobjid = CreateDynamicObject(19464, 1389.549926, -37.853466, 1002.462768, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_kitchwall", 0x00000000);
    tmpobjid = CreateDynamicObject(19429, 1390.230834, -34.974052, 1001.640014, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(19429, 1390.230834, -34.964054, 1004.379577, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(1953, 1386.547363, -37.525489, 1004.801452, 180.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "gen_chrome", 0xFFFFFFFF);
    SetDynamicObjectMaterial(tmpobjid, 1, 3080, "adjumpx", "gen_chrome", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1385.774902, -36.123302, 1005.060363, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(19927, 1379.757812, -39.811164, 999.910156, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
    tmpobjid = CreateDynamicObject(19929, 1379.774414, -37.414749, 999.910156, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
    tmpobjid = CreateDynamicObject(19929, 1379.774414, -30.764755, 999.910156, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
    tmpobjid = CreateDynamicObject(2127, 1379.837158, -33.847286, 999.910156, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "gen_chrome", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 10871, "blacksky_sfse", "ws_blackmarble", 0xFF909090);
    tmpobjid = CreateDynamicObject(2123, 1385.053955, -35.342681, 1000.510192, 0.000007, -0.000007, 179.999908, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(2123, 1385.053955, -36.332794, 1000.510192, 0.000007, -0.000007, 179.999908, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(2123, 1385.053955, -37.152740, 1000.510192, 0.000007, -0.000007, 179.999908, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(2123, 1386.254028, -37.882843, 1000.510192, -0.000007, -0.000007, -89.999961, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(2123, 1387.424072, -37.122711, 1000.510192, -0.000007, 0.000007, -0.000007, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(2123, 1387.424072, -36.082061, 1000.510192, -0.000007, 0.000007, -0.000007, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(2123, 1387.424072, -35.011993, 1000.510192, -0.000007, 0.000007, -0.000007, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(2123, 1386.374023, -34.191680, 1000.510192, 0.000007, 0.000007, 89.999946, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(14804, 1383.702392, -40.295356, 1000.870239, 0.000000, 0.000000, -161.999984, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    SetDynamicObjectMaterial(tmpobjid, 1, 2811, "gb_ornaments01", "GB_vase01", 0x00000000);
    tmpobjid = CreateDynamicObject(19429, 1386.581420, -34.313999, 1004.900207, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(1734, 1386.549316, -34.568550, 1003.210754, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    tmpobjid = CreateDynamicObject(2257, 1384.021728, -29.375354, 1002.090270, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 19173, "samppictures", "samppicture3", 0x00000000);
    tmpobjid = CreateDynamicObject(2257, 1386.970458, -29.375354, 1002.090270, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 19173, "samppictures", "samppicture1", 0x00000000);
    tmpobjid = CreateDynamicObject(11717, 1386.268920, -30.059652, 999.910156, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14668, "711c", "cj_white_wall2", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(2108, 1384.693115, -30.262203, 999.910156, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(2108, 1387.733154, -30.262203, 999.910156, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(1734, 1386.549316, -36.038539, 1003.550720, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    tmpobjid = CreateDynamicObject(1734, 1386.549316, -37.528511, 1003.880859, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    tmpobjid = CreateDynamicObject(19087, 1386.555541, -34.555576, 1005.050048, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(19087, 1386.555541, -34.555576, 1005.719787, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(19087, 1386.555541, -36.035568, 1005.280273, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(19087, 1386.555541, -37.525550, 1005.760498, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(2163, 1386.600708, -40.734737, 999.910156, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(2828, 1385.810546, -40.493774, 1000.840332, 0.000000, 0.000000, -20.100000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 4, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1385.774902, -26.543306, 1005.060363, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(14804, 1388.605102, -39.903793, 1000.870239, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    SetDynamicObjectMaterial(tmpobjid, 1, 2811, "gb_ornaments01", "GB_vase01", 0x00000000);
    tmpobjid = CreateDynamicObject(19429, 1386.581420, -37.784008, 1004.900207, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(19834, 1390.916503, -34.965141, 1004.960083, 90.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(19834, 1390.916503, -32.655143, 1004.960083, 90.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(19834, 1390.916503, -30.325143, 1004.960083, 90.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(2176, 1397.694824, -33.815849, 1002.538452, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 14535, "ab_wooziec", "ab_woodborder", 0x00000000);
    tmpobjid = CreateDynamicObject(3462, 1397.704223, -33.831531, 1002.700195, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(19478, 1380.096679, -33.274402, 1001.040100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14526, "sweetsmain", "mp_CJ_BIG_TELLY1", 0x00000000);
    tmpobjid = CreateDynamicObject(19478, 1380.106689, -32.674427, 1001.150207, -11.100000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14420, "dr_gsbits", "mp_apt1_pic3", 0x00000000);
    tmpobjid = CreateDynamicObject(19478, 1380.106689, -32.892890, 1000.802734, 14.499995, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14420, "dr_gsbits", "mp_apt1_pic8", 0x00000000);
    tmpobjid = CreateDynamicObject(19478, 1380.106689, -33.142848, 1001.838867, -8.500000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14420, "dr_gsbits", "mp_apt1_pic7", 0x00000000);
    tmpobjid = CreateDynamicObject(19478, 1380.106689, -33.782901, 1001.277099, 8.699995, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14489, "carlspics", "AH_picture2", 0x00000000);
    tmpobjid = CreateDynamicObject(19825, 1384.565185, -40.752941, 1002.370788, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 1654, "dynamite", "clock64", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(11706, 1379.768066, -35.067020, 999.910156, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF505050);
    tmpobjid = CreateDynamicObject(19482, 1397.694580, -21.640825, 999.920166, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0x90202020);
    tmpobjid = CreateDynamicObject(19482, 1397.694580, -27.230833, 999.920166, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0x90202020);
    tmpobjid = CreateDynamicObject(19482, 1397.694580, -32.830837, 999.920166, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble2", 0x90202020);
    tmpobjid = CreateDynamicObject(11721, 1393.862304, -12.315416, 1000.640747, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(11721, 1403.583862, -43.165367, 1000.640747, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(1569, 1390.978881, -28.704252, 1001.670410, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18055, "genintsmlrst_split", "GB_restaursmll17a", 0x00000000);
    tmpobjid = CreateDynamicObject(1569, 1390.978881, -26.994243, 1001.510314, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18055, "genintsmlrst_split", "GB_restaursmll16a", 0x00000000);
    tmpobjid = CreateDynamicObject(1569, 1390.978881, -25.244255, 1001.670410, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18055, "genintsmlrst_split", "GB_restaursmll17b", 0x00000000);
    tmpobjid = CreateDynamicObject(2267, 1405.046508, -34.642997, 1002.320495, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 14706, "labig2int2", "HS_art7", 0x00000000);
    tmpobjid = CreateDynamicObject(2267, 1405.046508, -32.272994, 1002.320495, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 14706, "labig2int2", "HS_art5", 0x00000000);
    tmpobjid = CreateDynamicObject(2252, 1391.782714, -37.949687, 1000.999938, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 3, 1731, "cj_lighting", "CJ_PLANT_POT", 0x00000000);
    tmpobjid = CreateDynamicObject(19843, 1398.204833, -34.305900, 1001.180541, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(19843, 1397.184570, -34.305900, 1001.180541, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(19843, 1397.184570, -33.285888, 1001.180541, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(19843, 1398.204467, -33.285888, 1001.180541, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14629, "ab_chande", "ab_goldpipe", 0x00000000);
    tmpobjid = CreateDynamicObject(2167, 1408.648559, -41.433086, 999.900146, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    tmpobjid = CreateDynamicObject(11724, 1409.597412, -36.071331, 1000.420410, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 14584, "ab_abbatoir01", "ab_ceiling1", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 14584, "ab_abbatoir01", "ab_ceiling1", 0xFF808080);
    tmpobjid = CreateDynamicObject(1828, 1409.699829, -34.062892, 999.880126, 0.000000, 0.000000, 9.899997, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(1735, 1408.399658, -32.222045, 999.900146, 0.000000, 0.000000, 44.200000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ-COUCHL2", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    tmpobjid = CreateDynamicObject(1735, 1411.427856, -32.582561, 999.900146, 0.000000, 0.000000, -39.999992, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ-COUCHL2", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    tmpobjid = CreateDynamicObject(1814, 1409.301147, -34.187068, 999.900146, 0.000000, 0.000000, -7.599998, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    tmpobjid = CreateDynamicObject(2848, 1409.504516, -33.586166, 1000.420959, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 3, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 4, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    tmpobjid = CreateDynamicObject(14455, 1405.513305, -21.278989, 1001.571289, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    tmpobjid = CreateDynamicObject(14455, 1405.513305, -15.528985, 1001.571289, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    tmpobjid = CreateDynamicObject(11721, 1414.758666, -21.115453, 1000.680603, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(11721, 1414.758666, -31.345478, 1000.680603, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(11721, 1409.566650, -12.325467, 1000.680603, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(1709, 1409.658203, -20.039051, 999.900146, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ-COUCHL2", 0x00000000);
    tmpobjid = CreateDynamicObject(19786, 1413.550537, -17.219184, 1001.210693, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF606060);
    SetDynamicObjectMaterial(tmpobjid, 1, 14571, "chinese_furn", "ab_tv_noise", 0x00000000);
    tmpobjid = CreateDynamicObject(1445, 1413.591918, -17.961990, 1000.520446, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(1445, 1413.591918, -16.431966, 1000.520446, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(19834, 1413.565429, -17.945804, 1001.160705, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(19834, 1413.565429, -16.405782, 1001.160705, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(19479, 1409.629882, -25.006719, 999.910156, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14803, "bdupsnew", "Bdup2_Rug", 0x00000000);
    tmpobjid = CreateDynamicObject(19474, 1409.574218, -26.088884, 1000.460266, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 14535, "ab_wooziec", "ab_woodborder", 0x00000000);
    tmpobjid = CreateDynamicObject(1739, 1410.834350, -26.811449, 1000.730102, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    tmpobjid = CreateDynamicObject(1739, 1410.834350, -25.451442, 1000.730102, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    tmpobjid = CreateDynamicObject(1739, 1410.383666, -24.316488, 1000.730102, 0.000006, 0.000003, 64.099967, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    tmpobjid = CreateDynamicObject(1739, 1408.992797, -24.386322, 1000.730102, 0.000006, -0.000003, 120.999977, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    tmpobjid = CreateDynamicObject(1739, 1408.992797, -27.956338, 1000.730102, -0.000006, -0.000003, -115.899955, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    tmpobjid = CreateDynamicObject(1739, 1410.383666, -27.886505, 1000.730102, -0.000006, 0.000003, -58.999980, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    tmpobjid = CreateDynamicObject(1739, 1408.093505, -26.161453, 1000.730102, 0.000000, -0.000007, 179.999954, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    tmpobjid = CreateDynamicObject(2357, 1413.129638, -26.134853, 1000.310424, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
    tmpobjid = CreateDynamicObject(19893, 1412.733154, -27.818626, 1000.720153, 0.000000, 0.000000, -143.999954, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 15054, "savesfmid", "cspornmag", 0x00000000);
    tmpobjid = CreateDynamicObject(2225, 1410.889038, -14.136539, 999.900146, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 2, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(3385, 1409.746826, -20.954597, 1004.990722, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "goldPillar", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(3385, 1409.746826, -31.184644, 1004.990722, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "goldPillar", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(2188, 1408.809692, -26.005558, 1000.971069, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 3, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 4, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 5, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 6, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 7, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 10, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    tmpobjid = CreateDynamicObject(14826, 1378.731933, -21.205738, 1000.696044, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 3, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    tmpobjid = CreateDynamicObject(14878, 1382.068115, -20.543523, 1000.756225, 58.100002, -89.999916, 2.599925, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 1376, "cranes_dyn2_cj", "ws_oldpaintedblue", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 5422, "idlewood6_lae", "las69str2", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 2028, "cj_games", "CJ_speaker4", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 3, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 4, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
    tmpobjid = CreateDynamicObject(1942, 1382.410644, -22.393785, 1000.336120, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 1716, "cj_seating", "bras2_base", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 7103, "vgnplantgen", "metalwheel4_128", 0x00000000);
    tmpobjid = CreateDynamicObject(1942, 1382.370605, -22.393785, 1000.336120, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 1716, "cj_seating", "bras2_base", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 7103, "vgnplantgen", "metalwheel4_128", 0x00000000);
    tmpobjid = CreateDynamicObject(1962, 1382.426147, -22.394878, 1000.335632, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 7103, "vgnplantgen", "metalwheel4_128", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 19076, "xmastree1", "goldplate", 0x00000000);
    tmpobjid = CreateDynamicObject(1962, 1382.356079, -22.404878, 1000.345642, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 7103, "vgnplantgen", "metalwheel4_128", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 19076, "xmastree1", "goldplate", 0x00000000);
    tmpobjid = CreateDynamicObject(19348, 1382.440185, -22.381296, 1000.345886, 32.800003, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(1942, 1382.359985, -24.215637, 1000.336120, 0.000022, 0.000000, 88.299919, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 1716, "cj_seating", "bras2_base", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 7103, "vgnplantgen", "metalwheel4_128", 0x00000000);
    tmpobjid = CreateDynamicObject(1942, 1382.269897, -24.212965, 1000.336120, 0.000022, 0.000000, 88.299919, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 1716, "cj_seating", "bras2_base", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 7103, "vgnplantgen", "metalwheel4_128", 0x00000000);
    tmpobjid = CreateDynamicObject(1962, 1382.375488, -24.217189, 1000.335632, 0.000022, 0.000000, 88.299919, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 7103, "vgnplantgen", "metalwheel4_128", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 19076, "xmastree1", "goldplate", 0x00000000);
    tmpobjid = CreateDynamicObject(1962, 1382.255126, -24.223619, 1000.345642, 0.000022, 0.000000, 88.299919, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 7103, "vgnplantgen", "metalwheel4_128", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 19076, "xmastree1", "goldplate", 0x00000000);
    tmpobjid = CreateDynamicObject(19348, 1382.320068, -22.381296, 1000.345886, 32.800003, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(19590, 1382.389160, -24.166788, 1000.376281, 0.000000, -0.000007, 178.299942, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(19590, 1382.229003, -24.162033, 1000.376281, 0.000000, -0.000007, 178.299942, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 3080, "adjumpx", "gen_chrome", 0x00000000);
    tmpobjid = CreateDynamicObject(18644, 1382.627197, -22.806852, 1000.996154, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 8391, "ballys01", "CJ_blackplastic", 0x00000000);
    tmpobjid = CreateDynamicObject(18644, 1382.156738, -22.806852, 1000.996154, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 8391, "ballys01", "CJ_blackplastic", 0x00000000);
    tmpobjid = CreateDynamicObject(1942, 1382.299926, -24.213855, 1000.336120, 0.000022, 0.000000, 88.299919, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 1716, "cj_seating", "bras2_base", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 7103, "vgnplantgen", "metalwheel4_128", 0x00000000);
    tmpobjid = CreateDynamicObject(2256, 1409.299804, -37.668910, 1001.890258, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "shelf_glas", 0x00000000);
    tmpobjid = CreateDynamicObject(2256, 1409.279785, -37.668910, 1001.890258, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(11732, 1412.636108, -38.241729, 999.910034, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    SetDynamicObjectMaterial(tmpobjid, 2, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
    tmpobjid = CreateDynamicObject(19477, 1412.813964, -37.602329, 1000.490295, 0.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "waterclear1", 0x00000000);
    tmpobjid = CreateDynamicObject(19477, 1412.813964, -38.992343, 1000.490295, 0.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "waterclear1", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1385.128295, -48.707027, 1000.240417, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1385.128295, -45.227016, 1000.240417, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1385.398559, -45.227016, 1000.070251, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1385.398559, -48.717029, 1000.070251, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1385.398559, -48.717029, 999.900085, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1385.398559, -45.227054, 999.900085, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1385.398559, -48.717029, 1005.000610, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1385.398559, -45.217021, 1005.000610, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1382.846923, -45.217021, 1005.090576, 90.000000, 180.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1382.846923, -48.697025, 1005.090576, 90.000000, 180.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10871, "blacksky_sfse", "ws_blackmarble", 0x00000000);
    tmpobjid = CreateDynamicObject(2789, 1382.880371, -46.966865, 1002.926635, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 18065, "ab_sfammumain", "shelf_glas", 0x00000000);
    tmpobjid = CreateDynamicObject(2789, 1382.860351, -46.966865, 1002.926635, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(11721, 1387.221801, -53.945323, 1000.640747, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(19433, 1395.218872, -43.267951, 1000.950134, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(19433, 1395.218872, -45.017982, 999.979858, 0.000007, 90.000000, 89.999977, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gun_ceiling2_128", 0x00000000);
    tmpobjid = CreateDynamicObject(19433, 1395.218872, -48.507991, 999.979858, 0.000007, 90.000000, 89.999977, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gun_ceiling2_128", 0x00000000);
    tmpobjid = CreateDynamicObject(19433, 1395.218872, -50.347965, 1000.940124, 0.000007, 0.000000, 89.999977, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(19433, 1395.629272, -49.497886, 1000.909606, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(19433, 1395.629272, -47.927875, 1000.919616, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(19433, 1395.629272, -46.327873, 1000.939636, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(19433, 1395.629272, -44.147888, 1000.909545, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(19433, 1395.609252, -45.127861, 1000.939636, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
    tmpobjid = CreateDynamicObject(19433, 1395.218872, -48.507991, 1002.609741, 0.000007, 90.000000, 89.999977, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gun_ceiling2_128", 0x00000000);
    tmpobjid = CreateDynamicObject(19433, 1395.218872, -45.037979, 1002.609558, 0.000007, 90.000000, 89.999977, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gun_ceiling2_128", 0x00000000);
    tmpobjid = CreateDynamicObject(19864, 1394.527099, -46.025085, 1002.530700, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10839, "aircarpkbarier_sfse", "glass_64a", 0x00000000);
    tmpobjid = CreateDynamicObject(19864, 1394.457031, -47.615036, 1002.530700, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10839, "aircarpkbarier_sfse", "glass_64a", 0x00000000);
    tmpobjid = CreateDynamicObject(14804, 1383.543457, -42.406978, 1000.870239, 0.000000, 0.000000, 138.799987, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    SetDynamicObjectMaterial(tmpobjid, 1, 2811, "gb_ornaments01", "GB_vase01", 0x00000000);
    tmpobjid = CreateDynamicObject(14804, 1383.417114, -51.266662, 1000.870239, 0.000000, 0.000000, 138.799987, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
    SetDynamicObjectMaterial(tmpobjid, 1, 2811, "gb_ornaments01", "GB_vase01", 0x00000000);
    tmpobjid = CreateDynamicObject(19479, 1383.464233, -31.067285, 999.920166, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 15055, "svlamid", "AH_flroortile3", 0x99FFFFFF);
    tmpobjid = CreateDynamicObject(19087, 1397.699462, -20.659566, 1004.375305, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19087, 1397.699462, -20.659566, 1006.805541, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1565, 1397.682739, -20.689937, 1001.430358, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19923, 1381.993164, -34.976181, 999.920166, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19924, 1382.000854, -34.958564, 1002.870849, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19937, 1379.543457, -38.897357, 1002.030212, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19937, 1379.543457, -36.997318, 1002.030212, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19937, 1379.543457, -30.297325, 1002.030212, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19935, 1379.543457, -31.745883, 1002.029968, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19936, 1379.822265, -40.311985, 1002.022521, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19933, 1379.614379, -35.661617, 1002.550354, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19922, 1386.309448, -35.999420, 999.910156, 0.000007, 0.000007, 89.999946, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19581, 1379.564208, -38.161735, 1001.890563, 90.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19581, 1379.564208, -37.001731, 1001.890563, 90.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19584, 1379.610473, -38.607761, 1001.930847, 90.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19586, 1379.512329, -37.779029, 1001.950256, 90.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19586, 1379.512329, -36.679061, 1001.950256, 90.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19583, 1379.510375, -37.356380, 1001.930847, 90.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19585, 1379.719116, -36.484088, 1001.030456, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19585, 1379.663208, -36.467247, 1001.138244, -13.500004, 0.000000, 13.899999, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19993, 1379.674438, -37.951515, 1000.810546, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19993, 1379.674438, -37.928943, 1000.861267, 10.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19579, 1379.791381, -31.888998, 1000.830688, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19579, 1379.979003, -31.685058, 1000.830688, 0.000000, 0.000000, 21.700002, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19571, 1379.685302, -31.158615, 1000.860473, 90.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19571, 1379.776245, -31.220922, 1000.910522, 90.000000, 55.499992, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19571, 1379.781127, -31.171150, 1000.960632, 90.000000, 84.499984, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19583, 1379.822998, -30.715173, 1000.840209, 0.000000, 0.000000, 29.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(11743, 1379.784912, -38.531558, 1000.830139, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19572, 1379.727661, -30.069271, 1000.820556, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2149, 1379.723632, -37.418395, 1000.980468, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2863, 1379.773559, -40.340377, 1000.779785, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19874, 1379.981933, -40.132831, 1000.810302, 0.000000, 0.000000, 41.300003, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19937, 1381.243530, -40.567302, 1002.030212, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19940, 1381.167114, -40.564273, 1001.579162, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19940, 1381.167114, -40.564273, 1001.148986, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2864, 1380.735595, -40.578533, 1001.161743, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(11718, 1381.416381, -40.559566, 1001.178527, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19830, 1379.649169, -30.893058, 1000.833374, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19873, 1380.346801, -40.469230, 1001.655639, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19873, 1380.496948, -40.609222, 1001.655639, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(11722, 1380.738037, -40.572708, 1001.740905, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(11723, 1380.925903, -40.525573, 1001.719238, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19823, 1381.240112, -40.518928, 1001.598693, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2813, 1381.759887, -40.531005, 1001.600769, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(938, 1381.974853, -31.873163, 1002.539855, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(938, 1381.974853, -38.103149, 1002.539855, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2870, 1386.260253, -36.003223, 1000.670227, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19871, 1381.960815, -32.649169, 1003.710632, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19871, 1381.960815, -31.859182, 1003.710632, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19871, 1381.960815, -31.059167, 1003.710632, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19871, 1381.960815, -38.879131, 1003.710632, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19871, 1381.960815, -38.089141, 1003.710632, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19871, 1381.960815, -37.289131, 1003.710632, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19787, 1386.186523, -40.756248, 1001.580505, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2233, 1387.108642, -40.930507, 999.900146, 0.000000, 0.000000, -169.399978, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2233, 1384.518066, -40.722633, 999.900146, 0.000000, 0.000000, 161.900009, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19920, 1386.934936, -40.448997, 1000.840393, 5.199998, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19807, 1386.557983, -40.479583, 1000.890136, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2286, 1389.398803, -36.072158, 1002.020141, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2288, 1388.937622, -37.801445, 1000.950073, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2279, 1388.927001, -36.197643, 1000.850219, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2271, 1388.940673, -39.167785, 1002.520446, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2277, 1388.928222, -37.488506, 1002.740417, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2274, 1388.930541, -39.151790, 1001.210083, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2275, 1388.931030, -35.970279, 1002.910522, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19932, 1379.660034, -35.665039, 1001.900451, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2740, 1401.297973, -23.889087, 1005.900390, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2740, 1401.297973, -17.499071, 1005.900390, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2740, 1394.206176, -17.499071, 1005.900390, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2740, 1394.206176, -23.919122, 1005.900390, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2740, 1401.297973, -37.059089, 1005.900390, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2740, 1401.297973, -30.669071, 1005.900390, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2740, 1394.206176, -30.669071, 1005.900390, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2740, 1394.206176, -37.089122, 1005.900390, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2725, 1394.995361, -12.587449, 1000.300537, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2245, 1394.979370, -12.608980, 1001.040771, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(15038, 1392.738281, -12.806745, 1000.520141, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2248, 1404.438598, -13.749059, 1000.479736, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(862, 1404.457275, -13.763010, 1000.970275, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2115, 1399.207275, -41.596786, 999.900146, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2115, 1402.207519, -13.836793, 999.900146, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2869, 1402.790527, -13.829228, 1000.710021, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(11746, 1401.977783, -14.174123, 1000.710449, 90.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(11746, 1401.964111, -14.136561, 1000.710449, 90.000000, 20.100000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(11746, 1401.966064, -14.156461, 1000.710449, 90.000000, 5.699996, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19807, 1402.049438, -13.754028, 1000.780273, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19828, 1400.778076, -13.170248, 1001.670654, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19828, 1389.422363, -35.103515, 1002.020507, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19828, 1382.549438, -29.323736, 1001.800598, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2986, 1391.010498, -13.805942, 1000.060424, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2986, 1408.281372, -36.635940, 1000.060424, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19273, 1390.237304, -34.927928, 1001.720764, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2986, 1381.539550, -29.335901, 1000.460632, 0.000000, 90.000000, 450.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1615, 1379.348754, -34.795787, 1002.710571, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2256, 1405.070068, -23.099004, 1002.580322, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2261, 1404.586181, -17.260295, 1001.890502, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2289, 1391.020996, -15.922559, 1002.250610, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2285, 1391.479614, -14.450063, 1002.440673, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2254, 1405.058227, -20.532264, 1002.550109, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2264, 1404.583496, -15.957249, 1001.980285, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2240, 1391.649902, -38.607498, 1001.220458, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2248, 1391.611938, -40.317142, 1000.489868, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(948, 1402.342163, -42.744697, 999.900146, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(948, 1404.912719, -42.744697, 999.900146, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2243, 1392.048950, -39.639793, 1000.119934, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(630, 1397.664794, -41.345397, 1000.919982, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2031, 1391.703369, -38.965309, 999.910156, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2868, 1400.087280, -41.786640, 1000.710144, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(14705, 1399.354003, -41.584682, 1000.930175, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2816, 1400.073608, -41.396751, 1000.710083, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19172, 1399.451904, -42.242061, 1002.380493, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(11725, 1409.603149, -35.957073, 1000.320434, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2283, 1409.683593, -36.331508, 1001.750183, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19623, 1410.057006, -36.224929, 1000.990783, 0.000000, 0.000000, -168.999954, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19807, 1409.273193, -36.165699, 1001.010498, 0.000000, 0.000000, 170.799942, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2824, 1409.785888, -33.776145, 1000.400512, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1736, 1409.575927, -36.011280, 1003.240234, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19806, 1409.733398, -31.180522, 1004.059997, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19806, 1409.733398, -20.960500, 1004.059997, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2813, 1410.387451, -33.827083, 1000.022216, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19829, 1405.329711, -26.601268, 1001.640380, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1827, 1411.043701, -17.388067, 999.900146, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2028, 1410.679443, -17.525131, 1000.410522, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1670, 1411.200805, -17.543813, 1000.350280, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2811, 1406.305297, -13.849283, 999.900146, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2811, 1413.016967, -13.849283, 999.900146, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2811, 1413.457397, -35.639312, 999.900146, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2811, 1405.976318, -35.639312, 999.900146, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2986, 1413.981079, -26.095977, 1000.060424, 0.000000, 90.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2855, 1413.313720, -27.339944, 1000.720703, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1829, 1412.957153, -24.873472, 1001.169921, 0.000000, 0.000000, -75.500038, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2869, 1413.114257, -26.312265, 1000.720275, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19897, 1412.980834, -27.195858, 1000.740051, 0.000000, 0.000000, -24.800001, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2229, 1413.589965, -19.033100, 999.900146, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2229, 1413.589965, -15.943097, 999.900146, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1902, 1410.040649, -24.910196, 1000.970153, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1902, 1409.930541, -24.850194, 1000.920104, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1902, 1409.930541, -24.960195, 1001.000183, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1930, 1409.175903, -24.893423, 1000.869995, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1902, 1409.270141, -24.850194, 1000.920104, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1902, 1410.260253, -26.600202, 1000.930114, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1902, 1410.190185, -26.470199, 1000.990173, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1930, 1410.165893, -26.563425, 1000.900024, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1930, 1409.165527, -27.323438, 1000.900024, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1902, 1408.979370, -27.260200, 1000.990173, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1902, 1409.079467, -27.180198, 1000.990173, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(942, 1384.921508, -27.419778, 1002.425842, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(939, 1377.780029, -27.470052, 1002.385620, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1208, 1390.059448, -25.549255, 1000.015991, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1208, 1390.059448, -24.669239, 1000.015991, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2846, 1388.697509, -26.782863, 1000.015991, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2844, 1388.767578, -26.692861, 1000.116027, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2843, 1388.587402, -26.582857, 1000.186157, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19624, 1385.490234, -26.983146, 1000.706054, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1210, 1385.260375, -26.996990, 1000.455139, 12.900000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19921, 1385.013671, -27.196798, 1000.716369, 270.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19918, 1385.119995, -26.930755, 1001.955993, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19919, 1414.062133, -22.558872, 999.900146, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19078, 1414.125732, -22.450550, 1001.379943, 0.000000, 270.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19621, 1385.576416, -26.717617, 1002.056640, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19622, 1387.450439, -26.246255, 1000.695373, -5.599997, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19626, 1381.405639, -28.835578, 1000.818420, 10.099999, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19626, 1381.615844, -28.835578, 1000.818420, 10.099999, 0.000000, -9.100005, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(18635, 1387.054565, -26.550598, 1000.266235, 90.000000, 0.000000, -42.899990, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19468, 1382.859619, -26.625558, 1000.376220, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19468, 1382.859619, -26.625558, 1000.506347, 0.000000, 0.000000, 115.099975, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2102, 1377.432128, -26.659345, 1001.896179, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(11745, 1384.681518, -27.342184, 1002.096313, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19631, 1384.226928, -26.656923, 1001.985961, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2827, 1377.647460, -27.048374, 1000.236206, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2827, 1377.647460, -27.608379, 1000.236206, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2630, 1374.289306, -26.897672, 1000.015991, 0.000000, 0.000000, 21.600000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(11733, 1373.582153, -27.671955, 1000.046020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1789, 1388.690429, -27.571893, 1000.556152, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1778, 1389.823486, -23.512676, 1000.026000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19878, 1380.832275, -27.163230, 1000.076049, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(18634, 1384.406494, -26.500818, 1000.306152, 0.000000, 85.500007, 78.200027, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(3470, 1373.391601, -21.507198, 1003.985229, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(927, 1390.480712, -25.249973, 1000.955322, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2653, 1378.697998, -25.817739, 1004.337158, 0.000000, 180.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2653, 1386.588500, -25.817739, 1004.337158, 0.000000, 180.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2653, 1370.809082, -25.817739, 1004.337158, 0.000000, 180.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1893, 1386.377197, -22.333347, 1004.947082, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1893, 1381.914794, -22.333347, 1004.947082, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1893, 1378.222045, -22.333347, 1004.947082, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19759, 1382.652465, -18.129537, 1004.446960, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19759, 1389.602661, -18.129537, 1004.446960, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19759, 1381.081787, -18.129537, 1004.446960, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19759, 1374.058959, -18.129537, 1004.446960, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19826, 1381.183715, -17.402269, 1001.526245, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19826, 1389.775634, -17.402269, 1001.526245, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19829, 1390.481933, -21.642036, 1001.456298, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(11280, 1388.815673, -15.910793, 1000.015991, 0.000000, 0.000000, 167.600006, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19898, 1385.862182, -20.756053, 1000.036010, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(1744, 1390.617553, -22.679159, 1001.526000, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2752, 1390.300537, -22.639297, 1001.856262, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2749, 1390.190917, -22.995304, 1001.866027, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2751, 1390.281005, -23.365312, 1001.916137, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(18641, 1390.255859, -23.820091, 1001.887756, 93.599975, 0.000000, 33.599983, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2528, 1410.271972, -41.711738, 999.910034, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19873, 1410.148193, -42.139205, 1000.910705, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19873, 1410.318359, -42.129207, 1000.910705, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2518, 1409.780029, -38.154060, 1000.120239, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2517, 1413.286010, -40.708198, 999.910034, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(11707, 1413.888427, -40.313911, 1000.870239, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19874, 1411.563842, -38.935859, 1000.560607, 0.000000, 0.000000, 28.800001, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2741, 1409.805786, -36.788475, 1001.540161, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2750, 1408.537963, -41.187862, 1001.460632, 90.000000, -36.900001, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2742, 1410.620605, -36.984855, 1001.510437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(14446, 1384.700927, -47.007518, 1000.656616, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2177, 1389.342285, -44.138019, 1003.100097, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2177, 1389.342285, -49.767967, 1003.100097, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2179, 1389.313720, -44.138290, 1002.180847, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2179, 1389.313720, -49.768249, 1002.180847, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2373, 1395.688476, -44.066692, 1000.039672, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2371, 1395.376586, -48.993232, 1000.079772, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2394, 1394.971313, -48.366420, 1000.690307, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2401, 1395.288818, -47.473701, 1001.799804, -0.000007, 0.000000, -89.999977, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2386, 1394.955566, -45.809810, 1000.180053, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2384, 1394.836425, -45.117469, 1000.180358, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2382, 1395.292236, -44.263954, 1000.506225, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2392, 1395.235961, -44.159820, 1001.446228, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2654, 1394.775268, -44.160972, 1000.270507, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2397, 1395.288818, -48.343673, 1001.799804, -0.000007, 0.000000, -89.999977, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2383, 1395.288818, -49.243652, 1001.799804, 0.000000, -0.000007, 179.999954, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2115, 1386.639160, -53.268768, 999.900146, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2120, 1386.911010, -52.629096, 1000.520690, 0.000000, 0.000000, 134.300018, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2894, 1386.879760, -53.216907, 1000.700317, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(19807, 1387.680297, -53.148319, 1000.750427, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    tmpobjid = CreateDynamicObject(2251, 1388.946166, -53.394805, 1000.740356, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);

	// Desert Village
    // tmpobjid = CreateDynamicObject(18235,-345.514,2234.643,41.491,0.000,0.000,270.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 13295, "ce_terminal", "des_adobewall2", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 5520, "bdupshouse_lae", "shingles3", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 13295, "ce_terminal", "des_adobewall2", 0);
    // SetDynamicObjectMaterial(tmpobjid, 3, 11425, "des_clifftown", "des_adobewin1", 0);
    // SetDynamicObjectMaterial(tmpobjid, 4, 3241, "conhooses", "des_adobedoor1", 0);
    // tmpobjid = CreateDynamicObject(12912,-348.539,2234.827,37.253,0.099,0.000,174.999,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 13295, "ce_terminal", "des_adobewall2", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // tmpobjid = CreateDynamicObject(11444,-390.643,2204.962,41.382,0.000,0.000,102.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 1, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // tmpobjid = CreateDynamicObject(11444,-390.945,2198.503,41.382,0.000,0.000,192.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 1, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // tmpobjid = CreateDynamicObject(11444,-392.716,2207.119,44.192,0.000,0.000,-168.400,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 1, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // tmpobjid = CreateDynamicObject(1414,-388.027,2200.711,44.135,90.000,11.800,270.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 17049, "cuntwf", "hay", 0);
    // tmpobjid = CreateDynamicObject(1414,-387.285,2197.697,44.135,90.000,11.800,270.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 17049, "cuntwf", "hay", 0);
    // tmpobjid = CreateDynamicObject(16101,-368.078,2225.236,33.228,0.000,0.000,16.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(16101,-386.202,2196.148,33.228,0.000,0.000,16.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(16101,-388.267,2206.871,44.048,90.000,-4.799,16.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(16101,-389.933,2206.537,44.048,90.000,-4.799,16.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(11427,-373.784,2232.408,48.646,0.000,0.000,14.500,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 3, 5520, "bdupshouse_lae", "shingles3", 0);
    // tmpobjid = CreateDynamicObject(12986,-367.990,2223.481,42.982,0.000,0.000,-158.600,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3221, "country_breakable", "BroWFence", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 3819, "baseball_sfsx", "telepole128", 0);
    // SetDynamicObjectMaterial(tmpobjid, 3, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // SetDynamicObjectMaterial(tmpobjid, 4, 7916, "vegaswaterfall", "newaterfal1_256", 0);
    // SetDynamicObjectMaterial(tmpobjid, 5, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // tmpobjid = CreateDynamicObject(16101,-367.338,2222.692,33.228,0.000,0.000,16.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(18879,-367.509,2224.020,44.713,0.000,0.000,5.299,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 3, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 4, 17049, "cuntwf", "hay", 0);
    // SetDynamicObjectMaterial(tmpobjid, 5, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 6, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // tmpobjid = CreateDynamicObject(3174,-372.313,2214.555,41.420,-0.900,0.000,8.699,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 3, 3819, "baseball_sfsx", "telepole128", 0);
    // SetDynamicObjectMaterial(tmpobjid, 4, 3819, "baseball_sfsx", "telepole128", 0);
    // SetDynamicObjectMaterial(tmpobjid, 5, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1025,-373.434,2214.410,41.973,0.000,0.000,-170.899,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 1, 14652, "ab_trukstpa", "mp_diner_wood", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 915, "airconext", "cj_plating2", -26317);
    // SetDynamicObjectMaterial(tmpobjid, 3, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1025,-371.170,2214.690,41.973,0.000,0.000,9.100,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 1, 14652, "ab_trukstpa", "mp_diner_wood", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 915, "airconext", "cj_plating2", -26317);
    // SetDynamicObjectMaterial(tmpobjid, 3, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1458,-384.772,2240.290,41.058,26.800,0.000,14.100,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 14805, "bdupsfurn", "Bdup_Ashtray", -52);
    // SetDynamicObjectMaterial(tmpobjid, 2, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(11733,-384.414,2238.628,40.953,0.000,0.000,14.899,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", -10066330);
    // tmpobjid = CreateDynamicObject(11436,-380.791,2253.933,41.251,0.000,0.000,-163.100,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 11425, "des_clifftown", "des_adobedoor2", 0);
    // SetDynamicObjectMaterial(tmpobjid, 4, 11425, "des_clifftown", "des_adobewin1", 0);
    // SetDynamicObjectMaterial(tmpobjid, 5, 5520, "bdupshouse_lae", "shingles3", 0);
    // SetDynamicObjectMaterial(tmpobjid, 6, 11425, "des_clifftown", "des_adobedoor2", 0);
    // SetDynamicObjectMaterial(tmpobjid, 7, 11425, "des_clifftown", "des_adobedoor2", 0);
    // SetDynamicObjectMaterial(tmpobjid, 8, 11425, "des_clifftown", "des_adobewin2", 0);
    // tmpobjid = CreateDynamicObject(11444,-420.792,2205.001,41.392,0.000,0.000,282.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 1, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // tmpobjid = CreateDynamicObject(11444,-423.662,2210.703,41.392,0.000,0.000,372.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 1, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // tmpobjid = CreateDynamicObject(11444,-413.671,2226.388,41.392,0.000,0.000,372.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 1, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // tmpobjid = CreateDynamicObject(11444,-409.439,2227.304,41.392,0.000,0.000,372.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 1, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // tmpobjid = CreateDynamicObject(11444,-416.537,2231.885,41.392,0.000,0.000,462.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 1, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // tmpobjid = CreateDynamicObject(1570,-393.603,2220.783,42.618,0.000,0.000,19.800,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 2, 14534, "ab_wooziea", "carp02S", 0);
    // tmpobjid = CreateDynamicObject(1570,-396.727,2218.386,42.618,0.000,0.000,49.600,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 2, 17049, "cuntwf", "hay", 0);
    // tmpobjid = CreateDynamicObject(1570,-390.620,2213.188,42.618,0.000,0.000,-162.100,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 2, 17079, "cuntwland", "forestfloor4", 0);
    // tmpobjid = CreateDynamicObject(1570,-394.499,2213.220,42.618,0.000,0.000,-171.300,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 2, 14534, "ab_wooziea", "carp02S", -154);
    // tmpobjid = CreateDynamicObject(1570,-398.042,2212.656,42.618,0.000,0.000,178.800,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 2, 17049, "cuntwf", "hay", 0);
    // tmpobjid = CreateDynamicObject(19315,-394.487,2213.376,42.348,60.799,0.000,0.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 2803, "cj_meaty", "CJ_FLESH_1", 0);
    // tmpobjid = CreateDynamicObject(19638,-398.071,2213.011,42.216,0.000,0.500,90.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", -26368);
    // tmpobjid = CreateDynamicObject(19638,-396.941,2213.011,42.216,0.000,0.500,90.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", -26368);
    // tmpobjid = CreateDynamicObject(2386,-394.427,2219.805,42.067,0.000,-11.599,111.099,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 14534, "ab_wooziea", "ab_fabricRed", 0);
    // tmpobjid = CreateDynamicObject(2386,-394.007,2219.967,42.067,0.000,-11.599,111.099,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 14534, "ab_wooziea", "ab_fabricRed", 0);
    // tmpobjid = CreateDynamicObject(2386,-393.522,2220.152,42.067,0.000,-11.599,111.099,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 1714, "cj_office", "BLUE_FABRIC", 0);
    // tmpobjid = CreateDynamicObject(2386,-393.046,2220.334,42.067,0.000,-11.599,111.099,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 1714, "cj_office", "BLUE_FABRIC", 0);
    // tmpobjid = CreateDynamicObject(2386,-393.177,2220.671,42.332,0.000,-40.600,111.099,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_BROWN_WOOL", 0);
    // tmpobjid = CreateDynamicObject(2386,-393.727,2220.459,42.332,0.000,-40.600,111.099,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_BROWN_WOOL", 0);
    // tmpobjid = CreateDynamicObject(2386,-394.231,2220.265,42.332,0.000,-40.600,111.099,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 1714, "cj_office", "beige_64", 0);
    // tmpobjid = CreateDynamicObject(2386,-394.725,2220.075,42.332,0.000,-40.600,111.099,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 1714, "cj_office", "beige_64", 0);
    // tmpobjid = CreateDynamicObject(1458,-386.119,2222.425,41.332,39.300,0.000,14.100,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 14805, "bdupsfurn", "Bdup_Ashtray", -52);
    // SetDynamicObjectMaterial(tmpobjid, 2, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1414,-385.796,2198.052,43.868,70.499,4.699,270.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 17049, "cuntwf", "hay", 0);
    // tmpobjid = CreateDynamicObject(1414,-386.407,2201.448,43.881,73.799,11.899,270.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 17049, "cuntwf", "hay", 0);
    // tmpobjid = CreateDynamicObject(16101,-387.298,2207.077,43.568,90.000,-4.799,16.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(11384,-393.773,2230.805,41.477,0.000,0.000,59.699,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", -13210);
    // SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // tmpobjid = CreateDynamicObject(1222,-388.501,2200.599,41.512,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 11496, "des_nwstuff", "brdwalkwater_la", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1289,-386.532,2198.879,41.682,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 2567, "ab", "ab_metaledge", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 2567, "ab", "ab_metaledge", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 2567, "ab", "ab_metaledge", 0);
    // tmpobjid = CreateDynamicObject(3407,-386.560,2199.246,43.315,176.499,2.999,0.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 2567, "ab", "ab_metaledge", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // tmpobjid = CreateDynamicObject(3407,-386.559,2198.836,43.310,176.499,2.999,0.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 2567, "ab", "ab_metaledge", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // tmpobjid = CreateDynamicObject(3675,-388.475,2201.923,41.422,180.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "stonewall3_la", 0);
    // tmpobjid = CreateDynamicObject(3433,-388.402,2202.406,41.422,90.000,-20.299,90.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "stonewall3_la", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 13691, "bevcunto2_lahills", "stonewall3_la", 0);
    // tmpobjid = CreateDynamicObject(19843,-387.582,2202.497,41.922,90.000,159.600,270.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "ab_Fireplace", 0);
    // tmpobjid = CreateDynamicObject(2708,-387.907,2196.858,41.041,0.000,0.000,102.200,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 3221, "country_breakable", "BroWFence", 0);
    // tmpobjid = CreateDynamicObject(854,-385.636,2202.257,41.612,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 8420, "carpark3_lvs", "greystones01_128", -13421773);
    // tmpobjid = CreateDynamicObject(16302,-392.028,2237.498,37.530,20.700,0.000,153.999,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 17049, "cuntwf", "hay", 0);
    // tmpobjid = CreateDynamicObject(1458,-400.199,2245.026,41.376,27.800,0.000,90.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 2212, "burger_tray", "drinktop_cb", -3368602);
    // SetDynamicObjectMaterial(tmpobjid, 2, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1458,-397.753,2245.026,41.319,27.800,0.000,90.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 2212, "burger_tray", "drinktop_cb", -26266);
    // SetDynamicObjectMaterial(tmpobjid, 2, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-417.919,2252.229,42.159,0.000,0.000,-168.299,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-413.336,2253.178,42.159,0.000,0.000,-168.299,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-408.783,2254.121,42.159,0.000,0.000,-168.299,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-406.020,2252.274,42.159,0.000,0.000,101.700,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-405.092,2247.788,42.159,0.000,0.000,101.700,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-406.854,2245.057,42.159,0.000,0.000,371.700,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-411.427,2244.111,42.159,0.000,0.000,371.700,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1474,-416.218,2243.640,42.919,0.000,0.000,-77.500,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1474,-414.480,2244.027,42.919,0.000,0.000,102.499,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-416.167,2243.130,40.839,0.000,90.000,371.700,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-414.561,2243.463,40.839,0.000,90.000,371.700,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(3174,-416.156,2238.047,41.381,-6.699,0.000,-67.499,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 3, 3819, "baseball_sfsx", "telepole128", 0);
    // SetDynamicObjectMaterial(tmpobjid, 4, 3819, "baseball_sfsx", "telepole128", 0);
    // SetDynamicObjectMaterial(tmpobjid, 5, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1025,-416.610,2239.206,41.863,0.000,0.000,112.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 1, 14652, "ab_trukstpa", "mp_diner_wood", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 915, "airconext", "cj_plating2", -26317);
    // SetDynamicObjectMaterial(tmpobjid, 3, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1025,-415.676,2236.919,41.863,0.000,0.000,292.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 1, 14652, "ab_trukstpa", "mp_diner_wood", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 915, "airconext", "cj_plating2", -26317);
    // SetDynamicObjectMaterial(tmpobjid, 3, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(16305,-415.789,2248.356,42.329,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 17049, "cuntwf", "hay", 0);
    // tmpobjid = CreateDynamicObject(1460,-408.698,2221.352,44.687,-95.200,-90.399,13.700,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-405.594,2207.041,44.416,270.000,0.000,160.099,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-415.743,2205.751,44.486,270.000,0.000,-169.900,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-398.481,2186.904,44.746,270.000,0.000,137.999,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-389.210,2185.090,44.716,-87.699,-88.800,98.899,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-384.675,2185.701,44.533,-87.699,-88.800,98.899,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(19468,-388.043,2201.110,41.490,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(19468,-388.533,2213.009,41.530,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(19527,-421.027,2196.731,41.653,0.000,0.000,-37.099,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "bluemetal", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 7916, "vegaswaterfall", "newaterfal1_256", 0);
    // tmpobjid = CreateDynamicObject(11444,-342.359,2234.780,45.462,0.000,0.000,89.099,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 13295, "ce_terminal", "des_adobewall2", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 13295, "ce_terminal", "des_adobewall2", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 13295, "ce_terminal", "des_adobewall2", 0);
    // SetDynamicObjectMaterial(tmpobjid, 3, 13295, "ce_terminal", "des_adobewall2", 0);
    // tmpobjid = CreateDynamicObject(2912,-407.060,2202.505,41.229,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 10941, "silicon2_sfse", "ws_girderhole", -26317);
    // tmpobjid = CreateDynamicObject(2912,-403.710,2238.544,41.229,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 10941, "silicon2_sfse", "ws_girderhole", -26317);
    // tmpobjid = CreateDynamicObject(2912,-425.920,2204.464,41.229,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 10941, "silicon2_sfse", "ws_girderhole", -26317);
    // tmpobjid = CreateDynamicObject(19482,-398.486,2210.685,45.753,0.000,0.000,83.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 17518, "hub_alpha", "clothline1_LAe", 0);
    // tmpobjid = CreateDynamicObject(16101,-401.288,2211.026,36.918,0.000,0.000,-5.400,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(19482,-359.703,2215.714,46.043,0.000,0.000,-168.500,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 17518, "hub_alpha", "clothline1_LAe", 0);
    // tmpobjid = CreateDynamicObject(16101,-360.280,2218.476,36.918,0.000,0.000,12.799,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(19482,-389.197,2199.649,46.043,0.000,0.000,165.500,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 17518, "hub_alpha", "clothline1_LAe", 0);
    // tmpobjid = CreateDynamicObject(16101,-389.923,2196.974,36.918,0.000,0.000,12.799,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(19482,-412.678,2219.790,43.213,0.000,0.000,-159.899,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 17518, "hub_alpha", "clothline1_LAe", 0);
    // tmpobjid = CreateDynamicObject(1460,-364.951,2254.345,44.887,-90.000,-88.800,121.399,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-371.529,2252.326,44.846,-82.400,-86.600,91.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(1460,-374.282,2252.434,45.213,-82.400,-86.600,91.199,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 3819, "baseball_sfsx", "telepole128", 0);
    // tmpobjid = CreateDynamicObject(12912,-380.692,2256.810,36.094,0.099,0.000,196.200,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 2, 18232, "cw_truckstopcs_t", "des_adobewall3", 0);
    // tmpobjid = CreateDynamicObject(14608,-358.780,2234.657,42.624,0.000,0.000,-115.999,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 13295, "ce_terminal", "des_adobewall2", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 17101, "cuntwlandse", "des_crackeddirt1", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 13295, "ce_terminal", "des_adobewall2", 0);
    // SetDynamicObjectMaterial(tmpobjid, 3, 13295, "ce_terminal", "des_adobewall2", 0);
    // SetDynamicObjectMaterial(tmpobjid, 4, 13295, "ce_terminal", "des_adobewall2", 0);
    // tmpobjid = CreateDynamicObject(748,-361.253,2234.576,42.494,0.000,0.000,270.000,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // tmpobjid = CreateDynamicObject(748,-360.369,2232.439,41.981,0.000,27.000,-76.500,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // tmpobjid = CreateDynamicObject(748,-361.253,2234.576,42.494,0.000,0.000,103.599,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // tmpobjid = CreateDynamicObject(748,-360.750,2234.130,43.070,0.000,61.800,-170.400,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // tmpobjid = CreateDynamicObject(748,-362.111,2233.900,41.258,0.000,61.800,-170.400,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // tmpobjid = CreateDynamicObject(748,-362.323,2235.120,40.784,0.000,61.800,-170.400,-1,-1,-1,600.000,600.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0);
    // tmpobjid = CreateDynamicObject(11457,-358.665,2217.640,41.034,0.000,0.000,9.199,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11440,-397.541,2235.690,40.934,0.000,0.000,-167.699,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11444,-391.640,2209.572,41.382,0.000,0.000,102.199,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11425,-401.636,2197.878,43.187,0.000,0.000,-56.700,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1044,-367.449,2223.133,43.959,-2.099,0.000,556.199,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1044,-367.935,2224.804,43.961,-1.799,0.000,15.599,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19087,-367.743,2223.927,44.015,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1477,-392.951,2232.851,42.796,0.000,0.000,102.099,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1475,-394.180,2238.645,42.799,0.000,0.000,102.199,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1473,-393.858,2237.169,43.769,0.000,0.000,102.499,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1473,-393.230,2234.337,43.769,0.000,0.000,102.499,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1473,-393.545,2235.763,43.769,0.000,0.000,102.499,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1453,-384.714,2241.177,42.303,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1453,-385.189,2241.439,42.043,90.000,-22.900,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1453,-384.896,2240.468,42.043,90.000,-76.600,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19833,-373.485,2218.792,41.411,0.000,0.000,-165.700,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19833,-372.545,2219.031,41.411,0.000,0.000,-165.700,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11428,-439.925,2197.494,46.697,0.000,0.000,9.499,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11428,-435.266,2194.401,29.587,270.000,-39.599,9.499,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11428,-436.200,2201.351,30.045,91.999,-39.599,9.499,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11428,-429.758,2197.613,29.844,91.999,-39.599,99.500,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11458,-429.183,2217.728,41.534,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11458,-430.223,2222.335,36.954,0.000,90.000,26.299,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11447,-382.249,2188.624,41.247,0.000,0.000,-99.400,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11447,-402.468,2204.681,41.247,0.000,0.000,-99.400,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11447,-413.840,2186.071,40.577,0.000,0.000,170.599,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11447,-411.002,2200.273,41.267,0.000,0.000,100.999,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11447,-426.727,2187.362,40.537,0.000,0.000,-122.200,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11447,-410.480,2206.448,41.267,0.000,0.000,190.999,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19637,-390.799,2213.838,41.971,0.000,12.700,106.400,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19637,-389.859,2214.118,41.971,0.000,12.700,106.400,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19637,-390.187,2213.745,42.215,0.000,4.800,106.400,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(2806,-394.649,2213.851,42.029,0.000,0.000,-45.899,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(2803,-395.399,2214.344,41.819,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(2805,-393.447,2214.196,42.729,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(2806,-393.450,2213.597,42.299,0.000,0.000,-54.599,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19636,-396.338,2217.824,41.965,0.000,18.499,-40.300,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19636,-396.940,2217.118,41.965,0.000,18.499,-40.300,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19636,-396.864,2217.786,42.260,0.000,18.499,-40.300,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19638,-397.130,2213.268,41.969,0.000,22.800,90.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19638,-398.071,2213.268,41.969,0.000,22.800,90.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(924,-386.199,2222.349,42.214,14.500,2.199,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(924,-386.175,2223.151,42.381,1.199,-12.399,90.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19590,-387.924,2197.485,42.044,0.000,90.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19590,-388.313,2198.184,42.044,0.000,90.000,29.100,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19590,-388.190,2198.540,42.044,0.000,90.000,29.100,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19590,-388.277,2197.957,42.064,0.000,90.000,171.499,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19590,-387.979,2196.839,42.054,0.000,90.000,171.499,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19631,-386.408,2198.964,42.242,0.000,90.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(339,-388.317,2198.017,42.472,0.000,0.000,100.699,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(339,-388.274,2197.791,42.472,0.000,0.000,100.699,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(339,-388.216,2197.487,42.472,0.000,0.000,100.699,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(339,-388.140,2197.084,42.472,0.000,0.000,100.699,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(339,-388.004,2196.583,42.472,0.000,0.000,100.699,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(2228,-386.631,2203.337,41.952,0.000,0.000,-163.900,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(2237,-388.095,2197.593,41.582,270.000,0.000,15.500,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(2237,-387.974,2198.093,41.582,270.000,0.000,15.500,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(2237,-388.016,2197.625,41.622,270.000,0.000,174.899,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1463,-385.327,2196.437,41.722,0.000,0.000,90.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(18725,-388.412,2202.710,46.306,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11425,-353.792,2253.744,43.247,0.000,0.000,-167.500,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(11440,-430.862,2242.242,40.944,0.000,0.000,-77.699,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1462,-395.791,2241.177,41.429,0.000,2.799,-168.300,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1463,-398.624,2245.021,42.319,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1463,-400.714,2244.951,42.319,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1452,-403.933,2238.545,42.489,0.000,0.000,270.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1452,-407.062,2202.334,42.469,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1452,-425.927,2204.267,42.469,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19315,-407.730,2249.129,41.889,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19315,-409.840,2247.219,41.889,0.000,0.000,73.700,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19315,-412.335,2247.946,41.889,0.000,0.000,-19.299,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19315,-411.218,2251.136,41.889,0.000,0.000,7.600,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19315,-409.180,2249.983,41.889,0.000,0.000,-64.399,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-401.793,2255.836,41.601,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-416.703,2255.836,41.601,0.000,0.000,90.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-416.703,2271.186,41.412,0.000,0.000,90.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-395.803,2271.186,40.551,0.000,0.000,180.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-381.093,2271.186,40.932,0.000,0.000,270.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-383.053,2244.146,40.932,0.000,0.000,270.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-367.573,2244.146,40.932,0.000,0.000,360.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-387.533,2231.396,40.932,0.000,0.000,360.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-401.373,2217.286,41.582,0.000,0.000,360.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-401.373,2198.317,41.622,0.000,0.000,360.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-381.263,2195.427,41.572,0.000,0.000,360.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-359.583,2195.517,41.492,0.000,0.000,360.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-349.243,2220.678,41.512,0.000,0.000,450.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-353.693,2243.071,41.512,0.000,0.000,450.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-401.373,2183.016,40.812,0.000,0.000,450.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-420.733,2183.016,40.842,0.000,0.000,450.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-431.643,2197.076,41.542,0.000,0.000,450.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-431.643,2219.405,41.512,0.000,0.000,540.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-414.353,2212.535,41.442,0.000,0.000,540.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-424.223,2234.314,41.432,0.000,0.000,540.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-348.440,2214.586,41.504,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-348.440,2225.775,41.504,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-361.630,2225.775,41.504,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-374.630,2222.935,41.354,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-389.640,2222.935,41.364,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-389.640,2191.745,41.364,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-399.520,2199.715,41.364,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-412.710,2214.126,41.364,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-408.680,2242.838,41.364,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-393.970,2242.838,41.364,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-401.890,2255.891,41.364,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-401.890,2268.180,40.794,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-417.030,2259.638,41.344,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-417.030,2256.937,41.344,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-430.040,2248.167,41.464,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-426.350,2197.606,41.364,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-442.830,2197.606,41.724,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-439.410,2191.458,41.794,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-434.210,2187.825,41.794,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-434.210,2201.677,41.174,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(753,-445.070,2207.110,41.404,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-443.643,2197.076,41.382,0.000,0.000,450.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(650,-437.563,2186.885,41.772,0.000,0.000,450.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-364.731,2203.083,41.446,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-347.361,2222.134,41.446,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-366.031,2222.134,41.446,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-390.231,2222.134,41.446,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-403.980,2226.225,41.446,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-405.110,2237.235,41.446,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-405.110,2244.717,41.446,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-416.430,2251.578,41.446,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-395.770,2251.578,41.386,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-410.340,2262.668,41.366,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-424.410,2262.668,41.426,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-429.690,2247.828,41.426,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-429.690,2225.199,41.426,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-426.060,2217.049,41.426,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-414.560,2217.049,41.426,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-414.560,2196.217,41.376,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-394.180,2196.217,41.386,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-439.560,2191.606,41.596,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(904,-445.010,2206.997,41.256,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(634,-404.924,2243.682,41.329,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(634,-404.924,2221.842,41.229,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(634,-404.924,2199.601,41.229,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(634,-392.425,2199.601,41.189,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(634,-383.365,2190.531,41.409,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(634,-418.625,2190.531,40.889,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(634,-429.505,2216.230,40.719,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(634,-436.115,2201.121,41.329,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(634,-356.965,2201.121,41.309,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(634,-344.855,2219.691,41.309,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(634,-344.855,2242.540,41.219,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(634,-368.805,2242.540,41.219,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(634,-368.805,2267.060,41.179,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(634,-354.425,2269.091,43.039,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(3425,-360.413,2239.921,52.377,0.000,0.000,103.499,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1451,-400.249,2227.404,42.257,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1451,-418.299,2208.833,42.217,0.000,0.000,104.300,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1428,-412.546,2234.336,43.039,0.000,0.000,99.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1428,-408.563,2209.600,43.039,0.000,0.000,-165.100,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1428,-394.272,2201.007,42.939,0.000,0.000,-79.099,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(816,-420.917,2196.691,41.588,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(816,-420.917,2196.691,41.588,0.000,0.000,81.200,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19632,-421.007,2196.656,41.383,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(18726,-420.866,2196.916,39.515,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19553,-393.487,2220.125,42.231,20.700,-100.699,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19553,-394.486,2219.785,42.227,20.700,-100.699,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19553,-394.073,2220.417,42.539,11.799,-87.500,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(19553,-393.408,2220.445,42.403,49.899,-100.399,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(14872,-385.265,2204.258,41.423,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1428,-386.343,2205.769,43.103,0.000,0.000,98.699,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1437,-398.203,2222.875,42.629,0.000,0.000,281.899,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(620,-403.039,2210.060,34.497,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(620,-393.399,2243.100,28.817,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(620,-433.769,2248.280,28.817,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(620,-372.589,2256.433,38.827,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1428,-401.319,2194.836,42.839,0.000,0.000,124.700,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(18698,-406.881,2202.095,40.429,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(18698,-403.531,2238.504,40.429,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(18698,-425.741,2204.423,40.429,0.000,0.000,0.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(1437,-363.735,2242.188,42.629,0.000,0.000,281.899,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(748,-360.903,2232.756,41.414,0.000,0.000,180.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(748,-360.693,2234.116,41.414,0.000,0.000,270.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(748,-360.693,2233.026,41.414,0.000,0.000,270.000,-1,-1,-1,600.000,600.000);
    // tmpobjid = CreateDynamicObject(748,-361.153,2235.406,41.414,0.000,0.000,270.000,-1,-1,-1,600.000,600.000);
	
	// Kevin bar Interior
	tmpobjid = CreateDynamicObjectEx(19377, 2065.106445, 2348.542480, -90.281143, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 2057.429443, 2358.174316, -90.281143, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_marble_checks", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2076.024414, 2353.373046, -84.947303, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2067.287841, 2353.372802, -84.947303, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2077.642822, 2352.266357, -90.603942, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2076.927734, 2351.547851, -90.603897, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2075.322021, 2351.552734, -90.603897, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2350, 2078.307861, 2352.375732, -89.818397, 0.000000, 0.000000, 339.521453, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 1746, "cj_sofa", "CJ_FAB2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2077.564453, 2352.311767, -88.860198, 0.000000, 0.000000, 0.059999, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2076.345458, 2351.531494, -88.860198, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2076.346679, 2351.971435, -88.860198, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2077.127197, 2353.191162, -88.860198, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2080.849365, 2351.802734, -84.947303, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3241, "conhooses", "des_woodfence1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 2086.104492, 2348.538574, -90.281143, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2085.578125, 2347.074218, -84.947303, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3241, "conhooses", "des_woodfence1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2082.364501, 2342.289794, -84.947303, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2077.526611, 2343.654785, -84.947303, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2077.641601, 2353.866455, -90.603942, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2073.719482, 2351.552490, -90.603897, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2074.349365, 2351.531738, -88.860198, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2074.347900, 2351.972167, -88.860198, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2072.350830, 2351.532470, -88.860198, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2072.348388, 2351.971923, -88.860198, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2072.251220, 2351.554443, -90.603897, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2069.380615, 2351.554687, -90.603897, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2069.138427, 2352.312988, -88.858200, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2068.699462, 2352.314208, -88.860198, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2070.354492, 2351.534667, -88.860198, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2070.354003, 2351.970458, -88.860198, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2070.647460, 2351.554443, -90.603897, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2068.666015, 2352.273193, -90.603897, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2068.666259, 2353.873291, -90.603897, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2075.307128, 2353.069091, -88.551101, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2073.309082, 2353.068603, -88.551101, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2075.749511, 2353.068115, -88.047096, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2073.920654, 2353.053955, -87.037048, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2073.309082, 2353.068603, -87.549102, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2075.307128, 2353.069091, -87.549102, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2073.920654, 2353.053955, -88.049102, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2075.747558, 2353.052490, -87.035003, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1569, 2082.298095, 2343.839843, -90.193199, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "corporate1", 0xFFFFFFCC);
	tmpobjid = CreateDynamicObjectEx(1569, 2082.292480, 2346.841308, -90.193199, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "corporate1", 0xFFFFFFCC);
	SetDynamicObjectMaterial(tmpobjid, 1, 14538, "ab_xit_box", "sw_door07", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19373, 2076.156494, 2351.520507, -91.612892, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 960, "cj_crate_will", "CJ_FLIGHT_CASE", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19373, 2077.673828, 2353.037597, -91.612899, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 960, "cj_crate_will", "CJ_FLIGHT_CASE", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19373, 2072.948242, 2351.520507, -91.612892, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 960, "cj_crate_will", "CJ_FLIGHT_CASE", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19373, 2070.144775, 2351.522460, -91.614898, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 960, "cj_crate_will", "CJ_FLIGHT_CASE", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19373, 2068.627197, 2353.040039, -91.614898, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 960, "cj_crate_will", "CJ_FLIGHT_CASE", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 2075.607177, 2348.541259, -90.281143, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19375, 2073.127197, 2353.363525, -90.195701, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 12805, "ce_loadbay", "sw_corrug", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19375, 2072.392089, 2355.487548, -90.255699, 0.000000, 90.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 12805, "ce_loadbay", "sw_corrug", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19375, 2073.891845, 2355.487060, -90.257698, 0.000000, 90.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 12805, "ce_loadbay", "sw_corrug", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2067.489257, 2355.053222, -95.415901, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2073.131591, 2350.913574, -80.237297, 0.000000, 5.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2074.067626, 2350.147705, -95.417900, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2078.032470, 2358.091552, -89.046440, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2078.794921, 2355.049560, -95.415901, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2068.222412, 2358.089843, -89.046440, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2067.894775, 2343.654541, -84.947303, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2350, 2078.072265, 2350.840332, -89.818397, 0.000000, 0.000000, 33329.523437, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 1746, "cj_sofa", "CJ_FAB2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2350, 2075.881103, 2350.699462, -89.818397, 0.000000, 0.000000, 333329.531250, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 1746, "cj_sofa", "CJ_FAB2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2350, 2073.839111, 2350.860107, -89.818397, 0.000000, 0.000000, 3133329.500000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 1746, "cj_sofa", "CJ_FAB2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2350, 2071.587890, 2350.779296, -89.818397, 0.000000, 0.000000, 333231328.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 1746, "cj_sofa", "CJ_FAB2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2350, 2069.075927, 2350.764160, -89.818397, 0.000000, 0.000000, 333231328.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 1746, "cj_sofa", "CJ_FAB2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1499, 2062.476806, 2353.375244, -90.193603, 0.000000, 0.000000, 180.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10429, "hashblock1_sfs", "Bow_Concrete_drip", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14581, "ab_mafiasuitea", "cof_wood2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2062.723632, 2358.247802, -84.947303, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2067.287353, 2353.368896, -84.947303, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2056.153564, 2353.386718, -81.656143, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2060.477050, 2348.472167, -84.947303, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2058.263916, 2343.652832, -84.947303, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2061.668701, 2353.382568, -85.933502, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2056.154296, 2353.371093, -84.947303, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2057.830566, 2361.861572, -84.947303, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2053.720703, 2358.255859, -84.947303, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19370, 2059.660644, 2360.197753, -88.321502, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 2057.429443, 2358.174316, -85.770431, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1499, 2061.428710, 2358.678955, -89.993606, 0.000000, 0.000000, 180.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2028, "cj_games", "CJ_speaker4", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19370, 2063.025878, 2358.681152, -88.321502, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19370, 2059.835449, 2360.197753, -88.321502, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1499, 2059.584228, 2358.696777, -89.993606, 0.000000, 0.000000, 180.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2028, "cj_games", "CJ_speaker4", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19370, 2058.009033, 2360.181152, -88.321502, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19370, 2057.836181, 2360.179443, -88.321502, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1499, 2057.769287, 2358.681640, -89.993606, 0.000000, 0.000000, 180.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2028, "cj_games", "CJ_speaker4", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19370, 2056.181884, 2360.195068, -88.321502, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19370, 2056.003906, 2360.194335, -88.321502, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1499, 2055.928710, 2358.703125, -89.993606, 0.000000, 0.000000, 180.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2028, "cj_games", "CJ_speaker4", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19370, 2052.828613, 2358.698242, -88.321502, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19370, 2063.025878, 2358.858886, -88.321502, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19370, 2052.829101, 2358.872314, -88.321502, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(17951, 2057.258544, 2353.437500, -87.007202, 0.000000, 0.000000, 89.529998, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2056.154296, 2353.384765, -84.947303, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2058.595458, 2352.675292, -88.866798, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14569, "traidman", "darkgrey_carpet_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2055.918701, 2352.677978, -86.826263, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14569, "traidman", "darkgrey_carpet_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2058.595458, 2352.677246, -86.826263, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14569, "traidman", "darkgrey_carpet_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2055.918701, 2352.676025, -88.866798, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14569, "traidman", "darkgrey_carpet_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2060.426025, 2351.728515, -88.153297, 90.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14569, "traidman", "darkgrey_carpet_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2060.426025, 2351.730468, -87.539299, 90.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14569, "traidman", "darkgrey_carpet_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2054.081542, 2351.731933, -88.153297, 90.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14569, "traidman", "darkgrey_carpet_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2054.081542, 2351.729980, -87.539299, 90.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14569, "traidman", "darkgrey_carpet_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2057.841796, 2353.372070, -95.440101, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2053.723388, 2358.233642, -94.470283, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2056.155761, 2353.386474, -94.470298, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2067.288818, 2353.374023, -94.470298, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2062.721435, 2358.268066, -94.470283, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2057.831298, 2361.858886, -94.470298, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4004, "civic07_lan", "sl_rotnbrik", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2053.723388, 2358.233642, -80.766899, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14569, "traidman", "darkgrey_carpet_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2058.446289, 2353.387451, -80.766899, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14569, "traidman", "darkgrey_carpet_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2062.721435, 2358.268066, -80.766899, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14569, "traidman", "darkgrey_carpet_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2067.288818, 2353.374023, -80.766899, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 2077.451904, 2348.921875, -85.238906, 0.000000, 85.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11395, "corvinsign_sfse", "shutters", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 2056.337646, 2352.239501, -85.238906, 0.000000, 85.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11395, "corvinsign_sfse", "shutters", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 2067.843994, 2348.914550, -85.238906, 0.000000, 85.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11395, "corvinsign_sfse", "shutters", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 2058.223144, 2348.902343, -85.238906, 0.000000, 85.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11395, "corvinsign_sfse", "shutters", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 2077.454589, 2348.072753, -85.238899, 0.000000, 85.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11395, "corvinsign_sfse", "shutters", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 2067.890380, 2348.071777, -85.238899, 0.000000, 85.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11395, "corvinsign_sfse", "shutters", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 2058.260986, 2348.076171, -85.238899, 0.000000, 85.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11395, "corvinsign_sfse", "shutters", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2057.831298, 2361.858886, -80.766899, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14569, "traidman", "darkgrey_carpet_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2064.356933, 2353.614990, -80.558998, -5.000000, 0.000000, 360.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2064.357666, 2343.400878, -80.558998, 5.000000, 0.000000, -360.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2077.753906, 2353.597656, -80.558998, -5.000000, 0.000000, 360.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2077.754638, 2343.319091, -80.558998, 5.000000, 0.000000, -360.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2073.373046, 2353.601562, -80.558998, -5.000000, 0.000000, 360.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2073.378662, 2343.403564, -80.558998, 5.000000, 0.000000, -360.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2068.996337, 2343.368164, -80.558998, 5.000000, 0.000000, -360.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2068.995605, 2353.582275, -80.558998, -5.000000, 0.000000, 360.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2076.787597, 2353.855468, -88.551101, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2076.787597, 2353.855468, -87.549102, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2072.464355, 2353.841064, -87.037002, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2072.464355, 2353.841064, -88.049102, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19375, 2073.131347, 2355.771484, -85.839866, 0.000000, 85.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3525, "excaliburtorch", "sw_cabinwall01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2072.218505, 2350.147460, -95.415901, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2068.227294, 2355.626220, -80.646301, 5.000000, 0.000000, 180.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, 2078.036376, 2355.623535, -80.646301, 5.000000, 0.000000, 180.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2068.699462, 2352.314208, -88.892196, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2070.354492, 2351.534667, -88.892196, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2069.138427, 2352.312988, -88.892196, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2072.350830, 2351.532470, -88.892196, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2074.349365, 2351.531738, -88.892196, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2076.345458, 2351.531494, -88.892196, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19940, 2077.564453, 2352.311767, -88.892196, 0.000000, 0.000000, 0.059999, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3374, "ce_farmxref", "sw_barnwood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2762, 2062.960937, 2344.926757, -89.780799, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 3, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2746, 2060.735839, 2344.943847, -89.485900, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 1746, "cj_sofa", "CJ_FAB2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2746, 2065.175048, 2344.903808, -89.485900, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 1746, "cj_sofa", "CJ_FAB2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2746, 2069.715087, 2344.842285, -89.485900, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 1746, "cj_sofa", "CJ_FAB2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2762, 2071.939941, 2344.900390, -89.780799, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 3, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2763, 2073.863281, 2347.995849, -89.800102, 0.000000, 0.000000, 351.467834, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14652, "ab_trukstpa", "CJ_WOOD1(EDGE)", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2763, 2068.987304, 2348.166259, -89.800102, 0.000000, 0.000000, 3521.467773, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14652, "ab_trukstpa", "CJ_WOOD1(EDGE)", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2763, 2064.247314, 2348.952880, -89.800102, 0.000000, 0.000000, 240.840393, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 3, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2636, 2065.283935, 2348.713623, -89.571098, 0.000000, 0.000000, 348.487915, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "mp_diner_wood", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2636, 2063.143310, 2349.303710, -89.571098, 0.000000, 0.000000, 173.151657, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "mp_diner_wood", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2636, 2063.729003, 2348.124267, -89.571098, 0.000000, 0.000000, 251.708282, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "mp_diner_wood", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2636, 2064.613769, 2349.850830, -89.571098, 0.000000, 0.000000, 73.773178, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "mp_diner_wood", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2636, 2069.053955, 2347.264160, -89.571098, 0.000000, 0.000000, 273.721893, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "mp_diner_wood", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2636, 2069.866455, 2348.172119, -89.571098, 0.000000, 0.000000, 354.785552, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "mp_diner_wood", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2636, 2068.684814, 2349.032470, -89.571098, 0.000000, 0.000000, 107.936958, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "mp_diner_wood", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2636, 2067.995849, 2348.116455, -89.571098, 0.000000, 0.000000, 177.158966, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "mp_diner_wood", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2636, 2072.792968, 2348.167968, -89.571098, 0.000000, 0.000000, 177.158966, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "mp_diner_wood", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2636, 2074.962402, 2347.916015, -89.571098, 0.000000, 0.000000, 0.772310, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "mp_diner_wood", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14652, "ab_trukstpa", "mp_diner_wood", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2671, 2062.761718, 2344.569580, -90.190101, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 3, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19373, 2060.498535, 2348.557128, -87.721801, 0.000014, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8421, "pirateland", "tislndskullrock_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2059.794677, 2350.375000, -87.738342, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2059.796630, 2348.556152, -89.400802, 0.000000, 90.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2059.798339, 2346.719238, -87.738342, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2070.168212, 2342.946044, -86.919296, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15048, "labigsave", "ah_carp1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 15048, "labigsave", "ah_carp1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, 2080.268310, 2349.811767, -86.138130, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 6985, "vgnfremnt2", "vgntext1_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(3032, 2076.136474, 2343.774169, -87.776870, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar13", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(3032, 2070.069335, 2343.753906, -87.776870, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar13", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2059.794677, 2348.556152, -86.077598, 0.000000, 90.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2069.960937, 2342.947998, -86.919296, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15048, "labigsave", "ah_carp1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2076.280273, 2342.974609, -86.919296, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15048, "labigsave", "ah_carp1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2076.004394, 2342.974853, -86.919296, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15048, "labigsave", "ah_carp1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2064.426025, 2345.224609, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2064.380126, 2346.305175, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2064.351318, 2346.885253, -83.202461, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2064.375000, 2347.667724, -83.202461, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2064.375000, 2348.599853, -83.102462, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2064.383789, 2350.405273, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2064.385253, 2349.321289, -83.102462, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2064.364990, 2349.821289, -83.302459, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2064.392578, 2351.555664, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2077.765625, 2345.423583, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2077.719726, 2346.504150, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2077.690917, 2347.084228, -83.202461, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2077.714599, 2347.866699, -83.202461, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2069.024902, 2345.258300, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2068.979003, 2346.338867, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2068.950195, 2346.918945, -83.202461, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2068.973876, 2347.701416, -83.202461, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2069.011962, 2348.633544, -83.102462, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2069.022216, 2349.354980, -83.102462, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2069.001953, 2349.854980, -83.302459, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2068.982666, 2350.438964, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2068.991455, 2351.589355, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2077.737548, 2349.911621, -83.202461, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2077.750732, 2348.648193, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2077.690185, 2351.447998, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2077.697021, 2350.531250, -83.303459, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2077.755371, 2349.348876, -83.303459, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2073.348388, 2351.424560, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2073.355224, 2350.507812, -83.303459, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2073.395751, 2349.888183, -83.202461, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2073.413574, 2349.325439, -83.303459, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2073.408935, 2348.624755, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2073.372802, 2347.843261, -83.202461, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2073.349121, 2347.060791, -83.202461, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2073.377929, 2346.480712, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2073.423828, 2345.400146, -83.403457, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2283, 2060.581054, 2351.793701, -86.358757, 0.000000, 0.000000, 90.000045, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 10429, "hashblock1_sfs", "ws_streak_billbd", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19450, 2060.479980, 2348.553222, -90.808868, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19450, 2080.848876, 2351.799072, -90.808868, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19450, 2082.362304, 2346.674072, -90.808868, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19450, 2082.899902, 2353.370605, -90.808898, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19450, 2068.076904, 2343.656005, -90.808898, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19450, 2058.451904, 2343.656982, -90.808898, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19450, 2067.289550, 2353.366943, -90.808898, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19450, 2056.152832, 2353.370117, -90.808898, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19450, 2077.705810, 2343.660156, -90.808898, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19450, 2085.584472, 2347.070068, -90.808898, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2277, 2078.844970, 2352.753173, -88.216453, 0.000000, -1.399999, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 19115, "sillyhelmets", "sillyhelmet3", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2280, 2078.782958, 2352.773437, -87.058082, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 5134, "wasteland_las2", "ja_sgcombo3", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2283, 2079.958251, 2353.233398, -88.218750, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 10429, "hashblock1_sfs", "ws_streak_billbd", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2277, 2079.786132, 2352.793457, -87.415458, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 8849, "vgeretail1", "zippizzaco_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2281, 2080.257812, 2352.585449, -87.490409, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 18901, "matclothes", "helmet", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2267, 2080.714111, 2349.739990, -87.374473, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 6865, "vgndwntwn23", "steaksign1_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2265, 2080.277099, 2351.587646, -88.962287, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 18901, "matclothes", "bandanaskull", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2267, 2073.574462, 2351.428222, -89.385597, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 19115, "sillyhelmets", "sillyhelmet3", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19329, 2080.765136, 2350.080322, -88.490898, 0.000000, 0.799999, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3119, "cs_ry_props", "GB_magazine07", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 6865, "vgndwntwn23", "steaksign1_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2265, 2080.268066, 2351.024902, -87.752296, 0.000000, -1.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 19160, "newhardhats", "hardhat2map", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, 2061.058593, 2344.348632, -87.679542, 0.000000, -1.199999, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 5134, "wasteland_las2", "ja_sgcombo3", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 6865, "vgndwntwn23", "steaksign2_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19482, 2060.588867, 2345.448486, -88.337783, -0.499999, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_church_grass_alt", 0x00000000);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{262626} R I D E", 130, "Ariel", 60, 1, 0x00000000, 0x00000000, 1);
	tmpobjid = CreateDynamicObjectEx(2270, 2080.273925, 2347.373535, -88.304397, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 8849, "vgeretail1", "zippizzaco_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2277, 2080.269042, 2348.985595, -86.476631, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 18901, "matclothes", "helmet", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2277, 2080.260498, 2348.480712, -87.716491, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 7981, "vgssairport02", "drivecare_64", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2059.794677, 2350.244873, -87.738342, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, 2080.152832, 2352.781738, -86.672401, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 8322, "vgsssignage02", "dirtringtex1_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, 2080.268310, 2350.812744, -86.548118, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 19597, "lsbeachside", "beachside-sign", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, 2080.264892, 2348.114990, -88.629203, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 3434, "skullsign", "pirateskull01_128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19326, 2080.753417, 2352.519042, -88.434600, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10770, "carrier_sfse", "ws_carrierdecals", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2059.794677, 2346.874511, -87.738342, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19781, 2080.754394, 2347.383789, -88.838417, 90.000000, -90.400032, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19115, "sillyhelmets", "sillyhelmet2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19115, "sillyhelmets", "sillyhelmet2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19482, 2060.588867, 2351.440429, -88.330039, -0.499999, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_church_grass_alt", 0x00000000);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{262626} F R E E", 130, "Ariel", 60, 1, 0x00000000, 0x00000000, 1);
	tmpobjid = CreateDynamicObjectEx(2268, 2072.302001, 2350.968994, -89.719123, 0.000000, 0.000000, 0.000003, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 3434, "skullsign", "pirateskull01_128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2275, 2080.259765, 2347.822753, -87.051803, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 12962, "sw_apartflat", "sw_genstore2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2268, 2075.443847, 2350.968994, -89.719123, 0.000000, 0.000000, 0.000003, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 3524, "skullpillar", "pirateskull02_128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2268, 2080.266113, 2348.204345, -86.152236, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14737, "whorewallstuff", "AH_fbatters2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2268, 2080.271240, 2352.353027, -86.448089, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "onewaysignl", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, 2071.619873, 2352.781738, -87.502365, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14654, "ab_trukstpe", "bbar_sports1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1566, 2069.545410, 2353.311767, -88.865470, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2268, 2080.267822, 2349.885009, -86.861289, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 19115, "sillyhelmets", "sillyhelmet3", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19329, 2060.575195, 2345.595947, -88.289901, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "mp_diner_wood", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19329, 2060.562744, 2351.517822, -88.289901, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "mp_diner_wood", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2265, 2061.052734, 2345.314697, -87.699913, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 5134, "wasteland_las2", "ja_sgcombo3", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19115, "sillyhelmets", "sillyhelmet3", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2265, 2061.050537, 2344.985839, -86.837791, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18901, "matclothes", "bandanaskull", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3524, "skullpillar", "pirateskull02_128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2268, 2061.071533, 2351.386962, -87.729103, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "onewaysignr", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, 2061.058593, 2346.099853, -86.642288, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 5134, "wasteland_las2", "ja_sgcombo3", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3434, "skullsign", "pirateskull01_128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2261, 2061.091796, 2352.487304, -87.685501, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 19597, "lsbeachside", "beachside-sign", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2261, 2061.064941, 2346.101562, -87.685501, 0.000000, 2.100000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 18901, "matclothes", "helmet", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, 2068.958251, 2352.781738, -87.502365, 0.000000, -3.200000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14654, "ab_trukstpe", "bbar_plates2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, 2070.651123, 2352.781738, -86.672401, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14654, "ab_trukstpe", "bbar_signs1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2748, 2073.686523, 2344.841796, -89.485900, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 1746, "cj_sofa", "CJ_FAB2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2762, 2067.500976, 2344.865234, -89.780799, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 3, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(3032, 2063.854492, 2343.771972, -87.776870, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18028, "cj_bar2", "GB_nastybar13", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2063.746093, 2342.966064, -86.919296, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15048, "labigsave", "ah_carp1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2063.953369, 2342.964111, -86.919296, 0.000000, 90.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15048, "labigsave", "ah_carp1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(18977, 2075.687011, 2351.721435, -88.760902, 0.000000, -30.000000, 337.646392, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 3524, "skullpillar", "pirateskull02_128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, 2071.619873, 2352.781738, -88.782333, 0.000000, -1.399999, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14654, "ab_trukstpe", "bbar_stuff1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2270, 2069.142822, 2352.784423, -88.534393, 0.000000, 0.000000, -0.100019, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 18028, "cj_bar2", "CJ_nastybar_D", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2270, 2069.853515, 2352.784179, -86.994407, 0.000000, 0.000000, -0.100019, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 18028, "cj_bar2", "CJ_nastybar_D2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19087, 2075.641601, 2338.000244, -85.473281, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3615, "beachhut", "sw_flatroof01", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2057.656982, 2353.378906, -82.437362, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 2056.157470, 2353.368896, -83.857345, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_panel_woodgrime", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2059.784667, 2346.265625, -87.797584, 0.000000, 90.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2059.764648, 2346.265625, -88.817588, 0.000000, 90.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2059.774658, 2350.835937, -87.797584, 0.000000, 90.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19439, 2059.774658, 2350.835937, -88.817543, 0.000000, 90.000000, 90.000000, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2345, 2073.171875, 2344.166992, -88.345245, 0.000000, 0.000000, -179.300109, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFCCCC00);
	tmpobjid = CreateDynamicObjectEx(2345, 2072.840087, 2344.231689, -88.345245, 0.000000, 0.000000, -179.300109, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFCCCC00);
	tmpobjid = CreateDynamicObjectEx(2345, 2067.081054, 2344.086181, -88.345245, 0.000000, 0.000000, -179.300109, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFCCCC00);
	tmpobjid = CreateDynamicObjectEx(2345, 2066.779785, 2344.141357, -88.345245, 0.000000, 0.000000, -179.300109, 120.00, 120.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFCCCC00);
	tmpobjid = CreateDynamicObjectEx(19329, 2079.226806, 2353.277832, -89.235893, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{262626} by  Kova", 120, "Ariel", 40, 1, 0x00000000, 0x00000000, 1);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObjectEx(1897, 2054.283691, 2358.718261, -90.403228, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1897, 2056.111083, 2358.742187, -90.403198, 0.000000, 0.000000, 180.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1897, 2057.956054, 2358.729492, -90.403198, 0.000000, 0.000000, 180.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1897, 2059.771972, 2358.728271, -90.403198, 0.000000, 0.000000, 180.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1897, 2061.591308, 2358.659912, -90.403198, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2525, 2057.040039, 2361.283203, -90.193099, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2525, 2054.825195, 2361.232910, -90.193099, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2525, 2058.801757, 2361.304931, -90.193099, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2528, 2061.192626, 2361.301025, -90.193252, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2518, 2059.918945, 2353.994384, -89.963493, 0.000000, 0.000000, 180.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2518, 2055.475341, 2353.985107, -89.963500, 0.000000, 0.000000, 180.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2518, 2057.056396, 2353.980957, -89.963500, 0.000000, 0.000000, 180.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2518, 2058.479003, 2353.966796, -89.963500, 0.000000, 0.000000, 180.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2671, 2055.859619, 2353.954101, -90.180274, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2779, 2066.386718, 2352.884765, -90.192878, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2779, 2065.597900, 2352.885253, -90.192878, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1515, 2064.827636, 2352.760498, -90.204696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2671, 2071.579833, 2345.239501, -90.190101, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2270, 2080.253662, 2351.604248, -87.688743, 0.000000, 0.000000, 270.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2077.670898, 2351.440429, -86.165496, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2073.396728, 2348.617919, -86.159500, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2069.011718, 2345.252929, -86.159500, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2064.362548, 2347.658935, -85.955490, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2064.369384, 2350.396972, -86.155487, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2068.967773, 2350.430175, -86.155487, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2073.358154, 2346.476074, -86.169502, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2073.362548, 2347.839599, -85.807296, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2068.943847, 2346.915283, -85.807296, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2068.980468, 2351.585205, -86.007293, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2064.374267, 2346.299560, -86.007293, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2064.369140, 2348.596435, -85.705299, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2077.749755, 2348.644287, -86.005287, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2077.687500, 2347.082275, -85.805297, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1517, 2073.401367, 2349.320800, -85.948860, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1517, 2068.985351, 2349.845947, -85.948860, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1517, 2068.966064, 2346.330566, -86.049858, 0.000000, 0.000000, 359.899993, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1517, 2064.354248, 2349.814208, -85.948860, 0.000000, 0.000000, 359.899993, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1517, 2077.754150, 2345.416259, -86.048858, 0.000000, 0.000000, 359.899993, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2077.727294, 2346.501953, -86.053703, 0.000000, 0.000000, 123.609703, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2073.362060, 2351.415771, -86.053703, 0.000000, 0.000000, 123.609703, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2068.994873, 2348.632080, -85.753707, 0.000000, 0.000000, 12233.609375, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2073.412109, 2345.417968, -86.054702, 0.000000, 0.000000, 122333.609375, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2077.720214, 2347.883544, -85.955497, 0.000000, 0.000000, 230.100006, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2068.958984, 2347.694091, -86.020683, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2064.336914, 2346.881835, -86.020683, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2064.407958, 2345.218994, -86.220680, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2064.373046, 2349.319091, -85.917671, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2064.379394, 2351.552490, -86.217666, 0.000000, 0.000000, 359.899993, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2069.009765, 2349.350585, -85.917671, 0.000000, 0.000000, 359.899993, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2073.386230, 2349.881103, -86.013702, -0.006000, 0.000000, 359.899993, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2073.335693, 2347.051757, -86.013702, -0.006000, 0.000000, 359.899993, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2077.745361, 2349.341308, -86.113700, -0.006000, 0.000000, 359.899993, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2077.691894, 2350.529052, -86.113700, -0.006000, 0.000000, 359.899993, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2077.751220, 2349.905517, -85.850692, 0.000000, 0.000000, 123.609703, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2073.365722, 2350.502441, -85.950691, 0.000000, 0.000000, 123.609703, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1893, 2075.221923, 2348.478271, -85.097702, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1893, 2070.780517, 2348.482177, -85.097702, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1893, 2066.238281, 2348.487060, -85.097740, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19450, 2085.584472, 2347.070068, -83.762298, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19450, 2077.705810, 2343.660156, -84.045402, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19450, 2082.899902, 2353.370605, -84.045402, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19450, 2058.451904, 2343.656982, -84.045402, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19450, 2068.076904, 2343.656005, -84.045402, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19450, 2067.289550, 2353.366943, -84.045402, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19450, 2057.713867, 2353.367431, -84.045402, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19450, 2082.361816, 2343.690673, -84.045402, 5.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19450, 2080.848144, 2351.630126, -83.349403, 5.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19450, 2080.848144, 2353.369873, -84.045402, -5.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19450, 2060.483886, 2348.779785, -83.645408, -5.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19450, 2060.479003, 2346.299316, -83.813400, 5.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19781, 2080.759033, 2347.991210, -87.721290, 90.000000, 90.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19781, 2080.750000, 2352.724853, -86.371833, 90.000000, 90.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2270, 2061.055175, 2350.755126, -87.257003, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2076.273437, 2351.672607, -88.789764, 0.000000, 0.000000, -18.799999, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2714, 2070.250244, 2351.982177, -86.148193, 0.000000, 0.000000, 33.099994, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2855, 2068.938964, 2352.591796, -88.974502, 0.000000, 0.000000, 324.167785, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(11710, 2082.300537, 2345.362304, -87.340591, 0.000000, 0.000000, 90.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(18977, 2077.543701, 2352.181152, -88.760902, 0.000000, -30.000000, 3337.646484, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2069.015625, 2352.106445, -88.683799, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2072.401611, 2353.066406, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2072.395263, 2353.204345, -88.493301, 0.000000, 0.000000, -127.259986, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2072.390380, 2352.922607, -88.493301, 0.000000, 0.000000, 23.339990, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2072.555175, 2353.067626, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2072.548828, 2353.205566, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2072.543945, 2352.923828, -88.493301, 0.000000, 0.000000, -19.559999, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2072.705810, 2353.207275, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2072.483642, 2353.073974, -87.991310, 0.000000, 0.000000, -59.159988, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2072.872314, 2353.071777, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2072.865966, 2353.209716, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2072.861083, 2352.927978, -88.493301, 0.000000, 0.000000, -38.580001, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2073.552978, 2353.071777, -87.502296, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2073.546630, 2353.209716, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2073.541748, 2352.927978, -87.498497, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2075.625488, 2353.066650, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2075.619140, 2353.204589, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2075.614257, 2352.922851, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2073.895263, 2353.070800, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2073.888916, 2353.208740, -88.493301, 0.000000, 0.000000, -0.059999, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2073.884033, 2352.927001, -88.493301, 0.000000, 0.000000, 0.479999, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2074.077392, 2353.069824, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2074.071044, 2353.207763, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2074.066162, 2352.926025, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2073.706787, 2353.209716, -87.499702, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2073.701904, 2352.927978, -88.493301, 0.000000, 0.000000, -2.460000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2075.261230, 2353.067626, -87.489501, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2075.254882, 2353.205566, -87.495796, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2075.250000, 2352.923828, -87.483200, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2075.443359, 2353.067138, -87.502029, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2075.437011, 2353.205078, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2075.432128, 2352.923339, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2073.012695, 2353.218261, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2073.010742, 2353.097412, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2072.623535, 2353.217285, -87.893699, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2073.164550, 2352.949707, -87.407341, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2073.110839, 2353.092529, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2073.162353, 2353.209472, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2073.252197, 2353.026855, -87.413497, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2073.337158, 2353.173339, -87.412101, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2073.403808, 2352.922363, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2074.218261, 2353.167236, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2074.224121, 2352.987060, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2074.322753, 2353.030761, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2074.446289, 2352.934814, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2074.376708, 2353.212890, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2074.520507, 2353.117431, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2074.308105, 2352.889648, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2074.567382, 2352.918212, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2074.618164, 2353.200439, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2074.663818, 2353.041503, -87.384483, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2074.747314, 2352.944091, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2074.780273, 2353.165771, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2074.887939, 2352.948974, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2075.823486, 2353.162597, -88.355796, 0.000000, 0.000000, -149.520050, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2075.771484, 2353.026123, -88.355796, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2075.824462, 2352.941162, -88.355796, 0.000000, 0.000000, -45.299999, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2076.047851, 2353.203857, -88.355796, 0.000000, 0.000000, -0.899999, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2076.005371, 2353.024169, -88.355796, 0.000000, 0.000000, 230.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2076.144042, 2352.902343, -88.355796, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2074.946533, 2353.160156, -87.344596, 0.000000, 0.000000, -44.580001, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2075.062255, 2352.977050, -87.347198, 0.000000, 0.000000, -22.079999, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2076.907958, 2353.210205, -88.355796, 0.000000, 0.000000, 173.478118, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2076.648925, 2353.040527, -88.493301, 0.000000, 0.000000, 351.467834, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2076.777832, 2353.050048, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2076.916748, 2352.952148, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2073.004394, 2352.957031, -87.417022, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2072.355957, 2353.166259, -87.893699, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2072.700927, 2352.925537, -88.493301, 0.000000, 0.000000, -31.200000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2072.346923, 2352.927734, -87.991302, 0.000000, 0.000000, 23.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2072.528076, 2352.939453, -87.893699, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19823, 2073.110839, 2353.198242, -88.033889, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19823, 2073.310546, 2353.182861, -88.033889, 0.000000, 0.000000, -3.359999, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19823, 2073.510742, 2353.147705, -88.033889, 0.000000, 0.000000, 23.819999, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19823, 2073.710937, 2353.191650, -88.033889, 0.000000, 0.000000, -13.140000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19823, 2073.909179, 2353.197021, -88.033889, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19823, 2074.109863, 2353.181640, -88.033889, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19824, 2072.376220, 2353.166259, -87.027900, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19824, 2072.592285, 2353.179687, -87.027900, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19824, 2072.454345, 2352.982177, -87.027900, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19824, 2073.254394, 2353.046386, -87.027900, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1517, 2073.070068, 2353.179687, -86.821296, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1517, 2073.070556, 2353.039550, -86.821296, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1517, 2073.070556, 2352.919433, -86.821296, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1517, 2073.293457, 2353.153320, -86.821296, 0.000000, 0.000000, 11.091279, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19820, 2073.430175, 2352.947998, -87.021629, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19820, 2073.515380, 2353.139160, -87.021629, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19820, 2073.732910, 2353.178955, -87.021629, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19824, 2075.573974, 2353.014404, -87.537261, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19824, 2075.881347, 2352.964355, -87.552696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2076.066162, 2353.041748, -87.555236, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2076.184570, 2353.098876, -87.549926, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2076.316894, 2352.915771, -87.019889, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2074.826416, 2353.182617, -87.019889, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2075.482910, 2353.161132, -88.063362, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19824, 2074.250488, 2352.994628, -87.555496, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19820, 2074.250488, 2353.145263, -87.021629, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2074.403076, 2353.072509, -87.566009, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2074.504638, 2353.130126, -87.560607, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2075.188720, 2352.943115, -88.053016, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19824, 2073.860839, 2353.045654, -87.027900, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19820, 2074.010253, 2353.152587, -87.021629, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1541, 2075.210205, 2352.241210, -88.644500, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1541, 2074.307373, 2352.239746, -88.644500, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19824, 2075.573974, 2353.014404, -87.027900, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19820, 2076.918457, 2352.968017, -87.561599, 0.000000, 0.000000, 19.677000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19820, 2075.897216, 2353.114746, -87.021629, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19824, 2075.881347, 2352.964355, -87.027900, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2076.184570, 2353.098876, -87.019889, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2076.066162, 2353.041748, -87.019889, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2075.325439, 2353.124267, -88.065803, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2074.886474, 2352.949462, -88.060302, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19824, 2074.250488, 2352.994628, -87.027900, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2075.062255, 2352.977050, -88.355796, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2075.250000, 2352.923828, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2075.261230, 2353.067626, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2075.254882, 2353.205566, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2075.443359, 2353.067138, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2074.663818, 2353.041503, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2074.946533, 2353.160156, -88.355796, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2074.620361, 2352.947021, -87.019889, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2074.645751, 2353.166992, -87.019889, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2074.504638, 2353.130126, -87.019889, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2074.403076, 2353.072509, -87.019889, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2074.504638, 2353.130126, -88.065803, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2074.620361, 2352.947021, -88.053016, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2074.645751, 2353.166992, -88.063362, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2074.403076, 2353.072509, -88.060302, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2074.917236, 2353.127197, -88.065803, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2075.036865, 2352.944091, -88.053016, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2075.066406, 2353.164062, -88.063362, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2074.827880, 2353.069580, -88.060302, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19823, 2075.492431, 2353.021972, -88.033889, 0.000000, 0.000000, -26.520000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19823, 2075.811035, 2353.147216, -88.033889, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19823, 2075.734130, 2352.945800, -88.033889, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19820, 2075.741210, 2353.120605, -87.021629, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1544, 2076.723388, 2353.151611, -87.549926, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1512, 2076.742919, 2352.999511, -87.347198, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2073.706787, 2353.209716, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2073.541748, 2352.927978, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2073.252197, 2353.026855, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2073.337158, 2353.173339, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1520, 2073.552978, 2353.071777, -88.493301, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2073.004394, 2352.957031, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1486, 2073.164550, 2352.949707, -88.385696, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19087, 2069.944091, 2351.797851, -83.449661, 0.000000, 0.000000, 27.699993, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19087, 2070.523681, 2352.179443, -83.449684, 0.000000, 0.000000, 27.699993, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1744, 2067.332763, 2343.583007, -88.445205, 0.000000, 0.000000, 179.999984, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(1744, 2073.554687, 2343.583007, -88.445205, 0.000000, 0.000000, 179.999984, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2671, 2065.479003, 2352.383544, -90.190101, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2779, 2064.011718, 2352.882324, -90.192878, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2671, 2055.859619, 2361.508544, -90.180274, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(2671, 2059.611572, 2361.508544, -90.180274, 0.000000, 0.000000, 0.000000, 120.00, 120.00);
	tmpobjid = CreateDynamicObjectEx(19314, 2060.674804, 2348.508300, -85.834991, 89.099983, 1.200001, 0.000000, 120.00, 120.00);

	// College exterior 
	// ointerior = 0,vw = 0;
	// tmpobjid = CreateDynamicObject(6965, 1088.553466, 1073.973144, 13.385938, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18765, 1084.883422, 1074.103759, 7.765939, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 3947, "rczero_track", "waterclear256", 0);
	// tmpobjid = CreateDynamicObject(18765, 1092.414428, 1074.103759, 7.765939, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 3947, "rczero_track", "waterclear256", 0);
	// tmpobjid = CreateDynamicObject(18765, 1087.208251, 1070.501953, 7.765939, 0.000000, 0.000000, -21.900009, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 3947, "rczero_track", "waterclear256", 0);
	// tmpobjid = CreateDynamicObject(18765, 1090.934936, 1071.070434, 7.765939, 0.000000, 0.000000, -48.499988, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 3947, "rczero_track", "waterclear256", 0);
	// tmpobjid = CreateDynamicObject(18765, 1087.368530, 1077.356445, 7.765939, 0.000000, 0.000000, -66.400009, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 3947, "rczero_track", "waterclear256", 0);
	// tmpobjid = CreateDynamicObject(18766, 1101.536865, 785.745910, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	// tmpobjid = CreateDynamicObject(18766, 1098.096435, 789.343750, 9.390296, 90.000000, -15.300000, 135.000000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	// tmpobjid = CreateDynamicObject(18766, 1098.014160, 782.195251, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	// tmpobjid = CreateDynamicObject(18766, 1094.657348, 787.382507, 9.400593, 90.000000, -15.300000, 135.000000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	// tmpobjid = CreateDynamicObject(690, 1089.706054, 778.186889, 3.860310, 0.000000, 0.000000, -91.800056, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18765, 1090.754150, 1077.064453, 7.765939, 0.000000, 0.000000, -123.500000, vw, ointerior);
	// SetDynamicObjectMaterial(tmpobjid, 0, 3947, "rczero_track", "waterclear256", 0);
	// tmpobjid = CreateDynamicObject(870, 1096.824707, 1081.977050, 10.045935, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1094.955322, 1083.427612, 10.045935, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1092.885253, 1084.537109, 10.045935, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1090.844848, 1085.547241, 10.045935, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1089.015258, 1085.507202, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1086.619506, 1085.544433, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1084.023315, 1084.432128, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1081.333129, 1083.389038, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1079.433227, 1081.238403, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1078.144775, 1078.976318, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1077.520263, 1076.635253, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1076.933715, 1074.056152, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1077.115722, 1071.636840, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1077.630249, 1069.077148, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1078.918701, 1067.159545, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1080.151611, 1065.289428, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1082.437866, 1063.982055, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1085.020019, 1062.773925, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1087.562744, 1062.677734, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1090.043701, 1062.840576, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1092.362060, 1063.299560, 10.045935, 0.000000, 0.000000, -42.300018, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1094.455322, 1064.396728, 10.045935, 0.000000, 0.000000, -42.300018, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1096.595214, 1065.865844, 10.045935, 0.000000, 0.000000, -22.700029, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1098.304931, 1067.828247, 10.045935, 0.000000, 0.000000, -22.700029, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1099.377563, 1070.393066, 10.045935, 0.000000, 0.000000, 8.499968, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1099.928344, 1072.931762, 10.045935, 0.000000, 0.000000, 8.499968, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1099.838745, 1075.829467, 10.045935, 0.000000, 0.000000, 8.499968, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1099.121826, 1078.866455, 10.045935, 0.000000, 0.000000, 8.499968, vw, ointerior);
	// tmpobjid = CreateDynamicObject(870, 1098.020141, 1080.623046, 10.045935, 0.000000, 0.000000, 8.499968, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 1087.218627, 1039.695922, 6.440713, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 1056.169433, 1078.708251, 9.328316, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 1091.329345, 1108.658447, 8.698314, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(690, 1122.369628, 1071.447753, 8.368314, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1280, 1068.229858, 1052.453857, 9.653434, 0.000000, 0.000000, -51.599998, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1280, 1062.530639, 1059.650756, 9.653434, 0.000000, 0.000000, 129.399993, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18720, 1086.687255, 1072.718261, 14.275943, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18720, 1090.027343, 1073.208374, 14.275943, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(18720, 1088.176513, 1075.838256, 14.275943, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(715, 1073.070068, 1042.691528, 17.415582, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(715, 1065.930175, 1033.691650, 17.415582, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(715, 1110.961914, 1110.320556, 17.486774, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(715, 1104.481811, 1104.440673, 17.346773, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(11245, 1042.233276, 1027.520629, 19.359703, 0.000000, 0.000000, 63.499977, vw, ointerior);
	// tmpobjid = CreateDynamicObject(11245, 1052.511840, 1025.531372, 19.359703, 0.000000, 0.000000, 55.799983, vw, ointerior);
	// tmpobjid = CreateDynamicObject(11245, 1060.148437, 1014.389282, 19.359703, 0.000000, 0.000000, 18.699979, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1231, 1111.737304, 1052.094360, 10.425033, 0.000000, 0.000000, -30.399999, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1231, 1105.483642, 1044.991943, 10.385033, 0.000000, 0.000000, -52.200000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1231, 1062.535400, 1047.923950, 10.403428, 0.000000, 0.699998, 46.500003, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1231, 1055.840454, 1054.277465, 10.403428, 0.000000, 0.699998, 33.199996, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1231, 1063.712402, 1097.673950, 10.423437, 0.000000, 0.000000, -42.500000, vw, ointerior);
	// tmpobjid = CreateDynamicObject(1231, 1070.442871, 1103.984252, 10.423437, 0.000000, 0.000000, -56.799991, vw, ointerior);
	// tmpobjid = CreateDynamicObject(12959, 1148.764404, 1166.690551, 9.990324, 0.000000, 0.000000, -179.999893, vw, ointerior);
	// tmpobjid = CreateDynamicObject(9697, 980.443542, 1105.826049, 9.860318, 0.000000, 0.000000, 89.799972, vw, ointerior);

	// Haunted bridge 

	ointerior = 0,vw = 0;
	tmpobjid = CreateDynamicObject(11698, -894.052978, 2170.431884, 99.288848, 3.499998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -892.146301, 2172.729248, 99.471343, 3.499998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -890.233703, 2175.032470, 99.654449, 3.499998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -888.334228, 2177.319091, 99.836334, 3.499998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -886.431030, 2179.610839, 100.068611, 5.399998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -884.542114, 2181.886718, 100.348121, 5.399998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -882.646972, 2184.169433, 100.628547, 5.399998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -880.751770, 2186.452392, 100.909011, 5.399998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -878.862426, 2188.729248, 101.188560, 5.399998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -876.973388, 2191.003173, 101.468048, 5.399998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -875.071716, 2193.291992, 101.749412, 5.399998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -873.182800, 2195.566894, 102.028923, 5.399998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -871.281616, 2197.855712, 102.310279, 5.399998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -869.379882, 2200.145263, 102.591682, 5.399998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -867.472106, 2202.443115, 102.873992, 5.399998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -865.570190, 2204.731445, 103.155342, 5.399998, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -863.667114, 2207.023925, 103.497177, 7.799996, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -861.775573, 2209.305664, 103.902946, 7.799996, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -859.883483, 2211.584472, 104.308692, 7.799996, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -857.997802, 2213.855224, 104.713157, 7.799996, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -856.111816, 2216.126953, 105.117607, 7.799996, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -854.219604, 2218.406738, 105.523361, 7.799996, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -852.333801, 2220.679443, 105.927810, 7.799996, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -850.451171, 2222.945068, 106.412239, 10.800000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -848.575500, 2225.204833, 106.972511, 10.800000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -846.699584, 2227.464599, 107.532760, 10.800000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -844.829589, 2229.718505, 108.091163, 10.800000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -842.947326, 2231.988525, 108.653259, 10.800000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -841.065307, 2234.256591, 109.215377, 10.800000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -839.219116, 2236.481933, 109.837989, 13.600005, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -837.362670, 2238.718261, 110.541069, 13.600005, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -835.512817, 2240.945312, 111.241798, 13.600005, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -833.656616, 2243.181396, 111.944892, 13.600005, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -831.788330, 2245.430908, 112.652671, 13.600005, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -829.932128, 2247.666992, 113.355697, 13.600005, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -828.075805, 2249.902343, 114.058792, 13.600005, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -826.219482, 2252.137939, 114.761878, 13.600005, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -824.369812, 2254.366455, 115.462608, 13.600005, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -822.507324, 2256.608886, 116.168052, 13.600005, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -820.651611, 2258.844238, 116.871093, 13.600005, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11697, -814.576171, 2266.403320, 117.470642, 8.899999, 0.000000, 142.000015, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -818.832824, 2261.033935, 117.446937, 9.400008, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -817.070312, 2263.161132, 117.631866, -1.699991, 0.000000, -39.699989, vw, ointerior);

	// Haunted House
	ointerior = 0,vw = 0;
	tmpobjid = CreateDynamicObject(690, -1008.138000, 1992.616210, 112.166557, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12954, "sw_furniture", "CJ_WOOD5", 0);
	tmpobjid = CreateDynamicObject(690, -993.828491, 1972.346069, 112.166557, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12954, "sw_furniture", "CJ_WOOD5", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 948, "plants_officeext", "newtreeleavesb128", 0);
	tmpobjid = CreateDynamicObject(690, -993.828491, 1988.556152, 112.166557, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12954, "sw_furniture", "CJ_WOOD5", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 948, "plants_officeext", "newtreeleavesb128", 0);
	tmpobjid = CreateDynamicObject(690, -1049.418945, 1992.548339, 120.996162, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12954, "sw_furniture", "CJ_WOOD5", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 948, "plants_officeext", "newtreeleavesb128", 0);
	tmpobjid = CreateDynamicObject(690, -1037.482055, 1972.728759, 119.879516, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12954, "sw_furniture", "CJ_WOOD5", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 948, "plants_officeext", "newtreeleavesb128", 0);
	tmpobjid = CreateDynamicObject(690, -1014.242004, 1961.928710, 117.049530, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12954, "sw_furniture", "CJ_WOOD5", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 948, "plants_officeext", "newtreeleavesb128", 0);
	tmpobjid = CreateDynamicObject(690, -1017.960021, 2007.703735, 108.251838, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12954, "sw_furniture", "CJ_WOOD5", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 948, "plants_officeext", "newtreeleavesb128", 0);
	tmpobjid = CreateDynamicObject(690, -1038.199951, 2007.703735, 108.251838, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12954, "sw_furniture", "CJ_WOOD5", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 948, "plants_officeext", "newtreeleavesb128", 0);
	tmpobjid = CreateDynamicObject(841, -1020.418029, 1993.876953, 119.783660, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18688, -1020.414978, 1993.895507, 118.642860, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1706, -1019.729980, 1991.483154, 119.807991, 0.000000, -2.200000, -176.399902, vw, ointerior);
	tmpobjid = CreateDynamicObject(12937, -1027.171997, 1985.398071, 123.190132, 0.000000, -2.599998, 170.499954, vw, ointerior);
	tmpobjid = CreateDynamicObject(847, -1029.078979, 1994.198730, 122.460350, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19088, -1029.663940, 1994.675415, 124.308311, -8.800000, 11.499998, 173.999984, vw, ointerior);
	tmpobjid = CreateDynamicObject(11697, -973.339721, 2075.014892, 98.936836, 0.000000, 0.000000, -40.099979, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -970.280090, 2078.619384, 98.554252, 0.000000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -968.376586, 2080.911132, 98.554252, 0.000000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -966.466613, 2083.212158, 98.554252, 0.000000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -964.556823, 2085.510986, 98.554252, 0.000000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -962.646728, 2087.813476, 98.554252, 0.000000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -960.730712, 2090.120361, 98.554252, 0.000000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -958.820983, 2092.420654, 98.554252, 0.000000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -956.911071, 2094.721679, 98.554252, 0.000000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(11698, -955.001525, 2097.021240, 98.554252, 0.000000, 0.000000, -39.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(12961, -1007.986999, 1978.806030, 119.495788, -1.199998, 3.699999, -15.499979, vw, ointerior);
	tmpobjid = CreateDynamicObject(13360, -1024.280029, 1988.072265, 122.106117, 0.000000, 3.200001, -7.799996, vw, ointerior);
	tmpobjid = CreateDynamicObject(12986, -1036.762939, 1990.353027, 122.333160, 0.000000, 0.000000, 69.699996, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 18229, "woodycs_t", "fence1", 0);
	// Lab interior
	ointerior = 45,vw = -1;
	tmpobjid = CreateDynamicObject(2951, 300.532623, 312.027801, 998.157958, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14455, 300.236053, 299.995483, 999.899047, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14455, 298.188537, 307.903656, 999.899047, 0.000000, 0.000000, -90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14455, 305.938537, 303.553710, 999.899047, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19527, 302.220581, 304.714630, 998.548706, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3929, 302.871887, 304.562408, 998.408203, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3929, 301.622070, 304.522399, 998.438293, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3929, 302.229125, 305.247131, 998.298400, 0.000000, 0.000000, -78.199989, vw, ointerior);
	tmpobjid = CreateDynamicObject(3929, 302.351593, 304.074340, 998.358459, 0.000000, 0.000000, 135.899963, vw, ointerior);
	tmpobjid = CreateDynamicObject(19632, 302.190521, 304.665344, 998.188293, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(841, 303.571441, 307.901947, 998.198608, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(841, 299.851409, 302.072021, 998.198608, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(841, 299.851409, 306.042053, 998.198608, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(841, 304.481506, 302.471984, 998.198608, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3383, 304.209747, 310.012786, 998.058227, 0.000000, 0.000000, 131.000030, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 16150, "ufo_bar", "sa_wood07_128", 0);
	tmpobjid = CreateDynamicObject(1580, 303.342285, 311.002319, 999.078552, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2866, 304.887725, 309.189056, 999.098388, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19345, 304.233703, 309.914672, 999.258422, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19636, 303.781341, 310.380676, 999.108398, 0.000000, 0.000000, -64.199989, vw, ointerior);
	tmpobjid = CreateDynamicObject(18689, 302.141265, 304.449310, 998.057678, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2690, 298.346801, 309.666046, 1000.268371, 0.000000, 0.000000, 72.000030, vw, ointerior);
	tmpobjid = CreateDynamicObject(2690, 298.321807, 309.984741, 1000.268371, 0.000000, 0.000000, 90.199981, vw, ointerior);
	tmpobjid = CreateDynamicObject(3041, 302.218231, 301.867797, 998.118469, 0.000000, 0.000000, -0.100000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19916, 301.758483, 311.746978, 998.198303, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19375, 301.645080, 307.344879, 998.078613, 0.000000, 90.000007, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19375, 301.645080, 297.714996, 998.078613, 0.000000, 90.000007, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19375, 301.305084, 307.344879, 1002.218688, 0.000000, 90.000007, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19375, 301.305084, 297.715026, 1002.218688, 0.000000, 90.000007, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(18765, 311.183502, 307.008605, 999.674804, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18765, 311.183502, 297.008697, 999.674804, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18765, 301.343414, 295.038635, 999.674804, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18765, 293.243347, 305.038574, 999.674804, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18765, 293.243347, 315.038513, 999.674804, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18765, 301.183471, 316.978576, 999.674804, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19893, 273.796142, 305.035186, 999.098388, 0.000000, 0.000000, -90.800071, vw, ointerior);
	tmpobjid = CreateDynamicObject(2190, 274.082702, 305.416473, 999.095703, 0.000000, 0.000000, -75.699996, vw, ointerior);
	tmpobjid = CreateDynamicObject(2190, 273.871856, 304.184082, 999.095703, 0.000000, 0.000000, -142.899902, vw, ointerior);
	tmpobjid = CreateDynamicObject(19786, 274.349243, 304.918640, 1000.486083, 0.000000, 0.000000, -90.099967, vw, ointerior);
	tmpobjid = CreateDynamicObject(3111, 272.644989, 303.021606, 999.954345, -90.800003, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1962, 274.202667, 305.011566, 999.435852, 0.000000, 0.000000, 89.700027, vw, ointerior);
	tmpobjid = CreateDynamicObject(2198, 272.066619, 308.355621, 998.185974, 0.000000, 0.000000, -45.099998, vw, ointerior);
	tmpobjid = CreateDynamicObject(19999, 271.516448, 306.698242, 998.305297, 0.000000, 0.000000, 134.699951, vw, ointerior);
	tmpobjid = CreateDynamicObject(3061, 284.505676, 309.598175, 1003.390625, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19375, 284.624237, 309.649627, 1003.390625, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 16150, "ufo_bar", "des_ghotwood1", 0);
	tmpobjid = CreateDynamicObject(1812, 281.872253, 310.425384, 1002.410217, 0.000000, 0.000000, 88.599922, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8463, "vgseland", "triadcarpet", 0);
	tmpobjid = CreateDynamicObject(1736, 279.704071, 310.391418, 1004.390625, 0.000000, 0.000000, 87.899971, vw, ointerior);
	tmpobjid = CreateDynamicObject(2273, 279.852691, 309.095458, 1003.690673, 0.000000, 0.000000, 89.899993, vw, ointerior);
	tmpobjid = CreateDynamicObject(2846, 278.962249, 309.060913, 1003.350524, 0.000000, 0.000000, -51.999980, vw, ointerior);
	tmpobjid = CreateDynamicObject(3785, 281.999786, 306.749664, 1005.296813, -0.199999, 16.800003, 87.300010, vw, ointerior);
	tmpobjid = CreateDynamicObject(1828, 283.106170, 309.170013, 1002.400512, 0.000000, 0.000000, 64.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(2307, 283.120910, 308.593933, 1002.410522, 0.000000, 0.000000, -89.699958, vw, ointerior);
	tmpobjid = CreateDynamicObject(2394, 284.298492, 308.043853, 1004.201110, 0.000000, 0.000000, -88.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2047, 281.438873, 310.836669, 1004.510620, 0.000000, -1.999999, -2.200000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 9593, "hosbibalsfw", "dt_cops_US_flag", 0);
	tmpobjid = CreateDynamicObject(1343, 281.867431, 306.796020, 1001.810485, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 17009, "truth_farm", "des_ghotwood1", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 17009, "truth_farm", "des_ghotwood1", 0);
	tmpobjid = CreateDynamicObject(19375, 285.092773, 307.832244, 999.148437, -89.900032, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 17009, "truth_farm", "des_ghotwood1", 0);
	// Library interior 
	ointerior = 115,vw = -1;
	tmpobjid = CreateDynamicObject(19377, 1083.588745, -49.654998, 1021.859619, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(18765, 1031.740966, -63.071205, 1001.173828, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", -3112917);
	tmpobjid = CreateDynamicObject(18765, 1021.751586, -63.071205, 1001.173828, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", -3112917);
	tmpobjid = CreateDynamicObject(18765, 1021.751586, -53.091117, 1001.173828, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", -3112917);
	tmpobjid = CreateDynamicObject(18765, 1031.750366, -53.091117, 1001.173828, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13002, "sw_smlfarm", "des_woodslats2", -3112917);
	tmpobjid = CreateDynamicObject(18981, 1037.238037, -58.592269, 1004.673828, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8555, "vgsdwntwn2", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(18981, 1016.268920, -58.592269, 1004.673828, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8555, "vgsdwntwn2", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(18981, 1027.589233, -47.632175, 1004.673828, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8555, "vgsdwntwn2", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(18981, 1027.589233, -68.552078, 1004.673828, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8555, "vgsdwntwn2", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(18981, 1044.829956, -64.902572, 1001.179626, 0.000000, 57.900001, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12959, "sw_library", "sw_stairs1", 0);
	tmpobjid = CreateDynamicObject(18981, 1032.378662, -58.506256, 991.016845, 32.100002, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8555, "vgsdwntwn2", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(18981, 1032.368652, -42.076328, 995.727722, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8555, "vgsdwntwn2", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(18981, 1044.829956, -42.079303, 1007.857177, 0.000000, 89.500007, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8482, "csrspalace02", "marble01_128", 0);
	tmpobjid = CreateDynamicObject(18981, 1019.840698, -42.079303, 1007.857177, 0.000000, 89.500007, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8482, "csrspalace02", "marble01_128", 0);
	tmpobjid = CreateDynamicObject(19378, 1031.972900, -56.498073, 1002.132385, 31.300008, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3945, "bistro_alpha", "creme128", 0);
	tmpobjid = CreateDynamicObject(3499, 1031.327758, -55.143863, 1003.639648, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8555, "vgsdwntwn2", "marbletilewal1_256", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 8555, "vgsdwntwn2", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19439, 1029.890869, -54.678501, 1008.284362, 90.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3945, "bistro_alpha", "creme128", 0);
	tmpobjid = CreateDynamicObject(19439, 1026.390625, -54.678501, 1008.284362, 90.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3945, "bistro_alpha", "creme128", 0);
	tmpobjid = CreateDynamicObject(19439, 1022.890380, -54.678501, 1008.284362, 90.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3945, "bistro_alpha", "creme128", 0);
	tmpobjid = CreateDynamicObject(19439, 1019.400451, -54.678501, 1008.284362, 90.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3945, "bistro_alpha", "creme128", 0);
	tmpobjid = CreateDynamicObject(19439, 1015.910644, -54.678501, 1008.284362, 90.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3945, "bistro_alpha", "creme128", 0);
	tmpobjid = CreateDynamicObject(18981, 1027.547851, -58.544582, 1012.424194, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "DinerFloor", 0);
	tmpobjid = CreateDynamicObject(18766, 1024.025634, -62.202583, 1004.673828, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 16150, "ufo_bar", "sa_wood08_128", 0);
	tmpobjid = CreateDynamicObject(18766, 1024.025634, -58.162578, 1004.673828, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 16150, "ufo_bar", "sa_wood08_128", 0);
	tmpobjid = CreateDynamicObject(14455, 1024.021972, -61.714275, 1005.364440, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14455, 1019.671203, -61.714275, 1005.364440, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14455, 1024.030761, -62.664257, 1005.364440, 0.000000, 0.000000, 180.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14455, 1028.361083, -62.664257, 1005.364440, 0.000000, 0.000000, 180.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1522, 1036.379882, -68.099723, 1003.633544, 0.000000, 0.000000, 179.799835, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 11450, "des_nwtown", "des_woodshopdoor1", 0);
	tmpobjid = CreateDynamicObject(1522, 1034.881958, -68.099487, 1003.633544, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 11450, "des_nwtown", "des_woodshopdoor1", 0);
	tmpobjid = CreateDynamicObject(11711, 1034.856201, -68.004371, 1006.483886, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(16779, 1027.695556, -59.058353, 1012.014587, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14455, 1024.030761, -58.604248, 1005.364440, 0.000000, 0.000000, 180.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14455, 1028.369873, -58.604248, 1005.364440, 0.000000, 0.000000, 180.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14455, 1019.671203, -57.714244, 1005.364440, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14455, 1024.032226, -57.714244, 1005.364440, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19806, 1032.801391, -64.187301, 1011.864440, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19806, 1021.401245, -64.187301, 1011.864440, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19806, 1021.401245, -51.457317, 1011.864440, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19354, 1030.382812, -61.757781, 1003.033691, 0.000000, 0.000000, -89.999961, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble", 0);
	tmpobjid = CreateDynamicObject(19367, 1029.011230, -68.106079, 1005.954040, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6522, "cuntclub_law2", "marinawindow1_256", 0);
	tmpobjid = CreateDynamicObject(19367, 1024.301391, -68.106079, 1005.954040, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6522, "cuntclub_law2", "marinawindow1_256", 0);
	tmpobjid = CreateDynamicObject(19367, 1019.661193, -68.106079, 1005.954040, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6522, "cuntclub_law2", "marinawindow1_256", 0);
	tmpobjid = CreateDynamicObject(19434, 1031.367187, -68.138816, 1005.934082, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1250, "smashbarr", "redstuff", 0);
	tmpobjid = CreateDynamicObject(19434, 1026.646606, -68.138816, 1005.934082, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1250, "smashbarr", "redstuff", 0);
	tmpobjid = CreateDynamicObject(19434, 1021.996582, -68.138816, 1005.934082, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1250, "smashbarr", "redstuff", 0);
	tmpobjid = CreateDynamicObject(19434, 1017.476806, -68.138816, 1005.934082, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1250, "smashbarr", "redstuff", 0);
	tmpobjid = CreateDynamicObject(2637, 1028.193847, -53.395370, 1008.685058, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2637, 1024.994384, -53.395370, 1008.685058, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2637, 1021.874450, -53.395370, 1008.685058, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2637, 1019.124206, -53.395370, 1008.685058, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2310, 1029.728881, -53.736030, 1008.750366, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2310, 1029.728881, -52.976047, 1008.750366, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2310, 1026.378295, -52.976047, 1008.750366, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2310, 1026.378295, -53.896041, 1008.750366, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2310, 1023.298034, -53.896041, 1008.750366, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2310, 1023.298034, -52.946052, 1008.750366, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2310, 1017.548278, -52.964363, 1008.750366, 0.000000, 0.000000, -176.499954, vw, ointerior);
	tmpobjid = CreateDynamicObject(2310, 1017.615417, -54.062347, 1008.750366, 0.000000, 0.000000, -176.499954, vw, ointerior);
	tmpobjid = CreateDynamicObject(19893, 1028.235229, -53.351276, 1009.108825, 0.000000, 0.000000, 89.499946, vw, ointerior);
	tmpobjid = CreateDynamicObject(19893, 1025.014526, -53.323139, 1009.108825, 0.000000, 0.000000, 89.499946, vw, ointerior);
	tmpobjid = CreateDynamicObject(19893, 1021.884643, -53.295814, 1009.108825, 0.000000, 0.000000, 89.499946, vw, ointerior);
	tmpobjid = CreateDynamicObject(19893, 1019.054382, -53.291095, 1009.108825, 0.000000, 0.000000, -89.800079, vw, ointerior);
	tmpobjid = CreateDynamicObject(1670, 1019.066528, -53.816856, 1009.135620, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2342, 1021.848815, -52.805133, 1009.241333, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2221, 1021.817321, -53.942821, 1009.182922, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2814, 1024.932128, -53.956302, 1009.101257, 0.000000, 0.000000, -148.900009, vw, ointerior);
	tmpobjid = CreateDynamicObject(1670, 1025.044677, -52.719795, 1009.141113, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19447, 1025.813842, -48.049774, 1010.126647, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12925, "sw_sheds", "sw_shedwindow1", 0);
	tmpobjid = CreateDynamicObject(14455, 1035.902709, -48.069602, 1010.030212, 0.000000, 0.000000, 179.999938, vw, ointerior);
	tmpobjid = CreateDynamicObject(14455, 1020.342163, -48.069602, 1010.030212, 0.000000, 0.000000, 179.999938, vw, ointerior);
	tmpobjid = CreateDynamicObject(19354, 1031.913208, -60.237781, 1003.043701, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble", 0);
	tmpobjid = CreateDynamicObject(2626, 1030.516357, -61.244510, 1004.123596, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2221, 1030.874267, -61.238967, 1004.723876, 0.000000, 0.000000, -90.899971, vw, ointerior);
	tmpobjid = CreateDynamicObject(1714, 1030.503540, -59.640991, 1003.653808, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2608, 1018.491577, -48.371967, 1005.464050, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2161, 1020.753051, -48.131652, 1004.773925, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1742, 1023.223144, -47.999279, 1003.693542, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2608, 1026.463989, -48.120811, 1005.434448, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2161, 1029.364379, -48.131652, 1004.773925, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1703, 1028.974243, -52.889732, 1003.554138, 0.000000, 0.000000, 90.399917, vw, ointerior);
	tmpobjid = CreateDynamicObject(19786, 1031.998168, -51.893066, 1005.323974, 0.000000, 0.000000, -90.000015, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 1, 1515, "dsfs", "CJ_POKERSCREEN", 0);
	tmpobjid = CreateDynamicObject(1827, 1030.698364, -51.891174, 1003.653320, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2800, 1030.653930, -51.858310, 1003.903686, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2715, 1036.748291, -65.047698, 1005.363891, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2646, 1036.742797, -61.612018, 1006.254150, 0.000000, 0.000000, -90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2729, 1036.694946, -58.303825, 1007.959411, 0.000000, 0.000000, -90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19172, 1036.718383, -51.275646, 1010.207397, 0.000000, 0.000000, -90.300003, vw, ointerior);
	tmpobjid = CreateDynamicObject(1825, 1029.286743, -66.802055, 1003.623474, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1825, 1024.506958, -66.802055, 1003.623474, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1825, 1019.966735, -66.802055, 1003.623474, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2161, 1016.757690, -53.696582, 1004.204101, 0.000000, 0.000000, 89.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(2161, 1016.757690, -53.696582, 1005.523986, 0.000000, 0.000000, 89.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(2161, 1016.753173, -55.016582, 1004.893859, 0.000000, 0.000000, 89.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(2161, 1016.762451, -52.366600, 1004.893859, 0.000000, 0.000000, 89.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(19377, 1073.483642, -49.644989, 1019.074829, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1083.588745, -59.285018, 1021.859619, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1073.464721, -59.285018, 1019.071289, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1073.464721, -40.025009, 1019.071289, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1083.580444, -40.025009, 1021.858215, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1093.656860, -40.025009, 1024.633056, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1093.695556, -49.665000, 1024.643920, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(19377, 1093.695556, -59.274990, 1024.643920, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 4101, "stapl", "sl_sfngrass01", 0);
	tmpobjid = CreateDynamicObject(18228, 1086.917968, -22.785240, 1019.285278, 0.000000, 0.000000, -43.699989, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1056.734252, -34.558780, 1019.285278, 0.000000, 0.000000, 25.400005, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1054.321655, -70.038101, 1019.285278, 0.000000, 10.600000, 106.600028, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1065.834716, -54.213939, 1059.551147, 38.199989, 0.000000, 97.400001, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1096.624145, -77.281227, 1020.903320, 0.999998, -17.999990, 172.499954, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1107.117309, -52.976711, 1022.219909, 0.999998, 17.300003, -150.300003, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1073.789550, -49.702121, 1047.674560, 0.600000, 166.100006, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1081.912353, -69.792297, 1041.857055, 0.600000, 172.999984, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1092.364868, -51.728511, 1046.069702, -34.199989, 174.799972, 98.700004, vw, ointerior);
	tmpobjid = CreateDynamicObject(18228, 1086.525024, -32.653858, 1037.292968, -15.999979, 174.799972, -133.999893, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1056.973876, -52.288318, 1018.394897, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19377, 1063.369262, -54.664989, 1016.289123, 0.000000, 74.600013, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10386, "mountainsfs", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19088, 1058.750244, -47.229160, 1035.066040, 0.599999, 1.500000, 32.399993, vw, ointerior);
	tmpobjid = CreateDynamicObject(2908, 1058.806030, -47.574638, 1032.280517, -81.200012, -92.400009, 26.100006, vw, ointerior);
	tmpobjid = CreateDynamicObject(2907, 1058.752441, -47.368408, 1031.797607, -112.000000, 0.000000, -160.399902, vw, ointerior);
	tmpobjid = CreateDynamicObject(2905, 1058.630737, -47.346538, 1031.127929, -92.099990, -1.899999, 115.099990, vw, ointerior);
	tmpobjid = CreateDynamicObject(2905, 1058.808959, -47.255809, 1031.135253, -92.099990, -1.899999, 115.099990, vw, ointerior);
	tmpobjid = CreateDynamicObject(2906, 1058.523925, -47.513378, 1031.904663, -109.300003, 43.699977, -67.099990, vw, ointerior);
	tmpobjid = CreateDynamicObject(2051, 1057.729248, -52.515781, 1030.433715, 0.000000, 0.000000, 111.399986, vw, ointerior);
	tmpobjid = CreateDynamicObject(2050, 1051.420654, -48.836200, 1031.644165, 0.000000, 0.000000, 78.699958, vw, ointerior);
	tmpobjid = CreateDynamicObject(3799, 1057.863525, -49.736400, 1027.450317, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3092, 1057.965576, -49.790660, 1029.921142, 89.100006, 0.000000, -87.800041, vw, ointerior);
	tmpobjid = CreateDynamicObject(19836, 1058.349731, -50.673580, 1029.809936, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19836, 1057.329345, -49.083591, 1029.809936, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19836, 1058.790039, -49.083591, 1029.809936, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19836, 1056.859619, -50.773540, 1029.809936, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19836, 1058.020629, -48.673568, 1029.809936, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(335, 1057.273803, -49.905441, 1030.298950, 0.000000, -173.899902, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19590, 1058.333129, -52.304550, 1030.334716, 0.000000, 0.000000, -72.099998, vw, ointerior);
	tmpobjid = CreateDynamicObject(841, 1057.944335, -49.758140, 1029.849975, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18689, 1057.598632, -50.142181, 1028.484130, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(841, 1074.718872, -49.736038, 1019.611206, 0.000000, -14.299989, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18688, 1074.717041, -49.960529, 1018.314392, 0.000000, -5.099998, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(846, 1073.322631, -53.659538, 1019.329528, 15.899997, 0.000000, -89.800010, vw, ointerior);
	tmpobjid = CreateDynamicObject(846, 1073.351318, -46.361999, 1019.329528, -12.099989, 0.000000, 84.699966, vw, ointerior);
	tmpobjid = CreateDynamicObject(843, 1078.025268, -50.411201, 1020.544372, 19.500001, 0.000000, -87.799980, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 1071.337402, -51.896991, 1018.450805, 0.000000, -20.799989, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 1072.066650, -47.876979, 1018.727600, 0.000000, -20.799989, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19375, 1087.130859, -41.066501, 1019.132324, -10.999990, -6.400001, 57.999980, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19375, 1095.650268, -43.408760, 1020.957702, -10.999990, -6.400001, 85.399978, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", 0);
	tmpobjid = CreateDynamicObject(19841, 1089.833740, -34.814178, 1030.660034, 30.100000, 0.000000, -5.499991, vw, ointerior);
	tmpobjid = CreateDynamicObject(19603, 1086.336059, -38.327991, 1023.748474, 0.000000, -9.899998, -33.099998, vw, ointerior);
	tmpobjid = CreateDynamicObject(19603, 1092.673950, -41.147731, 1025.194946, 0.000000, -9.899998, -6.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19603, 1089.393310, -40.157108, 1024.487548, 0.000000, -9.899997, -32.700000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18747, 1090.599365, -42.702800, 1023.920898, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1812, 1093.860473, -54.135421, 1025.670166, 14.000000, 0.000000, -109.500000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8463, "vgseland", "triadcarpet", 0);
	tmpobjid = CreateDynamicObject(1812, 1095.521850, -50.416728, 1025.237548, 14.000000, 0.000000, -109.500000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8463, "vgseland", "triadcarpet", 0);
	tmpobjid = CreateDynamicObject(834, 1095.836914, -52.796638, 1027.119140, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2399, 1095.229370, -52.312019, 1026.964233, 0.000000, 0.000000, -139.600097, vw, ointerior);
	tmpobjid = CreateDynamicObject(2390, 1094.925415, -53.204330, 1027.993774, 0.000000, 0.000000, -55.800010, vw, ointerior);
	tmpobjid = CreateDynamicObject(2949, 1083.132324, -48.847831, 1021.819824, 0.000000, 72.899978, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(745, 1084.500244, -52.878520, 1020.856628, 0.000000, 0.000000, -164.100006, vw, ointerior);
	tmpobjid = CreateDynamicObject(745, 1088.183349, -49.490001, 1022.046813, 0.000000, 0.000000, -164.100006, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1088.566650, -58.681938, 1025.537475, 3.599998, -33.799999, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1085.510864, -60.340690, 1023.478210, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1081.030151, -60.340690, 1023.128112, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1077.545043, -60.080699, 1021.403381, 0.000000, 1.299999, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1073.656250, -59.510688, 1021.491699, 0.000000, 10.799999, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1069.741333, -57.590690, 1020.446716, 0.000000, 10.799999, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1070.763061, -43.451808, 1020.264892, 0.000000, 10.799999, -64.799987, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1075.301269, -41.630069, 1020.143188, 0.000000, -9.099998, -1.199991, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1079.642333, -40.440700, 1021.087402, 0.000000, -9.099998, -1.199991, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 1081.550659, -39.900520, 1021.390930, 0.000000, -9.099998, -30.299989, vw, ointerior);
	tmpobjid = CreateDynamicObject(1437, 1068.288818, -58.205581, 1018.919128, -19.100000, 0.000000, 73.799995, vw, ointerior);

	// LV Mansion
	ointerior = 0,vw = 0;
	tmpobjid = CreateDynamicObject(690, 1131.782958, 770.861450, 3.860310, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3607, 1138.108032, 700.605773, 15.910124, -0.199999, 0.000000, 179.399963, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10412, "hotel1", "rooftiles2", -5605513);
	SetDynamicObjectMaterial(tmpobjid, 1, 5134, "wasteland_las2", "ws_bigstones", -13421773);
	SetDynamicObjectMaterial(tmpobjid, 2, 5134, "wasteland_las2", "ws_bigstones", -13421773);
	SetDynamicObjectMaterial(tmpobjid, 3, 5134, "wasteland_las2", "ws_bigstones", -13421773);
	tmpobjid = CreateDynamicObject(690, 1122.211425, 738.401977, 3.860310, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1149.723022, 750.451110, 3.860310, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18981, 1126.854858, 714.006958, 9.367250, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", -6710887);
	tmpobjid = CreateDynamicObject(18981, 1151.843505, 689.027221, 9.367250, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", -6710887);
	tmpobjid = CreateDynamicObject(18981, 1113.875366, 714.007141, 0.717244, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(18981, 1113.875366, 689.017944, 0.717244, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(18766, 1136.777954, 731.489440, 9.370297, 90.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1141.777465, 731.489440, 9.370297, 90.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1136.777954, 741.489440, 9.370297, 90.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1141.777465, 741.489074, 9.370297, 90.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1133.347167, 746.862487, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1138.996459, 748.296264, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1136.884643, 750.397399, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1126.283325, 753.925903, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1118.371215, 727.000183, 10.710292, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(18766, 1128.360107, 727.000183, 10.710292, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(18762, 1133.784545, 727.006835, 10.710309, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(18766, 1160.323852, 727.000183, 10.710292, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(690, 1102.605712, 729.056640, 9.290307, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18981, 1164.824340, 714.007141, 0.717244, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(690, 1102.605712, 683.996215, 8.600296, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1170.613159, 738.041503, 9.708804, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1183.153442, 724.391357, 9.708804, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1188.374023, 706.811096, 8.418800, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1124.011962, 779.051208, 3.860310, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18981, 1151.843505, 714.006958, 9.367250, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", -6710887);
	tmpobjid = CreateDynamicObject(18981, 1152.814941, 677.005859, 0.717244, 0.000000, 0.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(690, 1117.871948, 745.720642, 3.860310, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18766, 1150.324462, 727.000183, 10.710292, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(18762, 1144.824951, 727.006835, 10.710309, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(18762, 1144.775024, 726.986816, 10.710309, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(18766, 1135.311157, 677.010131, 10.710292, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(18981, 1164.822875, 689.012268, 0.717252, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(18766, 1125.311157, 677.010131, 10.710292, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(18766, 1121.731201, 677.010131, 10.710292, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(18762, 1114.844360, 677.016906, 10.710309, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewalls2", -10066330);
	tmpobjid = CreateDynamicObject(980, 1121.103149, 677.031799, 9.910283, 0.000000, 0.000000, 180.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10442, "graveyard_sfs", "ws_graveydfence", 16777215);
	SetDynamicObjectMaterial(tmpobjid, 1, 10442, "graveyard_sfs", "ws_graveydfence", 16777215);
	SetDynamicObjectMaterial(tmpobjid, 2, 10442, "graveyard_sfs", "ws_graveydfence", 16777215);
	SetDynamicObjectMaterial(tmpobjid, 3, 10442, "graveyard_sfs", "ws_graveydfence", 16777215);
	SetDynamicObjectMaterial(tmpobjid, 4, 10442, "graveyard_sfs", "ws_graveydfence", 0);
	tmpobjid = CreateDynamicObject(18981, 1132.354736, 702.616149, 9.377249, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", -8947849);
	tmpobjid = CreateDynamicObject(18981, 1145.745605, 702.616149, 9.377249, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", -8947849);
	tmpobjid = CreateDynamicObject(690, 1141.542114, 761.171325, 3.860310, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(12961, 1127.224975, 674.250854, 9.160304, 0.000000, 0.000000, 90.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18762, 1116.033935, 678.646911, 9.160305, 0.000000, 90.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8534, "tikimotel", "stonewall_la", -6710887);
	tmpobjid = CreateDynamicObject(18762, 1116.033935, 678.326599, 8.880298, 0.000000, 90.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8534, "tikimotel", "stonewall_la", -6710887);
	tmpobjid = CreateDynamicObject(18762, 1116.033935, 678.056335, 8.620295, 0.000000, 90.000000, 90.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8534, "tikimotel", "stonewall_la", -6710887);
	tmpobjid = CreateDynamicObject(18766, 1129.819458, 757.461730, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1122.748901, 764.532714, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1115.678833, 771.603393, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1108.607666, 778.674804, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1101.536865, 785.745910, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1098.096435, 789.343750, 9.390296, 90.000000, -15.300000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1119.212646, 760.996704, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1112.147216, 768.061035, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1105.077758, 775.131896, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1098.014160, 782.195251, 9.370297, 90.000000, 0.000000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(18766, 1094.657348, 787.382507, 9.400593, 90.000000, -15.300000, 135.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10350, "oc_flats_gnd_sfs", "stonewall_la", -12303292);
	tmpobjid = CreateDynamicObject(690, 1089.706054, 778.186889, 3.860310, 0.000000, 0.000000, -91.800056, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1116.592651, 785.821228, 3.860310, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1108.694702, 757.027282, 3.860310, 0.000000, 0.000000, -55.599998, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1101.422851, 764.797851, 3.860310, 0.000000, 0.000000, -55.599998, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1112.687744, 791.827026, 3.860310, 0.000000, 0.000000, -105.899902, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1102.605712, 741.296386, 9.290307, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1092.665649, 749.716796, 9.290307, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1081.705200, 764.466857, 9.290307, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1102.605712, 672.056274, 6.260299, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1116.775756, 667.415893, 3.590296, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1137.716552, 669.716186, 3.590296, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18981, 1126.854858, 690.026062, 9.367250, 0.000000, 90.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6056, "venice_law", "stonewall_la", -6710887);
	tmpobjid = CreateDynamicObject(690, 1155.957519, 669.716186, 3.590296, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1173.967651, 669.716186, 3.590296, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1173.967651, 686.316223, 3.590296, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1191.917358, 679.466308, 3.590296, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1172.774414, 701.660827, 8.418800, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1172.480834, 716.807495, 8.418800, 0.000000, 0.000000, -19.299999, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1102.605712, 713.146667, 9.290307, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1102.605712, 700.646606, 9.290307, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, 1085.020019, 1062.773925, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, 1087.562744, 1062.677734, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, 1090.043701, 1062.840576, 10.045935, 0.000000, 0.000000, -56.600021, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, 1092.362060, 1063.299560, 10.045935, 0.000000, 0.000000, -42.300018, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, 1094.455322, 1064.396728, 10.045935, 0.000000, 0.000000, -42.300018, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, 1096.595214, 1065.865844, 10.045935, 0.000000, 0.000000, -22.700029, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, 1098.304931, 1067.828247, 10.045935, 0.000000, 0.000000, -22.700029, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, 1099.377563, 1070.393066, 10.045935, 0.000000, 0.000000, 8.499968, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, 1099.928344, 1072.931762, 10.045935, 0.000000, 0.000000, 8.499968, vw, ointerior);
	tmpobjid = CreateDynamicObject(870, 1099.838745, 1075.829467, 10.045935, 0.000000, 0.000000, 8.499968, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1087.218627, 1039.695922, 6.440713, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(690, 1122.369628, 1071.447753, 8.368314, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(715, 1073.070068, 1042.691528, 17.415582, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(715, 1065.930175, 1033.691650, 17.415582, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(11245, 1060.148437, 1014.389282, 19.359703, 0.000000, 0.000000, 18.699979, vw, ointerior);
	tmpobjid = CreateDynamicObject(1231, 1111.737304, 1052.094360, 10.425033, 0.000000, 0.000000, -30.399999, vw, ointerior);
	tmpobjid = CreateDynamicObject(1231, 1105.483642, 1044.991943, 10.385033, 0.000000, 0.000000, -52.200000, vw, ointerior);

	// Mushroom House
	ointerior = 0,vw = 0;
	tmpobjid = CreateDynamicObject(14468, -550.303710, 805.125915, 1.184497, 0.000000, 0.000000, -26.200010, vw, ointerior);
	tmpobjid = CreateDynamicObject(14468, -545.324401, 802.109985, 1.094498, 0.000000, 0.000000, 149.700073, vw, ointerior);
	tmpobjid = CreateDynamicObject(14468, -553.690917, 803.341979, 1.224498, 0.000000, 0.000000, 58.399978, vw, ointerior);
	tmpobjid = CreateDynamicObject(14468, -555.549072, 799.553222, 1.294497, 0.000000, 0.000000, 53.700016, vw, ointerior);
	tmpobjid = CreateDynamicObject(18987, -573.787658, 856.083557, -3.285513, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 948, "plants_officeext", "cooker3", 0);
	tmpobjid = CreateDynamicObject(19715, -573.842407, 855.973693, 8.420600, -0.700000, -179.399932, -107.400009, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10249, "ottos2_sfw", "CJ_PLANT_POT", 0);
	tmpobjid = CreateDynamicObject(1504, -571.588867, 851.101806, 0.704486, 0.000000, 0.000000, 30.300003, vw, ointerior);
	tmpobjid = CreateDynamicObject(19360, -570.869445, 851.546203, 6.121952, 0.000000, 0.000000, -57.999992, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12963, "sw_apartflatx", "newindow10", 0);
	tmpobjid = CreateDynamicObject(19360, -570.954101, 851.681945, 6.121952, 0.000000, 0.000000, -57.999992, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1676, "wshxrefpump", "black64", 0);
	tmpobjid = CreateDynamicObject(3042, -572.242370, 861.249267, 7.744487, 0.000000, 0.000000, -13.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18725, -572.086975, 861.129516, 7.326563, -34.799995, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, -571.665222, 849.276306, 5.394494, 0.000000, 0.000000, 108.199996, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, -567.914978, 851.977172, 5.394494, 0.000000, 0.000000, 145.700027, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, -576.900817, 849.612304, 5.374494, 0.000000, 0.000000, 63.400043, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, -566.546203, 855.935668, 5.394494, 0.000000, 0.000000, 178.300033, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, -567.993591, 860.526000, 5.394494, 0.000000, 0.000000, -141.299942, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, -571.665527, 862.942565, 5.394494, 0.000000, 0.000000, -107.399948, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, -576.203735, 863.036621, 5.394494, 0.000000, 0.000000, -73.999961, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, -579.697937, 860.533691, 5.394494, 0.000000, 0.000000, -39.099967, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, -581.238159, 856.062622, 5.394494, 0.000000, 0.000000, -2.799968, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, -580.278320, 852.636596, 5.454495, 0.000000, 0.000000, 35.400058, vw, ointerior);
	tmpobjid = CreateDynamicObject(1327, -573.807006, 850.497253, 2.804497, 0.000000, 0.000000, -88.599975, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12963, "sw_apartflatx", "newindow10", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 1676, "wshxrefpump", "black64", 0);
	tmpobjid = CreateDynamicObject(1327, -568.977172, 853.415466, 2.694497, 0.000000, 0.000000, -29.499973, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12963, "sw_apartflatx", "newindow10", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 1676, "wshxrefpump", "black64", 0);
	tmpobjid = CreateDynamicObject(19360, -576.587951, 860.650207, 2.451951, 0.000000, 0.000000, -59.400005, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12963, "sw_apartflatx", "newindow10", 0);
	tmpobjid = CreateDynamicObject(19360, -576.491149, 860.498474, 2.451951, 0.000000, 0.000000, -59.500011, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1676, "wshxrefpump", "black64", 0);
	tmpobjid = CreateDynamicObject(1327, -578.387329, 858.178100, 6.064496, 0.000000, 0.000000, -21.099975, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12963, "sw_apartflatx", "newindow10", 0);
	tmpobjid = CreateDynamicObject(1327, -573.451538, 861.133483, 5.834499, 0.000000, 0.000000, -97.299972, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12963, "sw_apartflatx", "newindow10", 0);
	tmpobjid = CreateDynamicObject(11495, -595.710449, 866.853759, 0.244498, 0.000000, 0.000000, 65.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(19790, -587.688537, 863.284973, -4.590456, -0.000000, -0.499999, -24.099988, vw, ointerior);
	tmpobjid = CreateDynamicObject(869, -573.264770, 849.691833, 1.151965, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(869, -568.261962, 852.070312, 1.151965, 0.000000, 0.000000, 37.599998, vw, ointerior);
	tmpobjid = CreateDynamicObject(869, -567.068481, 855.281677, 1.151965, 0.000000, 0.000000, 75.999992, vw, ointerior);
	tmpobjid = CreateDynamicObject(869, -567.648071, 858.230407, 1.151965, 0.000000, 0.000000, 114.500007, vw, ointerior);
	tmpobjid = CreateDynamicObject(869, -569.241333, 861.226318, 1.151965, 0.000000, 0.000000, 133.900024, vw, ointerior);
	tmpobjid = CreateDynamicObject(869, -572.898559, 862.851745, 1.151965, 0.000000, 0.000000, 168.300033, vw, ointerior);
	tmpobjid = CreateDynamicObject(869, -579.829528, 858.996887, 1.061965, 0.000000, 0.000000, -129.499969, vw, ointerior);
	tmpobjid = CreateDynamicObject(869, -580.873962, 856.036804, 1.171965, 0.000000, 0.000000, -87.199981, vw, ointerior);
	tmpobjid = CreateDynamicObject(869, -579.959045, 852.477172, 1.171965, 0.000000, 0.000000, -72.900001, vw, ointerior);
	tmpobjid = CreateDynamicObject(869, -577.131103, 850.366149, 1.171965, 0.000000, 0.000000, -31.800003, vw, ointerior);
	// Mushroom House interior
	ointerior = 70,vw = 0;
	tmpobjid = CreateDynamicObject(2342, -17.839977, 1343.843139, 1084.752685, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2342, -17.639974, 1344.343383, 1084.752685, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2342, -17.450139, 1344.095458, 1084.752685, 0.000000, 0.000000, 87.600006, vw, ointerior);
	tmpobjid = CreateDynamicObject(1985, -15.453296, 1342.082275, 1094.045776, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18765, -16.136873, 1340.978881, 1099.062011, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13065, "sw_fact02alt", "plainwoodenfence1_256", -10082553);
	tmpobjid = CreateDynamicObject(18987, -16.072835, 1340.842407, 1085.383178, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 16150, "ufo_bar", "sa_wood07_128", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 16150, "ufo_bar", "sa_wood07_128", 0);
	tmpobjid = CreateDynamicObject(18765, -16.136873, 1340.978881, 1081.232543, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13065, "sw_fact02alt", "plainwoodenfence1_256", -10082553);
	tmpobjid = CreateDynamicObject(1504, -11.154010, 1340.167846, 1083.771728, 0.000000, 0.000000, 89.399963, vw, ointerior);
	tmpobjid = CreateDynamicObject(1825, -17.593299, 1344.025268, 1083.752685, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18771, -15.426345, 1340.626831, 1082.772460, 0.000000, 0.000000, 39.500000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 8870, "vgsecnstrct03", "Gen_Scaffold_Wood_Under", 0);
	SetDynamicObjectMaterial(tmpobjid, 2, 8534, "tikimotel", "sa_wood04_128", 0);
	SetDynamicObjectMaterial(tmpobjid, 3, 8534, "tikimotel", "sa_wood04_128", -10082553);
	tmpobjid = CreateDynamicObject(19378, -11.889303, 1334.873901, 1090.582641, 0.000000, 86.399978, 40.900001, vw, ointerior);
	tmpobjid = CreateDynamicObject(19378, -20.079736, 1335.399414, 1090.184936, 0.000000, 86.399978, 40.900001, vw, ointerior);
	tmpobjid = CreateDynamicObject(19378, -19.113180, 1344.572875, 1090.619384, 0.000000, 86.399978, 40.900001, vw, ointerior);
	tmpobjid = CreateDynamicObject(19378, -11.524445, 1345.841674, 1091.042724, 0.000000, 86.399978, 40.900001, vw, ointerior);
	tmpobjid = CreateDynamicObject(19927, -20.329786, 1341.020385, 1083.712280, 0.000000, 0.000000, 177.899917, vw, ointerior);
	tmpobjid = CreateDynamicObject(19929, -20.007341, 1338.914306, 1083.721801, 0.000000, 0.000000, 17.899999, vw, ointerior);
	tmpobjid = CreateDynamicObject(19931, -20.271453, 1342.335693, 1083.712280, 0.000000, 0.000000, 177.500061, vw, ointerior);
	tmpobjid = CreateDynamicObject(2832, -20.141988, 1339.224731, 1084.642456, 0.000000, 0.000000, 101.799995, vw, ointerior);
	tmpobjid = CreateDynamicObject(19830, -20.449338, 1342.216430, 1084.642456, 0.000000, 0.000000, 86.400016, vw, ointerior);
	tmpobjid = CreateDynamicObject(2500, -20.000698, 1338.468750, 1084.612426, 0.000000, 0.000000, 109.700027, vw, ointerior);
	tmpobjid = CreateDynamicObject(1327, -11.602975, 1343.984619, 1085.862915, 0.000000, 0.000000, 35.099990, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12963, "sw_apartflatx", "newindow10", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 1676, "wshxrefpump", "black64", 0);
	tmpobjid = CreateDynamicObject(1327, -11.579099, 1337.958496, 1085.702758, 0.000000, 0.000000, -30.000026, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12963, "sw_apartflatx", "newindow10", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 1676, "wshxrefpump", "black64", 0);
	tmpobjid = CreateDynamicObject(19360, -20.825380, 1340.712768, 1085.203002, 0.000000, 0.000000, 1.300000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12963, "sw_apartflatx", "newindow10", 0);
	tmpobjid = CreateDynamicObject(19360, -20.965354, 1340.709350, 1085.203002, 0.000000, 0.000000, 1.300000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12963, "sw_apartflatx", "newindow10", 0);
	tmpobjid = CreateDynamicObject(19360, -20.825380, 1340.712768, 1085.203002, 0.000000, 0.000000, 1.300000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12963, "sw_apartflatx", "newindow10", 0);
	tmpobjid = CreateDynamicObject(1706, -16.290306, 1338.782836, 1083.762573, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2370, -16.171197, 1336.021240, 1083.712402, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19786, -15.808154, 1335.963867, 1085.552734, 0.000000, 0.000000, -179.699981, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 1, 1515, "dsfs", "CJ_POKERSCREEN2", 0);
	tmpobjid = CreateDynamicObject(2800, -15.898231, 1336.444458, 1084.382812, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2281, -15.219008, 1345.199096, 1085.363159, 0.000000, 0.000000, -9.999997, vw, ointerior);
	tmpobjid = CreateDynamicObject(19144, -15.140505, 1340.638916, 1086.222534, 8.800005, 0.000000, -90.300003, vw, ointerior);
	tmpobjid = CreateDynamicObject(1828, -13.020231, 1341.017822, 1083.742431, 0.000000, 0.000000, -97.400024, vw, ointerior);
	tmpobjid = CreateDynamicObject(1497, -20.416845, 1343.269409, 1083.792724, 0.000000, 0.000000, 52.299995, vw, ointerior);
	tmpobjid = CreateDynamicObject(19916, -13.819972, 1344.979248, 1083.802246, 0.000000, 0.000000, -28.899999, vw, ointerior);
	tmpobjid = CreateDynamicObject(1745, -17.417510, 1341.391845, 1090.548706, 0.000000, -1.500000, 42.099994, vw, ointerior);
	tmpobjid = CreateDynamicObject(2088, -16.506366, 1344.293701, 1090.910400, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2267, -19.447402, 1344.344970, 1092.838378, 0.000000, 0.000000, 44.099983, vw, ointerior);
	tmpobjid = CreateDynamicObject(2846, -20.397041, 1341.501953, 1090.595458, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19360, -12.870138, 1337.274780, 1092.424194, 1.999999, -0.000000, -49.800003, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12963, "sw_apartflatx", "newindow10", 0);
	tmpobjid = CreateDynamicObject(1327, -10.683439, 1340.370849, 1095.533569, 0.000000, 0.000000, -5.800024, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12963, "sw_apartflatx", "newindow10", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 1676, "wshxrefpump", "black64", 0);
	tmpobjid = CreateDynamicObject(1327, -15.987073, 1335.425659, 1095.533569, 0.000000, 0.000000, -90.100021, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12963, "sw_apartflatx", "newindow10", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 1676, "wshxrefpump", "black64", 0);

	// Sewer Part 01
	ointerior = 0,vw = 5;
	tmpobjid = CreateDynamicObject(18981, 2255.336669, -753.231811, 36.233734, 5.500002, 90.000007, 33.599983, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6060, "shops2_law", "dirtKB_64HV", -9985441);
	tmpobjid = CreateDynamicObject(18981, 2269.075439, -773.909606, 33.843322, 5.500002, 90.000007, 33.599983, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6060, "shops2_law", "dirtKB_64HV", -9985441);
	tmpobjid = CreateDynamicObject(18981, 2249.101562, -743.846923, 37.318702, 89.699996, 90.600013, 36.199977, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 5174, "warehus_las2", "Metal1_128", 0);
	tmpobjid = CreateDynamicObject(19840, 2246.342041, -746.313476, 38.193939, 64.599998, 0.000000, 35.999988, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 9557, "waterfall_sfw", "newaterfal1_256", 0);
	tmpobjid = CreateDynamicObject(19375, 2247.787841, -750.008117, 33.717643, 0.000000, 0.000000, -57.099979, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1677, "wshxrefhse2", "tilestone256", 0);
	tmpobjid = CreateDynamicObject(19375, 2255.872070, -744.777099, 33.717643, 0.000000, 0.000000, -57.099979, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1677, "wshxrefhse2", "tilestone256", 0);
	tmpobjid = CreateDynamicObject(19375, 2255.872070, -744.777099, 44.187679, 0.000000, 0.000000, -57.099979, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1677, "wshxrefhse2", "tilestone256", 0);
	tmpobjid = CreateDynamicObject(19375, 2247.801757, -749.997070, 44.187679, 0.000000, 0.000000, -57.099979, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10872, "wc_lift_sfse", "fire_esc_fence", 0);
	tmpobjid = CreateDynamicObject(18981, 2276.812255, -790.612670, 32.251686, 4.900003, 90.000007, 26.799989, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 6060, "shops2_law", "dirtKB_64HV", -9985441);
	tmpobjid = CreateDynamicObject(18981, 2281.036621, -799.938476, 31.391071, -78.699981, 90.599998, 27.199985, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 16150, "ufo_bar", "Metal3_128", 0);
	tmpobjid = CreateDynamicObject(2949, 2275.604736, -802.267028, 32.067169, 0.000000, 9.399998, -64.500007, vw, ointerior);
	tmpobjid = CreateDynamicObject(824, 2272.463623, -792.348327, 32.938793, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(849, 2264.776123, -777.693176, 34.561256, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2840, 2263.458984, -768.920471, 35.073585, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 2260.880371, -773.528076, 35.714828, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2275.928466, -803.122680, 37.859451, 0.000000, 0.000000, -63.099998, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2281.207763, -800.443725, 37.859451, 0.000000, 0.000000, -63.099998, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2270.766601, -805.742004, 37.859451, 0.000000, 0.000000, -63.099998, vw, ointerior);
	tmpobjid = CreateDynamicObject(824, 2271.514160, -800.348388, 32.170509, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1358, 2270.203125, -779.750000, 34.893783, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1415, 2254.736572, -767.242126, 35.783550, 0.000000, -6.799999, 116.499992, vw, ointerior);
	tmpobjid = CreateDynamicObject(12957, 2257.589843, -758.523315, 36.951877, 9.899998, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 2251.205322, -756.346130, 37.182815, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2269.335937, -772.637207, 40.671028, 2.399998, -13.199990, 25.899997, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2276.768798, -790.555908, 39.096385, 2.399998, -13.199990, 19.799997, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2254.342041, -767.774597, 41.060897, -7.900000, 0.000000, -147.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 2262.113281, -763.502807, 36.551200, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 2267.506103, -774.155029, 35.409564, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(818, 2264.321289, -783.712890, 34.812728, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(849, 2254.721679, -752.002624, 37.167182, 5.999999, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(913, 2251.810302, -762.928222, 36.996776, 0.000000, -2.699999, 122.199958, vw, ointerior);
	tmpobjid = CreateDynamicObject(853, 2257.028076, -764.005371, 36.221752, 1.299999, 3.599998, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1440, 2259.479003, -768.329101, 35.674236, 3.500000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2890, 2268.281982, -787.711303, 32.994544, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3593, 2272.449951, -788.212524, 34.035820, 0.000000, 0.000000, 0.000000, vw, ointerior);
	// Sewer Part 02
	ointerior = 0,vw = 115;
	tmpobjid = CreateDynamicObject(19375, 2784.336669, 1981.591430, 4.482435, 0.000000, 0.000000, 91.200004, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1676, "wshxrefpump", "black64", 0);
	tmpobjid = CreateDynamicObject(2988, 2787.717041, 1989.906616, 3.196206, 0.000000, 0.000000, 2.699997, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2787.719726, 1987.866455, 5.146206, 0.000000, 0.000000, 2.699999, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2787.275634, 1993.489135, 5.146206, 0.000000, 0.000000, 6.099990, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2786.657714, 1999.656860, 5.146206, 0.000000, 0.000000, 5.199991, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2785.981445, 2005.463623, 5.056207, 0.000000, 0.000000, 7.399990, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2785.174316, 2011.213134, 4.986206, 0.000000, 0.000000, 9.299990, vw, ointerior);
	tmpobjid = CreateDynamicObject(19381, 2785.011474, 1984.552001, -0.260601, 0.000000, 0.000000, -85.799972, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8565, "vgsebuild01", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19381, 2785.390136, 1979.390258, 3.725797, 0.000000, -91.400047, -85.799972, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 13699, "cunte2_lahills", "laposhfence3", 0);
	tmpobjid = CreateDynamicObject(18720, 2786.061523, 1983.583251, 7.189279, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18720, 2782.800537, 1983.583251, 7.189279, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8565, "vgsebuild01", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19842, 2785.022705, 1979.670043, -2.435015, 70.500030, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19377, 2784.611083, 1984.516845, 4.453166, 0.000000, 0.000000, 94.299949, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10872, "wc_lift_sfse", "fire_esc_fence", 0);
	tmpobjid = CreateDynamicObject(639, 2784.256347, 2016.902832, 4.746205, 0.000000, 0.000000, 9.699991, vw, ointerior);
	tmpobjid = CreateDynamicObject(19551, 2784.716796, 2046.727050, 2.733813, -1.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10249, "ottos2_sfw", "dirt64b", 0);
	tmpobjid = CreateDynamicObject(639, 2780.893798, 1987.419433, 4.774806, 0.000000, 0.000000, -176.299896, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2780.327636, 1993.246215, 4.774806, 0.000000, 0.000000, -173.799896, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2779.780761, 1998.276367, 4.844808, 0.000000, 0.000000, -173.799896, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2779.149414, 2004.082275, 4.694807, 0.000000, 0.000000, -173.799896, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2778.408203, 2009.592651, 4.694807, 0.000000, 0.000000, -169.199905, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2778.408203, 2009.592651, 4.694807, 0.000000, 0.000000, -169.199905, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2777.324707, 2015.270507, 4.694807, 0.000000, 0.000000, -169.199905, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2776.594970, 2019.793945, 4.694807, 0.000000, 0.000000, -169.199905, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2775.715087, 2024.357666, 4.694807, 0.000000, 0.000000, -167.399902, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2774.583496, 2029.649536, 4.444805, 0.000000, 0.000000, -167.399902, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2773.251220, 2035.335205, 4.444805, 0.000000, 0.000000, -167.399902, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2771.902832, 2040.612915, 4.444805, 0.000000, 0.000000, -164.799804, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2770.190185, 2045.709716, 4.444805, 0.000000, 0.000000, -158.499801, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2783.439697, 2021.662963, 4.746204, 0.000000, 0.000000, 9.699991, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2782.200195, 2027.213867, 4.506204, 0.000000, 0.000000, 14.899991, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2780.676757, 2032.933959, 4.506204, 0.000000, 0.000000, 14.899991, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2779.377685, 2038.026855, 4.276202, 0.000000, 0.000000, 15.999993, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2777.628417, 2043.719726, 4.186202, 0.000000, 0.000000, 17.699996, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2775.724121, 2049.356201, 3.946201, 0.000000, 0.000000, 18.099994, vw, ointerior);
	tmpobjid = CreateDynamicObject(19377, 2769.722656, 2056.475097, -1.386577, 0.000000, 0.000000, -63.900028, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8565, "vgsebuild01", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19377, 2769.700683, 2056.520263, 6.413412, 0.000000, 0.000000, -63.900028, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10872, "wc_lift_sfse", "fire_esc_fence", 0);
	tmpobjid = CreateDynamicObject(19377, 2767.704833, 2060.597900, 6.073410, 0.000000, 0.000000, -63.900028, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 1676, "wshxrefpump", "black64", 0);
	tmpobjid = CreateDynamicObject(18720, 2771.009277, 2058.656982, 6.066326, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18720, 2767.074707, 2057.160400, 6.066326, 0.000000, 0.000000, 21.099998, vw, ointerior);
	tmpobjid = CreateDynamicObject(19842, 2768.016357, 2053.784423, -3.186369, 58.199855, 23.899999, 0.800000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2949, 2773.766845, 2055.635742, 2.555794, 0.000000, 0.000000, 22.899999, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2768.357666, 2050.679443, 4.294805, 0.000000, 0.000000, -160.399795, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2773.716552, 2054.767822, 3.946201, 0.000000, 0.000000, 22.100000, vw, ointerior);

	// Suspicious Line (new interior yada repeated here in sewer_part_02 file) - probably I /exported different parts of sewers to same file name

	tmpobjid = CreateDynamicObject(3095, 2878.100830, 496.639495, 6.076706, 90.199996, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3673, "xrf_refineryla", "Metal1_128", 0);
	tmpobjid = CreateDynamicObject(3095, 2878.614746, 491.654724, 3.895600, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8954, "vgsespras", "sf_spray_floor2", 0);
	tmpobjid = CreateDynamicObject(3095, 2882.991455, 491.948455, 5.380239, 90.000000, 0.000000, -89.199958, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3673, "xrf_refineryla", "Metal1_128", 0);
	tmpobjid = CreateDynamicObject(3095, 2873.601318, 491.921386, 6.130248, 90.000000, 0.000000, 90.000015, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3673, "xrf_refineryla", "Metal1_128", 0);
	tmpobjid = CreateDynamicObject(3095, 2878.269775, 487.407043, 5.425660, 90.199996, 0.000000, 179.799972, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 3673, "xrf_refineryla", "Metal1_128", 0);
	tmpobjid = CreateDynamicObject(3095, 2878.100830, 491.927001, 9.690232, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 16146, "des_ufoinn", "black32", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 16146, "des_ufoinn", "black32", 0);
	tmpobjid = CreateDynamicObject(2949, 2877.169921, 496.045898, 4.515601, 0.000000, 0.000000, 90.500007, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2878.083984, 496.005249, 7.635608, 0.000000, 0.000000, 90.599967, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2882.409667, 492.419342, 7.635608, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2878.339599, 488.009307, 7.635608, 0.000000, 0.000000, -89.400032, vw, ointerior);
	tmpobjid = CreateDynamicObject(639, 2874.203125, 492.050506, 7.635608, 0.000000, 0.000000, 179.699951, vw, ointerior);
	tmpobjid = CreateDynamicObject(1437, 2878.202636, 489.145782, 5.505605, 0.000000, 0.000000, 177.799926, vw, ointerior);
	tmpobjid = CreateDynamicObject(2463, 2882.383544, 492.520355, 4.915606, 0.000000, 0.000000, -90.499977, vw, ointerior);
	tmpobjid = CreateDynamicObject(18634, 2882.168212, 492.314758, 5.385701, 0.000000, -92.999969, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19120, 2882.254638, 491.713256, 6.125162, -0.099999, -89.200012, 84.000015, vw, ointerior);
	tmpobjid = CreateDynamicObject(19120, 2882.307617, 492.220611, 6.118038, -0.099999, -89.200012, 84.000015, vw, ointerior);
	tmpobjid = CreateDynamicObject(19120, 2882.364257, 492.757537, 6.110497, -0.099999, -89.200012, 84.000015, vw, ointerior);
	tmpobjid = CreateDynamicObject(19899, 2874.646972, 491.647277, 4.565604, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19815, 2878.459228, 487.990447, 6.355607, 0.000000, 0.000000, 179.300064, vw, ointerior);
	tmpobjid = CreateDynamicObject(1343, 2878.141113, 488.648681, 10.322147, -180.000000, 0.000000, 0.000000, vw, ointerior);

	// Hospital Interior (Snatched online by Kevin) [I don't like it]

	tmpobjid = CreateObject(19890, -636.971252, -912.464294, 1434.173583, 0.000000, 180.000000, 90.000000, 300.00);
	SetObjectMaterial(tmpobjid, 0, 11301, "carshow_sfse", "concreteslab_small", 0xFFF0FFFF);

	tmpobjid = CreateDynamicObjectEx(19426, -638.486999, -904.158569, 1436.912475, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19450, -638.485290, -900.059387, 1439.593261, 0.000000, 540.000000, 359.999938, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -638.459899, -899.223693, 1437.143432, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -638.416931, -894.418273, 1436.912475, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -652.986877, -897.168640, 1436.912475, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -657.052551, -916.083923, 1436.896606, 0.000006, 360.000000, 0.000297, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -638.459899, -899.903869, 1437.803710, 90.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1569, -639.816162, -897.217285, 1435.162963, -0.000014, -0.000029, -179.999740, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18029, "genintintsmallrest", "GB_restaursmll12", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1569, -642.816406, -897.217285, 1435.162963, 0.000012, 0.000029, -0.000013, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18029, "genintintsmallrest", "GB_restaursmll12", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1569, -642.806152, -897.217285, 1435.162963, -0.000014, -0.000029, -179.999740, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18029, "genintintsmallrest", "GB_restaursmll12", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1569, -645.806396, -897.217285, 1435.162963, 0.000011, 0.000029, -0.000013, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18029, "genintintsmallrest", "GB_restaursmll12", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -652.632324, -900.130981, 1435.142089, 0.000000, 90.000015, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2687, -643.488403, -897.309875, 1436.503295, 0.000012, -3.999974, -0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2670, "proc_rub", "CJ_CERT_4", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2687, -645.106628, -897.309875, 1436.430664, 0.000012, 2.200021, -0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8035, "vgsshospshop", "hosp_sign01b", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2687, -642.148803, -897.309875, 1436.317260, 0.000012, 2.200021, -0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2687, -640.545654, -897.309875, 1436.365966, 0.000012, -4.199975, -0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2670, "proc_rub", "CJ_CERT_2", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(19812, -648.391906, -904.944458, 1434.742553, 0.000000, 0.000007, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -649.175354, -906.017150, 1433.481933, 0.000045, 540.000000, 269.999877, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19353, -655.507141, -904.378356, 1436.912475, 0.000000, 0.000007, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -645.410339, -909.625244, 1433.532226, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(18880, -648.401977, -904.938476, 1435.223022, 0.000000, 0.000007, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19445, -653.978027, -899.648498, 1436.912475, 0.000000, -0.000007, 179.999954, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(949, -656.371459, -914.057250, 1435.761596, 0.000000, 0.000020, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(1713, -649.493164, -915.334167, 1435.203369, 0.000006, 0.000034, 179.999740, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1726, "mrk_couches2", "kb_sofa5_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(949, -656.371459, -904.936767, 1435.761596, 0.000000, 0.000020, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(2611, -653.827148, -903.296264, 1437.048706, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 4, 15040, "cuntcuts", "csnewspaper02", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 15040, "cuntcuts", "csnewspaper02", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 6, 15040, "cuntcuts", "csnewspaper02", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 7, 15040, "cuntcuts", "csnewspaper02", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(11711, -639.397338, -897.282592, 1437.303833, 0.000007, 0.000022, 0.000006, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -642.731506, -912.291076, 1433.535278, 0.000029, 0.000007, 89.999877, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19445, -653.282165, -904.200683, 1435.132080, 0.000000, 90.000015, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -638.459899, -899.223693, 1435.723022, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1713, -649.493164, -921.274841, 1435.203369, 0.000006, 0.000034, 179.999740, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1726, "mrk_couches2", "kb_sofa5_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19426, -650.275573, -913.137695, 1433.481933, 0.000037, 540.000000, 89.999839, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19445, -657.052551, -903.244140, 1436.896606, 0.000006, 360.000000, 0.000297, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -647.325683, -918.998107, 1433.486938, 0.000000, 540.000000, 179.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(1713, -651.143188, -916.605163, 1435.203369, -0.000006, 0.000020, -0.000257, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1726, "mrk_couches2", "kb_sofa5_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1815, -649.802001, -918.464904, 1435.210205, 0.000000, 0.000040, 179.999801, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -638.459899, -901.323791, 1437.803710, 90.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -638.459899, -902.663940, 1437.803710, 90.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -638.439880, -903.323791, 1437.143432, 0.000000, 90.000000, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -638.439880, -903.323791, 1435.723266, 0.000000, 90.000000, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19859, -638.445556, -899.633850, 1436.593750, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11388, "newhubgrg1_sfse", "ws_hubbeams1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19859, -638.445556, -902.973632, 1436.593750, 0.000000, 180.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11388, "newhubgrg1_sfse", "ws_hubbeams1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19450, -638.425231, -900.159423, 1439.593261, 0.000000, 540.000000, 359.999938, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -647.861389, -905.475769, 1433.477172, -0.000014, 180.000015, -44.999984, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19426, -638.416931, -904.158569, 1436.912475, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -638.416931, -915.138122, 1436.912475, 0.000000, 0.000006, 179.999847, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19450, -638.418640, -919.237304, 1439.593261, 0.000000, 540.000000, 179.999786, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -638.444030, -920.072998, 1437.143432, 0.000000, 89.999992, 179.999847, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -638.486999, -924.878417, 1436.912475, 0.000000, 0.000006, 179.999847, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -638.444030, -919.392822, 1437.803710, 89.999992, 314.971740, -44.971794, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -638.444030, -920.072998, 1435.723022, 0.000000, 89.999992, 179.999847, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -638.444030, -917.972900, 1437.803710, 89.999992, 314.971740, -44.971794, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -638.444030, -916.632751, 1437.803710, 89.999992, 314.971740, -44.971794, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -638.464050, -915.972900, 1437.143432, -0.000000, 90.000007, -0.000015, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -638.464050, -915.972900, 1435.723266, -0.000000, 90.000007, -0.000015, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -649.148437, -904.188720, 1435.132324, -0.000014, 270.000000, -44.999984, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19859, -638.458374, -919.662841, 1436.593750, -0.000007, 0.000000, -89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11388, "newhubgrg1_sfse", "ws_hubbeams1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -643.357177, -897.168640, 1436.912475, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19859, -638.458374, -916.323059, 1436.593750, -0.000007, 180.000000, -89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11388, "newhubgrg1_sfse", "ws_hubbeams1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1713, -651.143188, -903.812011, 1435.203369, 0.000004, 0.000058, -0.000068, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1726, "mrk_couches2", "kb_sofa5_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19450, -638.478698, -919.247253, 1439.593261, 0.000000, 540.000000, 179.999786, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -640.684936, -907.508117, 1433.537231, 0.000004, 0.000019, 44.999988, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19353, -640.126708, -909.622741, 1433.532226, 0.000000, 0.000022, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(1713, -651.143188, -897.871337, 1435.203369, 0.000004, 0.000058, -0.000068, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1726, "mrk_couches2", "kb_sofa5_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19426, -638.486999, -915.138122, 1436.912475, 0.000000, 0.000006, 179.999847, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -640.648803, -911.743347, 1433.537231, 0.000004, 0.000009, 137.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19445, -638.416931, -924.878417, 1436.912475, 0.000000, 0.000006, 179.999847, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19383, -618.172363, -909.614074, 1436.896606, 0.000029, 360.000000, 0.000228, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -618.153808, -909.496643, 1437.664428, 89.999992, 161.111511, -71.111373, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -618.132568, -908.818176, 1436.984130, -0.000006, 270.000000, 0.000274, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -618.132568, -908.818176, 1435.563598, -0.000006, 270.000000, 0.000274, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -618.163085, -910.380432, 1436.984130, -0.000015, 270.000000, -179.999679, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -618.163085, -910.380432, 1435.564086, -0.000015, 270.000000, -179.999679, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -618.143554, -909.656799, 1437.659423, 89.999992, 161.111511, -71.111373, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1492, -618.111328, -910.364562, 1435.123291, 0.000039, -0.000021, 89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18029, "genintintsmallrest", "GB_restaursmll12", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19383, -618.132324, -909.614074, 1436.896606, 0.000029, 360.000000, 0.000228, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -618.172363, -916.033874, 1436.896606, 0.000029, 360.000000, 0.000228, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -618.172363, -903.193908, 1436.896606, 0.000029, 360.000000, 0.000228, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1713, -649.493164, -902.541015, 1435.203369, -0.000004, -0.000000, 179.999710, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1726, "mrk_couches2", "kb_sofa5_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19426, -644.842773, -911.737243, 1433.537231, -0.000004, 0.000009, -135.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19426, -644.906188, -907.529541, 1433.537231, -0.000004, 0.000019, -44.999988, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19353, -643.600280, -909.625244, 1435.123046, 0.000000, 90.000015, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10756, "airportroads_sfse", "stones256128", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(647, -642.857116, -909.497375, 1435.463256, 0.000004, 0.000004, 44.999988, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -641.929748, -909.625244, 1435.126098, 0.000000, 90.000015, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10756, "airportroads_sfse", "stones256128", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19353, -642.780090, -908.794860, 1435.129150, 0.000007, 90.000007, 89.999977, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10756, "airportroads_sfse", "stones256128", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19353, -642.780090, -910.475708, 1435.132202, 0.000007, 90.000007, 89.999977, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10756, "airportroads_sfse", "stones256128", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19426, -641.837707, -910.541259, 1435.118286, 0.000004, 90.000007, 135.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10756, "airportroads_sfse", "stones256128", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19426, -643.562316, -910.456787, 1435.127685, -0.000004, 90.000007, -135.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10756, "airportroads_sfse", "stones256128", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19426, -643.675659, -908.760070, 1435.117675, -0.000004, 90.000022, -44.999988, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10756, "airportroads_sfse", "stones256128", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19426, -641.887329, -908.710510, 1435.127685, 0.000004, 90.000022, 44.999988, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10756, "airportroads_sfse", "stones256128", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19426, -651.587585, -912.600952, 1433.477172, 0.000006, 180.000015, 45.000011, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19426, -651.587585, -906.571594, 1433.477172, -0.000003, 180.000015, 315.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19353, -652.135864, -908.666809, 1433.481933, 0.000037, 540.000000, 179.999832, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(2612, -653.827148, -901.515625, 1437.048706, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 2, 15040, "cuntcuts", "csnewspaper02", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19353, -642.791564, -906.979309, 1433.545288, 0.000037, 0.000007, 89.999855, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19445, -649.132324, -900.130981, 1435.142089, 0.000000, 90.000015, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -657.022033, -911.461242, 1435.137084, 0.000000, 90.000015, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -652.832275, -905.341186, 1435.132324, -0.000014, 270.000000, -44.999984, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -652.819335, -913.840942, 1435.132324, -0.000014, 270.000000, -134.999984, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -618.132324, -903.214050, 1436.896606, 0.000029, 360.000000, 0.000228, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -638.486999, -894.418273, 1436.912475, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1815, -650.834350, -900.681274, 1435.210205, 0.000000, 0.000066, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -618.132324, -916.033752, 1436.896606, 0.000029, 360.000000, 0.000228, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -655.507141, -914.768676, 1436.912475, 0.000000, 0.000007, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -637.942871, -905.470947, 1436.912475, 0.000004, 0.000004, 44.999988, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19383, -623.046508, -915.948364, 1436.896606, 0.000021, 360.000000, -89.999717, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -632.617370, -906.008483, 1436.912475, 0.000000, 0.000014, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -650.275573, -906.017150, 1433.486938, 0.000045, 540.000000, 269.999877, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19353, -652.135864, -910.487121, 1433.486938, 0.000037, 540.000000, 179.999832, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19426, -649.175354, -913.137695, 1433.486938, 0.000037, 540.000000, 89.999839, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19426, -647.861389, -913.685852, 1433.477172, -0.000019, 180.000015, -134.999984, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19426, -649.127807, -914.915771, 1435.132324, -0.000014, 270.000000, -134.999984, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -649.039550, -918.960327, 1435.137084, 0.000007, 90.000038, -0.000022, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -657.022033, -907.700622, 1435.137084, 0.000000, 90.000015, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -657.022033, -909.640930, 1435.142089, 0.000000, 90.000015, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19812, -648.391906, -914.244689, 1434.742553, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(18880, -648.401977, -914.238708, 1435.223022, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19445, -643.356018, -922.032897, 1436.912475, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -652.985778, -922.032897, 1436.912475, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -622.929077, -915.966918, 1437.664428, 89.999992, 125.717956, -125.717742, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -653.978027, -919.498474, 1436.912475, 0.000000, -0.000007, 179.999954, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -637.942871, -913.828735, 1436.912475, 0.000000, 0.000009, -45.000011, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -622.250610, -915.988159, 1436.984130, -0.000014, 270.000000, -89.999671, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -622.250610, -915.988159, 1435.563598, -0.000014, 270.000000, -89.999671, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -623.812866, -915.957641, 1436.984130, -0.000007, 270.000000, 90.000282, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -623.812866, -915.957641, 1435.564086, -0.000007, 270.000000, 90.000282, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -623.089233, -915.977172, 1437.659423, 89.999992, 125.717956, -125.717742, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1492, -623.796997, -916.009399, 1435.123291, 0.000047, -0.000013, -0.000045, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18029, "genintintsmallrest", "GB_restaursmll12", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19383, -623.046508, -915.988403, 1436.896606, 0.000021, 360.000000, -89.999717, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -619.836669, -915.948364, 1436.896606, 0.000021, 360.000000, -89.999717, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -625.456298, -915.948364, 1436.896606, 0.000021, 360.000000, -89.999717, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -625.956542, -915.958374, 1436.896606, 0.000021, 360.000000, -89.999717, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -625.446655, -915.988403, 1436.896606, 0.000021, 360.000000, -89.999717, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -625.956909, -915.978393, 1436.896606, 0.000021, 360.000000, -89.999717, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -619.836486, -915.988403, 1436.896606, 0.000021, 360.000000, -89.999717, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -632.617370, -913.279052, 1436.912475, 0.000000, 0.000014, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -627.299621, -913.821289, 1436.902465, 0.000000, 0.000009, -135.000015, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -627.299621, -905.466247, 1436.912475, 0.000015, -0.000004, 134.999984, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -626.756896, -900.138549, 1436.912475, 0.000000, 0.000014, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -626.756896, -919.148559, 1436.902465, 0.000000, 0.000014, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19812, -636.321960, -909.554809, 1434.742553, 0.000000, 0.000029, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(18880, -636.332031, -909.548828, 1435.223022, 0.000000, 0.000029, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19383, -623.046508, -903.268737, 1436.896606, 0.000014, 360.000000, -89.999694, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -622.929077, -903.287292, 1437.664428, 89.999992, 109.445625, -109.445388, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -622.250610, -903.308532, 1436.984130, -0.000021, 270.000000, -89.999649, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -622.250610, -903.308532, 1435.563598, -0.000021, 270.000000, -89.999649, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -623.812866, -903.278015, 1436.984130, -0.000000, 270.000000, 90.000259, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -623.812866, -903.278015, 1435.564086, -0.000000, 270.000000, 90.000259, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -623.089233, -903.297546, 1437.659423, 89.999992, 109.445625, -109.445388, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1492, -623.796997, -903.329772, 1435.123291, 0.000047, -0.000006, -0.000045, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18029, "genintintsmallrest", "GB_restaursmll12", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19383, -623.046508, -903.308776, 1436.896606, 0.000014, 360.000000, -89.999694, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -619.836669, -903.268737, 1436.896606, 0.000014, 360.000000, -89.999694, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -625.456298, -903.268737, 1436.896606, 0.000014, 360.000000, -89.999694, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -625.956542, -903.278747, 1436.896606, 0.000014, 360.000000, -89.999694, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -625.446655, -903.308776, 1436.896606, 0.000014, 360.000000, -89.999694, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -625.956909, -903.298767, 1436.896606, 0.000014, 360.000000, -89.999694, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -619.836486, -903.308776, 1436.896606, 0.000014, 360.000000, -89.999694, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19383, -657.092590, -909.664184, 1436.896606, 0.000006, 360.000000, 0.000297, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -657.074035, -909.546752, 1437.664428, 89.999992, 144.557052, -54.556816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -657.052795, -908.868286, 1436.984130, -0.000029, 270.000000, 0.000343, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -657.052795, -908.868286, 1435.563598, -0.000029, 270.000000, 0.000343, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -657.083312, -910.430541, 1436.984130, 0.000007, 270.000000, -179.999664, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -657.083312, -910.430541, 1435.564086, 0.000007, 270.000000, -179.999664, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18066, -657.063781, -909.706909, 1437.659423, 89.999992, 144.557052, -54.556816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1492, -657.031555, -910.414672, 1435.123291, 0.000055, 0.000001, 89.999900, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18029, "genintintsmallrest", "GB_restaursmll12", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19383, -657.052551, -909.664184, 1436.896606, 0.000006, 360.000000, 0.000297, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -657.092590, -903.244140, 1436.896606, 0.000006, 360.000000, 0.000297, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -657.092590, -916.084045, 1436.896606, 0.000006, 360.000000, 0.000297, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -647.325683, -900.147949, 1433.486938, 0.000000, 540.000000, 179.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19445, -653.282165, -914.950683, 1435.132080, 0.000000, 90.000015, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -652.539550, -918.960327, 1435.137084, 0.000007, 90.000038, -0.000022, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -663.589294, -909.690368, 1435.137084, 0.000007, 90.000038, -0.000022, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -662.912170, -914.950683, 1435.132080, 0.000000, 90.000015, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -662.912170, -904.200683, 1435.132080, 0.000000, 90.000015, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -638.455932, -898.748046, 1433.446899, 0.000000, 540.000000, 179.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19445, -638.455932, -920.668029, 1433.446899, 0.000000, 540.000000, 179.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19426, -619.290039, -904.161376, 1436.902465, -0.000029, 0.000009, 0.000075, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -618.749084, -905.466308, 1436.902465, 0.000000, 0.000009, 44.999958, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -621.856872, -926.538208, 1436.902465, 0.000000, 0.000007, 269.999938, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -618.749084, -913.821350, 1436.902465, 0.000015, -0.000004, -45.000022, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2161, -626.668090, -894.489318, 1436.539428, 0.000029, 0.000014, 89.999755, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 2, 14665, "genintint711_1", "interiorwindowglow", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18755, -642.875122, -923.923645, 1437.092163, -0.000007, 0.000007, -89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4829, "airport_las", "liftdoorsac256", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18756, -642.839599, -923.963256, 1437.073608, -0.000007, 0.000007, -89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 4829, "airport_las", "liftdoorsac256", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18756, -642.899658, -920.153320, 1437.073608, 0.000007, -0.000007, 89.999961, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 4829, "airport_las", "liftdoorsac256", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(14455, -626.648193, -897.439331, 1436.804321, -0.000007, 0.000000, -90.000129, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19890, -634.421875, -911.313903, 1439.633544, 0.000000, 360.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3621, "dockcargo1_las", "dt_ceiling1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -658.185607, -909.044067, 1441.044189, 0.000007, -0.000007, -90.000251, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1776, -618.726074, -912.195922, 1436.269042, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2611, -618.298034, -907.421325, 1437.048706, 0.000028, -0.000051, -90.000373, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 4, 15040, "cuntcuts", "csnewspaper02", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 15040, "cuntcuts", "csnewspaper02", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 6, 15040, "cuntcuts", "csnewspaper02", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 7, 15040, "cuntcuts", "csnewspaper02", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1714, -654.906066, -908.295776, 1435.215209, 0.000024, 0.000025, 112.799880, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1714, -654.841125, -910.571899, 1435.215209, 0.000001, 0.000040, 73.999969, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19812, -629.341308, -909.554809, 1434.742553, 0.000000, 0.000022, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(18880, -629.351379, -909.548828, 1435.223022, 0.000000, 0.000022, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(1776, -653.446411, -899.895690, 1436.329101, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(16101, -613.610595, -908.881958, 1425.704101, 0.000004, 0.000027, 45.745967, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19812, -648.391906, -904.944458, 1439.071533, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(1775, -653.467102, -919.764526, 1436.329101, 0.000014, -0.000045, 89.999687, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2611, -653.847839, -918.026489, 1437.048706, 0.000029, -0.000051, 89.999595, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 4, 15040, "cuntcuts", "csnewspaper02", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 15040, "cuntcuts", "csnewspaper02", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 6, 15040, "cuntcuts", "csnewspaper02", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 7, 15040, "cuntcuts", "csnewspaper02", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2612, -653.847839, -916.245849, 1437.048706, 0.000029, -0.000051, 89.999595, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 2, 15040, "cuntcuts", "csnewspaper02", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19825, -653.853149, -919.785705, 1437.883666, 0.000022, -0.000051, 89.999626, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(14455, -636.209472, -913.174621, 1436.804321, 0.000000, 0.000007, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(14455, -628.998413, -906.119079, 1436.804321, 0.000000, 0.000000, 179.999847, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(14455, -633.349243, -913.164611, 1436.804321, 0.000000, 0.000007, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(14455, -631.858642, -906.129089, 1436.804321, 0.000000, 0.000000, 179.999847, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2007, -656.461791, -906.146911, 1435.192993, 0.000007, 0.000000, 89.999977, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2007, -656.461791, -913.017517, 1435.192993, 0.000007, 0.000000, 89.999977, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(19934, -642.870239, -906.909057, 1438.535034, 0.000001, 0.000049, -89.999961, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2388, -642.630249, -907.149536, 1439.215820, -0.000049, 180.000000, -179.999694, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19787, -642.885375, -906.922241, 1437.794555, -0.000049, 0.000006, -179.999694, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2242, -639.286010, -921.261047, 1435.337158, -0.000043, 0.000037, -89.999862, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(630, -639.295532, -921.343933, 1436.167968, -0.000043, 0.000037, -89.999862, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2242, -653.196533, -921.261047, 1435.337158, -0.000050, 0.000037, -89.999839, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(630, -653.206054, -921.343933, 1436.167968, -0.000050, 0.000037, -89.999839, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, -640.260803, -891.150390, 1438.678955, 0.000000, 90.000007, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3621, "dockcargo1_las", "dt_ceiling1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19934, -642.875610, -912.299926, 1438.535034, 0.000001, 0.000049, 89.999977, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2388, -643.115600, -912.059448, 1439.215820, -0.000049, 180.000000, 0.000288, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19787, -642.860473, -912.286743, 1437.794555, -0.000049, 0.000006, 0.000288, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19353, -650.286926, -922.019287, 1436.912475, 0.000000, 0.000007, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18029, "genintintsmallrest", "GB_restaursmll10", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -650.286926, -897.189270, 1436.912475, 0.000000, 0.000007, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18029, "genintintsmallrest", "GB_restaursmll10", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(16101, -637.870605, -896.422485, 1425.704101, 0.000000, 0.000022, 45.745967, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(16101, -633.439575, -896.422485, 1425.704101, -0.000009, 0.000033, 45.745967, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1796, -634.293457, -899.381225, 1435.152587, -0.000014, 0.000021, -0.000197, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1796, -637.214355, -899.359985, 1435.152587, -0.000014, 0.000021, -0.000197, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19426, -635.898376, -909.598937, 1435.132324, -0.000014, 270.000000, 0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19426, -629.738281, -909.598937, 1435.132324, -0.000014, 270.000000, 0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2328, -635.679199, -897.405883, 1435.154785, -0.000000, 0.000007, -0.000212, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1721, -637.088500, -898.540771, 1435.169921, -0.000036, -0.000007, -179.999710, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1721, -634.198364, -898.540771, 1435.169921, -0.000036, -0.000007, -179.999710, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19426, -632.907897, -909.598937, 1435.137329, -0.000014, 270.000000, 0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -623.077941, -907.978759, 1435.132324, -0.000014, 270.000000, 0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(16101, -631.820678, -896.422485, 1425.704101, 0.000009, 0.000031, 45.745967, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(16101, -627.389648, -896.422485, 1425.704101, 0.000000, 0.000043, 45.745967, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1796, -628.243530, -899.381225, 1435.152587, -0.000014, 0.000036, -0.000197, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1796, -631.164428, -899.359985, 1435.152587, -0.000014, 0.000036, -0.000197, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19353, -623.077941, -911.188720, 1435.132324, -0.000014, 270.000000, 0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19430, -613.148071, -909.598937, 1435.132324, -0.000014, 270.000000, 0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2328, -629.629272, -897.405883, 1435.154785, -0.000000, 0.000022, -0.000212, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1721, -631.038574, -898.540771, 1435.169921, -0.000036, -0.000022, -179.999618, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1721, -628.148437, -898.540771, 1435.169921, -0.000036, -0.000022, -179.999618, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2328, -632.598815, -897.405883, 1435.154785, -0.000000, 0.000007, -0.000212, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19430, -614.018127, -909.598937, 1435.127319, -0.000014, 270.000000, 0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2242, -619.965270, -915.100952, 1435.337158, -0.000057, 0.000037, -89.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1713, -633.762939, -905.034057, 1435.168334, 0.000006, 0.000026, 179.999694, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1726, "mrk_couches2", "kb_sofa5_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1713, -630.242431, -905.034057, 1435.168334, 0.000006, 0.000026, 179.999694, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1726, "mrk_couches2", "kb_sofa5_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19445, -631.616638, -895.698364, 1436.912475, 0.000000, 0.000014, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -641.246398, -895.698364, 1436.912475, 0.000000, 0.000014, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -635.736755, -895.708862, 1436.912475, 0.000000, 0.000007, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18029, "genintintsmallrest", "GB_restaursmll10", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -629.576416, -895.708862, 1436.912475, 0.000000, 0.000007, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18029, "genintintsmallrest", "GB_restaursmll10", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2242, -637.226074, -905.190917, 1435.302124, -0.000057, 0.000037, -89.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(630, -637.235595, -905.273803, 1436.132934, -0.000057, 0.000037, -89.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2242, -628.445861, -905.190917, 1435.302124, -0.000065, 0.000037, -89.999794, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(630, -628.455383, -905.273803, 1436.132934, -0.000065, 0.000037, -89.999794, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(630, -619.974792, -915.183837, 1436.167968, -0.000057, 0.000037, -89.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19812, -632.821838, -901.174316, 1434.707519, 0.000000, 0.000021, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(18880, -632.831909, -901.168334, 1435.223022, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19812, -632.821838, -901.174316, 1439.071533, 0.000000, 0.000020, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2242, -619.965270, -904.010375, 1435.337158, -0.000065, 0.000037, -89.999794, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(630, -619.974792, -904.093261, 1436.167968, -0.000065, 0.000037, -89.999794, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2242, -625.935791, -904.010375, 1435.337158, -0.000057, 0.000037, -89.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(630, -625.945312, -904.093261, 1436.167968, -0.000057, 0.000037, -89.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2283, -631.007751, -905.885803, 1437.192871, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 2266, "picture_frame", "CJ_PAINTING30", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2283, -634.528076, -905.885803, 1437.192871, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 2266, "picture_frame", "CJ_PAINTING3", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1815, -631.593627, -903.771118, 1435.175170, 0.000000, 0.000073, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1815, -635.094909, -903.771118, 1435.175170, 0.000000, 0.000073, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1776, -627.236022, -902.846069, 1436.254028, -0.000007, -0.000000, -89.999977, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(19172, -626.861083, -900.179626, 1437.188964, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8035, "vgsshospshop", "hosp_sign01a", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 8035, "vgsshospshop", "hosp_sign01a", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2674, -627.702209, -902.240722, 1435.177978, 0.000000, 0.000007, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(19812, -648.391906, -914.244689, 1439.071533, 0.000000, 0.000020, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(19812, -636.321960, -909.554809, 1439.071533, 0.000000, 0.000036, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(19812, -629.341308, -909.554809, 1439.071533, 0.000000, 0.000029, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2242, -653.196533, -897.900390, 1435.337158, -0.000058, 0.000037, -89.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(630, -653.206054, -897.983276, 1436.167968, -0.000058, 0.000037, -89.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(16101, -627.305786, -922.849121, 1425.704101, 0.000000, 0.000022, -134.254028, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(16101, -631.736816, -922.849121, 1425.704101, -0.000009, 0.000033, -134.254028, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1796, -630.882934, -919.890380, 1435.152587, -0.000012, 0.000005, 179.999649, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1796, -627.962036, -919.911621, 1435.152587, -0.000012, 0.000005, 179.999649, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2328, -629.497192, -921.865722, 1435.154785, 0.000000, -0.000007, 179.999633, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1721, -628.087890, -920.730834, 1435.169921, -0.000035, 0.000007, 0.000227, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1721, -630.978027, -920.730834, 1435.169921, -0.000035, 0.000007, 0.000227, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(16101, -633.355712, -922.849121, 1425.704101, 0.000009, 0.000030, -134.254028, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(16101, -637.786743, -922.849121, 1425.704101, 0.000000, 0.000043, -134.254028, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1796, -636.932861, -919.890380, 1435.152587, -0.000012, 0.000020, 179.999649, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1796, -634.011962, -919.911621, 1435.152587, -0.000012, 0.000020, 179.999649, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14476, "carlslounge", "ah_blu_paper2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2328, -635.547119, -921.865722, 1435.154785, 0.000000, 0.000006, 179.999633, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1721, -634.137817, -920.730834, 1435.169921, -0.000034, -0.000006, 0.000319, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1721, -637.027954, -920.730834, 1435.169921, -0.000034, -0.000006, 0.000318, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2328, -632.577575, -921.865722, 1435.154785, 0.000000, -0.000007, 179.999633, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1713, -631.413452, -914.237548, 1435.168334, 0.000004, 0.000041, -0.000273, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1726, "mrk_couches2", "kb_sofa5_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1713, -634.933959, -914.237548, 1435.168334, 0.000004, 0.000041, -0.000273, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1726, "mrk_couches2", "kb_sofa5_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19445, -641.249694, -923.573242, 1436.912475, -0.000007, 0.000014, -89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -631.619934, -923.573242, 1436.912475, -0.000007, 0.000014, -89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -629.439636, -923.562744, 1436.912475, 0.000000, 0.000007, -89.999969, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18029, "genintintsmallrest", "GB_restaursmll10", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -635.599975, -923.562744, 1436.912475, 0.000000, 0.000007, -89.999969, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18029, "genintintsmallrest", "GB_restaursmll10", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2242, -627.950317, -914.080688, 1435.302124, -0.000041, 0.000036, 90.000076, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(630, -627.940795, -913.997802, 1436.132934, -0.000041, 0.000036, 90.000076, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2242, -636.730529, -914.080688, 1435.302124, -0.000049, 0.000036, 90.000099, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(630, -636.721008, -913.997802, 1436.132934, -0.000049, 0.000036, 90.000099, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2435, -652.829528, -911.905578, 1435.092529, -0.000025, 0.000051, 90.000061, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14665, "genintint711_1", "interiorwindowglow", 0xFFA9A9A9);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(19893, -652.866027, -907.465759, 1436.144287, -0.000033, -0.000018, -73.899940, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2435, -652.829528, -907.252441, 1435.092529, -0.000025, 0.000051, 90.000061, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14665, "genintint711_1", "interiorwindowglow", 0xFFA9A9A9);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(2435, -652.829528, -910.975524, 1435.092529, -0.000025, 0.000051, 90.000061, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14665, "genintint711_1", "interiorwindowglow", 0xFFA9A9A9);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(2435, -652.829528, -910.044494, 1435.092529, -0.000025, 0.000051, 90.000061, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14665, "genintint711_1", "interiorwindowglow", 0xFFA9A9A9);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(2435, -652.829528, -909.113586, 1435.092529, -0.000025, 0.000051, 90.000061, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14665, "genintint711_1", "interiorwindowglow", 0xFFA9A9A9);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(2435, -652.829528, -908.182434, 1435.092529, -0.000025, 0.000051, 90.000061, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14665, "genintint711_1", "interiorwindowglow", 0xFFA9A9A9);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(1964, -653.030944, -909.188354, 1436.292480, 0.000022, 0.000000, 89.999809, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 3, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 6, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19893, -652.811706, -911.509460, 1436.144287, -0.000025, -0.000029, -102.999977, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2283, -634.168640, -913.385803, 1437.192871, 0.000000, 0.000000, -0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 2266, "picture_frame", "CJ_PAINTING34", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2283, -630.648315, -913.385803, 1437.192871, 0.000000, 0.000000, -0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 2266, "picture_frame", "CJ_PAINTING35", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1815, -633.582763, -915.500488, 1435.175170, 0.000000, 0.000058, 179.999847, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1815, -630.081481, -915.500488, 1435.175170, 0.000000, 0.000058, 179.999847, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1776, -627.228515, -916.781616, 1436.244018, -0.000007, -0.000000, -90.000038, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(19172, -626.853576, -919.405273, 1437.188964, 0.000000, 0.000000, -90.000061, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8035, "vgsshospshop", "hosp_sign01a", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 8035, "vgsshospshop", "hosp_sign01a", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2674, -627.735046, -916.176269, 1435.187988, -0.000000, 0.000007, -0.000196, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2242, -646.636413, -921.261047, 1435.337158, -0.000049, 0.000037, -89.999839, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(630, -646.645935, -921.343933, 1436.167968, -0.000049, 0.000037, -89.999839, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19445, -626.756896, -890.508544, 1436.912475, 0.000000, 0.000014, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -618.616760, -898.458679, 1436.912475, 0.000000, 0.000014, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -622.836669, -892.328552, 1436.912475, 0.000000, 0.000014, 270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -618.616760, -888.828674, 1436.912475, 0.000000, 0.000014, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -622.442871, -891.919860, 1435.212646, -0.000013, 90.000038, 0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -623.103271, -891.914855, 1435.222656, -0.000013, 90.000038, 0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -622.753173, -891.559509, 1435.382812, -0.000013, 90.000038, 0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "hotcarp01_LA", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -624.784057, -891.924865, 1433.543212, -0.000013, 180.000000, 0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19445, -624.423706, -891.574523, 1433.693359, -0.000013, 180.000000, 0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19445, -622.762084, -896.305847, 1430.627929, 89.999992, 356.601196, -86.601173, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19445, -621.081787, -891.574523, 1433.693359, -0.000013, 180.000000, 0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19445, -620.762573, -891.924865, 1433.543212, -0.000013, 180.000000, 0.000014, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19445, -622.421752, -896.676208, 1430.477783, 89.999992, 356.601196, -86.601173, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19445, -623.122436, -896.666198, 1430.477783, 89.999992, 356.601196, -86.601173, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19871, -622.900268, -895.780822, 1435.806884, 0.000036, -0.000023, 179.999603, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-80-percent", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2420, -623.048095, -895.974670, 1435.468017, 0.000036, -0.000023, 179.999603, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2420, -622.757812, -895.524230, 1435.463134, -0.000035, 0.000025, 0.000052, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1713, -623.601196, -893.063781, 1435.485107, -0.000020, 0.000066, 0.000021, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1355, "break_s_bins", "CJ_WOOD_DARK", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1726, "mrk_couches2", "kb_sofa5_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2161, -618.705688, -899.099487, 1435.189575, -0.000029, 0.000000, -90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 2, 14665, "genintint711_1", "interiorwindowglow", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2161, -618.705688, -899.099487, 1436.539794, -0.000029, 0.000000, -90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 2, 14665, "genintint711_1", "interiorwindowglow", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2161, -618.705688, -897.629455, 1435.189575, -0.000029, 0.000000, -90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 2, 14665, "genintint711_1", "interiorwindowglow", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2202, -619.146606, -894.202758, 1435.189575, -0.000029, -0.000007, -90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2161, -626.668090, -894.489318, 1435.189575, 0.000029, 0.000014, 89.999755, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 2, 14665, "genintint711_1", "interiorwindowglow", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2161, -626.668090, -895.959350, 1435.189575, 0.000029, 0.000014, 89.999755, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 2, 14665, "genintint711_1", "interiorwindowglow", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19353, -622.755920, -892.379028, 1436.912475, 0.000000, 0.000007, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18029, "genintintsmallrest", "GB_restaursmll10", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(949, -619.211608, -902.736816, 1435.761596, 0.000000, 0.000019, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(949, -626.221557, -902.736816, 1435.761596, 0.000000, 0.000019, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(949, -619.211608, -893.026550, 1435.761596, 0.000000, 0.000028, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(949, -626.221557, -893.026550, 1435.761596, 0.000000, 0.000028, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(2283, -618.747558, -894.795898, 1437.192871, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1713, -623.892578, -907.261657, 1435.203369, 0.000003, 0.000065, -0.000068, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1726, "mrk_couches2", "kb_sofa5_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1713, -622.242553, -911.931335, 1435.203369, -0.000003, -0.000007, 179.999664, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1726, "mrk_couches2", "kb_sofa5_256", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1815, -623.583740, -910.071594, 1435.210205, 0.000000, 0.000073, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2357, -622.948791, -920.726928, 1435.588134, 0.000007, 0.000029, 89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2173, -623.452331, -923.344116, 1435.187744, -0.000029, 0.000007, 0.000060, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1714, -622.958923, -924.669799, 1435.187744, 0.000007, -0.000007, 179.999908, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1714, -624.668640, -921.957153, 1435.187744, -0.000012, 0.000029, 90.000007, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1714, -624.668640, -919.404663, 1435.187744, -0.000012, 0.000029, 90.000007, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1714, -624.668640, -920.635864, 1435.187744, -0.000012, 0.000029, 90.000007, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1714, -621.257995, -919.404907, 1435.187744, -0.000029, -0.000029, -89.999687, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1714, -621.257995, -921.957397, 1435.187744, -0.000029, -0.000029, -89.999687, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1714, -621.257995, -920.726196, 1435.187744, -0.000029, -0.000029, -89.999687, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19893, -622.936340, -923.254516, 1435.967773, -0.000029, 0.000007, 0.000060, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-93-percent", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19893, -622.545959, -921.953247, 1435.987792, 0.000007, 0.000029, 89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-93-percent", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19893, -622.545959, -920.732055, 1435.987792, 0.000007, 0.000029, 89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-93-percent", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19893, -622.545959, -919.380737, 1435.987792, 0.000007, 0.000029, 89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-93-percent", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19893, -623.346618, -919.380493, 1435.987792, -0.000007, -0.000029, -90.000205, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-93-percent", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19893, -623.346618, -920.661743, 1435.987792, -0.000007, -0.000029, -90.000205, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-93-percent", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19893, -623.346618, -921.953002, 1435.987792, -0.000007, -0.000029, -90.000205, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-93-percent", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2059, -623.024353, -920.173217, 1436.007080, 0.000007, 0.000029, 92.639930, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15040, "cuntcuts", "csnewspaper", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 15040, "cuntcuts", "csnewspaper", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 15040, "cuntcuts", "csnewspaper", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2059, -622.909362, -922.671264, 1436.007080, 0.000029, -0.000007, -177.360000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15040, "cuntcuts", "csnewspaper", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 15040, "cuntcuts", "csnewspaper", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 15040, "cuntcuts", "csnewspaper", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19445, -626.756896, -928.778564, 1436.902465, 0.000000, 0.000014, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -619.286499, -919.148559, 1436.902465, 0.000000, 0.000007, 179.999954, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -619.286499, -928.778564, 1436.902465, 0.000000, 0.000007, 179.999954, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(949, -626.221557, -916.477111, 1435.761596, 0.000000, 0.000018, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(949, -619.791442, -916.477111, 1435.761596, 0.000000, 0.000018, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(949, -626.221557, -926.053161, 1435.761596, 0.000000, 0.000027, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(949, -619.791442, -926.053161, 1435.761596, 0.000000, 0.000027, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(19353, -622.755920, -926.498596, 1436.912475, 0.000000, 0.000007, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18029, "genintintsmallrest", "GB_restaursmll10", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(14455, -626.648193, -918.369323, 1436.804321, -0.000007, 0.000000, -90.000129, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(14455, -626.653198, -919.809387, 1436.804321, -0.000007, 0.000000, -90.000129, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(14455, -619.323364, -924.149658, 1436.804321, -0.000007, 0.000000, 89.999809, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(14455, -619.328369, -922.709594, 1436.804321, -0.000007, 0.000000, 89.999809, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19883, -615.036743, -910.046569, 1435.217407, 0.000012, 0.000028, 89.998878, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFA9A9A9);
	tmpobjid = CreateDynamicObjectEx(19883, -615.036621, -909.245666, 1435.217407, 0.000012, 0.000028, 89.998878, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFA9A9A9);
	tmpobjid = CreateDynamicObjectEx(19883, -613.625854, -910.046447, 1435.217407, 0.000012, 0.000028, 89.998878, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFA9A9A9);
	tmpobjid = CreateDynamicObjectEx(19883, -613.625732, -909.245544, 1435.217407, 0.000012, 0.000028, 89.998878, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFA9A9A9);
	tmpobjid = CreateDynamicObjectEx(2146, -614.322509, -909.660583, 1435.364379, 0.000012, 0.000028, 89.998878, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14476, "carlslounge", "ah_blu_paper2", 0xFFDCDCDC);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19883, -613.615844, -908.869567, 1435.217407, 0.000012, 0.000036, 89.998878, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFA9A9A9);
	tmpobjid = CreateDynamicObjectEx(1008, -613.646850, -908.860534, 1436.255493, 0.000036, 89.998985, 179.993453, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1008, -613.587036, -908.870544, 1436.255493, -0.000036, 90.000015, -0.005218, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, -1, "none", "none", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2136, -613.873291, -913.202331, 1435.210449, 0.000000, 0.000007, 179.999801, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 3, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 4, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2140, -615.848632, -913.194763, 1435.210449, 0.000000, 0.000036, 179.999893, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2140, -612.917846, -913.194763, 1435.210449, 0.000000, 0.000036, 179.999893, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2393, -611.911376, -909.029357, 1435.204101, 0.000000, 0.000020, -0.000258, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1785, -612.143554, -909.273864, 1436.739624, -0.000020, 0.000000, -89.999961, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14665, "genintint711_1", "interiorwindowglow", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19903, -612.035644, -910.094299, 1435.209106, 0.000000, -0.000020, 179.999603, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19962, "samproadsigns", "materialtext1", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2260, -612.745605, -909.132019, 1436.372558, -0.000020, 449.999938, -89.999916, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14776, "genintintcarint3", "leccy_cables", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(3387, -613.378051, -906.216979, 1434.690307, 0.000029, -0.000048, -90.000427, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(3387, -614.388305, -906.216979, 1434.690307, 0.000029, -0.000048, -90.000427, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(3387, -615.387939, -906.216979, 1434.690307, 0.000029, -0.000048, -90.000427, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(11736, -613.705200, -913.402526, 1436.290527, 0.000000, 0.000079, 179.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(11738, -614.184936, -913.369567, 1436.330444, 0.000000, 0.000072, 179.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -613.356811, -905.868896, 1436.892456, 0.000000, 0.000014, 270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -613.356811, -913.739440, 1436.892456, 0.000000, 0.000014, 270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -609.606689, -909.119445, 1436.892456, 0.000000, 0.000014, 360.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(2283, -614.365112, -913.626403, 1437.240722, 0.000000, 0.000014, 179.999893, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 2266, "picture_frame", "CJ_PAINTING35", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19353, -609.646179, -909.578918, 1436.912475, 0.000000, 0.000007, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18029, "genintintsmallrest", "GB_restaursmll10", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(949, -617.486511, -913.011901, 1435.761596, 0.000007, 0.000025, 89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(949, -617.486511, -906.581787, 1435.761596, 0.000007, 0.000025, 89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(949, -610.106323, -913.011901, 1435.761596, 0.000014, 0.000025, 89.999923, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(949, -610.106323, -906.581787, 1435.761596, 0.000014, 0.000025, 89.999923, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(2242, -625.935791, -915.100952, 1435.337158, -0.000049, 0.000037, -89.999839, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(630, -625.945312, -915.183837, 1436.167968, -0.000049, 0.000037, -89.999839, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19812, -632.821838, -918.094055, 1434.707519, 0.000000, 0.000029, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(18880, -632.831909, -918.088073, 1435.223022, 0.000000, 0.000022, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(2242, -639.286010, -897.880615, 1435.337158, -0.000049, 0.000037, -89.999839, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(630, -639.295532, -897.963500, 1436.167968, -0.000049, 0.000037, -89.999839, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2242, -646.636413, -897.880615, 1435.337158, -0.000057, 0.000037, -89.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(630, -646.645935, -897.963500, 1436.167968, -0.000057, 0.000037, -89.999816, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19812, -632.821838, -918.094055, 1439.071533, 0.000000, 0.000029, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2452, -660.569641, -913.358154, 1435.228027, 0.000000, 0.000007, 179.999893, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(2452, -659.608337, -905.848022, 1435.228027, 0.000000, 0.000007, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(2452, -661.188232, -905.848022, 1435.228027, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19466, -660.134826, -906.268920, 1436.206787, 89.999992, 490.561737, -40.561828, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2452, -658.989746, -913.358154, 1435.228027, 0.000000, 0.000014, 179.999893, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19466, -660.043151, -912.937255, 1436.206787, 89.999992, 421.361145, -151.361251, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2452, -663.613769, -909.172302, 1435.228027, 0.000007, 0.000000, 89.999855, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(2452, -663.613769, -910.752197, 1435.228027, 0.000007, 0.000007, 89.999855, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 14576, "mafiacasinovault01", "ab_vaultmetal", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFD3D3D3);
	tmpobjid = CreateDynamicObjectEx(19466, -663.192871, -909.698791, 1436.206787, 89.999992, 336.886108, -156.886260, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -661.958496, -913.867980, 1436.922485, 0.000000, 0.000014, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -661.958496, -905.397705, 1436.922485, 0.000000, 0.000014, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19445, -664.048583, -909.057800, 1436.922485, 0.000000, 0.000014, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14661, "int_tatoo", "tattoo_wall1", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(949, -657.781372, -913.307617, 1435.761596, 0.000000, 0.000019, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(949, -663.231811, -913.307617, 1435.761596, 0.000000, 0.000019, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(949, -657.781372, -905.947204, 1435.761596, 0.000000, 0.000028, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(949, -663.231811, -905.947204, 1435.761596, 0.000000, 0.000028, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFDCDCDC);
	tmpobjid = CreateDynamicObjectEx(2007, -659.192382, -909.646911, 1434.712524, 0.000014, 0.000000, 89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2165, -660.135009, -909.602172, 1435.198730, 0.000000, -0.000066, 179.998580, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 4, 14665, "genintint711_1", "interiorwindowglow", 0xFFA9A9A9);
	SetDynamicObjectMaterial(tmpobjid, 5, 19962, "samproadsigns", "materialtext1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19835, -661.299926, -909.637207, 1436.075805, 0.000000, 0.000066, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(1714, -660.784912, -908.370239, 1435.207763, 0.000000, 0.000066, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19949, -660.783447, -910.006958, 1433.257202, 0.000000, 0.000044, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 4510, "barrierblk", "yellow_64", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 2, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19893, -660.762817, -909.657226, 1435.989013, 0.000014, -0.000058, 179.999374, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2007, -663.443054, -912.066894, 1435.233032, 0.000014, 0.000000, 89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(2007, -663.443054, -907.236511, 1435.233032, 0.000014, 0.000000, 89.999946, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -650.876708, -898.480773, 1441.044189, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -649.776306, -898.480773, 1441.044189, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -650.876708, -903.170959, 1441.044189, 0.000000, 0.000022, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -649.776306, -903.170959, 1441.044189, 0.000000, 0.000022, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -650.876708, -915.961608, 1441.044189, 0.000000, 0.000022, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -649.776306, -915.961608, 1441.044189, 0.000000, 0.000022, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -650.876708, -920.651794, 1441.044189, 0.000000, 0.000029, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -649.776306, -920.651794, 1441.044189, 0.000000, 0.000029, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -652.837158, -910.172424, 1441.044189, 0.000014, 0.000029, 89.999923, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -652.837158, -909.072021, 1441.044189, 0.000014, 0.000029, 89.999923, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -643.496520, -910.172424, 1441.044189, 0.000022, 0.000029, 89.999900, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -643.496520, -909.072021, 1441.044189, 0.000022, 0.000029, 89.999900, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -642.396118, -910.172424, 1441.044189, 0.000029, 0.000029, 89.999877, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -642.396118, -909.072021, 1441.044189, 0.000029, 0.000029, 89.999877, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -632.344299, -909.622192, 1441.044189, 0.000029, 0.000014, 179.999755, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -633.444702, -909.622192, 1441.044189, 0.000029, 0.000014, 179.999755, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -622.514770, -911.682800, 1441.044189, 0.000029, 0.000007, 179.999710, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -623.615173, -911.682800, 1441.044189, 0.000029, 0.000007, 179.999710, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -622.514770, -907.502136, 1441.044189, 0.000029, 0.000000, 179.999664, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -623.615173, -907.502136, 1441.044189, 0.000029, 0.000000, 179.999664, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -622.514770, -923.284362, 1441.044189, 0.000029, 0.000000, 179.999664, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -623.615173, -923.284362, 1441.044189, 0.000029, 0.000000, 179.999664, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -622.514770, -919.103698, 1441.044189, 0.000029, -0.000007, 179.999618, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -623.615173, -919.103698, 1441.044189, 0.000029, -0.000007, 179.999618, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -622.514770, -899.933349, 1441.044189, 0.000029, -0.000007, 179.999618, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -623.615173, -899.933349, 1441.044189, 0.000029, -0.000007, 179.999618, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -622.514770, -895.752685, 1441.044189, 0.000029, -0.000014, 179.999572, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -623.615173, -895.752685, 1441.044189, 0.000029, -0.000014, 179.999572, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -611.484802, -909.043762, 1441.044189, 0.000014, -0.000007, -90.000274, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -611.484802, -910.144165, 1441.044189, 0.000014, -0.000007, -90.000274, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -615.665466, -909.043762, 1441.044189, 0.000014, -0.000014, -90.000320, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -615.665466, -910.144165, 1441.044189, 0.000014, -0.000014, -90.000320, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -658.185607, -910.144165, 1441.044189, 0.000007, -0.000007, -90.000251, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -662.366271, -909.043762, 1441.044189, 0.000007, -0.000014, -90.000297, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -662.366271, -910.144165, 1441.044189, 0.000007, -0.000014, -90.000297, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -630.734680, -900.713195, 1441.044189, -0.000007, -0.000007, -90.000205, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -630.734680, -901.813598, 1441.044189, -0.000007, -0.000007, -90.000205, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -634.915344, -900.713195, 1441.044189, -0.000007, -0.000014, -90.000251, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -634.915344, -901.813598, 1441.044189, -0.000007, -0.000014, -90.000251, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -630.734680, -917.453247, 1441.044189, -0.000014, -0.000007, -90.000183, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -630.734680, -918.553649, 1441.044189, -0.000014, -0.000007, -90.000183, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -634.915344, -917.453247, 1441.044189, -0.000014, -0.000014, -90.000228, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -634.915344, -918.553649, 1441.044189, -0.000014, -0.000014, -90.000228, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -630.734680, -922.454101, 1441.044189, -0.000022, -0.000007, -90.000160, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -634.915344, -922.454101, 1441.044189, -0.000022, -0.000014, -90.000205, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -630.734680, -897.173217, 1441.044189, -0.000029, -0.000007, -90.000137, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -634.915344, -897.173217, 1441.044189, -0.000029, -0.000014, -90.000183, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -642.874877, -898.903564, 1441.044189, -0.000029, 0.000007, -0.000167, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -642.874877, -903.084228, 1441.044189, -0.000029, 0.000000, -0.000213, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -642.874877, -916.173522, 1441.044189, -0.000029, 0.000014, -0.000167, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(18762, -642.874877, -920.354187, 1441.044189, -0.000029, 0.000007, -0.000213, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_fluorescent2", 0xFFF0FFFF);
	tmpobjid = CreateDynamicObjectEx(19883, -627.385742, -896.408996, 1435.217407, 0.000012, 0.000036, 89.998878, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFA9A9A9);
	tmpobjid = CreateDynamicObjectEx(19883, -631.815917, -896.408996, 1435.217407, 0.000012, 0.000036, 89.998878, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFA9A9A9);
	tmpobjid = CreateDynamicObjectEx(19883, -633.435974, -896.408996, 1435.217407, 0.000012, 0.000036, 89.998878, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFA9A9A9);
	tmpobjid = CreateDynamicObjectEx(19883, -637.866699, -896.408996, 1435.217407, 0.000012, 0.000036, 89.998878, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFA9A9A9);
	tmpobjid = CreateDynamicObjectEx(19883, -637.786621, -922.869323, 1435.217407, 0.000011, 0.000036, -90.001091, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFA9A9A9);
	tmpobjid = CreateDynamicObjectEx(19883, -633.356445, -922.869323, 1435.217407, 0.000011, 0.000036, -90.001091, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFA9A9A9);
	tmpobjid = CreateDynamicObjectEx(19883, -631.736389, -922.869323, 1435.217407, 0.000011, 0.000036, -90.001091, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFA9A9A9);
	tmpobjid = CreateDynamicObjectEx(19883, -627.305664, -922.869323, 1435.217407, 0.000011, 0.000036, -90.001091, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFF0FFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 14576, "mafiacasinovault01", "ab_vaultmetal", 0xFFA9A9A9);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObjectEx(1721, -639.826477, -909.970397, 1435.203002, 0.000007, 0.000000, -89.999992, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -639.826477, -909.220214, 1435.203002, 0.000007, 0.000000, -89.999992, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -653.537353, -903.729675, 1435.203002, -0.000007, 0.000000, -89.999977, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -653.537353, -901.959960, 1435.203002, -0.000007, 0.000000, -89.999977, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -653.537353, -902.869750, 1435.203002, -0.000007, 0.000000, -89.999977, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -653.537353, -901.110290, 1435.203002, -0.000007, 0.000000, -89.999977, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -645.686523, -909.220275, 1435.203002, 0.000007, 0.000000, 89.999977, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -645.686523, -909.970458, 1435.203002, 0.000007, 0.000000, 89.999977, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -643.241882, -912.635498, 1435.203002, 0.000000, -0.000007, -179.999893, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -642.491699, -912.635498, 1435.203002, 0.000000, -0.000007, -179.999893, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -642.491760, -906.595397, 1435.203002, 0.000000, -0.000007, 0.000091, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -643.241943, -906.595397, 1435.203002, 0.000000, -0.000007, 0.000091, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -631.578308, -909.729797, 1435.203002, -0.000014, 0.000014, 0.000014, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -633.348022, -909.729797, 1435.203002, -0.000014, 0.000014, 0.000014, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -632.438232, -909.729797, 1435.203002, -0.000014, 0.000014, 0.000014, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -634.197692, -909.729797, 1435.203002, -0.000014, 0.000014, 0.000014, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -618.587829, -906.918762, 1435.203002, -0.000036, 0.000052, 90.000053, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -618.587829, -907.778686, 1435.203002, -0.000036, 0.000052, 90.000053, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -653.558044, -918.529052, 1435.203002, -0.000037, 0.000051, -89.999885, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -653.558044, -916.759338, 1435.203002, -0.000037, 0.000051, -89.999885, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -653.558044, -917.669128, 1435.203002, -0.000037, 0.000051, -89.999885, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -653.558044, -915.909667, 1435.203002, -0.000037, 0.000051, -89.999885, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1008, -637.873657, -896.429443, 1436.257080, -0.000012, 89.999984, -90.005249, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1008, -633.442626, -896.429443, 1436.257080, -0.000012, 89.999969, -90.005340, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1008, -631.823730, -896.429443, 1436.257080, -0.000029, 89.999984, -90.005203, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1008, -627.392700, -896.429443, 1436.257080, -0.000029, 89.999969, -90.005294, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19828, -633.693298, -895.790527, 1436.363525, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19828, -637.593383, -895.790527, 1436.363525, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19828, -631.543273, -895.790527, 1436.363525, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19828, -627.612915, -895.790527, 1436.363525, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2854, -631.048583, -903.321105, 1435.658325, 0.000007, 0.000000, 89.999977, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1008, -627.302734, -922.842163, 1436.257080, -0.000012, 89.999984, 89.994689, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1008, -631.733764, -922.842163, 1436.257080, -0.000012, 89.999969, 89.994598, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19828, -631.502990, -923.481384, 1436.363525, 0.000000, -0.000014, 179.999801, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19828, -627.602905, -923.481384, 1436.363525, 0.000000, -0.000014, 179.999801, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19828, -633.653015, -923.481384, 1436.363525, 0.000000, -0.000014, 179.999801, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19828, -637.583374, -923.481384, 1436.363525, 0.000000, -0.000014, 179.999801, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1008, -633.352661, -922.842163, 1436.257080, -0.000028, 89.999984, 89.994735, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1008, -637.783691, -922.842163, 1436.257080, -0.000028, 89.999969, 89.994644, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2854, -634.108642, -916.020996, 1435.658325, 0.000007, 0.000000, 89.999977, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -650.855957, -907.536193, 1435.203002, 0.000007, 0.000000, 118.799964, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -650.634277, -911.588684, 1435.203002, 0.000007, 0.000000, 60.999935, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -620.687561, -902.879516, 1435.212524, -0.000020, 0.000029, 0.000037, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -624.868896, -902.879516, 1435.212524, -0.000020, 0.000029, 0.000037, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -620.687561, -901.529907, 1435.212524, -0.000020, 0.000029, 0.000037, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -621.367736, -901.529907, 1435.212524, -0.000020, 0.000029, 0.000037, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -624.168945, -901.529907, 1435.212524, -0.000020, 0.000029, 0.000037, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -624.868896, -901.529907, 1435.212524, -0.000020, 0.000029, 0.000037, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -620.687561, -900.259033, 1435.212524, -0.000029, 0.000029, 0.000060, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -621.367736, -900.259033, 1435.212524, -0.000029, 0.000029, 0.000060, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -624.168945, -900.259033, 1435.212524, -0.000029, 0.000029, 0.000060, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -624.868896, -900.259033, 1435.212524, -0.000029, 0.000029, 0.000060, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19610, -622.898437, -895.755065, 1436.865722, 49.999938, 0.000038, 0.000029, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -620.687561, -899.068603, 1435.212524, -0.000036, 0.000029, 0.000082, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -621.367736, -899.068603, 1435.212524, -0.000036, 0.000029, 0.000082, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -624.168945, -899.068603, 1435.212524, -0.000036, 0.000029, 0.000082, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1721, -624.868896, -899.068603, 1435.212524, -0.000036, 0.000029, 0.000082, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2855, -623.061706, -909.560913, 1435.693237, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -659.731140, -905.873962, 1436.318237, 0.000000, 0.000007, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -658.947082, -905.796569, 1436.297485, 0.000000, 0.000007, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -659.371093, -905.873962, 1436.318237, -0.000004, -0.000004, -135.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -659.731140, -905.873962, 1435.457397, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -658.947082, -905.796569, 1435.436645, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -659.371093, -905.873962, 1435.457397, -0.000009, -0.000009, -135.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -661.311035, -905.873962, 1436.318237, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -660.526977, -905.796569, 1436.297485, 0.000000, 0.000014, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -660.950988, -905.873962, 1436.318237, -0.000009, -0.000009, -135.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -661.311035, -905.873962, 1435.457397, 0.000000, 0.000022, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -660.526977, -905.796569, 1435.436645, 0.000000, 0.000022, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -660.950988, -905.873962, 1435.457397, -0.000015, -0.000015, -135.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -660.446838, -913.332214, 1436.318237, 0.000000, 0.000007, 179.999893, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -661.230895, -913.409606, 1436.297485, 0.000000, 0.000007, 179.999893, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -660.806884, -913.332214, 1436.318237, -0.000004, -0.000004, 44.999984, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -660.446838, -913.332214, 1435.457397, 0.000000, 0.000014, 179.999893, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -661.230895, -913.409606, 1435.436645, 0.000000, 0.000014, 179.999893, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -660.806884, -913.332214, 1435.457397, -0.000009, -0.000009, 44.999984, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -658.866943, -913.332214, 1436.318237, 0.000000, 0.000014, 179.999893, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -659.651000, -913.409606, 1436.297485, 0.000000, 0.000014, 179.999893, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -659.226989, -913.332214, 1436.318237, -0.000009, -0.000009, 44.999984, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -658.866943, -913.332214, 1435.457397, 0.000000, 0.000022, 179.999893, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -659.651000, -913.409606, 1435.436645, 0.000000, 0.000022, 179.999893, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -659.226989, -913.332214, 1435.457397, -0.000015, -0.000015, 44.999984, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -663.587829, -909.295104, 1436.318237, 0.000007, 0.000000, 89.999855, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -663.665222, -908.511047, 1436.297485, 0.000007, 0.000000, 89.999855, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -663.587829, -908.935058, 1436.318237, -0.000004, 0.000004, -45.000003, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -663.587829, -909.295104, 1435.457397, 0.000007, 0.000007, 89.999855, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -663.665222, -908.511047, 1435.436645, 0.000007, 0.000007, 89.999855, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -663.587829, -908.935058, 1435.457397, -0.000009, 0.000000, -45.000003, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -663.587829, -910.875000, 1436.318237, 0.000007, 0.000007, 89.999855, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -663.665222, -910.090942, 1436.297485, 0.000007, 0.000007, 89.999855, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -663.587829, -910.514953, 1436.318237, -0.000009, 0.000000, -45.000003, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -663.587829, -910.875000, 1435.457397, 0.000007, 0.000014, 89.999855, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -663.665222, -910.090942, 1435.436645, 0.000007, 0.000014, 89.999855, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -663.587829, -910.514953, 1435.457397, -0.000015, -0.000004, -45.000003, 300.00, 300.00);
	// Pathway Interior to Cloning Lab
	ointerior = 15,vw = -1;
	tmpobjid = CreateDynamicObject(19791, 2287.570068, -1017.456970, 1039.055541, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8462, "vgsecoast", "des_grass2scrub", 0);
	tmpobjid = CreateDynamicObject(19791, 2278.917724, -1012.658996, 1037.664062, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8462, "vgsecoast", "des_grass2scrub", 0);
	tmpobjid = CreateDynamicObject(19791, 2282.556396, -1003.273010, 1047.426635, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19791, 2291.036132, -1007.974975, 1048.789428, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19791, 2294.712402, -1021.424987, 1050.139404, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19791, 2281.248291, -1025.369018, 1048.735839, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	SetDynamicObjectMaterial(tmpobjid, 9, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19791, 2272.588378, -1020.567016, 1047.343872, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19791, 2269.203613, -1007.267028, 1046.035522, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19791, 2285.158691, -1016.158996, 1058.544433, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19791, 2276.515625, -1011.366027, 1057.155151, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(3109, 2289.842041, -1019.755981, 1050.771118, 0.000000, -8.799999, -28.200000, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 2288.600341, -1014.552978, 1049.268676, 0.000000, -8.699995, -28.899999, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 2283.132568, -1011.533996, 1048.312622, 0.000000, -8.699995, -28.899999, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 2277.903564, -1008.645996, 1047.428344, 0.000000, -8.699995, -28.899999, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 2274.910644, -1014.065002, 1047.428344, 0.000000, -8.699995, -28.899999, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 2280.098632, -1016.931030, 1048.334838, 0.000000, -8.699995, -28.899999, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 2285.533203, -1019.895996, 1049.212036, -0.299998, -6.999996, -29.200000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1497, 2273.083007, -1010.418029, 1046.898559, -7.099997, 0.000000, 61.199985, vw, ointerior);
	tmpobjid = CreateDynamicObject(821, 2286.166503, -1012.163024, 1048.514404, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(821, 2280.965576, -1009.422973, 1047.904052, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(821, 2276.395996, -1015.802978, 1047.904052, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(821, 2282.895751, -1018.791992, 1048.454467, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(821, 2287.256103, -1020.723022, 1049.244873, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(821, 2289.756835, -1015.413024, 1049.244873, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3935, 2273.674072, -1011.476989, 1048.419433, 0.000000, 0.000000, -117.500000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3935, 2275.051025, -1008.833984, 1048.379150, 0.000000, 0.000000, -117.500000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19791, 2242.523437, -999.497985, 1036.807373, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10932, "station_sfse", "ws_sandstone2", -12108537);
	tmpobjid = CreateDynamicObject(19791, 2242.523437, -989.508178, 1046.667358, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12911, "sw_farm1", "sw_barnwood1", -5438203);
	tmpobjid = CreateDynamicObject(19791, 2252.513916, -999.447998, 1046.667358, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12911, "sw_farm1", "sw_barnwood1", -5438203);
	tmpobjid = CreateDynamicObject(19791, 2242.563964, -1009.447021, 1046.667358, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12911, "sw_farm1", "sw_barnwood1", -5438203);
	tmpobjid = CreateDynamicObject(19791, 2232.610107, -999.477111, 1046.667358, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12911, "sw_farm1", "sw_barnwood1", -5438203);
	tmpobjid = CreateDynamicObject(19791, 2242.523437, -999.497985, 1052.805541, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10932, "station_sfse", "ws_sandstone2", -12108537);
	tmpobjid = CreateDynamicObject(19858, 2247.486572, -998.712707, 1048.077758, 0.000000, 0.000000, 91.399986, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 18245, "cw_junkyardmachin", "Was_scrpyd_door_in_hngr", 0);
	tmpobjid = CreateDynamicObject(3533, 2242.755126, -999.266418, 1054.068847, 0.000000, 179.100021, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1089, 2243.434570, -999.336791, 1050.983764, 95.400032, 6.699996, 79.099983, vw, ointerior);
	tmpobjid = CreateDynamicObject(18702, 2242.761230, -998.101501, 1048.491210, 92.099983, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18702, 2242.831298, -997.172302, 1048.525146, 92.099983, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1827, 2242.745605, -999.257080, 1047.427246, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3383, 2238.448242, -999.668029, 1046.766967, 0.000000, 0.000000, -89.899971, vw, ointerior);
	tmpobjid = CreateDynamicObject(3111, 2238.434814, -999.343505, 1047.837524, 0.000000, 0.000000, 89.500007, vw, ointerior);
	tmpobjid = CreateDynamicObject(2894, 2238.353515, -1000.687011, 1047.807373, 0.000000, 0.000000, 89.799972, vw, ointerior);
	tmpobjid = CreateDynamicObject(19921, 2238.478027, -998.490112, 1047.897460, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14455, 2240.689453, -1004.463989, 1048.528076, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19899, 2241.032226, -994.939880, 1046.796752, 0.000000, 0.000000, -89.900001, vw, ointerior);
	tmpobjid = CreateDynamicObject(19815, 2243.952148, -994.514282, 1048.497802, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19120, 2240.916503, -995.085327, 1048.133056, -9.500036, -89.700012, -177.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(19120, 2241.416748, -995.066528, 1048.135742, -9.500036, -89.700012, -177.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(19120, 2241.916748, -995.047912, 1048.138427, -9.500036, -89.700012, -177.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(18634, 2240.374267, -994.960815, 1048.422851, 0.000000, 90.499992, 72.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(2894, 2240.203613, -995.043823, 1048.037719, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19590, 2242.898925, -999.108825, 1047.888549, 0.000000, -90.499977, -39.099990, vw, ointerior);
	tmpobjid = CreateDynamicObject(3395, 2246.993896, -1001.172973, 1046.807250, 0.000000, 0.000000, 1.299998, vw, ointerior);
	tmpobjid = CreateDynamicObject(3384, 2246.864013, -1003.599975, 1047.807373, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2616, 2237.652099, -1002.645019, 1048.447753, 0.000000, 0.000000, 89.899993, vw, ointerior);
	tmpobjid = CreateDynamicObject(19273, 2247.568847, -996.747009, 1048.087646, 0.000000, 0.000000, -91.399986, vw, ointerior);
 
	// Cloning Lab Interior
	ointerior = 16,vw = -1;
	tmpobjid = CreateDynamicObject(19791, 2287.570068, -1017.456970, 1039.055541, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8462, "vgsecoast", "des_grass2scrub", 0);
	tmpobjid = CreateDynamicObject(19791, 2278.917724, -1012.658996, 1037.664062, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8462, "vgsecoast", "des_grass2scrub", 0);
	tmpobjid = CreateDynamicObject(19791, 2282.556396, -1003.273010, 1047.426635, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19791, 2291.036132, -1007.974975, 1048.789428, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19791, 2294.712402, -1021.424987, 1050.139404, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19791, 2281.248291, -1025.369018, 1048.735839, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	SetDynamicObjectMaterial(tmpobjid, 9, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19791, 2272.588378, -1020.567016, 1047.343872, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19791, 2269.203613, -1007.267028, 1046.035522, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19791, 2285.158691, -1016.158996, 1058.544433, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(19791, 2276.515625, -1011.366027, 1057.155151, 0.099999, -7.999998, -29.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 8671, "vegassland62", "ws_stonewall", 0);
	tmpobjid = CreateDynamicObject(3109, 2289.842041, -1019.755981, 1050.771118, 0.000000, -8.799999, -28.200000, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 2288.600341, -1014.552978, 1049.268676, 0.000000, -8.699995, -28.899999, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 2283.132568, -1011.533996, 1048.312622, 0.000000, -8.699995, -28.899999, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 2277.903564, -1008.645996, 1047.428344, 0.000000, -8.699995, -28.899999, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 2274.910644, -1014.065002, 1047.428344, 0.000000, -8.699995, -28.899999, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 2280.098632, -1016.931030, 1048.334838, 0.000000, -8.699995, -28.899999, vw, ointerior);
	tmpobjid = CreateDynamicObject(738, 2285.533203, -1019.895996, 1049.212036, -0.299998, -6.999996, -29.200000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1497, 2273.083007, -1010.418029, 1046.898559, -7.099997, 0.000000, 61.199985, vw, ointerior);
	tmpobjid = CreateDynamicObject(821, 2286.166503, -1012.163024, 1048.514404, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(821, 2280.965576, -1009.422973, 1047.904052, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(821, 2276.395996, -1015.802978, 1047.904052, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(821, 2282.895751, -1018.791992, 1048.454467, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(821, 2287.256103, -1020.723022, 1049.244873, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(821, 2289.756835, -1015.413024, 1049.244873, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3935, 2273.674072, -1011.476989, 1048.419433, 0.000000, 0.000000, -117.500000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3935, 2275.051025, -1008.833984, 1048.379150, 0.000000, 0.000000, -117.500000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19791, 2242.523437, -999.497985, 1036.807373, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10932, "station_sfse", "ws_sandstone2", -12108537);
	tmpobjid = CreateDynamicObject(19791, 2242.523437, -989.508178, 1046.667358, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12911, "sw_farm1", "sw_barnwood1", -5438203);
	tmpobjid = CreateDynamicObject(19791, 2252.513916, -999.447998, 1046.667358, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12911, "sw_farm1", "sw_barnwood1", -5438203);
	tmpobjid = CreateDynamicObject(19791, 2242.563964, -1009.447021, 1046.667358, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12911, "sw_farm1", "sw_barnwood1", -5438203);
	tmpobjid = CreateDynamicObject(19791, 2232.610107, -999.477111, 1046.667358, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 12911, "sw_farm1", "sw_barnwood1", -5438203);
	tmpobjid = CreateDynamicObject(19791, 2242.523437, -999.497985, 1052.805541, 0.000000, 0.000000, 0.000000, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 10932, "station_sfse", "ws_sandstone2", -12108537);
	tmpobjid = CreateDynamicObject(19858, 2247.486572, -998.712707, 1048.077758, 0.000000, 0.000000, 91.399986, vw, ointerior);
	SetDynamicObjectMaterial(tmpobjid, 0, 18245, "cw_junkyardmachin", "Was_scrpyd_door_in_hngr", 0);
	tmpobjid = CreateDynamicObject(3533, 2242.755126, -999.266418, 1054.068847, 0.000000, 179.100021, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1089, 2243.434570, -999.336791, 1050.983764, 95.400032, 6.699996, 79.099983, vw, ointerior);
	tmpobjid = CreateDynamicObject(18702, 2242.761230, -998.101501, 1048.491210, 92.099983, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(18702, 2242.831298, -997.172302, 1048.525146, 92.099983, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(1827, 2242.745605, -999.257080, 1047.427246, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(3383, 2238.448242, -999.668029, 1046.766967, 0.000000, 0.000000, -89.899971, vw, ointerior);
	tmpobjid = CreateDynamicObject(3111, 2238.434814, -999.343505, 1047.837524, 0.000000, 0.000000, 89.500007, vw, ointerior);
	tmpobjid = CreateDynamicObject(2894, 2238.353515, -1000.687011, 1047.807373, 0.000000, 0.000000, 89.799972, vw, ointerior);
	tmpobjid = CreateDynamicObject(19921, 2238.478027, -998.490112, 1047.897460, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(14455, 2240.689453, -1004.463989, 1048.528076, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19899, 2241.032226, -994.939880, 1046.796752, 0.000000, 0.000000, -89.900001, vw, ointerior);
	tmpobjid = CreateDynamicObject(19815, 2243.952148, -994.514282, 1048.497802, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19120, 2240.916503, -995.085327, 1048.133056, -9.500036, -89.700012, -177.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(19120, 2241.416748, -995.066528, 1048.135742, -9.500036, -89.700012, -177.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(19120, 2241.916748, -995.047912, 1048.138427, -9.500036, -89.700012, -177.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(18634, 2240.374267, -994.960815, 1048.422851, 0.000000, 90.499992, 72.800003, vw, ointerior);
	tmpobjid = CreateDynamicObject(2894, 2240.203613, -995.043823, 1048.037719, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(19590, 2242.898925, -999.108825, 1047.888549, 0.000000, -90.499977, -39.099990, vw, ointerior);
	tmpobjid = CreateDynamicObject(3395, 2246.993896, -1001.172973, 1046.807250, 0.000000, 0.000000, 1.299998, vw, ointerior);
	tmpobjid = CreateDynamicObject(3384, 2246.864013, -1003.599975, 1047.807373, 0.000000, 0.000000, 0.000000, vw, ointerior);
	tmpobjid = CreateDynamicObject(2616, 2237.652099, -1002.645019, 1048.447753, 0.000000, 0.000000, 89.899993, vw, ointerior);
	tmpobjid = CreateDynamicObject(19273, 2247.568847, -996.747009, 1048.087646, 0.000000, 0.000000, -91.399986, vw, ointerior);

	// DSRP Maps
	DSRP_Church();
	DSRP_ApartmentComplex();
	DSRP_Sewers();
	DSRP_UnidentifiedPastebin();
	DSRP_Park();
	// mappings finished

	new xhour,xmin,xsec;
	gettime(xhour, xmin, xsec);
	xhour = GetSVarInt("IChour");
	SetSVarInt("IChour", xhour);
	printf("[SERVERTIME] %d:%d:%d", xhour,xmin,xsec);
	new ichour = xhour;
	if(ichour >= 6 && ichour <= 20)
	{
		printf(">>>>>>>>>>>>>>>>>>>>>>>>> DAY (ichour: %d)", ichour);
		SetWorldTime(ichour);
	 	DayTimer = SetTimer("DayTime", 71, true); 
		day_condition = 1;
	}
	else 
	{
		printf(">>>>>>>>>>>>>>>>>>>>>>>>> NIGHT (ichour: %d)", ichour);
		NightTimer = SetTimer("NightTime", 2300, true); 
		SetWorldTime(0);
		day_condition = 0;
	}

	serverhud = TextDrawCreate(579.000000, 25.000000, "hud");
	TextDrawFont(serverhud, 1);
	TextDrawLetterSize(serverhud, 0.174997, 0.849995);
	TextDrawTextSize(serverhud, -114.000000, 120.000000);
	TextDrawSetOutline(serverhud, 1);
	TextDrawSetShadow(serverhud, 0);
	TextDrawAlignment(serverhud, 2);
	TextDrawColor(serverhud, -1);
	TextDrawBackgroundColor(serverhud, 255);
	TextDrawBoxColor(serverhud, 101);
	TextDrawUseBox(serverhud, 0);
	TextDrawSetProportional(serverhud, 1);
	TextDrawSetSelectable(serverhud, 0);	
	printf("[OnGameModeInIt] Took %d MS to process everything.",GetTickCount()-tick);
	return 1;
}
DSRP_Church() {
	CreateObject(9931, 1242.17004, -1016.40002, 1085.51001,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1247.27002, -989.42999, 1068.88000,   0.00000, 0.00000, 359.89999);
	CreateObject(9931, 1242.18005, -983.34998, 1085.51001,   0.00000, 0.00000, 0.00000);
	CreateObject(18783, 1259.22998, -1000.77002, 1066.37000,   0.00000, 0.00000, 0.00000);
	CreateObject(18783, 1239.25000, -999.02002, 1066.37000,   0.00000, 0.00000, 0.00000);
	CreateObject(11472, 1237.62000, -999.96997, 1066.31995,   0.00000, 0.00000, 180.00000);
	CreateObject(8131, 1241.25000, -999.98999, 1079.52002,   0.00000, 0.00000, 90.00000);
	CreateObject(948, 1244.02002, -996.73999, 1068.66003,   0.00000, 0.00000, 0.00000);
	CreateObject(948, 1243.98999, -1003.27002, 1068.66003,   0.00000, 0.00000, 0.00000);
	CreateObject(1742, 1261.44995, -1007.17999, 1068.85999,   0.00000, 0.00000, 270.00000);
	CreateObject(1742, 1261.54004, -992.15997, 1068.85999,   0.00000, 0.00000, 270.00000);
	CreateObject(1742, 1261.52002, -993.58002, 1068.85999,   0.00000, 0.00000, 270.00000);
	CreateObject(1742, 1261.53003, -995.01001, 1068.85999,   0.00000, 0.00000, 270.00000);
	CreateObject(1742, 1261.52002, -996.45001, 1068.85999,   0.00000, 0.00000, 270.00000);
	CreateObject(1742, 1261.46997, -1002.89001, 1068.85999,   0.00000, 0.00000, 270.00000);
	CreateObject(1742, 1261.46997, -1004.32001, 1068.85999,   0.00000, 0.00000, 270.00000);
	CreateObject(1742, 1261.44995, -1005.76001, 1068.85999,   0.00000, 0.00000, 270.00000);
	CreateObject(948, 1261.21997, -997.66998, 1068.85999,   0.00000, 0.00000, 0.00000);
	CreateObject(948, 1261.16003, -1002.13000, 1068.85999,   0.00000, 0.00000, 0.00000);
	CreateObject(2597, 1263.06995, -1002.17999, 1069.69995,   0.00000, 0.00000, 0.00000);
	CreateObject(2597, 1264.03003, -997.66998, 1069.69995,   0.00000, 0.00000, 0.00000);
	CreateObject(2960, 1261.53003, -995.59998, 1074.50000,   0.00000, 90.00000, 0.00000);
	CreateObject(2960, 1261.31995, -1004.40002, 1077.45996,   0.00000, 0.00000, 270.00000);
	CreateObject(2960, 1261.57996, -1004.50000, 1077.31006,   0.00000, 90.00000, 0.00000);
	CreateObject(2960, 1266.87000, -999.97998, 1077.45996,   0.00000, 0.00000, 270.00000);
	CreateObject(2960, 1261.53003, -995.59998, 1077.31006,   0.00000, 90.00000, 0.00000);
	CreateObject(2960, 1267.15002, -999.81000, 1077.42004,   0.00000, 90.00000, 0.00000);
	CreateObject(2842, 1243.27002, -1000.52002, 1068.85999,   0.00000, 0.00000, 0.00000);
	CreateObject(2842, 1259.43994, -1000.52002, 1068.85999,   0.00000, 0.00000, 0.00000);
	CreateObject(2842, 1257.65002, -1000.52002, 1068.85999,   0.00000, 0.00000, 0.00000);
	CreateObject(2842, 1255.84998, -1000.52002, 1068.85999,   0.00000, 0.00000, 0.00000);
	CreateObject(2842, 1254.04004, -1000.52002, 1068.85999,   0.00000, 0.00000, 0.00000);
	CreateObject(2842, 1252.21997, -1000.51001, 1068.85999,   0.00000, 0.00000, 0.00000);
	CreateObject(2842, 1250.41003, -1000.51001, 1068.85999,   0.00000, 0.00000, 0.00000);
	CreateObject(2842, 1248.57996, -1000.51001, 1068.85999,   0.00000, 0.00000, 0.00000);
	CreateObject(2842, 1246.76001, -1000.52002, 1068.85999,   0.00000, 0.00000, 0.00000);
	CreateObject(2842, 1245.06995, -1000.52002, 1068.85999,   0.00000, 0.00000, 0.00000);
	CreateObject(2887, 1243.33997, -993.60999, 1067.51001,   90.00000, 0.00000, 0.00000);
	CreateObject(2887, 1243.90002, -1004.70001, 1067.51001,   90.00000, 0.00000, 0.00000);
	CreateObject(2745, 1243.30005, -994.39001, 1070.05005,   0.00000, 0.00000, 90.00000);
	CreateObject(3935, 1243.89001, -1005.56000, 1069.71997,   0.00000, 0.00000, 270.00000);
	CreateObject(2808, 1257.98999, -992.87000, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1252.03003, -1002.40002, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1257.98999, -995.02002, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1257.95996, -1006.71002, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1254.76001, -1006.75000, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1254.59998, -995.09003, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1254.60999, -992.95001, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1251.60999, -993.06000, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1251.63000, -995.22998, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1251.62000, -997.40997, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1252.02002, -1006.72998, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1252.02002, -1004.56000, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1254.59998, -997.26001, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1254.77002, -1002.46002, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1254.76001, -1004.59998, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1257.98999, -997.19000, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1257.98999, -1002.38000, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(2808, 1257.97998, -1004.56000, 1069.45996,   0.00000, 0.00000, 90.00000);
	CreateObject(6959, 1245.63000, -1013.91998, 1088.45996,   45.00000, 0.00000, 0.00000);
	CreateObject(6959, 1248.58997, -986.01001, 1088.02002,   135.00000, 0.00000, 0.00000);
	CreateObject(6959, 1266.98999, -999.92999, 1088.46997,   90.00000, 0.00000, 90.00000);
	CreateObject(6959, 1227.33997, -999.95001, 1088.46997,   90.00000, 0.00000, 90.00000);
	CreateObject(1491, 1266.96997, -999.08002, 1068.79004,   0.00000, 0.00000, 270.00000);
	CreateObject(1549, 1265.64001, -1002.15997, 1068.85999,   0.00000, 0.00000, 261.60999);
	CreateObject(1549, 1265.77002, -997.57001, 1068.85999,   0.00000, 0.00000, 306.98001);
	CreateObject(2597, 1264.97998, -997.71002, 1069.69995,   0.00000, 0.00000, 0.00000);
	CreateObject(2597, 1263.16003, -997.81000, 1069.69995,   0.00000, 0.00000, 0.00000);
	CreateObject(2597, 1264.68005, -1002.23999, 1069.69995,   0.00000, 0.00000, 0.00000);
	CreateObject(2597, 1263.91003, -1002.20001, 1069.69995,   0.00000, 0.00000, 0.00000);
	CreateObject(1826, 1239.31995, -1000.62000, 1069.31995,   0.00000, 0.00000, 90.00000);
	CreateObject(1486, 1239.39001, -1000.48999, 1070.27002,   0.00000, 0.00000, 0.00000);
	CreateObject(2894, 1239.21997, -1000.04999, 1070.14001,   0.00000, 0.00000, 90.00000);
	CreateObject(2869, 1239.33997, -999.32001, 1070.13000,   0.00000, 0.00000, 358.67999);
	CreateObject(2869, 1239.31995, -1000.79999, 1070.13000,   0.00000, 0.00000, 289.89999);
	CreateObject(1720, 1247.15002, -1002.64001, 1068.87000,   0.00000, 0.00000, 270.00000);
	CreateObject(1720, 1248.18005, -1002.63000, 1068.87000,   0.00000, 0.00000, 270.00000);
	CreateObject(1720, 1247.09998, -998.58002, 1068.87000,   0.00000, 0.00000, 270.00000);
	CreateObject(1720, 1247.09998, -997.67999, 1068.87000,   0.00000, 0.00000, 270.00000);
	CreateObject(1720, 1248.08997, -997.60999, 1068.87000,   0.00000, 0.00000, 270.00000);
	CreateObject(1720, 1248.13000, -998.53998, 1068.87000,   0.00000, 0.00000, 270.00000);
	CreateObject(1720, 1249.10999, -998.52002, 1068.87000,   0.00000, 0.00000, 270.00000);
	CreateObject(1720, 1249.10999, -997.48999, 1068.87000,   0.00000, 0.00000, 270.00000);
	CreateObject(1720, 1247.16003, -1001.60999, 1068.87000,   0.00000, 0.00000, 270.00000);
	CreateObject(1720, 1249.21997, -1002.65002, 1068.87000,   0.00000, 0.00000, 270.00000);
	CreateObject(1720, 1248.19995, -1001.65997, 1068.87000,   0.00000, 0.00000, 270.00000);
	CreateObject(1720, 1249.23999, -1001.66998, 1068.87000,   0.00000, 0.00000, 270.00000);
	CreateObject(7666, 1242.70996, -999.92999, 1079.84998,   0.00000, 0.00000, 25.23000);
	CreateObject(2960, 1261.57996, -1004.50000, 1074.55005,   0.00000, 90.00000, 0.00000);
	CreateObject(2960, 1267.05005, -999.81000, 1074.55005,   0.00000, 90.00000, 0.00000);
	CreateObject(2960, 1261.29004, -995.51001, 1077.45996,   0.00000, 0.00000, 270.00000);
}
DSRP_ApartmentComplex() {
	CreateObject(14596, 416.92703, 512.25531, 1000.41016,   0.00000, 0.00000, 0.00000);
	CreateObject(18765, 411.47760, 517.00049, 987.22772,   0.00000, 0.00000, 0.00000);
	CreateObject(18765, 401.47760, 517.00049, 987.22772,   0.00000, 0.00000, 0.00000);
	CreateObject(19447, 416.50781, 517.64398, 991.46301,   0.00000, 0.00000, 0.00000);
	CreateObject(19447, 411.64780, 522.00403, 991.46301,   0.00000, 0.00000, 90.00000);
	CreateObject(19447, 402.01199, 522.00403, 991.46301,   0.00000, 0.00000, 90.00000);
	CreateObject(19447, 397.14780, 517.64398, 991.46301,   0.00000, 0.00000, 0.00000);
	CreateObject(19447, 408.42999, 513.37372, 991.46301,   0.00000, 0.00000, 90.00000);
	CreateObject(19447, 398.79401, 513.37372, 991.46301,   0.00000, 0.00000, 90.00000);
	CreateObject(19377, 411.18051, 518.18579, 993.29871,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 400.67899, 518.18579, 993.29871,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 406.32169, 516.23523, 995.42938,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 395.82001, 516.23523, 995.42938,   0.00000, 90.00000, 0.00000);
	CreateObject(19389, 410.56879, 516.03308, 997.26978,   0.00000, 0.00000, 0.00000);
	CreateObject(19451, 406.71121, 512.82239, 997.26978,   0.00000, 0.00000, 90.00000);
	CreateObject(19432, 411.07379, 513.87018, 997.26978,   0.00000, 0.00000, 40.00000);
	CreateObject(19432, 411.07379, 518.19019, 997.26978,   0.00000, 0.00000, -40.00000);
	CreateObject(19359, 411.58099, 512.56390, 997.26978,   0.00000, 0.00000, 0.00000);
	CreateObject(19359, 411.58099, 519.68390, 997.26978,   0.00000, 0.00000, 0.00000);
	CreateObject(19451, 406.71121, 519.26239, 997.26978,   0.00000, 0.00000, 90.00000);
	CreateObject(19451, 397.07690, 519.26239, 997.26978,   0.00000, 0.00000, 90.00000);
	CreateObject(19451, 397.07690, 512.82239, 997.26978,   0.00000, 0.00000, 90.00000);
	CreateObject(19451, 393.73929, 516.21240, 997.26978,   0.00000, 0.00000, 0.00000);
	CreateObject(19377, 406.32169, 516.23523, 999.09869,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 395.82001, 516.23523, 999.09869,   0.00000, 90.00000, 0.00000);
	CreateObject(19379, 406.34091, 515.88342, 1001.22858,   0.00000, 90.00000, 0.00000);
	CreateObject(19379, 395.83890, 515.88342, 1001.22858,   0.00000, 90.00000, 0.00000);
	CreateObject(19379, 406.34091, 506.24890, 1001.22858,   0.00000, 90.00000, 0.00000);
	CreateObject(19379, 395.83890, 506.24890, 1001.22858,   0.00000, 90.00000, 0.00000);
	CreateObject(19389, 410.56879, 516.03308, 1003.06580,   0.00000, 0.00000, 0.00000);
	CreateObject(19359, 410.56879, 519.24432, 1003.06580,   0.00000, 0.00000, 0.00000);
	CreateObject(19451, 403.36816, 518.04144, 1003.06580,   0.00000, 0.00000, 90.00000);
	CreateObject(19451, 396.06921, 520.71039, 1003.06580,   0.00000, 0.00000, 90.00000);
	CreateObject(19451, 392.76920, 515.81641, 1003.06580,   0.00000, 0.00000, 0.00000);
	CreateObject(19451, 392.76920, 506.18188, 1003.06580,   0.00000, 0.00000, 0.00000);
	CreateObject(19451, 396.06921, 501.39041, 1003.06580,   0.00000, 0.00000, 90.00000);
	CreateObject(19451, 405.70319, 501.39041, 1003.06580,   0.00000, 0.00000, 90.00000);
	CreateObject(19451, 410.56879, 509.61041, 1003.06580,   0.00000, 0.00000, 0.00000);
	CreateObject(19451, 410.56879, 499.97589, 1003.06580,   0.00000, 0.00000, 0.00000);
	CreateObject(19377, 406.34091, 515.88342, 1004.89673,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 406.34091, 506.24890, 1004.89673,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 395.83890, 506.24890, 1004.89673,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 395.83890, 515.88342, 1004.89673,   0.00000, 90.00000, 0.00000);
	CreateObject(19376, 406.80481, 515.88330, 1007.02887,   0.00000, 90.00000, 0.00000);
	CreateObject(19385, 411.25900, 516.02570, 1008.86688,   0.00000, 0.00000, 0.00000);
	CreateObject(19447, 411.25900, 509.60239, 1008.86688,   0.00000, 0.00000, 0.00000);
	CreateObject(19447, 411.25900, 522.44843, 1008.86688,   0.00000, 0.00000, 0.00000);
	CreateObject(19447, 406.38501, 519.48151, 1008.86688,   0.00000, 0.00000, 90.00000);
	CreateObject(19447, 406.38501, 512.89648, 1008.86688,   0.00000, 0.00000, 90.00000);
	CreateObject(19447, 401.54810, 515.88989, 1008.86688,   0.00000, 0.00000, 0.00000);
	CreateObject(19377, 406.80481, 515.88330, 1010.70471,   0.00000, 90.00000, 0.00000);
	CreateObject(1504, 408.63470, 519.41193, 1007.11139,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 404.09869, 519.41193, 1007.11139,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 404.09869, 512.93591, 1007.11139,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 408.63470, 512.93591, 1007.11139,   0.00000, 0.00000, 0.00000);
	CreateObject(17969, 401.66559, 516.27002, 1008.97131,   5.00000, 0.00000, 180.00000);
	CreateObject(1499, 411.25339, 515.28931, 1007.10992,   0.00000, 0.00000, 90.00000);
	CreateObject(19814, 411.18051, 517.05450, 1007.18518,   0.00000, 0.00000, -90.00000);
	CreateObject(19829, 411.18451, 517.26178, 1008.47339,   0.00000, 90.00000, -90.00000);
	CreateObject(19898, 408.32751, 516.39050, 1007.11920,   0.00000, 0.00000, 90.00000);
	CreateObject(1728, 402.16400, 517.00311, 1007.11230,   0.00000, 0.00000, 80.00000);
	CreateObject(1810, 404.00381, 515.96259, 1007.10608,   0.00000, 0.00000, 211.99930);
	CreateObject(2062, 410.70651, 514.50580, 1007.51001,   0.00000, 90.00000, -80.00000);
	CreateObject(4227, 407.51831, 519.48309, 1008.84589,   0.00000, 4.00000, 0.00000);
	CreateObject(14840, 406.27219, 512.98218, 1009.02020,   0.00000, 0.00000, 90.00000);
	CreateObject(2074, 407.61700, 516.54022, 1010.38220,   0.00000, 0.00000, 0.00000);
	CreateObject(2672, 409.65253, 517.07941, 1007.39661,   0.00000, 0.00000, 80.00000);
	CreateObject(2670, 409.60251, 515.00006, 1007.19531,   0.00000, 0.00000, 90.00000);
	CreateObject(926, 410.85550, 518.12372, 1007.36731,   0.00000, 0.00000, 80.00000);
	CreateObject(853, 402.55347, 513.98633, 1007.29041,   0.00000, 0.00000, 90.00000);
	CreateObject(2672, 405.60379, 517.65729, 1007.39661,   0.00000, 0.00000, 40.00000);
	CreateObject(11710, 411.09241, 516.04590, 1010.20062,   -30.00000, 0.00000, 90.00000);
	CreateObject(2961, 411.15659, 514.87860, 1008.55298,   0.00000, 0.00000, 90.00000);
	CreateObject(2690, 407.03021, 513.14398, 1007.47662,   0.00000, 0.00000, 180.00000);
	CreateObject(19451, 405.70319, 520.71039, 1003.06580,   0.00000, 0.00000, 90.00000);
	CreateObject(19432, 408.09760, 517.32678, 1003.06580,   0.00000, 0.00000, 0.00000);
	CreateObject(19451, 403.36819, 516.61139, 1003.06580,   0.00000, 0.00000, 90.00000);
	CreateObject(19432, 397.74881, 518.04138, 1003.06580,   0.00000, 0.00000, 90.00000);
	CreateObject(19451, 398.65219, 511.73941, 1003.06580,   0.00000, 0.00000, 0.00000);
	CreateObject(19451, 403.36819, 504.03241, 1003.06580,   0.00000, 0.00000, 90.00000);
	CreateObject(19451, 397.03619, 513.31439, 1003.06580,   0.00000, 0.00000, 0.00000);
	CreateObject(19432, 408.09760, 504.74780, 1003.06580,   0.00000, 0.00000, 0.00000);
	CreateObject(19451, 403.36819, 505.46240, 1003.06580,   0.00000, 0.00000, 90.00000);
	CreateObject(19359, 399.62250, 506.58661, 1003.06580,   0.00000, 0.00000, 40.00000);
	CreateObject(19432, 397.74881, 504.03241, 1003.06580,   0.00000, 0.00000, 90.00000);
	CreateObject(19451, 397.03629, 508.80640, 1003.06580,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 407.32529, 520.64380, 1001.31018,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 404.11929, 520.64380, 1001.31018,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 400.90329, 520.64380, 1001.31018,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 397.69531, 520.64380, 1001.31018,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 394.47531, 520.64380, 1001.31018,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 394.47531, 501.43079, 1001.31018,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 397.69531, 501.43079, 1001.31018,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 400.90329, 501.43079, 1001.31018,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 404.11929, 501.43079, 1001.31018,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 407.32529, 501.43079, 1001.31018,   0.00000, 0.00000, 0.00000);
	CreateObject(19451, 408.09760, 511.70441, 1003.06580,   0.00000, 0.00000, 0.00000);
	CreateObject(19451, 406.66959, 511.70441, 1003.06580,   0.00000, 0.00000, 0.00000);
	CreateObject(19432, 407.38290, 506.97531, 1003.06580,   0.00000, 0.00000, 90.00000);
	CreateObject(19432, 408.09579, 505.94171, 1004.61780,   90.00000, 0.00000, 0.00000);
	CreateObject(1499, 408.12189, 505.42490, 1001.31030,   0.00000, 0.00000, 90.00000);
	CreateObject(1506, 392.83731, 503.01120, 1001.31018,   0.00000, 0.00000, 90.00000);
	CreateObject(1506, 392.83731, 506.22519, 1001.31018,   0.00000, 0.00000, 90.00000);
	CreateObject(1506, 392.83731, 509.43121, 1001.31018,   0.00000, 0.00000, 90.00000);
	CreateObject(1506, 392.83731, 512.64520, 1001.31018,   0.00000, 0.00000, 90.00000);
	CreateObject(1506, 392.83731, 515.85321, 1001.31018,   0.00000, 0.00000, 90.00000);
	CreateObject(16151, 405.51581, 510.57431, 1001.64941,   0.00000, 0.00000, 0.00000);
	CreateObject(2762, 400.70670, 507.55850, 1001.71649,   0.00000, 0.00000, -45.00000);
	CreateObject(14820, 400.70041, 507.55209, 1002.19550,   0.00000, 0.00000, -45.00000);
	CreateObject(2229, 399.67081, 509.41241, 1001.31641,   0.00000, 0.00000, 120.00000);
	CreateObject(2232, 400.65781, 508.51529, 1001.80243,   0.00000, 0.00000, 135.00000);
	CreateObject(2232, 401.15381, 508.00131, 1001.80243,   0.00000, 0.00000, 135.00000);
	CreateObject(2232, 401.65979, 507.49530, 1001.80243,   0.00000, 0.00000, 135.00000);
	CreateObject(2229, 402.01080, 507.07239, 1001.31641,   0.00000, 0.00000, 140.00000);
	CreateObject(18653, 400.63800, 506.71500, 1006.80487,   0.00000, 180.00000, 1330.00000);
	CreateObject(18654, 404.92310, 507.52710, 1006.99420,   0.00000, 180.00000, -59.00000);
	CreateObject(18655, 406.07391, 515.88019, 1007.00873,   0.00000, 180.00000, 61.00000);
	CreateObject(1432, 400.78052, 514.84216, 1001.42047,   0.00000, 0.00000, 0.00000);
	CreateObject(1432, 400.72980, 512.10492, 1001.42047,   0.00000, 0.00000, 34.00000);
	CreateObject(1510, 400.82150, 514.85168, 1002.04639,   0.00000, 0.00000, 0.00000);
	CreateObject(1510, 404.61917, 513.57800, 1002.28638,   0.00000, 0.00000, 0.00000);
	CreateObject(1510, 404.74768, 509.30911, 1002.28638,   0.00000, 0.00000, 0.00000);
	CreateObject(19620, 399.64621, 506.81580, 1003.21411,   -90.00000, 0.00000, -48.71040);
	CreateObject(18649, 398.74051, 507.78751, 1002.86560,   90.00000, 0.00000, 0.00000);
	CreateObject(18649, 400.60980, 505.55829, 1002.86560,   90.00000, 0.00000, 0.00000);
	CreateObject(2690, 406.34009, 509.71600, 1001.64917,   0.00000, 0.00000, 0.00000);
	CreateObject(4227, 398.71011, 514.89020, 1003.75928,   0.00000, -13.90000, 90.00000);
	CreateObject(1291, 398.47021, 503.58170, 1001.70148,   0.00000, 90.00000, 0.00000);
	CreateObject(913, 396.46460, 504.76849, 1002.14722,   0.00000, 0.00000, -90.00000);
	CreateObject(2672, 403.31158, 515.04059, 1001.59680,   0.00000, 0.00000, 0.00000);
	CreateObject(18666, 406.57739, 508.26389, 1002.75128,   158.11650, 0.00000, 0.00000);
	CreateObject(18667, 402.69000, 505.55670, 1003.24530,   -8.65760, 0.00000, 90.15460);
	CreateObject(2676, 408.26181, 519.12140, 1001.41681,   0.00000, 0.00000, -12.36800);
	CreateObject(2674, 403.01559, 509.83109, 1001.32483,   0.00000, 0.00000, 130.00000);
	CreateObject(2674, 409.00723, 506.22998, 1001.32483,   0.00000, 0.00000, -3.63310);
	CreateObject(2671, 409.12289, 508.20239, 1001.31500,   0.00000, 0.00000, 90.00000);
	CreateObject(2676, 403.05899, 507.11581, 1001.41681,   0.00000, 0.00000, -12.36800);
	CreateObject(2676, 395.42569, 516.92609, 1001.41681,   0.00000, 0.00000, -45.36800);
	CreateObject(18665, 403.76810, 516.51990, 1003.28589,   -11.98150, 0.00000, 90.00000);
	CreateObject(18663, 402.18359, 516.51880, 1003.53772,   6.33860, 0.00000, 90.00000);
	CreateObject(17969, 396.91821, 511.03171, 1003.33350,   -3.86500, 0.00000, 0.00000);
	CreateObject(19896, 404.68481, 509.18900, 1002.28668,   0.00000, 0.00000, 81.34240);
	CreateObject(1544, 404.70929, 507.99582, 1002.26648,   0.00000, 0.00000, 0.00000);
	CreateObject(1951, 405.19614, 507.39160, 1002.46082,   0.00000, 0.00000, 70.00000);
	CreateObject(1543, 404.30530, 510.05170, 1002.32880,   0.00000, 90.00000, 40.00000);
	CreateObject(1486, 404.86420, 509.43524, 1002.42078,   0.00000, 0.00000, 0.00000);
	CreateObject(19159, 402.87759, 512.48688, 1004.62311,   0.00000, 0.00000, 0.00000);
	CreateObject(1951, 406.17670, 514.05157, 1002.46082,   0.00000, 0.00000, 30.00000);
	CreateObject(1951, 404.68732, 512.58325, 1002.46082,   0.00000, 0.00000, 150.00000);
	CreateObject(1543, 405.74579, 513.87433, 1002.26678,   0.00000, 0.00000, 0.00000);
	CreateObject(1543, 405.32166, 514.04639, 1002.26678,   0.00000, 0.00000, 0.00000);
	CreateObject(1543, 404.35703, 512.29498, 1002.26678,   0.00000, 0.00000, 0.00000);
	CreateObject(1543, 399.95901, 507.75739, 1002.12280,   0.00000, 0.00000, 0.00000);
	CreateObject(1543, 404.39279, 511.66971, 1002.26678,   0.00000, 0.00000, 0.00000);
	CreateObject(1951, 404.85202, 514.01550, 1002.46082,   0.00000, 0.00000, 70.00000);
	CreateObject(1951, 404.66959, 510.15570, 1002.46082,   0.00000, 0.00000, 140.00000);
	CreateObject(1486, 405.65170, 513.93793, 1002.42078,   0.00000, 0.00000, 0.00000);
	CreateObject(1486, 404.62750, 513.94843, 1002.42078,   0.00000, 0.00000, 0.00000);
	CreateObject(1486, 401.07034, 514.50989, 1002.17877,   0.00000, 0.00000, 140.00000);
	CreateObject(1486, 404.82040, 512.24548, 1002.42078,   0.00000, 0.00000, 0.00000);
	CreateObject(1486, 404.36520, 512.09650, 1002.42078,   0.00000, 0.00000, 0.00000);
	CreateObject(1486, 404.62488, 511.33081, 1002.42078,   0.00000, 0.00000, 0.00000);
	CreateObject(1486, 404.51953, 510.82529, 1002.42078,   0.00000, 0.00000, 0.00000);
	CreateObject(1544, 405.95239, 514.11841, 1002.26648,   0.00000, 0.00000, 0.00000);
	CreateObject(1544, 404.77258, 513.73541, 1002.26648,   0.00000, 0.00000, 0.00000);
	CreateObject(1544, 404.47021, 511.10751, 1002.26648,   0.00000, 0.00000, 0.00000);
	CreateObject(1543, 404.69229, 511.82391, 1002.26678,   0.00000, 0.00000, 0.00000);
	CreateObject(1543, 400.40979, 512.14911, 1002.01678,   0.00000, 0.00000, 0.00000);
	CreateObject(1486, 404.74179, 513.32715, 1002.42078,   0.00000, 0.00000, 0.00000);
	CreateObject(1486, 401.19601, 512.08142, 1002.17877,   0.00000, 0.00000, 140.00000);
	CreateObject(1486, 401.17542, 514.51099, 1002.17877,   0.00000, 0.00000, 14.00000);
	CreateObject(1486, 401.12140, 514.59900, 1002.17877,   0.00000, 0.00000, 170.00000);
	CreateObject(1951, 400.96439, 515.21619, 1002.21680,   0.00000, 0.00000, 150.00000);
	CreateObject(2674, 401.10571, 512.35059, 1001.32483,   0.00000, 0.00000, -3.63310);
	CreateObject(19424, 400.19650, 507.49161, 1002.15192,   -6.26130, 0.00000, 0.00000);
	CreateObject(1543, 400.69180, 511.54489, 1002.01678,   0.00000, 0.00000, 0.00000);
	CreateObject(19814, 396.95569, 505.80060, 1002.47498,   0.00000, 0.00000, -90.00000);
	CreateObject(1709, 395.41519, 512.07440, 1001.30829,   0.00000, 0.00000, -90.00000);
	CreateObject(2676, 408.68631, 505.55600, 1001.41681,   0.00000, 0.00000, -12.36800);
	CreateObject(18661, 410.47699, 510.43561, 1003.51990,   -8.88950, 0.00000, 0.00000);
	CreateObject(18660, 402.63281, 518.13330, 1003.48859,   10.74470, 0.00000, -90.00000);
	CreateObject(18659, 396.94391, 516.05389, 1003.15088,   10.59010, 0.00000, 0.00000);
	CreateObject(4227, 408.99429, 520.71381, 1003.24792,   0.00000, -1.62330, 0.00000);
	CreateObject(17969, 401.19089, 501.50681, 1003.37610,   8.19380, 0.00000, -90.00000);
	CreateObject(18664, 401.29230, 503.94080, 1003.30518,   -6.02940, 0.00000, 90.00000);
	CreateObject(18667, 405.10361, 503.94070, 1003.30762,   0.00000, 0.00000, 90.00000);
	CreateObject(1710, 416.27310, 518.45117, 995.51593,   0.00000, 0.00000, 0.00000);
	CreateObject(2961, 410.46091, 514.90833, 1002.89929,   0.00000, 0.00000, 90.00000);
	CreateObject(2690, 396.50461, 512.77441, 1001.46521,   -51.27270, 90.00000, 90.00000);
	CreateObject(11710, 410.46060, 516.04761, 1004.22522,   0.00000, 0.00000, 90.00000);
	CreateObject(19829, 410.48901, 517.30548, 1002.95508,   0.00000, 90.00000, -90.00000);
	CreateObject(2074, 409.27829, 514.12323, 1004.57642,   0.00000, 0.00000, 0.00000);
	CreateObject(2074, 404.39828, 502.72321, 1004.57642,   0.00000, 0.00000, 0.00000);
	CreateObject(2074, 395.15829, 510.44321, 1004.57642,   0.00000, 0.00000, 0.00000);
	CreateObject(2074, 401.79831, 519.52319, 1004.57642,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 408.34930, 519.19470, 995.48120,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 405.12930, 519.19470, 995.48120,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 401.90930, 519.19470, 995.48120,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 398.71729, 519.19470, 995.48120,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 395.49731, 519.19470, 995.48120,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 408.34930, 512.86072, 995.48120,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 408.34930, 519.19470, 995.48120,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 405.12930, 512.86072, 995.48120,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 401.90930, 512.86072, 995.48120,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 398.71729, 512.86072, 995.48120,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 395.49731, 512.86072, 995.48120,   0.00000, 0.00000, 0.00000);
	CreateObject(19451, 391.98141, 519.60858, 997.26978,   0.00000, 0.00000, 45.00000);
	CreateObject(19451, 391.98141, 512.92059, 997.26978,   0.00000, 0.00000, -45.00000);
	CreateObject(17969, 393.87881, 520.91980, 997.24609,   3.01470, 0.00000, 180.00000);
	CreateObject(14840, 393.82251, 514.13831, 997.59039,   0.00000, 0.00000, 0.00000);
	CreateObject(4227, 395.70331, 512.81830, 997.48602,   0.00000, 0.00000, 180.00000);
	CreateObject(18659, 401.12671, 519.17041, 997.51678,   -8.58030, 0.00000, 90.00000);
	CreateObject(18661, 404.42761, 519.16931, 996.65002,   150.00000, 0.00000, 90.00000);
	CreateObject(18662, 411.10980, 513.67780, 997.30188,   7.00000, 0.00000, 40.00000);
	CreateObject(1805, 394.76190, 518.47937, 995.72070,   87.99020, 0.00000, 50.00000);
	CreateObject(2961, 410.47021, 514.91418, 997.16119,   0.00000, 0.00000, 90.00000);
	CreateObject(11710, 409.99429, 515.96582, 995.56592,   90.00000, 0.00000, 56.14260);
	CreateObject(18659, 416.25699, 519.07690, 997.78180,   -9.19870, 0.00000, 90.00000);
	CreateObject(18661, 420.81229, 519.07849, 997.35962,   -16.61950, 0.00000, 90.00000);
	CreateObject(18662, 417.68130, 514.95221, 997.10559,   -4.01960, 0.00000, -90.00000);
	CreateObject(4227, 413.48181, 505.34811, 998.71838,   0.00000, 17.93360, 180.00000);
	CreateObject(18667, 415.95300, 511.94620, 997.69220,   -13.75940, 0.00000, 0.00000);
	CreateObject(18663, 408.19449, 516.07813, 1003.14441,   -11.36310, 0.00000, 0.00000);
	CreateObject(18660, 423.36890, 506.89120, 995.58862,   0.00000, 0.00000, 0.00000);
	CreateObject(18664, 417.28101, 514.95319, 1003.19000,   -4.48340, 0.00000, -90.00000);
	CreateObject(18665, 419.75729, 519.07727, 1003.94781,   -7.73000, 0.00000, 90.00000);
	CreateObject(850, 421.30240, 517.27692, 1001.40363,   0.00000, 0.00000, 43.00000);
	CreateObject(2672, 421.80237, 514.42841, 1001.59729,   0.00000, 0.00000, 60.00000);
	CreateObject(2672, 414.40991, 517.27753, 1001.59729,   0.00000, 0.00000, 60.00000);
	CreateObject(2671, 417.69000, 517.01868, 1001.32330,   0.00000, 0.00000, 0.00000);
	CreateObject(2676, 418.51535, 516.73083, 1001.41931,   0.00000, 0.00000, 0.00000);
	CreateObject(851, 421.88541, 506.72009, 999.57330,   0.00000, 0.00000, 12.44530);
	CreateObject(2676, 421.46320, 516.61407, 995.61731,   0.00000, 0.00000, -22.33970);
	CreateObject(2670, 414.37701, 513.67603, 995.60608,   0.00000, 0.00000, 95.00000);
	CreateObject(2670, 416.90500, 517.29620, 995.60608,   0.00000, 0.00000, 0.00000);
	CreateObject(854, 400.97571, 515.89282, 995.72711,   0.00000, 0.00000, 0.00000);
	CreateObject(2677, 408.66562, 516.35669, 995.78918,   0.00000, 0.00000, -40.00000);
	CreateObject(2677, 396.71603, 514.94598, 995.78918,   0.00000, 0.00000, 0.00000);
	CreateObject(2674, 395.63400, 517.54303, 995.52393,   0.00000, 0.00000, -14.76430);
	CreateObject(2670, 404.82321, 515.42688, 995.60590,   0.00000, 0.00000, 80.00000);
	CreateObject(2768, 407.65674, 513.17102, 995.56189,   0.00000, 0.00000, 150.00000);
	CreateObject(2768, 400.96942, 518.84222, 995.56189,   0.00000, 0.00000, 0.00000);
	CreateObject(2678, 410.09430, 518.90381, 996.57959,   -9.89440, 0.00000, 0.00000);
	CreateObject(2663, 400.87949, 513.20947, 995.59558,   90.00000, 0.00000, 104.45510);
	CreateObject(1771, 421.43750, 518.48370, 1008.40338,   90.00000, 0.00000, 0.00000);
	CreateObject(2653, 416.92270, 518.25122, 1004.84991,   180.00000, 0.00000, 0.00000);
	CreateObject(2653, 417.82269, 518.25122, 1004.84991,   180.00000, 0.00000, 0.00000);
	CreateObject(2653, 417.82269, 518.25122, 998.84192,   180.00000, 0.00000, 0.00000);
	CreateObject(2653, 416.92270, 518.25122, 998.84192,   180.00000, 0.00000, 0.00000);
	CreateObject(2649, 417.53461, 516.58447, 1010.63928,   180.00000, 0.00000, 90.00000);
	CreateObject(2677, 413.98611, 507.16739, 997.58533,   0.00000, 0.00000, 45.00000);
	CreateObject(17969, 415.91339, 505.46811, 1005.41602,   14.84160, 0.00000, -90.00000);
	CreateObject(18660, 416.72449, 508.43689, 1005.84161,   0.00000, 0.00000, 90.00000);
	CreateObject(1756, 422.28821, 506.79791, 1005.54962,   0.00000, -83.19760, 0.00000);
	CreateObject(2806, 414.63919, 514.26031, 1007.23816,   0.00000, 0.00000, 0.00000);
	CreateObject(18698, 414.48749, 514.25513, 1008.15051,   0.00000, 0.00000, 0.00000);
	CreateObject(18665, 417.80069, 519.07703, 1008.81091,   -7.65270, 0.00000, 90.00000);
	CreateObject(18664, 422.53510, 516.21808, 1009.39288,   50.95210, 0.00000, 0.00000);
	CreateObject(2676, 418.45969, 517.17908, 1007.21661,   0.00000, 0.00000, -26.90040);
	CreateObject(2674, 420.75070, 515.08124, 1007.13141,   0.00000, 0.00000, 0.00000);
	CreateObject(2677, 413.25311, 517.16760, 1007.38538,   0.00000, 0.00000, 0.00000);
	CreateObject(854, 412.73270, 513.59448, 1007.27472,   0.00000, 0.00000, 0.00000);
	CreateObject(18667, 419.55121, 510.21320, 1008.04730,   -13.75940, 0.00000, 180.00000);
	CreateObject(849, 413.78470, 506.65329, 1003.38922,   0.00000, 0.00000, 196.81551);
	CreateObject(2674, 394.69427, 507.20349, 1001.32880,   0.00000, 0.00000, 40.00000);
	CreateObject(2672, 394.61447, 509.21536, 1001.59332,   0.00000, 0.00000, 0.00000);
	CreateObject(2670, 395.05731, 503.29129, 1001.41333,   0.00000, 0.00000, -30.00000);
	CreateObject(2674, 394.05051, 511.87009, 1001.32880,   0.00000, 0.00000, 130.00000);
	CreateObject(2677, 402.17981, 502.40799, 1001.58832,   0.00000, 0.00000, 50.00000);
	CreateObject(19385, 414.85291, 513.37372, 991.46301,   0.00000, 0.00000, 90.00000);
	CreateObject(1238, 399.43137, 518.41571, 989.89679,   109.86610, 0.00000, -24.50410);
	CreateObject(1291, 405.52841, 517.55688, 989.99683,   90.00000, 0.00000, 47.84870);
	CreateObject(1338, 406.56921, 518.27582, 990.40082,   0.00000, 0.00000, -12.59990);
	CreateObject(1441, 397.67880, 514.92963, 990.36481,   0.00000, 0.00000, 90.00000);
	CreateObject(1735, 415.78888, 514.25519, 989.72888,   0.00000, 0.00000, -120.00000);
	CreateObject(850, 414.16040, 517.64203, 989.79889,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 413.54239, 521.93597, 989.72980,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 410.11041, 521.93597, 989.72980,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 406.67841, 521.93597, 989.72980,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 402.98239, 521.93597, 989.72980,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 399.48441, 521.93597, 989.72980,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 399.48441, 513.41400, 989.72980,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 402.98239, 513.41400, 989.72980,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 406.67841, 513.41400, 989.72980,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 410.11041, 513.41400, 989.72980,   0.00000, 0.00000, 0.00000);
	CreateObject(1533, 397.26721, 516.71771, 989.70660,   0.00000, 0.00000, 90.00000);
	CreateObject(1238, 410.82855, 516.08582, 989.89679,   109.86610, 0.00000, 79.00000);
	CreateObject(2670, 410.26639, 517.28528, 989.82123,   0.00000, 0.00000, 0.00000);
	CreateObject(2674, 404.82190, 518.54852, 989.74921,   0.00000, 0.00000, 0.00000);
	CreateObject(2672, 398.78366, 520.47852, 990.00720,   0.00000, 0.00000, 0.00000);
	CreateObject(2671, 412.32599, 514.83838, 989.72522,   0.00000, 0.00000, 0.00000);
	CreateObject(2676, 407.50073, 515.32758, 989.82721,   0.00000, 0.00000, 590.00000);
	CreateObject(2677, 410.42041, 520.01233, 989.99921,   0.00000, 0.00000, 0.00000);
	CreateObject(2671, 401.08099, 517.07971, 989.72522,   0.00000, 0.00000, 39.00000);
	CreateObject(4227, 416.51111, 514.81921, 991.68158,   0.00000, -3.01470, -90.00000);
	CreateObject(17969, 408.19199, 521.89099, 991.34363,   0.00000, 0.00000, 90.00000);
	CreateObject(18660, 405.58139, 513.46692, 991.36462,   -5.64290, 0.00000, -90.00000);
	CreateObject(18663, 412.92371, 513.46570, 991.21863,   5.25640, 0.00000, -90.00000);
	CreateObject(18665, 397.24011, 515.25940, 991.50629,   0.00000, 0.00000, 180.00000);
	CreateObject(18667, 397.24039, 519.93439, 991.48828,   70.00000, 0.00000, 180.00000);
	CreateObject(14840, 398.66101, 521.92078, 991.11230,   0.00000, 0.00000, -90.00000);
	CreateObject(1440, 414.04340, 506.85989, 992.01270,   0.00000, 0.00000, 90.00000);
	CreateObject(19571, 414.65051, 508.13409, 991.54309,   90.00000, 0.00000, -15.22810);
	CreateObject(2714, 406.54770, 511.05069, 1003.96051,   0.00000, 0.00000, -90.00000);
	CreateObject(2411, 416.16891, 513.09448, 990.07141,   -17.23790, 0.00000, 0.00000);
	CreateObject(18659, 416.27151, 505.44241, 993.63269,   -8.03920, 0.00000, -90.00000);
	CreateObject(18666, 418.30069, 508.43640, 994.78650,   -7.03430, 0.00000, 90.00000);
}
DSRP_Sewers() {
	CreateDynamicObject(19377, 2817.83130, 2668.52466, 9.89860,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, 2814.20215, 2670.69873, 9.77740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2821.47583, 2670.69873, 9.77740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2814.39282, 2665.95923, 11.71586,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2821.30029, 2665.95923, 11.71590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2824.65405, 2665.23804, 11.71590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14409, 2817.80811, 2668.45142, 8.34180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19355, 2815.73853, 2669.94287, 9.78740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2819.80566, 2669.94287, 9.78740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 2822.40845, 2672.22388, 11.46280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 2818.90991, 2672.22388, 11.46280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 2815.41040, 2672.22388, 11.46280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 2811.91748, 2672.22388, 11.46280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2817.83130, 2679.06250, 10.35130,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19447, 2817.83130, 2673.74561, 9.79898,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 2822.16064, 2678.64331, 11.46280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2813.73828, 2678.64331, 11.46280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 2820.48950, 2678.62842, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2815.40869, 2678.62842, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1437, 2817.84009, 2664.65259, 9.98590,   10.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2811.02466, 2665.23804, 11.71590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2816.50171, 2661.86768, 11.71590,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19447, 2819.20361, 2661.87158, 11.71590,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19447, 2817.41895, 2663.55347, 11.71590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1437, 2817.84009, 2664.63770, 15.77250,   10.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2817.83130, 2689.55811, 10.35130,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2817.84399, 2694.71362, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2827.46191, 2694.71362, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2808.22290, 2694.71362, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2798.59717, 2694.71362, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2798.59717, 2684.21655, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2798.59717, 2673.71484, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2788.97095, 2673.71484, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2779.33911, 2673.71484, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2769.71021, 2673.71484, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2769.71021, 2684.20703, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2769.71021, 2694.68433, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2788.97290, 2694.71362, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2788.95288, 2705.20264, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2769.71021, 2705.18140, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2779.31909, 2705.20264, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.08569, 2694.71362, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.08569, 2705.21118, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.08569, 2715.70337, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.08569, 2726.19141, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2827.45850, 2726.19141, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2817.83252, 2726.19141, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2808.20215, 2726.19141, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2798.57202, 2726.19141, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2788.94897, 2726.19141, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2788.94897, 2715.69189, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2788.94897, 2736.68042, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2779.33374, 2736.68042, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2846.69971, 2705.28687, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2856.32617, 2705.28687, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2856.32617, 2715.77881, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2856.32617, 2726.27734, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2856.32617, 2736.76978, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2856.32617, 2747.24951, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2846.70361, 2747.22949, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.07324, 2747.24951, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.07324, 2736.75879, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.08203, 2735.35352, 10.35130,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.08569, 2684.21143, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.08569, 2673.71240, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2846.72119, 2673.71240, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2816.33301, 2736.69092, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2816.33301, 2747.18652, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2865.94629, 2731.39209, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2875.57129, 2731.39209, 10.36630,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19447, 2815.40918, 2687.44263, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2820.49023, 2687.44263, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2822.15894, 2687.43896, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2813.72192, 2687.44482, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 2825.23169, 2692.17334, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2829.67847, 2692.16821, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 2825.23804, 2690.50195, 11.46280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2829.67261, 2690.49561, 11.47780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19447, 2834.40674, 2687.44116, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2834.40674, 2677.81494, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2834.40674, 2668.19312, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2838.92041, 2670.71387, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2848.54272, 2670.71436, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2847.87109, 2671.81592, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2844.39868, 2676.55249, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2839.66235, 2681.28394, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2839.66235, 2690.90820, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2839.66602, 2697.56860, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2844.39746, 2702.30542, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2854.01831, 2702.30542, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2858.41455, 2707.05737, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2858.41455, 2716.68774, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2858.42529, 2723.16821, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2863.16357, 2727.91309, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2872.79150, 2727.91309, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2876.09814, 2730.91284, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2872.79199, 2733.94849, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2863.16357, 2733.94849, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2858.43408, 2738.69067, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2858.43384, 2748.31494, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2853.74023, 2750.35229, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2844.11133, 2750.35229, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2834.48975, 2750.35229, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2835.02441, 2742.85181, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2835.02441, 2733.22144, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2835.02441, 2752.48340, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2830.28589, 2728.48779, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2824.07983, 2728.48657, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2819.34814, 2733.22729, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2819.34814, 2742.85913, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2816.32446, 2747.39868, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2813.49048, 2742.86011, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2813.49048, 2733.22729, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2808.76538, 2728.46460, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2799.13452, 2728.46460, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2796.14795, 2728.47095, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2791.41748, 2733.19727, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2791.41748, 2742.82324, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2786.82080, 2739.79199, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2777.19727, 2739.79199, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2777.95215, 2736.44971, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2781.39941, 2733.05298, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2786.14063, 2728.32837, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2786.14063, 2718.70264, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2786.14771, 2712.66919, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2781.41821, 2707.93701, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2771.79272, 2707.93701, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2767.39307, 2703.14966, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2767.39307, 2693.52173, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2767.39307, 2683.89258, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2767.39307, 2674.26660, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2771.52319, 2671.19141, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2781.15674, 2671.19141, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2790.78247, 2671.19141, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2800.41699, 2671.19141, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2801.36255, 2677.81958, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2801.36255, 2687.45166, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2810.67188, 2692.18970, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2806.09790, 2692.18457, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2801.36255, 2668.19263, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2852.96045, 2739.04102, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2848.23169, 2743.78320, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2845.34326, 2743.78662, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2840.60962, 2739.04565, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2840.60962, 2729.41821, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2840.60962, 2719.79028, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2840.60474, 2714.40771, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2852.96045, 2729.41821, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2852.96045, 2719.79028, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2852.94531, 2714.40771, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2848.20923, 2709.63989, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2845.33423, 2709.64160, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2835.02441, 2717.79077, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2835.01636, 2708.16553, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2835.00952, 2703.23462, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2830.26855, 2698.49121, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2820.64624, 2698.49121, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2811.01514, 2698.49121, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2801.38379, 2698.49121, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2796.16260, 2698.49072, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2791.41748, 2717.79077, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2791.41748, 2708.16553, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2791.43262, 2703.23462, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2830.28687, 2722.52417, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2820.65430, 2722.52417, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2811.02319, 2722.52417, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2801.39185, 2722.52417, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2796.16260, 2722.53931, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2790.67334, 2692.17651, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2795.42993, 2687.45166, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2795.44385, 2681.29932, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2790.70654, 2676.56641, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2781.08228, 2676.56641, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2777.98364, 2676.55151, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2786.14771, 2696.67163, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2781.40820, 2701.40552, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2777.98364, 2701.41357, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2773.24487, 2681.28101, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2773.24487, 2690.91382, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2773.22998, 2696.67090, 9.79900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2806.10449, 2690.51489, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2809.84790, 2690.51489, 11.46280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2803.02979, 2683.95776, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2803.02979, 2674.32910, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2803.02686, 2664.69800, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2786.84961, 2669.52856, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2796.48486, 2669.52856, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2777.22168, 2669.52856, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2767.58862, 2669.52856, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2765.71948, 2676.09106, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2765.71948, 2685.72510, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2765.71948, 2695.35400, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2765.71948, 2704.98706, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2765.71948, 2714.61060, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2781.41040, 2709.60962, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2771.78882, 2709.60962, 11.46280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2784.47827, 2716.16602, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2784.47827, 2725.79272, 11.46280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2784.47388, 2728.31860, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2777.90576, 2731.37817, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2776.28979, 2737.94531, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2782.85083, 2741.45581, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2792.48071, 2741.45581, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2793.08569, 2733.20703, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2793.08569, 2742.83472, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2799.64868, 2730.14014, 11.47780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2808.71094, 2730.14014, 11.46780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2811.82520, 2733.19849, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2811.82520, 2742.83081, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2811.82520, 2752.46045, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2818.38672, 2749.06934, 11.46780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2821.01514, 2742.85596, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2821.01514, 2733.22461, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2830.28491, 2730.16699, 11.47780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2827.16504, 2730.16699, 11.46780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2833.35107, 2736.72705, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2833.35107, 2746.35010, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2833.35107, 2755.96729, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2839.90137, 2752.01514, 11.47780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2849.52368, 2752.01514, 11.47780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2859.12744, 2752.01514, 11.47780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2860.09790, 2745.44922, 11.46780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2860.09790, 2738.68188, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2866.63916, 2735.61157, 11.47780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2876.27002, 2735.61157, 11.47780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2877.76318, 2729.06689, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2863.17432, 2726.23047, 11.47780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2872.74463, 2726.23047, 11.46780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2860.11279, 2719.66650, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2860.11279, 2710.03931, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2860.11279, 2700.40625, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2853.54834, 2700.62793, 11.46780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2844.40576, 2700.62793, 11.47780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2841.34448, 2694.06152, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2841.34448, 2684.42676, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2841.34448, 2681.28857, 11.46780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2847.91064, 2678.21973, 11.46780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2849.54028, 2671.66602, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2843.01831, 2669.04468, 11.46780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2833.39185, 2669.04492, 11.46780,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2832.73511, 2675.61328, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2832.72363, 2684.43530, 11.46780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 2823.42114, 2674.83569, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2833.33350, 2703.23438, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2833.33350, 2712.85474, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2833.34790, 2717.75732, 11.46280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2811.03442, 2700.16016, 11.46280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2830.27832, 2720.86011, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2820.65137, 2720.86011, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2811.02759, 2720.86011, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2801.40894, 2720.86011, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19447, 2802.61646, 2722.52051, 9.79900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 2848.21240, 2711.30103, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2851.27979, 2717.86304, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2851.27979, 2727.48779, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2851.27979, 2737.11670, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2851.28882, 2739.04858, 11.46280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2793.74878, 2687.43970, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2793.77393, 2681.30737, 11.46280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2787.20947, 2678.23755, 11.47280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2777.98462, 2678.22632, 11.46280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 2774.91455, 2681.28638, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2774.91455, 2690.90552, 11.47280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2774.90869, 2695.09106, 11.46280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19428, 2773.22998, 2700.69165, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2792.94482, 2722.53931, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2796.15137, 2722.53931, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2842.12695, 2709.64160, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2822.83032, 2670.71240, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2821.30029, 2665.95923, 15.21390,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19447, 2824.65405, 2665.23804, 15.21390,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19447, 2816.50171, 2661.86768, 15.21390,   0.00000, 180.00000, -45.00000);
	CreateDynamicObject(19447, 2819.20361, 2661.87158, 15.17440,   0.00000, 180.00000, 45.00000);
	CreateDynamicObject(19447, 2811.02466, 2665.23804, 15.21390,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19447, 2814.39282, 2665.95923, 15.21390,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19447, 2823.42114, 2684.46362, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2825.01196, 2689.20093, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2828.20166, 2689.20093, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2829.69116, 2689.19287, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2831.22119, 2684.45679, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2831.22119, 2674.82642, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2831.22119, 2665.19312, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2835.78076, 2667.81812, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2845.41333, 2667.81812, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2855.04712, 2667.81812, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2850.43481, 2667.04175, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2850.43481, 2681.02954, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2853.02100, 2671.66602, 11.47780,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 2855.17188, 2671.77930, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2855.17358, 2676.29077, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2853.63184, 2673.51074, 13.29496,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2847.46411, 2679.41650, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2842.73511, 2684.14844, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2842.73511, 2693.77563, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2842.71924, 2694.62280, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2847.46167, 2699.35156, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2857.09399, 2699.35156, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2861.32349, 2710.55981, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2861.32349, 2720.19336, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2861.32349, 2700.93262, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2866.05347, 2724.93506, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2875.68506, 2724.93506, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2879.19995, 2729.54199, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2879.19995, 2739.16016, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2866.32568, 2736.74463, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2875.95532, 2736.74463, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2861.59473, 2741.48022, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2861.59473, 2751.11035, 13.28283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2857.50635, 2753.22119, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2847.87061, 2753.22119, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2838.25610, 2753.22119, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2828.63330, 2753.22119, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2832.07178, 2736.28540, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2832.07178, 2745.91455, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2832.07178, 2755.54614, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2827.34766, 2731.54907, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2822.58252, 2736.28369, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2822.58252, 2745.91235, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2817.89868, 2750.17261, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2815.16235, 2750.16772, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2810.63916, 2736.44385, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2810.63916, 2746.07129, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2805.88867, 2731.71436, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2799.10571, 2731.70386, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2794.37573, 2736.44043, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2794.37573, 2746.06494, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2789.49927, 2742.31470, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2779.86963, 2742.31470, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2778.22925, 2730.10229, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2782.96265, 2725.35815, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2782.96265, 2715.73022, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2778.23169, 2710.99023, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2768.60889, 2710.99023, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2764.39282, 2706.47803, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2764.39282, 2696.84692, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2764.39282, 2687.22070, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2764.39282, 2677.59131, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2764.39282, 2667.96338, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2769.10742, 2668.33643, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2778.73730, 2668.33643, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2788.37231, 2668.33643, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2798.00391, 2668.33643, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2800.28223, 2668.32495, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2804.29590, 2673.04834, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2804.29590, 2682.66699, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2804.28906, 2684.46362, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2805.81152, 2689.20093, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2809.00854, 2689.20093, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2810.80664, 2689.20508, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2812.32520, 2684.47095, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2812.32520, 2674.84106, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2812.87231, 2670.69360, 13.29666,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2827.26929, 2698.48560, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2820.64624, 2698.49121, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2801.38379, 2698.49121, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2796.16260, 2698.49072, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2791.43262, 2703.23462, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2791.41748, 2708.16553, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2791.41748, 2717.79077, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2811.01074, 2701.71533, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2806.13257, 2700.02930, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2815.88501, 2700.03418, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2797.66895, 2720.96851, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2827.26099, 2719.40137, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2817.63013, 2719.40137, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2808.00464, 2719.40137, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2800.64502, 2719.37671, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2832.00684, 2714.66943, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2831.99438, 2703.35840, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2831.98682, 2705.04248, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2840.60474, 2714.40771, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2840.60962, 2719.79028, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2840.60962, 2729.41821, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2840.60962, 2739.04565, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2845.34375, 2743.78662, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2850.09351, 2739.04810, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2850.09351, 2729.41357, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2850.09351, 2717.52148, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2850.09106, 2722.85352, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2845.36279, 2712.78833, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2843.66797, 2714.40405, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2786.14771, 2696.67163, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2781.40820, 2701.40552, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2777.98364, 2701.41357, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2777.96606, 2699.96191, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2776.14038, 2684.33911, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2776.14038, 2693.96069, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2776.15186, 2695.44775, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2780.87061, 2679.60791, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2787.69995, 2679.58325, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2792.47070, 2684.33350, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2792.48267, 2687.44580, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2787.73853, 2692.17651, 13.29660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10444, 2816.21069, 2685.85791, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2830.67114, 2684.61963, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2845.13281, 2684.61963, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2801.75024, 2684.61963, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2787.32642, 2684.61963, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2772.86572, 2684.61963, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2845.13281, 2714.97095, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2830.67310, 2714.97095, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2816.21069, 2714.97095, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2801.75024, 2714.97095, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2787.32642, 2714.97095, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2772.86572, 2714.97095, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2859.56885, 2714.95093, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2859.56885, 2745.30200, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2845.13281, 2745.30200, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2830.67310, 2745.30200, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2816.21069, 2745.30200, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2801.75024, 2745.30200, 10.84090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2785.20117, 2745.31860, 11.35429,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2772.86572, 2745.30200, 10.84090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2874.02026, 2729.36084, 11.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2816.21069, 2685.85791, 10.68271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2830.67114, 2684.61963, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2845.13281, 2684.61963, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2801.75024, 2684.61963, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2787.32642, 2684.61963, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2772.86572, 2684.61963, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2772.86572, 2714.97095, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2787.32642, 2714.97095, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2801.75024, 2714.97095, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2816.21069, 2714.97095, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2830.67310, 2714.97095, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2845.13281, 2714.97095, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2859.56885, 2714.95093, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2859.56885, 2745.30200, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2845.13281, 2745.30200, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2830.67310, 2745.30200, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2816.21069, 2745.30200, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2801.75024, 2745.30200, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2787.32642, 2745.30200, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 2772.86572, 2745.30200, 10.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2827.26123, 2698.48560, 15.08250,   0.00000, -45.00000, 90.00000);
	CreateDynamicObject(19447, 2820.64624, 2698.49121, 15.08250,   0.00000, -45.00000, 90.00000);
	CreateDynamicObject(19447, 2827.26099, 2719.40137, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2817.63013, 2719.40137, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2808.00464, 2719.40137, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2800.64502, 2719.37671, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19355, 2796.15137, 2722.53931, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19355, 2792.94482, 2722.53931, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2796.16260, 2698.49072, 15.08250,   0.00000, -45.00000, 90.00000);
	CreateDynamicObject(19447, 2801.38379, 2698.49121, 15.08250,   0.00000, -45.00000, 90.00000);
	CreateDynamicObject(19355, 2812.87231, 2670.69360, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19355, 2822.83032, 2670.71240, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2812.32520, 2674.84106, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2812.32520, 2684.47095, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2823.42114, 2674.83569, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2823.42114, 2684.46362, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2831.22119, 2684.45679, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2831.22119, 2674.82642, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2831.22119, 2665.19312, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2835.78076, 2667.81812, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2845.41333, 2667.81812, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2855.04712, 2667.81812, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2850.43481, 2667.04175, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2850.43481, 2681.02954, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2842.73511, 2684.14844, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2842.71924, 2694.62280, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2861.32349, 2700.93262, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2861.32349, 2710.55981, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2861.32349, 2720.19336, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2879.19995, 2729.54199, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2879.19995, 2739.16016, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2861.59473, 2741.48022, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2861.59473, 2751.11035, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2857.50635, 2753.22119, 15.08250,   0.00000, -45.00000, 90.00000);
	CreateDynamicObject(19447, 2847.87061, 2753.22119, 15.08250,   0.00000, -45.00000, 90.00000);
	CreateDynamicObject(19447, 2838.25610, 2753.22119, 15.08250,   0.00000, -45.00000, 90.00000);
	CreateDynamicObject(19447, 2828.63330, 2753.22119, 15.08250,   0.00000, -45.00000, 90.00000);
	CreateDynamicObject(19447, 2832.07178, 2755.54614, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2832.07178, 2745.91455, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2832.07178, 2736.28540, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2822.58252, 2736.28369, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2822.58252, 2745.91235, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2817.89868, 2750.17261, 15.08250,   0.00000, -45.00000, 90.00000);
	CreateDynamicObject(19447, 2815.16235, 2750.16772, 15.08250,   0.00000, -45.00000, 90.00000);
	CreateDynamicObject(19447, 2810.63916, 2746.07129, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2810.63916, 2736.44385, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2794.37573, 2736.44043, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2789.49927, 2742.31470, 15.08250,   0.00000, -45.00000, 90.00000);
	CreateDynamicObject(19447, 2794.37573, 2746.06494, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2779.86963, 2742.31470, 15.08250,   0.00000, -45.00000, 90.00000);
	CreateDynamicObject(19447, 2782.96265, 2725.35815, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2782.96265, 2715.73022, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2764.39282, 2706.47803, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2764.39282, 2696.84692, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2764.39282, 2687.22070, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2764.39282, 2677.59131, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2764.39282, 2667.96338, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2769.10742, 2668.33643, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2778.73730, 2668.33643, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2788.37231, 2668.33643, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2798.00391, 2668.33643, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2800.28223, 2668.32495, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2804.29590, 2673.04834, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2804.28906, 2684.46362, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2804.29590, 2682.66699, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2850.09351, 2739.04810, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2850.09351, 2729.41357, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2850.09351, 2717.52148, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2850.09106, 2722.85352, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2840.60474, 2714.40771, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2840.60962, 2719.79028, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2840.60962, 2729.41821, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2840.60962, 2739.04565, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2792.48267, 2687.44580, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2792.47070, 2684.33350, 15.08250,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19447, 2777.98364, 2701.41357, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2781.40820, 2701.40552, 15.08250,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(19447, 2776.14038, 2693.96069, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2776.15186, 2695.44775, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2776.14038, 2684.33911, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2845.34375, 2743.78662, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2843.66797, 2714.40405, 16.79230,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2845.36279, 2712.78833, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2842.12695, 2709.64160, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2827.34766, 2731.54907, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2799.10571, 2731.70386, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2805.88867, 2731.71436, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2778.22925, 2730.10229, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2778.23169, 2710.99023, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2768.60889, 2710.99023, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2787.73853, 2692.17651, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2787.69995, 2679.58325, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2780.87061, 2679.60791, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2810.80664, 2689.20508, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2809.00854, 2689.20093, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2805.81152, 2689.20093, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2828.20166, 2689.20093, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2829.69116, 2689.19287, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2825.01196, 2689.20093, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2842.73560, 2687.67993, 15.08250,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19447, 2847.46411, 2679.41650, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2857.09399, 2699.35156, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2847.46167, 2699.35156, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2831.99438, 2703.35840, 16.79230,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2831.98682, 2705.04248, 16.79230,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2832.00684, 2714.66943, 16.79230,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2815.88501, 2700.03418, 16.79230,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2811.01074, 2701.71533, 16.79230,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19355, 2806.13257, 2700.02930, 16.79230,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19355, 2806.12866, 2699.05322, 16.67000,   45.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2815.90967, 2699.07910, 16.67000,   45.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2804.79175, 2689.19531, 16.74840,   45.00000, 0.00000, 270.00000);
	CreateDynamicObject(19355, 2830.72998, 2689.19067, 16.74840,   45.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2811.83765, 2689.19995, 16.74840,   45.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2823.91772, 2689.19849, 16.74840,   45.00000, 0.00000, 270.00000);
	CreateDynamicObject(19355, 2843.22900, 2679.41968, 16.74840,   45.00000, 0.00000, 270.00000);
	CreateDynamicObject(19355, 2831.98999, 2699.02612, 16.67000,   45.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2791.43921, 2699.05103, 16.67000,   45.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2791.43262, 2703.23462, 16.79230,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2791.41748, 2708.16553, 16.79230,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2791.41748, 2717.79077, 16.79230,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2832.00220, 2718.81763, 16.67000,   45.00000, 0.00000, 180.00000);
	CreateDynamicObject(19355, 2797.66748, 2721.92456, 16.67000,   45.00000, 0.00000, 180.00000);
	CreateDynamicObject(19355, 2797.66895, 2720.96851, 16.79230,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2791.42285, 2721.96924, 16.67000,   45.00000, 0.00000, 180.00000);
	CreateDynamicObject(19447, 2786.14771, 2696.67163, 16.79230,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2786.14478, 2700.86963, 16.67000,   45.00000, 0.00000, 180.00000);
	CreateDynamicObject(19355, 2782.34961, 2710.99438, 16.67000,   45.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2843.20825, 2699.34790, 16.74840,   45.00000, 0.00000, 270.00000);
	CreateDynamicObject(19355, 2841.11084, 2709.67847, 16.74840,   45.00000, 0.00000, 270.00000);
	CreateDynamicObject(19355, 2841.11353, 2743.77832, 16.74840,   45.00000, 0.00000, 270.00000);
	CreateDynamicObject(19355, 2849.59985, 2743.76953, 16.74840,   45.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2849.59033, 2712.79419, 16.74840,   45.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2866.32568, 2736.74463, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2875.95532, 2736.74463, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2866.05347, 2724.93506, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2875.68506, 2724.93506, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2862.10400, 2736.75220, 16.74840,   45.00000, 0.00000, 270.00000);
	CreateDynamicObject(19355, 2861.82959, 2724.92773, 16.74840,   45.00000, 0.00000, 270.00000);
	CreateDynamicObject(19447, 2855.17358, 2676.29077, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2855.17188, 2671.77930, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2850.93872, 2676.29712, 16.74840,   45.00000, 0.00000, 270.00000);
	CreateDynamicObject(19355, 2850.94531, 2671.77344, 16.74840,   45.00000, 0.00000, 270.00000);
	CreateDynamicObject(19355, 2831.55859, 2731.55273, 16.74840,   45.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2823.09131, 2731.55127, 16.74840,   45.00000, 0.00000, 270.00000);
	CreateDynamicObject(19355, 2810.13867, 2731.71851, 16.74840,   45.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2794.85498, 2731.70801, 16.74840,   45.00000, 0.00000, 270.00000);
	CreateDynamicObject(19355, 2782.51099, 2730.09863, 16.74840,   45.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2777.96606, 2699.96191, 16.79230,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 2773.22998, 2700.69165, 16.79240,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 2773.24951, 2702.08716, 16.79240,   -45.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2791.89136, 2692.16553, 16.67000,   45.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2791.90771, 2679.58813, 16.67000,   45.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2776.71899, 2679.61548, 16.67000,   45.00000, 0.00000, 270.00000);
	CreateDynamicObject(19377, 2817.83130, 2679.06250, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2817.83130, 2689.55811, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2817.84399, 2694.71362, 16.33710,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2808.22290, 2694.71362, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2798.59717, 2694.71362, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2788.97290, 2694.71362, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2788.95288, 2705.20264, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2779.31909, 2705.20264, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2769.71021, 2705.18140, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2769.71021, 2694.68433, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2769.71021, 2684.20703, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2769.71021, 2673.71484, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2779.33911, 2673.71484, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2788.97095, 2673.71484, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2798.59717, 2673.71484, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2798.59717, 2684.21655, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2788.94897, 2715.69189, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2788.94897, 2726.19141, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2788.94897, 2736.68042, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2779.33374, 2736.68042, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2798.57202, 2726.19141, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2808.20215, 2726.19141, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2817.83252, 2726.19141, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2816.33301, 2736.69092, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2816.33301, 2747.18652, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2827.45850, 2726.19141, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.08569, 2726.19141, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.06201, 2736.73926, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.07324, 2747.24951, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2846.70361, 2747.22949, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2856.32617, 2747.24951, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2856.32617, 2736.76978, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2856.32617, 2726.27734, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2865.94629, 2731.39209, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2875.57129, 2731.39209, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2856.32617, 2715.77881, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2856.32617, 2705.28687, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2846.69971, 2705.28687, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.08569, 2705.21118, 16.32913,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.08569, 2694.71362, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2827.46191, 2694.71362, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.08569, 2684.21143, 16.32913,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.08569, 2673.71240, 16.32913,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2846.72119, 2673.71240, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.06982, 2736.27686, 16.33710,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2837.08569, 2715.70337, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2808.22583, 2684.21191, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2779.34961, 2684.20703, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2769.71021, 2694.68433, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2779.34961, 2694.68433, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2811.33960, 2705.20264, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2846.71631, 2715.77881, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2846.71631, 2726.27734, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2846.71631, 2736.76978, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2825.95459, 2736.69092, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2825.95459, 2747.18652, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2779.31958, 2726.19336, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2779.31909, 2715.69702, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2769.71021, 2715.68091, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2827.42310, 2684.22412, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2827.45679, 2715.70752, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2817.85229, 2715.70386, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2808.20215, 2715.70386, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2798.57202, 2715.70386, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2827.45142, 2705.20874, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2788.44971, 2683.85254, 16.33710,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2798.04663, 2683.84326, 16.33710,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2846.71289, 2684.20361, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2865.95972, 2720.89526, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2875.56958, 2720.89551, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2798.54028, 2736.68774, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2808.16699, 2736.69165, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2846.69971, 2694.81665, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2856.33203, 2694.79517, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1437, 2852.17114, 2674.01978, 12.43890,   10.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2853.63184, 2673.51074, 16.79230,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2856.36353, 2673.46460, 16.32910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2977, 2851.77100, 2674.04541, 17.40090,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(1437, 2877.41333, 2730.86768, 11.55870,   10.00000, 0.00000, 90.00000);
	CreateDynamicObject(2977, 2876.85815, 2730.88989, 17.40090,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19447, 2816.50171, 2661.86768, 18.71420,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19447, 2816.81689, 2670.50391, 18.01906,   180.00000, 180.00000, 90.00000);
	CreateDynamicObject(19377, 2817.90356, 2675.68750, 16.32110,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19447, 2821.30029, 2665.95923, 18.71040,   180.00000, 180.00000, 0.00000);
	CreateDynamicObject(19447, 2814.39282, 2665.95923, 18.71040,   180.00000, 180.00000, 0.00000);
	CreateDynamicObject(19377, 2816.90454, 2665.33911, 19.29568,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19447, 2824.65405, 2665.23804, 18.71420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2811.02466, 2665.23804, 18.71420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2819.20361, 2661.87158, 18.71420,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19355, 2821.30664, 2670.46167, 17.04628,   -45.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2814.39063, 2670.47095, 17.04630,   -45.00000, 0.00000, 0.00000);
	CreateDynamicObject(2977, 2817.84326, 2665.19141, 20.36210,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(2924, 2808.92114, 2701.64038, 12.74571,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2774.98389, 2731.60742, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2774.98389, 2742.57397, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2774.96094, 2740.43164, 14.98147,   -200.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2774.94482, 2738.89331, 17.76405,   -140.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2774.97095, 2740.35034, 10.87012,   20.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2776.70239, 2737.28394, 11.46980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 2773.30933, 2737.31689, 11.55362,   -20.00000, 90.00000, 180.00000);
	CreateDynamicObject(19362, 2773.26245, 2736.85742, 13.86140,   -40.00000, 90.00000, 180.00000);
	CreateDynamicObject(19362, 2773.28540, 2737.31689, 14.35230,   20.00000, 90.00000, 180.00000);
	CreateDynamicObject(19362, 2773.43506, 2736.32275, 11.75484,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19362, 2773.46045, 2737.84448, 12.63483,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2771.59009, 2738.90283, 17.76405,   -140.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2771.59131, 2740.43970, 14.98147,   -200.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2771.63184, 2740.30396, 10.87012,   20.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2771.60132, 2742.55542, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 2773.15503, 2737.84009, 12.63483,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19362, 2773.10962, 2736.32349, 12.63483,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2771.58716, 2731.57544, 13.29660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2774.98389, 2731.60742, 16.79180,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2774.98389, 2742.57397, 16.79180,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(16086, 2811.09302, 2693.50757, 15.70119,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(16086, 2821.98608, 2687.90137, 15.72870,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(16086, 2833.34204, 2719.97266, 15.72871,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(16086, 2775.41577, 2693.91260, 15.72870,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2774.97974, 2739.93140, 16.79180,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(1712, 2814.00195, 2700.37427, 11.55014,   0.00000, 0.00000, -42.06000);
	CreateDynamicObject(1712, 2811.38184, 2700.72778, 11.55014,   0.00000, 0.00000, -4.67999);
	CreateDynamicObject(2671, 2811.14014, 2699.63818, 11.56710,   0.00000, 0.00000, 4.32000);
	CreateDynamicObject(1362, 2810.29443, 2700.83691, 12.12138,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3461, 2810.32422, 2701.14087, 10.58412,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(854, 2794.67383, 2697.19336, 10.66434,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(851, 2790.90356, 2678.03101, 11.81115,   0.00000, 0.00000, 178.14000);
	CreateDynamicObject(2671, 2841.24463, 2689.28467, 11.59420,   0.00000, 0.00000, 82.74002);
	CreateDynamicObject(2671, 2833.55615, 2707.63745, 11.59420,   0.00000, 0.00000, 82.74002);
	CreateDynamicObject(2672, 2851.80029, 2712.03467, 11.82388,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2671, 2848.02075, 2711.15186, 11.58157,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2671, 2841.34448, 2691.55981, 11.59420,   0.00000, 0.00000, 82.74002);
	CreateDynamicObject(2672, 2812.63477, 2683.02246, 11.84826,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2671, 2818.05347, 2672.11328, 11.56710,   0.00000, 0.00000, 4.32000);
	CreateDynamicObject(2063, 2846.54736, 2712.21533, 12.40181,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1440, 2832.98950, 2714.35547, 12.05368,   0.00000, 0.00000, 87.90006);
	CreateDynamicObject(1440, 2807.76807, 2690.17725, 12.05368,   0.00000, 0.00000, 178.14006);
	CreateDynamicObject(2671, 2804.50098, 2690.82983, 11.56710,   0.00000, 0.00000, 4.32000);
	CreateDynamicObject(2671, 2782.39160, 2669.90161, 11.57270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1440, 2776.31079, 2669.43335, 12.04526,   0.00000, 0.00000, -184.38000);
	CreateDynamicObject(913, 2784.29517, 2706.96436, 11.01263,   -40.00000, -10.00000, 0.00000);
	CreateDynamicObject(1462, 2778.47949, 2710.47168, 11.47198,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2671, 2778.12207, 2709.21899, 11.57380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1462, 2812.90747, 2678.27368, 11.54690,   0.00000, 0.00000, 81.78003);
	CreateDynamicObject(3260, 2835.41626, 2686.03369, 11.55390,   270.00000, 90.00000, 3.30000);
	CreateDynamicObject(3260, 2838.22192, 2686.05078, 11.58390,   270.00000, 90.00000, -4.08000);
	CreateDynamicObject(3260, 2829.80591, 2723.54883, 11.58390,   270.00000, 90.00000, 89.04004);
	CreateDynamicObject(3260, 2829.81543, 2726.55054, 11.55390,   270.00000, 90.00000, 92.04000);
	CreateDynamicObject(1327, 2816.83301, 2720.81860, 11.53435,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1438, 2802.13232, 2720.90210, 11.55483,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 2803.94019, 2721.19800, 11.85872,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2671, 2808.41504, 2720.75317, 11.58800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1348, 2811.41528, 2739.99268, 12.21420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2671, 2812.10547, 2736.93188, 11.57740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1462, 2811.18677, 2737.04614, 11.56118,   0.00000, 0.00000, 75.05999);
	CreateDynamicObject(2671, 2774.61890, 2693.28247, 11.55900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(911, 2764.96875, 2689.56543, 12.05048,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2726, 2765.14502, 2687.93628, 11.64340,   90.00000, 0.00000, 39.72000);
	CreateDynamicObject(2671, 2765.94263, 2691.20117, 11.57370,   0.00000, 0.00000, -85.02003);
	CreateDynamicObject(1738, 2793.20166, 2686.75342, 11.68558,   90.00000, 0.00000, 43.86000);
	CreateDynamicObject(1438, 2793.79492, 2684.25562, 11.55940,   0.00000, 0.00000, 81.78001);
	CreateDynamicObject(2671, 2794.07739, 2687.78320, 11.55900,   0.00000, 0.00000, -72.96000);
	CreateDynamicObject(1440, 2860.62866, 2738.48169, 12.07785,   0.00000, 0.00000, -79.26001);
	CreateDynamicObject(2671, 2859.97314, 2742.16455, 11.56517,   0.00000, 0.00000, 124.86002);
	CreateDynamicObject(3260, 2857.56885, 2724.98901, 11.56510,   270.00000, 0.00000, 85.98000);
	CreateDynamicObject(3260, 2854.69653, 2725.17139, 11.58510,   270.00000, 0.00000, 90.90000);
	CreateDynamicObject(1462, 2850.74048, 2721.21313, 11.61234,   0.00000, 0.00000, 93.47999);
	CreateDynamicObject(2672, 2833.65747, 2747.43848, 11.83102,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(898, 2767.58105, 2727.83936, 13.45212,   1.20000, 67.68002, 0.00000);
	CreateDynamicObject(898, 2761.56934, 2729.18262, 13.45212,   -45.47999, 65.99998, -50.76000);
	CreateDynamicObject(899, 2750.29590, 2734.40234, 17.06899,   1.98000, -8.70000, 23.04001);
	CreateDynamicObject(899, 2758.36938, 2735.70166, 5.57914,   14.27998, -14.82000, 23.76000);
	CreateDynamicObject(899, 2760.90625, 2740.63232, 5.79814,   15.77999, -3.30000, -81.24010);
	CreateDynamicObject(898, 2767.58105, 2727.83936, 12.21909,   1.20000, 67.68002, 0.00000);
	CreateDynamicObject(898, 2760.68188, 2745.31958, 13.45212,   -45.47999, 65.99998, -36.12000);
	CreateDynamicObject(898, 2769.01978, 2747.37085, 13.45212,   -45.47999, 65.99998, -36.12000);
	CreateDynamicObject(899, 2756.05933, 2734.82983, 24.72399,   22.68000, 31.86001, 23.76000);
	CreateDynamicObject(899, 2764.08594, 2737.03174, 21.98350,   27.00004, -21.42002, 23.76000);
	CreateDynamicObject(899, 2763.95288, 2746.83960, 21.98350,   27.00004, -21.42002, 23.76000);
	CreateDynamicObject(1508, 2774.51855, 2740.66699, 12.60313,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(898, 2759.80933, 2745.00439, 13.45212,   -45.47999, 65.99998, -28.97999);
	CreateDynamicObject(19447, 2778.29980, 2731.32031, 13.29660,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19447, 2778.29980, 2731.32031, 16.79180,   180.00000, 0.00000, 45.00000);
	CreateDynamicObject(19447, 2778.31519, 2742.41553, 13.29660,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19447, 2778.31519, 2742.41553, 16.79180,   180.00000, 0.00000, -45.00000);
	CreateDynamicObject(2671, 2765.55859, 2735.31738, 11.40657,   4.56000, -1.86000, 0.00000);
	CreateDynamicObject(3260, 2762.16162, 2737.25732, 12.20944,   0.00000, 0.00000, 81.66001);
	CreateDynamicObject(898, 2756.98462, 2733.67700, 13.45212,   -25.37998, 62.69996, -92.82001);
	CreateDynamicObject(1224, 2822.29199, 2685.35059, 12.13529,   0.00000, 0.00000, -23.52001);
	CreateDynamicObject(2671, 2872.60278, 2735.35229, 11.56517,   0.00000, 0.00000, 174.18033);
	CreateDynamicObject(2671, 2821.08398, 2743.57324, 11.57740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(913, 2777.86035, 2741.23853, 12.32997,   0.00000, 0.00000, 44.63998);
	CreateDynamicObject(2671, 2798.46045, 2730.03369, 11.58800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2671, 2784.79614, 2719.10840, 11.58800,   0.00000, 0.00000, -101.04002);
	CreateDynamicObject(2671, 2779.17847, 2734.44067, 11.58800,   0.00000, 0.00000, -101.04002);
	CreateDynamicObject(635, 2820.27002, 2698.37109, 14.49553,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(635, 2792.59424, 2690.41431, 14.49550,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(820, 2788.17871, 2704.05713, 8.38345,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(820, 2815.73999, 2738.18237, 8.38345,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(635, 2782.97437, 2726.10181, 14.49550,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(1712, 2794.22021, 2735.42383, 12.03924,   -90.00000, 0.00000, 95.99995);
	CreateDynamicObject(2671, 2792.87695, 2732.92822, 11.58800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1230, 2793.37451, 2739.34082, 11.93727,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3111, 2814.50439, 2666.88965, 12.46360,   270.00000, 90.00000, -179.82010);
	CreateDynamicObject(921, 2814.59814, 2667.93555, 12.83329,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2924, 2849.66699, 2712.70239, 12.74571,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12957, 2865.57788, 2731.53564, 11.54224,   0.00000, 0.00000, 83.09997);
	CreateDynamicObject(12957, 2852.86670, 2748.39771, 11.56374,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12957, 2833.33716, 2743.64941, 12.35224,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12957, 2838.65454, 2706.27612, 11.55874,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12957, 2824.85986, 2692.74561, 12.03071,   -3.60000, 37.50000, 60.20000);
	CreateDynamicObject(12957, 2802.52466, 2672.12622, 12.36224,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12957, 2766.37500, 2674.54761, 12.31224,   0.00000, 0.00000, 0.00000);
}
DSRP_UnidentifiedPastebin() {
	new tmpobjid;
	tmpobjid = CreateDynamicObject(19377,1984.357,1089.849,329.724,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19377,1984.357,1099.480,329.724,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19377,1984.357,1080.219,329.724,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19377,1994.857,1080.219,329.724,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19377,2005.357,1080.219,329.724,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19377,2005.357,1089.840,329.724,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1989.528,1089.843,328.050,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19377,2005.357,1099.461,329.724,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1994.329,1084.973,328.050,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19377,1994.857,1109.523,329.724,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,2003.946,1084.973,328.050,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19455,1986.493,1101.042,331.550,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19396,1989.526,1096.254,328.050,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19455,1996.112,1101.042,331.550,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19396,2002.533,1101.042,331.550,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19455,2005.142,1096.232,331.550,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19455,2005.142,1086.612,331.550,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,2000.176,1089.622,328.050,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19455,2005.142,1076.992,331.550,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19455,2000.582,1080.354,331.550,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,2000.176,1099.252,328.050,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19455,1990.962,1080.355,331.550,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,2004.015,1097.662,328.050,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19455,1986.111,1082.613,331.550,0.000,0.000,360.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19455,1986.111,1092.243,331.550,0.000,0.000,360.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19455,1986.111,1101.874,331.550,0.000,0.000,360.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1994.385,1097.662,328.050,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19377,1994.857,1089.849,326.264,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19377,1994.857,1099.479,326.264,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19377,1984.355,1097.208,326.264,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1984.649,1094.756,328.050,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1987.421,1096.468,328.050,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1992.220,1100.009,328.050,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19858,1991.047,1095.949,327.600,0.000,0.000,-164.200,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 19302, "pd_jail_door01", "pd_jail_door01", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,2003.753,1100.009,328.050,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19377,2005.346,1109.093,329.724,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1994.385,1097.772,328.050,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1999.006,1104.740,328.050,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1996.956,1104.740,328.050,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10851, "groundbit_sfse", "ws_altz_wall6big", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1996.959,1105.954,331.540,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,2001.679,1107.095,331.540,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19455,2008.942,1101.042,331.550,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19455,2003.641,1105.933,331.550,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19377,2004.176,1102.399,329.721,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19455,1994.251,1099.341,329.720,0.000,90.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(17969,1992.756,1097.534,328.330,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5390, "glenpark7_lae", "ganggraf01_LA", 0x00000000);
	tmpobjid = CreateDynamicObject(17969,1996.784,1097.534,328.017,-32.099,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14801, "lee_bdupsmain", "Bdup_graf3", 0x00000000);
	tmpobjid = CreateDynamicObject(8661,2004.334,1107.789,333.281,0.000,180.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
	tmpobjid = CreateDynamicObject(8661,2004.334,1087.798,333.281,0.000,180.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
	tmpobjid = CreateDynamicObject(17969,2000.033,1088.504,328.127,-0.700,0.000,360.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14801, "lee_bdupsmain", "Bdup_graf2", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,2000.176,1089.622,333.850,0.000,180.000,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(17969,2000.033,1088.504,328.127,-0.700,0.000,360.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14801, "lee_bdupsmain", "Bdup_graf2", 0x00000000);
	tmpobjid = CreateDynamicObject(19172,1997.634,1085.049,328.585,0.000,13.899,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14612, "ab_abattoir_box", "ab_walldamage", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,2000.179,1092.794,333.863,0.000,180.000,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(2259,1999.441,1085.067,326.820,270.000,149.900,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14612, "ab_abattoir_box", "ab_bloodfloor", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14612, "ab_abattoir_box", "ab_bloodfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1989.549,1092.794,333.833,0.000,180.000,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1995.450,1097.525,333.843,0.000,180.000,270.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(2259,1989.766,1092.359,326.820,270.000,-71.899,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14612, "ab_abattoir_box", "ab_bloodfloor", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14612, "ab_abattoir_box", "ab_bloodfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1994.281,1097.528,333.846,0.000,180.000,270.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1989.555,1089.622,333.850,0.000,180.000,180.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1994.281,1084.898,333.846,0.000,180.000,270.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19460,1995.436,1084.901,333.849,0.000,180.000,270.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18202, "w_towncs_t", "pax256hi", 0x00000000);
	tmpobjid = CreateDynamicObject(19377,1994.857,1089.799,332.174,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19377,1994.857,1092.631,332.177,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19858,2001.458,1107.020,331.050,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "gun_door1", 0x00000000);
	tmpobjid = CreateDynamicObject(1280,2002.020,1086.582,330.230,0.000,0.000,-11.100,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 16322, "a51_stores", "des_ghotwood1", 0x00000000);
	tmpobjid = CreateDynamicObject(1280,2001.838,1091.549,330.230,0.000,0.000,2.099,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 16322, "a51_stores", "des_ghotwood1", 0x00000000);
	tmpobjid = CreateDynamicObject(19428,2005.134,1098.198,329.810,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14615, "abatoir_daylite", "ab_volumelight", 0x00000000);
	tmpobjid = CreateDynamicObject(2115,2003.128,1095.419,329.810,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 2567, "ab", "chipboard_256", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(14409,1998.199,1102.882,326.620,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(4227,1989.529,1094.098,327.770,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(4227,1989.529,1094.098,327.770,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19836,1995.703,1093.217,326.370,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2671,1991.002,1087.776,326.360,0.000,0.000,-57.299,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2673,1994.806,1097.208,326.440,0.000,0.000,-32.899,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1810,1998.315,1085.705,326.320,0.000,0.000,-151.200,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19869,1997.592,1085.005,329.810,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19869,1992.160,1085.015,329.810,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19869,2000.173,1087.665,329.810,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19869,2000.173,1094.957,329.810,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19869,2000.176,1091.265,329.813,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19869,1997.592,1097.536,329.810,0.000,0.000,360.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19869,1992.180,1097.546,329.810,0.000,0.000,360.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19869,1989.551,1094.957,329.810,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19869,1989.551,1087.635,329.810,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19996,1990.385,1083.625,329.810,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19869,1989.554,1091.280,329.813,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19996,1991.895,1083.005,329.810,0.000,0.000,-157.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19996,1992.785,1083.669,329.810,0.000,0.000,178.299,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2670,1991.403,1084.536,329.910,0.000,0.000,-153.800,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2673,1995.095,1084.573,329.890,0.000,0.000,-40.399,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1893,1994.520,1089.114,332.250,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1893,1994.520,1089.114,332.250,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1893,1994.520,1093.883,332.250,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1893,1994.520,1093.883,332.250,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1438,2001.830,1081.554,329.810,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1431,1998.548,1084.518,330.350,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(914,2005.019,1098.224,330.680,0.000,0.000,270.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1625,2005.070,1100.640,330.500,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1625,2005.070,1100.150,330.500,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(927,2005.069,1099.884,331.280,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(935,1986.650,1100.484,330.376,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(935,1986.650,1099.523,330.376,0.000,0.000,-61.899,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2649,2004.589,1088.157,331.390,0.000,270.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1424,2000.956,1105.946,330.330,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1431,1986.577,1084.518,330.350,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1424,2000.956,1103.915,330.330,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1424,2003.226,1103.915,330.330,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(923,1999.844,1100.413,330.680,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2653,1987.005,1084.288,333.180,0.000,180.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1722,2004.679,1095.856,329.800,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2653,1987.005,1092.160,333.180,0.000,180.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2653,1987.005,1100.040,333.180,0.000,180.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19893,2002.983,1096.501,330.610,0.000,0.000,72.400,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19896,2003.202,1095.493,330.630,0.000,0.000,39.799,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(18868,2003.302,1095.716,330.600,0.000,0.000,-21.599,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2670,2002.359,1091.361,329.900,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2670,2004.547,1089.110,329.900,0.000,0.000,44.200,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2059,2002.869,1095.661,330.620,0.000,0.000,63.900,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2676,1999.603,1105.588,329.917,0.000,0.000,-178.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(17969,1997.095,1104.147,331.160,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(17969,1997.095,1104.147,331.160,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19144,1994.007,1092.057,325.390,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2671,1993.450,1099.029,326.360,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2671,1998.190,1099.029,326.360,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(2670,1988.793,1098.599,326.440,0.000,0.000,85.100,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(4227,1991.049,1097.778,327.780,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);

}
DSRP_Park() {
	CreateObject(19377, 696.51691, -543.81360, 15.22560,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 706.93561, -543.76007, 15.22560,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 706.72418, -553.15442, 15.22560,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 696.24072, -553.13568, 15.24560,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 696.23022, -562.65918, 15.22560,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 696.24011, -572.21820, 15.22560,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 696.18707, -581.81329, 15.22560,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 696.21667, -588.12708, 15.22560,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 706.47131, -585.46112, 15.22560,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 706.79956, -575.89246, 15.22560,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 706.66858, -566.51141, 15.22560,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 706.69342, -562.31012, 15.22560,   0.00000, 90.00000, 0.00000);
	CreateObject(19381, 696.15161, -543.84735, 15.22730,   0.00000, 90.00000, 0.00000);
	CreateObject(19381, 706.51263, -543.81335, 15.22730,   0.00000, 90.00000, 0.00000);
	CreateObject(19381, 696.10278, -562.85547, 15.22730,   0.00000, 90.00000, 0.00000);
	CreateObject(19381, 696.01263, -581.90533, 15.22730,   0.00000, 90.00000, 0.00000);
	CreateObject(19381, 696.06567, -588.75037, 15.22730,   0.00000, 90.00000, 0.00000);
	CreateObject(19381, 706.52435, -585.72296, 15.22730,   0.00000, 90.00000, 0.00000);
	CreateObject(19381, 706.73004, -566.64716, 15.22730,   0.00000, 90.00000, 0.00000);
	CreateObject(970, 709.64465, -590.18201, 15.78990,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 705.52301, -590.17560, 15.78990,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 698.01898, -590.13422, 15.78990,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 693.92621, -590.15582, 15.78990,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 690.91510, -588.08624, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 690.89117, -583.98810, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 690.89441, -579.87225, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 690.88232, -575.76978, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 692.97974, -590.16400, 15.78990,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 690.87750, -571.66388, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 690.88263, -567.56415, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 690.88684, -563.42419, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 690.88422, -559.28644, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 690.88354, -555.16608, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 690.89093, -551.04102, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 690.90680, -546.91956, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 690.88812, -542.83710, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 690.89288, -541.41595, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 692.97675, -539.33179, 15.78990,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 697.08374, -539.33917, 15.78990,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 705.61511, -539.33502, 15.78990,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 709.43555, -539.33862, 15.78990,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 710.15668, -539.33337, 15.78990,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 712.22083, -541.44592, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 712.23254, -545.56104, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 712.24976, -549.66345, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 712.24103, -553.78351, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 712.24487, -557.92401, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 712.24750, -562.08441, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 712.24988, -566.22479, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 712.24536, -570.32660, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 712.24280, -574.48828, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 712.23785, -578.57605, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 712.22131, -582.72003, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 712.21478, -586.80365, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 712.23175, -588.11340, 15.78990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 710.16522, -590.17670, 15.78990,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 699.36359, -590.13379, 14.61400,   0.00000, 0.00000, 90.00000);
	CreateObject(19435, 704.21143, -590.13440, 14.61400,   0.00000, 0.00000, 90.00000);
	CreateObject(19435, 707.85132, -590.11029, 14.61400,   0.00000, 0.00000, 90.00000);
	CreateObject(19435, 711.43787, -590.11639, 14.61400,   0.00000, 0.00000, 90.00000);
	CreateObject(19435, 695.34460, -590.15704, 14.61400,   0.00000, 0.00000, 90.00000);
	CreateObject(19435, 691.67126, -590.22150, 14.61400,   0.00000, 0.00000, 90.00000);
	CreateObject(19435, 690.95703, -585.93555, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 690.93903, -581.95599, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 690.91364, -577.80487, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 690.90460, -589.50354, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 690.89301, -573.63239, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 690.91388, -569.55951, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 690.90649, -565.37219, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 690.93921, -561.35217, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 690.82758, -557.23016, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 690.83734, -553.04431, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 690.84253, -548.96368, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 690.84473, -544.82178, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 690.95288, -540.07892, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 691.69714, -539.31567, 14.61400,   0.00000, 0.00000, 90.00000);
	CreateObject(19435, 694.86481, -539.28168, 14.61400,   0.00000, 0.00000, 90.00000);
	CreateObject(19435, 699.17938, -539.33789, 14.61400,   0.00000, 0.00000, 90.00000);
	CreateObject(19435, 707.88782, -539.27185, 14.61400,   0.00000, 0.00000, 90.00000);
	CreateObject(19435, 711.49426, -539.27350, 14.61400,   0.00000, 0.00000, 90.00000);
	CreateObject(19435, 712.24585, -539.98822, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 712.24951, -543.48279, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 712.27698, -547.56598, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 712.29633, -551.68781, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 712.29517, -555.82916, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 712.31262, -559.97009, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 712.25867, -564.17261, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 712.29388, -568.39478, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 712.25531, -572.46136, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 712.23700, -576.44635, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 712.26569, -580.49011, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 712.26715, -584.79303, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 712.19916, -589.37842, 14.61400,   0.00000, 0.00000, 0.00000);
	CreateObject(19447, 703.11053, -585.44305, 15.23220,   0.00000, 90.00000, 0.00000);
	CreateObject(19447, 700.32990, -585.47510, 15.23220,   0.00000, 90.00000, 0.00000);
	CreateObject(19462, 698.80750, -585.36401, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 701.75439, -585.34174, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 704.81061, -585.41583, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19447, 703.17194, -575.87219, 15.23220,   0.00000, 90.00000, 0.00000);
	CreateObject(19447, 700.34802, -575.84503, 15.23220,   0.00000, 90.00000, 0.00000);
	CreateObject(19447, 700.35663, -566.29108, 15.23220,   0.00000, 90.00000, 0.00000);
	CreateObject(19447, 700.35962, -556.73328, 15.23220,   0.00000, 90.00000, 0.00000);
	CreateObject(19447, 700.32727, -547.19232, 15.23220,   0.00000, 90.00000, 0.00000);
	CreateObject(19447, 700.33856, -544.30951, 15.23220,   0.00000, 90.00000, 0.00000);
	CreateObject(19447, 703.21777, -566.27252, 15.23220,   0.00000, 90.00000, 0.00000);
	CreateObject(19447, 703.21246, -556.71252, 15.23220,   0.00000, 90.00000, 0.00000);
	CreateObject(19447, 703.23706, -547.25269, 15.23220,   0.00000, 90.00000, 0.00000);
	CreateObject(19447, 703.21185, -544.10376, 15.23220,   0.00000, 90.00000, 0.00000);
	CreateObject(19462, 701.76575, -575.78290, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 701.77502, -566.18201, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 701.76654, -556.58081, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 701.76514, -547.01984, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 701.78168, -543.27991, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 704.80267, -575.81732, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 704.79926, -566.20929, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 704.79639, -556.64648, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 704.79224, -547.06219, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 704.77960, -542.90802, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 698.80493, -575.75299, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 698.84137, -566.15259, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 698.84009, -556.58850, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 698.85065, -546.97699, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(19462, 698.85333, -540.25702, 13.57750,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 705.39276, -589.20544, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 708.54437, -585.99640, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 708.11163, -566.37146, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 708.21362, -543.94434, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 711.34308, -540.35986, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 705.52747, -540.74677, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(640, 701.79211, -543.23163, 15.93950,   0.00000, 0.00000, 0.00000);
	CreateObject(640, 711.35309, -551.31268, 15.93950,   0.00000, 0.00000, 0.00000);
	CreateObject(640, 701.77942, -558.64990, 15.93950,   0.00000, 0.00000, 0.00000);
	CreateObject(640, 701.71387, -566.41437, 15.93950,   0.00000, 0.00000, 0.00000);
	CreateObject(640, 711.32788, -576.29523, 15.93950,   0.00000, 0.00000, 0.00000);
	CreateObject(640, 701.73334, -584.26990, 15.93950,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 701.75238, -546.23950, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 701.75110, -547.81268, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 701.77576, -553.64948, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 711.34979, -556.02258, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 701.73969, -561.57837, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 701.72845, -563.59082, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 701.74976, -569.26935, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 711.34509, -579.82312, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 691.61432, -568.67560, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 701.68610, -581.39661, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 697.67242, -589.46478, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 691.59735, -589.46832, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 697.73932, -578.03296, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 697.55328, -566.77161, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 694.64752, -544.11029, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 691.45001, -540.59735, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 697.32764, -540.03357, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 695.86694, -586.74158, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 693.02826, -586.76605, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 694.43671, -584.99335, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 693.51782, -580.10004, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 695.97156, -546.07904, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 694.65039, -559.93231, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 696.99530, -564.66956, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 692.96179, -561.11743, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 693.09021, -566.01904, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 692.96716, -563.62598, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 695.36737, -566.35870, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 696.19189, -561.48309, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 695.86005, -541.83508, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 695.79803, -579.98450, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 694.77356, -581.98694, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(1367, 702.11914, -562.53796, 15.88660,   0.00000, 0.00000, 90.00000);
	CreateObject(1367, 701.39685, -562.51508, 15.88660,   0.00000, 0.00000, -90.00000);
	CreateObject(870, 706.52197, -564.09222, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 708.78168, -564.14374, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 710.07684, -566.36481, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 709.39917, -569.16156, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 709.45337, -542.06506, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 706.41980, -543.00018, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 710.06525, -543.81647, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 707.58936, -582.78027, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 710.05902, -584.40045, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 709.97388, -587.86102, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 707.12689, -588.12439, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 706.85583, -585.38434, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 707.66302, -546.07599, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 710.15942, -545.99121, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 706.77533, -569.19647, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 706.30463, -566.77002, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(19435, 704.32001, -539.33789, 14.61400,   0.00000, 0.00000, 90.00000);
	CreateObject(700, 691.80591, -547.81769, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 694.78979, -562.86914, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 697.65656, -558.84583, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 710.95947, -570.95135, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 705.63245, -570.80542, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 711.60321, -566.21484, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 710.64740, -562.71539, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 705.61847, -562.58801, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 710.41827, -589.50775, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 710.59143, -581.71893, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 705.55603, -581.76849, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 710.58899, -547.95306, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 705.49316, -547.91211, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(640, 711.34808, -559.13800, 15.93950,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 691.63708, -549.54547, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 711.33099, -554.48169, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 693.23181, -546.26129, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(870, 692.94434, -542.66028, 15.30766,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 697.51288, -547.41687, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 697.29388, -583.11401, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 691.69025, -577.84082, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 691.83026, -583.41376, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 691.83026, -583.41376, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 691.39661, -567.10486, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 692.13934, -558.99207, 15.21010,   0.00000, 0.00000, 0.00000);
	CreateObject(640, 701.76038, -550.72699, 15.93950,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 701.74786, -555.71399, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 691.59473, -556.91559, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(640, 691.62122, -553.14471, 15.93950,   0.00000, 0.00000, 0.00000);
	CreateObject(640, 691.57990, -572.23511, 15.93950,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 701.73730, -571.89404, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 711.33038, -572.91260, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(640, 701.72412, -574.77704, 15.93950,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 701.69305, -577.65228, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(2010, 691.60028, -575.70020, 15.28460,   0.00000, 0.00000, 0.00000);
	CreateObject(1280, 709.35913, -560.39276, 15.75280,   0.00000, 0.00000, -45.00000);
	CreateObject(1280, 709.54028, -550.04694, 15.73280,   0.00000, 0.00000, 45.00000);
	CreateObject(1280, 710.50983, -552.74341, 15.75280,   0.00000, 0.00000, 0.00000);
	CreateObject(1280, 706.63092, -549.04791, 15.75280,   0.00000, 0.00000, 90.00000);
	CreateObject(1280, 706.54578, -561.21344, 15.75280,   0.00000, 0.00000, -90.00000);
	CreateObject(1280, 693.93890, -549.81207, 15.73300,   0.00000, 0.00000, -225.00000);
	CreateObject(1280, 693.92236, -556.48163, 15.73300,   0.00000, 0.00000, 225.00000);
	CreateObject(1280, 692.78387, -553.08167, 15.73300,   0.00000, 0.00000, 180.00000);
	CreateObject(1280, 693.85864, -568.84241, 15.73190,   0.00000, 0.00000, -220.00000);
	CreateObject(1280, 693.79016, -575.79462, 15.73190,   0.00000, 0.00000, 219.00000);
	CreateObject(1280, 692.43127, -572.17181, 15.73190,   0.00000, 0.00000, 180.00000);
	CreateObject(1280, 709.17719, -579.63629, 15.71360,   0.00000, 0.00000, -45.00000);
	CreateObject(1280, 709.33667, -572.84174, 15.71360,   0.00000, 0.00000, 45.00000);
	CreateObject(1280, 710.44220, -576.32672, 15.71360,   0.00000, 0.00000, 0.00000);
	CreateObject(1297, 710.62811, -579.26306, 16.83270,   0.00000, 0.00000, 0.00000);
	CreateObject(1297, 704.43280, -543.84845, 17.23270,   0.00000, 0.00000, 0.00000);
	CreateObject(1297, 710.53192, -573.27417, 16.83270,   0.00000, 0.00000, 0.00000);
	CreateObject(1297, 698.88062, -543.61310, 17.23270,   0.00000, 0.00000, 180.00000);
	CreateObject(1297, 704.36438, -561.85944, 17.23270,   0.00000, 0.00000, 0.00000);
	CreateObject(1297, 704.45850, -566.76477, 17.23270,   0.00000, 0.00000, 0.00000);
	CreateObject(1297, 704.29327, -580.90735, 17.23270,   0.00000, 0.00000, 0.00000);
	CreateObject(1297, 704.54108, -585.88312, 17.23270,   0.00000, 0.00000, 0.00000);
	CreateObject(1297, 699.11249, -567.70746, 17.23270,   0.00000, 0.00000, 180.00000);
	CreateObject(1297, 698.76837, -562.91791, 17.23270,   0.00000, 0.00000, 180.00000);
	CreateObject(1297, 699.18335, -548.18622, 17.23270,   0.00000, 0.00000, 180.00000);
	CreateObject(1297, 698.95923, -585.89569, 17.23270,   0.00000, 0.00000, 180.00000);
	CreateObject(1297, 692.45880, -569.21649, 17.23270,   0.00000, 0.00000, 180.00000);
	CreateObject(1297, 699.19617, -577.07959, 17.23270,   0.00000, 0.00000, 180.00000);
	CreateObject(1297, 692.37030, -575.16602, 17.23270,   0.00000, 0.00000, 180.00000);
	CreateObject(1297, 693.30835, -549.57306, 17.23270,   0.00000, 0.00000, -225.00000);
	CreateObject(1297, 709.59662, -560.75446, 17.23270,   0.00000, 0.00000, -45.00000);
	CreateObject(1297, 704.32794, -548.68945, 17.23270,   0.00000, 0.00000, 0.00000);
	CreateObject(1297, 710.61139, -555.22168, 17.23270,   0.00000, 0.00000, 0.00000);
	CreateObject(1280, 710.39648, -557.69836, 15.75280,   0.00000, 0.00000, 0.00000);
	CreateObject(1297, 709.78223, -549.98779, 17.23270,   0.00000, 0.00000, 45.00000);
	CreateObject(1297, 704.25342, -571.43030, 17.23270,   0.00000, 0.00000, 0.00000);
	CreateObject(1297, 699.31195, -558.08881, 17.23270,   0.00000, 0.00000, 180.00000);
	CreateObject(1297, 693.42993, -556.69086, 17.23270,   0.00000, 0.00000, 225.00000);
}
forward DayTime();
public DayTime()
{

	new icsec = GetSVarInt("ICsec");
	icsec += 1;
	secspassed++;
	SetSVarInt("ICsec", icsec);
	//printf("[DayTime] icsec: %d",icsec)
	
	if(icsec > 59)
	{
		
		minspassed++;
		new icmin =  GetSVarInt("ICmin");
		icmin += 1;
		//printf("ICMIN %d",icmin);
		new ichour = GetSVarInt("IChour");
		//printf("[%s][%s] [DayTime (IChour: %d)] An IC minute has passed. [Total Seconds Passed: %d; Total Minutes Passed: %d; Total Hours Passed: %d]",PasteDate(),PasteTime(), ichour, secspassed, minspassed, hourspassed);
		SetSVarInt("ICsec", 0);
		SetSVarInt("ICmin", icmin);
		icsec = 0;
		if(icmin > 59)
		{
			hourspassed++;
			ichour += 1;
			icmin = 0;
			SetSVarInt("IChour", ichour);
			SetSVarInt("ICmin", 0);		
			printf("[DayTime] An IC hour has passed. [ICHOUR: %d]", ichour);	
			if(ichour >= 6 && ichour <= 20)
			{
				SetWorldTime(ichour);
				//printf("[DayTime] SetWorldTime has been called. [IChour: %d; ICmin: %d; ICsec: %d]",ichour, icmin, icsec);
				day_condition = 1;
			}
			else 
			{	
				KillTimer(DayTimer);
				KillTimer(NightTimer);
				SetWorldTime(0);
				NightTimer = SetTimer("NightTime", 2300, true); 
				printf("An IC hour passed and time has been changed to Night. [IChour: %d; ICmin: %d; ICsec: %d]",ichour, icmin, icsec);
				day_condition = 0;
				foreach(Player, i)
				{
					if(User[i][Userrace] == 2)
					{
						new temp = GetPVarInt(i, "tRage");
						new perm = GetPVarInt(i, "Rage");
						if(temp < perm)
						{
							new bonus = 1+random(3);
							SFM(i, MAROON, "Rage:"GR" The Beast stirs inside you and Rage floods back into your being as you witness the moon. (%d Rage Points Gained)", bonus);
							if(bonus+temp >= perm)
								UpdateTrait(i, "tRage", perm);	
							else UpdateTrait(i, "tRage", perm+bonus);	
						}
					}
				}
			}
		}

	}
}

forward NightTime();
public NightTime()
{
	new icsec = GetSVarInt("ICsec");
	icsec += 1;
	secspassed++;
	SetSVarInt("ICsec", icsec);
	//printf("[NightTime] ICsec: %d",icsec);
	if(icsec > 59) // if an IC minute passed
	{
		minspassed++;
		new icmin =  GetSVarInt("ICmin");
		icmin += 1;
		new ichour = GetSVarInt("IChour");
		//printf("[%s][%s] [NightTime (ICHour: %d)] An IC minute has passed. [Total Seconds Passed: %d; Total Minutes Passed: %d; Total Hours Passed: %d]",PasteDate(),PasteTime(), ichour, secspassed, minspassed, hourspassed);
		SetSVarInt("ICsec", 0);
		SetSVarInt("ICmin", icmin);
		//printf("ICMIN %d",icmin);
		if(icmin > 59)
		{
			ichour += 1;
			hourspassed++;
			SetSVarInt("IChour", ichour);
			SetSVarInt("ICmin", 0);
			printf("[NightTime] An IC hour has passed. [ICHOUR: %d]", ichour);
			if(ichour > 23)
			{
				//printf("[NightTime] An IC day has passed. [ichour: %d; icmin %d; icsec: %d]",ichour,icmin,icsec);
				ichour = 0;
				SetSVarInt("IChour", 0);
				
			}
			if(ichour > 20 && ichour < 6)
			{
				SetWorldTime(0);
				printf("[NightTime] SetWorldTime has been called. [IChour: %d; ICmin: %d; ICsec: %d]",ichour, icmin, icsec);
			}
			else 
			{	
				KillTimer(DayTimer);
				KillTimer(NightTimer);
				SetWorldTime(6);
				DayTimer = SetTimer("DayTime", 71, true); 
				printf("[NightTime] An IC hour passed and time has been changed to Day. [IChour: %d; ICmin: %d; ICsec: %d]",ichour, icmin, icsec);
				foreach(Player, i)
				{
					if(day_condition == 1 && User[i][Userrace] == 1 && GetPlayerInterior(i) == 0)
					{
						MSG(i, RED,"SUNLIGHT: You have been subjected to the rays of sunlight and slowly started scorching. Seek shelter immediately!");
						SetHealth(i, User[i][Health]-2);
						if(GetPVarInt(i, "SunburnCalled") == 0)  SetTimerEx("SunburnTimer", 10000, false, "i", i);
						SetPVarInt(i, "SunburnCalled", 1);
					}
				}

			}
		}

	}
}
stock Float:GetVehicleSpeed(vehicleid, UseMPH = 1)
{
    new Float:speed_x,Float:speed_y,Float:speed_z,Float:temp_speed;
    GetVehicleVelocity(vehicleid,speed_x,speed_y,speed_z);
    if(UseMPH == 0) temp_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*136.666667;
    else temp_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*85.4166672;
    floatround(temp_speed,floatround_round);
    return temp_speed;
}


CMD:setfuel(playerid,params[])
{
	if(User[playerid][Useradmin] > 0)
	{
		new id,fu;
		if(sscanf(params,"ii",id,fu)) return MSG(playerid, GOLD, "SYNTAX:"GR" /setfuel [vehicleid] [fuel]");
		V[id][fuel] = fu;
		new query[124];
		format(query,sizeof query,"UPDATE cars SET fuel = %d WHERE vid = %d",fu,V[id][dataid]);
		db_query(Database, query);
		return 1;
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
stock GetVehicleType(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 400 .. 416, 418 .. 424, 426 .. 429, 431 .. 434, 436 .. 440, 442 .. 445, 451, 455 .. 459, 466, 467, 470, 471, 474, 475, 477 .. 480, 482, 483, 485, 486, 489 .. 492, 494 .. 496, 498 .. 500, 502 .. 508, 514 .. 518, 524 .. 536, 539 .. 547, 549 .. 552, 554 .. 562, 565 .. 567, 571 .. 576, 578 .. 580, 582, 583, 585, 587 .. 589, 596 .. 605, 609: return CAR;
		case 481, 509, 510: return BIKE;
		case 448, 461, 462, 463, 468, 521, 522, 523, 568, 581, 586: return MOTORBIKE;//And Bandito
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return BOAT;
		case 460, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593: return PLANE;
		case 441, 464, 465, 501, 564, 594: return RC;
		case 449, 537, 538, 569, 570, 590: return TRAIN;
		case 435, 450, 584, 591, 606 .. 608, 610, 611: return TRAILER;
		case 417, 425, 447, 469, 487, 488, 497, 548, 563: return HELICOPTER;
	}
	return -1;
}

/*public OnTwoMinsPass()
{
 	for(new i = 1,j = GetVehiclePoolSize(); i <= j; i++)
	{
			if(AdminVeh[i] || V[i][dataid] == 0) continue;
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == VEHICLE_PARAMS_ON && GetVehicleType(i) != BIKE)
			{
			    new query[100];
			    if(V[i][fuel] > 0)
				{
				    V[i][fuel]--;
				    printf("[fuel] %s (id:%d) has lost one unit of fuel and now has %d left.",GetVehicleName(GetVehicleModel(i)),i,V[i][fuel]);
				    format(query,sizeof query,"UPDATE cars SET fuel = %d WHERE vid = %d",V[i][fuel],V[i][dataid]);
				    db_query(Database, query);
				}
				else
				{
				    new Float:x,Float:y,Float:z;
					SetVehicleParamsEx(i, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
					GetVehiclePos(i,x,y,z);
					foreach(Player,p)
				 	{
				 	    if(IsPlayerInRangeOfPoint(p,30,x,y,z))
				 	    {
						 	format(query,sizeof query,"*** The %s has ran out of fuel.",GetVehicleName(GetVehicleModel(i)));
						 	MSG(p,RP,query);
						}
					}
				}
			}
			else continue;
	}
}*/

public OnMinPass()
{
	foreach(Player,i)
	{
	    if(User[i][Logged])
	    {
			if(User[i][showhud] == true)
			{
				new hud[256];
				format(hud, 256, "%s - %s~n~Moon Phase:~n~ %s~n~Moon Age: %s", PasteDate(true), PasteTimeEx(), moon_phase, moon_age);
				TextDrawSetString(serverhud, hud);
			}
			SetPlayerHealth(i,999999);
	        if(User[i][LocalMin] > 59)
	        {
	            Paycheck(i);
				User[i][JobCD]--;
				User[i][LocalMin] = 0;
				User[i][TotalHours]++;
				User[i][UserXP]++;
				new query[125];
				format(query, sizeof query,"UPDATE users SET hours = %d,userxp = %d WHERE userid = %d",User[i][TotalHours],User[i][UserXP],User[i][UserID]);
				db_query(Database, query);
				new regenwp = GetPVarInt(i, "regenWP");
				//SFM(i, -1, "before regenwp %d", regenwp);
				new temp = GetPVarInt(i, "tWillpower");
				new perm = GetPVarInt(i, "Willpower");				
				if(regenwp >= 0)
				{
					regenwp++;
					UpdateTrait(i, "regenWP", regenwp, 9);
					//SFM(i, -1, "after regenwp %d", regenwp);
					if(regenwp >= 3 && temp != perm)
					{

						if(temp > perm)
							UpdateTrait(i, "tWillpower", perm);
						else UpdateTrait(i, "tWillpower", GetPVarInt(i, "tWillpower")+1);
						RemoveTrait(i, "regenWP");
						MSG(i, cRP, "Willpower:"GR" You have regained a point of Willpower.");
					}
				}
				if(User[i][Userrace] == 4)
				{
					regenwp = GetPVarInt(i, "regenConviction");
					temp = GetPVarInt(i, "tConviction");
					perm = GetPVarInt(i, "Conviction");				
					if(regenwp >= 0)
					{
						regenwp++;
						UpdateTrait(i, "regenConviction", regenwp, 9);
						if(regenwp >= 3 && temp != perm)
						{
							if(temp > perm)
								UpdateTrait(i, "tConviction", perm);
							else UpdateTrait(i, "tConviction", GetPVarInt(i, "tConviction")+1);
							RemoveTrait(i, "regenConviction");
							MSG(i, cRP, "Conviction:"GR" You have regained a point of Conviction.");
						}
					}
				}				
				if(User[i][Userrace] == 6)
				{
					regenwp = GetPVarInt(i, "regenGlamour");
					temp = GetPVarInt(i, "tGlamour");
					perm = GetPVarInt(i, "Glamour");				
					if(regenwp >= 0)
					{
						regenwp++;
						UpdateTrait(i, "regenGlamour", regenwp, 9);
						if(regenwp >= 3 && temp != perm)
						{
							if(temp > perm)
								UpdateTrait(i, "tGlamour", perm);
							else UpdateTrait(i, "tGlamour", GetPVarInt(i, "tGlamour")+1);
							RemoveTrait(i, "regenGlamour");
							MSG(i, cRP, "Glamour:"GR" You have regained a point of Glamour.");
						}
					}
				}				
	        }
			else
			{
			    User[i][LocalMin]++;
				if(User[i][Userrace] != 1)
				{
					new Float:hunger = GetPlayerProgressBarValue(i, bHunger);
					new Float:thirst = GetPlayerProgressBarValue(i, bThirst);
					if(hunger > 0) User[i][pHunger] = hunger-0.1;
					if(thirst > 0) User[i][pThirst] = thirst-0.2;
					if(hunger > 0.1 || thirst > 0.2)
					{
						SetPlayerProgressBarValue(i, bHunger, User[i][pHunger]);
						SetPlayerProgressBarValue(i, bThirst, User[i][pThirst]);
						format(large_string, sizeof large_string, "UPDATE users SET hunger = %d,thirst = %d WHERE userid = %d", floatround(User[i][pHunger]), floatround(User[i][pThirst]), User[i][UserID]);
						db_query(Database, large_string);
					}
					if(hunger < 25 || thirst < 25)
					{
						// SetPlayerDrunkLevel(i, 49999);
					}
					else
					{	
						// SetPlayerDrunkLevel(i, 0);
					}
					if(hunger < 15 || thirst < 15)
					{
						if(User[i][Health] > 0)	SetHealth(i, User[i][Health]-1);
					}

				}
				large_string[0] = EOS;
				if(User[i][uCourier][2] > 0)
				{
				    new query[125];
				    User[i][uCourier][2]--;
				    format(query,sizeof query,"%d,%d,%d",User[i][uCourier][0],User[i][uCourier][1],User[i][uCourier][2]);
    				format(query, sizeof query,"UPDATE jobs SET courier = '%s' WHERE userid = %d",query,User[i][UserID]);
					db_query(Database, query);
				}
				else if(User[i][uPB][2] > 0)
				{
				    new query[125];
				    User[i][uPB][2]--;
				    format(query,sizeof query,"%d,%d,%d",User[i][uPB][0],User[i][uPB][1],User[i][uPB][2]);
    				format(query, sizeof query,"UPDATE jobs SET pizzaboy = '%s' WHERE userid = %d",query,User[i][UserID]);
					db_query(Database, query);
				}
				else if(User[i][uMW][2] > 0)
				{
				    new query[125];
				    User[i][uMW][2]--;
				    format(query,sizeof query,"%d,%d,%d",User[i][uMW][0],User[i][uMW][1],User[i][uMW][2]);
    				format(query, sizeof query,"UPDATE jobs SET mower = '%s' WHERE userid = %d",query,User[i][UserID]);
					db_query(Database, query);
				}
				else if(User[i][uBW][2] > 0)
				{
				    new query[125];
				    User[i][uPB][2]--;
				    format(query,sizeof query,"%d,%d,%d",User[i][uPB][0],User[i][uPB][1],User[i][uPB][2]);
    				format(query, sizeof query,"UPDATE jobs SET bus = '%s' WHERE userid = %d",query,User[i][UserID]);
					db_query(Database, query);
				}
				else if(User[i][uSW][2] > 0)
				{
				    new query[125];
				    User[i][uSW][2]--;
				    format(query,sizeof query,"%d,%d,%d",User[i][uSW][0],User[i][uSW][1],User[i][uSW][2]);
    				format(query, sizeof query,"UPDATE jobs SET sweeper = '%s' WHERE userid = %d",query,User[i][UserID]);
					db_query(Database, query);
				}
				else if(User[i][uWH][2] > 0)
				{
				    new query[125];
				    User[i][uWH][2]--;
				    format(query,sizeof query,"%d,%d,%d",User[i][uWH][0],User[i][uWH][1],User[i][uWH][2]);
    				format(query, sizeof query,"UPDATE jobs SET warehouse = '%s' WHERE userid = %d",query,User[i][UserID]);
					db_query(Database, query);
				}				
			}
			if(User[i][jail][0] > 0)
			{
			    new query[125];
			    User[i][jail][0]--;
				if(User[i][jail][0] <= 0)
				{
					SpawnPlayer(i);
					MSG(i,WHITE,"SERVER: You have served your sentence.");
					User[i][jail][1] = 0;
				}
				format(query, sizeof query,"UPDATE users SET jailtime = jailtime-1,jailtype = %d WHERE userid = %d",User[i][jail][1],User[i][UserID]);
				db_query(Database, query);				
			}
			if(User[i][druglevel] > 0)
			{
				User[i][druglevel]--;
				// SetPlayerDrunkLevel(i,49999);
				if(User[i][druglevel] < 1)
				{
				    User[i][druglevel] = 0;
				    // SetPlayerDrunkLevel(i, 0);
				}
			}
			if(User[i][Userrace] == 1)
			{
				new str = GetPVarInt(i, "bStrength");
				new dex = GetPVarInt(i, "bDexterity");
				new stam = GetPVarInt(i, "bStamina");
				new maxtrait = GetMaxTraitRating(i)+1;
				if(str > 0 || dex > 0 || stam > 0)
				{
					new position[24];
					GetPVarString(i, "BuffPos", position, 24);
					new Float:xxx,Float:yyy,Float:zzz;
					sscanf(position, "p<,>fff", xxx, yyy, zzz);
					if(!IsPlayerInRangeOfPoint(i, 120, xxx, yyy, zzz) && GetPlayerVirtualWorld(i) != GetPVarInt(i, "BuffVW") && User[i][specing] == -1)
					{
						if(str <= maxtrait || dex <= maxtrait || stam <= maxtrait)
						{
							MSG(i, GOLD,"Info:"GR" Your blood buff dissipated because you left the activation radius.");
							RemoveTrait(i, "bDexterity");
							RemoveTrait(i, "bStrength");
							RemoveTrait(i, "bStamina");
							RemoveTrait(i, "BuffPos");
							RemoveTrait(i, "BuffVW");
						}
					}
					
				}
			}
			else if(User[i][Userrace] == 2)
			{
				if(GetPlayerAnimationIndex(i) == 43)
				{
					new gnosismin = GetPVarInt(i,"GnosisMin");
					SetPVarInt(i, "GnosisMin", gnosismin+1);
					if(gnosismin > 5)
					{
						new curgnosis = GetPVarInt(i, "tGnosis");
						if(curgnosis < GetPVarInt(i, "Gnosis"))
						{
							UpdateTrait(i, "tGnosis", curgnosis+1);
							MSG(i, cRP,"Gnosis:"GR" You have regained a point of temporary Gnosis.");
							SetPVarInt(i, "GnosisMin", 0);
						}
					}
				}
			}
			if(AnimalStatus[DEER] == DEAD) AnimalDeath[DEER]++;
			if(AnimalStatus[WOLF] == DEAD) AnimalDeath[WOLF]++;
			//printf("AnimalDeath[%d] = %d", DEER, AnimalDeath[DEER]);
			//printf("AnimalDeath[%d] = %d", WOLF, AnimalDeath[WOLF]);
			if(AnimalDeath[DEER] > 9)
			{
				SetDynamicObjectPos(Animal[DEER], DeerPathway[0][0], DeerPathway[0][1], DeerPathway[0][2]-1.2);
				SetDynamicObjectRot(Animal[DEER], 0, 0, 0);
				MoveDynamicObject(Animal[DEER], DeerPathway[1][0], DeerPathway[1][1], DeerPathway[1][2]-1.2, ANIMAL_SPEED);
				DeerPath = 1;
				AnimalStatus[DEER] = ALIVE;
				AnimalSkinned[DEER] = false;
				AnimalAttack[DEER] = 0;
				AnimalDeath[DEER] = 0;
				Staff(ADMIN,"DEBUG: Deer has respawned.");
				//printf("AnimalDeath[%d] = %d", DEER, AnimalDeath[DEER]);
			}
			if(AnimalDeath[WOLF] > 9)
			{
				SetDynamicObjectPos(Animal[WOLF], WolfPathway[0][0], WolfPathway[0][1], WolfPathway[0][2]-1.2);
				SetDynamicObjectRot(Animal[WOLF], 0, 0, 0);
				MoveDynamicObject(Animal[WOLF], WolfPathway[1][0], WolfPathway[1][1], WolfPathway[1][2]-1.2, ANIMAL_SPEED);
				WolfPath = 1;
				AnimalStatus[WOLF] = ALIVE;
				AnimalSkinned[WOLF] = false;
				AnimalAttack[WOLF] = 0;
				AnimalDeath[WOLF] = 0;
				Staff(ADMIN,"DEBUG: Wolf has respawned.");
			}	
		}
	}
	/*-------------- VEHICLE FUEL -----------------*/
	FuelCooldown++;
	if(FuelCooldown > 1)
	{
		FuelCooldown = 0;
		for(new i = 1,j = GetVehiclePoolSize(); i <= j; i++)
		{
				if(AdminVeh[i] || V[i][dataid] == 0) continue;
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
				if(engine == VEHICLE_PARAMS_ON && GetVehicleType(i) != BIKE)
				{
					new query[100];
					if(V[i][fuel] > 0)
					{
						V[i][fuel]--;
						printf("[fuel] %s (id:%d) has lost one unit of fuel and now has %d left.",GetVehicleName(GetVehicleModel(i)),i,V[i][fuel]);
						format(query,sizeof query,"UPDATE cars SET fuel = %d WHERE vid = %d",V[i][fuel],V[i][dataid]);
						db_query(Database, query);
					}
					else
					{
						new Float:x,Float:y,Float:z;
						SetVehicleParamsEx(i, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
						GetVehiclePos(i,x,y,z);
						foreach(Player,p)
						{
							if(IsPlayerInRangeOfPoint(p,30,x,y,z))
							{
								format(query,sizeof query,"*** The %s has ran out of fuel.",GetVehicleName(GetVehicleModel(i)));
								MSG(p,RP,query);
							}
						}
					}
				}
				else continue;
		}
	}
	foreach(Trees, id)
	{
		if(TREE[id][treehealth] < 1)
		{
			TREE[id][respawntree]++;
			if(TREE[id][respawntree] > 14)
			{
				MoveDynamicObject(TREE[id][treeobject], TREE[id][treex], TREE[id][treey], TREE[id][treez]-0.8, 1, 0, 0, 0);
				TREE[id][treehealth] = 100;
				TREE[id][loghealth] = 0;
				TREE[id][t_logged] = true;
			}
		}
	}
}
stock Paycheck(playerid)
{
	new house_tax;
	new business_tax;
	new property_tax;

	foreach(Houses, h)
	{
		if(User[playerid][UserID] == H[h][howner])
		{
			house_tax += floatround(H[h][hprice]*0.01);
			printf("House ID %d; TAX: %d",h,house_tax);
		}
			
	}
	foreach(Biz, b)
	{
		if(User[playerid][UserID] == B[b][bowner])
		{
			business_tax += floatround(B[b][bprice]*0.01);
			printf("BIZ ID %d; TAX: %d",b,business_tax);
		}
	}
	foreach(Props, p)
	{
		if(User[playerid][UserID] == P[p][powner])
		{
			if(!isnull(P[p][pname]))
			{
				property_tax += P[p][ptax];
				printf("PROP ID %d; TAX: %d",p,property_tax);
			}
		} 
	}
	if(!isnull(User[playerid][donator]))
	{
		property_tax = property_tax/2;
		house_tax = house_tax/2;
		business_tax = business_tax/2;
	}
	printf("property tax: %d",property_tax);
	printf("house tax: %d",house_tax);
	printf("business tax: %d",business_tax);
	if(User[playerid][psalary] == 0)
		User[playerid][pPayment] = User[playerid][pPayment]+50;
	else User[playerid][pPayment] = User[playerid][pPayment]+User[playerid][psalary]; 

	
	MSG(playerid,GRAD2,"|____ ["G"Paycheck"GR"] ____|");
	new balance;
	if(User[playerid][PrimaryAccount] > 0) 
	{
		format(large_string, sizeof large_string, "SELECT balance FROM banks WHERE bankid = %d", User[playerid][PrimaryAccount]);
		new DBResult:Result = db_query(Database, large_string);
		balance = db_get_field_assoc_int(Result, "balance");
		if(balance > 0)	format(large_string,sizeof large_string,"[Previous Balance: "G"$%d"GR"]", balance);
		else format(large_string,sizeof large_string,"[Previous Balance: "MAR"$%d"GR"]", balance);
		MSG(playerid,GRAD2,large_string);
		db_free_result(Result);
	}
	else
	{
		MSG(playerid,GRAD2,"[Balance: No Primary Account Selected]");
	}
	if(User[playerid][pPayment] > 0)
		format(large_string,sizeof large_string,"[Job Income: "G"$%d"GR"]",User[playerid][pPayment]);
	else format(large_string,sizeof large_string,"[Job Income: $%d]",User[playerid][pPayment]);
	MSG(playerid,GRAD2,large_string);
	new resources = GetPVarInt(playerid, "Resources");
	new resources_income = 200*resources;
	if(resources > 0)
	{
		format(large_string, sizeof large_string,"[Resources: "G"$%d"GR"]", resources_income);
		MSG(playerid,GRAD2,large_string);
	}
	if(house_tax > 0)
		format(large_string,sizeof large_string,"[House Tax: "MAR"$%d"GR"]",house_tax);
	else format(large_string,sizeof large_string,"[House Tax: "G"$%d"GR"]",house_tax);
	MSG(playerid,GRAD2,large_string);
	if(business_tax > 0)
		format(large_string,sizeof large_string,"[Business Tax: "MAR"$%d"GR"]",business_tax);
	else format(large_string,sizeof large_string,"[Business Tax: "G"$%d"GR"]",business_tax);
	MSG(playerid,GRAD2,large_string);
	if(property_tax > 0)
		format(large_string,sizeof large_string,"[Properties Tax: "MAR"$%d"GR"]",property_tax);
	else format(large_string,sizeof large_string,"[Properties Tax: "G"$%d"GR"]",property_tax);
	MSG(playerid,GRAD2,large_string);
	new totalcalc = balance+resources_income+User[playerid][pPayment]-(house_tax+business_tax+property_tax);
	if(totalcalc > 0)
		format(large_string,sizeof large_string,"[Present Balance: "G"$%d"GR"]",totalcalc);
	else format(large_string,sizeof large_string,"[Present Balance: "MAR"$%d"GR"]",totalcalc);
	MSG(playerid,GRAD2,large_string);	
	if(User[playerid][PrimaryAccount] > 0) 
	{
			format(large_string,sizeof large_string,"UPDATE banks SET balance = balance+%d+%d-%d WHERE bankid = %d",User[playerid][pPayment],resources_income,house_tax+business_tax+property_tax,User[playerid][PrimaryAccount]);
			db_query(Database, large_string);	
			
			if(User[playerid][pPayment] != 0) 
			{
				format(large_string,80,"UPDATE users SET payment = 0 WHERE userid = %d",User[playerid][UserID]);
				db_query(Database, large_string);
				User[playerid][pPayment] = 0;
			}
	}
	else
	{
		if(User[playerid][pPayment] != 0)
		{
			User[playerid][uMoney] = User[playerid][uMoney]+User[playerid][pPayment]+resources_income;
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid,User[playerid][uMoney]);						
			format(large_string,124,"UPDATE users SET payment = 0,money = %d WHERE userid = %d",User[playerid][uMoney],User[playerid][UserID]);
			db_query(Database, large_string);
			User[playerid][pPayment] = 0;			
		}
		GiveMoney(playerid,-(house_tax+business_tax+property_tax));
		if((house_tax+business_tax+property_tax) > 0) MSG(playerid,GRAD2,"Info:"GR" You don't have a primary bank account set, taxes have been paid manually.");
	}
	MSG(playerid,GRAD2,"|___________________|");
}
CMD:wr(playerid, params[])
	return cmd_werewolfregenration(playerid, params);
CMD:werewolfregenration(playerid,params[])
{
	if(User[playerid][Userrace] == 2)
	{
		if(User[playerid][Death] > 0)	return MSG(playerid, GOLD, "ERROR:"GR" You cannot use this command while incapacitated.");
		new level;
		if(sscanf(params, "i", level))
			return MSG(playerid, GOLD, "Info:"GR" /(w)erewolf(r)egeneration [healthleveltoheal(1-max)]");
		if(level < 1 || level > HP[playerid][hMaxLevel]) return MSG(playerid, GOLD, "ERROR:"GR" Invalid health level specified.");
		new dmg[10];
		new hp = 10;
		switch(HP[playerid][hLevel][level])
		{
			case 1: return MSG(playerid, GOLD, "SERVER:"GR" Specified health level is `OK`.");
			case 2: dmg = "bashing", hp = 5;
			case 3: dmg = "lethal", hp = 10;
			case 4: return MSG(playerid, GOLD, "SERVER:"GR" You cannot heal aggravated damage.");
		}
		new cd = GetPVarInt(playerid, "jRegenerate");
		if(gettime() < cd)
			return SFM(playerid, GOLD, "ERROR:"GR" You have just regenerated. Wait %d seconds to use this command again.", cd-gettime());
		if(hp > 0)
		{
			format(large_string, 256,"> * %s has regenerated a level of %s damage.", sendernameEx(playerid), dmg);// hp);
			AutoMSG(playerid, large_string);
			gIncreaseHP(playerid, hp);
			SetPVarInt(playerid, "jRegenerate", gettime()+15);
			HP[playerid][hLevel][level] = 1;
			format(large_string, sizeof large_string,"HEALTH LEVELS: %s", PasteHealthCondition(playerid));
			PlayerTextDrawSetString(playerid, tHLevel[playerid], large_string);
			UpdateHealthLevels(playerid);
		}
		return 1;
	}
	return MSG(playerid, GOLD,"ERROR:"GR" You are not a Werewolf.");
}
stock ApplyAnim(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
	if(!User[playerid][Logged])
		return 0;
	if(User[playerid][pinvis])
		return MSG(playerid, GOLD, "ERROR:"GR" You cannot perform animations while invisible.");
	if(User[playerid][Death] > 0)
		return MSG(playerid, GOLD, "ERROR:"GR" You cannot perform animations while incapacitated.");
	if(User[playerid][tazed])
		return MSG(playerid, GOLD, "ERROR:"GR" You cannot perform animations while tazed.");
	ApplyAnimation(playerid, animlib, animname, Float:fDelta, loop, lockx, locky, freeze, time, forcesync);
	return 1;
}
// ANIMATIONS
CMD:lay(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /lay [1-5]");
	if(anumber < 1 || anumber > 5) return 0;
	if(anumber == 1) ApplyAnim(playerid,"BEACH","bather",4.0,1,0,0,0,0); 
	if(anumber == 2) ApplyAnim(playerid,"BEACH","Lay_Bac_Loop",4.0,1,0,0,0,0); 
	if(anumber == 3) ApplyAnim(playerid,"BEACH","ParkSit_W_loop",4.0,1,0,0,0,0); 
	if(anumber == 4) ApplyAnim(playerid,"BEACH","SitnWait_loop_W",4.0,1,0,0,0,0); 
	if(anumber == 4) ApplyAnim(playerid,"BEACH","SitnWait_loop_W",4.0,1,0,0,0,0);
	if(anumber == 5) ApplyAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0,1,0,0,0,0);
	return 1;
}
CMD:foodsit(playerid,params) { ApplyAnim(playerid, "PED", "FF_Sit_In",4.0,0,0,0,0,0); return 1; }
CMD:checktime(playerid,params) { ApplyAnim(playerid, "COP_AMBIENT", "Coplook_watch",4.0,0,0,0,0,0); return 1; }
CMD:hurt(playerid,params) { ApplyAnim(playerid, "CRACK", "crckidle1",4.0,0,1,1,1,-1); return 1; }
CMD:dive(playerid,params) { ApplyAnim(playerid,"DAM_JUMP","DAM_Launch",4.0,0,1,1,1,0); return 1;  }
CMD:showoff(playerid,params) { ApplyAnim(playerid,"Freeweights","gym_free_celebrate",4.0,0,0,0,0,0); return 1; }
CMD:scratch(playerid,params) { ApplyAnim(playerid,"MISC","Scratchballs_01",4.0,0,0,0,0,0); return 1; }
CMD:salute(playerid,params) { ApplyAnim(playerid,"ON_LOOKERS","Pointup_loop",4.0,0,0,0,0,0); return 1; }
CMD:holdon(playerid,params) { ApplyAnim(playerid,"PED","endchat_01",4.0,0,0,0,0,0); return 1; }
CMD:washhands(playerid,params) { ApplyAnim(playerid,"BD_FIRE","wash_up",4.0,0,0,0,0,0); return 1; }
CMD:cry(playerid,params) { ApplyAnim(playerid,"GRAVEYARD","mrnF_loop",4.0,1,0,0,0,0); return 1; }
CMD:what(playerid,params) { ApplyAnim(playerid,"RIOT","RIOT_ANGRY", 4.0, 0, 0, 0, 0, 0); return 1; }
CMD:followme(playerid,params) { ApplyAnim(playerid,"WUZI","Wuzi_follow",4.0,0,0,0,0,0); return 1; }
CMD:greet(playerid,params) { ApplyAnim(playerid,"WUZI","Wuzi_Greet_Wuzi",4.0,0,0,0,0,0); return 1; }
CMD:stand(playerid,params) { ApplyAnim(playerid,"WUZI","Wuzi_stand_loop", 4.0, 1, 0, 0, 0, 0); return 1; }
CMD:hitch(playerid,params) { ApplyAnim(playerid,"MISC","Hiker_Pose", 4.0, 1, 0, 0, 0, 0); return 1; }
CMD:cpr(playerid,params) { ApplyAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0); return 1; }
CMD:kiss(playerid,params) { ApplyAnim(playerid,"KISSING","Playa_Kiss_01",4.0,0,0,0,0,0); return 1; }
CMD:eat(playerid,params) { ApplyAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0); return 1; }
CMD:lookout(playerid,params) { ApplyAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); return 1; }
CMD:laugh(playerid,params) { ApplyAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0); return 1; }
CMD:robman(playerid,params) { ApplyAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0); return 1; }
CMD:vomit(playerid,params) { ApplyAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); return 1; }
CMD:fu(playerid,params) { ApplyAnim(playerid,"PED","fucku",4.0,0,0,0,0,0); return 1; }
CMD:crack(playerid,params) { return ApplyAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0); }
CMD:dodge(playerid, params) { return ApplyAnim(playerid, "DODGE", "Crush_Jump", 4.1, 0, 0, 0, 0, 0, 1);}
CMD:goggles(playerid, params) { return ApplyAnim(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);}
CMD:still(playerid, params) { return ApplyAnim(playerid, "SWAT", "swt_sty", 4.1, 0, 0, 0, 0, 0, 1);}
//SWAT swt_sty
CMD:anims(playerid,params)
{
	if(!User[playerid][Logged])
		return 0;
	large_string[0] = EOS;
	strcat(large_string,""R"[Anims]"GR" /foodsit /checktime /relax /bar /showoff /scratch /salute /holdon /washhands /fall\n");
	strcat(large_string,""R"[Anims]"GR" /cry /what /followme /greet /stand /cpr /hitch /eat /lookout /crack /baseball\n");
	strcat(large_string,""R"[Anims]"GR" /laugh /robman /vomit /fu /crack /what /seat /rap /handsup /lay /smoke /pull\n");
	strcat(large_string,""R"[Anims]"GR" /nobreath /crossarms /signal /lean /choke /wave /cheer /deal /chat /gesture\n");
	strcat(large_string,""R"[Anims]"GR" /benchpress /jump /basketball /erp /buddy /camera /carfix /colt /carry /bomb /ambient\n");
	strcat(large_string,""R"[Anims]"GR" /dodge /dildo /drugged /fight /graffiti /goggles /grenade /graveyard\n");
	strcat(large_string, ""R"[Anims]"GR" /strip /tip /still /dance /idance /dive");
	Dialog_Show(playerid, dAnims, DIALOG_STYLE_MSGBOX, "Animations", large_string, "Close", "");
    return 1;
}
CMD:donkeydick(playerid, params[])
return MSG(playerid, WHITE, "DONKEY DICK");
CMD:benchpress(playerid,params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /benchpress [1-6]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "benchpress", "gym_bp_down", 4, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "benchpress", "gym_bp_getoff", 4, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "benchpress", "gym_bp_geton", 4, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "benchpress", "gym_bp_up_A", 4, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "benchpress", "gym_bp_up_B", 4, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnim(playerid, "benchpress", "gym_bp_up_smooth", 4, 1, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/benchpress:"GR" [1-6]");
	}
	return 1;
	//benchpress gym_bp_down 4 1 0 0 0 0 0 1
}
CMD:jump(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /jump [1-4]");
	//ApplyAnim(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "BF_injection", "BF_getin_RHS", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "BF_injection", "BF_getin_LHS", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "BF_injection", "BF_getout_RHS", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "BF_injection", "BF_getout_LHS", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/jump:"GR" [1-4]");
	}
	return 1;
	//BF_injection BF_getin_RHS
}
CMD:erp(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /erp [1-12]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "BLOWJOBZ", "BJ_COUCH_START_W", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "BLOWJOBZ", "BJ_COUCH_END_W", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "BLOWJOBZ", "BJ_COUCH_START_P", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnim(playerid, "BLOWJOBZ", "BJ_COUCH_END_P", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnim(playerid, "BLOWJOBZ", "BJ_STAND_START_W", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnim(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
		case 9: ApplyAnim(playerid, "BLOWJOBZ", "BJ_STAND_END_W", 4.1, 0, 0, 0, 0, 0, 1);
		case 10: ApplyAnim(playerid, "BLOWJOBZ", "BJ_STAND_START_P", 4.1, 0, 0, 0, 0, 0, 1);
		case 11: ApplyAnim(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
		case 12: ApplyAnim(playerid, "BLOWJOBZ", "BJ_STAND_END_P", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/erp"GR" [1-12]");
	}
	return 1;
}
CMD:bomb(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /bomb [1-5]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "BOMBER", "BOM_Plant_2Idle", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "BOMBER", "BOM_Plant_Crouch_Out", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "BOMBER", "BOM_Plant_In", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/bomb"GR" [1-5]");
	}
	return 1;
}
CMD:basketball(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /basketball [1-34]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "BSKTBALL", "BBALL_def_jump_shot", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "BSKTBALL", "BBALL_def_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "BSKTBALL", "BBALL_def_stepL", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "BSKTBALL", "BBALL_def_stepR", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "BSKTBALL", "BBALL_Dnk", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnim(playerid, "BSKTBALL", "BBALL_Dnk_Gli", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnim(playerid, "BSKTBALL", "BBALL_Dnk_Gli_O", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnim(playerid, "BSKTBALL", "BBALL_Dnk_Lnch", 4.1, 0, 0, 0, 0, 0, 1);
		case 9: ApplyAnim(playerid, "BSKTBALL", "BBALL_Dnk_Lnch_O", 4.1, 0, 0, 0, 0, 0, 1);
		case 10: ApplyAnim(playerid, "BSKTBALL", "BBALL_Dnk_Lnd", 4.1, 0, 0, 0, 0, 0, 1);
		case 11: ApplyAnim(playerid, "BSKTBALL", "BBALL_Dnk_O", 4.1, 0, 0, 0, 0, 0, 1);
		case 12: ApplyAnim(playerid, "BSKTBALL", "BBALL_idle", 4.1, 0, 0, 0, 0, 0, 1);
		case 13: ApplyAnim(playerid, "BSKTBALL", "BBALL_idle2", 4.1, 0, 0, 0, 0, 0, 1);
		case 14: ApplyAnim(playerid, "BSKTBALL", "BBALL_idle2_O", 4.1, 0, 0, 0, 0, 0, 1);
		case 15: ApplyAnim(playerid, "BSKTBALL", "BBALL_idleloop", 4.1, 1, 0, 0, 0, 0, 1);
		case 16: ApplyAnim(playerid, "BSKTBALL", "BBALL_idleloop_O", 4.1, 1, 0, 0, 0, 0, 1);
		case 17: ApplyAnim(playerid, "BSKTBALL", "BBALL_idle_O", 4.1, 0, 0, 0, 0, 0, 1);
		case 18: ApplyAnim(playerid, "BSKTBALL", "BBALL_Jump_Cancel", 4.1, 0, 0, 0, 0, 0, 1);
		case 19: ApplyAnim(playerid, "BSKTBALL", "BBALL_Jump_Cancel_O", 4.1, 0, 0, 0, 0, 0, 1);
		case 20: ApplyAnim(playerid, "BSKTBALL", "BBALL_Jump_End", 4.1, 0, 0, 0, 0, 0, 1);
		case 21: ApplyAnim(playerid, "BSKTBALL", "BBALL_Jump_Shot", 4.1, 0, 0, 0, 0, 0, 1);
		case 22: ApplyAnim(playerid, "BSKTBALL", "BBALL_Jump_Shot_O", 4.1, 0, 0, 0, 0, 0, 1);
		case 23: ApplyAnim(playerid, "BSKTBALL", "BBALL_Net_Dnk_O", 4.1, 0, 0, 0, 0, 0, 1);
		case 24: ApplyAnim(playerid, "BSKTBALL", "BBALL_pickup", 4.1, 0, 0, 0, 0, 0, 1);
		case 25: ApplyAnim(playerid, "BSKTBALL", "BBALL_pickup_O", 4.1, 0, 0, 0, 0, 0, 1);
		case 26: ApplyAnim(playerid, "BSKTBALL", "BBALL_react_miss", 4.1, 0, 0, 0, 0, 0, 1);
		case 27: ApplyAnim(playerid, "BSKTBALL", "BBALL_react_score", 4.1, 0, 0, 0, 0, 0, 1);
		case 28: ApplyAnim(playerid, "BSKTBALL", "BBALL_run", 4.1, 0, 0, 0, 0, 0, 1);
		case 29: ApplyAnim(playerid, "BSKTBALL", "BBALL_run_O", 4.1, 0, 0, 0, 0, 0, 1);
		case 30: ApplyAnim(playerid, "BSKTBALL", "BBALL_SkidStop_L", 4.1, 0, 0, 0, 0, 0, 1);
		case 31: ApplyAnim(playerid, "BSKTBALL", "BBALL_SkidStop_L_O", 4.1, 0, 0, 0, 0, 0, 1);
		case 32: ApplyAnim(playerid, "BSKTBALL", "BBALL_SkidStop_R", 4.1, 0, 0, 0, 0, 0, 1);
		case 33: ApplyAnim(playerid, "BSKTBALL", "BBALL_SkidStop_R_O", 4.1, 0, 0, 0, 0, 0, 1);
		case 34: ApplyAnim(playerid, "BSKTBALL", "BBALL_walk", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/basketball"GR" [1-34]");
	}
	return 1;
}
CMD:buddy(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /buddy [1-5]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "BUDDY", "buddy_crouchfire", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "BUDDY", "buddy_crouchreload", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "BUDDY", "buddy_fire", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "BUDDY", "buddy_fire_poor", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "BUDDY", "buddy_reload", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/buddy"GR" [1-5]");
	}
	return 1;
}
CMD:camera(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /camera [1-14]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "CAMERA", "camcrch_cmon", 4.1, 0, 0, 0, 0, 1000*10, 1);
		case 2: ApplyAnim(playerid, "CAMERA", "camcrch_idleloop", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "CAMERA", "camcrch_stay", 4.1, 0, 0, 0, 0, 1000*10, 1);
		case 4: ApplyAnim(playerid, "CAMERA", "camcrch_to_camstnd", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "CAMERA", "camstnd_cmon", 4.1, 0, 0, 0, 0, 1000*10, 1);
		case 6: ApplyAnim(playerid, "CAMERA", "camstnd_idleloop", 4.1, 1, 0, 0, 0, 0, 1);
		case 7: ApplyAnim(playerid, "CAMERA", "camstnd_lkabt", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnim(playerid, "CAMERA", "camstnd_to_camcrch", 4.1, 0, 0, 0, 0, 0, 1);
		case 9: ApplyAnim(playerid, "CAMERA", "camstnd_to_camcrch", 4.1, 0, 0, 0, 0, 0, 1);
		case 10: ApplyAnim(playerid, "CAMERA", "piccrch_out", 4.1, 0, 0, 0, 0, 0, 1);
		case 11: ApplyAnim(playerid, "CAMERA", "piccrch_take", 4.1, 0, 0, 0, 0, 0, 1);
		case 12: ApplyAnim(playerid, "CAMERA", "picstnd_in", 4.1, 0, 0, 0, 0, 0, 1);
		case 13: ApplyAnim(playerid, "CAMERA", "picstnd_out", 4.1, 0, 0, 0, 0, 0, 1);
		case 14: ApplyAnim(playerid, "CAMERA", "picstnd_take", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/camera"GR" [1-14]");
	}
	return 1;
}
CMD:carfix(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /carfix [1-11]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "CAR", "Fixn_Car_Out", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "CAR", "flag_drop", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "CAR", "Sit_relaxed", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "CAR", "Tap_hand", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnim(playerid, "CAR", "Tyd2car_bump", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnim(playerid, "CAR", "Tyd2car_high", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnim(playerid, "CAR", "Tyd2car_low", 4.1, 0, 0, 0, 0, 0, 1);
		case 9: ApplyAnim(playerid, "CAR", "Tyd2car_med", 4.1, 0, 0, 0, 0, 0, 1);
		case 10: ApplyAnim(playerid, "CAR", "Tyd2car_TurnL", 4.1, 0, 0, 0, 0, 0, 1);
		case 11: ApplyAnim(playerid, "CAR", "Tyd2car_TurnR", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/carfix"GR" [1-11]");
	}
	return 1;
}
CMD:carry(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /carry [1-7]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "CARRY", "liftup05", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "CARRY", "liftup105", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnim(playerid, "CARRY", "putdwn05", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnim(playerid, "CARRY", "putdwn105", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/anim"GR" [1-7]");
	}
	return 1;
}
CMD:colt(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /colt [1-7]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "COLT45", "2guns_crouchfire", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "COLT45", "colt45_crouchfire", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "COLT45", "colt45_crouchreload", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "COLT45", "colt45_fire", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "COLT45", "colt45_fire_2hands", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnim(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnim(playerid, "COLT45", "sawnoff_reload", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/colt"GR" [1-7]");
	}
	return 1;
}
CMD:ambient(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /ambient [1-12]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "COP_AMBIENT", "Copbrowse_in", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "COP_AMBIENT", "Copbrowse_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "COP_AMBIENT", "Copbrowse_nod", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "COP_AMBIENT", "Copbrowse_out", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "COP_AMBIENT", "Copbrowse_shake", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnim(playerid, "COP_AMBIENT", "Coplook_in", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 8: ApplyAnim(playerid, "COP_AMBIENT", "Coplook_nod", 4.1, 0, 0, 0, 0, 0, 1);
		case 9: ApplyAnim(playerid, "COP_AMBIENT", "Coplook_out", 4.1, 0, 0, 0, 0, 0, 1);
		case 10: ApplyAnim(playerid, "COP_AMBIENT", "Coplook_shake", 4.1, 0, 0, 0, 0, 0, 1);
		case 11: ApplyAnim(playerid, "COP_AMBIENT", "Coplook_think", 4.1, 0, 0, 0, 0, 0, 1);
		case 12: ApplyAnim(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0, 1);

		default: return MSG(playerid, GOLD, "/ambient"GR" [1-12]");
	}
	return 1;
}
CMD:drugged(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /drugged [1-8]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "CRACK", "crckdeth1", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "CRACK", "crckdeth2", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "CRACK", "crckdeth3", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "CRACK", "crckdeth4", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "CRACK", "crckidle1", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnim(playerid, "CRACK", "crckidle2", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnim(playerid, "CRACK", "crckidle3", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnim(playerid, "CRACK", "crckidle4", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/drugged"GR" [1-8]");
	}
	return 1;
}
CMD:dildo(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /dildo [1-9]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "DILDO", "DILDO_1", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "DILDO", "DILDO_2", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "DILDO", "DILDO_3", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "DILDO", "DILDO_block", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "DILDO", "DILDO_G", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnim(playerid, "DILDO", "DILDO_Hit_1", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnim(playerid, "DILDO", "DILDO_Hit_2", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnim(playerid, "DILDO", "DILDO_Hit_3", 4.1, 0, 0, 0, 0, 0, 1);
		case 9: ApplyAnim(playerid, "DILDO", "DILDO_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/dildo"GR" [1-9]");
	}
	return 1;
}

CMD:fight(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /fight [1-36]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "FIGHT_B", "FightB_1", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "FIGHT_B", "FightB_2", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "FIGHT_B", "FightB_3", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "FIGHT_B", "FightB_block", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "FIGHT_B", "FightB_G", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnim(playerid, "FIGHT_B", "FightB_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnim(playerid, "FIGHT_B", "FightB_M", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnim(playerid, "FIGHT_B", "HitB_1", 4.1, 0, 0, 0, 0, 0, 1);
		case 9: ApplyAnim(playerid, "FIGHT_B", "HitB_2", 4.1, 0, 0, 0, 0, 0, 1);
		case 10: ApplyAnim(playerid, "FIGHT_B", "HitB_3", 4.1, 0, 0, 0, 0, 0, 1);
		case 11: ApplyAnim(playerid, "FIGHT_C", "FightC_1", 4.1, 0, 0, 0, 0, 0, 1);
		case 12: ApplyAnim(playerid, "FIGHT_C", "FightC_2", 4.1, 0, 0, 0, 0, 0, 1);
		case 13: ApplyAnim(playerid, "FIGHT_C", "FightC_3", 4.1, 0, 0, 0, 0, 0, 1);
		case 14: ApplyAnim(playerid, "FIGHT_C", "FightC_block", 4.1, 0, 0, 0, 0, 0, 1);
		case 15: ApplyAnim(playerid, "FIGHT_C", "FightC_blocking", 4.1, 0, 0, 0, 0, 0, 1);
		case 16: ApplyAnim(playerid, "FIGHT_C", "FightC_G", 4.1, 0, 0, 0, 0, 0, 1);
		case 17: ApplyAnim(playerid, "FIGHT_C", "FightC_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
		case 18: ApplyAnim(playerid, "FIGHT_C", "FightC_M", 4.1, 0, 0, 0, 0, 0, 1);
		case 19: ApplyAnim(playerid, "FIGHT_C", "FightC_Spar", 4.1, 0, 0, 0, 0, 0, 1);
		case 20: ApplyAnim(playerid, "FIGHT_C", "HitC_1", 4.1, 0, 0, 0, 0, 0, 1);
		case 21: ApplyAnim(playerid, "FIGHT_C", "HitC_2", 4.1, 0, 0, 0, 0, 0, 1);
		case 22: ApplyAnim(playerid, "FIGHT_C", "HitC_3", 4.1, 0, 0, 0, 0, 0, 1);
		case 23: ApplyAnim(playerid, "FIGHT_D", "FightD_1", 4.1, 0, 0, 0, 0, 0, 1);
		case 24: ApplyAnim(playerid, "FIGHT_D", "FightD_2", 4.1, 0, 0, 0, 0, 0, 1);
		case 25: ApplyAnim(playerid, "FIGHT_D", "FightD_3", 4.1, 0, 0, 0, 0, 0, 1);
		case 26: ApplyAnim(playerid, "FIGHT_D", "FightD_block", 4.1, 0, 0, 0, 0, 0, 1);
		case 27: ApplyAnim(playerid, "FIGHT_D", "FightD_G", 4.1, 0, 0, 0, 0, 0, 1);
		case 28: ApplyAnim(playerid, "FIGHT_D", "FightD_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
		case 29: ApplyAnim(playerid, "FIGHT_D", "FightD_M", 4.1, 0, 0, 0, 0, 0, 1);
		case 30: ApplyAnim(playerid, "FIGHT_D", "HitD_1", 4.1, 0, 0, 0, 0, 0, 1);
		case 31: ApplyAnim(playerid, "FIGHT_D", "HitD_2", 4.1, 0, 0, 0, 0, 0, 1);
		case 32: ApplyAnim(playerid, "FIGHT_D", "HitD_3", 4.1, 0, 0, 0, 0, 0, 1);
		case 33: ApplyAnim(playerid, "FIGHT_E", "FightKick", 4.1, 0, 0, 0, 0, 0, 1);
		case 34: ApplyAnim(playerid, "FIGHT_E", "FightKick_B", 4.1, 0, 0, 0, 0, 0, 1);
		case 35: ApplyAnim(playerid, "FIGHT_E", "Hit_fightkick", 4.1, 0, 0, 0, 0, 0, 1);
		case 36: ApplyAnim(playerid, "FIGHT_E", "Hit_fightkick_B", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/fight"GR" [1-36]");
	}
	return 1;
}
CMD:graffiti(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /graffiti [1-2]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "GRAFFITI", "graffiti_Chkout", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "GRAFFITI", "spraycan_fire", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/graffiti"GR" [1-2]");
	}
	return 1;
}
CMD:grenade(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /grenade [1-3]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "GRENADE", "WEAPON_start_throw", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "GRENADE", "WEAPON_throw", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/anim"GR" [1-3]");
	}
	return 1;
}
CMD:graveyard(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /graveyard [1-3]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "GRAVEYARD", "mrnF_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "GRAVEYARD", "mrnM_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "GRAVEYARD", "prst_loopa", 4.1, 0, 0, 0, 0, 0, 1);

		default: return MSG(playerid, GOLD, "/graveyard"GR" [1-3]");
	}
	return 1;
}
CMD:strip(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /strip [1-16]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "STRIP", "strip_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "STRIP", "strip_B", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "STRIP", "strip_C", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "STRIP", "strip_D", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "STRIP", "strip_E", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnim(playerid, "STRIP", "strip_F", 4.1, 1, 0, 0, 0, 0, 1);
		case 7: ApplyAnim(playerid, "STRIP", "strip_G", 4.1, 1, 0, 0, 0, 0, 1);
		case 8: ApplyAnim(playerid, "STRIP", "STR_A2B", 4.1, 1, 0, 0, 0, 0, 1);
		case 9: ApplyAnim(playerid, "STRIP", "STR_B2A", 4.1, 1, 0, 0, 0, 0, 1);
		case 10: ApplyAnim(playerid, "STRIP", "STR_B2C", 4.1, 1, 0, 0, 0, 0, 1);
		case 11: ApplyAnim(playerid, "STRIP", "STR_C1", 4.1, 1, 0, 0, 0, 0, 1);
		case 12: ApplyAnim(playerid, "STRIP", "STR_C2", 4.1, 1, 0, 0, 0, 0, 1);
		case 13: ApplyAnim(playerid, "STRIP", "STR_C2B", 4.1, 1, 0, 0, 0, 0, 1);
		case 14: ApplyAnim(playerid, "STRIP", "STR_Loop_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 15: ApplyAnim(playerid, "STRIP", "STR_Loop_B", 4.1, 1, 0, 0, 0, 0, 1);
		case 16: ApplyAnim(playerid, "STRIP", "STR_Loop_C", 4.1, 1, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/strip"GR" [1-16]");
	}
	return 1;
}
CMD:dance(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /dance [1-10]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "DANCING", "DAN_Down_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnim(playerid, "DANCING", "DAN_Left_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnim(playerid, "DANCING", "DAN_Loop_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnim(playerid, "DANCING", "DAN_Right_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnim(playerid, "DANCING", "DAN_Up_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnim(playerid, "DANCING", "dnce_M_a", 4.1, 1, 0, 0, 0, 0, 1);
		case 7: ApplyAnim(playerid, "DANCING", "dnce_M_b", 4.1, 1, 0, 0, 0, 0, 1);
		case 8: ApplyAnim(playerid, "DANCING", "dnce_M_c", 4.1, 1, 0, 0, 0, 0, 1);
		case 9: ApplyAnim(playerid, "DANCING", "dnce_M_d", 4.1, 1, 0, 0, 0, 0, 1);
		case 10: ApplyAnim(playerid, "DANCING", "dnce_M_e", 4.1, 1, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/dance"GR" [1-10]");
	}
	return 1;
}
CMD:idance(playerid,params[])
{
	if(!User[playerid][Logged])
		return 0;
	if(User[playerid][pinvis])
		return MSG(playerid, GOLD, "ERROR:"GR" You cannot perform animations while invisible.");
	if(User[playerid][Death] > 0)
		return MSG(playerid, GOLD, "ERROR:"GR" You cannot perform animations while incapacitated.");
	if(User[playerid][tazed])
		return MSG(playerid, GOLD, "ERROR:"GR" You cannot perform animations while tazed.");
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /idance [1-4]");
	switch(anumber)
	{
		case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
		default: return MSG(playerid, GOLD, "/idance"GR" [1-4]");
	}
	return 1;
}
CMD:tip(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /tip [1-4]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "STRIP", "PLY_CASH", 4.1, 0, 0, 0, 0, 1000*5, 1);
		case 2: ApplyAnim(playerid, "STRIP", "PUN_CASH", 4.1, 0, 0, 0, 0, 1000*5, 1);
		case 3: ApplyAnim(playerid, "STRIP", "PUN_HOLLER", 4.1, 0, 0, 0, 0, 1000*5, 1);
		case 4: ApplyAnim(playerid, "STRIP", "PUN_LOOP", 4.1, 1, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/tip"GR" [1-4]");
	}
	return 1;
}
//SWAT swt_sty

/*CMD:anim(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /anim [0-0]");
	switch(anumber)
	{
		case 1: ApplyAnim(playerid, "CAMERA", "picstnd_take", 4.1, 0, 0, 0, 0, 0, 1);
		default: return MSG(playerid, GOLD, "/anim"GR" [0-0]");
	}
	return 1;
}*/
CMD:smoke(playerid,params[])
{
	new anumber;
	
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /smoke [1-2]");
	if(anumber < 1 || anumber > 2) { return MSG(playerid,GOLD,"/smoke"GR" [1-2]"); }
	if(anumber == 1) { ApplyAnim(playerid,"SMOKING","M_smk_in",4.0,0,0,0,0,0); }
	if(anumber == 2) { ApplyAnim(playerid,"SMOKING","M_smklean_loop",4.0,1,0,0,0,0); }
	return 1;
}
CMD:pull(playerid,params[])
{	
	ApplyAnim(playerid,"AIRPORT","thrw_barl_thrw",4.0,0,0,0,0,0);
	return 1;
}
CMD:baseball(playerid, params[])
	return cmd_bhit(playerid, params);
CMD:bhit(playerid,params[])
{
	new ano;
	
	if(sscanf(params,"i",ano)) return MSG(playerid,GOLD,"/bhit"GR" [1-4]");
	if(ano< 1 || ano> 4) return MSG(playerid,GOLD,"/bhit"GR" [1-4]");
	if(ano == 1) return ApplyAnim(playerid,"BASEBALL","BAT_1",4.0,0,0,0,0,0);
	if(ano == 2) return ApplyAnim(playerid,"BASEBALL","BAT_2",4.0,0,0,0,0,0);
	if(ano == 3) return ApplyAnim(playerid,"BASEBALL","BAT_3",4.0,0,0,0,0,0);
	if(ano == 4) return ApplyAnim(playerid,"BASEBALL","BAT_4",4.0,0,0,0,0,0);

	return 1;
}
CMD:sleep(playerid, params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /sleep [1-6]");
	switch(anumber)
	{
		case 1: ApplyAnimation(playerid, "INT_HOUSE", "BED_In_L",4.1,0,0,0,1,1);
		case 2: ApplyAnimation(playerid, "INT_HOUSE", "BED_In_R",4.1,0,0,0,1,1);
		case 3: ApplyAnimation(playerid, "INT_HOUSE", "BED_Loop_L",4.1,1,0,0,1,1);
		case 4: ApplyAnimation(playerid, "INT_HOUSE", "BED_Loop_R",4.1,1,0,0,1,1);
		case 5: ApplyAnimation(playerid, "INT_HOUSE", "BED_Out_L",4.1,0,1,1,0,0);
		case 6: ApplyAnimation(playerid, "INT_HOUSE", "BED_Out_R",4.1,0,1,1,0,0);
	}
	return 1;
}
CMD:gesture(playerid,params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /gesture [1-15]");
	if(anumber < 1 || anumber > 15) { MSG(playerid,GOLD,"/gesture [1-15]"); return 1; }
	if(anumber == 1) { ApplyAnim(playerid,"GHANDS","gsign1",4.0,0,0,0,0,0); }
	if(anumber == 2) { ApplyAnim(playerid,"GHANDS","gsign1LH",4.0,0,0,0,0,0); }
	if(anumber == 3) { ApplyAnim(playerid,"GHANDS","gsign2",4.0,0,0,0,0,0); }
	if(anumber == 4) { ApplyAnim(playerid,"GHANDS","gsign2LH",4.0,0,0,0,0,0); }
	if(anumber == 5) { ApplyAnim(playerid,"GHANDS","gsign3",4.0,0,0,0,0,0);}
	if(anumber == 6) { ApplyAnim(playerid,"GHANDS","gsign3LH",4.0,0,0,0,0,0); }
	if(anumber == 7) { ApplyAnim(playerid,"GHANDS","gsign4",4.0,0,0,0,0,0); }
	if(anumber == 8) { ApplyAnim(playerid,"GHANDS","gsign4LH",4.0,0,0,0,0,0); }
	if(anumber == 9) { ApplyAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0); }
	if(anumber == 10) { ApplyAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0); }
	if(anumber == 11) { ApplyAnim(playerid,"GHANDS","gsign5LH",4.0,0,0,0,0,0); }
	if(anumber == 12) { ApplyAnim(playerid,"GANGS","Invite_No",4.0,0,0,0,0,0); }
	if(anumber == 13) { ApplyAnim(playerid,"GANGS","Invite_Yes",4.0,0,0,0,0,0); }
	if(anumber == 14) { ApplyAnim(playerid,"GANGS","prtial_gngtlkD",4.0,0,0,0,0,0); }
	if(anumber == 15) { ApplyAnim(playerid,"GANGS","smkcig_prtl",4.0,0,0,0,0,0); }

	return 1;
}
CMD:chat(playerid,params[])
{
	new anumber;
	
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /chat [1-7]");
	if(anumber < 1 || anumber > 7) { MSG(playerid,GOLD,"SERVER:"GR" /chat [1-7]"); return 1; }
	if(anumber == 1) { ApplyAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0); }
	if(anumber == 2) { ApplyAnim(playerid,"GANGS","prtial_gngtlkA",4.0,0,0,0,0,0); }
	if(anumber == 3) { ApplyAnim(playerid,"GANGS","prtial_gngtlkB",4.0,0,0,0,0,0); }
	if(anumber == 4) { ApplyAnim(playerid,"GANGS","prtial_gngtlkE",4.0,0,0,0,0,0); }
	if(anumber == 5) { ApplyAnim(playerid,"GANGS","prtial_gngtlkF",4.0,0,0,0,0,0); }
	if(anumber == 6) { ApplyAnim(playerid,"GANGS","prtial_gngtlkG",4.0,0,0,0,0,0); }
	if(anumber == 7) { ApplyAnim(playerid,"GANGS","prtial_gngtlkH",4.0,0,0,0,0,0); }

	return 1;
}
CMD:deal(playerid,params[])
{
	new anumber;
	
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /deal [1-2]");
	if(anumber < 1 || anumber > 2) { MSG(playerid,GOLD,"SERVER:"GR" /deal [1-2]"); return 1; }
	if(anumber == 1) { ApplyAnim(playerid,"DEALER", "DEALER_DEAL",4.0,0,0,0,0,0); }
	if(anumber == 2) { ApplyAnim(playerid,"DEALER","shop_pay",4.0,0,0,0,0,0); }

	return 1;
}
CMD:cheer(playerid,params[])
{
	new anumber;
	
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /cheer [1-8]");
	if(anumber < 1 || anumber > 8) { MSG(playerid,GOLD,"SERVER:"GR" /cheer [1-8]"); return 1; }
	if(anumber == 1) { ApplyAnim(playerid,"ON_LOOKERS","shout_01",4.0,0,0,0,0,0); }
	if(anumber == 2) { ApplyAnim(playerid,"ON_LOOKERS","shout_02",4.0,0,0,0,0,0); }
	if(anumber == 3) { ApplyAnim(playerid,"ON_LOOKERS","shout_in",4.0,0,0,0,0,0); }
	if(anumber == 4) { ApplyAnim(playerid,"RIOT","RIOT_ANGRY_B",4.0,1,0,0,0,0); }
	if(anumber == 5) { ApplyAnim(playerid,"RIOT","RIOT_CHANT",4.0,0,0,0,0,0); }
	if(anumber == 6) { ApplyAnim(playerid,"RIOT","RIOT_shout",4.0,0,0,0,0,0); }
	if(anumber == 7) { ApplyAnim(playerid,"STRIP","PUN_HOLLER",4.0,0,0,0,0,0); }
	if(anumber == 8) { ApplyAnim(playerid,"OTB","wtchrace_win",4.0,0,0,0,0,0); }

	return 1;
}
CMD:wave(playerid,params[])
{
	new anumber;
	
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /wave [1-3]");
	if(anumber < 1 || anumber > 3) { MSG(playerid,GOLD,"SERVER:"GR" /wave [1-3]"); return 1; }
	if(anumber == 1) { ApplyAnim(playerid,"ON_LOOKERS","wave_loop",4.0,1,0,0,0,0); }
	if(anumber == 2) { ApplyAnim(playerid,"KISSING","gfwave2",4.0,0,0,0,0,0); }
	if(anumber == 3) { ApplyAnim(playerid,"PED","endchat_03",4.0,0,0,0,0,0); }

	return 1;
}
CMD:choke(playerid,params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /choke [1-4]");
	if(anumber < 1 || anumber > 4) { MSG(playerid,GOLD,"SERVER:"GR" /choke [1-4]"); return 1; }
	if(anumber == 1) { ApplyAnim(playerid,"KNIFE","KILL_Knife_Ped_Die",4.0,0,1,1,1,0); }
	if(anumber == 2) { ApplyAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0); }
	if(anumber == 3) { ApplyAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0); }
	if(anumber == 4) { ApplyAnim(playerid, "PED", "BIKE_fallR", 4.0, 0, 1, 1, 0, 0); }

	return 1;
}
CMD:lean(playerid,params[])
{
	new anumber;
	
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /lean [1-2]");
	if(anumber < 1 || anumber > 3) { MSG(playerid,GOLD,"SERVER:"GR" /lean [1-2]"); return 1; }
	if(anumber == 1) return ApplyAnim(playerid,"GANGS","leanIDLE",4.1,0,0,0,1,0);
	if(anumber == 2) return ApplyAnim(playerid,"MISC","Plyrlean_loop",4.1,0,0,0,1,0);
	return 1;
}
CMD:bar(playerid,params[])
{
	new anumber;
	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /bar [1-5]");
	if(anumber < 1 || anumber > 5) return 0;
	if(anumber == 1) return ApplyAnim(playerid,"BAR","BARMAN_IDLE",4.1,0,0,0,1,0);
	if(anumber == 2) return ApplyAnim(playerid,"BAR","BARSERVE_BOTTLE",4.1,0,0,0,1,0);
	if(anumber == 3) return ApplyAnim(playerid,"BAR","BARSERVE_GLASS",4.1,0,0,0,1,0);
	if(anumber == 4) return ApplyAnim(playerid,"BAR","BARSERVE_GIVE",4.1,0,0,0,1,0);
	if(anumber == 5) return ApplyAnim(playerid,"BAR","BARSERVE_LOOP",4.1,0,0,0,1,0);
	return 1;
}
CMD:signal(playerid,params[])
{
	new anumber;

	if(sscanf(params, "i", anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /signal [1-2]");
	if(anumber < 1 || anumber > 2) { MSG(playerid,GOLD,"SERVER:"GR" /signal [1-2]"); return 1; }
	if(anumber == 1) { ApplyAnim(playerid,"POLICE","CopTraf_Come",4.0,0,0,0,0,0); }
	if(anumber == 2) { ApplyAnim(playerid,"POLICE","CopTraf_Stop",4.0,0,0,0,0,0); }

	return 1;
}
CMD:nobreath(playerid,params[])
{
	new anumber;
	if(sscanf(params,"i",anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /nobreath [1-2]");
	if(anumber < 1 || anumber > 2) { MSG(playerid,GOLD,"SERVER:"GR" /nobreath [1-2]"); return 1; }
	if(anumber == 1) { ApplyAnim(playerid,"PED","IDLE_tired",4.0,1,0,0,0,0); }
	if(anumber == 2) { ApplyAnim(playerid,"FAT","IDLE_tired",4.0,1,0,0,0,0); }

	return 1;
}
CMD:seat(playerid,params[])
{

	new anumber;
	
	if(sscanf(params,"i",anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /seat [1-7]"); 
	if(anumber < 1 || anumber > 7) { MSG(playerid,GOLD,"SERVER:"GR" /seat [1-7]"); return 1; }
	if(anumber == 1) { ApplyAnim(playerid,"Attractors","Stepsit_in",4.0,0,0,0,1,0); } // Not looping
	else if(anumber == 2) { ApplyAnim(playerid,"CRIB","PED_Console_Loop",4.0,1,0,0,0,0); }
	else if(anumber == 3) { ApplyAnim(playerid,"INT_HOUSE","LOU_In",4.0,0,0,0,1,0); } // Not looping
	else if(anumber == 4) { ApplyAnim(playerid,"MISC","SEAT_LR",4.0,1,0,0,0,0); }
	else if(anumber == 5) { ApplyAnim(playerid,"MISC","Seat_talk_01",4.0,1,0,0,0,0); }
	else if(anumber == 6) { ApplyAnim(playerid,"MISC","Seat_talk_02",4.0,1,0,0,0,0); }
	else if(anumber == 7) { ApplyAnim(playerid,"ped","SEAT_down",4.0,0,0,0,1,0); } // Not looping

	return 1;
}
CMD:fall(playerid,params[])
{
	new anumber;
	if(sscanf(params,"i",anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /fall [1-3]");
	if(anumber < 1 || anumber > 4) { MSG(playerid,GOLD,"SERVER:"GR" /fall [1-3]"); return 1; }
	if(anumber == 1) return ApplyAnim(playerid, "PED", "KO_SHOT_FACE",4.1,0,0,0,1,0);
	if(anumber == 2) return ApplyAnim(playerid,"PED", "KO_SHOT_STOM",4.1,0,0,0,1,0);
	if(anumber == 3) return ApplyAnim(playerid, "PED", "KO_SKID_FRONT",4.1,0,0,0,1,0);
	return 1;
}
CMD:handsup(playerid,params[])
{
	if(!User[playerid][Logged])
		return 0;
	if(User[playerid][pinvis])
		return MSG(playerid, GOLD, "ERROR:"GR" You cannot perform animations while invisible.");
	if(User[playerid][Death] > 0)
		return MSG(playerid, GOLD, "ERROR:"GR" You cannot perform animations while incapacitated.");
	if(User[playerid][tazed])
		return MSG(playerid, GOLD, "ERROR:"GR" You cannot perform animations while tazed.");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	return 1;
}
CMD:crossarms(playerid,params[])
{
	new anumber;
	if(sscanf(params,"i",anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /crossarms [1-5]");
	if(anumber == 1) ApplyAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
	else if(anumber == 2) ApplyAnim(playerid, "DEALER", "DEALER_IDLE", 4.0, 0, 1, 1, 1, -1);
	else if(anumber == 3) ApplyAnim(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 0, 1, 1, 1, -1);
	else if(anumber == 4) { ApplyAnim(playerid,"GRAVEYARD","mrnM_loop",4.0,1,0,0,0,0); }
	else if(anumber == 5) { ApplyAnim(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0); }

	return 1;
}
CMD:walk(playerid,params[])
{
	new anumber;
	if(sscanf(params,"i",anumber)) return MSG(playerid,GOLD,"SERVER:"GR" /walk [1-26]");
	if(anumber < 0 || anumber > 27) { MSG(playerid,GOLD,"SERVER:"GR" /walk [0-26]"); return 1; }
	User[playerid][animation] = true;
	if(anumber == 1) return ApplyAnim(playerid, "PED", "WALK_civi", 4.0, 1, 1, 1, 1, 1, 1);
	if(anumber == 1) { return ApplyAnim(playerid,"PED","JOG_femaleA",4.0,1,1,1,1,1); }
	if(anumber == 2) { return ApplyAnim(playerid,"PED","JOG_maleA",4.0,1,1,1,1,1); }
	if(anumber == 3) { return ApplyAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1); }
	if(anumber == 4) { return ApplyAnim(playerid,"PED","run_fat",4.0,1,1,1,1,1); }
	if(anumber == 5) { return ApplyAnim(playerid,"PED","run_fatold",4.0,1,1,1,1,1); }
	if(anumber == 6) { return ApplyAnim(playerid,"PED","run_old",4.0,1,1,1,1,1); }
	if(anumber == 7) { return ApplyAnim(playerid,"PED","Run_Wuzi",4.0,1,1,1,1,1); }
	if(anumber == 8) { return ApplyAnim(playerid,"PED","swat_run",4.0,1,1,1,1,1); }
	if(anumber == 9) { return ApplyAnim(playerid,"PED","WALK_fat",4.0,1,1,1,1,1); }
	if(anumber == 10) { return ApplyAnim(playerid,"PED","WALK_fatold",4.0,1,1,1,1,1); }
	if(anumber == 11) { return ApplyAnim(playerid,"PED","WALK_gang1",4.0,1,1,1,1,1); }
	if(anumber == 12) { return ApplyAnim(playerid,"PED","WALK_gang2",4.0,1,1,1,1,1);}
	if(anumber == 13) { return ApplyAnim(playerid,"PED","WALK_old",4.0,1,1,1,1,1);}
	if(anumber == 14) { return ApplyAnim(playerid,"PED","WALK_shuffle",4.0,1,1,1,1,1);}
	if(anumber == 15) { return ApplyAnim(playerid,"PED","woman_run",4.0,1,1,1,1,1);}
	if(anumber == 16) { return ApplyAnim(playerid,"PED","WOMAN_runbusy",4.0,1,1,1,1,1); }
	if(anumber == 17) { return ApplyAnim(playerid,"PED","WOMAN_runfatold",4.0,1,1,1,1,1); }
	if(anumber == 18) { return ApplyAnim(playerid,"PED","woman_runpanic",4.0,1,1,1,1,1); }
	if(anumber == 19) { return ApplyAnim(playerid,"PED","WOMAN_runsexy",4.0,1,1,1,1,1); }
	if(anumber == 20) { return ApplyAnim(playerid,"PED","WOMAN_walkbusy",4.0,1,1,1,1,1);}
	if(anumber == 21) { return ApplyAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1); }
	if(anumber == 22) { return ApplyAnim(playerid,"PED","WOMAN_walknorm",4.0,1,1,1,1,1); }
	if(anumber == 23) { return ApplyAnim(playerid,"PED","WOMAN_walkold",4.0,1,1,1,1,1); }
	if(anumber == 24) { return ApplyAnim(playerid,"PED","WOMAN_walkpro",4.0,1,1,1,1,1);}
	if(anumber == 25) { return ApplyAnim(playerid,"PED","WOMAN_walksexy",4.0,1,1,1,1,1);}
	if(anumber == 26) { return ApplyAnim(playerid,"PED","WOMAN_walkshop",4.0,1,1,1,1,1); }
	if(anumber == 27) { return ApplyAnim(playerid,"PED","RUN_civi",4.0,1,1,1,1,1); }

	return 1;
}
CMD:rap(playerid,params[])
{
	new rapstyle;
	if(sscanf(params,"i",rapstyle)) return MSG(playerid,GOLD,"SERVER:"GR" /rap [1-3]");
	if(rapstyle == 1) ApplyAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,0);
	else if(rapstyle == 2) ApplyAnim(playerid,"RAPPING","RAP_B_Loop",4.0,1,1,1,1,0);
	else if(rapstyle == 3) ApplyAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,0);

	return 1;
}
// ANIMATION END
#define STATIC_EXP 3
CMD:levelup(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new req_xp = (User[playerid][Level]+1)*STATIC_EXP;
		if(User[playerid][UserXP] >= req_xp)
		{
			User[playerid][UserXP] -= req_xp;
			GameTextForPlayer(playerid,"~h~ Level up! +1 XP",3000,6);
			SetPlayerScore(playerid,User[playerid][Level]+1);
			User[playerid][Level]++;
			format(large_string, 256, "UPDATE users SET level = %d,userxp = %d WHERE userid = %d", User[playerid][Level], User[playerid][UserXP], User[playerid][UserID]);
			db_query(Database, large_string);
			new curxp = GetPVarInt(playerid, "Experience");
			UpdateTrait(playerid, "Experience", curxp+1);
			return 1;
		}
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have enough level experience points to level up! Type (/stats) to monitor it.");
	}
	return 1;
}
CMD:passminute(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	for(new i = 0; i < strval(params); i++)
		OnMinPass();
	return 1;
}
CMD:paycheckpayment(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	User[playerid][pPayment] = strval(params);
	return 1;
}
public WeatherTimer()
{
	WeatherCooldown++;
	WeaponsCooldown++;
	if(!isnull(moon_phase)) LoadMoon();
	foreach(Corpses, corp)
	{
		if(CORPSE[corp][cTime] < gettime())
		{
				new tmp[CORPSE_DATA];
				DestroyDynamicActor(CORPSE[corp][cObject]);
				CORPSE[corp] = tmp;	
				Iter_SafeRemove(Corpses, corp, corp);
		}
	}
	if(WeatherCooldown > 2)
	{
		WeatherCooldown = 0;
		new query[60],
			DBResult: Result,
			sample[8],
			chour,cmin,csec,
			weather;

		format(query,sizeof query,"SELECT * FROM weathers WHERE date = '%s'",PasteDate());
		Result = db_query(Database,query);

		if(db_num_rows(Result))
		{
			gettime(chour,cmin,csec);
			format(sample,sizeof sample,"phase%i",GetPhase(chour));
			db_get_field_assoc(Result, sample, sample, 8);
			printf("[weather_debug] Current Phase: %s",sample);

			new phase;
			sscanf(sample,"p<,>ii",phase,weather);

			printf("[%s][%s] [weather_debug] Current Temperature (Split): %i; Current Weather (Split): %i",PasteTime(),PasteDate(),phase,weather);
			new weathername[18];
			format(weathername, 18, "~y~%s",GetWeatherName(weather));
			TextDrawSetString(weathertext, weathername);
			printf("[weather_debug] Weather (%i): %s",weather, weathername);
			format(query,sizeof query,"~y~%i CELSIUS",phase);
			TextDrawSetString(temperaturetext,query);

			SetWeather(weather);
		}
		else //printf("[%s][%s] [error] There is an error in the weather system.",PasteTime(),PasteDate());
		{
			SetWeatherPhases(PasteDate());
			WeatherTimer();
			printf("[%s][%s] [weather_error] This day was not found in the database and has been created.",PasteTime(),PasteDate());
		}
		printf("[%s][%s] [weathertimer] I have been called.",PasteTime(),PasteDate());
		db_free_result(Result);
	}
	if(WeaponsCooldown > 5)
	{
		WeaponsCooldown = 0;
		foreach(Weapons,i)
		{
			if(gettime() >= DW[i][dTime])
			{
				new query[60];
				new tmp[WEAPON_DATA];
				format(query,sizeof query,"DELETE FROM weapons WHERE weaponid = %d",DW[i][dID]);
				db_query(Database, query);
				DestroyDynamicObject(DW[i][dWeaponObject]);
				DW[i] = tmp;
				Iter_SafeRemove(Weapons, i, i);
			}
		}
	}
	foreach(Plants, p)
	{
		PL[p][ptime]++;
		switch(PL[p][ptime])
		{
			case 3: SetDynamicObjectMaterial(PL[p][pobjid], 0, -1, "none", "none", 0xFF7FFF00);
		}
		printf("[plants_debug] pTime of Plant ID %d is currently %d.",p,PL[p][ptime]);
		#define WEED_EXPIRE_TIME 7
		if(PL[p][ptime] > WEED_EXPIRE_TIME)
		{
			new query[60];
			printf("[plants_debug] Plant ID %d pTime is more than %d.", p, WEED_EXPIRE_TIME);
			format(query,sizeof query,"DELETE FROM plants WHERE plant = %d",PL[p][p_id]);
			db_query(Database, query);
			DestroyDynamicObject(PL[p][pobjid]);
			new tmp[plants];
			PL[p] = tmp;
			Iter_SafeRemove(Plants, p, p);
		}
	}
	for(new v = 0, j = GetVehiclePoolSize(); v <= j; v++)
	{
		if(gettime() > V[v][vimpound] && V[v][vimpound] != 0)
		{
			SetVehicleVirtualWorld(v, 0);
			RespawnVehicle(v);
			V[v][vimpound] = 0;
			format(large_string, sizeof large_string, "UPDATE cars SET impound = 0 WHERE vid = %d", V[v][dataid]);
			db_query(Database, large_string);
			printf("[unimpound] Vehicle ID %d has been unimpounded.", v);
		}
	}
	foreach(Player, i)
	{
		if(User[i][Logged])
		{
			new herd = GetPVarInt(i, "Herd");
			if(herd > 0 && herd < 5)
				UpdateTrait(i, "hHerdBonus",  GetPVarInt(i, "hHerdBonus")+1);
			if(GetPVarInt(i, "hHerdBonus") > 5)
			{
				RemoveTrait(i, "hHerdBonus");
				new id = FindPlayerItemFree(i, "Blood Pack");
				UpdateItem(i, id, GetItemID("Blood Pack"), "Blood Pack", herd*2, 100, true);
				SFM(i, cRP, "HERD:"GR" You have received %d blood packs from your herd.", herd*2);
			}
			// --
		}

	}
	return 1;
}
CMD:changemat(playerid,params[])
{
	if(User[playerid][Useradmin] > 3)
	{
		new obj, index, color[11];
		if(sscanf(params,"iis[11]",obj,index,color)) return MSG(playerid,GOLD,"SYNTAX:"GR" /changemat [dynamicobjectid] [index] [materialcolor]; this CMD is for debugging only");
		SetDynamicObjectMaterial(obj, index, -1, "none", "none", HexToInt(color)); //0xFF5DB583);
		MSG(playerid, -1, "You have temporarily changed this object's material color (use /om for permanent with static objects; this cmd doesn't save!).");
		return 1;
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:calltimerfast(playerid,params[])
{
	if(IsPlayerAdmin(playerid))
	{
		MSG(playerid, -1, "Weather timer has been called!");
		return WeatherTimer();
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
}
public OnGameModeExit()
{
    db_close(Database);
	return 1;
}
public OnPlayerRequestClass(playerid, classid)
{
	if(User[playerid][Logged])
	    SpawnPlayer(playerid);
	return 0;
}
CMD:butcher(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][BusinessIN] == -1)
			return MSG(playerid, GOLD, "ERROR:"GR" You need to be inside a Butcher Shop to use this command.");
		if(User[playerid][BusinessINType] != 17)
			return MSG(playerid, GOLD, "ERROR:"GR" You need to be inside a Butcher Shop to use this command.");
		Dialog_Show(playerid, dButcher, DIALOG_STYLE_LIST, "Butcher", "Sell Animal Hide\nSell Deer Antlers\nSell Wolf Canines\nSell Venison\nBuy Venison ($20)", "Sell", "Cancel");
		return 1;
	}
	return 0;
}
CMD:loggery(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][BusinessIN] == -1)
			return MSG(playerid, GOLD, "ERROR:"GR" You need to be inside a Loggery to use this command.");
		if(User[playerid][BusinessINType] != 19)
			return MSG(playerid, GOLD, "ERROR:"GR" You need to be inside a Loggery to use this command.");
		Dialog_Show(playerid, dLoggery, DIALOG_STYLE_LIST, "Loggery", "Sell Logs ($5/Log)\nBuy Logs ($15/Log)", "Sell", "Cancel");
		return 1;
	}
	return 0;
}
Dialog:dLoggery(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				new id = FindPlayerItem_Name(playerid,"Log");
				if(UserItem[playerid][id][Value] < 1 || id == -1)
					return MSG(playerid, GOLD, "ERROR:"GR" You don't have any wooden logs.");
				new money = UserItem[playerid][id][Value]*5;
				SFM(playerid, WHITE, "SERVER:"GR" You have sold Log (%d) for "G"$%d"W".", UserItem[playerid][id][Value], money);
				GiveMoney(playerid, money);

				format(large_string, sizeof large_string, "DELETE FROM inventory WHERE userid = %d AND slot = %d", User[playerid][UserID], id);
				db_query(Database, large_string);
				UserItem[playerid][id][Item] = 0;
				UserItem[playerid][id][Condition] = 0;
				UserItem[playerid][id][iFake] = false;
				UserItem[playerid][id][iMergable] = false;
				format(UserItem[playerid][id][ItemName], MAX_ITEM_NAME, "");

				UpdateInventoryHeader(playerid);
				UpdateInventorySlot(playerid, id);
			}
			case 1:
			{
				Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"Loggery","Please insert the quantity you would like to purchase in the field below.","Buy","Back");
				SetPVarInt(playerid, "buystack_slot", FindPlayerItemFree(playerid, "Log"));
				SetPVarInt(playerid, "buystack_id", GetItemID("Log"));
				SetPVarInt(playerid, "buystack_price", 15);
			}
		}
	}
	return 1;
}
Dialog:dButcher(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				new id = FindPlayerItem_Name(playerid,"Animal Hide");
				if(UserItem[playerid][id][Value] < 1)
					return MSG(playerid, GOLD, "ERROR:"GR" You don't have any Animal Hide.");
				new money = UserItem[playerid][id][Value]*50;
				SFM(playerid, WHITE, "SERVER: You have sold Animal Hide (%d) for "G"$%d"W".", UserItem[playerid][id][Value], money);
				GiveMoney(playerid, money);

				format(large_string, sizeof large_string, "DELETE FROM inventory WHERE userid = %d AND slot = %d", User[playerid][UserID], id);
				db_query(Database, large_string);
				UserItem[playerid][id][Item] = 0;
				UserItem[playerid][id][Condition] = 0;
				UserItem[playerid][id][iFake] = false;
				UserItem[playerid][id][iMergable] = false;
				format(UserItem[playerid][id][ItemName], MAX_ITEM_NAME, "");

				UpdateInventoryHeader(playerid);
				UpdateInventorySlot(playerid, id);
			}
			case 1:
			{
				new id = FindPlayerItem_Name(playerid,"Deer Antler");
				if(UserItem[playerid][id][Value] < 1)
					return MSG(playerid, GOLD, "ERROR:"GR" You don't have any Deer Antler.");
				new money = UserItem[playerid][id][Value]*150;
				SFM(playerid, WHITE, "SERVER: You have sold Deer Antler (%d) for "G"$%d"W".", UserItem[playerid][id][Value], money);
				GiveMoney(playerid, money);
				
				format(large_string, sizeof large_string, "DELETE FROM inventory WHERE userid = %d AND slot = %d", User[playerid][UserID], id);
				db_query(Database, large_string);
				UserItem[playerid][id][Item] = 0;
				UserItem[playerid][id][Condition] = 0;
				UserItem[playerid][id][iFake] = false;
				UserItem[playerid][id][iMergable] = false;
				format(UserItem[playerid][id][ItemName], MAX_ITEM_NAME, "");
				UpdateInventoryHeader(playerid);
				UpdateInventorySlot(playerid, id);
			}
			case 2:
			{
				new id = FindPlayerItem_Name(playerid,"Wolf Canines");
				if(UserItem[playerid][id][Value] < 1)
					return MSG(playerid, GOLD, "ERROR:"GR" You don't have any Wolf Canines.");
				new money = UserItem[playerid][id][Value]*300;
				SFM(playerid, WHITE, "SERVER: You have sold Wolf Canines (%d) for "G"$%d"W".", UserItem[playerid][id][Value], money);
				GiveMoney(playerid, money);

				format(large_string, sizeof large_string, "DELETE FROM inventory WHERE userid = %d AND slot = %d", User[playerid][UserID], id);
				db_query(Database, large_string);
				UserItem[playerid][id][Item] = 0;
				UserItem[playerid][id][Condition] = 0;
				UserItem[playerid][id][iFake] = false;
				UserItem[playerid][id][iMergable] = false;
				format(UserItem[playerid][id][ItemName], MAX_ITEM_NAME, "");
				UpdateInventoryHeader(playerid);
				UpdateInventorySlot(playerid, id);
			}
			case 3:
			{
				new id = FindPlayerItem_Name(playerid,"Venison");
				if(UserItem[playerid][id][Value] < 1)
					return MSG(playerid, GOLD, "ERROR:"GR" You don't have any Venison.");
				new money = UserItem[playerid][id][Value]*6;
				SFM(playerid, WHITE, "SERVER: You have sold Venison (%d) for "G"$%d"W".", UserItem[playerid][id][Value], money);
				GiveMoney(playerid, money);
				
				format(large_string, sizeof large_string, "DELETE FROM inventory WHERE userid = %d AND slot = %d", User[playerid][UserID], id);
				db_query(Database, large_string);
				UserItem[playerid][id][Item] = 0;
				UserItem[playerid][id][Condition] = 0;
				UserItem[playerid][id][iFake] = false;
				UserItem[playerid][id][iMergable] = false;
				format(UserItem[playerid][id][ItemName], MAX_ITEM_NAME, "");
				UpdateInventoryHeader(playerid);
				UpdateInventorySlot(playerid, id);
			}
			case 4:
			{
				Dialog_Show(playerid,dGeneralStoreBuyStack,DIALOG_STYLE_INPUT,"Butcher Store","Please insert the quantity you would like to purchase in the field below.","Buy","Back");
				SetPVarInt(playerid, "buystack_slot", FindPlayerItemFree(playerid, "Venison"));
				SetPVarInt(playerid, "buystack_id", GetItemID("Venison"));
				SetPVarInt(playerid, "buystack_price", 20);
			}
		}
	}
	return 1;
}
public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(newinteriorid != 0)
	{
		switch(User[playerid][BusinessINType])
		{
			case 6: MSG(playerid, GOLD, "Info:"GR" Type (/employment) to interact.");
			case 13: MSG(playerid, GOLD, "Info:"GR" Type (/bank) to interact.");
			case 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 15, 16: MSG(playerid, GOLD, "Info:"GR" Type (/buy) to interact.");
			case 17: MSG(playerid, GOLD, "Info:"GR" Type (/butcher) to interact.");
			case 19: MSG(playerid, GOLD, "Info:"GR" Type (/loggery) to interact.");
		}		
	}
	if(day_condition == 1 && User[playerid][Userrace] == 1 && newinteriorid == 0)
	{
		MSG(playerid, RED,"SUNLIGHT: You have been subjected to the rays of sunlight and slowly started scorching. Seek shelter immediately!");
		SetHealth(playerid, User[playerid][Health]-2);
		if(GetPVarInt(playerid, "SunburnCalled") == 0)  SetTimerEx("SunburnTimer", 10000, false, "i", playerid);
		SetPVarInt(playerid, "SunburnCalled", 1);
	}
	if(User[playerid][specedby] > -1)
	{
		SetPlayerInterior(User[playerid][specedby], newinteriorid);
		SetPlayerVirtualWorld(User[playerid][specedby], User[playerid][pvw]);
		PlayerSpectatePlayer(User[playerid][specedby], playerid);
	}
    return 1;
}
forward SunburnTimer(playerid);
public SunburnTimer(playerid)
{
	if(User[playerid][Logged])
	{
		if(GetPlayerInterior(playerid) == 0 && User[playerid][Userrace] == 1 && day_condition == 1 && User[playerid][Health] > 0)
		{
			SetHealth(playerid, User[playerid][Health]-2);
			SetTimerEx("SunburnTimer", 10000, false, "i", playerid);		
			GameTextForPlayer(playerid, "~r~SUNLIGHT", 2000, 7);	
			SetPVarInt(playerid, "SunburnCalled", 0);
			return 1;
		}
		if(User[playerid][Health] <= 0 && User[playerid][Death] < 1)
		{
			KillPlayer(playerid, COD_SUNBURN);
			format(large_string,sizeof large_string,"(( Death: %s (ID:%d) has been injured. (SUNLIGHT) ))",User[playerid][Username],playerid);
			ProxDetector(30.0, playerid, large_string, GRAD4,GRAD4,GRAD4,GRAD4,GRAD4);
			SetPVarInt(playerid, "SunburnCalled", 0);
			return 1;
		}
	}
	return 0;
}
stock IsRPName(const name[], max_underscores = 2)
{
    new underscores = 0;
    if (name[0] < 'A' || name[0] > 'Z') return false;
    for(new i = 1; i < strlen(name); i++)
    {
        if(name[i] != '_' && (name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z')) return false; // a-zA-Z_
        //if( (name[i] >= 'A' && name[i] <= 'Z') && (name[i - 1] != '_') ) return false; 
        if(name[i] == '_')
        {
            underscores++;
            if(underscores > max_underscores || i == strlen(name)) return false; 
            if(name[i + 1] < 'A' || name[i + 1] > 'Z') return false; 
        }
    }
    if (underscores == 0) return false; 
    return true;
}
CMD:seecon(playerid,params[])
{
	if(User[playerid][Useradmin] < 1) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new query[55];
	if(User[playerid][Seecon])
	{
	    User[playerid][Seecon] = false;
	    MSG(playerid,GRAD2,"Info: Incoming connections messages disabled.");
	    format(query,sizeof query,"UPDATE users SET seecon = 0 WHERE userid = %d",1,User[playerid][UserID]);
	    db_query(Database, query);
	}
	else
	{
	    User[playerid][Seecon] = true;
	    MSG(playerid,GRAD2,"Info: Incoming connections messages enabled.");
	    format(query,sizeof query,"UPDATE users SET seecon = 1 WHERE userid = %d",User[playerid][UserID]);
	    db_query(Database, query);
	}
	return 1;
}

//native ToggleHUDComponentForPlayer(playerid, componentid, bool:toggle);

#define REGISTER_DIALOG "Welcome to "SERVERNAME",\n\nType in a password below to register an account."
public OnPlayerConnect(playerid)
{
	SetPlayerHealth(playerid,999999);
	SetPlayerColor(playerid,COLOR_NOTLOGGED);
	SetPlayerCameraPos(playerid, -267.8296, 2225.8545, 72.7462);
	SetPlayerCameraLookAt(playerid, -268.8276, 2225.8196, 72.5361);
	SetPlayerPos(playerid,  -268.8276, 2225.8196, 53);
    new tmp[USER_DATA];
    User[playerid] = tmp;
    User[playerid][calling] = -1;
    User[playerid][speakingto] = -1;
    User[playerid][dialer] = -1;
    User[playerid][pActor] = -1;
	User[playerid][BusinessIN] = -1;
	User[playerid][HouseIN] = -1;
	User[playerid][seenby] = -1;
	User[playerid][sawplayer] = -1;
	User[playerid][specedby] = -1;
	User[playerid][specing] = -1;
	new tmpattach[attached_object_data];
	for(new i = 0; i < 10; i++) ao[playerid][i] = tmpattach;
	PlayAudioStreamForPlayer(playerid, "https://cdn.discordapp.com/attachments/991759556004814928/998693976301371475/Chronicles_Theme.mp3");
    // ---
	GetPlayerName(playerid, User[playerid][Username], MAX_PLAYER_NAME);
    GetPlayerName(playerid, User[playerid][pUsername], MAX_PLAYER_NAME);
    for(new i = 0; i < MAX_PLAYER_NAME; i++) if(User[playerid][pUsername][i] == '_') User[playerid][pUsername][i] = ' ';
	if(!IsRPName(User[playerid][Username]))
	{
		MSG(playerid,GOLD,"SERVER:"W" Please reconnect with a roleplay name which contains an underscore (maximum underscores: 2). Such as: William_Jones");
		new ping = GetPlayerPing(playerid)*2;
		if(ping > 1000)
		{
			ping = 1000;
		}
		SetTimerEx("KickEx", ping, false, "i", playerid);
		return 1;
	}
	new
		query[124],
		ip[18],
		name[24],
		date[15],
		DBResult: Result;

	GetPlayerIp(playerid,ip,sizeof ip);
	format(query,sizeof(query),"SELECT username,date,bannedby,reason FROM bans WHERE ip = '%s' LIMIT 1",ip);
	Result = db_query(Database, query);
 	if(db_num_rows(Result))
    {
        db_get_field_assoc(Result, "username", name, 18);
        db_get_field_assoc(Result, "date", date, 15);
		new reason[124],
			bannedby[24];
		db_get_field_assoc(Result, "bannedby", bannedby, 24);
		db_get_field_assoc(Result, "reason", reason, 124);
		

		MSG(playerid,ADMIN,"You are banned from this server.");
		format(large_string,sizeof large_string,"Reason: %s",reason);
		MSG(playerid,ADMIN,large_string);
		format(large_string,sizeof large_string,"Date: %s",date);
		MSG(playerid,ADMIN,large_string);
		format(large_string,sizeof large_string,"Banned by: %s",bannedby);
		MSG(playerid,ADMIN,large_string);
		db_free_result(Result);
		return 1;
    }
    else
    {
		format(query,sizeof(query),"SELECT password FROM users WHERE username = '%s' LIMIT 1",User[playerid][Username]);
		Result = db_query(Database, query);

	 	if(db_num_rows(Result))
	    {
	        db_get_field_assoc(Result, "password", User[playerid][Userpass], 129);
	        Dialog_Show(playerid,dLogin, DIALOG_STYLE_PASSWORD, "Login", "Type in your password below to log in.", "Login", "Leave");
	    }
	    else
	    {
			// "Welcome to Final Nights Roleplay,\n\nType in a password below to register an account."
			format(large_string,sizeof large_string,"Welcome to "SERVERNAME", %s!\nType in a password below to register an account:",User[playerid][Username]);
	        Dialog_Show(playerid,dRegister, DIALOG_STYLE_PASSWORD, "Register", large_string, "Register", "Leave");
			//Type in a password below to register an account.
	    }
    }
	db_free_result(Result);// IMPORTANT
    new cameraid = random(5);
	switch(cameraid)
	{
		// FORT CARSON
		case 0: 
		{
			SetPlayerCameraPos(playerid, -267.8296, 2225.8545, 72.7462);
			SetPlayerCameraLookAt(playerid, -268.8276, 2225.8196, 72.5361);
			SetPlayerPos(playerid,  -268.8276, 2225.8196, 53);
			//-258 2225 53
		}
		case 1: 
		{
			SetPlayerCameraPos(playerid, -204.0897, 1089.8038, 26.1861);
			SetPlayerCameraLookAt(playerid, -203.1872, 1090.2303, 25.9910);
			SetPlayerPos(playerid, -203.1872, 1090.2303, 10.900);			
		}
		case 2: 
		{
			SetPlayerCameraPos(playerid, 123.8969, 1158.7892, 41.1085);
			SetPlayerCameraLookAt(playerid, 122.9586, 1159.1279, 40.7235);
			SetPlayerPos(playerid, 122.9586, 1159.1279, 0.0000);
		}
		case 3:
		{
			SetPlayerCameraPos(playerid, -516.9248, 1201.4385, 36.7584);
			SetPlayerCameraLookAt(playerid, -516.0071, 1201.0466, 36.6034);
			SetPlayerPos(playerid,-516.0071, 1201.0466, 0.000);			
		}
		case 4:
		{
			SetPlayerCameraPos(playerid, -185.9412, 931.1074, 18.2643);
			SetPlayerCameraLookAt(playerid, -186.2164, 932.0668, 18.2392);
			SetPlayerPos(playerid, -186.2164, 932.0668, 0.0000);
		}
	}
    return 1;
}
Dialog:dRegister(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        if(strlen(inputtext) < 4 || isnull(inputtext))
        {
	        MSG(playerid,GOLD, "ERROR:"GR" Invalid length. Your password must be at least greater than three characters.");
	        Dialog_Show(playerid,dRegister, DIALOG_STYLE_PASSWORD, "Register", REGISTER_DIALOG, "Register", "Leave");
	        return 1;
        }
        if(strlen(inputtext) > 41)
        {
  	        MSG(playerid,GOLD, "ERROR:"GR" Invalid length. Your password must be at least greater than three characters and no greater than forty one.");
	        Dialog_Show(playerid,dRegister, DIALOG_STYLE_PASSWORD, "Register", REGISTER_DIALOG, "Register", "Leave");
	        return 1;
        }
  		MSG(playerid, WHITE, "SERVER: You have successfully registered on our server and have been automatically logged in!");
  		strins(User[playerid][Userpass],inputtext,0);
  		Dialog_Show(playerid,dGender,DIALOG_STYLE_INPUT,"Sex Selection","Type in your character's sex in the empty field below:\n\nValid values: Male / Female","Input","Leave");
		new ip[18];
		GetPlayerIp(playerid, ip, sizeof ip);
		foreach(Player,i)
		{
			if(User[i][Seecon])
			{
					SFM(i,GRAD2,"*** %s (ID:%i) has registered an account.",User[playerid][Username],playerid,ip);
				//else SFM(i,GRAD2,"*** %s (ID:%i) has registered an account.",User[playerid][Username],playerid);
			}
		}
    }
    else Kick(playerid);
    return 1;
}

/*CMD:skins(playerid) { 
    const MAX_SKINS = 312; 
    static string[MAX_SKINS * 16]; 
     
    if (string[0] == EOS) { 
        for (new i; i < sizeof(MaleSkins); i++)
		{
			if(CopSkin(MaleSkins[i])) continue;
            format(string, sizeof string, "%s%i\n", string, MaleSkins[i]); 
        } 
    } 
    return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_PREVIEW_MODEL, "Skin Selection Dialog", string, "Select", "Cancel"); 

}*/
Dialog:dGender(playerid, response, listitem, inputtext[])
{
	if(!response) Kick(playerid);
	large_string[0] = EOS;
	format(large_string, 256, "Select a skin before you spawn, the skin will be displayed to you for confirmation.\nGTA:SA skin IDs are from 1 to 311.\nCustom skin IDs range from %d to %d.", CUSTOM_SKIN_START, CUSTOM_SKIN_END);
	if(!strcmp(inputtext, "Female", true))
	{
		
	    MSG(playerid,WHITE,"SERVER: You have selected the sex: \"Female\"");
	    User[playerid][uGender] = 1;
	    Dialog_Show(playerid,dSkin,DIALOG_STYLE_INPUT,"Skin Selection",large_string,"Display","Leave");
		//ShowPlayerDialog(playerid, 0, DIALOG_STYLE_PREVIEW_MODEL, "Skins", large_string, "Select", "Cancel"); 
		User[playerid][Level] = -1;
		/*---------------------------------------------------------------*/
		ShowSkin[playerid] = CreatePlayerTextDraw(playerid,13.333333, 195.633331, "_");
		PlayerTextDrawBackgroundColor(playerid,ShowSkin[playerid], 116);
		PlayerTextDrawFont(playerid,ShowSkin[playerid], 5);
		PlayerTextDrawColor(playerid,ShowSkin[playerid], -1);
		PlayerTextDrawUseBox(playerid,ShowSkin[playerid], 1);
		PlayerTextDrawBoxColor(playerid,ShowSkin[playerid], 255);
		PlayerTextDrawTextSize(playerid,ShowSkin[playerid],125,125);
		/*---------------------------------------------------------------*/
		large_string[0] = EOS;
		SetupPlayer(playerid);
		
	    return 1;
	}
 	else if(!strcmp(inputtext, "Male", true))
	{
 		MSG(playerid,WHITE,"SERVER: You have selected the sex: \"Male\"");
   		User[playerid][uGender] = 0;
		User[playerid][Level] = -1;
   		Dialog_Show(playerid,dSkin,DIALOG_STYLE_INPUT,"Skin Selection",large_string,"Display","Leave");
		/*---------------------------------------------------------------*/
		ShowSkin[playerid] = CreatePlayerTextDraw(playerid,13.333333, 195.633331, "_");
		PlayerTextDrawBackgroundColor(playerid,ShowSkin[playerid], 116);
		PlayerTextDrawFont(playerid,ShowSkin[playerid], 5);
		PlayerTextDrawColor(playerid,ShowSkin[playerid], -1);
		PlayerTextDrawUseBox(playerid,ShowSkin[playerid], 1);
		PlayerTextDrawBoxColor(playerid,ShowSkin[playerid], 255);
		PlayerTextDrawTextSize(playerid,ShowSkin[playerid],125,125);
		/*---------------------------------------------------------------*/
		large_string[0] = EOS;
		SetupPlayer(playerid);
   		return 1;
   	}
    Dialog_Show(playerid,dGender,DIALOG_STYLE_INPUT,"Sex Selection","Type in your character's sex in the empty field below:\n\nValid values: Male / Female","Input","Leave");
	return 1;
}

Dialog:dSkin(playerid, response, listitem, inputtext[])
{
	if(!response) Kick(playerid);
	new skin;
	//skin = 1+random(311);
	format(large_string, 256, "Select a skin before you spawn, the skin will be displayed to you for confirmation.\nGTA:SA skin IDs are from 1 to 311.\nCustom skin IDs range from %d to %d.", CUSTOM_SKIN_START, CUSTOM_SKIN_END);
	if(!IsNumeric(inputtext))
	{
		MSG(playerid,GOLD,"ERROR:"GR" Insert a numeric value.");
		Dialog_Show(playerid,dSkin,DIALOG_STYLE_INPUT,"Skin Selection",large_string,"Select","Leave");
		return 1;
	}
	skin = strval(inputtext);
	if(skin < 1 || skin > 311 || skin == 74)
	{
		if(skin >= CUSTOM_SKIN_START && skin <= CUSTOM_SKIN_END)
		{
			// pass it
		}
		else
		{
			MSG(playerid,GOLD,"ERROR:"GR" Invalid skin ID.");
			Dialog_Show(playerid,dSkin,DIALOG_STYLE_INPUT,"Skin Selection",large_string,"Select","Leave");
			return 1;
		}

	}
	if(CopSkin(skin) || MedicSkin(skin))
	{
		MSG(playerid,GOLD,"ERROR:"GR" Specified skin is reserved to a faction.");
		Dialog_Show(playerid,dSkin,DIALOG_STYLE_INPUT,"Skin Selection",large_string,"Select","Leave");
		return 1;		
	}
	User[playerid][uSkin] = skin;
	User[playerid][Level] = 1;
	SetPlayerScore(playerid,User[playerid][Level]);
	ShowIt(playerid, User[playerid][uSkin]);
	Dialog_Show(playerid,dSpawnPointConfirmSkin,DIALOG_STYLE_MSGBOX,"Skin Confirmation","Are you sure you wish to use this skin?","Yes","Back");
	large_string[0] = EOS;
	return 1;
}

Dialog:dSpawnPointConfirmSkin(playerid, response, listitem, inputtext[])
{
	
	if(!response)
	{
		format(large_string, 256, "Select a skin before you spawn, the skin will be displayed to you for confirmation.\nGTA:SA skin IDs are from 1 to 311.\nCustom skin IDs range from %d to %d.", CUSTOM_SKIN_START, CUSTOM_SKIN_END);
		Dialog_Show(playerid,dSkin,DIALOG_STYLE_INPUT,"Skin Selection",large_string,"Select","Leave");
		User[playerid][gVar] = -10000;
		PlayerTextDrawHide(playerid, ShowSkin[playerid]);
		TextDrawHideForPlayer(playerid, ShowFrame);
		large_string[0] = EOS;
		return 1;
	}

	//Dialog_Show(playerid,dSpawnPoint,DIALOG_STYLE_LIST,"Spawn Point Selection","Market Station\nUnity Station","Input","Leave");
	Dialog_Show(playerid,dServerInfo,DIALOG_STYLE_MSGBOX,"Server Information",""SERVERNAME" is a roleplaying setting based off the Classic World of Darkness universe. It represents a crossover of the notable games.\nVampire: The Masquerade and Werewolf: The Apocalypse, the two game settings are carried cooperatively and an experience is created-\n-where the specified game settings can be reciprocally played to full extent.\n\nCredits: \n• "MAR"Vampire: The Masquerade"D", Onyx Path Publishing\n• "WR"Werewolf: The Apocalypse"D", Onyx Path Publishing\n• "MAGE"Mage: The Ascension"D", Onyx Path Publishing\n• "HUNTER"Hunter: The Reckoning"D", Onyx Path Publishing\n• "DEMON"Demon: The Fallen"D", Onyx Path Publishing\n• "CHANGELING"Changeling: The Dreaming"D", Onyx Path Publishing\n• Troika Games for VtM:B models.\n• Blizzard Entertainment for World of Warcraft Models.","Continue","Leave");
	MSG(playerid,WHITE,"SERVER: You have confirmed your skin selection. Type (/fix) if the display persists.");
	PlayerTextDrawHide(playerid,ShowSkin[playerid]);
	TextDrawHideForPlayer(playerid, ShowFrame);
	User[playerid][gVar] = -10000;
   	return 1;
}
Dialog:dServerInfo(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		Dialog_Show(playerid,dWODInfo,DIALOG_STYLE_MSGBOX,"Classic World of Darkness",
		"Sometimes also referred to as 'Original World of Darkness' or 'Old World of Darkness'. The original World of Darkness line was created in 1991 with the release of Vampire: The Masquerade.\nSupport for it ended in 2004 with the release of Time of Judgment. The theme of the Classic World of Darkness is described as 'Gothic-Punk' by the developers.\n\nThe World of Darkness resembles the contemporary world, but it is darker, more devious and more conspiratorial. The dichotomy between rich and poor, influential and weak, powerful-\n-and powerless is much more pronounced than in the real world. Decadence, cynicism and corruption are common. Humans are unwitting victims or pawns of vast secret organizations-\n-of supernatural creatures. Vampires and werewolves struggle with internal factionalism and against other species in secret wars of intrigue for control of reality. The battles in these-\n-wars may last centuries, beyond the realization or comprehension of ordinary humans. This status quo is recently threatened by the rise of a global Technocratic cabal (and/or an animistic-\n-spirit of stasis and control) intent on monopolizing the power of belief and destroying all traditional supernatural societies. The mystical abilities of these non-human entities and their-\n-ability to alter reality at will are restricted by the rise of reason and disbelief in the supernatural and they are forced to rely on more mundane methods in their struggles for supremacy.","Continue","Leave");//\nThe dichotomy between rich and poor, influential and weak,","Continue","Leave");
	}
	else Kick(playerid);
}
Dialog:dWODInfo(playerid, response, listitem, inputtext[])
{
	if(response)
		Dialog_Show(playerid,dWODInfoVamp,DIALOG_STYLE_MSGBOX,"Vampire","In Vampire, players assume the personas of vampires: the immortal bloodsuckers of the horror genre and guide these characters through a world virtually identical to our own.\nBut these aren't quite the vampires you might know from Dracula or Twilight. The vampires that exist now, or Kindred, or Cainites, as they commonly call themselves are both-\n-similar to and different from what we might expect. In many ways, vampires resemble the familiar monsters of myth, cinema, folklore, and fiction. However, as many an intrepid-\n-vampire-hunter has learned to his sorrow - not all of the stories about vampires are true. ","Continue","Leave");
	else Kick(playerid);
}
Dialog:dWODInfoVamp(playerid, response, listitem, inputtext[])
{
	if(response) 	
		Dialog_Show(playerid,dWODInfoWerewolf,DIALOG_STYLE_MSGBOX,"Werewolf","Werewolves are creatures caught between worlds:\nThey are both human and wolf, yet not truly either one. They're modern monsters with primal souls, each one a beast of flesh with a heart of spirit.\nWerewolves are sufficiently like us that in their human forms, they seem as mortal as the rest of us; no stronger, no faster, no more invulnerable.\nWhen the change comes over them, however, they become true monsters: strong enough to smash down doors and claw apart metal, swift-\n-enough to run down any human and even able to shrug off bullets.","Continue","Leave");
	else Kick(playerid);
}
Dialog:dWODInfoWerewolf(playerid, response, listitem, inputtext[])
{
	if(response)
		Dialog_Show(playerid,dWODChooseRaceIntro,DIALOG_STYLE_MSGBOX,"Racial Introduction","First and foremost, everybody is allowed to create a realistic character from their own imagination which goes in accord with the game setting.\nWe wish to create an environment where everyone can play a role of their choosing, a role which they personally enjoy playing. It is important-\n-to mention that all three races (Human, Vampire and Werewolf) equally indulge their part in the game and the presence of all three races enacts-\n-a major role in shaping the game. In other words, race diversity is key -- we theoretically aim to achieve diversity and entail equal amount of-\n-players in each race; doing such will boost the roleplaying experience for everybody in the game. So know that, whatever role you intend to pl-\n-ay in the server -- your role is important and will drastically affect the entire course of the game.","Continue","Leave");
	else Kick(playerid);
}
Dialog:dWODChooseRaceIntro(playerid, response, listitem, inputtext[])
{
	if(response)
		Dialog_Show(playerid,dWODChooseRaceFinal,DIALOG_STYLE_LIST,"Choose a Splat","Human","Choose","Leave");
		// Dialog_Show(playerid,dWODChooseRaceFinal,DIALOG_STYLE_LIST,"Choose a Splat","Human\nVampire (Vampire: The Masquerade)\nWerewolf (Werewolf: The Apocalypse)\nMage (Mage: The Ascension)\nHunter (Hunter: The Reckoning)\nDemon (Demon: The Fallen)\nChangeling (Changeling: The Dreaming)","Choose","Leave");
	else Kick(playerid);
}
Dialog:dWODChooseRaceFinal(playerid, response, listitem, inputtext[])
{
	if(response)
	{ 	
		switch(listitem)
		{
			case 0:
			{
				User[playerid][Userrace] = 0;
				MSG(playerid,WHITE,"SERVER: Congratulations! You are now a "R"Human"W".");
			}
			case 1:
			{
				User[playerid][Userrace] = 1;
				MSG(playerid,WHITE,"SERVER: Congratulations! You are now a "MAR"Vampire"W".");
			}
			case 2:
			{
				User[playerid][Userrace] = 2;
				MSG(playerid,WHITE,"SERVER: Congratulations! You are now a "WR"Werewolf"W".");
				MSG(playerid, GOLD,"NOTE:"GR" Your renown is automatically set after you complete your (/cs).");
			}
			case 3:
			{
				User[playerid][Userrace] = 3;
				MSG(playerid,WHITE,"SERVER: Congratulations! You are now a {9400D3}Mage"W".");				
			}
			case 4:
			{
				User[playerid][Userrace] = 4;
				MSG(playerid,WHITE,"SERVER: Congratulations! You are now a {ccb53e}Hunter"W".");	
			}
			case 5:
			{
				User[playerid][Userrace] = 5;
				MSG(playerid,WHITE,"SERVER: Congratulations! You are now a "DEMON"Demon"W".");				
			}
			case 6:
			{
				User[playerid][Userrace] = 6;
				MSG(playerid,WHITE,"SERVER: Congratulations! You are now a "CHANGELING"Changeling"W".");				
			}
		}
		Dialog_Show(playerid,dSpawnPoint,DIALOG_STYLE_LIST,"Spawn Point Selection",""SPAWNPOINTNAME" Motel\n"SPAWNPOINT2NAME" Entrance","Input","Leave");
	}
	else Kick(playerid);
}

Dialog:dSpawnPoint(playerid, response, listitem, inputtext[])
{
	if(!response) Kick(playerid);
	new point;
	switch(listitem)
	{
		case 0:
		{
		    MSG(playerid,WHITE,"SERVER: You have arrived to "SPAWNPOINTNAME" Motel. Type (/help) to see the available commands.");
		    point = 1;
		}
	 	case 1:
		{
			MSG(playerid,WHITE,"SERVER: You have arrived to "SPAWNPOINT2NAME" Entrance. Type (/help) to see the available commands.");
			point = 2;
	   	}
	}
	new ip[18];
	GetPlayerIp(playerid, ip, sizeof ip);
	format(large_string, sizeof(large_string), 
	"INSERT INTO users (username,password,skin,gender,money,level,faction,drugskill,ip,gpci,race,hunger,thirst,fightstyle,spawnat) VALUES ('%s', '%q','%i','%i','100','1',-1,1,'%s','%s',%d, 100, 100, 4, -1)"
	, User[playerid][Username], User[playerid][Userpass]
	,User[playerid][uSkin],User[playerid][uGender],ip,ReturnGPCI(playerid),User[playerid][Userrace]);
	db_query(Database, large_string);
	new DBResult:Result;
	Result = db_query(Database,"SELECT last_insert_rowid()");
	User[playerid][UserID] = db_get_field_int(Result);
	db_free_result(Result);
	SetTimerEx("SpawnPlayerNow",500,0,"dd",playerid,point);
	SpawnPlayer(playerid);
	User[playerid][Logged] = true;
	GiveMoney(playerid,500);
	SetHealth(playerid,100);
	User[playerid][faction] = -1;
	User[playerid][spawnat] = -1;
	LogConnection(playerid);

	// character sheet setup
	UpdateTrait(playerid, "Strength", 1);
	UpdateTrait(playerid, "Dexterity", 1);
	UpdateTrait(playerid, "Stamina", 1);
	UpdateTrait(playerid, "Charisma", 1);
	UpdateTrait(playerid, "Manipulation", 1);
	UpdateTrait(playerid, "Appearance", 1);
	UpdateTrait(playerid, "Perception", 1);
	UpdateTrait(playerid, "Intelligence", 1);
	UpdateTrait(playerid, "Wits", 1);
	UpdateTrait(playerid, "FreshCS", 1, 9);
	if(User[playerid][Userrace] == 4)
	{
		UpdateTrait(playerid, "Mercy", 0, 3);	
		UpdateTrait(playerid, "Vision", 0, 3);	
		UpdateTrait(playerid, "Zeal", 0, 3);	
	}
	if(User[playerid][Userrace] == 6)
	{
		UpdateTrait(playerid, "Actor", 0, 3);	
		UpdateTrait(playerid, "Fae", 0, 3);	
		UpdateTrait(playerid, "Nature", 0, 3);	
		UpdateTrait(playerid, "Prop", 0, 3);	
		UpdateTrait(playerid, "Scene", 0, 3);	
		UpdateTrait(playerid, "Time", 0, 3);	
	}
	switch(User[playerid][Userrace])
	{
		case 0: UpdateTrait(playerid, "BloodPool", 10);
		case 2: UpdateTrait(playerid, "BloodPool", 25);
	}
	User[playerid][pHunger] = 100;
	User[playerid][pThirst] = 100;
	//UpdateTrait(playerid, "", 0, 9);
	UpdateItem(playerid, 0, 6, "Water", 3);
	UpdateItem(playerid, 1, 9, "Sprunk", 1);
	UpdateItem(playerid, 2, 17, "Soda", 1);
	UpdateItem(playerid, 3, 30, "Snack", 1);
	UpdateItem(playerid, 4, 31, "Venison", 2);
	MSG(playerid,WHITE,"SERVER: You can start building your /(c)haracter(s)heet, please make sure to finish it before doing anything which requires it's usage.");
	MSG(playerid,WHITE,"SERVER: System will assist you in filling your character sheet and walk you through the procedure. (type /next)");
	MSG(playerid,WHITE,"SERVER: If anything remains unclear or you require assistance in general, do not hesitate to contact a staff member using /(a)isst(m)e.");
   	return 1;
}

public SpawnPlayerNow(playerid,point)
{
	if(point == 1)
	    SetSpawnInfo(playerid,0,User[playerid][uSkin],SPAWNPOINT,0,0,0,0,0,0);
	else SetSpawnInfo(playerid,0,User[playerid][uSkin],SPAWNPOINT2,0,0,0,0,0,0);

    SpawnPlayer(playerid);
	SetPlayerColor(playerid,COLOR_LOGGED);
    
	User[playerid][UserTag] = CreateDynamic3DTextLabel(sendernameEx(playerid),SOLIDWHITE,0,0,0,DRAW_DISTANCE,playerid,INVALID_VEHICLE_ID,1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
	
	if(GetPVarInt(playerid, "p_DonatorTag") == 1)
		UpdateDynamic3DTextLabelText(User[playerid][UserTag], GOLD, sendernameEx(playerid));
    return 1;
}
stock LoadInventory(playerid)
{
	printf("[loadinventory] Called for %s.", User[playerid][Username]);
	//db_query(Database, "CREATE TABLE IF NOT EXISTS inventory (userid INTEGER, slot TINYINT, item INTEGER, itemname VARCHAR(24), value INTEGER, fake BIT, mergeable BIT)");
	format(large_string,sizeof(large_string),"SELECT * FROM inventory WHERE userid = %d",User[playerid][UserID]);
	new DBResult: Result = db_query(Database, large_string);
	do
	{
		if(!db_num_rows(Result)) break;
		new slot,
			fake,
			mergable;
		slot = db_get_field_assoc_int(Result, "slot");
		UserItem[playerid][slot][Item] = db_get_field_assoc_int(Result, "item");
		db_get_field_assoc(Result, "itemname", UserItem[playerid][slot][ItemName], MAX_ITEM_NAME);
		UserItem[playerid][slot][Value] = db_get_field_assoc_int(Result, "value");
		UserItem[playerid][slot][Condition] = db_get_field_assoc_int(Result, "condition");
		UserItem[playerid][slot][ItemID] = db_get_field_assoc_int(Result, "itemid");
		fake = db_get_field_assoc_int(Result, "fake");
		UserItem[playerid][slot][ifreq] = db_get_field_assoc_int(Result, "freq");
		UserItem[playerid][slot][itoggle] = db_get_field_assoc_int(Result, "toggle");
		if(fake == 1)
			UserItem[playerid][slot][iFake] = true;
		else UserItem[playerid][slot][iFake] = false;
		mergable = db_get_field_assoc_int(Result, "mergeable");
		if(mergable == 1) UserItem[playerid][slot][iMergable] = true;
		else UserItem[playerid][slot][iMergable] = false;
		printf("[slot%d] Item Name: %s; Item ID: %d; Value: %d; Condition: %d; Mergable: %d; Fake: %d",
		slot, UserItem[playerid][slot][ItemName], UserItem[playerid][slot][Item], UserItem[playerid][slot][Value], UserItem[playerid][slot][Condition], fake, mergable);
 	}
	while(db_next_row(Result));
	db_free_result(Result);
	printf("[inventory] Successfully loaded for %s.",User[playerid][Username]);
	
}
stock LoadJobs(playerid)
{
	new str[124],field[10];
	new joblevel,jobxp,cd;
	format(str,sizeof(str),"SELECT * FROM jobs WHERE userid = %d",User[playerid][UserID]);
	new DBResult: Result = db_query(Database, str);
 	if(db_num_rows(Result))
 	{
	    db_get_field_assoc(Result, "courier", field, 10);
	    print(field);
		sscanf(field,"p<,>iii",joblevel,jobxp,cd);
		User[playerid][uCourier][0] = joblevel;
		User[playerid][uCourier][1] = jobxp;
		User[playerid][uCourier][2] = cd;
	    db_get_field_assoc(Result, "pizzaboy", field, 10);
	    print(field);
		sscanf(field,"p<,>iii",joblevel,jobxp,cd);
		User[playerid][uPB][0] = joblevel;
		User[playerid][uPB][1] = jobxp;
		User[playerid][uPB][2] = cd;
	    db_get_field_assoc(Result, "warehouse", field, 10);
	    print(field);
		sscanf(field,"p<,>iii",joblevel,jobxp,cd);
		User[playerid][uWH][0] = joblevel;
		User[playerid][uWH][1] = jobxp;
		User[playerid][uWH][2] = cd;
	    db_get_field_assoc(Result, "sweeper", field, 10);
	    print(field);
		sscanf(field,"p<,>iii",joblevel,jobxp,cd);
		User[playerid][uSW][0] = joblevel;
		User[playerid][uSW][1] = jobxp;
		User[playerid][uSW][2] = cd;
	    db_get_field_assoc(Result, "mower", field, 10);
	    print(field);
		sscanf(field,"p<,>iii",joblevel,jobxp,cd);
		User[playerid][uMW][0] = joblevel;
		User[playerid][uMW][1] = jobxp;
		User[playerid][uMW][2] = cd;
 	}
 	db_free_result(Result);
	printf("[loadjobs] Successfully loaded for %s.",User[playerid][Username]);
	
}
stock LoadItems(playerid)
{
	new string[60];
	format(string,sizeof string,"SELECT * FROM items WHERE userid = %d",User[playerid][UserID]);
	new DBResult: Result = db_query(Database,string);
	do
	{
		if(!db_num_rows(Result)) break;
		new item = db_get_field_assoc_int(Result,"item");
		new value = db_get_field_assoc_int(Result,"value");
		new cond = db_get_field_assoc_int(Result,"condition");
		UserItem[playerid][item][Item] = item;
		UserItem[playerid][item][Value] = value;
		UserItem[playerid][item][Condition] = cond;
		printf("[itemload] Item: %d (%s); Value: %d; Condition: %d",item,GetItemName(item),value,cond);
	}
	while(db_next_row(Result));
	db_free_result(Result);
	printf("[loaditems] Successfully loaded for %s.",User[playerid][Username]);
	return 1;
}
stock LoadHealth(playerid)
{
	new string[60];
	format(string,sizeof string,"SELECT * FROM health WHERE userid = %d",User[playerid][UserID]);
	new DBResult: Result = db_query(Database,string);
	do
	{
		if(!db_num_rows(Result)) break;
		new hp = db_get_field_assoc_int(Result,"healthlevel");
		new mark = db_get_field_assoc_int(Result,"mark");
		HP[playerid][hLevel][hp] = mark;
	}
	while(db_next_row(Result));
	db_free_result(Result);
	printf("[loadhealth] Successfully loaded for %s.",User[playerid][Username]);
	return 1;
}
stock LoadFish(playerid)
{
	new string[60],slot = 0;
	format(string,sizeof string,"SELECT * FROM fishdata WHERE userid = %d",User[playerid][UserID]);
	new DBResult: Result = db_query(Database,string);
	do
	{
		if(!db_num_rows(Result)) break;
		new fish = db_get_field_assoc_int(Result,"fish");
		new weight = db_get_field_assoc_int(Result,"weight");
		User[playerid][pFishSlot][slot] = fish;
		User[playerid][pFishSlotWeight][slot] = weight;
		slot++;
		printf("[fishload] Fish: %d (%s); Weight: %d",fish,weight);
	}
	while(db_next_row(Result));
	db_free_result(Result);
	printf("[loadfish] Successfully loaded for %s.",User[playerid][Username]);
	return 1;
}
Dialog:dLogin(playerid, response, listitem, inputtext[]) // JOBCD ISNT BEING LOADED/SAVED IN DATABASE
{
	if(!response) return Kick(playerid);
	//strcmp(const string1[], const string2[], bool:ignorecase=false, length=cellmax)
	if (strcmp(inputtext, User[playerid][Userpass]))
	{ // if the password is incorrect
		MSG(playerid,GOLD, "ERROR:"GR" Incorrect password.");
		Dialog_Show(playerid,dLogin, DIALOG_STYLE_PASSWORD, "Login", "Type in your password below to log in.", "Login", "Leave");
        new File:pos= fopen("Logs/incorrect_attempts.txt", io_append);
        format(large_string, 256, "[%s][%s][atmpt] %s: %s\r\n", PasteDate(),PasteTime(), sendername(playerid),inputtext);
        fwrite(pos, large_string);
        fclose(pos);		 
		return 1;
  	}
 	new
   	DBResult: Result,buf[129],sX[10],sY[10],sZ[10];

	format(buf, sizeof buf, "SELECT * FROM users WHERE username = '%q' LIMIT 1", User[playerid][Username]);
	Result = db_query(Database, buf);
	if (db_num_rows(Result))
	{
		new seec;
		User[playerid][UserID] = db_get_field_assoc_int(Result, "userid");
		seec = db_get_field_assoc_int(Result,"seecon");
		if(seec == 0)
		    User[playerid][Seecon] = false;
		else User[playerid][Seecon] = true;
		User[playerid][Useradmin] = db_get_field_assoc_int(Result, "admin");
		if(User[playerid][Useradmin] > 0) db_get_field_assoc(Result,"adminrank",User[playerid][pAdminRank],24);
		User[playerid][MainAccount] = db_get_field_assoc_int(Result, "mainaccount");
		User[playerid][uSkin] = db_get_field_assoc_int(Result,"skin");
		User[playerid][UserXP] = db_get_field_assoc_int(Result, "userxp");
		User[playerid][Userrace] = db_get_field_assoc_int(Result,"race");
		User[playerid][uMoney] = db_get_field_assoc_int(Result,"money");
  		User[playerid][uGender] = db_get_field_assoc_int(Result,"gender");
  		User[playerid][Level] = db_get_field_assoc_int(Result,"level");
  		User[playerid][uJob] = db_get_field_assoc_int(Result,"ujob");
  		User[playerid][TotalHours] = db_get_field_assoc_int(Result,"hours");
  		User[playerid][Health] = db_get_field_assoc_int(Result,"health");
  		User[playerid][faction] = db_get_field_assoc_int(Result,"faction");
  		User[playerid][frank] = db_get_field_assoc_int(Result,"tier");
  		db_get_field_assoc(Result,"rname",User[playerid][frankname],24);
		db_get_field_assoc(Result,"division",User[playerid][fdivision],24);
        User[playerid][funiform] = db_get_field_assoc_int(Result,"uniform");
        User[playerid][fduty] = db_get_field_assoc_int(Result,"duty");
        User[playerid][jail][0] = db_get_field_assoc_int(Result,"jailtime");
        User[playerid][jail][1] = db_get_field_assoc_int(Result,"jailtype");
        User[playerid][LocalMin] = db_get_field_assoc_int(Result,"localmin");
		User[playerid][xprecord] = db_get_field_assoc_int(Result, "xprec");
		User[playerid][psalary] = db_get_field_assoc_int(Result,"salary");
		User[playerid][pPayment] = db_get_field_assoc_int(Result, "payment");
		User[playerid][pHunger] = db_get_field_assoc_int(Result, "hunger");
		User[playerid][pThirst] = db_get_field_assoc_int(Result, "thirst");
		HP[playerid][hMaxLevel] = db_get_field_assoc_int(Result, "maxhealth");
		User[playerid][fightstyle] = db_get_field_assoc_int(Result, "fightstyle");
		User[playerid][chatstyle] = db_get_field_assoc_int(Result,"chatstyle");
		SetPVarInt(playerid, "PlayerCrash", db_get_field_assoc_int(Result, "crash"));
	
  		new weapona,
			weaponb,
			weaponc,
			ammoa,
			ammob,
			ammoc,
			string[13];
		db_get_field_assoc(Result,"weapon",string,13);
		sscanf(string,"p<,>ddd",weapona,weaponb,weaponc);
		User[playerid][uWeapon][0] = weapona;
		User[playerid][uWeapon][1] = weaponb;
		User[playerid][WeaponEquipped] = weaponc;
		db_get_field_assoc(Result,"ammo",string,20);
		sscanf(string,"p<,>ddd",ammoa,ammob,ammoc);
		User[playerid][uWeapon_Ammo][0] = ammoa;
		User[playerid][uWeapon_Ammo][1] = ammob;
		User[playerid][WeaponEquipped_Ammo] = ammoc;
		db_get_field_assoc(Result,"bound",string,13);
		sscanf(string,"p<,>ddd",User[playerid][Bound][0],User[playerid][Bound][1],User[playerid][Bound][2]);
		User[playerid][WeaponBind] = db_get_field_assoc_int(Result,"weaponbind");
		User[playerid][renting] = db_get_field_assoc_int(Result,"renting");
		User[playerid][spawnat] = db_get_field_assoc_int(Result,"spawnat");
		User[playerid][pint] = db_get_field_assoc_int(Result,"interior");
		User[playerid][pvw] = db_get_field_assoc_int(Result,"vw");
		User[playerid][phonenum] = db_get_field_assoc_int(Result,"num");
		User[playerid][onDrug] = db_get_field_assoc_int(Result,"ondrug");
		User[playerid][drughp] = db_get_field_assoc_int(Result,"drughp");
		User[playerid][druglevel] = db_get_field_assoc_int(Result,"druglevel");
		User[playerid][drugpureness] = db_get_field_assoc_int(Result,"drugpureness");
		User[playerid][drugtime] = db_get_field_assoc_int(Result,"drugtime");
		User[playerid][drugEXP] = db_get_field_assoc_int(Result,"drugexp");
		User[playerid][drugSkill] = db_get_field_assoc_int(Result,"drugskill");
		User[playerid][PrimaryAccount] = db_get_field_assoc_int(Result,"bprimary");
		db_get_field_assoc(Result, "rpl", User[playerid][RPL], 5);
		User[playerid][rpoints] = db_get_field_assoc_int(Result, "rpoints");
		if(User[playerid][onDrug] > 0)
		{
		    SetTimerEx("OnWithdrawal",5000,0,"dd", playerid, User[playerid][UserID]);
	    	MSG(playerid,RP,"Info:"GR" Last time you have disconnected, you were under the effects of drugs.");
		}

		seec = db_get_field_assoc_int(Result,"ptog");
		if(seec == 0) User[playerid][togphone] = false;
		else User[playerid][togphone] = true;
		db_get_field_assoc(Result, "x", sX, 10);
		db_get_field_assoc(Result, "y", sY, 10);
		db_get_field_assoc(Result, "z", sZ, 10);
		db_get_field_assoc(Result, "forumname", User[playerid][forumname], 24);
		User[playerid][px] = floatstr(sX);
		User[playerid][py] = floatstr(sY);
		User[playerid][pz] = floatstr(sZ);
		printf("[playerposition_str] sX %s sY %s sZ %s",sX,sY,sZ);
		printf("[playerposition_float]  x %f y %f z %f",User[playerid][px],User[playerid][py],User[playerid][pz]);



        SetPlayerScore(playerid,User[playerid][Level]);

		MSG(playerid,WHITE, "SERVER: You have successfully "G"logged"W" in to your account!");
		SetTimerEx("SpawnPlayerNow",100,0,"d",playerid);
		User[playerid][Logged] = true;
		User[playerid][NotNew] = true;
		User[playerid][gVar] = 1000;
		db_get_field_assoc(Result,"donator",User[playerid][donator],20);
		new month,day,year;
		sscanf(User[playerid][donator],"p</>iii",day,month,year);
		new ryear,rmonth,rday;
		getdate(ryear,rmonth,rday);


		new bool:expire;
		if(year == ryear)
		{
			if(rmonth == month)
			{
			    if(rday >= day)
					expire = true;
			}
			else if(rmonth > month)
				expire = true;
		}
		else if(ryear > year)
			expire = true;
		if(expire == true && year != 0)
		{
			format(User[playerid][donator],20,"");
			format(buf,sizeof buf,"UPDATE users SET donator = NULL WHERE userid = %i",User[playerid][UserID]);
			db_query(Database, buf);
			printf("[%s][%s] [donator] %s donator package expired. (%02d/%02d/%02d -> %02d/%02d/%02d)",PasteTime(),PasteDate(),User[playerid][Username],day,month,year,rday,rmonth,ryear);
			MSG(playerid,GOLD,"Info:"GR" Your donator package has expired.");
		}

		new bool:offmsg = false;
		format(large_string, 256, "SELECT * FROM offmsgs WHERE userid = %d", User[playerid][UserID]);
		Result = db_query(Database, large_string);
		large_string[0] = EOS;
		do
		{
			if(db_num_rows(Result))
			{
				if(offmsg == false)
				{
					MSG(playerid, WHITE, "*** You have unread offline messages:");
					offmsg = true;
				}
				new message[124];
				db_get_field_assoc(Result, "message", message, sizeof message);
				MSG(playerid, WHITE, message);
				format(large_string, sizeof large_string, "%s%s\n", large_string, message);
			}
			else
			{
				break;
			}
		}
		while(db_next_row(Result));
		Dialog_Show(playerid,dExpApps,DIALOG_STYLE_MSGBOX,"Offline Messages",large_string,"Close","");
		if(offmsg == true)
		{
			format(large_string, 124, "DELETE FROM offmsgs WHERE userid = %d", User[playerid][UserID]);
			db_query(Database, large_string);
		}
		//PlayerBar:CreatePlayerProgressBar(
		//playerid, Float:x, Float:y, Float:width = 55.5, Float:height = 3.2, colour, Float:max = 100.0, direction = BAR_DIRECTION_RIGHT): Creates a progress bar for a player.



		//SetupInventory(playerid);
		//printf("[%s][%s] [donator] %s donator package expired. (%02d/%02d/%02d -> %02d/%02d/%02d)",PasteTime(),PasteDate(),User[playerid][Username],day,month,year,rday,rmonth,ryear);
		printf("[%s][%s] [player_debug] User[%d][donator] at login: %s",PasteDate(),PasteTime(),User[playerid][UserID],User[playerid][donator]);

		LoadAttachments(playerid);
		//LoadItems(playerid);
		LoadJobs(playerid);
		LoadFish(playerid);
		LoadSheet(playerid);
		LogConnection(playerid);
		LoadInventory(playerid);
		LoadHealth(playerid);
		SetupPlayer(playerid);
		/*---------------------------------------------------------------*/
		ShowSkin[playerid] = CreatePlayerTextDraw(playerid,13.333333, 195.633331, "_");
		PlayerTextDrawBackgroundColor(playerid,ShowSkin[playerid], 116);
		PlayerTextDrawFont(playerid,ShowSkin[playerid], 5);
		PlayerTextDrawColor(playerid,ShowSkin[playerid], -1);
		PlayerTextDrawUseBox(playerid,ShowSkin[playerid], 1);
		PlayerTextDrawBoxColor(playerid,ShowSkin[playerid], 255);
		PlayerTextDrawTextSize(playerid,ShowSkin[playerid],125,125);
		/*---------------------------------------------------------------*/
		printf("[%s][%s] [player_debug] [player: %d] User[playerid][Bound][0]: %d;User[playerid][Bound][1]: %d; User[playerid][Bound][2]: %d\nUser[playerid][BoundID][0]: %d; User[playerid][BoundID][1]: %d; User[playerid][BoundID][2]: %d"
		,PasteDate(),PasteTime(),User[playerid][UserID],User[playerid][Bound][0],User[playerid][Bound][1],User[playerid][Bound][2],User[playerid][BoundID][0],User[playerid][BoundID][1],User[playerid][BoundID][2]);
		// On-Duty checks, for cops not to abuse their Kiosk weapons.
		if(User[playerid][Bound][0] > 0)
		{
 			User[playerid][BoundID][0] = random(1000000)+playerid;
			for(new i = 0; i < sizeof(wUnique); i++)
			{
			    if(wUnique[i] == 0)
			    {
			        wUnique[i] = User[playerid][BoundID][0];
			        printf("[pkiosk_debug] wUnique[%d]: %d",i,User[playerid][BoundID][0]);
			        break;
			    }
			}
		}
		if(User[playerid][Bound][1] > 0)
		{
 			User[playerid][BoundID][1] = random(1000000)+playerid;
			for(new i = 0; i < sizeof(wUnique); i++)
			{
			    if(wUnique[i] == 0)
			    {
			        wUnique[i] = User[playerid][BoundID][1];
			        printf("[pkiosk_debug] wUnique[%d]: %d",i,User[playerid][BoundID][1]);
			        break;
			    }
			}
		}
		if(User[playerid][Bound][2] > 0)
		{
 			User[playerid][BoundID][2] = random(1000000)+playerid;
			for(new i = 0; i < sizeof(wUnique); i++)
			{
			    if(wUnique[i] == 0)
			    {
			        wUnique[i] = User[playerid][BoundID][2];
			        printf("[pkiosk_debug] wUnique[%d]: %d",i,User[playerid][BoundID][2]);
			        break;
			    }
			}
		}
 	}
	printf("[%s][%s] [player_debug] [player: %d] User[playerid][Bound][0]: %d;User[playerid][Bound][1]: %d; User[playerid][Bound][2]: %d\nUser[playerid][BoundID][0]: %d; User[playerid][BoundID][1]: %d; User[playerid][BoundID][2]: %d"
	,PasteDate(),PasteTime(),User[playerid][UserID],User[playerid][Bound][0],User[playerid][Bound][1],User[playerid][Bound][2],User[playerid][BoundID][0],User[playerid][BoundID][1],User[playerid][BoundID][2]);
	db_free_result(Result);//freeing the memory result, REMEMBER "SELECT" statement!
	new count;
	foreach(Player,i)
	{
		if(User[i][req] > 0)
			count++;
	}
	if(count > 0 && User[playerid][Useradmin] != 0)
	{
		format(large_string,sizeof large_string,"SERVER: There are %d pending requests. Type (/requests) to review them.",count);
		MSG(playerid,WHITE,large_string);
	}

	new ip[18];
	GetPlayerIp(playerid, ip, sizeof ip);
	format(large_string,sizeof large_string,"UPDATE users SET ip = '%s',gpci = '%s' WHERE userid = %d",ip,ReturnGPCI(playerid),User[playerid][UserID]);
	db_query(Database, large_string);
	foreach(Player,i)
	{
		if(User[i][Seecon])
	    {
			SFM(i,GRAD2,"*** %s (ID:%i) has logged on.",User[playerid][Username],playerid,ip);
	    }
    }
	return 1;
}
CMD:setmaxhealthlevel(playerid,params[])
{
	if(User[playerid][Useradmin] < 3)
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	if(isnull(params))
		return MSG(playerid, GOLD, "SYNTAX:"GR" /setmaxhealthlevel [playerid/partofname] [maxhealthlevel (i.e 7)]");
	new id,h;
	sscanf(params,"ui",id,h);
	HP[id][hMaxLevel] = h;
	new query[124];
	format(query, sizeof query,"DELETE FROM health WHERE userid = %d", User[id][UserID]);
	db_query(Database, query);
	for(new i = 1; i <= h; i++)
	{
		HP[id][hLevel][i] = 1;
		format(query, sizeof query, "INSERT INTO health (userid, healthlevel, mark) VALUES (%d, %d, %d)", User[id][UserID], i, HP[id][hLevel][i]);
		db_query(Database, query);
	}
	format(large_string, 125, "UPDATE users SET maxhealth = %d WHERE userid = %d", h, User[id][UserID]);
	db_query(Database, large_string);

	format(large_string, sizeof large_string,"HEALTH LEVELS: %s", PasteHealthCondition(id));
	PlayerTextDrawSetString(id, tHLevel[id], large_string);
	UpdateHealthLevels(id);
	
	SFM(playerid,GRAD2,"Info: You've set %s (ID:%d) max health levels to '%d'",User[id][Username],id,h);
	return 1;
}
CMD:sethealthlevel(playerid, params[])
	return cmd_sethl(playerid, params);
CMD:sethl(playerid,params[])
{
	if(User[playerid][Useradmin] < 3 || !IsStoryteller(playerid))
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	if(isnull(params))
	{
		MSG(playerid, GOLD, "SYNTAX:"GR" /sethl [playerid/partofname] [healthlevel (0-7 (or 0-max))] [OK/BASHING/LETHAL/AGGRAVATED]");
		return MSG(playerid, -1, "SERVER: Use (/revive) or (/setmaxhealthlevel [playerid] [maxhealthlevel]) to refill their health levels instantly.");
	}
	new id,h,hstatus[11];
	sscanf(params,"uis[11]",id,h,hstatus);
	if(h > HP[id][hMaxLevel])
		return MSG(playerid, GOLD, "ERROR:"GR" Specified player does not have this health level.");
	new level;
	if(strfind("ok",hstatus, true) != -1) level = 1;
	if(strfind("bashing",hstatus, true) != -1) level = 2;
	if(strfind("lethal",hstatus, true) != -1) level = 3;
	if(strfind("aggravated",hstatus, true) != -1) level = 4;
	switch(level)
	{
		case 1: hstatus = "OK";
		case 2: hstatus = "/";
		case 3: hstatus = "X";
		case 4: hstatus = "*";
	}
	HP[id][hLevel][h] = level;
	new query[124];
	format(query, sizeof query,"DELETE FROM health WHERE userid = %d AND healthlevel = %d", User[id][UserID], h);
	db_query(Database, query);
	format(query, sizeof query, "INSERT INTO health (userid, healthlevel, mark) VALUES (%d, %d, %d)", User[id][UserID], h, HP[id][hLevel][h]);
	db_query(Database, query);
	format(large_string, sizeof large_string,"HEALTH LEVELS: %s", PasteHealthCondition(id));
	PlayerTextDrawSetString(id, tHLevel[id], large_string);
	UpdateHealthLevels(id);
	SFM(playerid,GRAD2,"Info: You've set %s (ID:%d) number %d health level to `%s`.",User[id][Username],id,h,hstatus);
	return 1;
}

CMD:sethp(playerid,params[])
{
	if(User[playerid][Useradmin] < 3 || IsStoryteller(playerid))
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	if(isnull(params))
		return MSG(playerid, GOLD, "SYNTAX:"GR" /sethp [playerid/partofname] [health]");
	new id,h;
	sscanf(params,"ui",id,h);
	SetHealth(id,h);
	SFM(playerid,GRAD2,"Info: You've set %s (ID:%d) SA-MP health to '%d'",User[id][Username],id,h);
	return 1;
}
stock SetHealth(playerid,health)
{
	if(!User[playerid][Logged]) return 0;
	SetPlayerHealth(playerid,9999);
	User[playerid][Health] = health;
	SetPlayerProgressBarValue(playerid,bHealth,User[playerid][Health]);
	new query[60];
	format(query,sizeof query,"UPDATE users SET health = %d WHERE userid = %d",health,User[playerid][UserID]);
	db_query(Database, query);

	if(User[playerid][Userrace] != 1 && health > 0)
	{
		new points = floatround(health*0.1);
		new curblood = GetPVarInt(playerid, "BloodPool");
		if(points+curblood == 0) return 1;
		RemoveTrait(playerid, "BloodPool");
		if(GetMaxBloodPoolForOther(playerid) < curblood+points)
			return UpdateTrait(playerid, "BloodPool", GetMaxBloodPoolForOther(playerid));
		UpdateTrait(playerid, "BloodPool", curblood+points);
	}
	return 1;
}
//PlayerBar:CreatePlayerProgressBar(
		//playerid, Float:x, Float:y, Float:width = 55.5, Float:height = 3.2, colour, Float:max = 100.0, direction = BAR_DIRECTION_RIGHT): Creates a progress bar for a player.

stock FillNameForSetup(playerid, slot)
{
	new name[MAX_ITEM_NAME+10];
	if(slot == 99)
	{
		new number;
		for(new i = 0; i < MAX_INVENTORY; i++)
		{
			if(UserItem[playerid][i][Value] < 1)
				continue;
			number++;
		}
		format(name, sizeof name, "~g~Inventory (%d/%d)", number, MAX_INVENTORY);
		return name;
	}
	if(isnull(UserItem[playerid][slot][ItemName]))
	{
		format(name, sizeof name, "%d. ~r~Empty Slot", slot+1);
	}
	else 
	{
		if(UserItem[playerid][slot][Value] > 1) 
		{
			//format(name, sizeof name, "%d. %s (%d)", slot+1, UserItem[playerid][slot][ItemName], UserItem[playerid][slot][Value]);
			if(UserItem[playerid][slot][Item] != 33)
			{
				if(UserItem[playerid][slot][Value] > 1) format(name, sizeof name, "%d. %s (%d)", slot+1, UserItem[playerid][slot][ItemName], UserItem[playerid][slot][Value]);
				else format(name, sizeof name, "%d. %s", slot+1, UserItem[playerid][slot][ItemName]);
			}
			else
			{
				format(name, sizeof name, "%d. %s %d", slot+1, UserItem[playerid][slot][ItemName], UserItem[playerid][slot][Value]);
			}
		}
		else format(name, sizeof name, "%d. %s", slot+1, UserItem[playerid][slot][ItemName]);
		
	}
	return name;
}
CMD:resetconsume(playerid, params[])
{
	return DeletePVar(playerid, "tConsume");
}
forward RemoveConsumption(playerid);
public RemoveConsumption(playerid)
{
	return DeletePVar(playerid, "tConsume");
}
public gIncreaseHunger(playerid, tick)
{
	if(!User[playerid][Logged]) return 0;
	new Float:value = GetPlayerProgressBarValue(playerid, bHunger);
	if(value >= 99) 
	{
		SetTimerEx("RemoveConsumption", 10, 0, "d", playerid);
		return 0;
	}
	if(tick <= 0) 
	{
		SetTimerEx("RemoveConsumption", 10, 0, "d", playerid);
		return 0;
	}
	SetPlayerProgressBarValue(playerid, bHunger, value+1);
	tick--;
	SetTimerEx("gIncreaseHunger",1000,0,"dd",playerid, tick);
	return 1;
}
public gDecreaseHunger(playerid, tick)
{
	if(!User[playerid][Logged]) return 0;
	new Float:value = GetPlayerProgressBarValue(playerid, bHunger);
	if(value < 1) 
	{
		SetTimerEx("RemoveConsumption", 10, 0, "d", playerid);
		return 1;
	}
	if(tick <= 0)
	{
		SetTimerEx("RemoveConsumption", 10, 0, "d", playerid);
		return 1;
	}
	SetPlayerProgressBarValue(playerid, bHunger, value-1);
	tick--;
	SetTimerEx("gDecreaseHunger",1000,0,"dd",playerid, tick);
	return 1;
}
public gIncreaseThirst(playerid, tick)
{
	if(!User[playerid][Logged]) return 0;
	new Float:value = GetPlayerProgressBarValue(playerid, bThirst);
	if(value >= 99)
	{
		SetTimerEx("RemoveConsumption", 10, 0, "d", playerid);
		return 1;
	}
	if(tick <= 0) 
	{
		SetTimerEx("RemoveConsumption", 10, 0, "d", playerid);
		return 1;
	}
	SetPlayerProgressBarValue(playerid, bThirst, value+1);
	tick--;
	SetTimerEx("gIncreaseThirst",1000,0,"dd", playerid, tick);
	return 1;
}
public gDecreaseThirst(playerid, tick)
{
	if(!User[playerid][Logged]) return 0;
	new Float:value = GetPlayerProgressBarValue(playerid, bThirst);
	if(value < 1) 
	{
		SetTimerEx("RemoveConsumption", 10, 0, "d", playerid);
		return 1;
	}
	if(tick <= 0) 
	{
		SetTimerEx("RemoveConsumption", 10, 0, "d", playerid);
		return 1;
	}
	SetPlayerProgressBarValue(playerid, bThirst, value-1);
	tick--;
	SetTimerEx("gDecreaseThirst", 1000, 0, "dd", playerid, tick);
	return 1;
}

CMD:hungerbar(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	return SetPlayerProgressBarValue(playerid, bHunger, strval(params));
}
stock UseItem(playerid, slot)
{
	if(User[playerid][Logged])
	{
		new item = UserItem[playerid][slot][Item];
		//SFM(playerid, -1, "UseItem Slot %d Item %d", slot, item);
		switch(item)
		{
			case -1: 
			{
				if(!strcmp(UserItem[playerid][slot][ItemName], "Beast Mask", true) && User[playerid][Userrace] == 2)
				{
					if(GetPVarInt(playerid, "p_AssumeForm") > 0)
						return RemoveForm(playerid);
					SetPVarInt(playerid, "p_AssumeForm", 2);
					AssumeForm(playerid);
					return 1;
				}
				MSG(playerid, GOLD, "Inventory:"GR" This item has no script usage as its a roleplay item.");
			}
			case 1: MSG(playerid, GOLD, "Inventory:"GR" This item is used through a wrench.");
			case 2: {		} // screwdriver
			case 3: cmd_modcar(playerid, "");
			case 4: Dialog_Show(playerid,dUseItemPaint,DIALOG_STYLE_LIST,"Vehicle Paint", "Paint Vehicle\nApply Paintjob","Select","Cancel");
			case 5: cmd_repair(playerid, "");
			case 6: FoodDrink(playerid, item, slot); // water
			case 7:
			{
				PlayerActionMessageBubble(playerid, "lights a cigarette.");
				cmd_smoke(playerid, "1");
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
				UpdateItem(playerid, slot, UserItem[playerid][slot][Item], UserItem[playerid][slot][ItemName], -1, 100, true);
			}
			case 8: cmd_breakin(playerid, "");
			case 9: FoodDrink(playerid, item, slot); // sprunk
			case 10: 
			{
				
			}
			case 11: MSG(playerid, GOLD, "Inventory:"GR" Use (/bfind - /pfind - /hfind) to interact with the GPS.");
			case 12: cmd_mask(playerid, "");
			case 13: {} 
			case 14: cmd_mp3(playerid, "");
			case 15: {}
			case 16: FoodDrink(playerid, item, slot);
			case 17: FoodDrink(playerid, item, slot);
			case 18: FoodDrink(playerid, item, slot);
			case 19: {}
			case 20: {}
			case 21: MSG(playerid, GOLD, "Inventory:"GR" Baits are used through a Fishing Rod.");
			case 22: cmd_fish(playerid, "");
			case 23: cmd_plantied(playerid, "");
			case 24: cmd_bloodpack(playerid, "");
			case 25:
			{
				Dialog_Show(playerid,dRadiSel, DIALOG_STYLE_LIST, "Radio Frequency", "Toggle\nChange Frequency", "Select", "Cancel");
				SetPVarInt(playerid, "pRadioSel", slot);
			}
			case 26, 27, 28: MSG(playerid, GOLD, "Inventory:"GR" Specified item cannot be used. It is sold at the Butcher Store.");
			case 29: cmd_refill(playerid, "");
			case 30: FoodDrink(playerid, item, slot);
			case 31: FoodDrink(playerid, item, slot);
			default: MSG(playerid, GOLD, "Inventory:"GR" Empty Slot specified.");
		}
		return 1;
	}
	return -1;
}

Dialog:dRadiSel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				new slot = GetPVarInt(playerid, "pRadioSel");
				if(UserItem[playerid][slot][itoggle] == 0)
				{
					UserItem[playerid][slot][itoggle] = 1;
					MSG(playerid, GREEN, "Info:"GR" Your radio has been turned on.");
				}
				else
				{
					UserItem[playerid][slot][itoggle] = 0;
					MSG(playerid, GREEN, "Info:"GR" Your radio has been turned off.");
				}
				format(large_string, 124, "UPDATE inventory SET toggle = %d WHERE slot = %d AND item = %d AND userid = %d", UserItem[playerid][slot][itoggle], slot, UserItem[playerid][slot][Item], User[playerid][UserID]);
				db_query(Database, large_string);
			}
			case 1:
			{
				Dialog_Show(playerid,dRadi, DIALOG_STYLE_INPUT, "Radio Frequency", "Insert the frequency you wish to change your radio to:\nFrequencies can be any number from 1 to infinite.", "Set", "Close"); 
			}
		}
		return 1;
	}
	return DeletePVar(playerid, "pRadioSel");
}
Dialog:dRadi(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
			return MSG(playerid, GOLD, "ERROR:"GR" Invalid frequency specified.");
		new slot = GetPVarInt(playerid, "pRadioSel");
		if(UserItem[playerid][slot][itoggle] == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" Your radio is off. Turn it on first.");
		new freq = strval(inputtext);
		UserItem[playerid][slot][ifreq] = freq;
		format(large_string, sizeof large_string, "UPDATE inventory SET freq = %d WHERE item = %d and slot = %d AND userid = %d", freq, UserItem[playerid][slot][Item], slot, User[playerid][UserID]);
		db_query(Database, large_string);
		MSG(playerid, GOLD, "Info:"GR" Your frequency has been set. Use (/r) to speak through the radio.");
	}
	return DeletePVar(playerid, "pRadioSel");
}
CMD:check(playerid, params[])
{
	if(User[playerid][Useradmin] == 0)
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new target;
	if(sscanf(params, "u", target)) return MSG(playerid, GOLD, "SYNTAX:"GR" /check [playerid/PartOfName]");
	large_string[0] = EOS;
	for(new i = 0; i < MAX_INVENTORY; i++)
	{
		if(UserItem[target][i][Value] > 0)
			format(large_string, sizeof large_string, "%s%d. %s (%d) [%d]\n", large_string, i+1, UserItem[target][i][ItemName], UserItem[target][i][Value], UserItem[target][i][ItemID]);
		else format(large_string, sizeof large_string, "%s%d. Empty Slot\n", large_string, i+1, UserItem[target][i][ItemName], UserItem[target][i][Value]);
	}
	Dialog_Show(playerid,dShowInv, DIALOG_STYLE_MSGBOX, sendernameEx(playerid), large_string, "Close", "");		
	SFM(playerid, GOLD, "Inventory:"GR" You are checking %s's inventory.", sendernameEx(target));
	return 1;
}
stock ShowItemInfo(forplayerid, playerid, slot)
{
	if(User[playerid][Logged])
	{
		large_string[0] = EOS;
		if(UserItem[playerid][slot][iFake] == false) 
		{
			format(large_string, sizeof large_string, "Item Name: %s\nValue: %d\nCondition: %d/100\nItem Type: Script Item",
			UserItem[playerid][slot][ItemName], UserItem[playerid][slot][Value], UserItem[playerid][slot][Condition]);
		}
		else // rp item 
		{
			for(new i = 0; i < MAX_ITEM_NAME; i++) if(UserItem[playerid][slot][ItemName][i] == '_') UserItem[playerid][slot][ItemName][i] = ' ';
			format(large_string, sizeof large_string, "SELECT * FROM rpitem WHERE itemid = %d ORDER BY number ASC", UserItem[playerid][slot][ItemID]);
			new DBResult: Result = db_query(Database, large_string);
			new bool:found;
			format(large_string, sizeof large_string, "Item Name: %s\nValue: %d\nCondition: %d/100\nItem Type: Roleplay Item\n\n[Description]\n", UserItem[playerid][slot][ItemName], UserItem[playerid][slot][Value], UserItem[playerid][slot][Condition]);
			if(db_num_rows(Result))
			{
				do
				{
					if(db_num_rows(Result))
					{
						new description[124];
						db_get_field_assoc(Result, "description", description, sizeof description);
						format(large_string, sizeof large_string, "%s[%d] %s\n", large_string, db_get_field_assoc_int(Result, "number"), description);
						found = true;
					}
					else break;
				}
				while(db_next_row(Result));
				db_free_result(Result);
			}
			if(!found) strcat(large_string, "This item has no description.");
		}
		Dialog_Show(forplayerid,dInvInfo,DIALOG_STYLE_MSGBOX, UserItem[playerid][slot][ItemName], large_string, "Close", "");
		return 1;
	}
	return 0;
}
CMD:free(playerid, params[])
{
	return SFM(playerid, -1, "%d", GetInventoryFreeSlot(playerid));
}
CMD:inventory(playerid, params[]) return cmd_i(playerid, params);
CMD:i(playerid, params[])
{
	if(isnull(params))
		return MSG(playerid, GOLD, "SYNTAX:"GR" /(i)nventory [use/give/discard/move/show/hud/info/edit/split/merge]");
	new option[16], input = INVALID_PLAYER_ID, target = INVALID_PLAYER_ID, value = 1;
	if(strfind(params, "info", true) != -1 || strfind(params, "merge", true) != -1)
	{
		value = INVALID_PLAYER_ID;
	}
	sscanf(params, "s[16]iiu", option, input, value, target);
	if(strlen(option) > 16) return MSG(playerid, GOLD, "ERROR:"GR" Input option is too long.");	
	if(!strcmp(option, "merge", true))
	{
		if(input == INVALID_PLAYER_ID) return MSG(playerid, GOLD, "SYNTAX:"GR" /(i)nventory merge [slot] [slot]");
		if(value == INVALID_PLAYER_ID) return MSG(playerid, GOLD, "SYNTAX: Please specify the slot you want to be merged. (/i merge slot1 slot2)");
		if(input > MAX_INVENTORY) return MSG(playerid, GOLD, "ERROR:"GR" Invalid slot specified.");	
		input--;
		value--;
		if(UserItem[playerid][input][Item] == 0) return MSG(playerid, GOLD, "ERROR:"GR" Empty slot specified.");
		if(UserItem[playerid][input][ItemID] == 33) return MSG(playerid, GOLD, "ERROR:"GR" You cannot merge this item.");
		if(UserItem[playerid][value][ItemID] == 33) return MSG(playerid, GOLD, "ERROR:"GR" You cannot merge this item.");
		if(UserItem[playerid][input][Item] != UserItem[playerid][input][Item]) return MSG(playerid, GOLD, "ERROR:"GR" These items cannot be merged.");
		
		UpdateItem(playerid, input, UserItem[playerid][input][Item], UserItem[playerid][input][ItemName], UserItem[playerid][value][Value], 
		UserItem[playerid][input][Condition], true, UserItem[playerid][input][iFake], UserItem[playerid][input][ItemID]);

		UpdateItem(playerid, value, UserItem[playerid][input][Item], UserItem[playerid][input][ItemName],  -UserItem[playerid][value][Value], 
		UserItem[playerid][input][Condition], true, UserItem[playerid][input][iFake], UserItem[playerid][input][ItemID]);
	}
	if(!strcmp(option, "split", true))
	{
		if(input == INVALID_PLAYER_ID) return MSG(playerid, GOLD, "SYNTAX:"GR" /(i)nventory split [slot] [value]");
		if(input > MAX_INVENTORY) return MSG(playerid, GOLD, "ERROR:"GR" Invalid slot specified.");	
		input--;
		if(UserItem[playerid][input][Item] == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" Empty slot specified.");
		new split_slot = GetInventoryFreeSlot(playerid);
		if(split_slot == -1) return MSG(playerid, GOLD, "ERROR:"GR" Your inventory is full.");
		if(UserItem[playerid][input][Value] <= 1) return MSG(playerid, GOLD, "ERROR:"GR" You cannot split this item.");
		if(UserItem[playerid][input][ItemID] == 33) return MSG(playerid, GOLD, "ERROR:"GR" You cannot split this item.");
		if(value > 0)
		{
			print("split begins here");
			if(value > UserItem[playerid][input][Value])
				return MSG(playerid, GOLD, "ERROR:"GR" Invalid amount specified, greater than original.");
			if(UserItem[playerid][input][iMergable] == false) return MSG(playerid, GOLD, "ERROR:"GR" You cannot split this item."); 
			//UpdateItem(playerid, slot, itemid, itemname[], value, condition = 100, bool:mergable = false, bool:fakeitem = false, ritemid = 0)
			printf("SPLIT SLOT %d", split_slot);
			UpdateItem(playerid, split_slot, UserItem[playerid][input][Item], UserItem[playerid][input][ItemName], value, UserItem[playerid][input][Condition], true, UserItem[playerid][input][iFake], 0);
			UpdateItem(playerid, input, UserItem[playerid][input][Item], UserItem[playerid][input][ItemName], -value, UserItem[playerid][input][Condition], true, UserItem[playerid][input][iFake], UserItem[playerid][input][ItemID]);
			return SFM(playerid, GOLD, "Info:"GR" You have split %s (%d) from its original value.", UserItem[playerid][input][ItemName], value);
		}
		else return MSG(playerid, GOLD, "ERROR:"GR" You  cannot split this item.");
	}
	if(!strcmp(option, "edit", true))
	{
		if(input == INVALID_PLAYER_ID) return MSG(playerid, GOLD, "SYNTAX:"GR" /(i)nventory edit [slot]");
		if(input > MAX_INVENTORY) return MSG(playerid, GOLD, "ERROR:"GR" Invalid slot specified.");		
		input--;
		if(UserItem[playerid][input][Item] == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" Empty slot specified.");
		if(UserItem[playerid][input][ItemID] == 0)
		{
			format(large_string, sizeof large_string, "SELECT itemid FROM inventory ORDER BY itemid DESC", User[playerid][UserID]);
			new DBResult: Result = db_query(Database, large_string);
			if(!db_num_rows(Result)) large_string[0] = 0;
			large_string[0] = db_get_field_assoc_int(Result, "itemid")+1;	
			UserItem[playerid][input][ItemID] = large_string[0];

			format(large_string, sizeof large_string, "UPDATE inventory SET itemid = %d WHERE slot = %d AND userid = %d", UserItem[playerid][input][ItemID], input, User[playerid][UserID]);
			db_query(Database, large_string);
			printf("[%s][%s] [inventoryitemid] %s has began editing slot %d with the item %s which had item id 0 and now the item id is %d.",PasteDate(), PasteTime(), User[playerid][Username], input,  UserItem[playerid][input][ItemName],  UserItem[playerid][input][ItemID]);
		}
		SetPVarInt(playerid, "dEditSlot", input);
		Dialog_Show(playerid, dEditInv, DIALOG_STYLE_LIST, UserItem[playerid][input][ItemName], "Add a Description Line\nDelete a Description Line", "Select", "Close");	
		printf("[%s][%s] [inventoryitemid] %s has began editing slot %d with the item %s which has the item id %d.", PasteDate(), PasteTime(), User[playerid][Username], input,  UserItem[playerid][input][ItemName],  UserItem[playerid][input][ItemID]);
		return 1;
	}
	if(!strcmp(option, "info", true))
	{
        if(value == INVALID_PLAYER_ID) value = playerid;
		if(input == INVALID_PLAYER_ID) return MSG(playerid, GOLD, "SYNTAX:"GR" /(i)nventory info [slot] [optional:playerid/PartofName]");
		if(input > MAX_INVENTORY) return MSG(playerid, GOLD, "ERROR:"GR" Invalid slot specified.");		
		input --;
		if(value > -1)
		{
			if(value > MAX_PLAYERS || value < 0) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player ID specified.");
			if(User[value][Logged] == false) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player ID specified.");
			ShowItemInfo(value, playerid, input);
			if(value != playerid)
            {
                format(large_string, sizeof large_string,"shows their %s to %s.", UserItem[playerid][input][ItemName], sendernameEx(value));
			    PlayerActionMessageBubble(playerid, large_string);
            }
        }
		else ShowItemInfo(playerid, playerid, input);
		return 1;
	}
	if(!strcmp(option, "move", true))
	{
		
		if(input == INVALID_PLAYER_ID) return MSG(playerid, GOLD, "SYNTAX:"GR" /(i)nventory move [fromslot] [toslot]");
		if(input > MAX_INVENTORY || input < 1) return MSG(playerid, GOLD, "ERROR:"GR" Invalid first slot specified.");
		if(value > MAX_INVENTORY || value < 1) return MSG(playerid, GOLD, "ERROR:"GR" Invalid second slot specified.");
		value--;
		input--;
		new bitem, bvalue, bcondition, bool:bfake, bool:bmerge, bitemname[MAX_ITEM_NAME], bitemid;
		bitem = UserItem[playerid][input][Item];
		bvalue = UserItem[playerid][input][Value];
		bcondition = UserItem[playerid][input][Condition];
		bfake = UserItem[playerid][input][iFake];
		bmerge = UserItem[playerid][input][iMergable];
		bitemid = UserItem[playerid][input][ItemID];
		format(bitemname, MAX_ITEM_NAME, "%s", UserItem[playerid][input][ItemName]);

		UserItem[playerid][input][Item] = UserItem[playerid][value][Item];
		UserItem[playerid][input][Value] = UserItem[playerid][value][Value];
		UserItem[playerid][input][Condition] = UserItem[playerid][value][Condition];
		UserItem[playerid][input][iFake] = UserItem[playerid][value][iFake];
		UserItem[playerid][input][iMergable] = UserItem[playerid][value][iMergable];
		format(UserItem[playerid][input][ItemName], MAX_ITEM_NAME, "%s", UserItem[playerid][value][ItemName]);
		UserItem[playerid][input][ItemID] = UserItem[playerid][value][ItemID];

		UserItem[playerid][value][Item] = bitem;
		UserItem[playerid][value][Value] = bvalue;
		UserItem[playerid][value][Condition] = bcondition;
		UserItem[playerid][value][iFake] = bfake;
		UserItem[playerid][value][iMergable] = bmerge;
		format(UserItem[playerid][value][ItemName], MAX_ITEM_NAME, "%s", bitemname);		
		UserItem[playerid][value][ItemID] = bitemid;

		//(userid, slot, item, itemname, value, fake, mergeable, condition) 
		// when you move an item to another item, the item that is being moved to is erased - check this!
		large_string[0] = EOS;
		/*format(large_string, sizeof large_string, "UPDATE inventory SET slot = %d, item = %d, itemname = '%s', value = %d, fake = %d, mergeable = %d, condition = %d WHERE userid = %d AND slot = %d AND itemname = '%s' AND value = %d"
		, value, UserItem[playerid][value][Item], UserItem[playerid][value][ItemName], UserItem[playerid][value][Value], UserItem[playerid][value][iFake], UserItem[playerid][value][iMergable], UserItem[playerid][value][Condition],
		User[playerid][UserID], input, UserItem[playerid][input][ItemName], UserItem[playerid][input][Value]);
		db_query(Database, large_string);

		format(large_string, sizeof large_string, "UPDATE inventory SET slot = %d, item = %d, itemname = '%s', value = %d, fake = %d, mergeable = %d, condition = %d WHERE userid = %d AND slot = %d AND itemname = '%s' AND value = %d"
		, input, UserItem[playerid][input][Item], UserItem[playerid][input][ItemName], UserItem[playerid][input][Value], UserItem[playerid][input][iFake], UserItem[playerid][input][iMergable], UserItem[playerid][input][Condition],
		User[playerid][UserID], value, UserItem[playerid][value][ItemName], UserItem[playerid][value][Value]);
		db_query(Database, large_string);*/

		// Clearing up
		format(large_string, sizeof large_string,"DELETE FROM inventory WHERE slot = %d AND userid = %d", value, User[playerid][UserID]);
		db_query(Database, large_string);
		format(large_string, sizeof large_string,"DELETE FROM inventory WHERE slot = %d AND userid = %d", input, User[playerid][UserID]);
		db_query(Database, large_string);	

		// Adding 
		if(UserItem[playerid][value][Item] != 0)
		{
			format(large_string, sizeof large_string, "INSERT INTO inventory (userid, slot, item, itemname, value, fake, mergeable, condition, itemid) VALUES (%d, %d, %d, '%s', %d, %d, %d, %d, %d)"
			,User[playerid][UserID], value, UserItem[playerid][value][Item], UserItem[playerid][value][ItemName], UserItem[playerid][value][Value],
			 UserItem[playerid][value][iFake], UserItem[playerid][value][iMergable], UserItem[playerid][value][Condition], UserItem[playerid][value][ItemID]);
			db_query(Database, large_string);
		}
		if(UserItem[playerid][input][Item] != 0)
		{
			format(large_string, sizeof large_string, "INSERT INTO inventory (userid, slot, item, itemname, value, fake, mergeable, condition, itemid) VALUES (%d, %d, %d, '%s', %d, %d, %d, %d, %d)"
			,User[playerid][UserID], input, UserItem[playerid][input][Item], UserItem[playerid][input][ItemName], UserItem[playerid][input][Value], 
			UserItem[playerid][input][iFake], UserItem[playerid][input][iMergable], UserItem[playerid][input][Condition], UserItem[playerid][input][ItemID]);
			db_query(Database, large_string);
		}

		UpdateInventorySlot(playerid, value);
		UpdateInventorySlot(playerid, input);

		SFM(playerid, GREEN, "Inventory:"GR" You have switched slot "R"%d"GR" with slot "R"%d"GR".", input+1, value+1);
		return 1;
	}
	if(!strcmp(option, "use", true))
	{
		if(input == INVALID_PLAYER_ID) return MSG(playerid, GOLD, "SYNTAX:"GR" /(i)nventory use [slot]");
		if(input > MAX_INVENTORY) return MSG(playerid, GOLD, "ERROR:"GR" Invalid slot specified.");
		return UseItem(playerid, input-1);
	}
	if(!strcmp(option, "discard", true))
	{
		if(input <= 0) return MSG(playerid, GOLD, "SYNTAX:"GR" /(i)nventory discard [slot]");
		if(input > MAX_INVENTORY) return MSG(playerid, GOLD, "ERROR:"GR" Invalid slot specified.");		
		format(large_string, sizeof large_string, "DELETE FROM inventory WHERE userid = %d AND slot = %d", User[playerid][UserID], input-1);
		db_query(Database, large_string);
		format(large_string, sizeof large_string,"DELETE FROM rpitem WHERE itemid = %d", UserItem[playerid][input-1][ItemID]);
		db_query(Database, large_string);
		UserItem[playerid][input-1][Item] = 0;
		UserItem[playerid][input-1][Value] = 0;
		UserItem[playerid][input-1][Condition] = 0;
		UserItem[playerid][input-1][iFake] = false;
		UserItem[playerid][input-1][iMergable] = false;
		UserItem[playerid][input-1][ItemID] = 0;
		format(UserItem[playerid][input-1][ItemName], MAX_ITEM_NAME, "");	
		UpdateInventorySlot(playerid, input-1);
		UpdateInventoryHeader(playerid);
		return MSG(playerid, GOLD, "Inventory:"GR" Specified slot has been discarded.");
		
	}
	if(!strcmp(option, "show", true))
	{
		if(input == INVALID_PLAYER_ID || input > MAX_PLAYERS) return MSG(playerid, GOLD, "SYNTAX:"GR" /(i)nventory show [playerid]");
	
		if(User[input][Logged] == false) return MSG(playerid, GOLD, "Inventory:"GR" Invalid player specified.");
		large_string[0] = EOS;
		for(new i = 0; i < MAX_INVENTORY; i++)
		{
			if(UserItem[playerid][i][Value] > 0)
				format(large_string, sizeof large_string, "%s%d. %s (%d)\n", large_string, i+1, UserItem[playerid][i][ItemName], UserItem[playerid][i][Value]);
			else format(large_string, sizeof large_string, "%s%d. Empty Slot\n", large_string, i+1, UserItem[playerid][i][ItemName], UserItem[playerid][i][Value]);
		}
		Dialog_Show(input,dShowInv, DIALOG_STYLE_MSGBOX, sendernameEx(playerid), large_string, "Close", "");		
		return SFM(playerid, GOLD, "Inventory:"GR" You have showed %s your inventory.", sendernameEx(input));
	}
	if(!strcmp(option, "give", true))
	{
		if(value < 1) return MSG(playerid, GOLD, "SYNTAX:"GR" /(i)nventory give [slot] [value] [playerid/PartOfName]");
		if(target == playerid) return MSG(playerid, GOLD, "ERROR:"GR" You cannot give yourself.");
		if(target == INVALID_PLAYER_ID) return MSG(playerid, GOLD, "SYNTAX:"GR" /(i)nventory give [slot] [value] [playerid/PartOfName]");
		if(target > MAX_PLAYERS || target < 0) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player specified.");
		if(!User[target][Logged]) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player specified.");
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		if(!IsPlayerInRangeOfPoint(target, 2, x, y, z)) return MSG(playerid, GOLD, "ERROR:"GR" You are not in range of your target.");
        input--;
		printf("option %s input %d value %d target %d", option, input, value, target);
		new free = GetInventoryFreeSlot(target);
		if(free == -1 && UserItem[playerid][input][iMergable] == false) return MSG(playerid, GOLD, "ERROR:"GR" Specified player's inventory is full.");
		if(UserItem[playerid][input][Value] < 1) return MSG(playerid, GOLD, "ERROR:"GR" Specified slot is empty.");
		if(UserItem[playerid][input][Value] < value) return MSG(playerid, GOLD, "ERROR:"GR" Invalid value specified.");
		//if(UserItem[playerid][input][iMergable] == true) UpdateItem(target, FindPlayerItem(target, UserItem[playerid][input][Item]), UserItem[playerid][input][Item], UserItem[playerid][input][ItemName], value, UserItem[playerid][input][Condition], UserItem[playerid][input][iMergable], UserItem[playerid][input][iFake],  UserItem[playerid][input][ItemID]);
		if(UserItem[playerid][input][iMergable] == true) 
		{
			new p_slot;
			if(UserItem[playerid][input][iFake] == false) 
				p_slot = FindPlayerItem(target, UserItem[playerid][input][Item]);
			else 
			{
				p_slot = FindPlayerItem_Name(target, UserItem[playerid][input][ItemName]);
			}
			if(p_slot == -1) p_slot = GetInventoryFreeSlot(target);
			if(p_slot == -1) return MSG(playerid, GOLD, "ERROR:"GR" Specified player's inventory is full.");
			UpdateItem(target, p_slot, UserItem[playerid][input][Item], UserItem[playerid][input][ItemName], value, UserItem[playerid][input][Condition], UserItem[playerid][input][iMergable], UserItem[playerid][input][iFake],  UserItem[playerid][input][ItemID]);
		}
		else UpdateItem(target, free, UserItem[playerid][input][Item], UserItem[playerid][input][ItemName], value, UserItem[playerid][input][Condition], UserItem[playerid][input][iMergable], UserItem[playerid][input][iFake],  UserItem[playerid][input][ItemID]);
		format(large_string, sizeof large_string, "has given their %s (%d) to %s.", UserItem[playerid][input][ItemName], value, sendernameEx(target));
		cmd_ame(playerid, large_string);

		format(large_string, sizeof large_string, "Inventory:"GR" You have received %s (%d) from %s.", UserItem[playerid][input][ItemName], value, sendernameEx(playerid));
		MSG(target, GREEN, large_string);
		
		UpdateItem(playerid, input, UserItem[playerid][input][Item], UserItem[playerid][input][ItemName], -value, UserItem[playerid][input][Condition], 
		UserItem[playerid][input][iMergable], UserItem[playerid][input][iFake], UserItem[playerid][input][ItemID]);		
		return 1;
	}
	if(!strcmp(option, "hud", true))
	{
		new hud = GetPVarInt(playerid, "inventoryHud");
		if(hud == 0)	
		{
			TextDrawShowForPlayer(playerid, inventory_box);
			PlayerTextDrawShow(playerid, inventory_header[playerid]);
			for(new inventory_loop = 0; inventory_loop < MAX_INVENTORY; inventory_loop++)
			{
				PlayerTextDrawShow(playerid, invslot[playerid][inventory_loop]);	
				UpdateInventorySlot(playerid, inventory_loop);
			}	
			SetPVarInt(playerid, "inventoryHud", 1);
		}
		else
		{
			TextDrawHideForPlayer(playerid, inventory_box);
			PlayerTextDrawHide(playerid, inventory_header[playerid]);
			for(new inventory_loop = 0; inventory_loop < MAX_INVENTORY; inventory_loop++)
				PlayerTextDrawHide(playerid, invslot[playerid][inventory_loop]);		
			SetPVarInt(playerid, "inventoryHud", 0);	
		}
		return 1;
	}

	return 1;
}
Dialog:dEditInv(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				return Dialog_Show(playerid, dEditInvAdd, DIALOG_STYLE_LIST, UserItem[playerid][GetPVarInt(playerid, "dEditSlot")][ItemName], "Assign a Description Line Manually\nAssign a Description Line Automatically", "Select", "Close");	
			}
			case 1:
			{
				return Dialog_Show(playerid, dEditInvDelete, DIALOG_STYLE_INPUT, UserItem[playerid][GetPVarInt(playerid, "dEditSlot")][ItemName], "Specify the description line you would like to delete:", "Select", "Close");
			}
		}
	}
	else
	{
		DeletePVar(playerid, "dEditSlot");
		DeletePVar(playerid, "dEditLine");
	}
	return 1;
}
Dialog:dEditInvDelete(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
			DeletePVar(playerid, "dEditSlot");
			DeletePVar(playerid, "dEditLine");
			return MSG(playerid, GOLD, "SERVER:"GR" Invalid value specified; only positive numbers are allowed.");
		}
		format(large_string, sizeof large_string, "DELETE FROM rpitem WHERE number = %d AND itemid = %d", strval(inputtext), UserItem[playerid][GetPVarInt(playerid, "dEditSlot")][ItemID]);
		db_query(Database, large_string);
		MSG(playerid, WHITE, "SERVER: Description line erased.");
	}
	DeletePVar(playerid, "dEditSlot");
	DeletePVar(playerid, "dEditLine");
	return 1;
}
Dialog:dEditInvAdd(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(listitem == 0)
		{
			return Dialog_Show(playerid, dEditInvAddManual, DIALOG_STYLE_INPUT, UserItem[playerid][GetPVarInt(playerid, "dEditSlot")][ItemName], "Specify the description line you would like to add description in:\nUse `Assign a Description Line Automatically` if you're not sure what this means.", "Select", "Close");	
		}
		else
		{
			large_string[0] = EOS;
			format(large_string, sizeof large_string, "SELECT number FROM rpitem WHERE itemid = %d ORDER BY number DESC", UserItem[playerid][GetPVarInt(playerid, "dEditSlot")][ItemID]);
			new DBResult: Result = db_query(Database, large_string);
			if(!db_num_rows(Result)) large_string[0] = 0;
			large_string[0] = db_get_field_assoc_int(Result, "number")+1;
			SetPVarInt(playerid, "dEditLine", large_string[0]);
			Dialog_Show(playerid, dEditInvAddNow, DIALOG_STYLE_INPUT, UserItem[playerid][GetPVarInt(playerid, "dEditSlot")][ItemName], "Insert the desired description:", "Select", "Close");	
			return 1;		
		}
	}
	else
	{
		DeletePVar(playerid, "dEditSlot");
		DeletePVar(playerid, "dEditLine");
	}
	return 1;
}
Dialog:dEditInvAddManual(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
			MSG(playerid, GOLD, "SERVER:"GR" Invalid value specified; only positive numbers are allowed.");
			DeletePVar(playerid, "dEditSlot");
			DeletePVar(playerid, "dEditLine");
			return 1;
		}
		SetPVarInt(playerid, "dEditLine", strval(inputtext));
		Dialog_Show(playerid, dEditInvAddNow, DIALOG_STYLE_INPUT, UserItem[playerid][GetPVarInt(playerid, "dEditSlot")][ItemName], "Insert the desired description:", "Select", "Close");	
	}
	else
	{
		DeletePVar(playerid, "dEditLine");
		DeletePVar(playerid, "dEditSlot");
	}
	return 1;
}
Dialog:dEditInvAddNow(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new num = GetPVarInt(playerid, "dEditLine");
		new id = GetPVarInt(playerid, "dEditSlot");
		format(large_string, sizeof large_string,"SELECT 1 FROM rpitem WHERE number = %d AND itemid = %d", num, UserItem[playerid][id][ItemID]);
		new DBResult: Result = db_query(Database, large_string);

		if(db_num_rows(Result))	
		{
			DeletePVar(playerid, "dEditLine");
			DeletePVar(playerid, "dEditSlot");
			MSG(playerid, GOLD, "ERROR:"GR" Specified description line is already used. Delete it before overwriting.");
			return db_free_result(Result);
		}

		format(large_string, sizeof large_string, "INSERT INTO rpitem (number, itemid, description) VALUES (%d, %d, '%q')", num, UserItem[playerid][id][ItemID], inputtext);
		db_query(Database, large_string);

		MSG(playerid, WHITE, "SERVER: Description added.");
		DeletePVar(playerid, "dEditLine");
		DeletePVar(playerid, "dEditSlot");
	}
	else 
	{
		DeletePVar(playerid, "dEditLine");
		DeletePVar(playerid, "dEditSlot");
	}
	return 1;
}
stock SetupPlayer(playerid)
{
	/*---------------------------------------------------------------*/
	bHealth = CreatePlayerProgressBar(playerid, 547.000, 69.000-0.5,65,5,0xB4191DFF, 100.0);
	SetPlayerProgressBarValue(playerid,bHealth,User[playerid][Health]);
	gBar = CreatePlayerProgressBar(playerid,506,99.555534,100,4.8,ADMIN,100,BAR_DIRECTION_RIGHT);
	bHunger = CreatePlayerProgressBar(playerid, 529.000, 108.000,65,5, 0xA0522DFF, 100.0);
	bThirst = CreatePlayerProgressBar(playerid, 529.000, 108.000+10,65,5, 0x7EC0EEFF, 100.0);
	/*---------------------------------------------------------------*/
	deathtext[playerid] = CreatePlayerTextDraw(playerid, 401.699859, 402.743774, "-");
	PlayerTextDrawLetterSize(playerid, deathtext[playerid], 0.205666, 1.562668);
	PlayerTextDrawAlignment(playerid, deathtext[playerid], 1);
	PlayerTextDrawColor(playerid, deathtext[playerid], -1);
	PlayerTextDrawSetShadow(playerid, deathtext[playerid], 0);
	PlayerTextDrawSetOutline(playerid, deathtext[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, deathtext[playerid], 51);
	PlayerTextDrawFont(playerid, deathtext[playerid], 1);
	PlayerTextDrawSetProportional(playerid, deathtext[playerid], 1);
	/*---------------------------------------------------------------*/
	vspeed[playerid] = CreatePlayerTextDraw(playerid, 525.333251, 388.437072, "Speed:");
	PlayerTextDrawLetterSize(playerid, vspeed[playerid], 0.187000, 0.998518);
	PlayerTextDrawAlignment(playerid, vspeed[playerid], 1);
	PlayerTextDrawColor(playerid, vspeed[playerid], -1);
	PlayerTextDrawSetShadow(playerid, vspeed[playerid], 0);
	PlayerTextDrawSetOutline(playerid, vspeed[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, vspeed[playerid], 51);
	PlayerTextDrawFont(playerid, vspeed[playerid], 2);
	PlayerTextDrawSetProportional(playerid, vspeed[playerid], 1);
	/*---------------------------------------------------------------*/
	vfuel[playerid] = CreatePlayerTextDraw(playerid, 525.333312, 396.074188, "Fuel:");
	PlayerTextDrawLetterSize(playerid, vfuel[playerid], 0.227666, 0.948740);
	PlayerTextDrawAlignment(playerid, vfuel[playerid], 1);
	PlayerTextDrawColor(playerid, vfuel[playerid], -1);
	PlayerTextDrawSetShadow(playerid, vfuel[playerid], 0);
	PlayerTextDrawSetOutline(playerid, vfuel[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, vfuel[playerid], 51);
	PlayerTextDrawFont(playerid, vfuel[playerid], 2);
	PlayerTextDrawSetProportional(playerid, vfuel[playerid], 1);
	/*---------------------------------------------------------------*/
	tLabel[playerid] = CreatePlayerTextDraw(playerid, 49.000000, 321.000000, "test");
	PlayerTextDrawFont(playerid, tLabel[playerid], 1);
	PlayerTextDrawLetterSize(playerid, tLabel[playerid], 0.249999, 0.599996);
	PlayerTextDrawTextSize(playerid, tLabel[playerid], 396.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, tLabel[playerid], 1);
	PlayerTextDrawSetShadow(playerid, tLabel[playerid], 1);
	PlayerTextDrawAlignment(playerid, tLabel[playerid], 1);
	PlayerTextDrawColor(playerid, tLabel[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, tLabel[playerid], 255);
	PlayerTextDrawBoxColor(playerid, tLabel[playerid], 50);
	PlayerTextDrawUseBox(playerid, tLabel[playerid], 0);
	PlayerTextDrawSetProportional(playerid, tLabel[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, tLabel[playerid], 0);
	/*-----------------------------------------------------------*/
	tHLevel[playerid] = CreatePlayerTextDraw(playerid, 21.000000, 423.000000, "Health Levels:");
	PlayerTextDrawFont(playerid, tHLevel[playerid], 1);
	PlayerTextDrawLetterSize(playerid, tHLevel[playerid], 0.166666, 0.949999);
	PlayerTextDrawTextSize(playerid, tHLevel[playerid], 233.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, tHLevel[playerid], 1);
	PlayerTextDrawSetShadow(playerid, tHLevel[playerid], 0);
	PlayerTextDrawAlignment(playerid, tHLevel[playerid], 1);
	PlayerTextDrawColor(playerid, tHLevel[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, tHLevel[playerid], 255);
	PlayerTextDrawBoxColor(playerid, tHLevel[playerid], 50);
	PlayerTextDrawUseBox(playerid, tHLevel[playerid], 0);
	PlayerTextDrawSetProportional(playerid, tHLevel[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, tHLevel[playerid], 0);
	/*---------------------------------------------------------------*/
	TextDrawShowForPlayer(playerid, serverhud);
	User[playerid][showhud] = true;
	/*---------------------------------------------------------------*/

	// here you can actually make the inventory slots dynamic, 
	// how? by having a variable that, and then you loop against that variable and create as many textdraws as needed
	// for position you either do it mathematically or with a switch()

	#define INVENTORY_HEADER_FONT 2
	#define INVENTORY_HEADER_ALIGNMENT 1

	inventory_header[playerid] = CreatePlayerTextDraw(playerid, 564.000000, 286.000000, FillNameForSetup(playerid, 99));
	PlayerTextDrawFont(playerid, inventory_header[playerid], INVENTORY_HEADER_FONT);
	PlayerTextDrawLetterSize(playerid, inventory_header[playerid], 0.179166, 1.049999);
	PlayerTextDrawTextSize(playerid, inventory_header[playerid], 636.500000, 11.000000);//635.000000, 12.000000);
	PlayerTextDrawSetOutline(playerid, inventory_header[playerid], 1);
	PlayerTextDrawSetShadow(playerid, inventory_header[playerid], 0);
	PlayerTextDrawAlignment(playerid, inventory_header[playerid], INVENTORY_HEADER_ALIGNMENT);
	PlayerTextDrawColor(playerid, inventory_header[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, inventory_header[playerid], 255);
	PlayerTextDrawBoxColor(playerid, inventory_header[playerid], 105);
	PlayerTextDrawUseBox(playerid, inventory_header[playerid], 1);
	PlayerTextDrawSetProportional(playerid, inventory_header[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, inventory_header[playerid], 0);

	invslot[playerid][0] = CreatePlayerTextDraw(playerid, 564.000000, 301.000000, FillNameForSetup(playerid, 0));
	PlayerTextDrawFont(playerid, invslot[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, invslot[playerid][0], 0.212500, 0.750000);
	PlayerTextDrawTextSize(playerid, invslot[playerid][0], 636.500000, 11.000000);//634.500000, 11.000000);
	PlayerTextDrawSetOutline(playerid, invslot[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, invslot[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, invslot[playerid][0], 1);
	PlayerTextDrawColor(playerid, invslot[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, invslot[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, invslot[playerid][0], 116);
	PlayerTextDrawUseBox(playerid, invslot[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, invslot[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, invslot[playerid][0], 1);

	invslot[playerid][1] = CreatePlayerTextDraw(playerid, 564.000000, 312.000000, FillNameForSetup(playerid, 1));
	PlayerTextDrawFont(playerid, invslot[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, invslot[playerid][1], 0.212500, 0.750000);
	PlayerTextDrawTextSize(playerid, invslot[playerid][1], 636.500000, 11.000000);//634.500000, 11.000000);
	PlayerTextDrawSetOutline(playerid, invslot[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, invslot[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, invslot[playerid][1], 1);
	PlayerTextDrawColor(playerid, invslot[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, invslot[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, invslot[playerid][1], 116);
	PlayerTextDrawUseBox(playerid, invslot[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, invslot[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, invslot[playerid][1], 0);

	invslot[playerid][2] = CreatePlayerTextDraw(playerid, 564.000000, 323.000000, FillNameForSetup(playerid, 2));
	PlayerTextDrawFont(playerid, invslot[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, invslot[playerid][2], 0.212500, 0.750000);
	PlayerTextDrawTextSize(playerid, invslot[playerid][2], 636.500000, 11.000000);//634.500000, 11.000000);
	PlayerTextDrawSetOutline(playerid, invslot[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, invslot[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, invslot[playerid][2], 1);
	PlayerTextDrawColor(playerid, invslot[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, invslot[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, invslot[playerid][2], 116);
	PlayerTextDrawUseBox(playerid, invslot[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, invslot[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, invslot[playerid][2], 1);

	invslot[playerid][3] = CreatePlayerTextDraw(playerid, 564.000000, 334.000000, FillNameForSetup(playerid, 3));
	PlayerTextDrawFont(playerid, invslot[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, invslot[playerid][3], 0.212500, 0.750000);
	PlayerTextDrawTextSize(playerid, invslot[playerid][3], 636.500000, 11.000000);//634.500000, 11.000000);
	PlayerTextDrawSetOutline(playerid, invslot[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, invslot[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, invslot[playerid][3], 1);
	PlayerTextDrawColor(playerid, invslot[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, invslot[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, invslot[playerid][3], 116);
	PlayerTextDrawUseBox(playerid, invslot[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, invslot[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, invslot[playerid][3], 1);

	invslot[playerid][4] = CreatePlayerTextDraw(playerid, 564.000000, 345.000000, FillNameForSetup(playerid, 4));
	PlayerTextDrawFont(playerid, invslot[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, invslot[playerid][4], 0.212500, 0.750000);
	PlayerTextDrawTextSize(playerid, invslot[playerid][4], 636.500000, 11.000000);//634.500000, 11.000000);
	PlayerTextDrawSetOutline(playerid, invslot[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, invslot[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, invslot[playerid][4], 1);
	PlayerTextDrawColor(playerid, invslot[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, invslot[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, invslot[playerid][4], 116);
	PlayerTextDrawUseBox(playerid, invslot[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, invslot[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, invslot[playerid][4], 1);

	invslot[playerid][5] = CreatePlayerTextDraw(playerid, 564.000000, 356.000000, FillNameForSetup(playerid, 5));
	PlayerTextDrawFont(playerid, invslot[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, invslot[playerid][5], 0.212500, 0.750000);
	PlayerTextDrawTextSize(playerid, invslot[playerid][5], 636.500000, 11.000000);//634.500000, 11.000000);
	PlayerTextDrawSetOutline(playerid, invslot[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, invslot[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, invslot[playerid][5], 1);
	PlayerTextDrawColor(playerid, invslot[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, invslot[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, invslot[playerid][5], 116);
	PlayerTextDrawUseBox(playerid, invslot[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, invslot[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, invslot[playerid][5], 1);

	invslot[playerid][6] = CreatePlayerTextDraw(playerid, 564.000000, 367.000000, FillNameForSetup(playerid, 6));
	PlayerTextDrawFont(playerid, invslot[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, invslot[playerid][6], 0.212500, 0.750000);
	PlayerTextDrawTextSize(playerid, invslot[playerid][6], 636.500000, 11.000000);//634.500000, 11.000000);
	PlayerTextDrawSetOutline(playerid, invslot[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, invslot[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, invslot[playerid][6], 1);
	PlayerTextDrawColor(playerid, invslot[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, invslot[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, invslot[playerid][6], 116);
	PlayerTextDrawUseBox(playerid, invslot[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, invslot[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, invslot[playerid][6], 1);

	invslot[playerid][7] = CreatePlayerTextDraw(playerid, 564.000000, 378.000000, FillNameForSetup(playerid, 7));
	PlayerTextDrawFont(playerid, invslot[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, invslot[playerid][7], 0.212500, 0.750000);
	PlayerTextDrawTextSize(playerid, invslot[playerid][7], 636.500000, 11.000000);//634.500000, 11.000000);
	PlayerTextDrawSetOutline(playerid, invslot[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, invslot[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, invslot[playerid][7], 1);
	PlayerTextDrawColor(playerid, invslot[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, invslot[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, invslot[playerid][7], 116);
	PlayerTextDrawUseBox(playerid, invslot[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, invslot[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, invslot[playerid][7], 1);

	invslot[playerid][8] = CreatePlayerTextDraw(playerid, 564.000000, 389.000000, FillNameForSetup(playerid, 8));
	PlayerTextDrawFont(playerid, invslot[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, invslot[playerid][8], 0.212500, 0.750000);
	PlayerTextDrawTextSize(playerid, invslot[playerid][8], 636.500000, 11.000000);//634.500000, 11.000000);
	PlayerTextDrawSetOutline(playerid, invslot[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, invslot[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, invslot[playerid][8], 1);
	PlayerTextDrawColor(playerid, invslot[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, invslot[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, invslot[playerid][8], 116);
	PlayerTextDrawUseBox(playerid, invslot[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, invslot[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, invslot[playerid][8], 1);

	invslot[playerid][9] = CreatePlayerTextDraw(playerid, 564.000000, 400.000000, FillNameForSetup(playerid, 9));
	PlayerTextDrawFont(playerid, invslot[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, invslot[playerid][9], 0.212500, 0.750000);
	PlayerTextDrawTextSize(playerid, invslot[playerid][9], 636.500000, 11.000000);//634.500000, 11.000000);
	PlayerTextDrawSetOutline(playerid, invslot[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, invslot[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, invslot[playerid][9], 1);
	PlayerTextDrawColor(playerid, invslot[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, invslot[playerid][9], 255);
	PlayerTextDrawBoxColor(playerid, invslot[playerid][9], 116);
	PlayerTextDrawUseBox(playerid, invslot[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, invslot[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, invslot[playerid][9], 1);	
	
	TextDrawShowForPlayer(playerid, inventory_box);
	PlayerTextDrawShow(playerid, inventory_header[playerid]);
	for(new inventory_loop = 0; inventory_loop < MAX_INVENTORY; inventory_loop++)
		PlayerTextDrawShow(playerid, invslot[playerid][inventory_loop]);

	SetPVarInt(playerid, "inventoryHud", 1);


	/*new cs_modifier[64];

	format(cs_modifier,sizeof cs_modifier,"Name: %s", sendernameEx(playerid));
	csname[playerid] = CreatePlayerTextDraw(playerid, 158.000000, 70.000000, cs_modifier);
	PlayerTextDrawFont(playerid, csname[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csname[playerid], 0.258332, 1.549998);
	PlayerTextDrawTextSize(playerid, csname[playerid], 263.000000, 8.000000);
	PlayerTextDrawSetOutline(playerid, csname[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csname[playerid], 1);
	PlayerTextDrawAlignment(playerid, csname[playerid], 1);
	PlayerTextDrawColor(playerid, csname[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csname[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csname[playerid], 50);
	PlayerTextDrawUseBox(playerid, csname[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csname[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csname[playerid], 1);

	cs_modifier[0] = EOS;
	GetPVarString(playerid, "Nature", cs_modifier, MAX_TRAIT_NAME);
	if(isnull(cs_modifier))	cs_modifier = "N/A";
	format(cs_modifier, 64, "Nature: %s", cs_modifier);
	csnature[playerid] = CreatePlayerTextDraw(playerid, 158.000000, 84.000000, cs_modifier);
	PlayerTextDrawFont(playerid, csnature[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csnature[playerid], 0.258332, 1.549998);
	PlayerTextDrawTextSize(playerid, csnature[playerid], 262.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csnature[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csnature[playerid], 1);
	PlayerTextDrawAlignment(playerid, csnature[playerid], 1);
	PlayerTextDrawColor(playerid, csnature[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csnature[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csnature[playerid], 50);
	PlayerTextDrawUseBox(playerid, csnature[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csnature[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csnature[playerid], 1);

	cs_modifier[0] = EOS;
	GetPVarString(playerid, "Demeanor", cs_modifier, MAX_TRAIT_NAME);
	if(isnull(cs_modifier))	cs_modifier = "N/A";
	format(cs_modifier, 64, "Demeanor: %s", cs_modifier);
	csdemeanor[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 98.000000, cs_modifier);
	PlayerTextDrawFont(playerid, csdemeanor[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csdemeanor[playerid], 0.258332, 1.549998);
	PlayerTextDrawTextSize(playerid, csdemeanor[playerid], 263.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csdemeanor[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csdemeanor[playerid], 1);
	PlayerTextDrawAlignment(playerid, csdemeanor[playerid], 1);
	PlayerTextDrawColor(playerid, csdemeanor[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csdemeanor[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csdemeanor[playerid], 50);
	PlayerTextDrawUseBox(playerid, csdemeanor[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csdemeanor[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csdemeanor[playerid], 1);

	cs_modifier[0] = EOS;
	cs_modifier[0] = GetPVarInt(playerid, "vAge");
	format(cs_modifier, 64,"Vampiric Age: %d", cs_modifier[0]);
	csage[playerid] = CreatePlayerTextDraw(playerid, 274.000000, 70.000000, cs_modifier);
	PlayerTextDrawFont(playerid, csage[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csage[playerid], 0.258332, 1.549998);
	PlayerTextDrawTextSize(playerid, csage[playerid], 355.000000, 14.000000);
	PlayerTextDrawSetOutline(playerid, csage[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csage[playerid], 1);
	PlayerTextDrawAlignment(playerid, csage[playerid], 1);
	PlayerTextDrawColor(playerid, csage[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csage[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csage[playerid], 50);
	PlayerTextDrawUseBox(playerid, csage[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csage[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csage[playerid], 1);

	cs_modifier[0] = EOS;
	cs_modifier[0] = GetPVarInt(playerid,"vGeneration");
	format(cs_modifier, 64, "Generation: %dth",cs_modifier[0]);
	csgen[playerid] = CreatePlayerTextDraw(playerid, 275.000000, 85.000000, cs_modifier);
	PlayerTextDrawFont(playerid, csgen[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csgen[playerid], 0.258332, 1.549998);
	PlayerTextDrawTextSize(playerid, csgen[playerid], 355.000000, 14.000000);
	PlayerTextDrawSetOutline(playerid, csgen[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csgen[playerid], 1);
	PlayerTextDrawAlignment(playerid, csgen[playerid], 1);
	PlayerTextDrawColor(playerid, csgen[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csgen[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csgen[playerid], 50);
	PlayerTextDrawUseBox(playerid, csgen[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csgen[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csgen[playerid], 1);

	cs_modifier[0] = EOS;
	GetPVarString(playerid, "Concept", cs_modifier, MAX_TRAIT_NAME);
	if(isnull(cs_modifier))	cs_modifier = "N/A";
	format(cs_modifier, 64, "Concept: %s", cs_modifier);
	csconcept[playerid] = CreatePlayerTextDraw(playerid, 274.000000, 99.000000, cs_modifier);
	PlayerTextDrawFont(playerid, csconcept[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csconcept[playerid], 0.258332, 1.549998);
	PlayerTextDrawTextSize(playerid, csconcept[playerid], 370.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csconcept[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csconcept[playerid], 1);
	PlayerTextDrawAlignment(playerid, csconcept[playerid], 1);
	PlayerTextDrawColor(playerid, csconcept[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csconcept[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csconcept[playerid], 50);
	PlayerTextDrawUseBox(playerid, csconcept[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csconcept[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csconcept[playerid], 1);

	cs_modifier[0] = EOS;
	GetPVarString(playerid, "Clan", cs_modifier, MAX_TRAIT_NAME);
	if(isnull(cs_modifier))	cs_modifier = "N/A";
	format(cs_modifier, 64, "Clan: %s", cs_modifier);
	csclan[playerid] = CreatePlayerTextDraw(playerid, 377.000000, 70.000000, cs_modifier);
	PlayerTextDrawFont(playerid, csclan[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csclan[playerid], 0.258332, 1.549998);
	PlayerTextDrawTextSize(playerid, csclan[playerid], 469.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csclan[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csclan[playerid], 1);
	PlayerTextDrawAlignment(playerid, csclan[playerid], 1);
	PlayerTextDrawColor(playerid, csclan[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csclan[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csclan[playerid], 50);
	PlayerTextDrawUseBox(playerid, csclan[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csclan[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csclan[playerid], 1);

	cs_modifier[0] = EOS;
	GetPVarString(playerid, "Sect", cs_modifier, MAX_TRAIT_NAME);
	if(isnull(cs_modifier))	cs_modifier = "N/A";
	format(cs_modifier, 64, "Sect: %s", cs_modifier);
	cssect[playerid] = CreatePlayerTextDraw(playerid, 378.000000, 86.000000, cs_modifier);
	PlayerTextDrawFont(playerid, cssect[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cssect[playerid], 0.258332, 1.549998);
	PlayerTextDrawTextSize(playerid, cssect[playerid], 520.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cssect[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cssect[playerid], 1);
	PlayerTextDrawAlignment(playerid, cssect[playerid], 1);
	PlayerTextDrawColor(playerid, cssect[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cssect[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cssect[playerid], 50);
	PlayerTextDrawUseBox(playerid, cssect[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cssect[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cssect[playerid], 1);

	cs_modifier[0] = EOS;
	GetPVarString(playerid, "Sire", cs_modifier, MAX_TRAIT_NAME);
	if(isnull(cs_modifier))	cs_modifier = "N/A";
	format(cs_modifier, 64, "Sire: %s", cs_modifier);
	cssire[playerid] = CreatePlayerTextDraw(playerid, 378.000000, 100.000000, cs_modifier);
	PlayerTextDrawFont(playerid, cssire[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cssire[playerid], 0.258332, 1.549998);
	PlayerTextDrawTextSize(playerid, cssire[playerid], 486.000000, 18.000000);
	PlayerTextDrawSetOutline(playerid, cssire[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cssire[playerid], 1);
	PlayerTextDrawAlignment(playerid, cssire[playerid], 1);
	PlayerTextDrawColor(playerid, cssire[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cssire[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cssire[playerid], 50);
	PlayerTextDrawUseBox(playerid, cssire[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cssire[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cssire[playerid], 1);

	csabs = TextDrawCreate(309.000000, 199.000000, "Abilities");
	TextDrawFont(csabs, 1);
	TextDrawLetterSize(csabs, 0.204162, 1.299998);
	TextDrawTextSize(csabs, 530.000000, 42.000000);
	TextDrawSetOutline(csabs, 1);
	TextDrawSetShadow(csabs, 1);
	TextDrawAlignment(csabs, 2);
	TextDrawColor(csabs, -1962934017);
	TextDrawBackgroundColor(csabs, 255);
	TextDrawBoxColor(csabs, 140);
	TextDrawUseBox(csabs, 0);
	TextDrawSetProportional(csabs, 1);
	TextDrawSetSelectable(csabs, 0);

	csstr[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 144.000000, "Strength");
	PlayerTextDrawFont(playerid, csstr[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csstr[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csstr[playerid], 198.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csstr[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csstr[playerid], 1);
	PlayerTextDrawAlignment(playerid, csstr[playerid], 1);
	PlayerTextDrawColor(playerid, csstr[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csstr[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csstr[playerid], 50);
	PlayerTextDrawUseBox(playerid, csstr[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csstr[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csstr[playerid], 1);

	csdex[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 161.000000, "Dexterity");
	PlayerTextDrawFont(playerid, csdex[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csdex[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csdex[playerid], 199.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csdex[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csdex[playerid], 1);
	PlayerTextDrawAlignment(playerid, csdex[playerid], 1);
	PlayerTextDrawColor(playerid, csdex[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csdex[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csdex[playerid], 50);
	PlayerTextDrawUseBox(playerid, csdex[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csdex[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csdex[playerid], 1);

	csstam[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 179.000000, "Stamina");
	PlayerTextDrawFont(playerid, csstam[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csstam[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csstam[playerid], 199.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csstam[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csstam[playerid], 1);
	PlayerTextDrawAlignment(playerid, csstam[playerid], 1);
	PlayerTextDrawColor(playerid, csstam[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csstam[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csstam[playerid], 50);
	PlayerTextDrawUseBox(playerid, csstam[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csstam[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csstam[playerid], 1);

	cscharisma[playerid] = CreatePlayerTextDraw(playerid, 277.000000, 146.000000, "Charisma");
	PlayerTextDrawFont(playerid, cscharisma[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cscharisma[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, cscharisma[playerid], 320.500000, 17.000000);//
	PlayerTextDrawSetOutline(playerid, cscharisma[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cscharisma[playerid], 1);
	PlayerTextDrawAlignment(playerid, cscharisma[playerid], 1);
	PlayerTextDrawColor(playerid, cscharisma[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cscharisma[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cscharisma[playerid], 50);
	PlayerTextDrawUseBox(playerid, cscharisma[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cscharisma[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cscharisma[playerid], 1);

	csmanip[playerid] = CreatePlayerTextDraw(playerid, 278.000000, 163.000000, "Manipulation");
	PlayerTextDrawFont(playerid, csmanip[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csmanip[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csmanip[playerid], 327.000000, 14.500000);
	PlayerTextDrawSetOutline(playerid, csmanip[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csmanip[playerid], 1);
	PlayerTextDrawAlignment(playerid, csmanip[playerid], 1);
	PlayerTextDrawColor(playerid, csmanip[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csmanip[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csmanip[playerid], 50);
	PlayerTextDrawUseBox(playerid, csmanip[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csmanip[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csmanip[playerid], 1);

	csapp[playerid] = CreatePlayerTextDraw(playerid, 279.000000, 180.000000, "Appearance");
	PlayerTextDrawFont(playerid, csapp[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csapp[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csapp[playerid], 327.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csapp[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csapp[playerid], 1);
	PlayerTextDrawAlignment(playerid, csapp[playerid], 1);
	PlayerTextDrawColor(playerid, csapp[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csapp[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csapp[playerid], 50);
	PlayerTextDrawUseBox(playerid, csapp[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csapp[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csapp[playerid], 1);

	csperc[playerid] = CreatePlayerTextDraw(playerid, 378.000000, 144.000000, "Perception");
	PlayerTextDrawFont(playerid, csperc[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csperc[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csperc[playerid], 420.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csperc[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csperc[playerid], 1);
	PlayerTextDrawAlignment(playerid, csperc[playerid], 1);
	PlayerTextDrawColor(playerid, csperc[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csperc[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csperc[playerid], 50);
	PlayerTextDrawUseBox(playerid, csperc[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csperc[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csperc[playerid], 1);

	csintel[playerid] = CreatePlayerTextDraw(playerid, 377.000000, 161.000000, "Intelligence");
	PlayerTextDrawFont(playerid, csintel[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csintel[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csintel[playerid], 420.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csintel[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csintel[playerid], 1);
	PlayerTextDrawAlignment(playerid, csintel[playerid], 1);
	PlayerTextDrawColor(playerid, csintel[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csintel[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csintel[playerid], 50);
	PlayerTextDrawUseBox(playerid, csintel[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csintel[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csintel[playerid], 1);

	cswits[playerid] = CreatePlayerTextDraw(playerid, 378.000000, 178.000000, "Wits");
	PlayerTextDrawFont(playerid, cswits[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cswits[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, cswits[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cswits[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cswits[playerid], 1);
	PlayerTextDrawAlignment(playerid, cswits[playerid], 1);
	PlayerTextDrawColor(playerid, cswits[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cswits[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cswits[playerid], 50);
	PlayerTextDrawUseBox(playerid, cswits[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cswits[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cswits[playerid], 1);

	csattr = TextDrawCreate(309.000000, 118.000000, "Attributes");
	TextDrawFont(csattr, 1);
	TextDrawLetterSize(csattr, 0.204162, 1.299998);
	TextDrawTextSize(csattr, 530.000000, 42.000000);
	TextDrawSetOutline(csattr, 1);
	TextDrawSetShadow(csattr, 1);
	TextDrawAlignment(csattr, 2);
	TextDrawColor(csattr, -1962934017);
	TextDrawBackgroundColor(csattr, 255);
	TextDrawBoxColor(csattr, 140);
	TextDrawUseBox(csattr, 0);
	TextDrawSetProportional(csattr, 1);
	TextDrawSetSelectable(csattr, 0);

	csalert[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 221.000000, "Alertness");
	PlayerTextDrawFont(playerid, csalert[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csalert[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csalert[playerid], 198.000000, 5.500000);
	PlayerTextDrawSetOutline(playerid, csalert[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csalert[playerid], 1);
	PlayerTextDrawAlignment(playerid, csalert[playerid], 1);
	PlayerTextDrawColor(playerid, csalert[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csalert[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csalert[playerid], 50);
	PlayerTextDrawUseBox(playerid, csalert[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csalert[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csalert[playerid], 1);

	csath[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 231.000000, "Athletics");
	PlayerTextDrawFont(playerid, csath[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csath[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csath[playerid], 198.000000, 17.000000);//197.500000, 17.000000
	PlayerTextDrawSetOutline(playerid, csath[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csath[playerid], 1);
	PlayerTextDrawAlignment(playerid, csath[playerid], 1);
	PlayerTextDrawColor(playerid, csath[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csath[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csath[playerid], 50);
	PlayerTextDrawUseBox(playerid, csath[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csath[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csath[playerid], 1);

	csaware[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 241.000000, "Awareness");
	PlayerTextDrawFont(playerid, csaware[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csaware[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csaware[playerid], 205.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csaware[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csaware[playerid], 1);
	PlayerTextDrawAlignment(playerid, csaware[playerid], 1);
	PlayerTextDrawColor(playerid, csaware[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csaware[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csaware[playerid], 50);
	PlayerTextDrawUseBox(playerid, csaware[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csaware[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csaware[playerid], 1);

	csbrawl[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 251.000000, "Brawl");
	PlayerTextDrawFont(playerid, csbrawl[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csbrawl[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csbrawl[playerid], 200.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csbrawl[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csbrawl[playerid], 1);
	PlayerTextDrawAlignment(playerid, csbrawl[playerid], 1);
	PlayerTextDrawColor(playerid, csbrawl[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csbrawl[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csbrawl[playerid], 50);
	PlayerTextDrawUseBox(playerid, csbrawl[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csbrawl[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csbrawl[playerid], 1);

	csempathy[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 261.000000, "Empathy");
	PlayerTextDrawFont(playerid, csempathy[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csempathy[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csempathy[playerid], 200.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csempathy[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csempathy[playerid], 1);
	PlayerTextDrawAlignment(playerid, csempathy[playerid], 1);
	PlayerTextDrawColor(playerid, csempathy[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csempathy[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csempathy[playerid], 50);
	PlayerTextDrawUseBox(playerid, csempathy[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csempathy[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csempathy[playerid], 1);

	csexpression[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 271.000000, "Expression");
	PlayerTextDrawFont(playerid, csexpression[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csexpression[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csexpression[playerid], 200.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csexpression[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csexpression[playerid], 1);
	PlayerTextDrawAlignment(playerid, csexpression[playerid], 1);
	PlayerTextDrawColor(playerid, csexpression[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csexpression[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csexpression[playerid], 50);
	PlayerTextDrawUseBox(playerid, csexpression[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csexpression[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csexpression[playerid], 1);

	csintim[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 281.000000, "Intimidation");
	PlayerTextDrawFont(playerid, csintim[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csintim[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csintim[playerid], 205.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csintim[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csintim[playerid], 1);
	PlayerTextDrawAlignment(playerid, csintim[playerid], 1);
	PlayerTextDrawColor(playerid, csintim[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csintim[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csintim[playerid], 50);
	PlayerTextDrawUseBox(playerid, csintim[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csintim[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csintim[playerid], 1);

	csmental = TextDrawCreate(383.000000, 137.000000, "Mental");
	TextDrawFont(csmental, 1);
	TextDrawLetterSize(csmental, 0.174998, 0.699997);
	TextDrawTextSize(csmental, 197.500000, 17.000000);
	TextDrawSetOutline(csmental, 0);
	TextDrawSetShadow(csmental, 1);
	TextDrawAlignment(csmental, 1);
	TextDrawColor(csmental, 1296911871);
	TextDrawBackgroundColor(csmental, 255);
	TextDrawBoxColor(csmental, 50);
	TextDrawUseBox(csmental, 0);
	TextDrawSetProportional(csmental, 1);
	TextDrawSetSelectable(csmental, 0);

	csleader[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 291.000000, "Leadership");
	PlayerTextDrawFont(playerid, csleader[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csleader[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csleader[playerid], 205.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csleader[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csleader[playerid], 1);
	PlayerTextDrawAlignment(playerid, csleader[playerid], 1);
	PlayerTextDrawColor(playerid, csleader[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csleader[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csleader[playerid], 50);
	PlayerTextDrawUseBox(playerid, csleader[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csleader[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csleader[playerid], 1);

	csstreetwise[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 301.000000, "Streetwise");
	PlayerTextDrawFont(playerid, csstreetwise[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csstreetwise[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csstreetwise[playerid], 205.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csstreetwise[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csstreetwise[playerid], 1);
	PlayerTextDrawAlignment(playerid, csstreetwise[playerid], 1);
	PlayerTextDrawColor(playerid, csstreetwise[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csstreetwise[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csstreetwise[playerid], 50);
	PlayerTextDrawUseBox(playerid, csstreetwise[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csstreetwise[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csstreetwise[playerid], 1);

	cssubterfuge[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 311.000000, "Subterfuge");
	PlayerTextDrawFont(playerid, cssubterfuge[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cssubterfuge[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, cssubterfuge[playerid], 206.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cssubterfuge[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cssubterfuge[playerid], 1);
	PlayerTextDrawAlignment(playerid, cssubterfuge[playerid], 1);
	PlayerTextDrawColor(playerid, cssubterfuge[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cssubterfuge[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cssubterfuge[playerid], 50);
	PlayerTextDrawUseBox(playerid, cssubterfuge[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cssubterfuge[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cssubterfuge[playerid], 1);

	csanimal[playerid] = CreatePlayerTextDraw(playerid, 279.000000, 221.000000, "Animal Ken");
	PlayerTextDrawFont(playerid, csanimal[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csanimal[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csanimal[playerid], 325.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csanimal[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csanimal[playerid], 1);
	PlayerTextDrawAlignment(playerid, csanimal[playerid], 1);
	PlayerTextDrawColor(playerid, csanimal[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csanimal[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csanimal[playerid], 50);
	PlayerTextDrawUseBox(playerid, csanimal[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csanimal[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csanimal[playerid], 1);

	cscrafts[playerid] = CreatePlayerTextDraw(playerid, 279.000000, 230.000000, "Crafts");
	PlayerTextDrawFont(playerid, cscrafts[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cscrafts[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, cscrafts[playerid], 326.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cscrafts[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cscrafts[playerid], 1);
	PlayerTextDrawAlignment(playerid, cscrafts[playerid], 1);
	PlayerTextDrawColor(playerid, cscrafts[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cscrafts[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cscrafts[playerid], 50);
	PlayerTextDrawUseBox(playerid, cscrafts[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cscrafts[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cscrafts[playerid], 1);

	csdrive[playerid] = CreatePlayerTextDraw(playerid, 279.000000, 240.000000, "Drive");
	PlayerTextDrawFont(playerid, csdrive[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csdrive[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csdrive[playerid], 327.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csdrive[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csdrive[playerid], 1);
	PlayerTextDrawAlignment(playerid, csdrive[playerid], 1);
	PlayerTextDrawColor(playerid, csdrive[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csdrive[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csdrive[playerid], 50);
	PlayerTextDrawUseBox(playerid, csdrive[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csdrive[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csdrive[playerid], 1);

	csetiquette[playerid] = CreatePlayerTextDraw(playerid, 279.000000, 249.000000, "Etiquette");
	PlayerTextDrawFont(playerid, csetiquette[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csetiquette[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csetiquette[playerid], 328.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csetiquette[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csetiquette[playerid], 1);
	PlayerTextDrawAlignment(playerid, csetiquette[playerid], 1);
	PlayerTextDrawColor(playerid, csetiquette[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csetiquette[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csetiquette[playerid], 50);
	PlayerTextDrawUseBox(playerid, csetiquette[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csetiquette[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csetiquette[playerid], 1);

	csfirearms[playerid] = CreatePlayerTextDraw(playerid, 279.000000, 259.000000, "Firearms");
	PlayerTextDrawFont(playerid, csfirearms[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csfirearms[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csfirearms[playerid], 329.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csfirearms[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csfirearms[playerid], 1);
	PlayerTextDrawAlignment(playerid, csfirearms[playerid], 1);
	PlayerTextDrawColor(playerid, csfirearms[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csfirearms[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csfirearms[playerid], 50);
	PlayerTextDrawUseBox(playerid, csfirearms[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csfirearms[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csfirearms[playerid], 1);

	cslarceny[playerid] = CreatePlayerTextDraw(playerid, 279.000000, 268.000000, "Larceny");
	PlayerTextDrawFont(playerid, cslarceny[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cslarceny[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, cslarceny[playerid],  330.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cslarceny[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cslarceny[playerid], 1);
	PlayerTextDrawAlignment(playerid, cslarceny[playerid], 1);
	PlayerTextDrawColor(playerid, cslarceny[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cslarceny[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cslarceny[playerid], 50);
	PlayerTextDrawUseBox(playerid, cslarceny[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cslarceny[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cslarceny[playerid], 1);

	csmelee[playerid] = CreatePlayerTextDraw(playerid, 279.000000, 278.000000, "Melee");
	PlayerTextDrawFont(playerid, csmelee[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csmelee[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csmelee[playerid],  331.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csmelee[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csmelee[playerid], 1);
	PlayerTextDrawAlignment(playerid, csmelee[playerid], 1);
	PlayerTextDrawColor(playerid, csmelee[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csmelee[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csmelee[playerid], 50);
	PlayerTextDrawUseBox(playerid, csmelee[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csmelee[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csmelee[playerid], 1);

	csperformance[playerid] = CreatePlayerTextDraw(playerid, 279.000000, 288.000000, "Performance");
	PlayerTextDrawFont(playerid, csperformance[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csperformance[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csperformance[playerid], 332.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csperformance[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csperformance[playerid], 1);
	PlayerTextDrawAlignment(playerid, csperformance[playerid], 1);
	PlayerTextDrawColor(playerid, csperformance[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csperformance[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csperformance[playerid], 50);
	PlayerTextDrawUseBox(playerid, csperformance[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csperformance[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csperformance[playerid], 1);

	csstealth[playerid] = CreatePlayerTextDraw(playerid, 279.000000, 298.000000, "Stealth");
	PlayerTextDrawFont(playerid, csstealth[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csstealth[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csstealth[playerid], 333.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csstealth[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csstealth[playerid], 1);
	PlayerTextDrawAlignment(playerid, csstealth[playerid], 1);
	PlayerTextDrawColor(playerid, csstealth[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csstealth[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csstealth[playerid], 50);
	PlayerTextDrawUseBox(playerid, csstealth[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csstealth[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csstealth[playerid], 1);

	cssurvival[playerid] = CreatePlayerTextDraw(playerid, 279.000000, 308.000000, "Survival");
	PlayerTextDrawFont(playerid, cssurvival[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cssurvival[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, cssurvival[playerid], 314.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cssurvival[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cssurvival[playerid], 1);
	PlayerTextDrawAlignment(playerid, cssurvival[playerid], 1);
	PlayerTextDrawColor(playerid, cssurvival[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cssurvival[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cssurvival[playerid], 50);
	PlayerTextDrawUseBox(playerid, cssurvival[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cssurvival[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cssurvival[playerid], 1);

	csacademics[playerid] = CreatePlayerTextDraw(playerid, 379.000000, 221.000000, "Academics");
	PlayerTextDrawFont(playerid, csacademics[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csacademics[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csacademics[playerid], 419.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csacademics[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csacademics[playerid], 1);
	PlayerTextDrawAlignment(playerid, csacademics[playerid], 1);
	PlayerTextDrawColor(playerid, csacademics[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csacademics[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csacademics[playerid], 50);
	PlayerTextDrawUseBox(playerid, csacademics[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csacademics[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csacademics[playerid], 1);

	cscomputer[playerid] = CreatePlayerTextDraw(playerid, 379.000000, 231.000000, "Computer");
	PlayerTextDrawFont(playerid, cscomputer[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cscomputer[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, cscomputer[playerid], 420.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cscomputer[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cscomputer[playerid], 1);
	PlayerTextDrawAlignment(playerid, cscomputer[playerid], 1);
	PlayerTextDrawColor(playerid, cscomputer[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cscomputer[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cscomputer[playerid], 50);
	PlayerTextDrawUseBox(playerid, cscomputer[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cscomputer[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cscomputer[playerid], 1);

	csfinance[playerid] = CreatePlayerTextDraw(playerid, 379.000000, 241.000000, "Finance");
	PlayerTextDrawFont(playerid, csfinance[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csfinance[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csfinance[playerid], 410.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csfinance[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csfinance[playerid], 1);
	PlayerTextDrawAlignment(playerid, csfinance[playerid], 1);
	PlayerTextDrawColor(playerid, csfinance[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csfinance[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csfinance[playerid], 50);
	PlayerTextDrawUseBox(playerid, csfinance[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csfinance[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csfinance[playerid], 1);

	csinvestigation[playerid] = CreatePlayerTextDraw(playerid, 379.000000, 250.000000, "Investigation");
	PlayerTextDrawFont(playerid, csinvestigation[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csinvestigation[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csinvestigation[playerid], 429.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csinvestigation[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csinvestigation[playerid], 1);
	PlayerTextDrawAlignment(playerid, csinvestigation[playerid], 1);
	PlayerTextDrawColor(playerid, csinvestigation[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csinvestigation[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csinvestigation[playerid], 50);
	PlayerTextDrawUseBox(playerid, csinvestigation[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csinvestigation[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csinvestigation[playerid], 1);

	cslaw[playerid] = CreatePlayerTextDraw(playerid, 379.000000, 259.000000, "Law");
	PlayerTextDrawFont(playerid, cslaw[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cslaw[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, cslaw[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cslaw[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cslaw[playerid], 1);
	PlayerTextDrawAlignment(playerid, cslaw[playerid], 1);
	PlayerTextDrawColor(playerid, cslaw[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cslaw[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cslaw[playerid], 50);
	PlayerTextDrawUseBox(playerid, cslaw[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cslaw[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cslaw[playerid], 1);

	csmedicine[playerid] = CreatePlayerTextDraw(playerid, 379.000000, 268.000000, "Medicine");
	PlayerTextDrawFont(playerid, csmedicine[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csmedicine[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csmedicine[playerid], 414.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csmedicine[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csmedicine[playerid], 1);
	PlayerTextDrawAlignment(playerid, csmedicine[playerid], 1);
	PlayerTextDrawColor(playerid, csmedicine[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csmedicine[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csmedicine[playerid], 50);
	PlayerTextDrawUseBox(playerid, csmedicine[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csmedicine[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csmedicine[playerid], 1);

	csoccult[playerid] = CreatePlayerTextDraw(playerid, 379.000000, 277.000000, "Occult");
	PlayerTextDrawFont(playerid, csoccult[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csoccult[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csoccult[playerid], 405.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csoccult[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csoccult[playerid], 1);
	PlayerTextDrawAlignment(playerid, csoccult[playerid], 1);
	PlayerTextDrawColor(playerid, csoccult[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csoccult[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csoccult[playerid], 50);
	PlayerTextDrawUseBox(playerid, csoccult[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csoccult[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csoccult[playerid], 1);

	cspolitics[playerid] = CreatePlayerTextDraw(playerid, 379.000000, 286.000000, "Politics");
	PlayerTextDrawFont(playerid, cspolitics[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cspolitics[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, cspolitics[playerid], 407.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cspolitics[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cspolitics[playerid], 1);
	PlayerTextDrawAlignment(playerid, cspolitics[playerid], 1);
	PlayerTextDrawColor(playerid, cspolitics[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cspolitics[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cspolitics[playerid], 50);
	PlayerTextDrawUseBox(playerid, cspolitics[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cspolitics[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cspolitics[playerid], 1);

	csscience[playerid] = CreatePlayerTextDraw(playerid, 379.000000, 296.000000, "Science");
	PlayerTextDrawFont(playerid, csscience[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csscience[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, csscience[playerid], 407.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csscience[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csscience[playerid], 1);
	PlayerTextDrawAlignment(playerid, csscience[playerid], 1);
	PlayerTextDrawColor(playerid, csscience[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csscience[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csscience[playerid], 50);
	PlayerTextDrawUseBox(playerid, csscience[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csscience[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csscience[playerid], 1);

	cstechnology[playerid] = CreatePlayerTextDraw(playerid, 379.000000, 307.000000, "Technology");
	PlayerTextDrawFont(playerid, cstechnology[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cstechnology[playerid], 0.233333, 1.099997);
	PlayerTextDrawTextSize(playerid, cstechnology[playerid], 424.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cstechnology[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cstechnology[playerid], 1);
	PlayerTextDrawAlignment(playerid, cstechnology[playerid], 1);
	PlayerTextDrawColor(playerid, cstechnology[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cstechnology[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cstechnology[playerid], 50);
	PlayerTextDrawUseBox(playerid, cstechnology[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cstechnology[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cstechnology[playerid], 1);

	cshealth[playerid] = CreatePlayerTextDraw(playerid, 184.000000, 333.000000, "Health");
	PlayerTextDrawFont(playerid, cshealth[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cshealth[playerid], 0.258332, 1.549998);
	PlayerTextDrawTextSize(playerid, cshealth[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cshealth[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cshealth[playerid], 1);
	PlayerTextDrawAlignment(playerid, cshealth[playerid], 2);
	PlayerTextDrawColor(playerid, cshealth[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cshealth[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cshealth[playerid], 50);
	PlayerTextDrawUseBox(playerid, cshealth[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cshealth[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cshealth[playerid], 0);

	cswillpower[playerid] = CreatePlayerTextDraw(playerid, 302.000000, 332.000000, "Willpower");
	PlayerTextDrawFont(playerid, cswillpower[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cswillpower[playerid], 0.258332, 1.549998);
	PlayerTextDrawTextSize(playerid, cswillpower[playerid], 490.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cswillpower[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cswillpower[playerid], 1);
	PlayerTextDrawAlignment(playerid, cswillpower[playerid], 2);
	PlayerTextDrawColor(playerid, cswillpower[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cswillpower[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cswillpower[playerid], 50);
	PlayerTextDrawUseBox(playerid, cswillpower[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cswillpower[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cswillpower[playerid], 1);

	cshumanity[playerid] = CreatePlayerTextDraw(playerid, 397.000000, 332.000000, "Humanity");
	PlayerTextDrawFont(playerid, cshumanity[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cshumanity[playerid], 0.258332, 1.549998);
	PlayerTextDrawTextSize(playerid, cshumanity[playerid], 520.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cshumanity[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cshumanity[playerid], 1);
	PlayerTextDrawAlignment(playerid, cshumanity[playerid], 2);
	PlayerTextDrawColor(playerid, cshumanity[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cshumanity[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cshumanity[playerid], 50);
	PlayerTextDrawUseBox(playerid, cshumanity[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cshumanity[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cshumanity[playerid], 1);

	csdexrate[playerid] = CreatePlayerTextDraw(playerid, 214.000000, 161.000000, "5/5");
	PlayerTextDrawFont(playerid, csdexrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csdexrate[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csdexrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csdexrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csdexrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csdexrate[playerid], 1);
	PlayerTextDrawColor(playerid, csdexrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csdexrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csdexrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csdexrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csdexrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csdexrate[playerid], 0);

	csdisciplines = TextDrawCreate(309.000000, 380.000000, "Disciplines");
	TextDrawFont(csdisciplines, 1);
	TextDrawLetterSize(csdisciplines, 0.204162, 1.299998);
	TextDrawTextSize(csdisciplines, 530.000000, 42.000000);
	TextDrawSetOutline(csdisciplines, 1);
	TextDrawSetShadow(csdisciplines, 1);
	TextDrawAlignment(csdisciplines, 2);
	TextDrawColor(csdisciplines, -1962934017);
	TextDrawBackgroundColor(csdisciplines, 255);
	TextDrawBoxColor(csdisciplines, 140);
	TextDrawUseBox(csdisciplines, 0);
	TextDrawSetProportional(csdisciplines, 1);
	TextDrawSetSelectable(csdisciplines, 0);

	csdiscipline1[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 395.000000, "Discipline Slot");
	PlayerTextDrawFont(playerid, csdiscipline1[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csdiscipline1[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csdiscipline1[playerid], 256.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csdiscipline1[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csdiscipline1[playerid], 1);
	PlayerTextDrawAlignment(playerid, csdiscipline1[playerid], 1);
	PlayerTextDrawColor(playerid, csdiscipline1[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csdiscipline1[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csdiscipline1[playerid], 50);
	PlayerTextDrawUseBox(playerid, csdiscipline1[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csdiscipline1[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csdiscipline1[playerid], 1);

	csdiscipline2[playerid] = CreatePlayerTextDraw(playerid, 159.000000, 413.000000, "Discipline Slot");
	PlayerTextDrawFont(playerid, csdiscipline2[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csdiscipline2[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csdiscipline2[playerid], 255.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csdiscipline2[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csdiscipline2[playerid], 1);
	PlayerTextDrawAlignment(playerid, csdiscipline2[playerid], 1);
	PlayerTextDrawColor(playerid, csdiscipline2[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csdiscipline2[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csdiscipline2[playerid], 50);
	PlayerTextDrawUseBox(playerid, csdiscipline2[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csdiscipline2[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csdiscipline2[playerid], 1);

	csdiscipline3[playerid] = CreatePlayerTextDraw(playerid, 273.000000, 395.000000, "Discipline Slot");
	PlayerTextDrawFont(playerid, csdiscipline3[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csdiscipline3[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csdiscipline3[playerid], 362.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csdiscipline3[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csdiscipline3[playerid], 1);
	PlayerTextDrawAlignment(playerid, csdiscipline3[playerid], 1);
	PlayerTextDrawColor(playerid, csdiscipline3[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csdiscipline3[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csdiscipline3[playerid], 50);
	PlayerTextDrawUseBox(playerid, csdiscipline3[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csdiscipline3[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csdiscipline3[playerid], 1);

	csdiscipline4[playerid] = CreatePlayerTextDraw(playerid, 273.000000, 413.000000, "Discipline Slot");
	PlayerTextDrawFont(playerid, csdiscipline4[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csdiscipline4[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csdiscipline4[playerid], 363.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csdiscipline4[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csdiscipline4[playerid], 1);
	PlayerTextDrawAlignment(playerid, csdiscipline4[playerid], 1);
	PlayerTextDrawColor(playerid, csdiscipline4[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csdiscipline4[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csdiscipline4[playerid], 50);
	PlayerTextDrawUseBox(playerid, csdiscipline4[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csdiscipline4[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csdiscipline4[playerid], 1);

	csdiscipline5[playerid] = CreatePlayerTextDraw(playerid, 381.000000, 395.000000, "Discipline Slot");
	PlayerTextDrawFont(playerid, csdiscipline5[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csdiscipline5[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csdiscipline5[playerid], 463.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csdiscipline5[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csdiscipline5[playerid], 1);
	PlayerTextDrawAlignment(playerid, csdiscipline5[playerid], 1);
	PlayerTextDrawColor(playerid, csdiscipline5[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csdiscipline5[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csdiscipline5[playerid], 50);
	PlayerTextDrawUseBox(playerid, csdiscipline5[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csdiscipline5[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csdiscipline5[playerid], 1);

	csdiscipline6[playerid] = CreatePlayerTextDraw(playerid, 382.000000, 413.000000, "Discipline Slot");
	PlayerTextDrawFont(playerid, csdiscipline6[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csdiscipline6[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csdiscipline6[playerid], 465.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csdiscipline6[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csdiscipline6[playerid], 1);
	PlayerTextDrawAlignment(playerid, csdiscipline6[playerid], 1);
	PlayerTextDrawColor(playerid, csdiscipline6[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csdiscipline6[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csdiscipline6[playerid], 50);
	PlayerTextDrawUseBox(playerid, csdiscipline6[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csdiscipline6[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csdiscipline6[playerid], 1);

	csstrrate[playerid] = CreatePlayerTextDraw(playerid, 214.000000, 143.000000, "5/5");
	PlayerTextDrawFont(playerid, csstrrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csstrrate[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csstrrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csstrrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csstrrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csstrrate[playerid], 1);
	PlayerTextDrawColor(playerid, csstrrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csstrrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csstrrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csstrrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csstrrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csstrrate[playerid], 0);

	csstaminarate[playerid] = CreatePlayerTextDraw(playerid, 214.000000, 179.000000, "5/5");
	PlayerTextDrawFont(playerid, csstaminarate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csstaminarate[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csstaminarate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csstaminarate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csstaminarate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csstaminarate[playerid], 1);
	PlayerTextDrawColor(playerid, csstaminarate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csstaminarate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csstaminarate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csstaminarate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csstaminarate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csstaminarate[playerid], 0);

	cscharismarate[playerid] = CreatePlayerTextDraw(playerid, 328.000000, 146.000000, "5/5");
	PlayerTextDrawFont(playerid, cscharismarate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cscharismarate[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, cscharismarate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cscharismarate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cscharismarate[playerid], 1);
	PlayerTextDrawAlignment(playerid, cscharismarate[playerid], 1);
	PlayerTextDrawColor(playerid, cscharismarate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cscharismarate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cscharismarate[playerid], 50);
	PlayerTextDrawUseBox(playerid, cscharismarate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cscharismarate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cscharismarate[playerid], 0);

	csmaniprate[playerid] = CreatePlayerTextDraw(playerid, 329.000000, 164.000000, "5/5");
	PlayerTextDrawFont(playerid, csmaniprate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csmaniprate[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csmaniprate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csmaniprate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csmaniprate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csmaniprate[playerid], 1);
	PlayerTextDrawColor(playerid, csmaniprate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csmaniprate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csmaniprate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csmaniprate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csmaniprate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csmaniprate[playerid], 0);

	csapprate[playerid] = CreatePlayerTextDraw(playerid, 329.000000, 181.000000, "5/5");
	PlayerTextDrawFont(playerid, csapprate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csapprate[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csapprate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csapprate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csapprate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csapprate[playerid], 1);
	PlayerTextDrawColor(playerid, csapprate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csapprate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csapprate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csapprate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csapprate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csapprate[playerid], 0);

	cspercrate[playerid] = CreatePlayerTextDraw(playerid, 429.000000, 144.000000, "5/5");
	PlayerTextDrawFont(playerid, cspercrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cspercrate[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, cspercrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cspercrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cspercrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, cspercrate[playerid], 1);
	PlayerTextDrawColor(playerid, cspercrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cspercrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cspercrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, cspercrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cspercrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cspercrate[playerid], 0);

	csintelrate[playerid] = CreatePlayerTextDraw(playerid, 429.000000, 161.000000, "5/5");
	PlayerTextDrawFont(playerid, csintelrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csintelrate[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, csintelrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csintelrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csintelrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csintelrate[playerid], 1);
	PlayerTextDrawColor(playerid, csintelrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csintelrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csintelrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csintelrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csintelrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csintelrate[playerid], 0);

	cswitsrate[playerid] = CreatePlayerTextDraw(playerid, 429.000000, 177.000000, "5/5");
	PlayerTextDrawFont(playerid, cswitsrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cswitsrate[playerid], 0.233333, 1.349997);
	PlayerTextDrawTextSize(playerid, cswitsrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cswitsrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cswitsrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, cswitsrate[playerid], 1);
	PlayerTextDrawColor(playerid, cswitsrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cswitsrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cswitsrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, cswitsrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cswitsrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cswitsrate[playerid], 0);

	csalertrate[playerid] = CreatePlayerTextDraw(playerid, 213.000000, 222.000000, "5/5");
	PlayerTextDrawFont(playerid, csalertrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csalertrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csalertrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csalertrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csalertrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csalertrate[playerid], 1);
	PlayerTextDrawColor(playerid, csalertrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csalertrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csalertrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csalertrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csalertrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csalertrate[playerid], 0);

	csathrate[playerid] = CreatePlayerTextDraw(playerid, 213.000000, 232.000000, "5/5");
	PlayerTextDrawFont(playerid, csathrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csathrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csathrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csathrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csathrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csathrate[playerid], 1);
	PlayerTextDrawColor(playerid, csathrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csathrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csathrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csathrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csathrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csathrate[playerid], 0);

	csawarerate[playerid] = CreatePlayerTextDraw(playerid, 212.000000, 242.000000, "5/5");
	PlayerTextDrawFont(playerid, csawarerate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csawarerate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csawarerate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csawarerate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csawarerate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csawarerate[playerid], 1);
	PlayerTextDrawColor(playerid, csawarerate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csawarerate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csawarerate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csawarerate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csawarerate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csawarerate[playerid], 0);

	csbrawlrate[playerid] = CreatePlayerTextDraw(playerid, 212.000000, 252.000000, "5/5");
	PlayerTextDrawFont(playerid, csbrawlrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csbrawlrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csbrawlrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csbrawlrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csbrawlrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csbrawlrate[playerid], 1);
	PlayerTextDrawColor(playerid, csbrawlrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csbrawlrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csbrawlrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csbrawlrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csbrawlrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csbrawlrate[playerid], 0);

	csempathyrate[playerid] = CreatePlayerTextDraw(playerid, 212.000000, 262.000000, "5/5");
	PlayerTextDrawFont(playerid, csempathyrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csempathyrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csempathyrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csempathyrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csempathyrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csempathyrate[playerid], 1);
	PlayerTextDrawColor(playerid, csempathyrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csempathyrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csempathyrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csempathyrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csempathyrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csempathyrate[playerid], 0);

	csexpressionrate[playerid] = CreatePlayerTextDraw(playerid, 212.000000, 272.000000, "5/5");
	PlayerTextDrawFont(playerid, csexpressionrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csexpressionrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csexpressionrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csexpressionrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csexpressionrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csexpressionrate[playerid], 1);
	PlayerTextDrawColor(playerid, csexpressionrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csexpressionrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csexpressionrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csexpressionrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csexpressionrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csexpressionrate[playerid], 0);

	csintimrate[playerid] = CreatePlayerTextDraw(playerid, 212.000000, 282.000000, "5/5");
	PlayerTextDrawFont(playerid, csintimrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csintimrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csintimrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csintimrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csintimrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csintimrate[playerid], 1);
	PlayerTextDrawColor(playerid, csintimrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csintimrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csintimrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csintimrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csintimrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csintimrate[playerid], 0);

	csleadershiprate[playerid] = CreatePlayerTextDraw(playerid, 212.000000, 293.000000, "5/5");
	PlayerTextDrawFont(playerid, csleadershiprate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csleadershiprate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csleadershiprate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csleadershiprate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csleadershiprate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csleadershiprate[playerid], 1);
	PlayerTextDrawColor(playerid, csleadershiprate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csleadershiprate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csleadershiprate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csleadershiprate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csleadershiprate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csleadershiprate[playerid], 0);

	csstreetwiserate[playerid] = CreatePlayerTextDraw(playerid, 212.000000, 303.000000, "5/5");
	PlayerTextDrawFont(playerid, csstreetwiserate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csstreetwiserate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csstreetwiserate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csstreetwiserate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csstreetwiserate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csstreetwiserate[playerid], 1);
	PlayerTextDrawColor(playerid, csstreetwiserate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csstreetwiserate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csstreetwiserate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csstreetwiserate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csstreetwiserate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csstreetwiserate[playerid], 0);

	cssubterfugerate[playerid] = CreatePlayerTextDraw(playerid, 212.000000, 314.000000, "5/5");
	PlayerTextDrawFont(playerid, cssubterfugerate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cssubterfugerate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, cssubterfugerate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cssubterfugerate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cssubterfugerate[playerid], 1);
	PlayerTextDrawAlignment(playerid, cssubterfugerate[playerid], 1);
	PlayerTextDrawColor(playerid, cssubterfugerate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cssubterfugerate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cssubterfugerate[playerid], 50);
	PlayerTextDrawUseBox(playerid, cssubterfugerate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cssubterfugerate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cssubterfugerate[playerid], 0);

	csanimalrate[playerid] = CreatePlayerTextDraw(playerid, 333.000000, 222.000000, "5/5");
	PlayerTextDrawFont(playerid, csanimalrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csanimalrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csanimalrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csanimalrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csanimalrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csanimalrate[playerid], 1);
	PlayerTextDrawColor(playerid, csanimalrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csanimalrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csanimalrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csanimalrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csanimalrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csanimalrate[playerid], 0);

	cscraftsrate[playerid] = CreatePlayerTextDraw(playerid, 333.000000, 232.000000, "5/5");
	PlayerTextDrawFont(playerid, cscraftsrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cscraftsrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, cscraftsrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cscraftsrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cscraftsrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, cscraftsrate[playerid], 1);
	PlayerTextDrawColor(playerid, cscraftsrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cscraftsrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cscraftsrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, cscraftsrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cscraftsrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cscraftsrate[playerid], 0);

	csdriverate[playerid] = CreatePlayerTextDraw(playerid, 333.000000, 242.000000, "5/5");
	PlayerTextDrawFont(playerid, csdriverate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csdriverate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csdriverate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csdriverate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csdriverate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csdriverate[playerid], 1);
	PlayerTextDrawColor(playerid, csdriverate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csdriverate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csdriverate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csdriverate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csdriverate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csdriverate[playerid], 0);

	csetiquetterate[playerid] = CreatePlayerTextDraw(playerid, 333.000000, 252.000000, "5/5");
	PlayerTextDrawFont(playerid, csetiquetterate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csetiquetterate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csetiquetterate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csetiquetterate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csetiquetterate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csetiquetterate[playerid], 1);
	PlayerTextDrawColor(playerid, csetiquetterate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csetiquetterate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csetiquetterate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csetiquetterate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csetiquetterate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csetiquetterate[playerid], 0);

	csfirearmsrate[playerid] = CreatePlayerTextDraw(playerid, 333.000000, 261.000000, "5/5");
	PlayerTextDrawFont(playerid, csfirearmsrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csfirearmsrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csfirearmsrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csfirearmsrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csfirearmsrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csfirearmsrate[playerid], 1);
	PlayerTextDrawColor(playerid, csfirearmsrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csfirearmsrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csfirearmsrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csfirearmsrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csfirearmsrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csfirearmsrate[playerid], 0);

	cslarcenyrate[playerid] = CreatePlayerTextDraw(playerid, 333.000000, 271.000000, "5/5");
	PlayerTextDrawFont(playerid, cslarcenyrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cslarcenyrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, cslarcenyrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cslarcenyrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cslarcenyrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, cslarcenyrate[playerid], 1);
	PlayerTextDrawColor(playerid, cslarcenyrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cslarcenyrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cslarcenyrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, cslarcenyrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cslarcenyrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cslarcenyrate[playerid], 0);

	csmeleerate[playerid] = CreatePlayerTextDraw(playerid, 333.000000, 280.000000, "5/5");
	PlayerTextDrawFont(playerid, csmeleerate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csmeleerate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csmeleerate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csmeleerate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csmeleerate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csmeleerate[playerid], 1);
	PlayerTextDrawColor(playerid, csmeleerate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csmeleerate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csmeleerate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csmeleerate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csmeleerate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csmeleerate[playerid], 0);

	csperformancerate[playerid] = CreatePlayerTextDraw(playerid, 333.000000, 290.000000, "5/5");
	PlayerTextDrawFont(playerid, csperformancerate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csperformancerate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csperformancerate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csperformancerate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csperformancerate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csperformancerate[playerid], 1);
	PlayerTextDrawColor(playerid, csperformancerate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csperformancerate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csperformancerate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csperformancerate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csperformancerate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csperformancerate[playerid], 0);

	csstealthrate[playerid] = CreatePlayerTextDraw(playerid, 333.000000, 301.000000, "5/5");
	PlayerTextDrawFont(playerid, csstealthrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csstealthrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csstealthrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csstealthrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csstealthrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csstealthrate[playerid], 1);
	PlayerTextDrawColor(playerid, csstealthrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csstealthrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csstealthrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csstealthrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csstealthrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csstealthrate[playerid], 0);

	cssurvivalrate[playerid] = CreatePlayerTextDraw(playerid, 333.000000, 311.000000, "5/5");
	PlayerTextDrawFont(playerid, cssurvivalrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cssurvivalrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, cssurvivalrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cssurvivalrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cssurvivalrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, cssurvivalrate[playerid], 1);
	PlayerTextDrawColor(playerid, cssurvivalrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cssurvivalrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cssurvivalrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, cssurvivalrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cssurvivalrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cssurvivalrate[playerid], 0);

	csacademicsrate[playerid] = CreatePlayerTextDraw(playerid, 432.000000, 223.000000, "5/5");
	PlayerTextDrawFont(playerid, csacademicsrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csacademicsrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csacademicsrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csacademicsrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csacademicsrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csacademicsrate[playerid], 1);
	PlayerTextDrawColor(playerid, csacademicsrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csacademicsrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csacademicsrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csacademicsrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csacademicsrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csacademicsrate[playerid], 0);

	cscomputerrate[playerid] = CreatePlayerTextDraw(playerid, 432.000000, 233.000000, "5/5");
	PlayerTextDrawFont(playerid, cscomputerrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cscomputerrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, cscomputerrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cscomputerrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cscomputerrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, cscomputerrate[playerid], 1);
	PlayerTextDrawColor(playerid, cscomputerrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cscomputerrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cscomputerrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, cscomputerrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cscomputerrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cscomputerrate[playerid], 0);

	csfinancerate[playerid] = CreatePlayerTextDraw(playerid, 432.000000, 243.000000, "5/5");
	PlayerTextDrawFont(playerid, csfinancerate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csfinancerate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csfinancerate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csfinancerate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csfinancerate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csfinancerate[playerid], 1);
	PlayerTextDrawColor(playerid, csfinancerate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csfinancerate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csfinancerate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csfinancerate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csfinancerate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csfinancerate[playerid], 0);

	csinvestigationrate[playerid] = CreatePlayerTextDraw(playerid, 432.000000, 253.000000, "5/5");
	PlayerTextDrawFont(playerid, csinvestigationrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csinvestigationrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csinvestigationrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csinvestigationrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csinvestigationrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csinvestigationrate[playerid], 1);
	PlayerTextDrawColor(playerid, csinvestigationrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csinvestigationrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csinvestigationrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csinvestigationrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csinvestigationrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csinvestigationrate[playerid], 1);

	cslawrate[playerid] = CreatePlayerTextDraw(playerid, 432.000000, 262.000000, "5/5");
	PlayerTextDrawFont(playerid, cslawrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cslawrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, cslawrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cslawrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cslawrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, cslawrate[playerid], 1);
	PlayerTextDrawColor(playerid, cslawrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cslawrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cslawrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, cslawrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cslawrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cslawrate[playerid], 0);

	csmedicinerate[playerid] = CreatePlayerTextDraw(playerid, 432.000000, 271.000000, "5/5");
	PlayerTextDrawFont(playerid, csmedicinerate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csmedicinerate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csmedicinerate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csmedicinerate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csmedicinerate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csmedicinerate[playerid], 1);
	PlayerTextDrawColor(playerid, csmedicinerate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csmedicinerate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csmedicinerate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csmedicinerate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csmedicinerate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csmedicinerate[playerid], 0);

	csoccultrate[playerid] = CreatePlayerTextDraw(playerid, 432.000000, 281.000000, "5/5");
	PlayerTextDrawFont(playerid, csoccultrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, csoccultrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, csoccultrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, csoccultrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, csoccultrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, csoccultrate[playerid], 1);
	PlayerTextDrawColor(playerid, csoccultrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, csoccultrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, csoccultrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, csoccultrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, csoccultrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, csoccultrate[playerid], 0);

	cspoliticsrate[playerid] = CreatePlayerTextDraw(playerid, 432.000000, 290.000000, "5/5");
	PlayerTextDrawFont(playerid, cspoliticsrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cspoliticsrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, cspoliticsrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cspoliticsrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cspoliticsrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, cspoliticsrate[playerid], 1);
	PlayerTextDrawColor(playerid, cspoliticsrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cspoliticsrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cspoliticsrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, cspoliticsrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cspoliticsrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cspoliticsrate[playerid], 0);

	cssciencerate[playerid] = CreatePlayerTextDraw(playerid, 432.000000, 300.000000, "5/5");
	PlayerTextDrawFont(playerid, cssciencerate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cssciencerate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, cssciencerate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cssciencerate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cssciencerate[playerid], 1);
	PlayerTextDrawAlignment(playerid, cssciencerate[playerid], 1);
	PlayerTextDrawColor(playerid, cssciencerate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cssciencerate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cssciencerate[playerid], 50);
	PlayerTextDrawUseBox(playerid, cssciencerate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cssciencerate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cssciencerate[playerid], 0);

	cstechnologyrate[playerid] = CreatePlayerTextDraw(playerid, 432.000000, 310.000000, "5/5");
	PlayerTextDrawFont(playerid, cstechnologyrate[playerid], 1);
	PlayerTextDrawLetterSize(playerid, cstechnologyrate[playerid], 0.229166, 1.099997);
	PlayerTextDrawTextSize(playerid, cstechnologyrate[playerid], 197.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, cstechnologyrate[playerid], 0);
	PlayerTextDrawSetShadow(playerid, cstechnologyrate[playerid], 1);
	PlayerTextDrawAlignment(playerid, cstechnologyrate[playerid], 1);
	PlayerTextDrawColor(playerid, cstechnologyrate[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, cstechnologyrate[playerid], 255);
	PlayerTextDrawBoxColor(playerid, cstechnologyrate[playerid], 50);
	PlayerTextDrawUseBox(playerid, cstechnologyrate[playerid], 0);
	PlayerTextDrawSetProportional(playerid, cstechnologyrate[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, cstechnologyrate[playerid], 0);
	//TextDrawShowForPlayer(playerid, Servertag);
	//TextDrawShowForPlayer(playerid, weathertext);
	//TextDrawShowForPlayer(playerid, temperaturetext);*/
	/*---------------------------------------------------------------*/
	/*InventoryBox_Deprecated[0][playerid] = CreatePlayerTextDraw(playerid, 493.000000, 214.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, InventoryBox_Deprecated[0][playerid], 5);
	PlayerTextDrawLetterSize(playerid, InventoryBox_Deprecated[0][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, InventoryBox_Deprecated[0][playerid], 64.000000, 46.000000);
	PlayerTextDrawSetOutline(playerid, InventoryBox_Deprecated[0][playerid], 0);
	PlayerTextDrawSetShadow(playerid, InventoryBox_Deprecated[0][playerid], 0);
	PlayerTextDrawAlignment(playerid, InventoryBox_Deprecated[0][playerid], 1);
	PlayerTextDrawColor(playerid, InventoryBox_Deprecated[0][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryBox_Deprecated[0][playerid], 125);
	PlayerTextDrawBoxColor(playerid, InventoryBox_Deprecated[0][playerid], 255);
	PlayerTextDrawUseBox(playerid, InventoryBox_Deprecated[0][playerid], 0);
	PlayerTextDrawSetProportional(playerid, InventoryBox_Deprecated[0][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryBox_Deprecated[0][playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, InventoryBox_Deprecated[0][playerid], 0);
	PlayerTextDrawSetPreviewRot(playerid, InventoryBox_Deprecated[0][playerid], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, InventoryBox_Deprecated[0][playerid], 1, 1);

	InventoryBox_Deprecated[1][playerid] = CreatePlayerTextDraw(playerid, 564.000000, 214.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, InventoryBox_Deprecated[1][playerid], 5);
	PlayerTextDrawLetterSize(playerid, InventoryBox_Deprecated[1][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, InventoryBox_Deprecated[1][playerid], 64.000000, 46.000000);
	PlayerTextDrawSetOutline(playerid, InventoryBox_Deprecated[1][playerid], 0);
	PlayerTextDrawSetShadow(playerid, InventoryBox_Deprecated[1][playerid], 0);
	PlayerTextDrawAlignment(playerid, InventoryBox_Deprecated[1][playerid], 1);
	PlayerTextDrawColor(playerid, InventoryBox_Deprecated[1][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryBox_Deprecated[1][playerid], 125);
	PlayerTextDrawBoxColor(playerid, InventoryBox_Deprecated[1][playerid], 255);
	PlayerTextDrawUseBox(playerid, InventoryBox_Deprecated[1][playerid], 0);
	PlayerTextDrawSetProportional(playerid, InventoryBox_Deprecated[1][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryBox_Deprecated[1][playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, InventoryBox_Deprecated[1][playerid], 0);
	PlayerTextDrawSetPreviewRot(playerid, InventoryBox_Deprecated[1][playerid], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, InventoryBox_Deprecated[1][playerid], 1, 1);

	InventoryBox_Deprecated[2][playerid] = CreatePlayerTextDraw(playerid, 493.000000, 265.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, InventoryBox_Deprecated[2][playerid], 5);
	PlayerTextDrawLetterSize(playerid, InventoryBox_Deprecated[2][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, InventoryBox_Deprecated[2][playerid], 64.000000, 46.000000);
	PlayerTextDrawSetOutline(playerid, InventoryBox_Deprecated[2][playerid], 0);
	PlayerTextDrawSetShadow(playerid, InventoryBox_Deprecated[2][playerid], 0);
	PlayerTextDrawAlignment(playerid, InventoryBox_Deprecated[2][playerid], 1);
	PlayerTextDrawColor(playerid, InventoryBox_Deprecated[2][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryBox_Deprecated[2][playerid], 125);
	PlayerTextDrawBoxColor(playerid, InventoryBox_Deprecated[2][playerid], 255);
	PlayerTextDrawUseBox(playerid, InventoryBox_Deprecated[2][playerid], 0);
	PlayerTextDrawSetProportional(playerid, InventoryBox_Deprecated[2][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryBox_Deprecated[2][playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, InventoryBox_Deprecated[2][playerid], 0);
	PlayerTextDrawSetPreviewRot(playerid, InventoryBox_Deprecated[2][playerid], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, InventoryBox_Deprecated[2][playerid], 1, 1);

	InventoryBox_Deprecated[3][playerid] = CreatePlayerTextDraw(playerid, 564.000000, 265.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, InventoryBox_Deprecated[3][playerid], 5);
	PlayerTextDrawLetterSize(playerid, InventoryBox_Deprecated[3][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, InventoryBox_Deprecated[3][playerid], 64.000000, 46.000000);
	PlayerTextDrawSetOutline(playerid, InventoryBox_Deprecated[3][playerid], 0);
	PlayerTextDrawSetShadow(playerid, InventoryBox_Deprecated[3][playerid], 0);
	PlayerTextDrawAlignment(playerid, InventoryBox_Deprecated[3][playerid], 1);
	PlayerTextDrawColor(playerid, InventoryBox_Deprecated[3][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryBox_Deprecated[3][playerid], 125);
	PlayerTextDrawBoxColor(playerid, InventoryBox_Deprecated[3][playerid], 255);
	PlayerTextDrawUseBox(playerid, InventoryBox_Deprecated[3][playerid], 0);
	PlayerTextDrawSetProportional(playerid, InventoryBox_Deprecated[3][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryBox_Deprecated[3][playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, InventoryBox_Deprecated[3][playerid], 0);
	PlayerTextDrawSetPreviewRot(playerid, InventoryBox_Deprecated[3][playerid], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, InventoryBox_Deprecated[3][playerid], 1, 1);

	InventoryBox_Deprecated[4][playerid] = CreatePlayerTextDraw(playerid, 493.000000, 316.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, InventoryBox_Deprecated[4][playerid], 5);
	PlayerTextDrawLetterSize(playerid, InventoryBox_Deprecated[4][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, InventoryBox_Deprecated[4][playerid], 64.000000, 46.000000);
	PlayerTextDrawSetOutline(playerid, InventoryBox_Deprecated[4][playerid], 0);
	PlayerTextDrawSetShadow(playerid, InventoryBox_Deprecated[4][playerid], 0);
	PlayerTextDrawAlignment(playerid, InventoryBox_Deprecated[4][playerid], 1);
	PlayerTextDrawColor(playerid, InventoryBox_Deprecated[4][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryBox_Deprecated[4][playerid], 125);
	PlayerTextDrawBoxColor(playerid, InventoryBox_Deprecated[4][playerid], 255);
	PlayerTextDrawUseBox(playerid, InventoryBox_Deprecated[4][playerid], 0);
	PlayerTextDrawSetProportional(playerid, InventoryBox_Deprecated[4][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryBox_Deprecated[4][playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, InventoryBox_Deprecated[4][playerid], 0);
	PlayerTextDrawSetPreviewRot(playerid, InventoryBox_Deprecated[4][playerid], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, InventoryBox_Deprecated[4][playerid], 1, 1);

	InventoryBox_Deprecated[5][playerid] = CreatePlayerTextDraw(playerid, 565.000000, 316.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, InventoryBox_Deprecated[5][playerid], 5);
	PlayerTextDrawLetterSize(playerid, InventoryBox_Deprecated[5][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, InventoryBox_Deprecated[5][playerid], 64.000000, 46.000000);
	PlayerTextDrawSetOutline(playerid, InventoryBox_Deprecated[5][playerid], 0);
	PlayerTextDrawSetShadow(playerid, InventoryBox_Deprecated[5][playerid], 0);
	PlayerTextDrawAlignment(playerid, InventoryBox_Deprecated[5][playerid], 1);
	PlayerTextDrawColor(playerid, InventoryBox_Deprecated[5][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryBox_Deprecated[5][playerid], 125);
	PlayerTextDrawBoxColor(playerid, InventoryBox_Deprecated[5][playerid], 255);
	PlayerTextDrawUseBox(playerid, InventoryBox_Deprecated[5][playerid], 0);
	PlayerTextDrawSetProportional(playerid, InventoryBox_Deprecated[5][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryBox_Deprecated[5][playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, InventoryBox_Deprecated[5][playerid], 0);
	PlayerTextDrawSetPreviewRot(playerid, InventoryBox_Deprecated[5][playerid], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, InventoryBox_Deprecated[5][playerid], 1, 1);

	InventoryBox_Deprecated[6][playerid] = CreatePlayerTextDraw(playerid, 493.000000, 367.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, InventoryBox_Deprecated[6][playerid], 5);
	PlayerTextDrawLetterSize(playerid, InventoryBox_Deprecated[6][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, InventoryBox_Deprecated[6][playerid], 64.000000, 46.000000);
	PlayerTextDrawSetOutline(playerid, InventoryBox_Deprecated[6][playerid], 0);
	PlayerTextDrawSetShadow(playerid, InventoryBox_Deprecated[6][playerid], 0);
	PlayerTextDrawAlignment(playerid, InventoryBox_Deprecated[6][playerid], 1);
	PlayerTextDrawColor(playerid, InventoryBox_Deprecated[6][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryBox_Deprecated[6][playerid], 125);
	PlayerTextDrawBoxColor(playerid, InventoryBox_Deprecated[6][playerid], 255);
	PlayerTextDrawUseBox(playerid, InventoryBox_Deprecated[6][playerid], 0);
	PlayerTextDrawSetProportional(playerid, InventoryBox_Deprecated[6][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryBox_Deprecated[6][playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, InventoryBox_Deprecated[6][playerid], 0);
	PlayerTextDrawSetPreviewRot(playerid, InventoryBox_Deprecated[6][playerid], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, InventoryBox_Deprecated[6][playerid], 1, 1);

	InventoryBox_Deprecated[7][playerid] = CreatePlayerTextDraw(playerid, 565.000000, 367.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, InventoryBox_Deprecated[7][playerid], 5);
	PlayerTextDrawLetterSize(playerid, InventoryBox_Deprecated[7][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, InventoryBox_Deprecated[7][playerid], 64.000000, 46.000000);
	PlayerTextDrawSetOutline(playerid, InventoryBox_Deprecated[7][playerid], 0);
	PlayerTextDrawSetShadow(playerid, InventoryBox_Deprecated[7][playerid], 0);
	PlayerTextDrawAlignment(playerid, InventoryBox_Deprecated[7][playerid], 1);
	PlayerTextDrawColor(playerid, InventoryBox_Deprecated[7][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryBox_Deprecated[7][playerid], 125);
	PlayerTextDrawBoxColor(playerid, InventoryBox_Deprecated[7][playerid], 255);
	PlayerTextDrawUseBox(playerid, InventoryBox_Deprecated[7][playerid], 0);
	PlayerTextDrawSetProportional(playerid, InventoryBox_Deprecated[7][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryBox_Deprecated[7][playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, InventoryBox_Deprecated[7][playerid], 0);
	PlayerTextDrawSetPreviewRot(playerid, InventoryBox_Deprecated[7][playerid], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, InventoryBox_Deprecated[7][playerid], 1, 1);*/

	/*---------------------------------------------------------------*/
	ApplyAnimation(playerid, "WUZI", "null", 0.0, 0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "PAULNMAC", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KNIFE", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BD_FIRE", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWAT", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_AMBIENT", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PED", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ON_LOOKERS", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWEET", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BEACH", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARK", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KISSING", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GANGS", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RAPPING", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POLICE", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SMOKING", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GYMNASIUM", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SUNBATHE", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWORD", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_B", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_C", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_D", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRENADE", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MISC", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "STRIP", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIOT", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CLOTHES", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHANDS", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BSKTBALL", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAVEYARD", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SILENCED", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUDDY", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "UZI", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COLT45", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PYTHON", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TEC", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIFLE", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CARRY", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MEDIC", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DEALER", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAMERA", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DODGE", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "goggles", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "benchpress", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BF_injection", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DILDO", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Attractors", "null", 0.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRIB", "null", 0.0, 0, 0, 0, 0, 0, 0);
	//ApplyAnimation(playerid, "CAMERA", "null", 0.0, 0, 0, 0, 0, 0, 0);
	/*---------------------------------------------------------------*/
	// Jefferson Addons RemoveBuilding
	RemoveBuildingForPlayer(playerid, 3593, 2413.330, -1399.609, 23.687, 0.250);
	RemoveBuildingForPlayer(playerid, 3593, 2407.310, -1418.359, 23.687, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 2413.580, -1409.859, 22.546, 0.250);
	// Jefferson Station RemoveBuilding
	RemoveBuildingForPlayer(playerid, 17543, 2322.280, -1355.199, 25.406, 0.250);
	RemoveBuildingForPlayer(playerid, 17965, 2322.280, -1355.199, 25.406, 0.250);
	RemoveBuildingForPlayer(playerid, 17542, 2347.919, -1364.290, 27.156, 0.250);
	RemoveBuildingForPlayer(playerid, 17966, 2347.919, -1364.290, 27.156, 0.250);
	RemoveBuildingForPlayer(playerid, 955, 2352.179, -1357.160, 23.773, 0.250);
	// --
	RemoveBuildingForPlayer(playerid, 6257, 801.148, -1618.489, 19.804, 0.250);
	RemoveBuildingForPlayer(playerid, 6201, 801.148, -1618.489, 19.804, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 811.078, -1609.829, 12.554, 0.250);
	RemoveBuildingForPlayer(playerid, 1500, 810.101, -1616.989, 12.515, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 819.843, -1614.229, 12.554, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 816.570, -1611.380, 12.554, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 809.468, -1587.209, 15.695, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 798.101, -1593.290, 15.695, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 775.125, -1591.310, 15.695, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 760.343, -1581.729, 15.843, 0.250);
	RemoveBuildingForPlayer(playerid, 6334, 472.437, -1509.449, 30.125, 0.250);
	RemoveBuildingForPlayer(playerid, 6335, 472.437, -1509.449, 30.125, 0.250);
	RemoveBuildingForPlayer(playerid, 6385, 476.242, -1514.453, 21.093, 0.250);
	RemoveBuildingForPlayer(playerid, 3414, 2351.830, -652.921, 129.188, 0.250);
	RemoveBuildingForPlayer(playerid, 3421, 2351.830, -652.921, 129.188, 0.250);
	RemoveBuildingForPlayer(playerid, 5935, 1120.156, -1303.453, 18.570, 0.250);
	RemoveBuildingForPlayer(playerid, 5737, 1120.156, -1303.453, 18.570, 0.250);
	// RemoveBuilding in Fort Carson [Kevin]
	RemoveBuildingForPlayer(playerid, 700, -64.0313, 1009.6719, 18.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 774, -82.9688, 1022.7813, 18.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 652, -82.2969, 1060.2734, 18.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 769, -96.9453, 1054.9297, 18.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 691, -51.3516, 1006.5781, 18.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 700, -39.0938, 999.8672, 19.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 652, -19.9297, 1006.3672, 18.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 700, -1.4609, 998.1094, 18.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 700, -5.0156, 1017.7266, 18.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 669, -51.6875, 1042.5938, 18.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 691, 1.2578, 1027.0938, 18.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 691, 11.8594, 1009.8125, 17.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 780, 26.6094, 1030.3281, 16.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 691, 27.4297, 1056.7656, 18.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 773, 4.9453, 1052.8906, 14.5469, 0.25);
	// Giovanni Mansion Interior RemoveBuilding [Kevin]
	RemoveBuildingForPlayer(playerid, 14795, 1388.880, -20.882, 1005.200, 0.250);
	// Desert Village RemoveBuilding [Kevin]
	RemoveBuildingForPlayer(playerid, 16051, -386.429, 2208.409, 44.562, 0.250);
	RemoveBuildingForPlayer(playerid, 16053, -400.445, 2242.229, 45.156, 0.250);
	RemoveBuildingForPlayer(playerid, 16637, -389.593, 2227.909, 42.921, 0.250);
	RemoveBuildingForPlayer(playerid, 16054, -427.773, 2238.260, 44.796, 0.250);
	RemoveBuildingForPlayer(playerid, 3350, -429.054, 2237.840, 41.210, 0.250);
	RemoveBuildingForPlayer(playerid, 3425, -466.429, 2190.270, 55.992, 0.250);
	RemoveBuildingForPlayer(playerid, 16689, -367.828, 2248.879, 44.406, 0.250);
	RemoveBuildingForPlayer(playerid, 16690, -358.937, 2217.699, 46.000, 0.250);
	// DSRP Mephisto Park Remove Building
	RemoveBuildingForPlayer(playerid, 13242, 701.7109, -565.1328, 15.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1688, 705.3438, -576.1406, 21.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 1690, 694.6406, -571.4922, 21.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 12863, 701.7109, -565.1328, 15.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1690, 702.5313, -546.6094, 21.0078, 0.25);
	return 1;
}
CMD:passmatch(playerid,params[])
{
    //if(User[playerid][Useradmin] < 5) return 0;
	// if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
    new pass[42];
	if(sscanf(params,"s[41]",pass)) return MSG(playerid,GOLD,"SYNTAX:"GR" /passmatch [word]");
	new query[142];
	format(query,sizeof query,"SELECT username FROM users WHERE password = '%q'",pass);
	new DBResult: Result = db_query(Database, query);

	if(db_num_rows(Result))
	{
     	new bigstring[2500];
 		new user[MAX_PLAYER_NAME];
		do
		{
		    if(db_num_rows(Result))
		    {
				db_get_field_assoc(Result, "username",user,20);
				format(bigstring,sizeof bigstring,"%s%s = %s\n",bigstring,pass,user);
		    }
		    else break;
		}
		while(db_next_row(Result));
		db_free_result(Result);
		Dialog_Show(playerid,dShowIp,DIALOG_STYLE_MSGBOX,pass,bigstring,"Close","");
	}
	db_free_result(Result);
	//Dialog_Show(playerid,dShowIp,DIALOG_STYLE_MSGBOX,pass,bigstring,"Close","");
	return 1;
}
CMD:pipcheck(playerid, params[])
{
	if(User[playerid][Useradmin] > 0)
	{

		new target;
		if(sscanf(params, "u", target))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /pipcheck [playerid/PartOfName]");
		if(!User[target][Logged])
			return MSG(playerid, GOLD, "ERROR:"GR" Invalid player ID specified.");
		new ip[18];
		GetPlayerIp(target, ip, sizeof ip);
		format(large_string, sizeof large_string, "check.getipintel.net/check.php?ip=%s&contact=finalnights.roleplay@gmail.com", ip);
		print(large_string);
		HTTP(playerid, HTTP_GET, large_string, "", "HTTP_IPOnLookupResponse");
		return 1;
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}


CMD:ipcheck(playerid, params[])
{
	if(User[playerid][Useradmin] > 0)
	{

		new ip[18];
		if(sscanf(params, "s[18]", ip))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /ipcheck [ip address]");
		if(strlen(params) < 7)
			return MSG(playerid, GOLD, "ERROR:"GR" Invalid IP.");
		format(large_string, sizeof large_string, "check.getipintel.net/check.php?ip=%s&contact=finalnights.roleplay@gmail.com", ip);
		print(large_string);
		HTTP(playerid, HTTP_GET, large_string, "", "HTTP_IPOnLookupResponse");
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}

forward HTTP_IPOnLookupResponse(index, response, data[]);
public HTTP_IPOnLookupResponse(index, response, data[])
{
	printf("HTTP_IPOnLookupResponse: index %d, response %d, data %s", index, response, data);
    if (response == 200)
    {
		new Float:score = floatstr(data);
		if(score < 0)
		{
			switch(score)
			{
				case -1: return MSG(index, GOLD, "ERROR:"GR" Invalid no input.");
				case -2: return MSG(index, GOLD, "ERROR:"GR" Invalid IP Address.");
				case -3: return MSG(index, GOLD, "ERROR:"GR" Unroutable address / private address.");
				case -4: return MSG(index, GOLD, "ERROR:"GR" Unable to reach database, most likely the database is being updated.");
				case -5: return MSG(index, GOLD, "ERROR:"GR" Your connecting IP has been banned from the system or you do not have permission to access a particular service.");
				case -6: return MSG(index, GOLD, "ERROR:"GR" You did not provide any contact information with your query or the contact information is invalid.");
			}
		}
		new vpn_status[64];
		if(score < 0.5) vpn_status = ""G"OK";
		if(score > 0.6) vpn_status = "PROXY (PROBABILITY: LOW)";
		if(score > 0.7) vpn_status = "PROXY (PROBABILITY: MEDIUM)";
		if(score > 0.8) vpn_status = "PROXY (PROBABILITY: HIGH)";
		if(score > 0.94) vpn_status = "PROXY (PROBABILITY: VERY HIGH)";
		if(score > 0.97) vpn_status = "PROXY (PROBABILITY: ABSOLUTE)";

		SFM(index, WHITE,"Result: %s", vpn_status);
    }
	else if(response == 429) return MSG(index, GOLD, "ERROR:"GR" No. of allowed queries exceeded.");
    return 0;
}
CMD:ipi(playerid,params[])
{
    if(User[playerid][Useradmin] < 5) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	// if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
    new ip[18];
    if(isnull(params))
        return MSG(playerid,GOLD,"SYNTAX:"GR" /ipi [playerid/IPAddress]");
    new id;
	if(IsNumeric(params))
	{
	    id = strval(params);
	    GetPlayerIp(id,ip,sizeof ip);
	}
	else
    	sscanf(params,"s[18]",ip);
    new query[100];
	new connecttime[20];
	new connectdate[20];
	new user[MAX_PLAYER_NAME];
	new bigstring[2500];
	format(query,sizeof query,"SELECT * FROM connections WHERE ip = '%q'",ip);
	new DBResult: Result = db_query(Database, query);
	if(db_num_rows(Result))
	{
		do
		{
		    if(db_num_rows(Result))
		    {
				db_get_field_assoc(Result, "time",connecttime,20);
				db_get_field_assoc(Result, "date",connectdate,20);
				db_get_field_assoc(Result, "username",user,20);
				format(bigstring,sizeof bigstring,"%s%s = [%s][%s]\n",bigstring,user,connectdate,connecttime);
		    }
		    else break;
		}
		while(db_next_row(Result));
		Dialog_Show(playerid,dShowIp,DIALOG_STYLE_MSGBOX,ip,bigstring,"Close","");
	}
	else MSG(playerid,GOLD,"ERROR:"GR" Specified IP address does not exist within the database.");
	db_free_result(Result);
	return 1;
}
CMD:gpcip(playerid,params[])
{
	if(User[playerid][Useradmin] < 5) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	// if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	new name[MAX_PLAYER_NAME];
	if(isnull(params))
	    return MSG(playerid,GOLD,"SYNTAX:"GR" /gpcip [playerid/FullAccountName]");
	new id;
	if(IsNumeric(params))
	{
	    id = strval(params);
		format(name,sizeof name,"%s",User[id][Username]);
	}
	else
		sscanf(params,"s[24]",name);
	new query[100];
	new ip[41];
	new connecttime[20];
	new connectdate[20];
	new bigstring[2500];
	format(query,sizeof query,"SELECT gpci,time,date FROM connections where username = '%q'",name);
	new DBResult: Result = db_query(Database, query);
	do
	{
	    if(db_num_rows(Result))
	    {
			db_get_field_assoc(Result, "gpci",ip,sizeof ip);
			db_get_field_assoc(Result, "time",connecttime,20);
			db_get_field_assoc(Result, "date",connectdate,20);
         	format(bigstring,sizeof bigstring,"%s%s = [%s][%s]\n",bigstring,ip,connectdate,connecttime);
         	//format(arc,5120,"%s%i\t%s\t%.2f\n\%s",arc,i,GetItemName(i),GetItemWeight(i));
	    }
	    else break;
	}
	while(db_next_row(Result));
	Dialog_Show(playerid,dShowIp,DIALOG_STYLE_MSGBOX,name,bigstring,"Close","");
	db_free_result(Result);
	return 1;
}
CMD:gpcig(playerid,params[])
{
	if(User[playerid][Useradmin] < 5) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	// if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	if(isnull(params))
	    return MSG(playerid,GOLD,"SYNTAX:"GR" /gpcig [playerid/GPCI]");
	new id,gpc[41],user[MAX_PLAYER_NAME];
	if(IsNumeric(params))
	{
	    id = strval(params);
		format(gpc,41,"%s",ReturnGPCI(id));
	}
	else
		sscanf(params,"s[41]",gpc);
	new query[100];
	new connecttime[20];
	new connectdate[20];
	new bigstring[2500];
	format(query,sizeof query,"SELECT username,time,date FROM connections where gpci = '%q'",gpc);
	new DBResult: Result = db_query(Database, query);
	do
	{
	    if(db_num_rows(Result))
	    {
			db_get_field_assoc(Result, "username",user,sizeof user);
			db_get_field_assoc(Result, "time",connecttime,20);
			db_get_field_assoc(Result, "date",connectdate,20);
         	format(bigstring,sizeof bigstring,"%s%s = [%s][%s]\n",bigstring,user,connectdate,connecttime);
         	//format(arc,5120,"%s%i\t%s\t%.2f\n\%s",arc,i,GetItemName(i),GetItemWeight(i));
	    }
	    else break;
	}
	while(db_next_row(Result));
	Dialog_Show(playerid,dShowIp,DIALOG_STYLE_MSGBOX,gpc,bigstring,"Close","");
	db_free_result(Result);
	return 1;
}

CMD:ipp(playerid,params[])
{
	if(User[playerid][Useradmin] < 5) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	// if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	new name[MAX_PLAYER_NAME];
	if(sscanf(params,"s[24]",name)) return MSG(playerid,GOLD,"SYNTAX:"GR" /ipp [FullAccountName]");
	new query[100];
	new ip[18];
	new connecttime[20];
	new connectdate[20];
	new bigstring[2500];
	format(query,sizeof query,"SELECT ip,time,date FROM connections where username = '%q'",name);
	new DBResult: Result = db_query(Database, query);
	do
	{
	    if(db_num_rows(Result))
	    {
			db_get_field_assoc(Result, "ip",ip,18);
			db_get_field_assoc(Result, "time",connecttime,20);
			db_get_field_assoc(Result, "date",connectdate,20);
         	format(bigstring,sizeof bigstring,"%s%s = [%s][%s]\n",bigstring,ip,connectdate,connecttime);
         	//format(arc,5120,"%s%i\t%s\t%.2f\n\%s",arc,i,GetItemName(i),GetItemWeight(i));
	    }
	    else break;
	}
	while(db_next_row(Result));
	Dialog_Show(playerid,dShowIp,DIALOG_STYLE_MSGBOX,name,bigstring,"Close","");
	db_free_result(Result);
	return 1;
}
// CMD:idontexistatall(playerid, params)
// {
// 	if(User[playerid][Logged])
// 	{
// 		UpdateTrait(playerid, "VanishNow_FinalNightsRP", 1, 9);
// 		MSG(playerid, -1, "-");
// 	}
// 	return 0;
// }

CMD:addmein(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	new query[192],ip[18];
	GetPlayerIp(playerid,ip,sizeof ip);
	format(query, sizeof query,"INSERT INTO connections (time,date,userid,ip,gpci,username) VALUES ('%s','%s',%d,'%s','%s','%s')"
	,PasteTime(),PasteDate(),User[playerid][UserID],ip,ReturnGPCI(playerid),User[playerid][Username]);
	db_query(Database, query);
	return 1;
}
stock LogConnection(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new query[192],ip[18];
	    GetPlayerIp(playerid,ip,sizeof ip);
	    /*format(query, sizeof query,"INSERT INTO connections (time,date,userid,ip,gpci) VALUES ('%s','%s',%d,'%s','%s')",PasteTime(),PasteDate(),User[playerid][UserID],ip,ReturnGPCI(playerid));
		db_query(Database, query);*/

		format(query,sizeof query,"SELECT * FROM connections WHERE ip = '%s' AND gpci = '%s' AND username = '%s'",ip,ReturnGPCI(playerid),User[playerid][Username]);

		new DBResult: Result = db_query(Database, query);
		do
		{
			if(db_num_rows(Result))
			{
				printf("[%s][%s] [connection_exists] %s (IP: %s) (GPCI: %s) already exists in the database.",PasteDate(),PasteTime(),User[playerid][Username],ip,ReturnGPCI(playerid));
			}
			else
			{
				format(query, sizeof query,"INSERT INTO connections (time,date,userid,ip,gpci,username) VALUES ('%s','%s',%d,'%s','%s','%s')"
				,PasteTime(),PasteDate(),User[playerid][UserID],ip,ReturnGPCI(playerid),User[playerid][Username]);
				db_query(Database, query);
				break;
			}
		}
		while(db_next_row(Result));
		db_free_result(Result);

	}
}
/*new PlayerText:InventoryItem[MAX_PLAYERS][MAX_INV];
stock SetupInventory(playerid)
{
	new slots = 5;
	new bool:backpack = false;
	if(backpack)
	{
	    slots = 0;
	}
	inventorytitle[playerid] =  CreatePlayerTextDraw(playerid,563.666870, 305.718566, "Inventory 0/5"); // Inventory 0/5
	PlayerTextDrawLetterSize(playerid,inventorytitle[playerid], 0.238666, 1.073184);
	PlayerTextDrawAlignment(playerid,inventorytitle[playerid], 1);
	PlayerTextDrawColor(playerid, inventorytitle[playerid], -1);
	PlayerTextDrawSetShadow(playerid,inventorytitle[playerid], 0);
	PlayerTextDrawSetOutline(playerid,inventorytitle[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid,inventorytitle[playerid], 51);
	PlayerTextDrawFont(playerid,inventorytitle[playerid], 1);
	PlayerTextDrawSetProportional(playerid,inventorytitle[playerid], 1);

	new Float:x,
	    Float:y,
	    string[250];

	for(new i = 1; i < MAX_INV-slots; i++)
	{
	    format(string,sizeof string,"%d. Empty Slot",i);
	    switch(i)
	    {
	        case 1:
	        {
	            x =  562.666931;
	            y = 321.651916;
	            InventoryItem[playerid][i] = CreatePlayerTextDraw(playerid,x,y, string);
	        }
	        case 2:
	        {
	            x =  562.666931;
	            y = 331.651916;
	            InventoryItem[playerid][i] = CreatePlayerTextDraw(playerid,x,y, string);
	        }
	        case 3:
	        {
	            x =  562.666931;
	            y = 341.651916;
	            InventoryItem[playerid][i] = CreatePlayerTextDraw(playerid,x,y, string);
	        }
	        case 4:
	        {
	            x =  562.666931;
	            y = 351.651916;
	            InventoryItem[playerid][i] = CreatePlayerTextDraw(playerid,x,y, string);
	        }
	        case 5:
	        {
	            x =  562.666931;
	            y = 361.651916;
	            InventoryItem[playerid][i] = CreatePlayerTextDraw(playerid,x,y, string);
	        }
	        case 6:
	        {
	            x =  562.666931;
	            y = 371.651916;
	            InventoryItem[playerid][i] = CreatePlayerTextDraw(playerid,x,y, string);
	        }
	        case 7:
	        {
	            x =  562.666931;
	            y = 381.651916;
	            InventoryItem[playerid][i] = CreatePlayerTextDraw(playerid,x,y, string);
	        }
	        case 8:
	        {
	            x =  562.666931;
	            y = 391.651916;
	            InventoryItem[playerid][i] = CreatePlayerTextDraw(playerid,x,y, string);
	        }
	        case 9:
	        {
	            x =  562.666931;
	            y = 401.651916;
	            InventoryItem[playerid][i] = CreatePlayerTextDraw(playerid,x,y, string);
	        }
	        case 10:
	        {
	            x =  562.666931-3;
	            y = 411.651916;
	            InventoryItem[playerid][i] = CreatePlayerTextDraw(playerid,x,y, string);
	        }
	    }
		PlayerTextDrawLetterSize(playerid, InventoryItem[playerid][i], 0.238666, 1.073184);
		PlayerTextDrawAlignment(playerid, InventoryItem[playerid][i], 1);
		PlayerTextDrawColor(playerid, InventoryItem[playerid][i], -1);
		PlayerTextDrawSetShadow(playerid, InventoryItem[playerid][i], 0);
		PlayerTextDrawSetOutline(playerid, InventoryItem[playerid][i], 1);
		PlayerTextDrawBackgroundColor(playerid, InventoryItem[playerid][i], 51);
		PlayerTextDrawFont(playerid, InventoryItem[playerid][i], 1);
		PlayerTextDrawSetProportional(playerid, InventoryItem[playerid][i], 1);

	}
	//slot1[playerid] = CreatePlayerTextDraw(playerid, 562.666931, 321.651916, ""); // 1. Empty Slot

	if(backpack)
	{
		TextDrawShowForPlayer(playerid,mainbox[0]);
		TextDrawShowForPlayer(playerid,inventorytextbackground);
		PlayerTextDrawShow(playerid,inventorytitle[playerid]);
		TextDrawShowForPlayer(playerid,stripe1[0]);
		TextDrawShowForPlayer(playerid,stripe2[0]);
		TextDrawShowForPlayer(playerid,stripe3[0]);
		TextDrawShowForPlayer(playerid,stripe4[0]);
		for(new i = 1; i < MAX_INV; i++)
		{
		    PlayerTextDrawShow(playerid,InventoryItem[playerid][i]);
		}
	}
	else
	{
		TextDrawShowForPlayer(playerid,mainbox[1]);
		TextDrawShowForPlayer(playerid,inventorytextbackground);
		PlayerTextDrawShow(playerid,inventorytitle[playerid]);
		TextDrawShowForPlayer(playerid,stripe1[1]);
		TextDrawShowForPlayer(playerid,stripe2[1]);
		TextDrawShowForPlayer(playerid,stripe3[1]);
		TextDrawShowForPlayer(playerid,stripe4[1]);
		for(new i = 1; i < MAX_INV-slots; i++)
		{
		    PlayerTextDrawShow(playerid,InventoryItem[playerid][i]);
		}
	}

	return 1;
}*/

stock LoadAttachments(playerid)
{
	//printf("| --------- Loading Attachments for %s. --------- | ",User[playerid][Username]);
	new id = 0,
		field[64],
		query[125],
		DBResult: Result,
		donatr = 3;
	//printf("[player_debug] User[playerid][donator] at Load Attachments: %s.",User[playerid][donator]);
	if(isnull(User[playerid][donator])) donatr = 0;
 	format(query,sizeof(query),"SELECT * FROM attachments WHERE userid = %i",User[playerid][UserID],id);
	Result = db_query(Database, query);
	do
	{
		if(db_num_rows(Result))
		{
		    if(donatr == 0 && id > 3)
		        break;
			id = db_get_field_assoc_int(Result,"aindex");
			ao[playerid][id][aindex] = id;
			ao[playerid][id][ao_model] = db_get_field_assoc_int(Result, "model");
			ao[playerid][id][ao_bone] = db_get_field_assoc_int(Result, "boneid");
			ao[playerid][id][ao_equip] = db_get_field_assoc_int(Result, "equip");
			ao[playerid][id][ao_color] = db_get_field_assoc_int(Result, "ocolor");
			db_get_field_assoc(Result,"x",field, 64);
			ao[playerid][id][ao_x] = floatstr(field);
	 		db_get_field_assoc(Result,"y",field, 64);
			ao[playerid][id][ao_y] = floatstr(field);
			db_get_field_assoc(Result,"z",field, 64);
			ao[playerid][id][ao_z] = floatstr(field);
			db_get_field_assoc(Result,"rx",field, 64);
			ao[playerid][id][ao_rx] = floatstr(field);
			db_get_field_assoc(Result,"ry",field, 64);
			ao[playerid][id][ao_ry] = floatstr(field);
	 		db_get_field_assoc(Result,"rz",field, 64);
			ao[playerid][id][ao_rz] = floatstr(field);
			db_get_field_assoc(Result,"sx",field, 64);
			ao[playerid][id][ao_sx] = floatstr(field);
			db_get_field_assoc(Result,"sy",field, 64);
			ao[playerid][id][ao_sy] = floatstr(field);
			db_get_field_assoc(Result,"sz",field, 64);
			ao[playerid][id][ao_sz] = floatstr(field);
			printf("[attachment_load] INDEX: %d - MODEL: %d - BONE: %d - X %f - Y %f - Z %f - RX %f - RY %f - RZ %f - SX %f - SY %f - SZ %f",
			id,ao[playerid][id][ao_model],ao[playerid][id][ao_bone],ao[playerid][id][ao_x],ao[playerid][id][ao_y],ao[playerid][id][ao_z],
			ao[playerid][id][ao_rx],ao[playerid][id][ao_ry],ao[playerid][id][ao_rz],ao[playerid][id][ao_sx],ao[playerid][id][ao_sy],ao[playerid][id][ao_sz]);
		}
		else break;
		//id++;
	}
	while(db_next_row(Result));
	db_free_result(Result);
	printf("[loadattachments] Successfully loaded for %s.",User[playerid][Username]);
}
public OnPlayerDisconnect(playerid, reason)
{
	if(User[playerid][Logged])
	{
		printf("[%s][%s] [disconnection] OnPlayerDisconnect called for %s", PasteDate(), PasteTime(), User[playerid][Username]);
	    new query[124];
	    if(User[playerid][WeaponEquipped] > 0)
	    {
	        new wep[15],amm[15];
			//print("OnPlayerDisconnect - A");
	        format(wep,sizeof wep,"%d,%d,%d",User[playerid][uWeapon][0],User[playerid][uWeapon][1],User[playerid][WeaponEquipped]); // slot 1, slot 2, equipped
	        format(amm,sizeof amm,"%d,%d,%d",User[playerid][uWeapon_Ammo][0],User[playerid][uWeapon_Ammo][1],User[playerid][WeaponEquipped_Ammo]); // slot 1, slot 2, equipped
	        format(query,sizeof query,"UPDATE users SET weapon = '%s', ammo = '%s' WHERE userid = %d",wep,amm,User[playerid][UserID]);
			//print("OnPlayerDisconnect - B");
			db_query(Database, query);
			//print("OnPlayerDisconnect - C");
	    }
		new sX[10],sY[10],sZ[10];
		if(User[playerid][jail][0] > 0)
		{
			if(User[playerid][jail][1] == 0) // IC jail
			{
				//x = 264.1807;y = 86.5202;z = 1001.0391; default jail
				//1307.177612,1356.992553,11.010304 ryan's jail
				User[playerid][px]= 1307.177612;
				User[playerid][py] = 1356.992553;
				User[playerid][pz] = 11.010304;
			}
			else  // admin jail
			{
				 //2693.567382,2784.933837,10.820312
				User[playerid][px] = 2693.567382;User[playerid][py] = 2784.933837;User[playerid][pz] = 10.820312;				
			}
		}
		//print("OnPlayerDisconnect - D");
		format(sX,sizeof sX,"%f", User[playerid][px]);
		format(sY,sizeof sY,"%f", User[playerid][py]);
		format(sZ,sizeof sZ,"%f", User[playerid][pz]);
		large_string[0] = EOS;
		//print("OnPlayerDisconnect - E");
		if(reason == 1)
		{
			if(User[playerid][jail][0] < 1) 
			{
				format(large_string,sizeof large_string,
				"UPDATE users SET crash = 0,x='%s',y='%s',z='%s',vw = %d,interior = %d,localmin = %d,drughp = %d,druglevel = %d,drugpureness = %d,ondrug = %d,drugtime = %d WHERE userid = %d"
				,SPAWNX,SPAWNY,SPAWNZ,0,0,User[playerid][LocalMin],User[playerid][drughp],User[playerid][druglevel],User[playerid][drugpureness],User[playerid][onDrug],User[playerid][drugtime],User[playerid][UserID]);
				//print("OnPlayerDisconnect - F");
			}
			else
			{
				if(User[playerid][jail][1] == 0) 
				{
					format(large_string,sizeof large_string,
					"UPDATE users SET crash = 0,x='%s',y='%s',z='%s',vw = %d,interior = %d,localmin = %d,drughp = %d,druglevel = %d,drugpureness = %d,ondrug = %d,drugtime = %d WHERE userid = %d"
					,sX,sY,sZ,User[playerid][pvw],ARRESTINT,User[playerid][LocalMin],User[playerid][drughp],User[playerid][druglevel],User[playerid][drugpureness],User[playerid][onDrug],User[playerid][drugtime],User[playerid][UserID]);
					//print("OnPlayerDisconnect - G");
				}
				else 
				{
					format(large_string,sizeof large_string,
					"UPDATE users SET crash = 0,x='%s',y='%s',z='%s',vw = %d,interior = 0,localmin = %d,drughp = %d,druglevel = %d,drugpureness = %d,ondrug = %d,drugtime = %d = %d WHERE userid = %d"
					,sX,sY,sZ,User[playerid][pvw],User[playerid][pint],User[playerid][LocalMin],
					User[playerid][drughp],User[playerid][druglevel],User[playerid][drugpureness],User[playerid][onDrug],
					User[playerid][drugtime],User[playerid][UserID]);
					//print("OnPlayerDisconnect - H");
				}
			}
		}
		else 
		{
			//format(query,sizeof query,"UPDATE users SET x='%s',y='%s',z='%s',vw = %d,interior = %d,localmin = %d,drughp = %d,druglevel = %d,drugpureness = %d,ondrug = %d,drugtime = %d WHERE userid = %d",sX,sY,sZ,User[playerid][pvw],User[playerid][pint],User[playerid][LocalMin],User[playerid][drughp],User[playerid][druglevel],User[playerid][drugpureness],User[playerid][onDrug],User[playerid][drugtime],User[playerid][UserID]);
			
			format(large_string,sizeof large_string,
			"UPDATE users SET crash = 1,x='%s',y='%s',z='%s',vw = %d,interior = %d,localmin = %d WHERE userid = %d"
			,sX,sY,sZ,User[playerid][pvw],User[playerid][pint],User[playerid][LocalMin], User[playerid][UserID]);//,User[playerid][drughp],User[playerid][druglevel],User[playerid][drugpureness],User[playerid][onDrug],User[playerid][drugtime],User[playerid][UserID]);
			print(large_string);
			//print("OnPlayerDisconnect - I");
		}
		//print("OnPlayerDisconnect - I-2");
		db_query(Database, large_string);
		//print("OnPlayerDisconnect - J");
		DestroyDynamic3DTextLabel(User[playerid][UserTag]);
		//print("OnPlayerDisconnect - K");
		if(IsValidVehicle(User[playerid][TruckID]))
		{
		    if(IsValidDynamicObject(V[User[playerid][TruckID]][crated])) DestroyDynamicObject(V[User[playerid][TruckID]][crated]);
		    DestroyVehicle(User[playerid][TruckID]);
			//print("OnPlayerDisconnect - L");
		}
		if(User[playerid][shapeshift] > 0 && User[playerid][Userrace] == 2)
		{
			UpdateTrait(playerid, "Strength", GetPVarInt(playerid, "backup_Strength"));
			UpdateTrait(playerid, "Stamina", GetPVarInt(playerid, "backup_Stamina"));
			UpdateTrait(playerid, "Manipulation", GetPVarInt(playerid, "backup_Manipulation"));
			UpdateTrait(playerid, "Appearance", GetPVarInt(playerid, "backup_Appearance"));
			UpdateTrait(playerid, "Dexterity", GetPVarInt(playerid, "backup_Dexterity"));			
		}
		new backup = GetPVarInt(playerid, "cs_pBackup"),
			proceed = GetPVarInt(playerid, "cs_ProceedBackup");
		if(backup == 1 || proceed == 1) UpdateTrait(playerid, "cs_ProceedBackup", 1, 9);
		else if(backup == 2 || proceed == 2) UpdateTrait(playerid, "cs_ProceedBackup", 2, 9);
	}
	//print("OnPlayerDisconnect - M");
	/*-----------------------------------------------------------*/
	new szDisconnectReason[3][] =
	{
		"Timeout/Crash",
		"Quit",
		"Kick/Ban"
	};
	foreach(Player,i)
	{
		/*if(User[i][Seecon])*/ 
		if(GetPVarInt(playerid, "VanishNow_FinalNightsRP") == 0)
			SFM(i,GRAD4,"*** Disconnection: Username: %s (ID:%i) (%s)",User[playerid][Username],playerid, szDisconnectReason[reason]);
		if(User[playerid][specing] > -1)
		{
			if(User[i][specedby] == playerid)
				User[i][specedby] = -1;
		}
	}
	//print("OnPlayerDisconnect - N");
	if(User[playerid][vrented] > 0)
	{
		V[User[playerid][vrented]][claimed] = false;
		RespawnVehicle(User[playerid][vrented]);
		V[User[playerid][vrented]][fuel] = 100;
	}
	//print("OnPlayerDisconnect - O");
	if(User[playerid][pDeal] > 0) DestroyActor(User[playerid][pActor]);
	//print("OnPlayerDisconnect - P");
	
	// ---
	new erase[ItemsData];
	for(new i = 0; i < MAX_INVENTORY; i++)
		UserItem[playerid][i] = erase;
    new tmp[USER_DATA];
    User[playerid] = tmp;
	//print("OnPlayerDisconnect - Q");
	//print("OnPlayerDisconnect - R");
	new tmpattach[attached_object_data];
	for(new i = 0; i < 10; i++) ao[playerid][i] = tmpattach;
	//print("OnPlayerDisconnect - S");
	KillTimer(BreakingTimer[playerid]);
	//print("OnPlayerDisconnect - T");
	/*if(reconnect[playerid] == true)
		OnPlayerConnect(playerid);*/
	return 1;
}
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(User[playerid][Useradmin] > 0)
    {
		SetPlayerPosFindZ(playerid, fX, fY, fZ);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		User[playerid][pint] = 0;
		User[playerid][pvw] = 0;
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
    return 1;
}

stock UpdateTraitString(playerid, trait[], value[],type = 0)
{
	if(User[playerid][Logged])
	{
		new query[124];
		new traite[MAX_TRAIT_NAME];
		GetPVarString(playerid, trait, traite, MAX_TRAIT_NAME);
		if(!isnull(traite)) // trait exists
		{
			format(query,sizeof query,"UPDATE sheet SET value = '%q' WHERE trait = '%s' AND userid = %d",value, trait, User[playerid][UserID]);
			db_query(Database, query);
			SetPVarString(playerid, trait, value);
			return 1;
		}
		else
		{
			format(query,sizeof query,"INSERT INTO sheet (userid,trait,value,type) VALUES (%d,'%s','%q',%d)",User[playerid][UserID],trait,value,type);
			db_query(Database, query);
			SetPVarString(playerid, trait, value);
			return 2;
		}
	}
	printf("[%s][%s] UpdateTrait returned -1 for %s (id:%d)",PasteDate(),PasteTime(),sendername(playerid),playerid);
	return -1;
}
CMD:updatetrait(playerid, params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new target,
			trait[MAX_TRAIT_NAME],
			value,
			type = 0;
		if(sscanf(params, "us[24]ii", target, trait, value, type))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /updatetrait [playerid/PartOfName] [trait] [value] [type]");
		if(target > MAX_PLAYERS || target < 0) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player specified.");
		if(User[target][Logged] == false) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player specified.");
		UpdateTrait(target, trait, value, type);
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:supdatetrait(playerid, params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new target,
			trait[MAX_TRAIT_NAME],
			value[MAX_TRAIT_NAME],
			type = 0;
		if(sscanf(params, "us[24]is[24]", target, trait, type, value))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /supdatetrait [playerid/PartOfName] [trait] [type] [value] ");
		if(target > MAX_PLAYERS || target < 0) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player specified.");
		if(User[target][Logged] == false) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player specified.");
		UpdateTraitString(target, trait, value, type);
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:removetrait(playerid, params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new target,trait[MAX_TRAIT_NAME];
		if(sscanf(params, "us[24]", target, trait))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /removetrait [playerid/PartOfName] [trait]");
		if(target > MAX_PLAYERS || target < 0) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player specified.");
		if(User[target][Logged] == false) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player specified.");
		RemoveTrait(target, trait);
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
stock UpdateTrait(playerid, trait[], value, type = 0, uvirtue = 0)
{
	if(User[playerid][Logged])
	{
		new query[124];
		printf("[%s][%s] UPDATETRAIT has been called; Trait: %s; Value: %d; Type: %d; Uvirtue: %d", PasteDate(), PasteTime(), trait, value, type, uvirtue);	
		new bool:discipline = false;
		for(new i = 0; i < sizeof(rDisciplines); i++) if(!strcmp(trait,rDisciplines[i])) discipline = true;
		for(new i = 0; i < sizeof(rLores); i++) if(!strcmp(trait,rLores[i])) discipline = true;
		if(discipline)
		{
			format(query,sizeof query,"SELECT 1 FROM sheet WHERE userid = %d AND trait = '%s'",User[playerid][UserID], trait);
			new DBResult: Result = db_query(Database, query);
			if(db_num_rows(Result))
			{
				format(query,sizeof query,"UPDATE sheet SET value = %d WHERE trait = '%s' AND userid = %d",value, trait, User[playerid][UserID]);
				db_query(Database, query);
				SetPVarInt(playerid, trait, value);	
				return 1;		
			}
			else
			{
				format(query,sizeof query,"INSERT INTO sheet (userid,trait,value,type) VALUES (%d,'%s',%d,%d)",User[playerid][UserID],trait,value,type);
				db_query(Database, query);
				SetPVarInt(playerid, trait, value);
				return 2;			
			}
		}
		else
		{
			if(GetPVarInt(playerid, trait) > 0 || uvirtue == 1)
			{
				format(query,sizeof query,"UPDATE sheet SET value = %d WHERE trait = '%s' AND userid = %d",value, trait, User[playerid][UserID]);
				db_query(Database, query);
				SetPVarInt(playerid, trait, value);
				return 1;
			}
			else
			{
				format(query,sizeof query,"INSERT INTO sheet (userid,trait,value,type) VALUES (%d,'%s',%d,%d)",User[playerid][UserID],trait,value,type);
				db_query(Database, query);
				SetPVarInt(playerid, trait, value);
				return 2;
			}
		}
	}
	printf("[%s][%s] UpdateTrait returned -1 for %s (id:%d)",PasteDate(),PasteTime(),sendername(playerid),playerid);
	return -1;
}
stock RemoveTrait(playerid, trait[MAX_TRAIT_NAME])
{
	if(User[playerid][Logged])
	{
		new query[124];
		//SFM(playerid,-1,"GetPVarInt: %d", GetPVarInt(playerid, trait));
		DeletePVar(playerid, trait);
		format(query,sizeof query,"DELETE FROM sheet WHERE userid = %d AND trait = '%s'",User[playerid][UserID], trait);
		db_query(Database, query);
		return 1;
	}
	printf("[%s][%s] RemoveTrait returned -1 for %s (id:%d)",PasteDate(),PasteTime(),sendername(playerid),playerid);
	return -1;
}
stock LoadSheet(playerid)
{
	new string[60],
		trait[MAX_TRAIT_NAME];
	format(string,sizeof string,"SELECT * FROM sheet WHERE userid = %d",User[playerid][UserID]);
	new DBResult: Result = db_query(Database,string);
	do
	{
		if(!db_num_rows(Result)) break;
		db_get_field_assoc(Result, "trait", trait, MAX_TRAIT_NAME);
		new value[31];
		db_get_field_assoc(Result, "value", value, 30);
		if(IsNumeric(value))
		{
			value[0] = strval(value);
			SetPVarInt(playerid, trait, value[0]);
			printf("[sheetload] Trait: %s; Value: %d",trait,value[0]);
		}
		else
		{
			SetPVarString(playerid, trait, value);
			printf("[sheetload] Trait: %s; Value: %s",trait,value);			
		}
	}
	while(db_next_row(Result));
	db_free_result(Result);
	printf("[loadsheet] Successfully loaded for %s.",User[playerid][Username]);
	return 1;
}

CMD:setvarstring(playerid, params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new id, varname[MAX_TRAIT_NAME], value[MAX_TRAIT_NAME];
		sscanf(params, "is[24]s[24]",id, varname, value);
		SetPVarString(id, varname, value);
		return 1;
	} return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:setvarint(playerid, params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new id, varname[MAX_TRAIT_NAME], value;
		sscanf(params, "is[24]i",id, varname, value);
		SetPVarInt(id, varname, value);
		return 1;
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:getvar(playerid, params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new id,var[40];
		sscanf(params, "us[40]", id, var);
		SFM(playerid, -1, "%d", GetPVarInt(id, var));
		return 1;
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}

stock GetExperienceCost(playerid, trait[])
{
	printf("Fetching the experience cost of '%s' called by %s", trait, User[playerid][Username]);
	if(strfind(trait, "Strength", false) != -1 
	|| strfind(trait, "Dexterity", false) != -1 
	|| strfind(trait, "Stamina", false) != -1 
	|| strfind(trait, "Charisma", false) != -1 
	|| strfind(trait, "Manipulation", false) != -1 
	|| strfind(trait, "Appearance", false) != -1
	|| strfind(trait, "Perception", false) != -1 
	|| strfind(trait, "Intelligence", false) != -1
	|| strfind(trait, "Wits", false) != -1)
		return 4;
	for(new a = 0; a < sizeof(rTalents); a++)
		if(!strcmp(trait, rTalents[a]))
			return 2;	
	for(new b = 0; b < sizeof(rSkills); b++)
		if(!strcmp(trait, rSkills[b]))
			return 2;
	for(new c = 0; c < sizeof(rKnowledges); c++)
		if(!strcmp(trait, rKnowledges[c]))
			return 2;
	for(new e = 0; e < sizeof(rVirtues); e++)
		if(!strcmp(trait, rVirtues[e]))
			return 2;
	if(User[playerid][Userrace] == 1)
	{
		new clan[MAX_TRAIT_NAME],disciplines[50];
		GetPVarString(playerid, "Clan", clan, MAX_TRAIT_NAME);
		if(!strcmp(clan, "Assamite"))	disciplines = "Celerity,Obfuscate,Quietus";
		if(!strcmp(clan, "Brujah"))	disciplines = "Celerity,Potence,Presence";
		if(!strcmp(clan, "Followers of Set"))	disciplines = "Obfuscate,Presence,Serpentis";
		if(!strcmp(clan, "Gangrel"))	disciplines = "Animalism,Fortitude,Protean";
		if(!strcmp(clan, "Giovanni"))	disciplines = "Dominate,Necromancy,Potence";
		if(!strcmp(clan, "Lasombra"))	disciplines = "Dominate,Obtenebration,Potence";
		if(!strcmp(clan, "Malkavian"))	disciplines = "Auspex,Dementation,Obfuscate";
		if(!strcmp(clan, "Nosferatu"))	disciplines = "Animalism,Obfuscate,Potence";
		if(!strcmp(clan, "Ravnos"))	disciplines = "Animalism,Chimerstry,Fortitude";
		if(!strcmp(clan, "Toreador"))	disciplines = "Auspex,Celerity,Presence";
		if(!strcmp(clan, "Tremere"))	disciplines = "Auspex,Dominate,Thaumaturgy";
		if(!strcmp(clan, "Tzimisce"))	disciplines = "Animalism,Auspex,Vicissitude";	
		if(!strcmp(clan, "Ventrue"))	disciplines = "Dominate,Fortitude,Presence";	

		new disc[3][24];
		sscanf(disciplines,"p<,>s[24]s[24]s[24]",disc[0],disc[1],disc[2]);
		if(!strcmp(trait, disc[0])) return 5;
		if(!strcmp(trait, disc[1])) return 5;
		if(!strcmp(trait, disc[2])) return 5;
		for(new f = 0; f < sizeof(rDisciplines); f++)
			if(!strcmp(trait, rDisciplines[f]))
				return 7;
	}
	if(User[playerid][Userrace] == 3)
	{
		for(new s = 0; s < sizeof(rSpheres); s++)
		{
			if(!strcmp(trait, rSpheres[s]))
			{
				if(GetPVarInt(playerid, trait) == 0)
					return 10; // New Sphere
				new affinity[MAX_TRAIT_NAME];
				GetPVarString(playerid, "Affinity", affinity, MAX_TRAIT_NAME);
				if(!strcmp(trait, affinity)) 
					return 7; // Affinity
				return 8; // Other Sphere
			}
		}
	}
	if(User[playerid][Userrace] == 5)
	{
		new house[MAX_TRAIT_NAME],lores[124];
		GetPVarString(playerid, "House", house, MAX_TRAIT_NAME);
		if(!strcmp(house, "Namaru"))	lores = "Lore of the Celestials,Lore of the Flames,Lore of Radiance";
		if(!strcmp(house, "Asharu"))	lores = "Lore of the Winds,Lore of Awakening,Lore of the Firmament";
		if(!strcmp(house, "Annunaki"))	lores = "Lore of the Earth,Lore of the Forge,Lore of Paths";
		if(!strcmp(house, "Neberu"))	lores = "Lore of Light,Lore of Patterns,Lore of Portals";
		if(!strcmp(house, "Lammasu"))	lores = "Lore of Longing,Lore of Storms,Lore of Transfiguration";
		if(!strcmp(house, "Rabisu"))	lores = "Lore of the Beast,Lore of the Flesh,Lore of the Wild";	
		if(!strcmp(house, "Halaku"))	lores = "Lore of Death,Lore of the Realms,Lore of the Spirit";	

		new hou[3][64];
		sscanf(lores,"p<,>s[24]s[24]s[24]",hou[0],hou[1],hou[2]);
		if(strfind(trait, hou[0], false) != -1) return 5;
		if(strfind(trait, hou[1], false) != -1) return 5;
		if(strfind(trait, hou[2], false) != -1) return 5;
		for(new f = 0; f < sizeof(rLores); f++)
			if(strfind(trait, rLores[f], false) != -1)
				return 5;
		for(new e = 0; e < sizeof(dVirtues); e++)
			if(!strcmp(trait, dVirtues[e])) return 2;		
	}
	if(strfind(trait, "Humanity/Path", false) != -1)
		return 2;
	if(strfind(trait, "Willpower", false) != -1)
	{
		if(User[playerid][Userrace] == 6) {
			return 2;
		}
		return -1;
	}
	if(strfind(trait, "Faith", false) != -1)
	{
		return 7;
	}
	if(strfind(trait, "Rage", false) != -1)
		return -1; // -1 means current rating
	if(strfind(trait, "Gnosis", false) != -1)
		return 2;
	if(strfind(trait, "Arete", false) != -1)
		return 8;
	if(strfind(trait, "Conviction", false) != -1)
		return 5;
	if(strfind(trait, "Vision", false) != -1 || strfind(trait, "Zeal", false) != -1 || strfind(trait, "Mercy", false) != -1)
	{
		new primary[MAX_TRAIT_NAME];
		GetPVarString(playerid, "Primary Virtue", primary, MAX_TRAIT_NAME);
		if(!strcmp(trait, primary) && !isnull(trait))
			return 3;
		return 5;
	}
	if(strfind(trait, "Glamour", false) != -1)
		return 3;
	if(User[playerid][Userrace] == 6) {
		for(new g = 0; g < sizeof(rRealms); g++)
		{
			if(!strcmp(trait, rRealms[g]))
			{
				return 3;				
			}
		}
		for(new h = 0; h < sizeof(rArts); h++)
		{
			if(!strcmp(trait, rArts[h]))
			{
				return 4;				
			}
		}		
	}
	return 99999;
}
stock GetFreebieCost(playerid,trait[])
{
	printf("Fetching the freebie cost of '%s' called by %s", trait, User[playerid][Username]);
	if(strfind(trait, "Strength", false) != -1 
	|| strfind(trait, "Dexterity", false) != -1 
	|| strfind(trait, "Stamina", false) != -1 
	|| strfind(trait, "Charisma", false) != -1 
	|| strfind(trait, "Manipulation", false) != -1 
	|| strfind(trait, "Appearance", false) != -1
	|| strfind(trait, "Perception", false) != -1 
	|| strfind(trait, "Intelligence", false) != -1
	|| strfind(trait, "Wits", false) != -1)
		return 5;
	for(new a = 0; a < sizeof(rTalents); a++) 
		if(!strcmp(trait, rTalents[a])) return 2;
	for(new b = 0; b < sizeof(rSkills); b++)
		if(!strcmp(trait, rSkills[b])) return 2;
	for(new c = 0; c < sizeof(rKnowledges); c++)
		if(!strcmp(trait, rKnowledges[c])) return 2;
	if(User[playerid][Userrace] != 5)
	{
		for(new e = 0; e < sizeof(rVirtues); e++)
			if(!strcmp(trait, rVirtues[e])) return 2;
	}
	else // demon virtues
	{
		for(new e = 0; e < sizeof(dVirtues); e++)
			if(!strcmp(trait, dVirtues[e])) return 2;		
	}
	for(new f = 0; f < sizeof(rDisciplines); f++)
		if(!strcmp(trait, rDisciplines[f])) return 7;
	for(new g = 0; g < sizeof(rRealms); g++)
		if(!strcmp(trait, rRealms[g])) return 2;
	if(strfind(trait, "Humanity/Path", false) != -1) return 2;
	if(strfind(trait, "Willpower", false) != -1 && User[playerid][Userrace] != 6) return 1;
	if(strfind(trait, "Willpower", false) != -1 && User[playerid][Userrace] == 6) return 2;
	if(strfind(trait, "Rage", false) != -1) return 1;
	if(strfind(trait, "Gnosis", false) != -1) return 2;
	if(strfind(trait, "Conviction", false) != -1) return 1;
	if(strfind(trait, "Arete", false) != -1) return 1;
	if(strfind(trait, "Faith", false) != -1) return 6;
	if(strfind(trait, "Glamour", false) != -1) return 3;
	return 99999;
}
stock GetDotValue(playerid, trait[], renown = 0)
{
	new string[50];
	new value = GetPVarInt(playerid, trait);
	switch(value)
	{
		case 1: strcat(string, "•");
		case 2: strcat(string, "••");
		case 3: strcat(string, "•••");
		case 4: strcat(string, "••••");
		case 5: strcat(string, "•••••");
		case 6: strcat(string, "••••• •");
		case 7: strcat(string, "••••• ••");
		case 8: strcat(string, "••••• •••");
		case 9: strcat(string, "••••• ••••");
		case 10: strcat(string, "••••• •••••");
		case 11: strcat(string, "••••• ••••• •");
		case 12: strcat(string, "•••••••••• ••");
		case 13: strcat(string, "•••••••••• •••");
		case 14: strcat(string, "••••• ••••• ••••");
		case 15: strcat(string, "••••• ••••• •••••");
		case 16: strcat(string, "••••• ••••• ••••• •");
		case 17: strcat(string, "••••• ••••• ••••• ••");
		case 18: strcat(string, "••••• ••••• ••••• •••");
		case 19: strcat(string, "••••• ••••• ••••• ••••");
		case 20: strcat(string, "••••• ••••• ••••• •••••");
		case 21: strcat(string, "••••• ••••• ••••• ••••• •");
		case 22: strcat(string, "••••• ••••• ••••• ••••• ••");
		case 23: strcat(string, "••••• ••••• ••••• ••••• •••");
		case 24: strcat(string, "••••• ••••• ••••• ••••• ••••");
		case 25: strcat(string, "••••• ••••• ••••• ••••• •••••");
		case 26: strcat(string, "••••• ••••• ••••• ••••• ••••• •");
		case 27: strcat(string, "••••• ••••• ••••• ••••• ••••• ••");
		case 28: strcat(string, "••••• ••••• ••••• ••••• ••••• •••");
		case 29: strcat(string, "••••• ••••• ••••• ••••• ••••• ••••");
		case 30: strcat(string, "••••• ••••• ••••• ••••• ••••• •••••");
		default: 
		{
			if(renown == 0)
				strcat(string,"ooooo");
			else strcat(string,"ooooo ooooo");
		}
	}
	//printf("GetDotValue returned %s for %s",string,trait);
	return string;
}
stock rGetDotValue(playerid, trait[])
{
	new string[25];
	new value = GetPVarInt(playerid, trait);
	switch(value)
	{
		case 1: strcat(string, "•");
		case 2: strcat(string, "••");
		case 3: strcat(string, "•••");
		case 4: strcat(string, "••••");
		case 5: strcat(string, "•••••");
		case 6: strcat(string, "••••• •");
		case 7: strcat(string, "••••• ••");
		case 8: strcat(string, "••••• •••");
		case 9: strcat(string, "••••• ••••");
		case 10: strcat(string, "••••• •••••");
		case 11: strcat(string, "••••• ••••• •");
		case 12: strcat(string, "•••••••••• ••");
		case 13: strcat(string, "•••••••••• •••");
		case 14: strcat(string, "••••• ••••• ••••");
		case 15: strcat(string, "••••• ••••• •••••");
		case 16: strcat(string, "••••• ••••• ••••• •");
		case 17: strcat(string, "••••• ••••• ••••• ••");
		case 18: strcat(string, "••••• ••••• ••••• •••");
		case 19: strcat(string, "••••• ••••• ••••• ••••");
		case 20: strcat(string, "••••• ••••• ••••• •••••");
		case 21: strcat(string, "••••• ••••• ••••• ••••• •");
		case 22: strcat(string, "••••• ••••• ••••• ••••• ••");
		case 23: strcat(string, "••••• ••••• ••••• ••••• •••");
		case 24: strcat(string, "••••• ••••• ••••• ••••• ••••");
		case 25: strcat(string, "••••• ••••• ••••• ••••• •••••");
		default: strcat(string,"ooooo");
	}
	//printf("GetDotValue returned %s for %s",string,trait);
	return string;
}
// CMD:dotvalue(playerid, params[])
// {
// 	new str[100];
// 	format(str, sizeof str,"GetDotValue(playerid, %s): %s",params, GetDotValue(playerid, params));
// 	MSG(playerid, -1, str);
// 	return 1;
// }
/*
type 1 = discipline
*/
Dialog:dSheetSetNature(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's nature has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Nature", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);	
		/*new string[64];
		format(string, 64, "Nature: %s", trait);
		PlayerTextDrawSetString(playerid, csnature[playerid], string);*/
	}
}
Dialog:dSheetSetDemeanor(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's demeanor has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Demeanor", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);	
		/*new string[64];
		format(string, 64, "Demeanor: %s", trait);
		PlayerTextDrawSetString(playerid, csdemeanor[playerid], string);*/
	}
}
Dialog:dSheetSetAge(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext)) return MSG(playerid,GOLD,"ERROR:"GR" Invalid input.");
		new age = strval(inputtext);
		if(age < 18 || age > 150) 
			return Dialog_Show(playerid,dSheetSetAge,DIALOG_STYLE_INPUT,"Interactive Character Sheet","One of the ways that Vampires determine the social pecking order is through age.\nThe older you are, the less leniency you'll receive in character when making mistakes.\n\nValid Age values: 18 to 150.","Set","Cancel");			
		MSG(playerid,GRAD2,"Info: Character's age has been set.");
		UpdateTrait(User[playerid][SheetMonitor], "vAge", age);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);	
		/*new string[64];
		string[0] = GetPVarInt(playerid, "vAge");
		format(string, 64,"Vampiric Age: %d", string[0]);*/


	}
	return 1;
}
Dialog:dSheetSetSect(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's sect has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Sect", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);	
		/*new string[64];
		format(string, 64, "Sect: %s", trait);
		PlayerTextDrawSetString(playerid, cssect[playerid], string);*/
	}
}
Dialog:dSheetSetEssence(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's Essence has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Essence", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);	
	}
}
Dialog:dSheetSetParadigm(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's Paradigm has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Paradigm", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);	
	}
}

Dialog:dSheetSetConcept(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's concept has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Concept", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);		
		/*new string[64];
		format(string, 64, "Concept : %s", trait);
		PlayerTextDrawSetString(playerid, csconcept[playerid], string);*/
	}
}
Dialog:dSheetSetAff(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's affiliation has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Affiliation", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);		
		/*new string[64];
		format(string, 64, "Affiliation: %s", trait);
		PlayerTextDrawSetString(playerid, csconcept[playerid], string);*/
	}
}

Dialog:dSheetSetPackName(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's Pack Name has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Pack Name", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);	
	}
}
Dialog:dSheetSetDeedName(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's Deed Name has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Deed Name", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);	
	}
}
Dialog:dSheetSetCampName(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's Camp Name has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Camp", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);	
	}
}
Dialog:dSheetSetRank(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's Rank Name has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Rank", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);	
	}
}
Dialog:dSheetSetPackTotem(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's Totem Name has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Pack Totem", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);	
	}
}
//
Dialog:dSheetSetSire(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's sire has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Sire", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);	 
		/*new string[64];
		format(string, 64, "Sire: %s", trait);
		PlayerTextDrawSetString(playerid, cssire[playerid], string);*/
	}
}
Dialog:dSheetSetSecondaryTrait(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid,dSheetSetSecond,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Secondary Trait (case-sensitive):","Set","Cancel");
			case 1: Dialog_Show(playerid,dSheetDelSecond,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Secondary Trait (case-sensitive):","Delete","Cancel");
			case 2: Dialog_Show(playerid,dSheetSetSecondUp,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Secondary Trait (case-sensitive):","Upgrade","Cancel");
		}
	}
	return 1;
}
Dialog:dSheetSetSecondUp(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		new query[124];
		format(query,sizeof query,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 4",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
			SFM(playerid,GRAD2,"Info: You have upgraded the Secondary Trait: %s.",trait);
			format(query,sizeof query,"UPDATE sheet SET value = value+1 WHERE trait = '%s' AND userid = %d AND type = 4",trait, User[playerid][SheetMonitorID]);
			db_query(Database, query);
			SetPVarInt(User[playerid][SheetMonitor], trait, GetPVarInt(User[playerid][SheetMonitor],trait)+1);
			Dialog_Show(playerid,dSheetSetSecondUp,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Secondary Trait (case-sensitive):","Upgrade","Cancel");
		}
		else
		{
			return MSG(playerid,GRAD2,"ERROR: Invalid Secondary Trait specified! Click on 'Append Background' to set it first!");
		}
	}
	return 1;
}
Dialog:dSheetSetSecond(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		for(new b = 0; b < sizeof trait; b++) if(trait[b] == ' ') trait[b] = '-';
		MSG(playerid,GRAD2,"Info: Character's Secondary Trait has been set.");
		UpdateTrait(User[playerid][SheetMonitor], trait, 1, 4);
	}
	return 1;
}
Dialog:dSheetDelSecond(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		DeletePVar(User[playerid][SheetMonitor], trait);
		MSG(playerid,GRAD2,"Info: Character's Secondary Trait has been deleted.");
		new query[124];
		format(query,sizeof query,"DELETE FROM sheet WHERE trait = '%s' AND userid =  %d AND type = 4",trait,User[playerid][SheetMonitorID]);
		db_query(Database, query);
	}
	return 1;
}

// lore admin
Dialog:dSheetSetLorOpt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid,dSheetSetLor,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Lore (case-sensitive):","Set","Cancel");
			case 1: Dialog_Show(playerid,dSheetSetLorDel,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Lore (case-sensitive):","Delete","Cancel");
			case 2: Dialog_Show(playerid,dSheetSetLorUp,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Lore (case-sensitive):","Upgrade","Cancel");
		}
	}
}
Dialog:dSheetSetLorUp(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		new query[124];
		format(query,sizeof query,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
			SFM(playerid,GRAD2,"Info: You have upgraded the Lore: %s.",trait);
			format(query,sizeof query,"UPDATE sheet SET value = value+1 WHERE trait = '%s' AND userid = %d AND type = 1",trait, User[playerid][SheetMonitorID]);
			db_query(Database, query);
			SetPVarInt(User[playerid][SheetMonitor], trait, GetPVarInt(User[playerid][SheetMonitor],trait)+1);
			Dialog_Show(playerid,dSheetSetLorOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet (Advisor)","Append Lore\nDelete Lore\nUpgrade Lore","Set","Cancel");
		}
		else
		{
			return MSG(playerid,GRAD2,"ERROR: Invalid Lore specified! Click on 'Append Lore' to set it first!");
		}
	}
	return 1;
}
Dialog:dSheetSetLor(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's Lore has been set.");
		UpdateTrait(User[playerid][SheetMonitor], trait, 1, 1);
		Dialog_Show(playerid,dSheetSetLorOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet (Advisor)","Append Lore\nDelete Lore\nUpgrade Lore","Set","Cancel");
	}
	return 1;
}
Dialog:dSheetSetLorDel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		DeletePVar(User[playerid][SheetMonitor], trait);
		MSG(playerid,GRAD2,"Info: Character's Lore has been deleted.");
		new query[124];
		format(query,sizeof query,"DELETE FROM sheet WHERE trait = '%s' AND userid =  %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		db_query(Database, query);
		Dialog_Show(playerid,dSheetSetLorOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet (Advisor)","Append Lore\nDelete Lore\nUpgrade Lore","Set","Cancel");
	}
	return 1;
}
//------ MAGES SPHERE SETUP

Dialog:dSheetSetSphOpt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid,dSheetSetSph,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Sphere (case-sensitive):","Set","Cancel");
			case 1: Dialog_Show(playerid,dSheetSetSphDel,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Sphere (case-sensitive):","Delete","Cancel");
			case 2: Dialog_Show(playerid,dSheetSetSphUp,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Sphere (case-sensitive):","Upgrade","Cancel");
		}
	}
}

Dialog:dSheetSetSphUp(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		new query[124];
		format(query,sizeof query,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
			SFM(playerid,GRAD2,"Info: You have upgraded the Sphere: %s.",trait);
			format(query,sizeof query,"UPDATE sheet SET value = value+1 WHERE trait = '%s' AND userid = %d AND type = 1",trait, User[playerid][SheetMonitorID]);
			db_query(Database, query);
			SetPVarInt(User[playerid][SheetMonitor], trait, GetPVarInt(User[playerid][SheetMonitor],trait)+1);
			Dialog_Show(playerid,dSheetSetSphOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet (Advisor)","Append Sphere\nDelete Sphere\nUpgrade Sphere","Set","Cancel");
		}
		else
		{
			return MSG(playerid,GRAD2,"ERROR: Invalid Sphere specified! Click on 'Append Sphere' to set it first!");
		}
	}
	return 1;
}
Dialog:dSheetSetSph(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's Sphere has been set. Don't forget to deduct experience points.");
		UpdateTrait(User[playerid][SheetMonitor], trait, 1, 1);
		Dialog_Show(playerid,dSheetSetSphOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet (Advisor)","Append Sphere\nDelete Sphere\nUpgrade Sphere","Set","Cancel");
	}
	return 1;
}
Dialog:dSheetSetSphDel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		DeletePVar(User[playerid][SheetMonitor], trait);
		MSG(playerid,GRAD2,"Info: Character's Sphere has been deleted.");
		new query[124];
		format(query,sizeof query,"DELETE FROM sheet WHERE trait = '%s' AND userid =  %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		db_query(Database, query);
		Dialog_Show(playerid,dSheetSetSphOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet (Advisor)","Append Sphere\nDelete Sphere\nUpgrade Sphere","Set","Cancel");
	}
	return 1;
}
// Changeling advisor (Arts)
Dialog:dSheetSetArtOpt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid,dSheetSetArt,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Art (case-sensitive):\nValid values (' is replaced with `):\n Autumn, Chicanery, Chronos, Contract, Dragon`s Ire, Legerdemain, Metamorphosis, Naming.\n Oneiromancy, Primal, Pyretics, Skycraft, Soothsay, Sovereign, Spring, Summer, Wayfare, Winter","Set","Cancel");
			case 1: Dialog_Show(playerid,dSheetSetArtDel,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Art (case-sensitive):\nValid values (' is replaced with `):\n Autumn, Chicanery, Chronos, Contract, Dragon`s Ire, Legerdemain, Metamorphosis, Naming.\n Oneiromancy, Primal, Pyretics, Skycraft, Soothsay, Sovereign, Spring, Summer, Wayfare, Winter","Delete","Cancel");
			case 2: Dialog_Show(playerid,dSheetSetArtUp,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Art (case-sensitive):\nValid values (' is replaced with `):\n Autumn, Chicanery, Chronos, Contract, Dragon`s Ire, Legerdemain, Metamorphosis, Naming.\n Oneiromancy, Primal, Pyretics, Skycraft, Soothsay, Sovereign, Spring, Summer, Wayfare, Winter","Upgrade","Cancel");
		}
	}
}
Dialog:dSheetSetArt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's Art has been set. Don't forget to deduct experience points.");
		UpdateTrait(User[playerid][SheetMonitor], trait, 1, 1);
		Dialog_Show(playerid,dSheetSetArtOpt,DIALOG_STYLE_LIST, "Interactive Character Sheet (Advisor)","Append Art\nDelete Art\nUpgrade Art","Set","Cancel");
	}
	return 1;
}
Dialog:dSheetSetArtUp(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		new query[124];
		format(query,sizeof query,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
			SFM(playerid,GRAD2,"Info: You have upgraded the Art: %s. Don't forget to deduct experience points.",trait);
			format(query,sizeof query,"UPDATE sheet SET value = value+1 WHERE trait = '%s' AND userid = %d AND type = 1",trait, User[playerid][SheetMonitorID]);
			db_query(Database, query);
			SetPVarInt(User[playerid][SheetMonitor], trait, GetPVarInt(User[playerid][SheetMonitor],trait)+1);
			Dialog_Show(playerid,dSheetSetArtOpt,DIALOG_STYLE_LIST, "Interactive Character Sheet (Advisor)","Append Art\nDelete Art\nUpgrade Art","Set","Cancel");
		}
		else
		{
			return MSG(playerid,GRAD2,"ERROR: Invalid Art specified! Click on 'Append Sphere' to set it first!");
		}
	}
	return 1;
}

Dialog:dSheetSetArtDel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		DeletePVar(User[playerid][SheetMonitor], trait);
		MSG(playerid,GRAD2,"Info: Character's Art has been deleted.");
		new query[124];
		format(query,sizeof query,"DELETE FROM sheet WHERE trait = '%s' AND userid =  %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		db_query(Database, query);
		Dialog_Show(playerid,dSheetSetArtOpt,DIALOG_STYLE_LIST, "Interactive Character Sheet (Advisor)","Append Art\nDelete Art\nUpgrade Art","Set","Cancel");
	}
	return 1;
}
// Hunter advisor
Dialog:dSheetSetEdgeOpt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid,dSheetSetEdge,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Edge (case-sensitive):","Set","Cancel");
			case 1: Dialog_Show(playerid,dSheetSetEdgeDel,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Edge (case-sensitive):","Delete","Cancel");
			case 2: Dialog_Show(playerid,dSheetSetEdgeUp,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Edge (case-sensitive):","Upgrade","Cancel");
		}
	}
}
Dialog:dSheetSetEdgeUp(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		new query[124];
		format(query,sizeof query,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
			SFM(playerid,GRAD2,"Info: You have upgraded the Edge: %s.",trait);
			format(query,sizeof query,"UPDATE sheet SET value = value+1 WHERE trait = '%s' AND userid = %d AND type = 1",trait, User[playerid][SheetMonitorID]);
			db_query(Database, query);
			SetPVarInt(User[playerid][SheetMonitor], trait, GetPVarInt(User[playerid][SheetMonitor],trait)+1);
			Dialog_Show(playerid,dSheetSetEdgeOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet (Advisor)","Append Edge\nDelete Edge\nUpgrade Edge","Set","Cancel");
		}
		else
		{
			return MSG(playerid,GRAD2,"ERROR: Invalid Edge specified! Click on 'Append Edge' to set it first!");
		}
	}
	return 1;
}
Dialog:dSheetSetEdge(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		if(GetPVarInt(playerid, trait) > 0) return MSG(playerid,GRAD2,"ERROR: Invalid Edge specified or Edge already exists.");
		MSG(playerid,GRAD2,"Info: Character's Edge has been set. Don't forget to deduct experience points.");
		UpdateTrait(User[playerid][SheetMonitor], trait, 1, 1);
		Dialog_Show(playerid,dSheetSetEdgeOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet (Advisor)","Append Edge\nDelete Edge\nUpgrade Edge","Set","Cancel");
	}
	return 1;
}
Dialog:dSheetSetEdgeDel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		DeletePVar(User[playerid][SheetMonitor], trait);
		MSG(playerid,GRAD2,"Info: Character's Edge has been deleted.");
		new query[124];
		format(query,sizeof query,"DELETE FROM sheet WHERE trait = '%s' AND userid =  %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		db_query(Database, query);
		Dialog_Show(playerid,dSheetSetEdgeOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet (Advisor)","Append Edge\nDelete Edge\nUpgrade Edge","Set","Cancel");
	}
	return 1;
}
// Changeling Arts setup


// Changeling Arts finished
Dialog:dSheetSetBackgOpt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid,dSheetSetBackg,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Background (case-sensitive):","Set","Cancel");
			case 1: Dialog_Show(playerid,dSheetSetBackgDel,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Background (case-sensitive):","Delete","Cancel");
			case 2: Dialog_Show(playerid,dSheetSetBackgUp,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Background (case-sensitive):","Upgrade","Cancel");
			case 3: Dialog_Show(playerid,dSheetSetBackgDown,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Background (case-sensitive):","Downgrade","Cancel");
		}
	}
}
Dialog:dSheetSetBackgDown(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		new query[124];
		format(query,sizeof query,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 2",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
			SFM(playerid,GRAD2,"Info: You have downgraded the Background: %s.",trait);
			format(query,sizeof query,"UPDATE sheet SET value = value-1 WHERE trait = '%s' AND userid = %d AND type = 2",trait, User[playerid][SheetMonitorID]);
			db_query(Database, query);
			SetPVarInt(User[playerid][SheetMonitor], trait, GetPVarInt(User[playerid][SheetMonitor],trait)-1);
			Dialog_Show(playerid,dSheetSetBackgDown,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Background (case-sensitive):","Downgrade","Cancel");
			if(User[playerid][Userrace] == 1)// vampire
			{
				if(!strcmp("Generation", inputtext))
				{
					UpdateTrait(User[playerid][SheetMonitor], "vGeneration", GetPVarInt(User[playerid][SheetMonitor],"vGeneration")+1);
				}
			}
		}
		else
		{
			return MSG(playerid,GRAD2,"ERROR: Invalid Background specified! Click on 'Append Background' to set it first!");
		}
	}
	return 1;
}
Dialog:dSheetSetBackgUp(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		new query[124];
		format(query,sizeof query,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 2",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
			SFM(playerid,GRAD2,"Info: You have upgraded the Background: %s.",trait);
			format(query,sizeof query,"UPDATE sheet SET value = value+1 WHERE trait = '%s' AND userid = %d AND type = 2",trait, User[playerid][SheetMonitorID]);
			db_query(Database, query);
			SetPVarInt(User[playerid][SheetMonitor], trait, GetPVarInt(User[playerid][SheetMonitor],trait)+1);
			Dialog_Show(playerid,dSheetSetBackgUp,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Background (case-sensitive):","Upgrade","Cancel");
			if(User[playerid][Userrace] == 1)// vampire
			{
				if(!strcmp("Generation", inputtext))
				{
					UpdateTrait(User[playerid][SheetMonitor], "vGeneration", GetPVarInt(User[playerid][SheetMonitor],"vGeneration")-1);
				}
			}
		}
		else
		{
			return MSG(playerid,GRAD2,"ERROR: Invalid Background specified! Click on 'Append Background' to set it first!");
		}
	}
	return 1;
}
Dialog:dSheetSetBackg(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's Background has been set.");
		UpdateTrait(User[playerid][SheetMonitor], trait, 1, 2);
		if(User[User[playerid][SheetMonitor]][Userrace] == 1)// vampire
		{
			if(!strcmp("Generation", inputtext))
			{
				UpdateTrait(User[playerid][SheetMonitor], "vGeneration", GetPVarInt(User[playerid][SheetMonitor],"vGeneration")-1);
			}
		}
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);	
	}
	return 1;
}
Dialog:dSheetSetBackgDel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		DeletePVar(User[playerid][SheetMonitor], trait);
		MSG(playerid,GRAD2,"Info: Character's Background has been deleted.");
		new query[124];
		format(query,sizeof query,"DELETE FROM sheet WHERE trait = '%s' AND userid =  %d AND type = 2",trait,User[playerid][SheetMonitorID]);
		db_query(Database, query);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);
	}
	return 1;
}
Dialog:dSheetSetGiftsOpt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid,dSheetSetGiftsLevel,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the level of the Gift (number):","Set","Cancel");
			//Dialog_Show(playerid,dSheetSetGifts,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Gift (case-sensitive):","Set","Cancel");
			case 1: Dialog_Show(playerid,dSheetSetGiftsDel,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Gift (case-sensitive):\nReplace ' with `; for example: Apecraft`s Blessing, not Apecraft's Blessing","Set","Cancel");
		}
	}
}
Dialog:dSheetSetGiftsLevel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged]) return MSG(playerid,GOLD,"An error has occured.");
		if(!IsNumeric(inputtext)) return Dialog_Show(playerid,dSheetSetGiftsLevel,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the level of the Gift (number):","Set","Cancel");
		new level = strval(inputtext);
		if(level < 1 || level > 5) return Dialog_Show(playerid,dSheetSetGiftsLevel,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the level of the Gift (number):","Set","Cancel");
		SetPVarInt(playerid, "pGiftsLevelSelected", level);
		Dialog_Show(playerid,dSheetSetGifts,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Gift (case-sensitive):\nReplace ' with `; for example: Apecraft`s Blessing, not Apecraft's Blessing","Set","Cancel");
	}
	return 1;
}
Dialog:dSheetSetGifts(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged]) return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Character's Gift has been set.");
		UpdateTrait(User[playerid][SheetMonitor], trait, GetPVarInt(playerid, "pGiftsLevelSelected"), 1);	
		DeletePVar(playerid, "pGiftsLevelSelected");
	}
	return 1;
}
Dialog:dSheetSetGiftsDel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		DeletePVar(playerid, trait);
		MSG(playerid,GRAD2,"Info: Character's Gift has been deleted.");
		new query[124];
		format(query,sizeof query,"DELETE FROM sheet WHERE trait = '%s' AND userid =  %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		db_query(Database, query);
	}
	return 1;
}
Dialog:dSheetSetNuminaOpt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid,dSheetSetNumina,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of Numina (case-sensitive):","Set","Cancel");
			case 1: Dialog_Show(playerid,dSheetSetNuminaDel,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of Numina (case-sensitive):","Set","Cancel");
			case 2: Dialog_Show(playerid,dSheetSetNuminaUp,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of Numina (case-sensitive):","Upgrade","Cancel");
		}
	}
}
Dialog:dSheetSetNumina(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged]) return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		if(GetPVarInt(playerid, trait) > 0) return MSG(playerid,GRAD2,"ERROR: Specified Numina Path already exists! Click 'Upgrade Numina' option to upgrade it.");
		new freebies = GetPVarInt(User[playerid][SheetMonitor], "sFreebie");
		new fresh = GetPVarInt(User[playerid][SheetMonitor], "FreshCS");
		new cost = 5;
		if(freebies >= 5 && fresh > 0)
		{
			if(freebies < 5)
				return MSG(playerid, GOLD, "ERROR:"GR" Player is in character creation phase and they do not have enough freebies to afford this upgrade.");
			UpdateTrait(User[playerid][SheetMonitor], "sFreebie", freebies-cost, 1);
			SFM(playerid, WHITE, "SERVER: %d freebies have been taken from %s for setting %s.", cost, sendername(User[playerid][SheetMonitor]), trait);
		}
		else
		{
			return MSG(playerid, GOLD, "ERROR:"GR" Player is not in character creation phase or they do not have enough freebies to afford this upgrade.");
		}
		MSG(playerid,WHITE,"SERVER: Character's Numina has been set. ");
		UpdateTrait(User[playerid][SheetMonitor], trait, 1, 1);	
	}
	return 1;
}
Dialog:dSheetSetNuminaUp(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged]) return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		new query[124];
		format(query,sizeof query,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, query);
		new cost = 5;
		if(db_num_rows(Result))
		{
			new freebies = GetPVarInt(User[playerid][SheetMonitor], "sFreebie");
			new fresh = GetPVarInt(User[playerid][SheetMonitor], "FreshCS");
			if(freebies > 0 && fresh > 0)
			{
				if(freebies < cost)
					return MSG(User[playerid][SheetMonitor], GOLD, "ERROR:"GR" Player is in character creation phase, and they do not have enough freebies to afford this upgrade.");
				UpdateTrait(User[playerid][SheetMonitor], "sFreebie", freebies-(cost*GetPVarInt(User[playerid][SheetMonitor], trait)), 1);
				SFM(playerid, WHITE, "SERVER: %d freebies have been taken from %s for upgrading %s.",freebies-(cost*GetPVarInt(User[playerid][SheetMonitor], trait)), sendername(User[playerid][SheetMonitor]), trait);
			}
			else
			{
				return MSG(playerid, GOLD, "ERROR:"GR" Player is in character creation phase, and they do not have enough freebies to afford this upgrade.");
			}
			SFM(playerid,GRAD2,"Info: You have upgraded Numina: %s.",trait);
			format(query,sizeof query,"UPDATE sheet SET value = value+1 WHERE trait = '%s' AND userid = %d AND type = 1",trait, User[playerid][SheetMonitorID]);
			db_query(Database, query);
			SetPVarInt(playerid, trait, GetPVarInt(playerid,trait)+1);
			Dialog_Show(playerid,dSheetSetNuminaUp,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of Numina (case-sensitive):","Upgrade","Cancel");
		}
		else
		{
			return MSG(playerid,GRAD2,"ERROR: Invalid Numina specified! Click on 'Set Numina' to set it first!");
		}
	}
	return 1;
}
Dialog:dSheetSetNuminaDel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		DeletePVar(User[playerid][SheetMonitor], trait);
		MSG(playerid,GRAD2,"Info: Character's Numina has been deleted.");
		new query[124];
		format(query,sizeof query,"DELETE FROM sheet WHERE trait = '%s' AND userid =  %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		db_query(Database, query);
	}
	return 1;
}
Dialog:dSheetSetDisciplinesOpt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid,dSheetSetDisciplines,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Discipline (case-sensitive):","Set","Cancel");
			case 1: Dialog_Show(playerid,dSheetSetDisciplinesDel,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Discipline (case-sensitive):","Set","Cancel");
		}
	}
}
Dialog:dSheetSetDisciplines(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged]) return MSG(playerid,GOLD,"An error has occured.");
		new bool:found;

		for(new i = 0; i < sizeof(rDisciplines); i++)
		{
			if(!strcmp(inputtext, rDisciplines[i]))
			{
				new trait[MAX_TRAIT_NAME];
				strcat(trait, inputtext);
				SetPVarInt(User[playerid][SheetMonitor], trait, 0);
				MSG(playerid,GRAD2,"Info: Character's Discipline has been set.");
				UpdateTrait(User[playerid][SheetMonitor], trait, 0, 1);		
				found = true;
				break;
			}
		}
		if(!found) return MSG(playerid,GRAD2,"ERROR: Invalid discipline specified!");
	}
	return 1;
}
Dialog:dSheetSetDisciplinesDel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!User[User[playerid][SheetMonitor]][Logged])
			return MSG(playerid,GOLD,"An error has occured.");
		new bool:found;
		for(new i = 0; i < sizeof(rDisciplines); i++)
		{
			if(!strcmp(rDisciplines[i],inputtext))
			{
				new trait[MAX_TRAIT_NAME];
				strcat(trait, inputtext);
				DeletePVar(User[playerid][SheetMonitor], trait);
				MSG(playerid,GRAD2,"Info: Character's Discipline has been deleted.");
				new query[124];
				format(query,sizeof query,"DELETE FROM sheet WHERE trait = '%s' AND userid =  %d AND type = 1",trait,User[playerid][SheetMonitorID]);
				db_query(Database, query);
				found = true;
			}
		}
		if(!found) return MSG(playerid,GRAD2,"ERROR: Invalid discipline specified!");
	}
	return 1;
}
stock UpgradeTrait(playerid, trait[])
{
	new cost = GetExperienceCost(playerid, trait),
		xp = GetPVarInt(playerid, "Experience"),
		limit = 5,
		value = GetPVarInt(playerid, trait),
		bool:special; // special here means that it is a type 3 trait (secondary powers)
	if(strfind(trait, "Willpower", false) != -1)
	{
		if(User[playerid][Useradmin] > 0)
			limit = 10;
		else limit = 5;
	}
	if(strfind(trait, "Rage", false) != -1 || strfind(trait, "Gnosis", false) != -1)
	{
		if(User[playerid][Useradmin] > 0)
			limit = 10;
		else limit = 3;
	}
	if(strfind(trait, "Humanity/Path", false) != -1)
	{
		if(User[playerid][Useradmin] > 0)
			limit = 10;
		else limit = 7;
	}
	if(strfind(trait, "Conviction", false) != -1 && User[playerid][Userrace] == 4)
	{
		if(User[playerid][Useradmin] > 0)
			limit = 10;
		else limit = 7;
	}
	if(strfind(trait, "Vision", false) != -1 || strfind(trait, "Zeal", false) != -1 || strfind(trait, "Mercy", false) != -1)
	{
		if(User[playerid][Useradmin] > 0)
			limit = 10;
		else limit = 5;
		special = true;
	}
	if(strfind(trait, "Actor", false) != -1 || strfind(trait, "Fae", false) != -1 || strfind(trait, "Nature", false) != -1
	|| strfind(trait, "Prop", false) != -1 || strfind(trait, "Scene", false) != -1 || strfind(trait, "Time", false) != -1)
	{
		if(User[playerid][Useradmin] > 0)
			limit = 10;
		else limit = 5;
		special = true;
	}
	for(new f = 0; f < sizeof(rDisciplines); f++)
	{
		if(!strcmp(trait, rDisciplines[f]))
		{
			if(User[playerid][Useradmin] > 0)
				limit = 10;
			else limit = 5;			
		}
	}
	for(new w = 0; w < sizeof(rLores); w++)
	{
		if(!strcmp(trait, rLores[w]))
		{
			limit = 5;
		}
	}
	for(new s = 0; s < sizeof(rSpheres); s++)
	{
		if(!strcmp(trait, rSpheres[s]) && User[playerid][Userrace] == 3) 
		{
			limit = GetPVarInt(playerid, "Arete");			
		}
	}
	for(new h = 0; h < sizeof(rArts); h++)
	{
		if(!strcmp(trait, rArts[h]))
		{
			if(User[playerid][Useradmin] > 0)
				limit = 10;
			else limit = 5;					
		}
	}		
	if(cost == -1) // -1 means current rating, so the cost is the current rating (value) of the trait
		cost = value;
	else
	{
		printf("[COST BEFORE ANYTHING] COST IS %d", cost);
		new bool:mathit = true;
		// mathit means the cost will be multiplied by the value of the trait, this is the default behaviour
		if(value == 0 && cost == 7) // if its a discipline
		{
			cost = 10;
			mathit = false;
		}
		if(value == 0 && cost != 10) // if its an ability
		{
			if(User[playerid][Userrace] == 6) 
			{ // New art upgrade: 7 xp
				new bool:art = false;
				for(new h = 0; h < sizeof(rArts); h++) 
				{
					if(!strcmp(trait, rArts[h]))
					{
						cost = 7;
						mathit = false;		
						art = true;	
					}
				}
				if(!art) {
					cost = 3;
					mathit = false;		
				}			
			} 
			else {
				cost = 3;
				mathit = false;
			}

		}
		if(value == 0 && cost == 5) // if its a lore
		{
			cost = 10;
		}
		if(value == 0 && cost == 3) // if its a Realm
		{
			print("!!!!!!!!!!!!!!!!! AM I HERE?! xxx!!!");
			cost = 5;
			mathit = false;
		}
		if(mathit) cost = cost*value;
 	}

	printf("[BEFORE] Cost for %s (%d): %d [Limit: %d] [CS: %s]",trait,value,cost,limit, User[playerid][Username]);
	if(value >= limit)
		return MSG(playerid,GRAD2,"ERROR:"GR" You cannot upgrade this trait anymore.");
	if(cost > xp) 
		return SFM(playerid,GRAD2,"ERROR:"GR" You don't have enough Experience Points to make this upgrade. (Cost: %d)", cost);
	new tra[MAX_TRAIT_NAME];
	strcat(tra, trait);
	UpdateTrait(playerid, "Experience", xp-cost, 0);
	if(!special) UpdateTrait(playerid, tra, value+1);
	else UpdateTrait(playerid, tra, value+1, 3, 1);
	SFM(playerid, GREEN,"Info:"W" You have upgraded %s. (Experience Spent: "R"%d"W"; Experience Left: "R"%d"W")",trait, cost, xp-cost);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	cmd_cs(playerid, "");
	printf("[%s][%s] %s (id:%d) has upgraded %s (Cost: %d).",PasteDate(),PasteTime(), sendernameEx(playerid), playerid, trait, cost);
	return 1;
}

// Changeling
new hChangelingSeeming[][] = 
{
	{"Childling"},
	{"Wilder"},
	{"Grump"}
};
// Demon
new hDemonFaction[][] = 
{
	{"Faustian"},
	{"Cryptic"},
	{"Luciferan"},
	{"Ravener"},
	{"Reconciler"}
};
new hDemonVisage[][] = 
{
	{"Bel"},
	{"Nusku"},
	{"Qingu"},
	{"Dagan"},
	{"Anshar"},
	{"Ellil"},
	{"Kishar"},
	{"Antu"},
	{"Mummu"},
	{"Ninsun"},
	{"Nedu"},
	{"Shamash"},
	{"Ishhara"},
	{"Adad"},
	{"Mammetum"},
	{"Zaltu"},
	{"Ninurtu"},
	{"Aruru"},
	{"Namtar"},
	{"Nergal"},
	{"Ereshkigal"}
};
new hDemonLore[][] = 
{
	{"Lore of the Celestials,Lore of the Flames,Lore of Radiance"}, // Devil
	{"Lore of the Winds,Lore of Awakening,Lore of the Firmament"}, // Scourges
	{"Lore of the Earth,Lore of the Forge,Lore of Paths"}, // Malefactor
	{"Lore of Light,Lore of Patterns,Lore of Portals"}, // Fiend
	{"Lore of Longing,Lore of Storms,Lore of Transfiguration"}, // Defiler
	{"Lore of the Beast,Lore of the Flesh,Lore of the Wild"}, // Devourer
	{"Lore of Death,Lore of the Realms,Lore of the Spirit"} // Slayer
};
new hDemonHouse[][] = 
{
	{"Namaru", 4}, // Devil
	{"Asharu", 3}, // Scourges
	{"Annunaki", 3}, // Malefactor
	{"Neberu", 3}, // Fiend
	{"Lammasu", 3}, // Defiler
	{"Rabisu", 4}, // Devourer
	{"Halaku", 4} // Slayer
};
stock GetTormentFromHouse(house[MAX_TRAIT_NAME])
{
	if(!strcmp(house, "Namaru"))	return 4;
	if(!strcmp(house, "Asharu"))	return 3;
	if(!strcmp(house, "Annunaki"))	return 3;
	if(!strcmp(house, "Neberu"))	return 3;
	if(!strcmp(house, "Lammasu"))	return 3;
	if(!strcmp(house, "Rabisu"))	return 4;
	if(!strcmp(house, "Halaku"))	return 4;
	return 4;
}
Dialog:dSheetSetHouse(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new bool:failure = true;
		for(new i = 0; i < sizeof(hDemonHouse); i++) 
		{
			if(!strcmp(hDemonHouse[i], inputtext))	
			{
				new trait[MAX_TRAIT_NAME];
				strcat(trait, inputtext);
				MSG(playerid,GRAD2,"Info: Character's House has been set.");
				UpdateTraitString(User[playerid][SheetMonitor], "House", trait);
				failure = false;
				UpdateTrait(playerid, "Torment", GetTormentFromHouse(trait));
				new disc[3][64];
				sscanf(hDemonLore[i],"p<,>s[64]s[64]s[64]",disc[0],disc[1],disc[2]);
				/*format(large_string, sizeof large_string, "Lore of the Fundament\nLore of Humanity\n%s\n%s\n%s", disc[0], disc[1], disc[2]);
				print(large_string);
				Dialog_Show(playerid,dSheetSetHouseLore,DIALOG_STYLE_LIST,"Lore Selection",large_string,"Select","");*/
				UpdateTrait(playerid, disc[0], 0, 1);
				UpdateTrait(playerid, disc[1], 0, 1);
				UpdateTrait(playerid, disc[2], 0, 1);
				new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
				cmd_cs(playerid, modify);	
				break;
			}	
		}
		if(failure)
		{
			MSG(playerid, GOLD, "ERROR:"GR" Invalid House specified.");
			new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
			cmd_cs(playerid, modify);	
		}
	}
	return 1;
}
// Dialog:dSheetSetHouseLore(playerid, response, listitem, inputtext[])
// {
// 	if(response)
// 	{
		
// 	}
// 	return 1;
// }
Dialog:dSheetSetFaction(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new bool:failure = true;
		for(new i = 0; i < sizeof(hDemonFaction); i++) 
		{
			if(!strcmp(hDemonFaction[i], inputtext))	
			{
				new trait[MAX_TRAIT_NAME];
				strcat(trait, inputtext);
				MSG(playerid,GRAD2,"Info: Character's Faction has been set.");
				UpdateTraitString(User[playerid][SheetMonitor], "Faction", trait);
				failure = false;
				new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
				cmd_cs(playerid, modify);	
				break;
			}	
		}
		if(failure)
		{
			MSG(playerid, GOLD, "ERROR:"GR" Invalid Faction specified.");
			new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
			cmd_cs(playerid, modify);	
		}
	}
	return 1;
}
Dialog:dSheetSetVisage(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new bool:failure = true;
		for(new i = 0; i < sizeof(hDemonVisage); i++) 
		{
			if(!strcmp(hDemonVisage[i], inputtext))	
			{
				new trait[MAX_TRAIT_NAME];
				strcat(trait, inputtext);
				MSG(playerid,GRAD2,"Info: Character's Visage has been set.");
				UpdateTraitString(User[playerid][SheetMonitor], "Visage", trait);
				failure = false;
				new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
				cmd_cs(playerid, modify);	
				break;
			}	
		}
		if(failure)
		{
			MSG(playerid, GOLD, "ERROR:"GR" Invalid Visage specified.");
			new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
			cmd_cs(playerid, modify);	
		}
	}
	return 1;
}

//dSheetSetCreed
Dialog:dSheetSetCreed(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new bool:failure = true;
		for(new i = 0; i < sizeof(hCreeds); i++) 
		{
			if(!strcmp(hCreeds[i], inputtext))	
			{
				new trait[MAX_TRAIT_NAME];
				strcat(trait, inputtext);
				MSG(playerid,GRAD2,"Info: Character's Creed has been set.");
				UpdateTraitString(User[playerid][SheetMonitor], "Creed", trait);
				failure = false;
				new conv = 3;
				switch(i)
				{
					case 1: conv = 4;
					case 6: conv = 4;
				}
				UpdateTrait(playerid, "sConviction", conv);
				UpdateTrait(playerid, "Conviction", conv);
				new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
				cmd_cs(playerid, modify);	
				break;
			}	
		}
		if(failure)
		{
			MSG(playerid, GOLD, "ERROR:"GR" Invalid Creed specified.");
			new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
			cmd_cs(playerid, modify);	
		}
	}
	return 1;
}
Dialog:dSheetSetpVirtue(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new bool:failure = true;
		for(new i = 0; i < sizeof(hVirtues); i++) 
		{
			if(!strcmp(hVirtues[i], inputtext))	
			{
				new trait[MAX_TRAIT_NAME];
				strcat(trait, inputtext);
				MSG(playerid,GRAD2,"Info: Character's Primary Virtue has been set.");
				UpdateTraitString(User[playerid][SheetMonitor], "Primary Virtue", trait);
				new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
				cmd_cs(playerid, modify);	
				failure = false;
				break;
			}	
		}
		if(failure)
		{
			MSG(playerid, GOLD, "ERROR:"GR" Invalid Primary Virtue specified.");
			new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
			cmd_cs(playerid, modify);	
		}
	}
	return 1;
}
// Changelings
Dialog:dSheetSetKith(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Kith has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Kith", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);		
	}
}
Dialog:dSheetSetCourt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Court has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Court", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);		
	}
}
Dialog:dSheetSetLegacy(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: Legacy has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "Legacy", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);		
	}
}
Dialog:dSheetSetChangelingHouse(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		MSG(playerid,GRAD2,"Info: House has been set.");
		UpdateTraitString(User[playerid][SheetMonitor], "House", trait);
		new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
		cmd_cs(playerid, modify);		
	}
}
Dialog:dSheetSetSeeming(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new bool:failure = true;
		for(new i = 0; i < sizeof(hChangelingSeeming); i++) 
		{
			if(!strcmp(hChangelingSeeming[i], inputtext))	
			{
				new trait[MAX_TRAIT_NAME];
				strcat(trait, inputtext);
				MSG(playerid,GRAD2,"Info: Seeming has been set.");
				UpdateTraitString(User[playerid][SheetMonitor], "Seeming", trait);
				failure = false;
				new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
				cmd_cs(playerid, modify);	
				break;
			}	
		}
		if(failure)
		{
			MSG(playerid, GOLD, "ERROR:"GR" Invalid Seeming specified.");
			new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);	
			cmd_cs(playerid, modify);	
		}
	}
	return 1;
}
// Changelings finished
Dialog:dSheet(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(User[playerid][Logged])
		{
			
			if(!User[User[playerid][SheetMonitor]][Logged]) return MSG(playerid,GOLD,"An error has occurred.");
			//---
			new bool:stop;
			if(listitem == 0) return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
			for(new trait = 0; trait < sizeof(sNoEdit); trait++)
			{
				if(strfind(inputtext, sNoEdit[trait], false) != -1)
				{
					MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
					stop = true;
					break;
				}
			}	
			if(stop) return 1;
			new trait[MAX_TRAIT_NAME];
			if(User[playerid][Userrace] == 1 
			|| User[playerid][Userrace] == 0 
			|| User[playerid][Userrace] == 3 
			|| User[playerid][Userrace] == 4 
			|| User[playerid][Userrace] == 5 
			|| User[playerid][Userrace] == 6 
			|| User[playerid][Useradmin] != 0)
			{
				if(strfind(inputtext, "Nature:", false) != -1)
				{
					GetPVarString(User[playerid][SheetMonitor], "Nature", trait, MAX_TRAIT_NAME);
					if(User[playerid][Useradmin] == 0)
					{
						if(isnull(trait)) 
							Dialog_Show(playerid,dSheetSetNature,DIALOG_STYLE_INPUT,"Interactive Character Sheet","A character's Nature is her true self, her innermost being the person she truly is.\n** Type (/learn archetypes) to bring up a sample list for Nature and Demeanor.","Set","Cancel");
						else 
							MSG(playerid, GOLD, "ERROR:"GR" Nature is already set.");
					}
					else
					{
						Dialog_Show(playerid,dSheetSetNature,DIALOG_STYLE_INPUT,"Interactive Character Sheet","A character's Nature is her true self, her innermost being the person she truly is.\n** Type (/learn archetypes) to bring up a sample list for Nature and Demeanor.","Set","Cancel");
					}
					return 1;		
				}
				if(strfind(inputtext, "Demeanor:", false) != -1)
				{
					Dialog_Show(playerid,dSheetSetDemeanor,DIALOG_STYLE_INPUT,
					"Interactive Character Sheet","A character's Demeanor is the face which she shows to the world.\n** Type (/learn archetypes) to bring up a sample list for Nature and Demeanor.","Set","Cancel");			
					return 1;
				}
				if(strfind(inputtext, "Essence:", false) != -1)
				{
					GetPVarString(User[playerid][SheetMonitor], "Essence", trait, MAX_TRAIT_NAME);
					//if(isnull(trait))
					Dialog_Show(playerid,dSheetSetEssence,DIALOG_STYLE_INPUT,
					"Interactive Character Sheet","The personality of an Avatar, defined as either Dynamic, Pattern, Questing, or Primordial; known by Technocrats as an Eidolon. ","Set","Cancel");
					return 1;		
				}
				if(strfind(inputtext, "Paradigm:", false) != -1)
				{
					GetPVarString(User[playerid][SheetMonitor], "Paradigm", trait, MAX_TRAIT_NAME);
					Dialog_Show(playerid,dSheetSetParadigm,DIALOG_STYLE_INPUT,
					"Interactive Character Sheet","Paradigm is a model of reality that reflects a system of belief.","Set","Cancel");
					return 1;		
				}
				if(strfind(inputtext, "Affiliation:", false) != -1)
				{
					GetPVarString(User[playerid][SheetMonitor], "Affiliation", trait, MAX_TRAIT_NAME);
					if(User[playerid][Useradmin] != 0)
					{
						if(User[User[playerid][SheetMonitor]][Userrace] == 0) Dialog_Show(playerid,dSheetSetAff,DIALOG_STYLE_INPUT,"Interactive Character Sheet","This trait represents your character's affiliation. You can only set your affiliation once, to change it you need advisors' supervision.\nValid Affiliations: None, Ghoul, Kinfolk, Society of Leopold, Government Agency, The Arcanum","Set","Cancel");
						else if(User[User[playerid][SheetMonitor]][Userrace] == 3) Dialog_Show(playerid,dSheetSetAff,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Mages tend to be social creatures. The Affiliation Trait reflects your character's overall allegiance (Traditions, Technocracy, Disparate), and the next entry defines her particular group within that affiliation. ","Set","Cancel");	
					}
					else
					{
						if(isnull(trait))
						{
							if(User[User[playerid][SheetMonitor]][Userrace] == 0) Dialog_Show(playerid,dSheetSetAff,DIALOG_STYLE_INPUT,"Interactive Character Sheet","This trait represents your character's affiliation. You can only set your affiliation once, to change it you need advisors' supervision.\nValid Affiliations: Ghoul, Kinfolk, Society of Leopold, Government Agency, The Arcanum","Set","Cancel");
							else if(User[User[playerid][SheetMonitor]][Userrace] == 3) Dialog_Show(playerid,dSheetSetAff,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Mages tend to be social creatures. The Affiliation Trait reflects your character's overall allegiance (Traditions, Technocracy, Disparate), and the next entry defines her particular group within that affiliation. ","Set","Cancel");
						}
						else MSG(playerid,GRAD2,"ERROR: Affiliation is already set.");
					}
					return 1;
				}				
				if(strfind(inputtext, "Vampiric Age:", false) != -1)
				{
					if(GetPVarInt(playerid,"vAge") < 1 || User[playerid][Useradmin] > 0) Dialog_Show(playerid,dSheetSetAge,DIALOG_STYLE_INPUT,"Interactive Character Sheet","One of the ways that Vampires determine the social pecking order is through age.\nThe older you are, the less leniency you'll receive in character when making mistakes.","Set","Cancel");			
					return 1;
				}
				if(strfind(inputtext, "Creed:", false) != -1)
				{
					GetPVarString(User[playerid][SheetMonitor], "Creed", trait, MAX_TRAIT_NAME);
					if(!isnull(trait) && User[playerid][Useradmin] < 4) return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
					Dialog_Show(playerid,dSheetSetCreed,DIALOG_STYLE_INPUT,
					"Interactive Character Sheet","Select your character's system of belief.\nValid Creeds: Innocence, Martyrdom, Redemption, Visionary, Defense, Judgment, Vengeance","Set","Cancel");
					return 1;		
				}
				if(strfind(inputtext, "Primary Virtue:", false) != -1)
				{
					GetPVarString(User[playerid][SheetMonitor], "Primary Virtue", trait, MAX_TRAIT_NAME);
					if(!isnull(trait) && User[playerid][Useradmin] < 4) return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
					Dialog_Show(playerid,dSheetSetpVirtue,DIALOG_STYLE_INPUT,
					"Interactive Character Sheet","Select your character's primary virtue.\nValid Virtues: Mercy, Vision, Zeal","Set","Cancel");
					return 1;		
				}
				if(listitem > 10 && GetPVarInt(playerid, "FreshCS") == 10)
				{
					new svirtues = GetPVarInt(playerid, "sVirtues");
					if(svirtues == 0) cmd_next(playerid, "");
					if(strfind(inputtext, "Mercy", false) != -1 )
					{			
						new fix = GetPVarInt(playerid, "Mercy");
						if(fix == 0) RemoveTrait(playerid, "Mercy");
						UpdateTrait(playerid, "Mercy", fix+1, 3);
						UpdateTrait(playerid, "sVirtues", svirtues-1, 9);
						MSG(playerid, GOLD, "Info:"GR" You have spent one starting point in Mercy.");	
						if(svirtues-1 == 0) cmd_next(playerid, "");		
						cmd_cs(playerid, "");
						return 1;
					}	
					if(strfind(inputtext, "Vision", false) != -1)
					{
						new fix = GetPVarInt(playerid, "Vision");
						if(fix == 0) RemoveTrait(playerid, "Vision");
						UpdateTrait(playerid, "Vision", GetPVarInt(playerid, "Vision")+1, 3);
						UpdateTrait(playerid, "sVirtues", svirtues-1, 9);
						MSG(playerid, GOLD, "Info:"GR" You have spent one starting point in Vision.");	
						if(svirtues-1 == 0) cmd_next(playerid, "");		
						cmd_cs(playerid, "");
						return 1;
					}
					if(strfind(inputtext, "Zeal", false) != -1)
					{
						new fix = GetPVarInt(playerid, "Zeal");
						if(fix == 0) RemoveTrait(playerid, "Zeal");
						UpdateTrait(playerid, "Zeal", GetPVarInt(playerid, "Zeal")+1, 3);
						UpdateTrait(playerid, "sVirtues", svirtues-1, 9);
						MSG(playerid, GOLD, "Info:"GR" You have spent one starting point in Zeal.");
						if(svirtues-1 == 0) cmd_next(playerid, "");	
						cmd_cs(playerid, "");	
						return 1;
					}					
				}
				// Demons 
				if(strfind(inputtext, "House:", false) != -1 && User[User[playerid][SheetMonitor]][Userrace] == 5) // Demon
				{
					GetPVarString(User[playerid][SheetMonitor], "House", trait, MAX_TRAIT_NAME);
					if(!isnull(trait) && User[playerid][Useradmin] < 4) return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
					Dialog_Show(playerid,dSheetSetHouse,DIALOG_STYLE_INPUT,
					"Interactive Character Sheet","The demonic House the character belongs to. A demon's House influences his attitude, outlook and abilities.\nValid Houses: Namaru, Asharu, Annunaki, Neberu, Lammasu, Rabisu, Halaku","Set","Cancel");
					return 1;		
				}
				if(strfind(inputtext, "Faction:", false) != -1)
				{

					GetPVarString(User[playerid][SheetMonitor], "Faction", trait, MAX_TRAIT_NAME);
					if(!isnull(trait) && User[playerid][Useradmin] < 4) return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
					Dialog_Show(playerid,dSheetSetFaction,DIALOG_STYLE_INPUT,
					"Interactive Character Sheet","The faction that the character belongs to. A demon's choice of faction influences his outlook on humanity, the future of the fallen and his attitudes toward other demons.\nValid Factions: Faustian, Cryptic, Luciferan, Ravener, Reconciler","Set","Cancel");
					return 1;		
				}	
				if(strfind(inputtext, "Visage:", false) != -1)
				{
					GetPVarString(User[playerid][SheetMonitor], "Visage", trait, MAX_TRAIT_NAME);
					if(!isnull(trait) && User[playerid][Useradmin] < 4) return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
					Dialog_Show(playerid,dSheetSetVisage,DIALOG_STYLE_INPUT,
					"Interactive Character Sheet","This is the name of the character's apocalyptic form, determined by the character's primary lore.\nValid Visages:\n\tBel (The Visage of Celestials)\n\tNusku (The Visage of the Flames)\n\tQingu (The Visage Of Radiance)\n\tDagan (The Visage of Awakenings)\n\tAnshar (The Visage of the Firmament)\n\tElill (The Visage of the Winds)\n\tKishar (The Visage of the Earth)\n\tAntu (The Visage of the Paths)\n\tMummu (The Visage of the Forge)\n\tNinsun (The Visage of Patterns)\n\tNedu (The Visage of Portals)\n\tShamash (The Visage of Light)\n\tIshhara (The Visage of Longing)\n\tAdad (The Visage of Storms)\n\tMammetum (The Visage of Transfiguration)\n\tZaltu (The Visage of the Beast)\n\tNinurtu (The Visage of the Wild)\n\tAruru (The Visage of Flesh)\n\tNamtar (The Visage of Death)\n\tNergal (The Visage of the Spirit)\n\tEreshkigal (The Visage of the Realms)","Set","Cancel");
					return 1;		
				}
				if(strfind(inputtext, "Torment", false) != -1)
				{
					new thing = GetPVarInt(User[playerid][SheetMonitor],"tTorment");
					new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);
					if(thing >= 9)
					{
						UpdateTrait(User[playerid][SheetMonitor], "Torment", GetPVarInt(User[playerid][SheetMonitor],"Torment")+1, 0);
						RemoveTrait(User[playerid][SheetMonitor], "tTorment");
						MSG(playerid,RED,"Info: Permanent Torment increased.");
						return cmd_cs(playerid, modify);
					}
					UpdateTrait(User[playerid][SheetMonitor], "tTorment", thing+1, 9);
					MSG(playerid,RED,"Info: Temporary Torment has increased.");
					return cmd_cs(playerid, modify);		
				}
				// Changelings 
				// Banality
				if(strfind(inputtext, "Banality", false) != -1)
				{
					new thing = GetPVarInt(User[playerid][SheetMonitor],"tBanality");
					new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);
					if(thing >= 9)
					{
						UpdateTrait(User[playerid][SheetMonitor], "Banality", GetPVarInt(User[playerid][SheetMonitor],"Banality")+1, 0);
						RemoveTrait(User[playerid][SheetMonitor], "tBanality");
						MSG(playerid,RED,"Info: Permanent Banality increased.");
						return cmd_cs(playerid, modify);
					}
					UpdateTrait(User[playerid][SheetMonitor], "tBanality", thing+1, 9);
					MSG(playerid,RED,"Info: Temporary Banality has increased.");
					return cmd_cs(playerid, modify);		
				}
				if(strfind(inputtext, "Kith:", false) != -1)
				{
					GetPVarString(User[playerid][SheetMonitor], "Kith", trait, MAX_TRAIT_NAME);
					if(!isnull(trait) && User[playerid][Useradmin] < 4) return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
					Dialog_Show(playerid,dSheetSetKith,DIALOG_STYLE_INPUT,
					"Interactive Character Sheet","Kith is the particular race of changelings your character is.\nExample choices: Sidhe, Pooka, Sluagh, etc.","Set","Cancel");
					return 1;		
				}
				if(strfind(inputtext, "Court:", false) != -1)
				{
					GetPVarString(User[playerid][SheetMonitor], "Court", trait, MAX_TRAIT_NAME);
					if(!isnull(trait) && User[playerid][Useradmin] < 4) return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
					Dialog_Show(playerid,dSheetSetCourt,DIALOG_STYLE_INPUT,
					"Interactive Character Sheet","The court that the character belongs to.","Set","Cancel");
					return 1;		
				}	
				if(strfind(inputtext, "Legacy:", false) != -1)
				{
					
					GetPVarString(User[playerid][SheetMonitor], "Legacy", trait, MAX_TRAIT_NAME);
					if(!isnull(trait) && User[playerid][Useradmin] < 4) return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
					Dialog_Show(playerid,dSheetSetLegacy,DIALOG_STYLE_INPUT,
					"Interactive Character Sheet","Legacies are the archetypical roles a changeling plays in the narrative of her life.\nExample Seelie legacies:\nBumpkin, Courtier, Crafter, Dandy\nExample Unseelie legacies:\nBeast, Fatalist, Fool, Grotesque","Set","Cancel");
					return 1;		
				}
				if(strfind(inputtext, "Seeming:", false) != -1)
				{
					GetPVarString(User[playerid][SheetMonitor], "Seeming", trait, MAX_TRAIT_NAME);
					if(!isnull(trait) && User[playerid][Useradmin] < 4) return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
					Dialog_Show(playerid,dSheetSetSeeming,DIALOG_STYLE_INPUT,
					"Interactive Character Sheet","Seeming is your changeling's mindset.\nValid values: Childling, Wilder, Grump","Set","Cancel");
					return 1;		
				}
				if(strfind(inputtext, "House:", false) != -1 && User[User[playerid][SheetMonitor]][Userrace] == 6)
				{
					GetPVarString(User[playerid][SheetMonitor], "House", trait, MAX_TRAIT_NAME);
					if(!isnull(trait) && User[playerid][Useradmin] < 4) return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
					Dialog_Show(playerid,dSheetSetChangelingHouse,DIALOG_STYLE_INPUT,
					"Interactive Character Sheet","Families to which most nobles belong.\nExample Seelie houses:\nBeaumayn, Dougal, Eiluned, Fiona\nExample Unseelie houses:\nAesin, Ailil, Balor, Danaan","Set","Cancel");
					return 1;		
				}
			}
			if(strfind(inputtext, "Concept", false) != -1)
			{
				//GetPVarString(User[playerid][SheetMonitor], "Concept", trait, MAX_TRAIT_NAME);
				//if(isnull(trait))
				Dialog_Show(playerid,dSheetSetConcept,DIALOG_STYLE_INPUT,
				"Interactive Character Sheet","Your character's concept is a brief ''sketch'' of who your character is, anything from Crazed Vigilante to Aging Porn Star.\n** Press F6 and type (/learn concept) to bring up a list of sample concepts.","Set","Cancel");
				//else MSG(playerid,GRAD2,"ERROR: Concept is already set.");
				return 1;		
			}
	
			if(User[User[playerid][SheetMonitor]][Userrace] == 0 || User[playerid][Useradmin] > 0)
			{
				if(strfind(inputtext, "Numina", false) != -1) 
				{
					if(User[playerid][Useradmin] > 0)
					{
						Dialog_Show(playerid,dSheetSetNuminaOpt,DIALOG_STYLE_LIST,
						"Interactive Character Sheet","Append Numina\nDelete Numina\nUpgrade Numina","Set","Cancel");
					}	
					else MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
					return 1;
				}
			}
			if(User[User[playerid][SheetMonitor]][Userrace] == 1 || User[playerid][Useradmin] > 0)
			{
				if(strfind(inputtext, "Sire", false) != -1)
				{
					GetPVarString(User[playerid][SheetMonitor], "Sire", trait, MAX_TRAIT_NAME);
					if(isnull(trait))
						Dialog_Show(playerid,dSheetSetSire,DIALOG_STYLE_INPUT,
						"Interactive Character Sheet","Your sire's name.","Set","Cancel");
					else MSG(playerid,GRAD2,"ERROR: Sire is already set.");
					return 1;		
				}
				if(strfind(inputtext, "Disciplines", false) != -1) 
				{
					if(User[playerid][Useradmin] > 0)
					{
						Dialog_Show(playerid,dSheetSetDisciplinesOpt,DIALOG_STYLE_LIST,
						"Interactive Character Sheet","Set a Discipline\nDelete a Discipline","Set","Cancel");
					}	
					else MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
					return 1;
				}
			}
			
			if(User[User[playerid][SheetMonitor]][Userrace] == 2 || User[playerid][Useradmin] > 0)
			{
				if(strfind(inputtext, "Rank:", false) != -1)
				{
					if(User[playerid][Useradmin] > 0)
						Dialog_Show(playerid,dSheetSetRank,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the character's rank:","Set","Cancel");
					else MSG(playerid, GOLD, "SERVER:"GR" You need a moderator to edit this trait.");
					return 1;		
				}				
				if(strfind(inputtext, "Camp:", false) != -1)
				{
					Dialog_Show(playerid,dSheetSetCampName,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert your character's Camp Name:","Set","Cancel");
					return 1;		
				}
				if(strfind(inputtext, "Pack Name:", false) != -1)
				{
					Dialog_Show(playerid,dSheetSetPackName,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert your character's Pack Name:","Set","Cancel");
					return 1;		
				}
				if(strfind(inputtext, "Pack Totem:", false) != -1)
				{
					Dialog_Show(playerid,dSheetSetPackTotem,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert your character's Pack Totem:","Set","Cancel");
					return 1;		
				}
				if(strfind(inputtext, "Deed Name:", false) != -1)
				{
					Dialog_Show(playerid,dSheetSetDeedName,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert your character's Deed Name:","Set","Cancel");
					return 1;		
				}
				if(strfind(inputtext, "Gifts", false) != -1)
				{
					//SFM(playerid, -1, "admin %d fresh %d", User[playerid][Useradmin], GetPVarInt(playerid, "FreshCS"));
					if(User[playerid][Useradmin] > 0 && GetPVarInt(User[playerid][SheetMonitor], "FreshCS") == 0)
					{
						Dialog_Show(playerid,dSheetSetGiftsOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet","Set a Gift\nDelete a Gift","Set","Cancel");
					}	
					else
					{
						if(GetPVarInt(playerid, "FreshCS") == 8)
						{
							new gifts = GetPVarInt(playerid, "sGifts");
							if(strfind(inputtext, "Gifts", true) != -1)
							{
								if(gifts == 0)
									return cmd_next(playerid, "");
								Dialog_Show(playerid,dSheetBuildGiftOpt,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the category (Breed, Auspice or Tribe) of the starting Gift you wish to acquire:","Set","Close");
								return 1;
							}
							else
							{
								new str[120];
								format(str,sizeof str,"ERROR: You are supposed to choose 3 starting Gifts. (%d left)",gifts);
								MSG(playerid,GRAD2,str);	
							}
						}
					}
					return 1;
				}
				if(strfind(inputtext, "Glory", false) != -1)
				{
					if(User[playerid][Useradmin] > 0)
					{
						new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);
						new thing = GetPVarInt(User[playerid][SheetMonitor],"tGlory");
						if(thing >= 9)
						{
							UpdateTrait(User[playerid][SheetMonitor], "Glory", GetPVarInt(User[playerid][SheetMonitor],"Glory")+1, 0);
							RemoveTrait(User[playerid][SheetMonitor], "tGlory");
							MSG(playerid,GREEN,"Info:"GR" "R"Permanent"GR" Glory increased!");
							return cmd_cs(playerid, modify);
						}	
						UpdateTrait(User[playerid][SheetMonitor], "tGlory", thing+1, 9);
						MSG(playerid,GREEN,"Info:"GR" Temporary Glory increased!");
						return cmd_cs(playerid, modify);		
					}	
					else return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
				}
				if(strfind(inputtext, "Honor", false) != -1)
				{
					if(User[playerid][Useradmin] > 0)
					{
						new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);
						new thing = GetPVarInt(User[playerid][SheetMonitor],"tHonor");
						if(thing >= 9)
						{
							UpdateTrait(User[playerid][SheetMonitor], "Honor", GetPVarInt(User[playerid][SheetMonitor],"Honor")+1, 0);
							RemoveTrait(User[playerid][SheetMonitor], "tHonor");
							MSG(playerid,GREEN,"Info:"GR" "R"Permanent"GR" Honor increased!");
							return cmd_cs(playerid, modify);	
						}	
						UpdateTrait(User[playerid][SheetMonitor], "tHonor", thing+1, 9);
						MSG(playerid,GREEN,"Info:"GR" Temporary Honor increased!");
						return cmd_cs(playerid, modify);		
					}	
					else return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
				}
				if(strfind(inputtext, "Wisdom", false) != -1)
				{
					if(User[playerid][Useradmin] > 0)
					{
						new thing = GetPVarInt(User[playerid][SheetMonitor],"tWisdom");
						new modify[3];format(modify, 3, "%d", User[playerid][SheetMonitor]);
						if(thing >= 9)
						{
							UpdateTrait(User[playerid][SheetMonitor], "Wisdom", GetPVarInt(User[playerid][SheetMonitor],"Wisdom")+1, 0);
							RemoveTrait(User[playerid][SheetMonitor], "tWisdom");
							MSG(playerid,GREEN,"Info:"GR" Permanent "R"Wisdom"GR" increased!");
							return cmd_cs(playerid, modify);
						}
						UpdateTrait(User[playerid][SheetMonitor], "tWisdom", thing+1, 9);
						MSG(playerid,GREEN,"Info:"GR" Temporary Wisdom increased!");
						return cmd_cs(playerid, modify);		
					}	
					else return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be edited.");
				}
			}

			if(strfind(inputtext, "Arete", false) != -1) 
			{
				if(User[playerid][Userrace] == 3)
				{
					if(GetPVarInt(playerid, "FreshCS") == 11)
					{
						new freebie = GetPVarInt(playerid, "sFreebie"),
						arete = GetPVarInt(playerid, "Arete");
						if(arete > 2) return MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");	
						if(freebie == 0) cmd_next(playerid, "");
						if(freebie < 4) return SFM(playerid, GOLD, "ERROR:"GR" You cannot afford purchasing Arete with freebies. (Current Freebies: %d; Freebies Required: %d)", freebie, 4);
						UpdateTrait(playerid, "sFreebie", freebie-4, 9);
						UpdateTrait(playerid, "Arete", arete+1);
						SFM(playerid, GOLD, "Info:"GR" You have upgraded your Arete from %d to %d using %d freebies. (%d Freebies Left)", arete, arete+1, 4, freebie-4);
						cmd_cs(playerid, "");
						return 1;
					}
					else 
					{
						if(User[playerid][Useradmin] != 0)
						{
							return UpgradeTrait(User[playerid][SheetMonitor], "Arete");
						}
						else return MSG(playerid,GRAD2,"ERROR: You need an advisor to moderate Arete.");
					}
				}	
			}
			if(strfind(inputtext, "Sphere", true) != -1)
			{
				if(GetPVarInt(playerid, "FreshCS") == 11 && User[playerid][Userrace] == 3) 
				{
					new affinity[MAX_TRAIT_NAME];
					GetPVarString(playerid, "Affinity", affinity, MAX_TRAIT_NAME);
					if(isnull(affinity))
						return Dialog_Show(playerid,dSheetSelectAffinity,DIALOG_STYLE_INPUT,"Select Affinity Sphere","Insert the exact name of the Sphere (case-sensitive) you wish to identify as Affinity:","Set","Close");					
					if(GetPVarInt(playerid, "sSphere") > 0)
						return Dialog_Show(playerid,sdSheetSphereOpt,DIALOG_STYLE_LIST,"Sphere Interaction (Using: Sphere Starting Points)","Append Sphere\nUpgrade Sphere","Set","Close");	
					/*else if(GetPVarInt(playerid, "sFreebie") > 0)
						return Dialog_Show(playerid,dSheetSphereOpt,DIALOG_STYLE_LIST,"Sphere Interaction (Using: Freebie Points)","Append Sphere\nUpgrade Sphere","Set","Close");*/		
					cmd_next(playerid, "");
					return 1;
				}
				if(User[playerid][Useradmin] > 0)
				{
					return Dialog_Show(playerid,dSheetSetSphOpt,DIALOG_STYLE_LIST,
					"Interactive Character Sheet (Advisor)","Append Sphere\nDelete Sphere\nUpgrade Sphere","Set","Cancel");
				}	
				else MSG(playerid,GRAD2,"ERROR: You need an advisor to moderate Spheres.");
				return 1;
			}

			if(strfind(inputtext, "Quintessence", false) != -1) 
			{
				if(User[User[playerid][SheetMonitor]][Userrace] == 3)
				{
					if(GetPVarInt(playerid, "FreshCS") == 11)
					{
						new freebie = GetPVarInt(playerid, "sFreebie"),
						quint = GetPVarInt(playerid, "mQuintessence");
						if(quint > GetPVarInt(playerid, "Avatar")+GetPVarInt(playerid, "Arete")) return MSG(playerid,GRAD2,"ERROR: Specified trait cannot be upgraded anymore.");	
						if(freebie == 0) cmd_next(playerid, "");
						UpdateTrait(playerid, "sFreebie", freebie-1, 9);
						UpdateTrait(playerid, "mQuintessence", quint+4);
						UpdateTrait(playerid, "Quintessence", GetPVarInt(playerid, "Quintessence")+4);
						SFM(playerid, GOLD, "Info:"GR" You've bought four dots of Quintessence with a freebie point. (%d Freebies Left)", freebie-1);
						cmd_cs(playerid, "");
						return 1;
					}
				}	else return cmd_usequintessence(playerid, "1");
			}

			switch(User[playerid][Userrace]) 
			{
				case 0,1,3,4,5,6: // vampire, human, mage, hunter, demon, changeling
				{
					new	fresh = GetPVarInt(playerid, "FreshCS"); 
					stop = false;
					for(new i = 0; i < sizeof(sTraits); i++) 
					{
						if(strfind(inputtext, sTraits[i], false) != -1)  // player selected a valid trait
						{
							// -- Character Creation Process
							if(User[playerid][Userrace] == 1 && !strcmp(sTraits[i], "Appearance"))
							{
								new clan[MAX_TRAIT_NAME];
								GetPVarString(User[playerid][SheetMonitor], "Clan", clan, MAX_TRAIT_NAME);
								if(!strcmp(clan, "Nosferatu"))
									return MSG(playerid, GOLD, "ERROR:"GR" You are restricted from purchasing the Appearance attribute as a Nosferatu.");
							}
							if(fresh > 0 && User[playerid][SheetMonitor] == playerid) // <=== CHARACTER SHEET CREATION STAGE HERE!
							{
								switch(fresh)
								{
									case 1: // First part of the character sheet (before attributes)
									{
										MSG(playerid,GRAD2,"ERROR: You are still in Step I; Type (/next) to know what hasn't been filled, or move onto the next step.");
										stop = true;
										break;
									}
									case 2: // Choosing primary category
									{
										new physical = GetPVarInt(playerid, "sPhysical"),
											str[120];
										switch(GetPVarInt(playerid,"pCategory"))
										{
											case 1: // physical
											{
												if(strfind(inputtext, "Strength", false) != -1 || strfind(inputtext, "Dexterity", false) != -1 || strfind(inputtext, "Stamina", false) != -1)
												{
													if(physical == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														break;										
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sPhysical", physical-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Physical"GR" section. (%d left)",physical);
													MSG(playerid,GRAD2,str);
													stop = true;
												}	
											}
											case 2:
											{
												new social = GetPVarInt(playerid, "sSocial");
												if(strfind(inputtext, "Charisma", false) != -1 || strfind(inputtext, "Manipulation", false) != -1 || strfind(inputtext, "Appearance", false) != -1)
												{
													if(social == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														break;										
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sSocial", social-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Social"GR" section. (%dleft)",social);
													MSG(playerid,GRAD2,str);
												}														
											}
											case 3:
											{
												new mental = GetPVarInt(playerid, "sMental");
												if(strfind(inputtext, "Perception", false) != -1 || strfind(inputtext, "Intelligence", false) != -1 || strfind(inputtext, "Wits", false) != -1)
												{
													if(mental == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														break;										
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sMental", mental-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Mental"GR" section. (%d left)",mental);
													MSG(playerid,GRAD2,str);
													stop = true;
												}
											}
										}
									}
									case 3: // Choosing secondary category
									{
										new physical = GetPVarInt(playerid, "sPhysical"),
											str[120];
										switch(GetPVarInt(playerid,"sCategory"))
										{
											case 1: // physical
											{
												if(strfind(inputtext, "Strength", false) != -1 || strfind(inputtext, "Dexterity", false) != -1 || strfind(inputtext, "Stamina", false) != -1)
												{
													if(physical == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														break;										
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sPhysical", physical-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Physical"GR" section. (%d left)",physical);
													MSG(playerid,GRAD2,str);
													stop = true;
												}	
											}
											case 2:
											{
												new social = GetPVarInt(playerid, "sSocial");
												if(strfind(inputtext, "Charisma", false) != -1 || strfind(inputtext, "Manipulation", false) != -1 || strfind(inputtext, "Appearance", false) != -1)
												{
													if(social == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														break;										
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sSocial", social-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Social"GR" section. (%d left)",social);
													MSG(playerid,GRAD2,str);
												}														
											}
											case 3:
											{
												new mental = GetPVarInt(playerid, "sMental");
												if(strfind(inputtext, "Perception", false) != -1 || strfind(inputtext, "Intelligence", false) != -1 || strfind(inputtext, "Wits", false) != -1)
												{
													if(mental == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														break;										
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sMental", mental-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Mental"GR" section. (%d left)",mental);
													MSG(playerid,GRAD2,str);
													stop = true;
												}
											}
										}										
									}
									case 4: // Choosing tetiary category
									{
										new physical = GetPVarInt(playerid, "sPhysical"),
											str[120];
										switch(GetPVarInt(playerid,"tCategory"))
										{
											case 1: // physical
											{
												if(strfind(inputtext, "Strength", false) != -1 || strfind(inputtext, "Dexterity", false) != -1 || strfind(inputtext, "Stamina", false) != -1)
												{
													if(physical == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														return 1;									
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sPhysical", physical-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Physical"GR" section. (%d left)",physical);
													MSG(playerid,GRAD2,str);
													stop = true;
												}	
											}
											case 2:
											{
												new social = GetPVarInt(playerid, "sSocial");
												if(strfind(inputtext, "Charisma", false) != -1 || strfind(inputtext, "Manipulation", false) != -1 || strfind(inputtext, "Appearance", false) != -1)
												{
													if(social == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														return 1;											
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sSocial", social-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Social"GR" section. (%d left)",social);
													MSG(playerid,GRAD2,str);
												}														
											}
											case 3:
											{
												new mental = GetPVarInt(playerid, "sMental");
												if(strfind(inputtext, "Perception", false) != -1 || strfind(inputtext, "Intelligence", false) != -1 || strfind(inputtext, "Wits", false) != -1)
												{
													if(mental == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														return 1;	 									
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sMental", mental-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Mental"GR" section. (%d left)",mental);
													MSG(playerid,GRAD2,str);
													stop = true;
												}
											}
										}	
									}
	                                case 5: // Choosing primary abilities
									{
										new freebie = GetPVarInt(playerid, "sTalents"),
											str[120],
                                            bool:found,
											pcategory = GetPVarInt(playerid,"pCategory");
										printf("pcategory %d",pcategory);
										switch(pcategory)
										{
											case 1: // talents
											{
												print("case1");
                                                for(new tal = 0; tal < sizeof(rTalents); tal++)
												{
													if(!strcmp(sTraits[i], rTalents[tal])) // player selected a talent
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true;
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sTalents", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
														break;
													}
												}
												if(!found)
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Talents"GR" section. (%d left)",freebie);
													MSG(playerid,GRAD2,str);
													stop = true;
													break;
												}													
											}
											case 2: // skills
											{
												print("case2");
                                                freebie = GetPVarInt(playerid, "sSkills");
												for(new tal = 0; tal < sizeof(rSkills); tal++)
												{
													if(!strcmp(sTraits[i], rSkills[tal])) // player selected a skill
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true; 
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sSkills", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
													}
												}	
												if(!found)
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Skills"GR" section. (%d left)",freebie);
													MSG(playerid,GRAD2,str);
													stop = true;
													found = true;
													break;
												}												
											}
											case 3:
											{
												print("case3");
                                                freebie = GetPVarInt(playerid, "sKnowledges");
												for(new tal = 0; tal < sizeof(rKnowledges); tal++)
												{
													if(!strcmp(sTraits[i], rKnowledges[tal])) // player selected a skill
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true;
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sKnowledges", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
														break;
													}
												}
												if(!found)
													{
														format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Knowledges"GR" section. (%d left)",freebie);
														MSG(playerid,GRAD2,str);
														stop = true;
														break;
													}													
											}
										}
									}
	                                case 6: // Choosing secondary abilities
									{
										new freebie = GetPVarInt(playerid, "sTalents"),
											str[120],
                                            bool:found,
											pcategory = GetPVarInt(playerid,"sCategory");
										printf("pcategory %d",pcategory);
										switch(pcategory)
										{
											case 1: // talents
											{
												print("case1");
                                                for(new tal = 0; tal < sizeof(rTalents); tal++)
												{
													if(!strcmp(sTraits[i], rTalents[tal])) // player selected a talent
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true;
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sTalents", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
														break;
													}
												}
												if(!found)
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Talents"GR" section. (%d left)",freebie);
													MSG(playerid,GRAD2,str);
													stop = true;
													break;
												}													
											}
											case 2: // skills
											{
												print("case2");
                                                freebie = GetPVarInt(playerid, "sSkills");
												for(new tal = 0; tal < sizeof(rSkills); tal++)
												{
													if(!strcmp(sTraits[i], rSkills[tal])) // player selected a skill
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true; 
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sSkills", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
													}
												}	
												if(!found)
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Skills"GR" section. (%d left)",freebie);
													MSG(playerid,GRAD2,str);
													stop = true;
													found = true;
													break;
												}												
											}
											case 3:
											{
												print("case3");
                                                freebie = GetPVarInt(playerid, "sKnowledges");
												for(new tal = 0; tal < sizeof(rKnowledges); tal++)
												{
													if(!strcmp(sTraits[i], rKnowledges[tal])) // player selected a skill
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true;
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sKnowledges", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
														break;
													}
												}
												if(!found)
													{
														format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Knowledges"GR" section. (%d left)",freebie);
														MSG(playerid,GRAD2,str);
														stop = true;
														break;
													}													
											}
										}
									}
	                                case 7: // Choosing tetiary abilities
									{
										new freebie = GetPVarInt(playerid, "sTalents"),
											str[120],
                                            bool:found,
											pcategory = GetPVarInt(playerid,"tCategory");
										printf("pcategory %d",pcategory);
										switch(pcategory)
										{
											case 1: // talents
											{
												print("case1");
                                                for(new tal = 0; tal < sizeof(rTalents); tal++)
												{
													if(!strcmp(sTraits[i], rTalents[tal])) // player selected a talent
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{	
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true;
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sTalents", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
														break;
													}
												}
												if(!found)
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Talents"GR" section. (%d left)",freebie);
													MSG(playerid,GRAD2,str);
													stop = true;
													break;
												}													
											}
											case 2: // skills
											{
												print("case2");
                                                freebie = GetPVarInt(playerid, "sSkills");
												for(new tal = 0; tal < sizeof(rSkills); tal++)
												{
													if(!strcmp(sTraits[i], rSkills[tal])) // player selected a skill
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true; 
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sSkills", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
													}
												}	
												if(!found)
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Skills"GR" section. (%d left)",freebie);
													MSG(playerid,GRAD2,str);
													stop = true;
													found = true;
													break;
												}												
											}
											case 3:
											{
												print("case3");
                                                freebie = GetPVarInt(playerid, "sKnowledges");
												for(new tal = 0; tal < sizeof(rKnowledges); tal++)
												{
													if(!strcmp(sTraits[i], rKnowledges[tal])) // player selected a skill
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true;
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sKnowledges", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
														break;
													}
												}
												if(!found)
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Knowledges"GR" section. (%d left)",freebie);
													MSG(playerid,GRAD2,str);
													stop = true;
													break;
												}													
											}
										}
									}
									case 10: // Choosing virtues (if applicable)
									{
										new virtue = GetPVarInt(playerid, "sVirtues"),
										str[120],
										bool:found;
										if(GetPVarInt(playerid,sTraits[i]) == 5)
										{
											MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
											stop = true;
											break;
										}
										if(User[playerid][Userrace] != 5)
										{
											for(new ski = 0; ski < sizeof(rVirtues); ski++)
											{
												if(!strcmp(sTraits[i], rVirtues[ski])) // player selected a virtue
												{
													if(virtue == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														found = true;
														break;										
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sVirtues", virtue-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s. (%d left)",sTraits[i],virtue-1);stop = true;
													MSG(playerid,GREEN,str);
													found = true;
													stop = true;
													break;
												}
											}
											if(!found)
											{
												format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Virtues"GR" section. (%d left)",virtue);
												MSG(playerid,GRAD2,str);
											}
										}
										else // demon upgrading virtues
										{
											for(new ski = 0; ski < sizeof(dVirtues); ski++)
											{
												if(!strcmp(sTraits[i], dVirtues[ski])) // player selected a demon virtue
												{
													
													if(virtue == 0)
													{
														cmd_next(playerid, ""); //CHECK ME
														stop = true; 
														found = true;
														break;										
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sVirtues", virtue-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s. (%d left)",sTraits[i],virtue-1);stop = true;
													MSG(playerid,GREEN,str);
													found = true;
													stop = true;
													break;
												}
											}
											if(!found)
											{
												format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Virtues"GR" section. (%d left)",virtue);
												MSG(playerid,GRAD2,str);
											}
										}
									}
									//43055
									case 11: // freebies
									{
										new freebie = GetPVarInt(playerid, "sFreebie"),
										cost =  GetFreebieCost(playerid,sTraits[i]),
										str[120];
										if(strfind(inputtext, "Willpower", false) != -1 || strfind(inputtext, "Rage", false) != -1 || strfind(inputtext, "Gnosis", false) != -1) 
											str[0] = 6;
										else str[0] = 5;
										if(strfind(inputtext, "Humanity/Path", false) != -1) str[0] = 10;
										if(strfind(inputtext, "Glamour", false) != -1) str[0] = 10;
										if(strfind(inputtext, "Arete", false) != -1) str[0] = 3;
										if(GetPVarInt(playerid,sTraits[i]) >= str[0])
										{
											MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
											stop = true;
											break;
										}

										if(freebie == 0)
										{
											cmd_next(playerid,"");
											stop = true;
											break;
										}
										if(freebie < cost)
										{
											format(str,sizeof str,"ERROR: You cannot afford this! (Current Freebies: %d; Trait Cost: %d)",freebie,cost);
											MSG(playerid,GRAD2,str);
											stop = true;
											break;
										}
										else
										{
											new tra[MAX_TRAIT_NAME];
											strcat(tra, sTraits[i]);
											UpdateTrait(playerid, "sFreebie", freebie-cost, 9);
											if(User[playerid][Userrace] == 6) {
												for(new r = 0; r < sizeof(rRealms); r++) {
													if(strfind(inputtext, rRealms[r], false) != -1) {
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1, 3); // for setting up realm on changeling
														break;
													}
												}
												UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1); // for changeling 
											}
											else { // for other races 
												UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1); 
											}

											format(str,sizeof str,"Info: %d freebie(s) have been invested in %s. (%d left)",cost,sTraits[i],freebie-cost);
											MSG(playerid,GREEN,str);
											stop = true;
											break;
										}
									}
									
								}
							}
							// -- End
							if(!fresh) // if player is not during char creation, then upgrade with XP
								UpgradeTrait(User[playerid][SheetMonitor], sTraits[i]);
						}
					}
					//-- player is building their disciplines
					if(User[User[playerid][SheetMonitor]][Userrace] == 1)
					{
						new discipline = GetPVarInt(playerid, "sDisciplines"),str[120],bool:found;
						for(new i = 0; i < sizeof(rDisciplines); i++) 
						{
							if(strfind(inputtext, rDisciplines[i], false) != -1) // player selected a valid discipline
							{
								if(fresh == 8 && User[playerid][SheetMonitor] == playerid) // if player is in character creation phase and wants to invest freebies into disciplines
								{
									if(discipline == 0)
									{
										cmd_next(playerid, "");
										stop = true; found = true; break;										
									}
									new tra[MAX_TRAIT_NAME];
									strcat(tra, rDisciplines[i]);
									UpdateTrait(playerid, "sDisciplines", discipline-1, 9);
									UpdateTrait(playerid, tra, GetPVarInt(playerid, rDisciplines[i])+1, 1);
									format(str,sizeof str,"Info: One starter point has been invested in %s. (%d left)",rDisciplines[i],discipline-1);stop = true;
									MSG(playerid,GREEN,str);
									found = true;	
									break;
								}
								if(fresh == 11)
								{
									new freebie = GetPVarInt(playerid, "sFreebie"),
										cost = 7;
									str[0] = 5;
									if(GetPVarInt(playerid,rDisciplines[i]) == str[0])
									{
										MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
										stop = true;
										break;
									}
									if(freebie == 0)
									{
										cmd_next(playerid,"");
										stop = true;
										break;
									}
									if(freebie < cost)
									{
										format(str,sizeof str,"ERROR: You cannot afford this! (Current Freebies: %d; Trait Cost: %d)",freebie,cost);
										MSG(playerid,GRAD2,str);
										stop = true;
										break;
									}
									else
									{
										new tra[MAX_TRAIT_NAME];
										strcat(tra, rDisciplines[i]);
										UpdateTrait(playerid, "sFreebie", freebie-cost, 9);
										UpdateTrait(playerid, tra, GetPVarInt(playerid, rDisciplines[i])+1);
										format(str,sizeof str,"Info: %d freebie(s) have been invested in %s. (%d left)",cost,rDisciplines[i],freebie-cost);
										MSG(playerid,GREEN,str);
										stop = true;
										break;
									}									
								}
								UpgradeTrait(User[playerid][SheetMonitor], rDisciplines[i]);
							}	
						}
						if(!found && fresh == 8)
						{
							format(str,sizeof str,"ERROR: You are supposed to invest 3 freebie points into the "MAR"Disciplines"GR" section. (%d left)",discipline);
							MSG(playerid,GRAD2,str);
							stop = true;
						}
					}
					//-- demon is building their lores
					if(User[User[playerid][SheetMonitor]][Userrace] == 5)
					{
						new discipline = GetPVarInt(playerid, "sLores"),str[120],bool:found;
						for(new i = 0; i < sizeof(rLores); i++) 
						{
							if(strfind(inputtext, rLores[i], false) != -1) // player selected a valid lore
							{
								if(fresh == 8 && User[playerid][SheetMonitor] == playerid) // if player is in character creation phase and wants to invest freebies into lores
								{
									if(discipline == 0)
									{
										cmd_next(playerid, "");
										stop = true; found = true; break;										
									}
									new tra[MAX_TRAIT_NAME];
									strcat(tra, rLores[i]);
									UpdateTrait(playerid, "sLores", discipline-1, 9);
									UpdateTrait(playerid, tra, GetPVarInt(playerid, rLores[i])+1, 1);
									format(str,sizeof str,"Info: One starter point has been invested in %s. (%d left)",rLores[i],discipline-1);
									stop = true;
									MSG(playerid,GREEN,str);
									found = true;	
									break;
								}
								if(fresh == 11)
								{
									new freebie = GetPVarInt(playerid, "sFreebie"),
										cost = 7;
									str[0] = 5;
									if(GetPVarInt(playerid,rLores[i]) == str[0])
									{
										MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
										stop = true;
										break;
									}
									if(freebie == 0)
									{
										cmd_next(playerid,"");
										stop = true;
										break;
									}
									if(freebie < cost)
									{
										format(str,sizeof str,"ERROR: You cannot afford this! (Current Freebies: %d; Trait Cost: %d)",freebie,cost);
										MSG(playerid,GRAD2,str);
										stop = true;
										break;
									}
									else
									{
										new tra[MAX_TRAIT_NAME];
										strcat(tra, rLores[i]);
										UpdateTrait(playerid, "sFreebie", freebie-cost, 9);
										UpdateTrait(playerid, tra, GetPVarInt(playerid, rLores[i])+1);
										format(str,sizeof str,"Info: %d freebie(s) have been invested in %s. (%d left)",cost,rLores[i],freebie-cost);
										MSG(playerid,GREEN,str);
										stop = true;
										break;
									}									
								}
								UpgradeTrait(User[playerid][SheetMonitor], rLores[i]);
							}	
						}
						if(!found && fresh == 8)
						{
							format(str,sizeof str,"ERROR: You are supposed to invest 3 freebie points into the "MAR"Lore"GR" section. (%d left)",discipline);
							MSG(playerid,GRAD2,str);
							stop = true;
						}
					}
					
					if(User[User[playerid][SheetMonitor]][Userrace] == 6)
					{
						// if(strfind(inputtext, "Arts", true) != -1)
						// {
						// 	if(GetPVarInt(playerid, "FreshCS") == 11 && User[playerid][Userrace] == 6) 
						// 	{
						// 		if(GetPVarInt(playerid, "sFreebie") > 0)
						// 			return Dialog_Show(playerid,sdSheetArtOpt,DIALOG_STYLE_LIST,"Arts Interaction (Using: Freebie Points)","Append Art\nUpgrade Art","Set","Close");			
						// 		cmd_next(playerid, "");
						// 		return 1;
						// 	}
						// 	if(User[playerid][Useradmin] > 0)
						// 	{
						// 		return Dialog_Show(playerid,dSheetSetArtOpt,DIALOG_STYLE_LIST,
						// 		"Interactive Character Sheet (Advisor)","Append Art\nDelete Art\nUpgrade Art","Set","Cancel");
						// 	}	
						// 	else MSG(playerid,GRAD2,"ERROR: You need an advisor to moderate Arts.");
						// 	return 1;
						// }
						if(strfind(inputtext, "Arts", true) != -1)
						{
							// Changeling building their ARTS / REALMS; fresh 8 == with starter points, fresh 11 == with freebies
							if(fresh == 8)
								return Dialog_Show(playerid,dSheetBuildArt,DIALOG_STYLE_INPUT,"Arts Interaction (Using: Starter Points)","Insert the exact name of the Art (case-sensitive) you wish to invest starting points into:\nValid values (' is replaced with `):\n Autumn, Chicanery, Chronos, Contract, Dragon`s Ire, Legerdemain, Metamorphosis, Naming.\n Oneiromancy, Primal, Pyretics, Skycraft, Soothsay, Sovereign, Spring, Summer, Wayfare, Winter","Set","Close");	 
							if(fresh == 11)
								return Dialog_Show(playerid,sdSheetArtOpt,DIALOG_STYLE_LIST,"Arts Interaction (Using: Freebie Points)","Append Art\nUpgrade Art","Set","Close");
							if(User[playerid][Useradmin] > 0)
							{
								Dialog_Show(playerid,dSheetSetArtOpt,DIALOG_STYLE_LIST, // --- ALERT!
								"Interactive Character Sheet (Advisor)","Append Art\nDelete Art\nUpgrade Art","Set","Cancel");
							}	
							else MSG(playerid,GRAD2,"ERROR: You need an advisor to moderate Arts.");
							return 1;
						}
						if(fresh == 8) // if player selected something else
						{
							new discipline = GetPVarInt(playerid, "sArts"),str[120];
							format(str,sizeof str,"ERROR: You are supposed to invest 3 starter points into the "MAR"Arts"GR" section. (%d left)",discipline);
							MSG(playerid,GRAD2,str);
							stop = true;
							return 2;
						}
						// -- CHANGELING building their REALMS  !
						new discipline = GetPVarInt(playerid, "sRealms"),str[120],bool:found;
						for(new i = 0; i < sizeof(rArts); i++) 
						{
							if(strfind(inputtext, rArts[i], false) != -1) // player selected a valid Realm
							{
								if(!fresh) {
									UpgradeTrait(User[playerid][SheetMonitor], rArts[i]);
								}
							}
						}
						for(new i = 0; i < sizeof(rRealms); i++) 
						{
							if(strfind(inputtext, rRealms[i], false) != -1) // player selected a valid Realm
							{
								printf("[Changeling building their Realms] %s equals to %s", inputtext, rRealms[i]);
								if(fresh == 12 && User[playerid][SheetMonitor] == playerid) // player is in character creation phase and wants to invest starter points into Realms
								{
									if(discipline == 0)
									{
										cmd_next(playerid, "");
										stop = true; found = true; break;										
									}
									new tra[MAX_TRAIT_NAME];
									strcat(tra, rRealms[i]);
									UpdateTrait(playerid, "sRealms", discipline-1, 9);
									UpdateTrait(playerid, tra, GetPVarInt(playerid, rRealms[i])+1, 3, 1);
									format(str,sizeof str,"Info: One starter point has been invested in %s. (%d left)",rRealms[i],discipline-1);
									stop = true;
									MSG(playerid,GREEN,str);
									found = true;	
									break;
								}
								// if(fresh == 11) 
								// {
								// 	new freebie = GetPVarInt(playerid, "sFreebie"),
								// 		cost = 2;
								// 	str[0] = 5;
								// 	if(GetPVarInt(playerid,rRealms[i]) == str[0])
								// 	{
								// 		MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
								// 		stop = true;
								// 		break;
								// 	}
								// 	if(freebie == 0)
								// 	{
								// 		cmd_next(playerid,"");
								// 		stop = true;
								// 		break;
								// 	}
								// 	if(freebie < cost)
								// 	{
								// 		format(str,sizeof str,"ERROR: You cannot afford this! (Current Freebies: %d; Realm Cost: %d)",freebie,cost);
								// 		MSG(playerid,GRAD2,str);
								// 		stop = true;
								// 		break;
								// 	}
								// 	else
								// 	{
								// 		new tra[MAX_TRAIT_NAME];
								// 		strcat(tra, rRealms[i]);
								// 		UpdateTrait(playerid, "sFreebie", freebie-cost, 9);
								// 		UpdateTrait(playerid, tra, GetPVarInt(playerid, rRealms[i])+1, 3);
								// 		format(str,sizeof str,"Info: %d freebie(s) have been invested in %s. (%d left) BIGGER DICK",cost,rRealms[i],freebie-cost);
								// 		MSG(playerid,GREEN,str);
								// 		stop = true;
								// 		break;
								// 	}	
								// }
							}	
						}
						if(!found && fresh == 12)
						{
							format(str,sizeof str,"ERROR: You are supposed to invest 3 starter points into the "MAR"Realms"GR" section. (%d left)",discipline);
							MSG(playerid,GRAD2,str);
							stop = true;
							return 1;
						}
					}

					//-- player is building their backgrounds
					if(GetPVarInt(playerid, "FreshCS") == 9)
					{
						new backg = GetPVarInt(playerid, "sBackgrounds");
						if(strfind(inputtext, "Backgrounds", true) != -1)
						{
							if(backg == 0)
								return cmd_next(playerid, "");
							Dialog_Show(playerid,dSheetBuildBackgOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet","Append Background\nUpgrade Background","Set","Close");
							return 1;
						}
						else
						{
							new str[120];
							format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Backgrounds"GR" section. (%d left)",backg);
							MSG(playerid,GRAD2,str);	
						}
					}
					if(User[playerid][Userrace] == 3)
					{
						for(new i = 0; i < sizeof(rSpheres); i++) 
						{
							if(strfind(inputtext, rSpheres[i], false) != -1)  // player selected a valid trait
							{	
								UpgradeTrait(User[playerid][SheetMonitor], rSpheres[i]);
								stop = true;
								break;
							}
						}					
					}
					if(stop == true) 
						return cmd_cs(playerid, "");
				}
				case 2: // werewolf
				{
					new	fresh = GetPVarInt(playerid, "FreshCS"); // if the player has a fresh character sheet 
					stop = false;
					for(new i = 0; i < sizeof(sTraits); i++) 
					{
						if(strfind(inputtext, sTraits[i], false) != -1)  // player selected a valid trait
						{
							if(fresh > 0 && User[playerid][SheetMonitor] == playerid) // player character sheet building
							{
								switch(fresh)
								{
									case 1: // upper part
									{
										MSG(playerid,GRAD2,"ERROR: You are still in Step I; Type (/next) to know what hasn't been filled, or move onto the next step.");
										stop = true;
										break;
									}
									case 2: // primary
									{
										new physical = GetPVarInt(playerid, "sPhysical"),
											str[120];
										switch(GetPVarInt(playerid,"pCategory"))
										{
											case 1: // physical
											{
												if(strfind(inputtext, "Strength", false) != -1 || strfind(inputtext, "Dexterity", false) != -1 || strfind(inputtext, "Stamina", false) != -1)
												{
													if(physical == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														break;										
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sPhysical", physical-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Physical"GR" section. (%d left)",physical);
													MSG(playerid,GRAD2,str);
													stop = true;
												}	
											}
											case 2:
											{
												new social = GetPVarInt(playerid, "sSocial");
												if(strfind(inputtext, "Charisma", false) != -1 || strfind(inputtext, "Manipulation", false) != -1 || strfind(inputtext, "Appearance", false) != -1)
												{
													if(social == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														break;										
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sSocial", social-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Social"GR" section. (%d left)",social);
													MSG(playerid,GRAD2,str);
												}														
											}
											case 3:
											{
												new mental = GetPVarInt(playerid, "sMental");
												if(strfind(inputtext, "Perception", false) != -1 || strfind(inputtext, "Intelligence", false) != -1 || strfind(inputtext, "Wits", false) != -1)
												{
													if(mental == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														break;										
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sMental", mental-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Mental"GR" section. (%d left)",mental);
													MSG(playerid,GRAD2,str);
													stop = true;
												}
											}
										}
									}
									case 3: // secondary
									{
										new physical = GetPVarInt(playerid, "sPhysical"),
											str[120];
										switch(GetPVarInt(playerid,"sCategory"))
										{
											case 1: // physical
											{
												if(strfind(inputtext, "Strength", false) != -1 || strfind(inputtext, "Dexterity", false) != -1 || strfind(inputtext, "Stamina", false) != -1)
												{
													if(physical == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														break;										
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sPhysical", physical-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Physical"GR" section. (%d left)",physical);
													MSG(playerid,GRAD2,str);
													stop = true;
												}	
											}
											case 2:
											{
												new social = GetPVarInt(playerid, "sSocial");
												if(strfind(inputtext, "Charisma", false) != -1 || strfind(inputtext, "Manipulation", false) != -1 || strfind(inputtext, "Appearance", false) != -1)
												{
													if(social == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														break;										
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sSocial", social-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Social"GR" section. (%d left)",social);
													MSG(playerid,GRAD2,str);
												}														
											}
											case 3:
											{
												new mental = GetPVarInt(playerid, "sMental");
												if(strfind(inputtext, "Perception", false) != -1 || strfind(inputtext, "Intelligence", false) != -1 || strfind(inputtext, "Wits", false) != -1)
												{
													if(mental == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														break;										
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sMental", mental-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Mental"GR" section. (%d left)",mental);
													MSG(playerid,GRAD2,str);
													stop = true;
												}
											}
										}										
									}
									case 4: // tetiary
									{
										new physical = GetPVarInt(playerid, "sPhysical"),
											str[120];
										switch(GetPVarInt(playerid,"tCategory"))
										{
											case 1: // physical
											{
												if(strfind(inputtext, "Strength", false) != -1 || strfind(inputtext, "Dexterity", false) != -1 || strfind(inputtext, "Stamina", false) != -1)
												{
													if(physical == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														return 1;								
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sPhysical", physical-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s. ",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Physical"GR" section. (%d left)",physical);
													MSG(playerid,GRAD2,str);
													stop = true;
												}	
											}
											case 2:
											{
												new social = GetPVarInt(playerid, "sSocial");
												if(strfind(inputtext, "Charisma", false) != -1 || strfind(inputtext, "Manipulation", false) != -1 || strfind(inputtext, "Appearance", false) != -1)
												{
													if(social == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														return 1;								
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sSocial", social-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Social"GR" section. (%d left)",social);
													MSG(playerid,GRAD2,str);
												}														
											}
											case 3:
											{
												new mental = GetPVarInt(playerid, "sMental");
												if(strfind(inputtext, "Perception", false) != -1 || strfind(inputtext, "Intelligence", false) != -1 || strfind(inputtext, "Wits", false) != -1)
												{
													if(mental == 0)
													{
														cmd_next(playerid, "");
														stop = true;
														return 1;					
													}
													if(GetPVarInt(playerid,sTraits[i]) == 5)
													{
														MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
														stop = true;
														break;
													}
													new tra[MAX_TRAIT_NAME];
													strcat(tra, sTraits[i]);
													UpdateTrait(playerid, "sMental", mental-1, 9);
													UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
													format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
													MSG(playerid,GREEN,str);
												}
												else
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Mental"GR" section. (%d left)",mental);
													MSG(playerid,GRAD2,str);
													stop = true;
												}
											}
										}	
									}
	                                case 5: // primary ab
									{
										new freebie = GetPVarInt(playerid, "sTalents"),
											str[120],
                                            bool:found,
											pcategory = GetPVarInt(playerid,"pCategory");
										printf("pcategory %d",pcategory);
										switch(pcategory)
										{
											case 1: // talents
											{
												print("case1");
                                                for(new tal = 0; tal < sizeof(rTalents); tal++)
												{
													if(!strcmp(sTraits[i], rTalents[tal])) // player selected a talent
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true;
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sTalents", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
														break;
													}
												}
												if(!found)
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Talents"GR" section. (%d left)",freebie);
													MSG(playerid,GRAD2,str);
													stop = true;
													break;
												}													
											}
											case 2: // skills
											{
												print("case2");
                                                freebie = GetPVarInt(playerid, "sSkills");
												for(new tal = 0; tal < sizeof(rSkills); tal++)
												{
													if(!strcmp(sTraits[i], rSkills[tal])) // player selected a skill
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true; 
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sSkills", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
													}
												}	
												if(!found)
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Skills"GR" section. (%d left)",freebie);
													MSG(playerid,GRAD2,str);
													stop = true;
													found = true;
													break;
												}												
											}
											case 3:
											{
												print("case3");
                                                freebie = GetPVarInt(playerid, "sKnowledges");
												for(new tal = 0; tal < sizeof(rKnowledges); tal++)
												{
													if(!strcmp(sTraits[i], rKnowledges[tal])) // player selected a skill
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true;
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sKnowledges", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
														break;
													}
												}
												if(!found)
													{
														format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Knowledges"GR" section. (%d left)",freebie);
														MSG(playerid,GRAD2,str);
														stop = true;
														break;
													}													
											}
										}
									}
	                                case 6: // secondary ab
									{
										new freebie = GetPVarInt(playerid, "sTalents"),
											str[120],
                                            bool:found,
											pcategory = GetPVarInt(playerid,"sCategory");
										printf("pcategory %d",pcategory);
										switch(pcategory)
										{
											case 1: // talents
											{
												print("case1");
                                                for(new tal = 0; tal < sizeof(rTalents); tal++)
												{
													if(!strcmp(sTraits[i], rTalents[tal])) // player selected a talent
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true;
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sTalents", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
														break;
													}
												}
												if(!found)
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Talents"GR" section. (%d left)",freebie);
													MSG(playerid,GRAD2,str);
													stop = true;
													break;
												}													
											}
											case 2: // skills
											{
												print("case2");
                                                freebie = GetPVarInt(playerid, "sSkills");
												for(new tal = 0; tal < sizeof(rSkills); tal++)
												{
													if(!strcmp(sTraits[i], rSkills[tal])) // player selected a skill
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true; 
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sSkills", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
													}
												}	
												if(!found)
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Skills"GR" section. (%d left)",freebie);
													MSG(playerid,GRAD2,str);
													stop = true;
													found = true;
													break;
												}												
											}
											case 3:
											{
												print("case3");
                                                freebie = GetPVarInt(playerid, "sKnowledges");
												for(new tal = 0; tal < sizeof(rKnowledges); tal++)
												{
													if(!strcmp(sTraits[i], rKnowledges[tal])) // player selected a skill
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true;
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sKnowledges", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
														break;
													}
												}
												if(!found)
													{
														format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Knowledges"GR" section. (%d left)",freebie);
														MSG(playerid,GRAD2,str);
														stop = true;
														break;
													}													
											}
										}
									}
	                                case 7: // tetiary ab
									{
										new freebie = GetPVarInt(playerid, "sTalents"),
											str[120],
                                            bool:found,
											pcategory = GetPVarInt(playerid,"tCategory");
										printf("pcategory %d",pcategory);
										switch(pcategory)
										{
											case 1: // talents
											{
												print("case1");
                                                for(new tal = 0; tal < sizeof(rTalents); tal++)
												{
													if(!strcmp(sTraits[i], rTalents[tal])) // player selected a talent
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true;
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sTalents", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
														break;
													}
												}
												if(!found)
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Talents"GR" section. (%d left)",freebie);
													MSG(playerid,GRAD2,str);
													stop = true;
													break;
												}													
											}
											case 2: // skills
											{
												print("case2");
                                                freebie = GetPVarInt(playerid, "sSkills");
												for(new tal = 0; tal < sizeof(rSkills); tal++)
												{
													if(!strcmp(sTraits[i], rSkills[tal])) // player selected a skill
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 3)
														{
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true; 
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sSkills", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
													}
												}	
												if(!found)
												{
													format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Skills"GR" section. (%d left)",freebie);
													MSG(playerid,GRAD2,str);
													stop = true;
													found = true;
													break;
												}												
											}
											case 3:
											{
												print("case3");
                                                freebie = GetPVarInt(playerid, "sKnowledges");
												for(new tal = 0; tal < sizeof(rKnowledges); tal++)
												{
													if(!strcmp(sTraits[i], rKnowledges[tal])) // player selected a skill
													{
														if(freebie == 0)
														{
															cmd_next(playerid, "");
															stop = true;
															found = true;
															break;										
														}
														if(GetPVarInt(playerid,sTraits[i]) == 5)
														{
															
															MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
															stop = true;
															found = true;
															break;
														}
														new tra[MAX_TRAIT_NAME];
														strcat(tra, sTraits[i]);
														UpdateTrait(playerid, "sKnowledges", freebie-1, 9);
														UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
														format(str,sizeof str,"Info: One starter point has been invested in %s.",sTraits[i]);stop = true;
														MSG(playerid,GREEN,str);
														found = true;
														break;
													}
												}
												if(!found)
													{
														format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Knowledges"GR" section. (%d left)",freebie);
														MSG(playerid,GRAD2,str);
														stop = true;
														break;
													}													
											}
										}
									}
									case 11: // freebies
									{
										new freebie = GetPVarInt(playerid, "sFreebie"),
										cost = GetFreebieCost(playerid,sTraits[i]),
										str[120];
										// str[0] is max rating to be filled by player with freebies
										if(strfind(inputtext, "Willpower", false) != -1 || strfind(inputtext, "Rage", false) != -1 || strfind(inputtext, "Gnosis", false) != -1) 
											str[0] = 8;
										else str[0] = 5;
										if(strfind(inputtext, "Humanity/Path", false) != -1) str[0] = 10;
										if(GetPVarInt(playerid,sTraits[i]) >= str[0])
										{
											MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");
											stop = true;
											break;
										}									
										if(freebie == 0)
										{
											cmd_next(playerid,"");
											stop = true;
											break;
										}
										if(freebie < cost)
										{
											format(str,sizeof str,"ERROR: You cannot afford this! (Current Freebies: %d; Trait Cost: %d)",freebie,cost);
											MSG(playerid,GRAD2,str);
											stop = true;
											break;
										}
										else
										{
											new tra[MAX_TRAIT_NAME];
											strcat(tra, sTraits[i]);
											UpdateTrait(playerid, "sFreebie", freebie-cost, 9);
											UpdateTrait(playerid, tra, GetPVarInt(playerid, sTraits[i])+1);
											format(str,sizeof str,"Info: %d freebie(s) have been invested in %s. (%d left)",cost,sTraits[i],freebie-cost);
											MSG(playerid,GREEN,str);
											stop = true;
											break;
										}
									}
								}
							}
							if(!fresh)
								UpgradeTrait(User[playerid][SheetMonitor], sTraits[i]);
						}
					}
					//-- player is building their backgrounds
					if(fresh == 9)
					{
						new backg = GetPVarInt(playerid, "sBackgrounds");
						if(strfind(inputtext, "Backgrounds", true) != -1)
						{
							if(backg == 0)
								return cmd_next(playerid, "");
							Dialog_Show(playerid,dSheetBuildBackgOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet","Append Background\nUpgrade Background","Set","Close");
							return 1;
						}
						else
						{
							new str[120];
							format(str,sizeof str,"ERROR: You are supposed to invest freebie points into the "MAR"Backgrounds"GR" section. (%d left)",backg);
							MSG(playerid,GRAD2,str);	
						}
					}
					if(stop == true) 
						return cmd_cs(playerid, "");
				}
			}
			if(strfind(inputtext, "Edges", true) != -1)
			{
				if(GetPVarInt(playerid,"FreshCS") == 12)
					return Dialog_Show(playerid,dSheetBuildEdge,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Edge (case-sensitive) you wish to invest starting points into:","Set","Close");					
				if(User[playerid][Useradmin] > 0)
				{
					Dialog_Show(playerid,dSheetSetEdgeOpt,DIALOG_STYLE_LIST,
					"Interactive Character Sheet (Advisor)","Append Edge\nDelete Edge\nUpgrade Edge","Set","Cancel");
				}	
				else MSG(playerid,GRAD2,"ERROR: You need an advisor to moderate Edges.");
				return 1;
			}
			if(strfind(inputtext, "[Lore]", true) != -1)
			{
				if(User[playerid][Useradmin] > 0)
				{
					return Dialog_Show(playerid,dSheetSetLorOpt,DIALOG_STYLE_LIST,
					"Interactive Character Sheet (Advisor)","Append Lore\nDelete Lore\nUpgrade Lore","Set","Cancel");
				}	
				else MSG(playerid,GRAD2,"ERROR: You need an advisor to moderate Lores.");
				return 1;
			}
			if(strfind(inputtext, "Secondary Traits", false) != -1)
			{
				if(User[playerid][Useradmin] > 0)
				{
					Dialog_Show(playerid,dSheetSetSecondaryTrait,DIALOG_STYLE_LIST,
					"Interactive Character Sheet (Advisor)","Append Secondary Traits\nDelete Secondary Trait\nUpgrade Secondary Trait","Set","Cancel");
				}	
				else MSG(playerid,GRAD2,"ERROR: You need an advisor to moderate Secondary Traits.");
				return 1;				
			}	
			if(strfind(inputtext, "Backgrounds", true) != -1)
			{
				if(GetPVarInt(playerid,"FreshCS") == 11)
					return Dialog_Show(playerid,dSheetBuildBackgFreebie,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Background (case-sensitive) you wish to invest freebies into:","Set","Close");					
				if(User[playerid][Useradmin] > 0)
				{
					Dialog_Show(playerid,dSheetSetBackgOpt,DIALOG_STYLE_LIST,
					"Interactive Character Sheet (Advisor)","Append Background\nDelete Background\nUpgrade Background\nDowngrade Background","Set","Cancel");
				}	
				else MSG(playerid,GRAD2,"ERROR: You need an advisor to moderate Backgrounds.");
				return 1;
			}

			if(strfind(inputtext, "Sect", false) != -1) 
			{
				if(User[User[playerid][SheetMonitor]][Userrace] == 1) 
					return Dialog_Show(playerid,dSheetSetSect,DIALOG_STYLE_INPUT,"Interactive Character Sheet","A group of vampires arguably united under a common philosophy.","Set","Cancel");			
				else if(User[User[playerid][SheetMonitor]][Userrace] == 3) 
					return Dialog_Show(playerid,dSheetSetSect,DIALOG_STYLE_INPUT,"Sect","This entry deals with a specific group, like the Order of Hermes, Progenitors, Wu Lung, and so forth.","Close","");
			}
			if(strfind(inputtext, "[Other]", false) != -1)
			{
				if(User[playerid][Useradmin] > 0)
				{
					Dialog_Show(playerid,dSheetOtherAdmin,DIALOG_STYLE_LIST,"Other","List\nShow Roleplay Feature\nAdd Roleplay Feature\nDelete Roleplay Feature","Close","");	
				}
				else
				{
					Dialog_Show(playerid,dSheetOtherAdmin,DIALOG_STYLE_LIST,"Other","List\nShow Roleplay Feature","Close","");
				}
			}
			// CS USAGE

			if(User[playerid][Userrace] == 2)
			{
				if(strfind(inputtext, "Rage", true) != -1) return cmd_userage(playerid, "1");
				if(strfind(inputtext, "Gnosis", true) != -1) return cmd_usegnosis(playerid, "1");
				if(strfind(inputtext, "(Level", true) != -1)
				{
					format(large_string, 256, "* %s has activated%s.", sendernameEx(playerid), inputtext);
					AutoMSG(playerid, large_string, 1);
					UseGift(playerid, inputtext);
					return 1;
				}
			}
			if(GetPlayerAnimationIndex(playerid) == 1274 || GetPlayerAnimationIndex(playerid) == 1159)
			{
				if(strfind(inputtext, "Willpower", true) != -1) return cmd_usewillpower(playerid, "1");
				if(strfind(inputtext, "Conviction", true) != -1 && User[playerid][Userrace] == 4) return cmd_useconviction(playerid, "1");
				if(strfind(inputtext, "Rage", true) != -1) return cmd_userage(playerid, "1");
				if(strfind(inputtext, "Blood Pool", true) != -1) return cmd_useblood(playerid, "1");
				if(strfind(inputtext, "Quintessence", true) != -1) return cmd_usequintessence(playerid, "1");
				if(strfind(inputtext, "Glamour", true) != -1) return cmd_useglamourpoint(playerid, "1");
			}
		}
	}
	return 1;
}
Dialog:dSheetSelectAffinity(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		large_string[0] = 1;
		for(new i = 0; i < sizeof(rSpheres); i++)
		{
			if(!strcmp(inputtext, rSpheres[i], true))
			{
				format(large_string, sizeof large_string, "Are you sure that you want ` %s ` to be your affinity sphere?", inputtext);
				Dialog_Show(playerid,dSheetSelectAffinityConf,DIALOG_STYLE_MSGBOX,"Select Affinity Sphere",large_string,"Yes","Close");
				SetPVarString(playerid, "bAffinity", inputtext);
				large_string[0] = EOS;
			}
		}
		if(large_string[0] == 1) return MSG(playerid, GOLD, "ERROR:"GR" You have selected an invalid Sphere.");
	}
	return 1;
}
// WITH SPHERE POINTS
Dialog:sdSheetSphereOpt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				Dialog_Show(playerid,sdSheetBuildSphere,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Sphere (case-sensitive) you wish to acquire:","Set","Close");
			}
			case 1:
			{
				Dialog_Show(playerid,sdSheetBuildSphereUpg,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Sphere (case-sensitive) you wish to upgrade:","Set","Close");
			}
		}
	}
	return 1;
}
Dialog:sdSheetBuildSphere(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPVarInt(playerid, "sSphere") == 0)
			return cmd_next(playerid, "");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		for(new i = 0; i < sizeof(rSpheres); i++)
		{
			//strcmp(const string1[], const string2[], bool:ignorecase=false, length=cellmax)
			if(!strcmp(trait, rSpheres[i], false))
			{
				format(large_string,sizeof large_string,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",trait,User[playerid][SheetMonitorID]);
				new DBResult: Result = db_query(Database, large_string);
				if(db_num_rows(Result)) 
				{
					Dialog_Show(playerid,sdSheetSphereOpt,DIALOG_STYLE_LIST,"Sphere Interaction","Append Sphere\nUpgrade Sphere","Set","Close");	
					return MSG(playerid,GRAD2,"ERROR: Specified Sphere already exists! Click 'Upgrade Sphere' option to upgrade it.");
				}	
				if(GetPVarInt(playerid, trait) > 0) return MSG(playerid,GRAD2,"ERROR: Invalid Sphere specified.");
				new query[124];
				SFM(playerid,GRAD2,"Info: Character Sphere acquisition: %s.",trait);
				MSG(playerid,GRAD2,"Info: Click on [Spheres] to add more points in it or add a new one.");
				format(query,sizeof query,"INSERT INTO sheet (userid,trait,value,type) VALUES (%d,'%s',1,1)",User[playerid][SheetMonitorID],trait);
				db_query(Database, query);
				SetPVarInt(playerid, trait, 1);
				UpdateTrait(User[playerid][SheetMonitor], "sSphere", GetPVarInt(User[playerid][SheetMonitor], "sSphere")-1, 9);
				Dialog_Show(playerid,sdSheetSphereOpt,DIALOG_STYLE_LIST,"Sphere Interaction","Append Sphere\nUpgrade Sphere","Set","Close");	
				db_free_result(Result);
				return 1;
			}
		}
		return MSG(playerid, GOLD, "ERROR:"GR" You have selected an invalid Sphere.");
	}
	return 1;
}
Dialog:sdSheetBuildSphereUpg(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPVarInt(playerid, "sSphere") == 0) return cmd_next(playerid, "");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		if(GetPVarInt(playerid, trait) == GetPVarInt(playerid, "Arete")) 
		{
			Dialog_Show(playerid,sdSheetSphereOpt,DIALOG_STYLE_LIST,"Sphere Interaction","Append Sphere\nUpgrade Sphere","Set","Close");	
			return MSG(playerid,GRAD2,"ERROR: Specified trait is mastered. Sphere rating cannot exceed Arete.");	
		}
		new query[124];
		format(query,sizeof query,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
			SFM(playerid,GRAD2,"Info: You have upgraded the Sphere: %s.",trait);
			MSG(playerid,GRAD2,"Info: Click on [Spheres] to add more points in it or add a new one.");
			format(query,sizeof query,"UPDATE sheet SET value = value+1 WHERE trait = '%s' AND userid = %d AND type = 1",trait, User[playerid][SheetMonitorID]);
			db_query(Database, query);
			SetPVarInt(User[playerid][SheetMonitor], trait, GetPVarInt(playerid,trait)+1);
			UpdateTrait(User[playerid][SheetMonitor], "sSphere", GetPVarInt(playerid, "sSphere")-1, 9);
			Dialog_Show(playerid,sdSheetSphereOpt,DIALOG_STYLE_LIST,"Sphere Interaction","Append Sphere\nUpgrade Sphere","Set","Close");	
		}
		else
		{
			return MSG(playerid,GRAD2,"ERROR: Invalid Sphere specified! Click on 'Append Sphere' to set it first!");
		}

	}
	return 1;
}
// ------ WITH FREEBIES
Dialog:dSheetSphereOpt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				Dialog_Show(playerid,dSheetBuildSphere,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Sphere (case-sensitive) you wish to acquire:","Set","Close");
			}
			case 1:
			{
				Dialog_Show(playerid,dSheetBuildSphereUpg,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Sphere (case-sensitive) you wish to upgrade:","Set","Close");
			}
		}
	}
	return 1;
}
Dialog:dSheetBuildSphere(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new freebie = GetPVarInt(playerid, "sFreebie");
		if(freebie == 0) return cmd_next(playerid, "");
		if(freebie < 7) 
		{
			SFM(playerid,GRAD2,"ERROR: You cannot afford purchasing a Sphere dot. (7 Freebies Required; %d Freebies Available)", freebie);
			return cmd_cs(playerid, "");
		}
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		format(large_string,sizeof large_string,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result)) 
		{
			Dialog_Show(playerid,dSheetSphereOpt,DIALOG_STYLE_LIST,"Sphere Interaction","Append Sphere\nUpgrade Sphere","Set","Close");	
			return MSG(playerid,GRAD2,"ERROR: Specified Sphere already exists! Click 'Upgrade Sphere' option to upgrade it.");
		}	
		new query[124];
		SFM(playerid,GRAD2,"Info: Character Sphere acquisition: %s.",trait);
		MSG(playerid,GRAD2,"Info: Click on [Spheres] to add more points in it or add a new one.");
		format(query,sizeof query,"INSERT INTO sheet (userid,trait,value,type) VALUES (%d,'%s',1,1)",User[playerid][SheetMonitorID],trait);
		db_query(Database, query);
		SetPVarInt(playerid, trait, 1);
		UpdateTrait(User[playerid][SheetMonitor], "sSphere", GetPVarInt(User[playerid][SheetMonitor], "sSphere")-1, 9);
		Dialog_Show(playerid,dSheetSphereOpt,DIALOG_STYLE_LIST,"Sphere Interaction","Append Sphere\nUpgrade Sphere","Set","Close");	
		db_free_result(Result);
	}
	return 1;
}
Dialog:dSheetBuildSphereUpg(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new freebie = GetPVarInt(playerid, "sFreebie");
		if(freebie == 0) return cmd_next(playerid, "");
		if(freebie < 7) 
		{
			SFM(playerid,GRAD2,"ERROR: You cannot afford purchasing a Sphere dot. (7 Freebies Required; %d Freebies Available)", freebie);
			return cmd_cs(playerid, "");
		}
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		if(GetPVarInt(playerid, trait) == GetPVarInt(playerid, "Arete")) 
		{
			Dialog_Show(playerid,dSheetSphereOpt,DIALOG_STYLE_LIST,"Sphere Interaction","Append Sphere\nUpgrade Sphere","Set","Close");	
			return MSG(playerid,GRAD2,"ERROR: Specified trait is mastered. Sphere rating cannot exceed Arete.");	
		}
		new query[124];
		format(query,sizeof query,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
			SFM(playerid,GRAD2,"Info: You have upgraded the Sphere: %s.",trait);
			MSG(playerid,GRAD2,"Info: Click on [Spheres] to add more points in it or add a new one.");
			format(query,sizeof query,"UPDATE sheet SET value = value+1 WHERE trait = '%s' AND userid = %d AND type = 1",trait, User[playerid][SheetMonitorID]);
			db_query(Database, query);
			SetPVarInt(User[playerid][SheetMonitor], trait, GetPVarInt(playerid,trait)+1);
			UpdateTrait(User[playerid][SheetMonitor], "sSphere", GetPVarInt(playerid, "sSphere")-1, 9);
			Dialog_Show(playerid,dSheetSphereOpt,DIALOG_STYLE_LIST,"Sphere Interaction","Append Sphere\nUpgrade Sphere","Set","Close");	
		}
		else
		{
			return MSG(playerid,GRAD2,"ERROR: Invalid Sphere specified! Click on 'Append Sphere' to set it first!");
		}

	}
	return 1;
}
//
Dialog:dSheetSelectAffinityConf(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		GetPVarString(User[playerid][SheetMonitor], "bAffinity",  trait, MAX_TRAIT_NAME);
		UpdateTraitString(User[playerid][SheetMonitor], "Affinity", trait);
		UpdateTrait(User[playerid][SheetMonitor], "sSphere", GetPVarInt(User[playerid][SheetMonitor], "sSphere")-1, 9);
		UpdateTrait(User[playerid][SheetMonitor], trait, 1, 1);	
		SFM(playerid, GRAD2, "Info: Character's affinty sphere has been set to %s.", trait);
	}
	DeletePVar(playerid, "bAffinity");
}
CMD:showrpf(playerid, params[])
{
	if(User[playerid][Logged])
	{
					new query[124];
					format(query, sizeof query,"SELECT slot,desc FROM features WHERE userid = %d ORDER BY slot ASC", User[playerid][UserID]);
					new DBResult: Result = db_query(Database, query);
					large_string[0] = EOS;
					do
					{
						if(db_num_rows(Result))
						{
							new desc[250];
							db_get_field_assoc(Result, "desc", desc, sizeof desc);
							format(large_string,sizeof large_string,"%s%s\n", large_string, desc);
						}
						else
						{
							MSG(playerid,GOLD,"ERROR:"GR" No roleplay features found.");
							break;
						}
					}
					while(db_next_row(Result));
					db_free_result(Result);
					format(query,sizeof query,"%s's features:", User[playerid][Username]);
					Dialog_Show(playerid,dSheetOtherShow,DIALOG_STYLE_LIST,"Roleplay Features",large_string,"Print","Close");
					return 1;
	}
	return 0;
}
CMD:showmf(playerid, params[])
{
	if(User[playerid][Logged])
	{
					new query[124];
					format(query, sizeof query,"SELECT item,value,start FROM advantages WHERE userid = %d ORDER BY item ASC", User[playerid][UserID]);
					new DBResult: Result = db_query(Database, query);
					large_string[0] = EOS;
					do
					{
						if(db_num_rows(Result))
						{
							new item[64], value, start;
							db_get_field_assoc(Result, "item", item, sizeof item);
							value = db_get_field_assoc_int(Result, "value");
							start = db_get_field_assoc_int(Result, "start");
							new merit[13];
							switch(start)
							{
								case -1: merit = "Merit";
								case -2: merit = "Flaw";
								case -3: merit = "Low Torment";
								case -4: merit = "High Torment";
							}
							format(large_string, sizeof large_string, "%s%s [%dpt. %s]\n", large_string, item, value, merit);
						}
						else
						{
							MSG(playerid,GOLD,"ERROR:"GR" No Merits and Flaws found in the database.");
							break;
						}
					}
					while(db_next_row(Result));
					db_free_result(Result);
					Dialog_Show(playerid,dSheetOther,DIALOG_STYLE_LIST,"Merits and Flaws",large_string,"Print","Close");		
					return 1;
	}
	return 0;
}

Dialog:dSheetSelectShow(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
					new query[124];
					format(query, sizeof query,"SELECT slot,desc FROM features WHERE userid = %d ORDER BY slot ASC", User[playerid][SheetMonitorID]);
					new DBResult: Result = db_query(Database, query);
					large_string[0] = EOS;
					do
					{
						if(db_num_rows(Result))
						{
							new desc[250];
							db_get_field_assoc(Result, "desc", desc, sizeof desc);
							format(large_string,sizeof large_string,"%s%s\n", large_string, desc);
						}
						else
						{
							MSG(playerid,GOLD,"ERROR:"GR" No roleplay features found.");
							break;
						}
					}
					while(db_next_row(Result));
					db_free_result(Result);
					Dialog_Show(playerid,dSheetOtherShow,DIALOG_STYLE_LIST,"Roleplay Features",large_string,"Print","Close");
					return 1;
			}
			case 1:
			{
					new query[124];
					format(query, sizeof query,"SELECT item,value,start FROM advantages WHERE userid = %d ORDER BY item ASC", User[playerid][SheetMonitorID]);
					new DBResult: Result = db_query(Database, query);
					large_string[0] = EOS;
					do
					{
						if(db_num_rows(Result))
						{
							new item[64], value, start;
							db_get_field_assoc(Result, "item", item, sizeof item);
							value = db_get_field_assoc_int(Result, "value");
							start = db_get_field_assoc_int(Result, "start");
							new merit[13];
							switch(start)
							{
								case -1: merit = "Merit";
								case -2: merit = "Flaw";
								case -3: merit = "Low Torment";
								case -4: merit = "High Torment";
							}
							format(large_string, sizeof large_string, "%s%s [%dpt. %s]\n", large_string, item, value, merit);
						}
						else
						{
							MSG(playerid,GOLD,"ERROR:"GR" No data found.");
							break;
						}
					}
					while(db_next_row(Result));
					db_free_result(Result);
					Dialog_Show(playerid,dSheetOtherShow,DIALOG_STYLE_LIST,"Merit and Flaws",large_string,"Show","Close");
					return 1;
			}
		}
	}
	else
	{
			if(User[playerid][Useradmin] > 0) Dialog_Show(playerid,dSheetOtherAdmin,DIALOG_STYLE_LIST,"Other","List\nShow Roleplay Feature\nAdd Roleplay Feature\nDelete Roleplay Feature","Close","");	
			else	Dialog_Show(playerid,dSheetOtherAdmin,DIALOG_STYLE_LIST,"Other","List\nShow Roleplay Feature","Close","");
	}
	return 1;
}
Dialog:dSheetOtherAdmin(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				Dialog_Show(playerid,dSheetSelectShow,DIALOG_STYLE_LIST,"Other","List Roleplay Features\nList/Show Merits and Flaws","Close","");
			}
			case 1:
			{
					new query[124];
					format(query, sizeof query,"SELECT slot,desc FROM features WHERE userid = %d ORDER BY slot ASC", User[playerid][SheetMonitorID]);
					new DBResult: Result = db_query(Database, query);
					large_string[0] = EOS;
					do
					{
						if(db_num_rows(Result))
						{
							new desc[250];
							db_get_field_assoc(Result, "desc", desc, sizeof desc);
							format(large_string,sizeof large_string,"%s%s\n", large_string, desc);
						}
						else
						{
							MSG(playerid,GOLD,"ERROR:"GR" No roleplay features found.");
							break;
						}
					}
					while(db_next_row(Result));
					db_free_result(Result);
					format(query,sizeof query,"%s's features:", User[User[playerid][SheetMonitor]][Username]);
					Dialog_Show(playerid,dSheetOtherShow,DIALOG_STYLE_LIST,"Other",large_string,"Show","Close");
								
					return 1;
			}
			case 2: Dialog_Show(playerid,dSheetAddFeature,DIALOG_STYLE_INPUT,"Add a Feature","Insert the roleplay feature in the field below:","Set","Cancel");		
			case 3: Dialog_Show(playerid,dSheetDelFeature,DIALOG_STYLE_INPUT,"Delete a Feature","Insert the unique ID of the roleplay feature you wish to delete:","Set","Cancel");		
		}		
	}
	return 1;
}
Dialog:dSheetOtherShow(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!isnull(inputtext)) PlayerActionMessageDark(playerid, inputtext);
	}
	return 1;
}
Dialog:dSheetOther(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!isnull(inputtext))
			PlayerActionMessageDark(playerid, inputtext);
	}
	return 1;
}

Dialog:dSheetDelFeature(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
			MSG(playerid, GOLD, "ERROR:"GR" Invalid input.");
			return Dialog_Show(playerid,dSheetOtherAdmin,DIALOG_STYLE_LIST,"Other","List\nShow Roleplay Feature\nAdd Roleplay Feature\nDelete Roleplay Feature","Close","");	
		}
		new slot = strval(inputtext);
		format(large_string, sizeof large_string,"DELETE FROM features WHERE userid = %d AND slot = %d", User[playerid][SheetMonitorID], slot);
		db_query(Database, large_string);
		large_string[0] = EOS;
		MSG(playerid, GOLD, "Info:"GR" Roleplay Feature deleted.");
		if(User[playerid][Useradmin] > 0) Dialog_Show(playerid,dSheetOtherAdmin,DIALOG_STYLE_LIST,"Other","List\nShow Roleplay Feature\nAdd Roleplay Feature\nDelete Roleplay Feature","Close","");	
		else	Dialog_Show(playerid,dSheetOtherAdmin,DIALOG_STYLE_LIST,"Other","List\nShow Roleplay Feature","Close","");
	}
	return 1;
}
Dialog:dSheetAddFeature(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		format(large_string,sizeof large_string,"SELECT slot FROM features WHERE userid = %d ORDER BY slot DESC LIMIT 1",User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, large_string);
		new slot = 0;
		if(db_num_rows(Result))
			slot = db_get_field_assoc_int(Result, "slot")+1;
		format(large_string,sizeof large_string,"INSERT INTO features (slot,userid,desc,type) VALUES (%d,%d,'%q',1)", slot, User[playerid][SheetMonitorID], inputtext);
		db_query(Database, large_string);
		db_free_result(Result);
		large_string[0] = EOS;
		MSG(playerid, GOLD, "Info:"GR" Roleplay Feature added.");
		if(User[playerid][Useradmin] > 0) Dialog_Show(playerid,dSheetOtherAdmin,DIALOG_STYLE_LIST,"Other","List\nShow Roleplay Feature\nAdd Roleplay Feature\nDelete Roleplay Feature","Close","");	
		else	Dialog_Show(playerid,dSheetOtherAdmin,DIALOG_STYLE_LIST,"Other","List\nShow Roleplay Feature","Close","");		
	}
	return 1;
}
Dialog:dSheetBuildGiftOpt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext,"tribe", true))
		{
			if(GetPVarInt(playerid, "gTribe") == 1) return MSG(playerid,GOLD,"ERROR:"GR" You have already chosen a starting Tribe gift.");
			SetPVarString(User[playerid][SheetMonitor], "buildGiftCategory", inputtext);
			Dialog_Show(playerid,dSheetBuildGiftNow,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the starting Gift you wish to acquire:","Set","Close");
			MSG(playerid,GOLD,"Info:"GR" Type (/learn tribe) to see your Tribe beginning gifts.");
			return 1;
		}
		if(!strcmp(inputtext,"auspice", true))
		{
			if(GetPVarInt(playerid, "gAuspice") == 1) return MSG(playerid,GOLD,"ERROR:"GR" You have already chosen a starting Auspice gift.");
			SetPVarString(User[playerid][SheetMonitor], "buildGiftCategory", inputtext);
			Dialog_Show(playerid,dSheetBuildGiftNow,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the starting Gift you wish to acquire:","Set","Close");
			MSG(playerid,GOLD,"Info:"GR" Type (/learn auspice) to see your Auspice beginning gifts.");
			return 1;
		}	
		if(!strcmp(inputtext,"breed", true))
		{
			if(GetPVarInt(playerid, "gBreed") == 1) return MSG(playerid,GOLD,"ERROR:"GR" You have already chosen a starting Breed gift.");
			SetPVarString(User[playerid][SheetMonitor], "buildGiftCategory", inputtext);
			Dialog_Show(playerid,dSheetBuildGiftNow,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the starting Gift you wish to acquire:","Set","Close");
			MSG(playerid,GOLD,"Info:"GR" Type (/learn breed) to see your Breed beginning gifts.");
			return 1;
		}
		MSG(playerid,GOLD,"ERROR:"GR" Invalid category specified. (Valid values: Breed, Tribe, Auspice)"); 
		/*
		if(!strcmp(inputtext,"tribe", true) || !strcmp(inputtext,"auspice", true) || !strcmp(inputtext,"breed", true))
		{
			SetPVarString(User[playerid][SheetMonitor], "buildGiftCategory", inputtext);
			Dialog_Show(playerid,dSheetBuildGiftNow,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the starting Gift you wish to acquire:","Set","Close");
		}
		else MSG(playerid,GOLD,"ERROR:"GR" Invalid category specified. (Valid values: Breed, Tribe, Auspice)");
		*/

	}
	return 1;
}
Dialog:dSheetBuildGiftNow(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new breed[MAX_TRAIT_NAME],auspice[MAX_TRAIT_NAME],tribe[MAX_TRAIT_NAME],category[20];
		GetPVarString(User[playerid][SheetMonitor], "Auspice", auspice, MAX_TRAIT_NAME);
		GetPVarString(User[playerid][SheetMonitor], "Breed", breed, MAX_TRAIT_NAME);
		GetPVarString(User[playerid][SheetMonitor], "Tribe", tribe, MAX_TRAIT_NAME);
		GetPVarString(User[playerid][SheetMonitor], "buildGiftCategory", category, MAX_TRAIT_NAME);
		new which[10];
		strcat(which, category);
		if(!strcmp(category, "Auspice", true)) format(category, sizeof category,"%s", auspice);
		if(!strcmp(category, "Breed", true)) format(category, sizeof category,"%s", breed);
		if(!strcmp(category, "Tribe", true)) format(category, sizeof category,"%s", tribe);
		new query[124];
		format(query, sizeof query,"SELECT 1 FROM limits WHERE item = '%s' AND value = 1 AND race = 2 AND type = '%s'", inputtext, category);
		new DBResult: Result = db_query(Database, query);
		if(db_num_rows(Result)) 
		{
			db_free_result(Result);
			new trait[MAX_TRAIT_NAME];
			strcat(trait, inputtext);
			format(query,sizeof query,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",trait,User[playerid][UserID]);
			Result = db_query(Database, query);
			if(db_num_rows(Result))
			{
				MSG(playerid,GOLD,"ERROR:"GR" You already have the specified Gift.");
			}
			else
			{
				new type[24];
				db_get_field_assoc(Result, "type", type, 24);
				UpdateTrait(User[playerid][SheetMonitor], trait, 1, 1);	
				UpdateTrait(User[playerid][SheetMonitor], "sGifts", GetPVarInt(playerid, "sGifts")-1, 9);
				if(!strcmp(which, "Auspice", true)) UpdateTrait(User[playerid][SheetMonitor], "gAuspice", 1, 9);
				if(!strcmp(which, "Tribe", true)) UpdateTrait(User[playerid][SheetMonitor], "gTribe", 1, 9);
				if(!strcmp(which, "Breed", true)) UpdateTrait(User[playerid][SheetMonitor], "gBreed", 1, 9);
			}
		}
		else
		{
			MSG(playerid,GOLD,"ERROR:"GR" Invalid data specified.");
			cmd_cs(playerid, "");
		}
		DeletePVar(User[playerid][SheetMonitor], "buildGiftCategory");
		db_free_result(Result);
	}
	return 1;
}
// Hunter building Edge during CHAR SHEET creation with starter points 
Dialog:dSheetBuildEdge(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		new query[124],
		freebie = GetPVarInt(playerid, "sEdges"),
		cost =  1;
		if(GetPVarInt(playerid,trait) == 5) return MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");									
		if(freebie == 0) return cmd_next(playerid,"");
		UpdateTrait(playerid, "sEdges", freebie-cost, 9);
		UpdateTrait(playerid, trait, GetPVarInt(playerid, trait)+1, 1);
		format(query,sizeof query,"Info: %d starting point(s) have been invested in %s. (%d left)",cost,trait,freebie-cost);
		MSG(playerid,GREEN,query);
		if(freebie-cost == 0) cmd_next(playerid, "");
	}
	return 1;
}

// Changeling Building Arts during Character Sheet Creation with starter points
// Dialog:sdSheetSetArtOpt(playerid, response, listitem, inputtext[])
// {
// 	if(response)
// 	{
// 		switch(listitem)
// 		{
// 			case 0:
// 			{
// 				return Dialog_Show(playerid,dSheetBuildArt,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Art (case-sensitive) you wish to invest starting points into:\nValid values (' is replaced with `):\n Autumn, Chicanery, Chronos, Contract, Dragon`s Ire, Legerdemain, Metamorphosis, Naming.\n Oneiromancy, Primal, Pyretics, Skycraft, Soothsay, Sovereign, Spring, Summer, Wayfare, Winter","Set","Close");
// 			}
// 			case 1:
// 			{
// 				return Dialog_Show(playerid,dSheetBuildArtUpg,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Art (case-sensitive) you wish to acquire with starter points:\nValid values (' is replaced with `):\n Autumn, Chicanery, Chronos, Contract, Dragon`s Ire, Legerdemain, Metamorphosis, Naming.\n Oneiromancy, Primal, Pyretics, Skycraft, Soothsay, Sovereign, Spring, Summer, Wayfare, Winter","Set","Close");
// 			}
// 		}
// 	}
// 	return 1;
// }
Dialog:dSheetBuildArt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		new query[124],
		freebie = GetPVarInt(playerid, "sArts"),
		cost =  1;
		if(GetPVarInt(playerid,trait) == 5) return MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");									
		if(freebie == 0) return cmd_next(playerid,"");
		UpdateTrait(playerid, "sArts", freebie-cost, 9);
		UpdateTrait(playerid, trait, GetPVarInt(playerid, trait)+1, 1);
		format(query,sizeof query,"Info: %d starting point(s) have been invested in %s. (%d left)",cost,trait,freebie-cost);
		MSG(playerid,GREEN,query);
		if(freebie-cost == 0) cmd_next(playerid, "");
	}
	return 1;
}

// Changeling choosing arts with FREEBIES
Dialog:sdSheetArtOpt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				Dialog_Show(playerid,sdSheetBuildArt,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Art (case-sensitive) you wish to acquire:","Set","Close");
			}
			case 1:
			{
				Dialog_Show(playerid,sdSheetBuildArtUpg,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Art (case-sensitive) you wish to upgrade:","Set","Close");
			}
		}
	}
	return 1;
}
Dialog:sdSheetBuildArt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new freebie = GetPVarInt(playerid, "sFreebie"); 
		new cost = 5;
		if(freebie == 0) {
			return cmd_next(playerid, "");
		}
		if(freebie < cost)
		{
			new str[124];
			format(str,sizeof str,"ERROR: You cannot afford this! (Current Freebies: %d; Freebies Required: %d)", freebie, cost);
			return MSG(playerid,GRAD2,str);
		}
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);

		format(large_string,sizeof large_string,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result)) 
		{
			Dialog_Show(playerid,sdSheetArtOpt,DIALOG_STYLE_LIST,"Arts Interaction (Using: Freebie Points)","Append Art\nUpgrade Art","Set","Close");	
			return MSG(playerid,GRAD2,"ERROR: Specified Art already exists! Click 'Upgrade Sphere' option to upgrade it.");
		}	
		if(GetPVarInt(playerid, trait) > 0) return MSG(playerid,GRAD2,"ERROR: Invalid Art specified."); 
		new query[124];
		format(query, sizeof query, "Info: You have purchased %s for %d freebies. (Freebies left: %d)", trait, cost, freebie-cost);
		MSG(playerid, GRAD2, query);
		MSG(playerid,GRAD2,"Info: Click on [Arts] to add more points in it or add a new one.");
		format(query,sizeof query,"INSERT INTO sheet (userid,trait,value,type) VALUES (%d,'%s',1,1)",User[playerid][SheetMonitorID],trait);
		db_query(Database, query);
		SetPVarInt(playerid, trait, 1);
		UpdateTrait(User[playerid][SheetMonitor], "sFreebie", GetPVarInt(User[playerid][SheetMonitor], "sFreebie")-cost, 9);
		Dialog_Show(playerid,sdSheetArtOpt,DIALOG_STYLE_LIST,"Arts Interaction (Using: Freebie Points)","Append Art\nUpgrade Art","Set","Close");	
		db_free_result(Result);
	}
	return 1;
}
Dialog:sdSheetBuildArtUpg(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new freebie = GetPVarInt(playerid, "sFreebie"); 
		new cost = 5;
		if(freebie < cost)
		{
			new str[124];
			format(str,sizeof str,"ERROR: You cannot afford this! (Current Freebies: %d; Freebies Required: %d)", freebie, cost);
			MSG(playerid,GRAD2,str);
			return cmd_next(playerid, "");
		}
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		if(GetPVarInt(playerid, trait) == 5) 
		{
			Dialog_Show(playerid,sdSheetArtOpt,DIALOG_STYLE_LIST,"Arts Interaction (Using: Freebie Points)","Append Art\nUpgrade Art","Set","Close");	
			return MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");	
		}
		new query[124];
		format(query,sizeof query,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
			format(query, sizeof query, "Info: You have upgraded %s for %d freebies. (Freebies left: %d)", trait, cost, freebie-cost);
			MSG(playerid, GRAD2, query);
			MSG(playerid,GRAD2,"Info: Click on [Arts] to add more points in it or add a new one.");
			format(query,sizeof query,"UPDATE sheet SET value = value+1 WHERE trait = '%s' AND userid = %d AND type = 1",trait, User[playerid][SheetMonitorID]);
			db_query(Database, query);
			SetPVarInt(User[playerid][SheetMonitor], trait, GetPVarInt(playerid,trait)+1);
			UpdateTrait(User[playerid][SheetMonitor], "sFreebie", GetPVarInt(playerid, "sFreebie")-cost, 9);
			Dialog_Show(playerid,sdSheetArtOpt,DIALOG_STYLE_LIST,"Arts Interaction (Using: Freebie Points)","Append Art\nUpgrade Art","Set","Close");	
		}
		else
		{
			return MSG(playerid,GRAD2,"ERROR: Invalid Art specified! Click on 'Append Art' to set it first!");
		}

	}
	return 1;
}
// ------ WITH FREEBIES

// ---
Dialog:dSheetBuildBackgFreebie(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		new query[124],
		freebie = GetPVarInt(playerid, "sFreebie"),
		cost =  1;
		if(GetPVarInt(playerid,trait) == 5) return MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");									
		if(freebie == 0) return cmd_next(playerid,"");
		if(freebie < cost)
		{
			format(query,sizeof query,"ERROR: You cannot afford this! (Current Freebies: %d; Trait Cost: %d)",freebie,cost);
			return MSG(playerid,GRAD2,query);
		}
		else
		{
			UpdateTrait(playerid, "sFreebie", freebie-cost, 9);
			UpdateTrait(playerid, trait, GetPVarInt(playerid, trait)+1, 2);
			format(query,sizeof query,"Info: %d freebie(s) have been invested in %s. (%d left)",cost,trait,freebie-cost);
			MSG(playerid,GREEN,query);
			if(User[playerid][Userrace] == 1)// vampire
			{
				if(!strcmp("Generation", inputtext))
				{
					UpdateTrait(playerid, "vGeneration", GetPVarInt(playerid,"vGeneration")-1);
				}
			}
		}
	}
	return 1;
}
Dialog:dSheetBuildBackgOpt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				Dialog_Show(playerid,dSheetBuildBackground,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Background (case-sensitive) you wish to acquire:","Set","Close");
			}
			case 1:
			{
				Dialog_Show(playerid,dSheetBuildBackgroundUpg,DIALOG_STYLE_INPUT,"Interactive Character Sheet","Insert the exact name of the Background (case-sensitive) you wish to upgrade:","Set","Close");
			}
		}
	}
	return 1;
}

Dialog:dSheetBuildBackgroundUpg(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPVarInt(playerid, "sBackgrounds") == 0) return cmd_next(playerid, "");
		new trait[MAX_TRAIT_NAME];
		strcat(trait, inputtext);
		if(GetPVarInt(playerid, trait) == 5) 
		{
			Dialog_Show(playerid,dSheetBuildBackgOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet","Append Background\nUpgrade Background","Set","Close");
			return MSG(playerid,GRAD2,"ERROR: Specified trait is mastered.");	
		}
		new query[124];
		format(query,sizeof query,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 2",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
			SFM(playerid,GRAD2,"Info: You have upgraded the Background: %s.",trait);
			MSG(playerid,GRAD2,"Info: Click on [Backgrounds] to add more points in it or add a new one.");
			format(query,sizeof query,"UPDATE sheet SET value = value+1 WHERE trait = '%s' AND userid = %d AND type = 2",trait, User[playerid][SheetMonitorID]);
			db_query(Database, query);
			SetPVarInt(playerid, trait, GetPVarInt(playerid,trait)+1);
			UpdateTrait(playerid, "sBackgrounds", GetPVarInt(playerid, "sBackgrounds")-1, 9);
			Dialog_Show(playerid,dSheetBuildBackgOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet","Append Background\nUpgrade Background","Set","Close");

			if(User[playerid][Userrace] == 1)// vampire
			{
				if(!strcmp("Generation", inputtext))
				{
					UpdateTrait(playerid, "vGeneration", GetPVarInt(playerid,"vGeneration")-1);
				}
			}
		}
		else
		{
			return MSG(playerid,GRAD2,"ERROR: Invalid Background specified! Click on 'Append Background' to set it first!");
		}

	}
	return 1;
}
Dialog:dSheetBuildBackground(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPVarInt(playerid, "sBackgrounds") == 0)
			return cmd_next(playerid, "");
		new trait[MAX_TRAIT_NAME];
		if(strlen(inputtext) < 3)
			return MSG(playerid, GOLD, "ERROR:"GR" Your input doesn't seem valid.");
		strcat(trait, inputtext);
		format(large_string,sizeof large_string,"SELECT 1 FROM sheet WHERE trait = '%s' AND userid = %d AND type = 2",trait,User[playerid][SheetMonitorID]);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result)) 
		{
			Dialog_Show(playerid,dSheetBuildBackgOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet","Append Background\nUpgrade Background","Set","Close");
			return MSG(playerid,GRAD2,"ERROR: Specified Background already exists! Click 'Upgrade Background' option to upgrade it.");
		}	
		if(GetPVarInt(playerid, trait) > 0) return MSG(playerid,GRAD2,"ERROR: Invalid Background specified.");
		new query[124];
		SFM(playerid,GRAD2,"Info: You have acquired the background: %s.",trait);
		MSG(playerid,GRAD2,"Info: Click on [Backgrounds] to add more points in it or add a new one.");
		format(query,sizeof query,"INSERT INTO sheet (userid,trait,value,type) VALUES (%d,'%s',1,2)",User[playerid][SheetMonitorID],trait);
		db_query(Database, query);
		SetPVarInt(playerid, trait, 1);
		UpdateTrait(playerid, "sBackgrounds", GetPVarInt(playerid, "sBackgrounds")-1, 9);
		Dialog_Show(playerid,dSheetBuildBackgOpt,DIALOG_STYLE_LIST,"Interactive Character Sheet","Append Background\nUpgrade Background","Set","Close");  
		db_free_result(Result);
		
		if(User[playerid][Userrace] == 1)// vampire
		{
			if(!strcmp("Generation", inputtext))
			{
				UpdateTrait(playerid, "vGeneration", GetPVarInt(playerid,"vGeneration")-1);
			}
		}
	}
	return 1;
}

Dialog:dPrioitizeAbs(playerid, response, listitem, inputtext[])
{
	if(!response) 
	{
		Dialog_Show(playerid,dPrioitizeAbs,DIALOG_STYLE_INPUT,"Prioitize Secondary Category","Insert the category you wish to priotize as primary:\n\nValid values: Talents, Skills, Knowledges","Select","");
		MSG(playerid,GOLD,"ERROR:"GR" You cannot skip this step!");
		return 1;
	}
	new bool:found;
	if(strfind("talents", inputtext, true) != -1)
	{
		UpdateTrait(playerid, "pCategory", 1, 9);
		found = true;
	}	
	if(strfind("skills", inputtext, true) != -1)
	{
		UpdateTrait(playerid, "pCategory", 2, 9);
		found = true;
	}	
	if(strfind("knowledges", inputtext, true) != -1)
	{
		UpdateTrait(playerid, "pCategory", 3, 9);
		found = true;
	}	
	if(!found)
	{
		Dialog_Show(playerid,dPrioitizeAbs,DIALOG_STYLE_INPUT,"Prioitize Primary Category","Insert the category you wish to priotize as primary:\n\nValid values: Talents, Skills, Knowledges","Select","");
		MSG(playerid,GOLD,"ERROR:"GR" Insert a valid input!");
		return 1;
	}
	Dialog_Show(playerid,dPrioitizeAbsS,DIALOG_STYLE_INPUT,"Prioitize Secondary Category","Insert the category you wish to priotize as secondary:\n\nValid values: Talents, Skills, Knowledges","Select","");
	return 1;
}
Dialog:dPrioitizeAbsS(playerid, response, listitem, inputtext[])
{
	if(!response) 
	{
		Dialog_Show(playerid,dPrioitizeAbsS,DIALOG_STYLE_INPUT,"Prioitize Secondary Category","Insert the category you wish to priotize as secondary:\n\nValid values: Talents, Skills, Knowledges","Select","");
		MSG(playerid,GOLD,"ERROR:"GR" You cannot skip this step!");
		return 1;
	}
	new bool:found;
	if(strfind("talents", inputtext, true) != -1)
	{
		if(GetPVarInt(playerid, "pCategory") == 1) 
		{	
			Dialog_Show(playerid,dPrioitizeAbsS,DIALOG_STYLE_INPUT,"Prioitize Primary Category","Insert the category you wish to priotize as secondary:\n\nValid values: Talents, Skills, Knowledges","Select","");
			MSG(playerid,GOLD,"ERROR:"GR" Specified category is priotized as primary.");
			return 1;
		}
		UpdateTrait(playerid, "sCategory", 1, 9);
		found = true;
	}	
	if(strfind("skills", inputtext, true) != -1)
	{
		if(GetPVarInt(playerid, "pCategory") == 2) 
		{	
			Dialog_Show(playerid,dPrioitizeAbsS,DIALOG_STYLE_INPUT,"Prioitize Secondary Category","Insert the category you wish to priotize as secondary:\n\nValid values: Talents, Skills, Knowledges","Select","");
			MSG(playerid,GOLD,"ERROR:"GR" Specified category is priotized as primary.");
			return 1;
		}
		UpdateTrait(playerid, "sCategory", 2, 9);
		found = true;
	}	
	if(strfind("knowledges", inputtext, true) != -1)
	{
		if(GetPVarInt(playerid, "pCategory") == 3) 
		{	
			Dialog_Show(playerid,dPrioitizeAbsS,DIALOG_STYLE_INPUT,"Prioitize Secondary Category","Insert the category you wish to priotize as secondary:\n\nValid values: Talents, Skills, Knowledges","Select","");
			MSG(playerid,GOLD,"ERROR:"GR" Specified category is priotized as primary.");
			return 1;
		}
		UpdateTrait(playerid, "sCategory", 3, 9);
		found = true;
	}	
	if(!found)
	{
		Dialog_Show(playerid,dPrioitizeAbsS,DIALOG_STYLE_INPUT,"Prioitize Secondary Category","Insert the category you wish to priotize as secondary:\n\nValid values: Talents, Skills, Knowledges","Select","");
		MSG(playerid,GOLD,"ERROR:"GR" Insert a valid input!");
		return 1;
	}
	Dialog_Show(playerid,dPrioitizeAbsT,DIALOG_STYLE_INPUT,"Prioitize Tetiary Category","Insert the category you wish to priotize as tetiary:\n\nValid values: Talents, Skills, Knowledges","Select","");
	return 1;
}
Dialog:dPrioitizeAbsT(playerid, response, listitem, inputtext[])
{
	if(!response) 
	{
		Dialog_Show(playerid,dPrioitizeAbsT,DIALOG_STYLE_INPUT,"Prioitize Tetiary Category","Insert the category you wish to priotize as tetiary:\n\nValid values: Talents, Skills, Knowledges","Select","");
		MSG(playerid,GOLD,"ERROR:"GR" You cannot skip this step!");
		return 1;
	}
	new bool:found;
	if(strfind("talents", inputtext, true) != -1)
	{
		if(GetPVarInt(playerid, "sCategory") == 1 || GetPVarInt(playerid, "pCategory") == 1) 
		{	
			Dialog_Show(playerid,dPrioitizeAbsT,DIALOG_STYLE_INPUT,"Prioitize Tetiary Category","Insert the category you wish to priotize as tetiary:\n\nValid values: Talents, Skills, Knowledges","Select","");
			MSG(playerid,GOLD,"ERROR:"GR" Specified category is priotized as primary/secondary.");
			return 1;
		}
		UpdateTrait(playerid, "tCategory", 1, 9);
		found = true;
	}	
	if(strfind("skills", inputtext, true) != -1)
	{
		if(GetPVarInt(playerid, "sCategory") == 2 || GetPVarInt(playerid, "pCategory") == 2) 
		{	
			Dialog_Show(playerid,dPrioitizeAbsT,DIALOG_STYLE_INPUT,"Prioitize Tetiary Category","Insert the category you wish to priotize as tetiary:\n\nValid values: Talents, Skills, Knowledges","Select","");
			MSG(playerid,GOLD,"ERROR:"GR" Specified category is priotized as primary/secondary.");
			return 1;
		}
		UpdateTrait(playerid, "tCategory", 2, 9);
		found = true;
	}	
	if(strfind("knowledges", inputtext, true) != -1)
	{
		if(GetPVarInt(playerid, "sCategory") == 3 || GetPVarInt(playerid, "pCategory") == 3) 
		{	
			Dialog_Show(playerid,dPrioitizeAbsT,DIALOG_STYLE_INPUT,"Prioitize Tetiary Category","Insert the category you wish to priotize as tetiary:\n\nValid values: Talents, Skills, Knowledges","Select","");
			MSG(playerid,GOLD,"ERROR:"GR" Specified category is priotized as primary/secondary.");
			return 1;
		}
		UpdateTrait(playerid, "tCategory", 3, 9);
		found = true;
	}	
	if(!found)
	{
		Dialog_Show(playerid,dPrioitizeAbsT,DIALOG_STYLE_INPUT,"Prioitize Tetiary Category","Insert the category you wish to priotize as tetiary:\n\nValid values: Talents, Skills, Knowledges","Select","");
		MSG(playerid,GOLD,"ERROR:"GR" Insert a valid input!");
		return 1;
	}

	// --
	RemoveTrait(playerid, "cs_ProceedBackup");
	DeletePVar(playerid, "cs_pBackup");
	UpdateTrait(playerid, "FreshCS", 5, 9);
	new categ = GetPVarInt(playerid, "pCategory");
	new name[10+1];
	switch(categ) 
	{
		case 1: 
		{
			UpdateTrait(playerid, "sTalents", 13, 9);
			name = "Talents";
		}
		case 2: 
		{
			UpdateTrait(playerid, "sSkills", 13, 9);
			name = "Skills";
		}
		case 3:
		{
			UpdateTrait(playerid, "sKnowledges", 13, 9);
			name = "Knowledges";
		}
	}
	SFM(playerid,WHITE,"Step II, Part I (Select Abilities):"GR" Invest thirteen points into your primary category. (%s)", name);
	
	return 1;
}
// -- ABS ^
Dialog:dPrioitize(playerid, response, listitem, inputtext[])
{

	if(!response) 
	{
		Dialog_Show(playerid,dPrioitize,DIALOG_STYLE_INPUT,"Prioitize Primary Category","Insert the category you wish to priotize as primary:\n\nValid values: Physical, Social, Mental","Select","");
		MSG(playerid,GOLD,"ERROR:"GR" You cannot skip this step!");
		return 1;
	}
	new bool:found;
	if(strfind("physical", inputtext, true) != -1)
	{
		UpdateTrait(playerid, "pCategory", 1, 9);
		found = true;
	}	
	if(strfind("social", inputtext, true) != -1)
	{
		UpdateTrait(playerid, "pCategory", 2, 9);
		found = true;
	}	
	if(strfind("mental", inputtext, true) != -1)
	{
		UpdateTrait(playerid, "pCategory", 3, 9);
		found = true;
	}	
	if(!found)
	{
		Dialog_Show(playerid,dPrioitize,DIALOG_STYLE_INPUT,"Prioitize Primary Category","Insert the category you wish to priotize as primary:\n\nValid values: Physical, Social, Mental","Select","");
		MSG(playerid,GOLD,"ERROR:"GR" Insert a valid input!");
		return 1;
	}
	Dialog_Show(playerid,dPrioitizeS,DIALOG_STYLE_INPUT,"Prioitize Secondary Category","Insert the category you wish to priotize as secondary:\n\nValid values: Physical, Social, Mental","Select","");
	return 1;
}
Dialog:dPrioitizeS(playerid, response, listitem, inputtext[])
{
	if(!response) 
	{
		Dialog_Show(playerid,dPrioitizeS,DIALOG_STYLE_INPUT,"Prioitize Secondary Category","Insert the category you wish to priotize as secondary:\n\nValid values: Physical, Social, Mental","Select","");
		MSG(playerid,GOLD,"ERROR:"GR" You cannot skip this step!");
		return 1;
	}
	new bool:found;
	if(strfind("physical", inputtext, true) != -1)
	{
		if(GetPVarInt(playerid, "pCategory") == 1) 
		{	
			Dialog_Show(playerid,dPrioitizeS,DIALOG_STYLE_INPUT,"Prioitize Secondary Category","Insert the category you wish to priotize as secondary:\n\nValid values: Physical, Social, Mental","Select","");
			MSG(playerid,GOLD,"ERROR:"GR" Specified category is priotized as primary.");
			return 1;
		}
		UpdateTrait(playerid, "sCategory", 1, 9);
		found = true;
	}	
	if(strfind("social", inputtext, true) != -1)
	{
		if(GetPVarInt(playerid, "pCategory") == 2) 
		{	
			Dialog_Show(playerid,dPrioitizeS,DIALOG_STYLE_INPUT,"Prioitize Secondary Category","Insert the category you wish to priotize as secondary:\n\nValid values: Physical, Social, Mental","Select","");
			MSG(playerid,GOLD,"ERROR:"GR" Specified category is priotized as primary.");
			return 1;
		}
		UpdateTrait(playerid, "sCategory", 2, 9);
		found = true;
	}	
	if(strfind("mental", inputtext, true) != -1)
	{
		if(GetPVarInt(playerid, "pCategory") == 3) 
		{	
			Dialog_Show(playerid,dPrioitizeS,DIALOG_STYLE_INPUT,"Prioitize Secondary Category","Insert the category you wish to priotize as secondary:\n\nValid values: Physical, Social, Mental","Select","");
			MSG(playerid,GOLD,"ERROR:"GR" Specified category is priotized as primary.");
			return 1;
		}
		UpdateTrait(playerid, "sCategory", 3, 9);
		found = true;
	}	
	if(!found)
	{
		Dialog_Show(playerid,dPrioitizeS,DIALOG_STYLE_INPUT,"Prioitize Secondary Category","Insert the category you wish to priotize as secondary:\n\nValid values: Physical, Social, Mental","Select","");
		MSG(playerid,GOLD,"ERROR:"GR" Insert a valid input!");
		return 1;
	}
	Dialog_Show(playerid,dPrioitizeT,DIALOG_STYLE_INPUT,"Prioitize Tetiary Category","Insert the category you wish to priotize as tetiary:\n\nValid values: Physical, Social, Mental","Select","");
	return 1;
}
Dialog:dPrioitizeT(playerid, response, listitem, inputtext[])
{
	if(!response) 
	{
		Dialog_Show(playerid,dPrioitizeT,DIALOG_STYLE_INPUT,"Prioitize Tetiary Category","Insert the category you wish to priotize as tetiary:\n\nValid values: Physical, Social, Mental","Select","");
		MSG(playerid,GOLD,"ERROR:"GR" You cannot skip this step!");
		return 1;
	}
	new bool:found;
	if(strfind("physical", inputtext, true) != -1)
	{
		if(GetPVarInt(playerid, "sCategory") == 1 || GetPVarInt(playerid, "pCategory") == 1) 
		{	
			Dialog_Show(playerid,dPrioitizeS,DIALOG_STYLE_INPUT,"Prioitize Tetiary Category","Insert the category you wish to priotize as tetiary:\n\nValid values: Physical, Social, Mental","Select","");
			MSG(playerid,GOLD,"ERROR:"GR" Specified category is priotized as primary/secondary.");
			return 1;
		}
		UpdateTrait(playerid, "tCategory", 1, 9);
		found = true;
	}	
	if(strfind("social", inputtext, true) != -1)
	{
		if(GetPVarInt(playerid, "sCategory") == 2 || GetPVarInt(playerid, "pCategory") == 2) 
		{	
			Dialog_Show(playerid,dPrioitizeS,DIALOG_STYLE_INPUT,"Prioitize Tetiary Category","Insert the category you wish to priotize as tetiary:\n\nValid values: Physical, Social, Mental","Select","");
			MSG(playerid,GOLD,"ERROR:"GR" Specified category is priotized as primary/secondary.");
			return 1;
		}
		UpdateTrait(playerid, "tCategory", 2, 9);
		found = true;
	}	
	if(strfind("mental", inputtext, true) != -1)
	{
		if(GetPVarInt(playerid, "sCategory") == 3 || GetPVarInt(playerid, "pCategory") == 3) 
		{	
			Dialog_Show(playerid,dPrioitizeS,DIALOG_STYLE_INPUT,"Prioitize Tetiary Category","Insert the category you wish to priotize as tetiary:\n\nValid values: Physical, Social, Mental","Select","");
			MSG(playerid,GOLD,"ERROR:"GR" Specified category is priotized as primary/secondary.");
			return 1;
		}
		UpdateTrait(playerid, "tCategory", 3, 9);
		found = true;
	}	
	if(!found)
	{
		Dialog_Show(playerid,dPrioitizeT,DIALOG_STYLE_INPUT,"Prioitize Tetiary Category","Insert the category you wish to priotize as tetiary:\n\nValid values: Physical, Social, Mental","Select","");
		MSG(playerid,GOLD,"ERROR:"GR" Insert a valid input!");
		return 1;
	}
	RemoveTrait(playerid, "cs_ProceedBackup");
	DeletePVar(playerid, "cs_pBackup");
	UpdateTrait(playerid, "FreshCS", 2, 9);
	new categ = GetPVarInt(playerid, "pCategory");
	new name[10];
	switch(categ) 
	{
		case 1: 
		{
			UpdateTrait(playerid, "sPhysical", 7, 9);
			name = "Physical";
		}
		case 2: 
		{
			UpdateTrait(playerid, "sSocial", 7, 9);
			name = "Social";
		}
		case 3:
		{
			UpdateTrait(playerid, "sMental", 7, 9);
			name = "Mental";
		}
	}
	//MSG(playerid,WHITE,"Step II, Part I (Select Attributes):"GR" Prioritize the three categories: Physical, Social, Mental (7/5/3).");
	SFM(playerid,WHITE,"Step II, Part I (Select Attributes):"GR" Invest seven points into your primary category. (%s)", name);
	MSG(playerid,WHITE,"Step II, Part I (Select Attributes):"GR" Your character automatically has one dot in each Attribute.");
	
	return 1;
}

CMD:next(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new fresh = GetPVarInt(playerid, "FreshCS");
		switch(fresh)
		{
				case 1:
				{
					new nature[MAX_TRAIT_NAME],
						demeanor[MAX_TRAIT_NAME],
						concept[MAX_TRAIT_NAME],
						sire[MAX_TRAIT_NAME];
					if(User[playerid][Userrace] == 1)
					{
						GetPVarString(playerid, "Nature", nature, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Demeanor", demeanor, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Sire", sire, MAX_TRAIT_NAME);
						if(isnull(nature)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Nature' has not been chosen yet.");
						if(isnull(demeanor)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Demeanor' has not been chosen yet.");
						if(isnull(sire)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Sire' has not been chosen yet.");
					}
					else if(User[playerid][Userrace] == 3)
					{
						new essence[MAX_TRAIT_NAME], affiliation[MAX_TRAIT_NAME],paradigm[MAX_TRAIT_NAME];
						GetPVarString(playerid, "Essence", essence, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Affiliation", affiliation, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Paradigm", paradigm, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Nature", nature, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Demeanor", demeanor, MAX_TRAIT_NAME);
						if(isnull(nature)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Nature' has not been chosen yet.");
						if(isnull(demeanor)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Demeanor' has not been chosen yet.");
						if(isnull(essence)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Essence' has not been chosen yet.");	
						if(isnull(affiliation)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Affiliation' has not been chosen yet.");	
						if(isnull(paradigm)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Paradigm' has not been chosen yet.");		
					}
					else if(User[playerid][Userrace] == 4)
					{
						new creed[MAX_TRAIT_NAME];
						new virtue[MAX_TRAIT_NAME];

						GetPVarString(playerid, "Nature", nature, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Demeanor", demeanor, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Creed", creed, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Primary Virtue", virtue, MAX_TRAIT_NAME);
						if(isnull(nature)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Nature' has not been chosen yet.");
						if(isnull(demeanor)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Demeanor' has not been chosen yet.");
						if(isnull(creed)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Creed' has not been chosen yet.");
						if(isnull(virtue)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Primary Virtue' has not been chosen yet.");
					}
					else if(User[playerid][Userrace] == 5)
					{
						new dfaction[MAX_TRAIT_NAME];
						new house[MAX_TRAIT_NAME];
						new visage[MAX_TRAIT_NAME];

						GetPVarString(playerid, "Nature", nature, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Demeanor", demeanor, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Visage", visage, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Faction", dfaction, MAX_TRAIT_NAME);
						GetPVarString(playerid, "House", house, MAX_TRAIT_NAME);
						if(isnull(nature)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Nature' has not been chosen yet.");
						if(isnull(demeanor)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Demeanor' has not been chosen yet.");
						if(isnull(house)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'House' has not been chosen yet.");
						if(isnull(dfaction)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Faction' has not been chosen yet.");
						if(isnull(visage)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Visage' has not been chosen yet.");
					}					
					else if(User[playerid][Userrace] == 6)
					{
						new kith[MAX_TRAIT_NAME];
						new court[MAX_TRAIT_NAME];
						new legacy[MAX_TRAIT_NAME];
						new seeming[MAX_TRAIT_NAME];

						GetPVarString(playerid, "Kith", kith, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Court", court, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Legacy", legacy, MAX_TRAIT_NAME);
						GetPVarString(playerid, "Seeming", seeming, MAX_TRAIT_NAME);

						if(isnull(kith)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Kith' has not been chosen yet.");
						if(isnull(court)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Court' has not been chosen yet.");
						if(isnull(legacy)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Legacy' has not been chosen yet.");
						if(isnull(seeming)) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Seeming' has not been chosen yet.");
					}		
					GetPVarString(playerid, "Concept", concept, MAX_TRAIT_NAME);	
					if(isnull(concept) && User[playerid][Userrace] != 6) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step! 'Concept' has not been chosen yet.");								
					Dialog_Show(playerid,dPrioitize,DIALOG_STYLE_INPUT,"Prioitize Primary Category","Insert the category you wish to priotize as primary:\n\nValid values: Physical, Social, Mental","Select","");
					SetPVarInt(playerid, "cs_pBackup", 1);
				}
				case 2:
				{
					
					new categ = GetPVarInt(playerid, "pCategory");
					switch(categ)
					{
						case 1: if(GetPVarInt(playerid,"sPhysical") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Physical!");
						case 2: if(GetPVarInt(playerid,"sSocial") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Social!");
						case 3: if(GetPVarInt(playerid,"sMental") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Mental!");
					}
					UpdateTrait(playerid, "FreshCS", 3, 9);
					switch(categ) 
					{
						case 1: RemoveTrait(playerid, "sPhysical");
						case 2: RemoveTrait(playerid, "sSocial");
						case 3: RemoveTrait(playerid, "sMental");
					}
					categ = GetPVarInt(playerid, "sCategory");
					new name[10];
					switch(categ)
					{
						case 1: 
						{
							UpdateTrait(playerid, "sPhysical", 5, 9);
							name = "Physical";
						}
						case 2: 
						{
							UpdateTrait(playerid, "sSocial", 5, 9);
							name = "Social";
						}
						case 3:
						{
							UpdateTrait(playerid, "sMental", 5, 9);
							name = "Mental";
						}
					}
					SFM(playerid,WHITE,"Step II, Part II (Select Attributes):"GR" Invest five points into your secondary category. (%s)", name);
						//MSG(playerid,WHITE,"Step II, Part II (Select Abilities):"GR" Invest into Social Traits: Charisma, Manipulation, Appearance.");			
				
				}
				case 3:
				{

					new categ = GetPVarInt(playerid, "sCategory");
					switch(categ)
					{
						case 1: if(GetPVarInt(playerid,"sPhysical") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points Physical!");
						case 2: if(GetPVarInt(playerid,"sSocial") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Social!");
						case 3: if(GetPVarInt(playerid,"sMental") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Mental!");
					}
					UpdateTrait(playerid, "FreshCS", 4, 9);
					switch(categ) 
					{
						case 1: RemoveTrait(playerid, "sPhysical");
						case 2: RemoveTrait(playerid, "sSocial");
						case 3: RemoveTrait(playerid, "sMental");
					}
					categ = GetPVarInt(playerid, "tCategory");
					new name[10];
					switch(categ)
					{
						case 1: 
						{
							UpdateTrait(playerid, "sPhysical", 3, 9);
							name = "Physical";
						}
						case 2: 
						{
							UpdateTrait(playerid, "sSocial", 3, 9);
							name = "Social";
						}
						case 3:
						{
							UpdateTrait(playerid, "sMental", 3, 9);
							name = "Mental";
						}
					}
					SFM(playerid,WHITE,"Step II, Part III (Select Attributes):"GR" Invest three points into your tetiary category. (%s)", name);	
				}
				case 4:
				{
					new categ = GetPVarInt(playerid, "tCategory");
					switch(categ)
					{
						case 1: if(GetPVarInt(playerid,"sPhysical") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points Physical!");
						case 2: if(GetPVarInt(playerid,"sSocial") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Social!");
						case 3: if(GetPVarInt(playerid,"sMental") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Mental!");
					}
					UpdateTrait(playerid, "FreshCS", 5, 9);
					switch(categ) 
					{
						case 1: RemoveTrait(playerid, "sPhysical");
						case 2: RemoveTrait(playerid, "sSocial");
						case 3: RemoveTrait(playerid, "sMental");
					}

					Dialog_Show(playerid,dPrioitizeAbs,DIALOG_STYLE_INPUT,"Prioitize Primary Category","Insert the category you wish to priotize as primary:\n\nValid values: Talents, Skills, Knowledges","Select","");
					SetPVarInt(playerid, "cs_pBackup", 2);
				}
				case 5:
				{

					new categ = GetPVarInt(playerid, "pCategory");
					printf("categ %d", categ);
					switch(categ)
					{
						case 1: if(GetPVarInt(playerid,"sTalents") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Talents!");
						case 2: if(GetPVarInt(playerid,"sSkills") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Skills!");
						case 3: if(GetPVarInt(playerid,"sKnowledges") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points Knowledges!");
					}
					UpdateTrait(playerid, "FreshCS", 6, 9);
					switch(categ) 
					{
						case 1: RemoveTrait(playerid, "sTalents");
						case 2: RemoveTrait(playerid, "sSkills");
						case 3: RemoveTrait(playerid, "sKnowledges");
					}

					categ = GetPVarInt(playerid, "sCategory");
					new name[12];
					switch(categ)
					{
						case 1: 
						{
							UpdateTrait(playerid, "sTalents", 9, 9);
							name = "Talents";
						}
						case 2: 
						{
							UpdateTrait(playerid, "sSkills", 9, 9);
							name = "Skills";
						}
						case 3:
						{
							UpdateTrait(playerid, "sKnowledges", 9, 9);
							name = "Knowledges";
						}
					}
					if(categ != 0)
						SFM(playerid,WHITE,"Step II, Part III (Select Abilities):"GR" Invest nine points into your secondary category. (%s)", name);	
					else return 1;
					
				}
				case 6:
				{
					new categ = GetPVarInt(playerid, "sCategory");
					switch(categ)
					{
						case 1: if(GetPVarInt(playerid,"sTalents") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Talents!");
						case 2: if(GetPVarInt(playerid,"sSkills") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Skills!");
						case 3: if(GetPVarInt(playerid,"sKnowledges") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points Knowledges!");
					}
					UpdateTrait(playerid, "FreshCS", 7, 9);
					switch(categ) 
					{
						case 1: RemoveTrait(playerid, "sTalents");
						case 2: RemoveTrait(playerid, "sSkills");
						case 3: RemoveTrait(playerid, "sKnowledges");
					}

					categ = GetPVarInt(playerid, "tCategory");
					new name[12];
					switch(categ)
					{
						case 1: 
						{
							UpdateTrait(playerid, "sTalents", 5, 9);
							name = "Talents";
						}
						case 2: 
						{
							UpdateTrait(playerid, "sSkills", 5, 9);
							name = "Skills";
						}
						case 3:
						{
							UpdateTrait(playerid, "sKnowledges", 5, 9);
							name = "Knowledges";
						}
					}
					SFM(playerid,WHITE,"Step II, Part III (Select Abilities):"GR" Invest five points into your tetiary category. (%s)", name);				
				}
				case 7:
				{
					if(GetPVarInt(playerid,"sKnowledges") > 0)
						return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Knowledges!");
					else
					{
						switch(User[playerid][Userrace])
						{
							case 0: // human
							{
								RemoveTrait(playerid, "sKnowledges");
								UpdateTrait(playerid, "FreshCS", 9, 9);
								UpdateTrait(playerid, "sBackgrounds", 7, 9);
								MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Backgrounds (7).");
							}
							case 1: // vampire
							{
								RemoveTrait(playerid, "sKnowledges");
								UpdateTrait(playerid, "FreshCS", 8, 9);
								UpdateTrait(playerid, "sDisciplines", 3, 9);
								MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Disciplines (3), Backgrounds (5), and rate Virtues (7)");	
								MSG(playerid,GRAD2,"Step IV: Your character automatically has one dot in each Virtue.");
								MSG(playerid,WHITE,"Step IV, Part I: Invest into Disciplines.");
							}
							case 2: // werewolf
							{
								RemoveTrait(playerid, "sKnowledges");
								UpdateTrait(playerid, "FreshCS", 8, 9);
								UpdateTrait(playerid, "sGifts", 3, 9);
								MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Gifts (three, one each from breed, auspice, and tribe).");
							}
							case 3: // mage
							{
								RemoveTrait(playerid, "sKnowledges");
								UpdateTrait(playerid, "FreshCS", 9, 9);
								UpdateTrait(playerid, "sBackgrounds", 5, 9);
								MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Backgrounds (5).");								
							}
							case 4: // hunter
							{
								RemoveTrait(playerid, "sKnowledges");
								UpdateTrait(playerid, "FreshCS", 9, 9);
								UpdateTrait(playerid, "sBackgrounds", 5, 9);
								MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Backgrounds (5).");									
							}
							case 5: // demon
							{
								RemoveTrait(playerid, "sKnowledges");
								UpdateTrait(playerid, "FreshCS", 8, 9);
								UpdateTrait(playerid, "sLores", 3, 9);
								MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Lore (3), Backgrounds (5), and rate Virtues (3)");	
								MSG(playerid,GRAD2,"Step IV: Your character automatically has one dot in each Virtue.");
								MSG(playerid,WHITE,"Step IV, Part I: Invest into Lore.");	
							}
							case 6: // changeling
							{
								RemoveTrait(playerid, "sKnowledges");
								UpdateTrait(playerid, "FreshCS", 8, 9);
								UpdateTrait(playerid, "sArts", 3, 9);
								MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Arts (3), Realms (5), and Backgrounds (5)");	
								// MSG(playerid,GRAD2,"Step IV: Your character automatically has one dot in each Virtue.");
								MSG(playerid,WHITE,"Step IV, Part I: Invest into Arts.");	
							}
						}
					}			
				}
				case 8:
				{
					if(User[playerid][Userrace] == 1)
					{
						if(GetPVarInt(playerid,"sDisciplines") > 0)
							return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Disciplines!");
						else
						{
							RemoveTrait(playerid, "sDisciplines");
							UpdateTrait(playerid, "FreshCS", 9, 9);
							UpdateTrait(playerid, "sBackgrounds", 5, 9);
							MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Disciplines (3), Backgrounds (5), and rate Virtues (7)");	
							MSG(playerid,WHITE,"Step IV, Part II: Choose Backgrounds.");
						}	
					}
					else if(User[playerid][Userrace] == 2)
					{
						if(GetPVarInt(playerid,"sGifts") > 0)
							return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Gifts!");
						RemoveTrait(playerid, "sGifts");
						RemoveTrait(playerid, "gAuspice");
						RemoveTrait(playerid, "gBreed");
						RemoveTrait(playerid, "gTribe");
						UpdateTrait(playerid, "FreshCS", 9, 9);
						UpdateTrait(playerid, "sBackgrounds", 5, 9);
						MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Backgrounds (5; selection restricted by tribe).");
					}	
					else if(User[playerid][Userrace] == 5)
					{
						if(GetPVarInt(playerid,"sLores") > 0)
							return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Lore!");
						else
						{
							RemoveTrait(playerid, "sLores");
							UpdateTrait(playerid, "FreshCS", 9, 9);
							UpdateTrait(playerid, "sBackgrounds", 5, 9);
							MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Lore (3), Backgrounds (5), and rate Virtues (3)");	
							MSG(playerid,WHITE,"Step IV, Part II: Choose Backgrounds.");
						}							
					}
					else if(User[playerid][Userrace] == 6)
					{
						if(GetPVarInt(playerid,"sArts") > 0)
							return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Arts!");
						else
						{
							RemoveTrait(playerid, "sArts");
							UpdateTrait(playerid, "FreshCS", 12, 9); // FreshCS no. 12 means choose realms
							UpdateTrait(playerid, "sRealms", 5, 9);
							MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Arts (3), Realms (5), and Backgrounds (5)");	
							MSG(playerid,WHITE,"Step IV, Part II: Choose Realms.");
						}							
					}

				}
				case 9:
				{
					if(User[playerid][Userrace] == 1 || User[playerid][Userrace] == 0)
					{
						if(GetPVarInt(playerid,"sBackgrounds") > 0)
							return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Backgrounds!");
						else
						{
							RemoveTrait(playerid, "sBackgrounds");
							UpdateTrait(playerid, "FreshCS", 10, 9);
							UpdateTrait(playerid, "sVirtues", 7, 9);
							UpdateTrait(playerid, "Courage", 1);
							UpdateTrait(playerid, "Self-Control/Instinct", 1);
							UpdateTrait(playerid, "Conscience/Conviction", 1);
							if(User[playerid][Userrace] == 1) MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Disciplines (3), Backgrounds (5), and rate Virtues (7)");	
							MSG(playerid,WHITE,"Step IV, Part II: Invest into Virtues.");
						}
					}
					else if(User[playerid][Userrace] == 2)
					{
						UpdateTrait(playerid, "FreshCS", 11, 9);
						UpdateTrait(playerid, "sFreebie", 15, 9);
						MSG(playerid,WHITE,"Step V (Finishing Touches):"GR" Spend freebie points (15); Optional: Choose Merits and Flaws (max. 7 points).");
						MSG(playerid,WHITE,"SERVER: Type (/buildmf) to choose your Merits and Flaws.");						
					}	
					else if(User[playerid][Userrace] == 3)
					{
						UpdateTrait(playerid, "FreshCS", 11, 9);
						UpdateTrait(playerid, "sSphere", 6, 9);
						UpdateTrait(playerid, "Arete", 1);
						UpdateTrait(playerid, "Willpower", 5);
						UpdateTrait(playerid, "Paradox", 0);
						UpdateTrait(playerid, "sFreebie", 15, 9);
						MSG(playerid,WHITE,"Step V (Finishing Touches):"GR" Spend 15 freebies, Record Spheres (6, with the Affinity Sphere receiving the first dot).");
						MSG(playerid, WHITE, "Step V (Finishing Touches):"GR" Click on [Spheres] in order to moderate your spheres.");		
						MSG(playerid,WHITE,"SERVER: Type (/buildmf) to choose your Merits and Flaws.");			
					}	
					else if(User[playerid][Userrace] == 4)	
					{
						if(GetPVarInt(playerid,"sBackgrounds") > 0)
							return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Backgrounds!");
						RemoveTrait(playerid, "sBackgrounds");
						UpdateTrait(playerid, "FreshCS", 10, 9);
						UpdateTrait(playerid, "sVirtues", 3, 9);
						MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Virtues (3).");			
					}		
					if(User[playerid][Userrace] == 5)
					{
						if(GetPVarInt(playerid,"sBackgrounds") > 0)
							return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Backgrounds!");
						else
						{
							RemoveTrait(playerid, "sBackgrounds");
							UpdateTrait(playerid, "FreshCS", 10, 9);
							UpdateTrait(playerid, "sVirtues", 3, 9);
							UpdateTrait(playerid, "Courage", 1);
							UpdateTrait(playerid, "Conviction", 1);
							UpdateTrait(playerid, "Conscience", 1);
							if(User[playerid][Userrace] == 1) MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Lore (3), Backgrounds (5), and rate Virtues (3)");	
							MSG(playerid,WHITE,"Step IV, Part II: Invest into Virtues.");
						}
					}	
					else if(User[playerid][Userrace] == 6)
					{
						UpdateTrait(playerid, "FreshCS", 11, 9);
						UpdateTrait(playerid, "Willpower", 4);
						UpdateTrait(playerid, "Glamour", 4);
						UpdateTrait(playerid, "Banality", 3);
						UpdateTrait(playerid, "sFreebie", 15, 9);
						MSG(playerid,WHITE,"Step V (Finishing Touches):"GR" Spend 15 freebies.");	
						MSG(playerid,WHITE,"SERVER: Type (/buildmf) to choose your Merits and Flaws.");			
					}									
				}
				case 10: // wws, mages and changelings have no virtues
				{
					if(User[playerid][Userrace] != 3)
					{	
							if(GetPVarInt(playerid,"sVirtues") > 0)
								return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Virtues!");
							if(User[playerid][Userrace] == 4)	
							{
								if(GetPVarInt(playerid,"sVirtues") > 0)
									return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Virtues!");
								RemoveTrait(playerid, "sVirtues");
								UpdateTrait(playerid, "FreshCS", 12, 9);
								UpdateTrait(playerid, "sEdges", 3, 9);
								UpdateTrait(playerid, "Willpower", 3);
								MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Edges (3). Click on [Edges] to interact.");		
								return 1;	
							}	
							RemoveTrait(playerid, "sVirtues");
							UpdateTrait(playerid, "FreshCS", 11, 9);
							UpdateTrait(playerid, "sFreebie", 15, 9);
							if(User[playerid][Userrace] != 5)
							{
								new str[90],
								self = GetPVarInt(playerid, "Self-Control/Instinct"),
								consc = GetPVarInt(playerid, "Conscience/Conviction"),
								courage = GetPVarInt(playerid, "Courage");
								format(str, sizeof str, "Info: "W"Humanity"GR" has been set to %d. (equal to Conscience + Self-Control)",self+consc, self, consc);
								UpdateTrait(playerid, "Humanity/Path", self+consc);
								MSG(playerid, GRAD2, str);
								format(str, sizeof str, "Info: "W"Willpower"GR" has been set to %d. (equal to Courage)",courage);
								MSG(playerid, GRAD2, str);
								UpdateTrait(playerid, "Willpower", courage);		
								MSG(playerid,WHITE,"Step V (Finishing Touches):"GR" Spend freebie points (15); Optional: Choose Merits and Flaws (max. 7 points).");	
							}
							else
							{
								new str[90],
									convict = GetPVarInt(playerid, "Conviction"),
									consc = GetPVarInt(playerid, "Conscience"),
									courage = GetPVarInt(playerid, "Courage"),
									willpower
								;
								new array[] = {3, 2, 1};
								array[0] = convict;
								array[1] = consc;
								array[2] = courage;
								print(User[playerid][Username]);
								printf("ARRAY 0: %d | ARRAY 1: %d | ARRAY 2: %d", array[0], array[1], array[2]);
								SortValuesInArray(array);
								printf("ARRAY 0: %d | ARRAY 1: %d | ARRAY 2: %d", array[0], array[1], array[2]);
								willpower = array[2]+array[1];
								printf("WILLPOWER: %d",willpower);
								MSG(playerid, GRAD2, "Info: "W"Faith"GR" has been set to 3. (default)");
								UpdateTrait(playerid, "Faith", 3);
								UpdateTrait(playerid, "tFaith", 3);
								format(str, sizeof str, "Info: "W"Willpower"GR" has been set to %d. (equal to two highest virtues)", willpower);
								MSG(playerid, GRAD2, str);
								UpdateTrait(playerid, "Willpower", willpower);		
								MSG(playerid,WHITE,"Step V (Finishing Touches):"GR" Spend freebie points (15); Optional: Choose Merits and Flaws (max. 7 points).");	
								UpdateTrait(playerid, "sVFreebie", 16, 9);
							}
						
					}
					else
					{
						/*
						if(GetPVarInt(playerid,"sSphere") > 0)
							return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Spheres!");
						else
						{
							RemoveTrait(playerid, "sSphere");
							UpdateTrait(playerid, "FreshCS", 11, 9);
							UpdateTrait(playerid, "sFreebie", 15, 9);
							MSG(playerid,GREEN,"Info: You have successfully finished Step IV, Part III!");
							MSG(playerid,WHITE,"Step V (Finishing Touches):"GR" Spend freebie points (15); Optional: Choose Merits and Flaws (max. 7 points).");
						}	
						*/	
					}
				}
				case 11:
				{
					if(GetPVarInt(playerid,"sFreebie") > 0) return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest your freebies!");
					else
					{
						if(User[playerid][Userrace] == 3)
						{
							new sph = GetPVarInt(playerid, "sSphere");
							if(sph > 0)
								return SFM(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest your Sphere starting points! (%d left)", sph);
						}
						RemoveTrait(playerid, "sFreebie");
						RemoveTrait(playerid, "FreshCS");
						RemoveTrait(playerid, "sSphere");
						RemoveTrait(playerid, "cs_pBackup");
						MSG(playerid,GREEN,"Info:"W" Congratulations, you have successfully set up your character sheet.");
						if(User[playerid][Userrace] == 3) 
						{
							UpdateTrait(playerid, "mQuintessence", GetPVarInt(playerid, "Avatar"));
							MSG(playerid, GREEN, "Info:"W" Contact an advisor to set your instruments and practices.");
						}
						if(User[playerid][Userrace] == 1)
						{
							switch(GetPVarInt(playerid, "vGeneration"))
							{
								case 13: UpdateTrait(playerid, "BloodPool", 10);
								case 12: UpdateTrait(playerid, "BloodPool", 11);
								case 11: UpdateTrait(playerid, "BloodPool", 12);
								case 10: UpdateTrait(playerid, "BloodPool", 13);
								case 9: UpdateTrait(playerid, "BloodPool", 14);
								case 8: UpdateTrait(playerid, "BloodPool", 15);
							}
						}
						else if(User[playerid][Userrace] == 2)
						{
							new auspice[24];
							GetPVarString(playerid, "Auspice", auspice, sizeof auspice);
							if(!strcmp(auspice, "Ragabash"))
								MSG(playerid, GOLD, "Info:"GR" Contact a staff member to set your Renown in any combination you wish. (Renown points: 3)");
							if(!strcmp(auspice, "Theurge"))
								UpdateTrait(playerid, "Wisdom", 3);
							if(!strcmp(auspice, "Philodox"))
								UpdateTrait(playerid, "Honor", 3);
							if(!strcmp(auspice, "Galliard"))
							{
								UpdateTrait(playerid, "Glory", 2);
								UpdateTrait(playerid, "Wisdom", 1);
							}
							if(!strcmp(auspice, "Ahroun"))
							{
								UpdateTrait(playerid, "Glory", 2);
								UpdateTrait(playerid, "Honor", 1);
							}
							MSG(playerid, WHITE, "SERVER: Your renown has been set.");
						}
					}
					if(User[playerid][Userrace] != 3 || User[playerid][Userrace] != 4 || User[playerid][Userrace] != 2)
					{
						if(User[playerid][Userrace] == 5 || User[playerid][Userrace] == 6)
							return 1;
						MSG(playerid,WHITE,"Step V (Finishing Touches):"GR" Spend freebie points (15); Optional: Choose Merits and Flaws (max. 7 points).");
						MSG(playerid,WHITE,"SERVER: Type (/buildmf) to choose your Merits and Flaws.");		
					}										
				}
				case 12: // stage of choosing edges for hunters, realms for changelings (for hunters CS ends here, for changelings it goes back to backgrounds then merits and flaws)
				{
					if(User[playerid][Userrace] == 4) {
						if(GetPVarInt(playerid,"sEdges") > 0)
							return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Edges!");
						RemoveTrait(playerid, "sEdges");
						UpdateTrait(playerid, "FreshCS", 11, 9);
						UpdateTrait(playerid, "sFreebie", 15, 9);
						MSG(playerid,WHITE,"Step V (Finishing Touches):"GR" Spend freebie points (15); Optional: Choose Merits and Flaws (max. 7 points).");
						MSG(playerid,WHITE,"SERVER: Type (/buildmf) to choose your Merits and Flaws.");	
					} 
					else if(User[playerid][Userrace] == 6) {
						if(GetPVarInt(playerid,"sRealms") > 0)
							return MSG(playerid,GRAD2,"ERROR: You cannot move onto the next step yet. Invest the rest of the points in Realms!");
						RemoveTrait(playerid, "sRealms");
						UpdateTrait(playerid, "FreshCS", 9, 9);
						UpdateTrait(playerid, "sBackgrounds", 5, 9);
						MSG(playerid,WHITE,"Step IV (Select Advantages):"GR" Choose Arts (3), Realms (5), and Backgrounds (5)");	
						MSG(playerid,WHITE,"Step IV, Part II: Choose Backgrounds.");
					}
				}
				default:
				{
					MSG(playerid, GOLD, "ERROR:"GR" Your character creation is finished. Contact an advisor if you haven't set up your character sheet yet and this is appearing.");
					printf("[%s][%s] %s %d fresh is %d.", PasteDate(), PasteTime(), User[playerid][Username], playerid, fresh);
				}
		}
	}
	return 1;
}
CMD:learn(playerid,params[])
{
	if(User[playerid][Logged])
	{
		//	
		if(isnull(params))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /learn [term]");
		if(!strcmp(params,"affiliation", true))	return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Affiliation","Mages tend to be social creatures. The Affiliation Trait reflects your character's overall allegiance (Traditions, Technocracy, Disparate), and the next entry defines her particular group within that affiliation. ", "Close", "");
		if(!strcmp(params,"nature", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Nature","This is the ''true'' personality of your character - who she is deep down.\n** Type (/learn archetypes) to bring up a sample list of Archetypes that you can use for Nature and Demeanor.","Close","");
		if(!strcmp(params,"demeanor", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Demeanor","This is the personality your character presents to the world. More often than not, Nature and Demeanor are different, especially given the deviousness of the vampire mind.\n** Type (/learn archetypes) to bring up a sample list of Archetypes that you can use for Nature and Demeanor.","Close","");	
		if(!strcmp(params,"concept", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Concept", "Your character's concept is a brief 'sketch' of who your character was prior to the Embrace/Change (current, for Human), anything from Crazed Vigilante to Aging Porn Star.\n\nSample Concepts:\n• Criminal (jailbird, Mafioso, drug dealer, pimp, carjacker, thug, thief, fence)\n• Drifter (bum, smuggler, prostitute, junkie, pilgrim, biker, gambler)\n• Entertainer (musician, film star, artist, club kid, model, web celebrity)\n• Intellectual (writer, student, scientist, philosopher, social critic)\n• Investigator (detective, beat cop, government agent, private eye, witch-hunter)\n• Kid (child, runaway, outcast, urchin, gangbanger)\n• Outsider (urban primitive, refugee, minority, conspiracy theorist, junkie)\n• Politician (judge, public official, councilor, aide, speechwriter)\n• Professional (engineer, doctor, programmer, lawyer, industrialist)\n• Reporter (journalist, blogger, paparazzo, talkshow host, media expert)\n• Scenester (clubgoer, goth, skinhead, punk, barfly, hipster, substance abuser)\n• Socialite (dilettante, host, playboy, sycophant, trophy wife)\n• Soldier (bodyguard, enforcer, soldier of fortune, killer-for-hire)\n• Worker (trucker, farmer, wage earner, manservant, construction laborer)","Close","");
		if(!strcmp(params,"clan", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Clan","Your character's Clan defines her lineage and her relationship to Caine, the progenitor vampire. Clan dictates your character's vampiric powers and weakness.\n\nClans:\n• Assamite - The righteous chosen of a blood cult, the Assassins are masters of silent death and an arcane tradition of wisdom.\n• Brujah - The Rabble are rebels and insurgents, fighting passionately for their disparate causes. The Brujah rage against tyranny - occasionally even their own.\n• Follower of Set - Guardians of the world's blackest secrets, the Serpents are feared for what they protect, and all too often seduced by it.\n• Gangrel - The nomadic Outlanders are feral and wild. These solitary wanderers are the source of much of the lore that likens vampires to dark beasts.\n• Giovanni - Insular and incestuous, the Necromancers ply their trade in blood, money, and the souls of the dead.\n• Lasombra - The shadowy, wicked Keepers nominally lead the Sabbat. Clan Lasombra serves itself first and its inner darkness second.\n• Malkavian - Dangerously deranged, the Lunatics nonetheless possess uncanny insight.\n• Nosferatu - Disfigured and skulking, the hideous Sewer Rats find themselves shunned by Kindred society, but gather secrets from the darkness that hides them.\n• Ravnos - The Deceivers are adept with the craft of illusion and guile, and often come to embody the prejudices held against them.\n• Toreador - Lovers of the sensuous and the aesthetic, the Degenerates are trapped in the stagnancy of undeath.\n• Tremere - A Clan of sorcerous blood magicians, the Warlocks are widely distrusted and just as widely feared.\n• Tzimisce - A Clan of fallen nobles from Eastern Europe, the brilliant but monstrous Fiends now serve the Sabbat.\n• Ventrue - The reluctant aristocracy of the Kindred, the Blue Bloods atone for their damnation by enforcing the Traditions and the Masquerade.\n• Caitiff - Claiming no Clan at all, the Caitiff exhibit no common characteristics, and often find themselves outcast by vampires of distinct pedigree.","Close","");
		if(!strcmp(params,"generation", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Generation","Closely related to Clan, your character's Generation defines the potency of her blood and how many steps removed she is from Caine.","Close","");
		if(!strcmp(params,"sire", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Sire","Sire's the vampire who turned (embraced) you into a vampire.","Close","");
		if(!strcmp(params,"attributes", true) || !strcmp(params,"attribute", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Attributes","Attributes define your character's inborn aptitudes and potential.","Close","");
		if(!strcmp(params,"abilities", true) || !strcmp(params,"ability", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,params,"Abilities are those proficiencies your character possesses intuitively or has learned.","Close","");
		if(!strcmp(params,"advantages", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,params,"A catchall term for the numerous benefits a vampire/werewolf has over normal folk.","Close","");
		if(!strcmp(params,"disciplines", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,params,"Disciplines refer to the vampiric powers a character possesses as a result of her Embrace.\n\nDisciplines:\n• Animalism - Supernatural affinity with and control of animals.\n• Auspex - Extrasensory perception, awareness and premonitions.\n• Celerity - Supernatural quickness and reflexes.\n• Chimerstry - The ability to create illusions and hallucinations.\n• Dementation - The ability to inflict madness upon a victim.\n• Dominate - Mind control practiced through the piercing gaze.\n• Fortitude - Unearthly toughness, even to the point of resisting fire and sunlight.\n• Necromancy - The supernatural power to summon and control the dead.\n• Obfuscate - The ability to remain obscure and unseen, even in crowds.\n• Obtenebration - Unearthly control over shadows.\n• Potence - The Discipline of physical vigor and strength.\n••• Presence - The ability to attract, sway and control crowds.\n• Protean - Shapechanging, from growing claws to melding with the earth.\n• Quietus - The art of assassination.\n• Serpentis - The Discipline of reptilian powers.\n• Thaumaturgy - The study and practice of blood sorcery.\n• Vicissitude - The art of flesh-shaping.","Close","");
		if(!strcmp(params,"backgrounds", true))
		{
			if(User[playerid][Userrace] != 1) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,params,"Backgrounds define the character's material assets and social network.\n\nBackgrounds:\n• Allies\n• Alternate Identity - A false identity, complete with documentation.\n• Contacts\n• Fame\n• Influence\n• Mentor\n• Resources","Close","");
			else return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Backgrounds (Vampire)","Backgrounds define the character's material assets and social network.\n\nBackgrounds:\n• Allies - Mortal confederates, usually family or friends.\n• Alternate Identity - A false identity, complete with documentation.\n• Armory\n• Contacts - The information sources the character possesses.\n• Domain - Feeding grounds acknowledged by Kindred society.\n• Fame - How well-known the character is among mortals.\n• Generation - How far removed from Caine the character is.\n• Herd - The vessels to which the character has free and safe access.\n• Influence - The character's political power within mortal society.\n• Mentor - The Kindred patron who advises and supports the character.\n• Resources - Wealth, belongings, and income.\n• Retainers - Followers, guards, and servants.\n• Rituals (Sabbat) - How many ritae the Cainite knows and can perform.\n• Status - The character's standing in undead society.","Close","");
		}
		if(!strcmp(params,"virtues", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,params,"Virtues show the character's spiritual and moral fiber - or lack thereof.","Close","");
		if(!strcmp(params,"humanity", true) || !strcmp(params,"humanity/path", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Humanity/Path","Humanity/Path; These Traits define your character's outlook on unlife. A character has either a Humanity rating or a rating in a specific Path, never both (though a character may pretend).","Close","");
		if(!strcmp(params,"experience", true) || !strcmp(params,"xp", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Experience","Your character's Experience Trait represents how much she has learned.\n All characters begin the game with an Experience Trait of zero. Experience is spent to purchase new Traits.","Close","");
		if(!strcmp(params,"willpower", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Willpower","This Trait reflects your character's inner drive and desire to succeed at tasks she undertakes.","Close","");
		if(!strcmp(params,"bp", true) || !strcmp(params,"blood", true) || !strcmp(params,"bloodpool", true) || !strcmp(params,"blood pool", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Blood Pool","Blood Pool\n  A character's blood pool measures how much vitae the vampire has in his system. The blood pool comprises a number of individual blood points. Each blood point corresponds roughly to onetenth-\n  of the blood in an average adult mortal (a pint or one-half liter outside of a human). The maximum number of blood points a vampire may ingest is dictated by his Generation, as is the number of blood-\n  points he may spend in a single turn. A vampire with zero blood points in his system is ravenously hungry and likely in the throes of frenzy.","Close","");	
		if(!strcmp(params,"archetypes", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Archetypes","• Architect - You build something of lasting value.\n• Autocrat - You need control.\n• Bon Vivant - Unlife is for pleasure.\n• Bravo - Might makes right.\n• Capitalist - Why give it away for free when you can sell it?\n• Caregiver - Everyone needs nurturing.\n• Celebrant - Your cause brings you joy.\n• Chameleon - You manage to blend into any situation.\n• Child - Won't somebody be there for you?\n• Competitor - You must be the best.\n• Conformist - You follow and assist.\n• Conniver - Others exist for your benefit.\n• Creep Show - Disgusting the straights makes you smile.\n• Curmudgeon - Everything has its flaws.\n• Dabbler - It's always about the next big thing.\n• Deviant - The status quo is for sheep.\n• Director - You oversee what must be done.\n• Enigma - Just when people think they've figured you out, you change the game.\n• Eye of the Storm - Chaos and havoc follow you, but it never gets to you.\n• Fanatic - The cause is all that matters.\n• Gallant - You're not the showstopper: you're the show!\n• Guru - People find you spiritually compelling.\n• Idealist - You believe in something greater.\n• Judge - Your judgment will improve things.\n• Loner - You make your own way.\n• Martyr - You suffer for the greater good.\n• Masochist - Pain reminds you that you still exist.\n• Monster - You're Damned, so act like it!\n• Pedagogue - You save others through knowledge.\n• Penitent - Unlife is a curse, and you must atone for it.\n• Perfectionist - You strive for an unattainable goal.\n• Rebel - You follow no one's rules.\n• Rogue - It's all about you.\n• Sadist - You live to cause pain.\n• Scientist - Everything is a puzzle to solve.\n• Sociopath - The inferior must be destroyed.\n• Soldier - You follow orders, but in your own way.\n• Survivor - Nothing can keep you down.\n• Thrill-Seeker - The rush is all that matters.\n• Traditionalist - As it has always been, so it must be.\n• Trickster - Laughter dims the pain.\n• Visionary - Something exists beyond all this.","Close","");	
		if(!strcmp(params,"breed", true))  return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Breed","A werewolf's breed reflects his parentage: was she born to humans, part of a litter of wolf-cubs, or born to two werewolf parents?\n\nBreeds:\n• Homid: A Garou of human ancestry\nBeginning Gifts (Homid):  Apecraft's Blessings, City Running, Master of Fire, Persuasion, Smell of Man\n• Lupus: A Garou of wolf origin.\nBeginning Gifts (Lupus): Hare's Leap, Heightened Senses, Predator's Arsenal, Prey Mind, Sense Prey\n• Metis: Metis: The sterile and often deformed offspring of two Garou.\nBeginning Gifts (Metis): Create Element, Primal Anger, Rat Head, Sense Wyrm, Shed","Close","");
		if(!strcmp(params,"auspice", true))  return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Auspice","The phase of the moon under which a particular Garou (werewolf) was born, which is thought commonly to determine personality and tendencies.\n\nAuspices:\n• Ragabash: New Moon - Questioners and tricksters who stalk the Wyrm with guile and cunning.\n- Initial Rage: 1\n- Beginning Gifts: Blur of the Milky Eye, Liar's Face, Open Seal, Scent of Running Water, Spider's Song, Infectious Laughter.\n- Beginning Renown: Three in any combination.\n\n• Theurge: Crescent Moon - Seers and shamans who clearly understand spirits and their ways.\n- Initial Rage: 2\n- Beginning Gifts: Mother's Touch, Sense Wyrm, Spirit Binding, Spirit Speech, Umbral Tether.\n- Beginning Renown: 3 Wisdom\n\n• Philodox: Half Moon - Judges and lawmakers who balance the dual nature of man and wolf.\nInitial Rage: 3\nBeginning Gifts: Fangs of Judgment, Persuasion, Resist Pain, Scent of the True Form, Truth of Gaia\nBeginning Renown: 3 Honor\n\n• Galliard: Gibbous Moon - Lore-keepers and talesingers who tell the deeds of Garou past to inspire the present.\nInitial Rage: 4\nBeginning Gifts: Beast Speech, Call of the Wyld, Heightened Senses, Mindspeak, Perfect Recall\nBeginning Renown: 2 Glory, 1 Wisdom\n\nAhroun: Full Moon - Warriors and protectors who bring destruction to the Wyrm wherever it dwells and breeds.\nInitial Rage: 5\nBeginning Gifts: Falling Touch, Inspiration, Pack Tactics, Razor Claws, Spur Claws\nBeginning Renown: 2 Glory, 1 Honor","Close","");
		if(!strcmp(params,"tribe", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Tribe","The tribe that adopted a werewolf, which reflects her heritage, and how she fights the Wyrm.\n\nTribes:\n• Black Furies: Defenders of the wild places and fierce warriors for their fellow women. Most Black Furies are female; the only males in their tribe are metis.\nBeginning Gifts: Breath of the Wyld, Man's Skin, Heightened Senses, Sense Wyrm, Wyld Resurgence\n• Bone Gnawers: As the best-informed tribe, the Bone Gnawers are consummate spies. Members live in poverty, and have a casual regard for Garou traditions.\nBeginning Gifts: Beginning Gifts: Cooking, Desperate Strength, Resist Toxin, Scent of Sweet Honey, Trash is Treasure\n• Children of Gaia: The most moderate tribe, the Children of Gaia nurture what little the Wyrm has not corrupted and often speak out on humanity's side.\nBeginning Gifts: Brother`s Scent, Jam Weapon, Mercy, Mother`s Touch, Resist Pain\n• Fianna: Originally of Celtic descent, the Fianna hold on to a lust for both celebration and battle, wherever they are in the world.\nBeginning Gifts: Faerie Light, Hare•s Leap, Persuasion, Resist Toxin, Two Tongues\n• Get of Fenris: Dedicated to the Wyrm's destruction, the Get are savage and bloodthirsty warriors who take great pride in their Germanic and Scandinavian heritage.\nBeginning Gifts: Lightning Reflexes, Master of Fire, Razor Claws, Resist Pain, Visage of Fenris\n• Glass Walkers: The ultimate urban predators, the Glass Walkers take the war against the Wyrm into the boardroom and the skyscraper - though other Garou do not trust them.\nBeginning Gifts: Control Simple Machine, Diagnostics, Persuasion, Plug and Play, Trick Shot\n• Red Talons: Living in the deep wilderness, this tribe only allows lupus and some metis to join. They believe that the only way to beat the Wyrm is to exterminate humanity.\nBeginning Gifts: Beast Speech, Eye of the Hunter, Hidden Killer, Scent of Running Water, Wolf at the Door\n• Shadow Lords: Cunning, deceptive, and domineering, the Shadow Lords have a burning drive to lead the whole Garou Nation.\nBeginning Gifts: Aura of Confidence, Fatal Flaw, Seizing the Edge, Shadow Weaving, Whisper Catching\n• Silent Striders: Exiled from their homeland, the Silent Striders travel constantly. Many learn the secrets of the physical or spiritual world on their journeys.\nBeginning Gifts: Heaven•s Guidance, Sense Wyrm, Silence, Speed of Thought, Visions of Duat\n• Silver Fangs: The hereditary rulers of the Garou Nation, their careful maintenance of royal blood has led to inbreeding and the taint of madness.\nBeginning Gifts: Eye of the Falcon, Falcon•s Grasp, Inspiration, Lambent Flame, Sense Wyrm\n• Stargazers: Ascetics who seek to master their own Rage, the Stargazers wander the world striking at the Wyrm wherever they find it.\nBeginning Gifts: Balance, Channeling, Falling Touch, Iron Resolve, Sense Wyrm\n• Uktena: Mysterious and mystical, the Uktena are a tribe of outsiders charged with guarding the resting places of many powerful Banes, though this taints them by association.\nBeginning Gifts: Sense Magic, Sense Wyrm, Shroud, Spirit of the Lizard, Spirit Speech\n• Wendigo: The only tribe made up of primarily Native American werewolves, the Wendigo are cold and insular, guarding their caerns against even other Garou.\nBeginning Gifts: Beat of the Heart-Drum, Call the Breeze, Camouflage, Ice Echo, Resist Pain","Close",""); 
		if(!strcmp(params,"moot", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Moot","A sept or tribal conclave that takes place at a caern.","Close","");
		if(!strcmp(params,"bawn", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Bawn","A boundary area around a caern, patrolled and monitored carefully.","Close","");
		if(!strcmp(params,"delirium", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Delirium","The madness and memory loss suffered by humans who look upon a Garou in Crinos form.","Close","");
		if(!strcmp(params,"wyld", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Wyld","Manifestation and symbol of pure change; the chaos of transmutation and elemental force.","Close","");
		if(!strcmp(params,"wyrm", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Wyrm","Manifestation and symbol of evil, entropy, and decay in Garou belief. Vampires are often considered manifestations of the Wyrm, as are toxic waste and pollution.","Close","");
		if(!strcmp(params,"weaver", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Weaver","Manifestation and symbol of order and pattern. Computers, science, logic, and mathematics are examples of the Weaver's influence on the material plane.","Close","");
		if(!strcmp(params,"triat", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"The Triat","The Weaver, the Wyld, and the Wyrm; the trinity of primal cosmic forces.","Close","");
		if(!strcmp(params,"totem", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Totem","A spirit joined to a pack or tribe and representative of its inner nature. A tribal totem is an Incarna, while a pack totem is an Incarna avatar (a Jaggling equivalent)","Close","");
		if(!strcmp(params,"jaggling", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Jaggling","A spirit servant of an Incarna or Celestine.","Close","");
		if(!strcmp(params,"incarna", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Incarna","A class of spirits; weaker than the Celestines, but still greater spirits by any measure.","Close","");
		if(!strcmp(params,"celestine", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Celestine","The greatest spirits; the closest things the Garou have to gods. Examples are Luna (the Moon) and Helios (the Sun).","Close","");
		if(!strcmp(params,"kinfolk", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Kinfolk","Those humans and wolves who are related to the Garou and are not prone to the Delirium, but who are not actual werewolves.","Close","");
		if(!strcmp(params,"age", true) || !strcmp(params,"vampiric age", true) || !strcmp(params,"vampire age", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Vampire Age","One of the ways that Kindred determine the social pecking order is through a combination of age and Generation (an indication of how far the vampire is removed from Caine)\nNewly Embraced Cainites must prove themselves to older, more established vampires in order to gain any sort of recognition or standing. There is a small degree of mobility.\nHowever, respect is primarily gained respect through passage of time and the attrition of his enemies.\n\nFledgling\n  Fledgling is a newly-Embraced vampire who has not yet been introduced to Kindred society and formally emancipated from her sire. To this end, a sire is responsible for the actions of his childe.\n  Until he deems her able enough to handle Cainite culture on her own. Some Clans shelter their fledglings for years or decades, like the Tremere, while others, like many Gangrel and Brujah.\n  Figure that once you're a vampire -- you're on your own, tough shit if you can''t hack it. The Sabbat, who sometimes call their hastily-Embraced fledglings 'shovelheads'' due to their bizarre-\n  Embrace rituals are usually much more pragmatic. If the fledgling survives and does something worthwhile, she is not considered a shovelhead any longer.\n\nNeonate\n  A neonate is a young vampire, one who has not been Kindred very long. The main difference between a neonate and a fledgling is that the neonate has been emancipated from her sire and otherwise-\n  is seen as an `adult` in vampire society. The line between fledgling and neonate is incredibly subjective, but usually once Kindred society stops thinking of a vampire as her sire's appendage and-\n  more on her own merits and actions, then she's become a neonate.\n\nAncilla\n  Those Kindred who have a few decades or centuries under their belts generally fall into the loose, subjective category known as the ancillae. They have paid their dues, understand (mostly) how-\n  Kindred society works, and have probably accomplished something. Ancilla is the rank between neonate and elder, implying some degree of achievement in what local Kindred society deems appropriate.\n  Of course, what counts as `achievement` can vary wildly from Sect to Sect. A Camarilla ancilla would be considered soft and effete by the Sabbat, while a Sabbat ancilla would probably be described-\n  as a raging maniac by Camarilla standards.\n\nElder\n  What constitutes an ''elder'' is similarly subjective, but it generally corresponds to a rough age distinction of anywhere from 200 to 1000 years of being Kindred, with appreciable claims to domain.\n  A variety of other assets to bring to bear in the Jyhad. Typically, elders of Europe are much older than those across the Atlantic Ocean. Elders are typically the oldest active vampires in undead society.","Close","");
		if(!strcmp(params,"sect", true) || !strcmp(params,"camarilla", true) || !strcmp(params,"sabbat", true) || !strcmp(params,"anarch", true))
		{
			if(User[playerid][Userrace] != 3) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Sect","Camarilla\nTraditional Strongholds: Chicago, New Orleans, Vienna, London, Paris\n  The Camarilla is also known as `The Ivory Tower,` and the Sect lives up to that moniker. Created in the 15th century, the Camarilla was formed to preserve and protect vampire society against the\n  decimation brought on by the Inquisition as well as the power drain presented by the War of Princes during the Dark Ages. The leaders of the Camarilla ruthlessly enforced the Tradition of the Masquerade\n  elevating it to the Sect's highest law, a priority they continue to pursue even in modern nights. These so-called ''Kindred'' seek to maintain a quiet harmony between vampires and humanity a goal constantly\n  threatened by the Sabbat.\n\nThe Anarch Movement\nTraditional Strongholds: Los Angeles, San Diego, San Francisco\n  Nominally a faction within the Camarilla, most `Anarchs` are still under the authority of the Ivory Tower. The Camarilla would say that the Anarchs are under the protection of the Sect, while the\n  Anarchs would likely call it oppression. Still, many in the Anarch Movement understand the usefulness of the structure, with only the most radical calling for total withdrawal from the Camarilla.\n  The Anarchs seek to change the Ivory Tower from within, turning it into the benevolent Kindred society it so often claims to be.\n\nSabbat\nTraditional Strongholds: Detroit, Miami, Mexico City, Montreal, Madrid\n  Opposite the Camarilla stand the Sect of inhuman vampires known as the Sabbat. Most of the vampiric factions believe that the so-called 'sword of Caine'' is a collection of mindless barbarians and\n  ultraviolent fiends, or even demon worshippers bent on bringing Satan to earth. As such, the Sabbat are vilified all throughout vampire society. They're right to fear the Sabbat, but not for those\n  reasons. While the ''Kindred'' (a term the Sabbat despise) of the Ivory Tower cower among mortals and cling to outdated Traditions, the Sabbat prefer to indulge in their vampiric nature. They refuse to\n  wear the tattered rags of humanity or to act as slaves and cattle to their elders. Besides, vampires are clearly and openly superior to mortals - do humans lie down with cows and call them brother?\n  As such, Sabbat vampires consider mortals to be tools and food at best, and have little tolerance for ''Cainites'' who pretend to be human. They are inherently alien and literally inhumane.","Close","");
			if(User[playerid][Userrace] == 3) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Sect","This entry deals with a specific group, like the Order of Hermes, Progenitors, Wu Lung, and so forth.","Close","");
		}
		if(!strcmp(params,"dexterity", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Attribute","Dexterity\n The Dexterity Attribute measures a character's general physical prowess. It encompasses the character's speed, agility, and overall quickness, as well as indicating the character's ability-\n  to manipulate objects with control and precision. Also included under Dexterity's heading are hand-eye coordination, reflexes, and bodily grace.","Close","");		
		if(!strcmp(params,"strength", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Attribute","Strength\n  Strength is the raw, brute power of a character. It governs how much weight a character can lift, how much he can physically push, and how hard he can hit another character or object.\n  The Strength Trait is added to a character's damage dice pool when he hits his opponent in hand-to-hand combat. It is also used when a character wishes to break, lift, or carry-\n  something as well as when a character tries to jump a distance.","Close","");
		if(!strcmp(params,"stamina", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Attribute","Stamina\n The Stamina Trait reflects a character's health, toughness, and resilience. It indicates how long a character can exert herself and how much punishment she can withstand before suffering physical-\n  trauma. Stamina also includes a bit of psychic fortitude, indicating a character's grit and tenacity","Close","");		
		if(!strcmp(params,"charisma", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Attribute","Charisma\n  Charisma is a character's ability to entice and please others through her personality. Charisma comes into question when a character tries to win another character's sympathies or encourage others-\n  to trust her. Charisma reflects the power of a character's charm and influence. It governs a character's ability to convince others to see her point of view. This Attribute doesn''t necessarily-\n  indicate how the character is charismatic, whether she's a silver-tongued charmer or a grinning bully. (These should come across through roleplaying and specialties.) ","Close","");
		if(!strcmp(params,"manipulation", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Attribute","Manipulation\n  Manipulation measures a character's ability for self expression in the interests of getting others to share her outlook or follow her whims. In short, it's getting others to do what she wants.\n  Manipulation comes into  play when a character tries to influence or subtly guide another's behavior. Manipulation is used to trick, bluff, fast-talk, and railroad other characters. Whether or-\n  not the characters in question actually like the manipulator is irrelevant (this is why Manipulation differs from Charisma). After all, a skilled motivator can even employ the talents of people-\n  who hate her. Manipulation is a dangerous affair, though it is way many Kindred primarily affect the world around them. Failed attempts at manipulation often earn the ire of the would-be patsy.\n  Botching a Manipulation roll may add a name to the character's list of enemies. People are manipulated every day, and typically ignore it. (''Would you run to the store for me?'') If the fact is-\n  brought to their attention, however, many people become quite defensive. Manipulation can be the most powerful tool in a character's repertoire, but failure can be disastrous. Characters with-\n  high Manipulation ratings are often distrusted by those around them.","Close","");
		if(!strcmp(params,"appearance", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Attribute","Appearance\n  The Appearance Attribute is a measure of how well a character makes a first impression. This may be conventional `attractiveness,` but it can also be theeffect of distinctive features, an exotic-\n  mien, an air of confidence, distinctive posture, a flair for dressing well '' anything remarkable upon initial observation can contribute to a character's Appearance. Indeed, Appearance is the-\n  amalgamation of many descriptive personal characteristics. Appearance is subconscious and instinctual '' it appeals to the lower levels of the psyche, so it shapes first impressions and the nature-\n  of memories thereafter.\n  This Trait is useful for getting potential vessels to heed your beckoning across a crowded dance floor. In  situations in which first impressions are paramount, or that involve people who view-\n  Appearance as very important, a character may have no more dice in a Social dice pool than her Appearance rating. Thus, it is critically important to either look your best or get to know people-\n  before you start trying to convince them to firebomb the Justicar's haven.","Close","");
		if(!strcmp(params,"perception", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Attribute","Perception\n  Perception measures a character's ability to observe his environment. This may involve a conscious effort, such as searching an area, but it is more often intuitive, as the character's keen senses-\n  notice something out of the ordinary. Perception is a sensitivity to one's surroundings, and is seldom present in the cynical or jaded (who have seen it all before). Perception is used to determine-\n  whether or not a character understands a given situation or detects an environmental stimulus. It can warn a character of ambushes, distinguish a clue from a pile of refuse, or uncover any other hidden-\n  or overlookable detail, whether physical or otherwise.","Close","");
		if(!strcmp(params,"intelligence", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Attribute","Intelligence\n  The Intelligence Attribute refers to a character's grasp of facts and knowledge. It also governs a character's ability to reason, solve problems, and evaluate situations. Intelligence also-\n  includes critical thinking and flexibility of thought. Intelligence does not include savvy, wisdom, or common sense, as those are properties of the character's personality, not Traits. Even-\n  the smartest character may be too foolish to realize the thugs who want to ''borrow'' her car keys are up to no good. Characters with low Intelligence aren''t necessarily stupid (though they-\n  might be); they are just uneducated or simple thinkers. Likewise, characters with high Intelligence aren''t all Einsteins; they may be better at rote memorization or have particularly keen judgment.","Close","");
		if(!strcmp(params,"wits", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Attribute","Wits\n  The Wits Trait measures the character's ability to think on her feet and react quickly to a certain situation. It also reflects a character's general cleverness. Characters with low Wits ratings-\n  are thick and mentally lethargic, or maybe gullible and unsophisticated. By contrast, characters with high Wits Traits almost always have a plan immediately and adapt to their surroundings with striking-\n  expedience. Characters with high Wits also manage to keep their cool in stressful situations.","Close","");
		if(!strcmp(params,"alertness", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Alertness\n  This is your basic knack for noticing things that go on around you, even when you're not actively looking for them. Alertness describes the attention you pay to the outside world, whether otherwise-\n  occupied or not. This Talent is typically paired with Perception, and is best used when sensing physical stimuli (as opposed to moods or clues).","Close","");
		if(!strcmp(params,"athletics", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Athletics\n  This Talent represents your basic athletic ability, as well as any training you might have had in sports or other rigorous activities. Athletics concerns all forms of running, jumping, throwing-\n  swimming, sports, and the like. However, Athletics doesn''t cover basic motor actions such as lifting weights, nor does it govern athletic feats covered by another Ability (such as Melee).","Close","");
		if(!strcmp(params,"awareness", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Awareness\n  Awareness is an instinctual reaction to the presence of the supernatural. It differs from Alertness (which measures sensitivity to mundane events) and Occult (which covers actual knowledge about-\n  the supernatural). Usually, only supernatural creatures have access to this particular Talent, but some unique mortals have a sense that something is strange in the world (such as those with True-\n  Faith) Characters with Awareness sometimes get hunches, chills, or sudden flashes of inspiration when they are near supernatural creatures, objects, or events. This insight is purely subconscious-\n  and knowing that something's wrong doesn''t mean that the character knows what it is. To get more specific information, the Kindred will need to use Occult or a particular power; Awareness only makes-\n  the vampire more receptive to the presence of the unusual. A vampire can use Awareness deliberately if he suspects that something is supernatural, but more often the Storyteller can ask for an Awareness-\n  roll to determine whether a vampire notices a strange event that's not immediately visible.","Close","");
		if(!strcmp(params,"brawl", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Brawl\n  The Brawl Talent represents how well you fight in tooth-and-nail situations. This Talent represents skill in unarmed combat, whether from formal martial arts training or simply from plenty of experience.\n  Effective brawlers are coordinated, resistant to pain, quick, strong, and mean. The willingness to do whatever it takes to hurt your opponent wins plenty of fights.  ","Close","");
		if(!strcmp(params,"empathy", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","You understand the emotions of others, and can sympathize with, feign sympathy for, or play on such emotions as you see fit. You are adept at discerning motive, and might be able to discern when-\n  someone's lying to you. However, you may be so in tune with other people's feelings that your own emotions are affected.","Close","");
		if(!strcmp(params,"expression", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Expresion\n  This is your ability to get your point across clearly, whether through conversation, poetry, or even in 140 characters or fewer. Characters with high Expression can phrase their opinions or-\n  beliefs in a manner that cannot be ignored (even if their opinions are misinformed or worthless). They might also be talented actors, skilled at conveying moods or communicating emotion with-\n  every gesture. Additionally, this Talent  represents your ability for poetry, creative writing, or other literary art forms. For many elders, Expression is the subtle art of crafting a satirical-\n  epigram capable of socially crippling one's longtime rival. For younger Kindred, Expression may well be the key to convincing thirty stake-wielding Anarchs to converge on the Sheriff's private-\n  hunting ground with the right text message. You can choose a specialty in Expression, even at less than 4 dots.","Close","");
		if(!strcmp(params,"intimidation", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Intimidation\n  Intimidation takes many forms, from outright threats and physical violence to mere force of personality. It needn''t be course or callous, and a well-placed intimidating word under the right-\n  circumstances might well be called ''diplomacy'' in certain circles. You know the right method for each occasion, and can be very'' persuasive.","Close","");
		if(!strcmp(params,"leadership", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Leadership\n  You are an example to others and can inspire them to do what you want. Leadership has less to do with manipulating people's desires than it does with presenting yourself as the sort of person they-\n  want to follow. Anyone can lead a group into some sort of conflict; a good leader can get them back out intact. This Talent is usually paired with Charisma rather than Manipulation.","Close","");
		if(!strcmp(params,"streetwise", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Streetwise\n  The streets can provide a lot of information or money to those who know the language. Streetwise allows you to blend in unobtrusively with the local scene, pick up-\n gossip, understand slang, or even dabble in criminal doings.","Close","");
		if(!strcmp(params,"subterfuge", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Subterfuge\n  You know how to conceal your own motives and project what you wish. Furthermore, if you can root out other people's motives, you can then use those motives against them. This Talent defines your-\n  talent for intrigue, secrets, and double-dealing. Mastery of Subterfuge can make you the ultimate seducer or a brilliant spy.","Close","");
		if(!strcmp(params,"animal ken", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Animal Ken\n  You can understand animals'' behavior patterns. This Skill allows you to predict how an animal might react in a given situation, train a domesticated creature, or even try to calm or enrage animals.","Close","");
		if(!strcmp(params,"crafts", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Crafts\n  This Skill covers your ability to make or fix things with your hands. Crafts allows you to work in fields such as carpentry, leatherworking, weaving, or even mechanical expertise such as car repair.\n  You can even create lasting works of art with this Skill, depending on the number of successes you achieve. You must always choose a specialization in Crafts, even though you retain some skill in multiple fields.","Close","");
		if(!strcmp(params,"drive", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Drive\n  You can drive a car, and maybe other vehicles as well. This Skill does not automatically entail familiarity with complicated vehicles such as tanks or 18-wheelers, and difficulties may vary depending-\n  on your experience with individual automobiles. After all, helming a station wagon doesn''t prepare you for double-clutching a Maserati at 100 miles per hour.","Close","");
		if(!strcmp(params,"etiquette", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Etiquette\n  You understand the nuances of proper behavior, in both mortal society and Kindred culture. In many cases, knowing how to broach a topic is as important as the discussion itself, and a person with-\n  poor etiquette will never have an opportunity to make herself heard because she doesn''t know when or how to interject. This Skill is used during meetings, haggling, seduction, dancing, dinner-\n  etiquette, and all forms of diplomacy.","Close","");
		if(!strcmp(params,"firearms", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Firearms\n  Executing a mortal with a sword starts investigations. Clawing someone to ribbons tears the edges of the Masquerade. So Cainites adapt, and many have devoted their energies to learning how to kill-\n  with guns. This Skill represents familiarity with a range of firearms, from holdout pistols to heavy machine guns. Further, someone skilled in Firearms can clean, repair, recognize, and accurately-\n  fire most forms of small arms. This Skill is also used to unjam guns (Wits + Firearms).","Close","");
		if(!strcmp(params,"larceny", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Larceny\n  This Skill entails familiarity with the tools and techniques for the sorts of physical manipulation typically associated with criminal activity. Picking locks, manual forgery, safecracking, simple-\n  hotwiring, various forms of breaking and entering, and even sleight-of-hand all fall under the auspices of Larceny. Larceny is useful not only for theft, but also for setting up ''the unbeatable-\n  system'' or deducing where a thief broke in. This skill does not confer any aptitude with advanced security or anti-crime technologies such as video surveillance or alarm systems '' those are covered-\n  by the Technology Knowledge.","Close","");
		if(!strcmp(params,"melee", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Melee\n   As the Kindred maxim runs, ''Guns mean nothing to a lifeless heart''. A blade is often worth far more, as is the skill to use it properly. Melee covers your ability to use hand-to-hand weapons of-\n  all forms, from swords and clubs to esoteric martial-arts paraphernalia such as sai or nunchaku. And, of course, there is always the utility of the wooden stake....","Close","");
		if(!strcmp(params,"performance", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Performance\n  The Performance Skill governs your ability to perform artistic endeavors such as singing, dancing, acting, or playing a musical instrument. You are almost certainly specialized in one field-\n  although true virtuosos may be talented in many forms of performance. This Skill represents not only technical know-how, but the ability to work an audience and enrapture them with your show.\n  As with Crafts, you must choose a specialty, even though this Skill also imparts a general sense for watching and responding to your audience's mood regardless of medium.","Close","");
		if(!strcmp(params,"stealth", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Stealth\n  This Skill is the ability to avoid being detected, whether you're hiding or moving at the time. Stealth is often tested against someone else's Perception + Alertness. This Ability is, for obvious-\n  reasons, highly useful in stalking prey. In many cases, Stealth is also used to conceal items, whether on one's person or somewhere in the environment.","Close","");
		if(!strcmp(params,"survival", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Survival\n  Although vampires have little to fear from starvation and exposure, the wilderness can still be dangerous to a Cainite. This Skill allows you to find shelter, navigate your way to civilization-\n  track prey, establish a makeshift haven, and possibly even avoid supernatural threats like werewolves that also prowl the World of Darkness. Note that Survival need not be used only in areas considered-\n  ''wilderness.'' There's plenty of Survival that goes into getting by in various parts of modern cities.","Close","");
		if(!strcmp(params,"academics", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Academics\n  This catchall Knowledge covers the character's erudition in the humanities: literature, history, art, philosophy, and other ''liberal'' arts and sciences. A character with dots in Academics is-\n  generally well rounded in these fields, and at high levels may be considered an expert in one or more areas of study. Not only can this Knowledge impress at salons and other Elysium functions-\n  but it can also offer valuable clues to certain past '' and future '' movements in the Jyhad. If you like, you can choose a specialty for Academics even at less than 4 dots.","Close","");
		if(!strcmp(params,"computer", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Computer\n  This Knowledge represents the ability to operate and program computers, including mobile devices. Most Computer use also imparts a degree of Internet awareness (if not savvy).","Close","");
		if(!strcmp(params,"finance", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Finance\n  You know the ins and outs of commerce, from evaluating an item's relative worth to keeping up with currency exchange rates. This Knowledge can be invaluable when brokering items, running numbers\n  or playing the stock market. Sufficiently high levels in Finance allow you to raise your standards of living to a very comfortable level.","Close","");
		if(!strcmp(params,"investigation", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Investigation\n  You've learned to notice details others might overlook, and might make an admirable detective. This Knowledge represents not only a good eye for detail, but also an ability to do research and\n  follow leads. Such research may include Internet searches or more specific research techniques like hitting the law books and periodicals archives at the library.","Close","");
		if(!strcmp(params,"law", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Law\n  The Law Knowledge represents a knowledge of both legal statutes and proper procedures for enforcing them. Law can be useful for filing suits, avoiding lawsuits, or getting out of jail.\n  What's more, the Kindred keep their own laws, and more than one vampire has saved his own unlife by deftly exploiting a loophole in one of the Traditions. The Law Knowledge has any number-\n  of specialties, and a player may choose one for her character when she takes this Ability, representing both her field of experience and a general sense for how the legal system (especially-\n  in her locality) functions, though this is not mandatory.","Close","");
		if(!strcmp(params,"medicine", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Medicine\n  You have an understanding of how the human body and to a lesser extent the vampiric body '' works. This Ability covers knowledge of medicines, ailments, first-aid procedures, and diagnosis or treatment-\n  of disease. Medicine is of great use to those Kindred with an interest in repairing, damaging, or reworking the human body.","Close","");
		if(!strcmp(params,"occult", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Occult\n  You are knowledgeable in occult areas such as mysticism, curses, magic, folklore, and particularly vampire lore. Unlike most other Knowledges, Occult does not imply a command of hard facts.\n  Much of what you know may well be rumor, myth, speculation, or hearsay. However, the secrets to be learned in this field are worth centuries of sifting legend from fact. High levels of Occult-\n  imply a deep understanding of vampire lore, as well as a good grounding in other aspects of the occult. At the very least, you can discern what is patently false.","Close","");
		if(!strcmp(params,"politics", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Politics\n  You are familiar with the politics of the moment, including the people in charge and how they got there. This Knowledge can aid you in dealing with or influencing mortal politicians, or even-\n  offer some insight into the local Cainite power structure. The Politics Knowledge includes the ability to practically navigate various bureaucracies, as it assumes that certain organizational-\n  structures and relationship currencies are universal.","Close","");
		if(!strcmp(params,"science", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Science\n  You have at least a basic understanding of most of the physical sciences, such as chemistry, biology, physics, and geology. This Knowledge can be put to all forms of practical use.\n  In most cases, a player should select a  specialty to reflect a focus for her character's scientific studies, but this isn''t strictly necessary.","Close","");
		if(!strcmp(params,"technology", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Technology\n  The Technology Knowledge represents a broad acumen with electronics, computer hardware, and devices more elaborate than ''machines,'' which fall under the Crafts Skill.\n  If it has a processor, a transistor, or an integrated circuit '' if it's electronic rather than electrical '' manipulating it uses the Technology Knowledge. This is the-\n  wide-ranging Ability used to build one's own computer, install (or subvert) a security system, repair a mobile phone, or kitbash a shortwave radio. You must always choose-\n  a specialization in Technology, even though you possess some skill in multiple fields.","Close","");
		if(!strcmp(params,"conscience", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Virtue","Conscience\n  Conscience is a Trait that allows characters to evaluate their conduct with relation to what is 'right'' and ''wrong.'' A character's moral judgment with Conscience stems from her attitude and outlook.\n  Conscience is what prevents a vampire from succumbing to the Beast, by defining the Beast's urges as unacceptable. Conscience factors into the difficulty of many rolls to avoid committing a transgression.\n  Additionally, Conscience determines whether or not a character loses Humanity by committing acts that do not uphold her moral code. A character with a high Conscience rating feels remorse for transgressions-\n  while a character with a lower Conscience may be more callous or ethically lax. Some vampires replace the Conscience Virtue with the Virtue of Conviction; unless you're given permission to do this,\n  assume Conscience is used.","Close","");
		if(!strcmp(params,"self control", true) || !strcmp(params,"selfcontrol", true) || !strcmp(params,"self-control", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Self-Control\n  Self-Control defines a character's discipline and mastery over the Beast. Characters with high Self-Control rarely succumb to emotional urges, and are thus able to restrain their darker sides more-\n  readily than characters with low Self-Control. Self-Control comes into play when a character faces her Beast in the form of frenzy. Self-Control allows the character to resist the frenzy.\n\n  Note: A character may never roll more dice to resist or control a frenzy than she has in her blood pool '' it's hard to deny the Beast when one's mind clouds with hunger. As with Conscience-\n  Self-Control can be replaced, in this case by the Virtue of Instinct. Again, unless the Storyteller specifically says it's all right to do so, assume Self-Control is used.","Close","");
		if(!strcmp(params,"courage", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Courage\n  All characters have a Courage Trait, regardless of the Path they follow. Courage is the quality that allows characters to stand in the face of fear or daunting adversity.\n  It is bravery, mettle, and stoicism combined. A character with high Courage meets her fears head-on, while a character of lesser Courage may flee in terror. Kindred-\n  use the Courage Virtue when faced with circumstances they endemically dread: fire, sunlight, True Faith. See the section on for mechanical systems dealing with character fear.","Close","");
		if(!strcmp(params,"primal-urge", true) || !strcmp(params,"primal urge", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Primal-Urge\n  This Talent describes a character's connection to her bestial nature, and her level of gut feelings in her various nonhuman forms. A character with high Primal-Urge relies not just on her-\n  heightened instincts, but a whole range of sensory information that humans don''t fully understand. Her understanding of her feral nature gives her an easier time when changing form, and can-\n  let her instinctively notice signs of supernatural activity '' though this rarely goes beyond the level of a chill down the spine or the hairs on her neck standing on end.","Close","");
		if(!strcmp(params,"enigmas", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Enigmas\n  The Enigmas Knowledge describes a character's ability to solve logic problems, puzzles, and mysteries. Characters with this Knowledge link information, trivia, and hunches to solve conundrums-\n  of all varieties '' especially useful when dealing with spirits who do not share a werewolf's frame of reference. High Enigmas can lead a character to apply lateral thinking to all manner of problems\n  from setting up codes and signals among his pack so they can talk in secret, to matching wits against a devious villain.","Close","");
		if(!strcmp(params,"rituals", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Ability","Rituals\n  Rituals are an important part of werewolf life. Ritual behavior helps a werewolf control the Rage within. This Knowledge lets the character know about the traditions, mysteries, and ceremonies of-\n  the Garou, including how to participate in common rites and how to behave properly towards elders and leaders. Some werewolf rituals are more than formalized behavior: they call upon ancient spirit\n  magics to powerful effect. A character cannot learn a rite of higher level than his Rituals rating.","Close","");
		if(!strcmp(params,"glory", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Renown","Glory\n  Many Garou earn Glory through defeating mighty enemies and succeeding at dangerous quests. A werewolf can earn Glory by fighting on through overwhelming odds in order to triumph, but Glory is-\n  not the Renown of a mere brawler. A werewolf must have a reason and a cause to fight for, and though the odds are against her, she must never surrender 'regardless of the cost. Many young Garou-\n  have their Glory stripped from them for leaping into fights that they cannot hope to win; Glory only trucks with stupidity when a character actually succeeds at the impossible. That said, a grand-\n  death in service to a noble ideal may give the deceased a large share of the Glory they so desired in life '' if anyone ever hears about it.","Close","");
		if(!strcmp(params,"honor", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Renown","Honor\n  Garou earn Honor by following their moral imperative to uphold the laws of the Garou. It refers to a fundamental belief in the wisdom of their society's laws, which all derive from the ultimate-\n  standard of Garou behavior: the Litany. To gain Honor Renown among Garou society shows an individual to be of honesty, integrity, and respect. Honor can be a rare trait, but werewolves who have it-\n  strive to maintain their honor with ferocity for fear of losing it. Werewolves hold themselves to the highest possible standards in the name of Honor. That's not to say that they feel superior to others\n  a Garou who looks down his nose at his compatriots isn''t exactly behaving honorably towards them. Those who tolerate a braggart will soon surpass him. Instead, a werewolf holds himself to high standards-\n  in the sometimes vain hope of staving off pride.\n\n  Honor, after all, is all about self-control. Not just the self-control that comes with upholding strict principles when easier alternatives abound, but the iron will to avoid falling into frenzy.\n  When berserk, a Garou is capable of all manner of evil acts. More than a few newly-Changed Garou have awakened after a frenzy to find themselves soaked in blood and bereft of honor.","Close","");
		if(!strcmp(params,"wisdom", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Renown","Wisdom\n  High Wisdom Renown is the mark of a character who thinks through her words and actions before sharing them, and is adept at sensing when others have not done the same. As such, werewolves with a\n  reputation for Wisdom are likely to find others listening and deferring to them at moots. The deeds of a wise werewolf rarely align with those of a glorious one. Glory-seekers charge into battle\n  whenever they see a goal worth chasing, while those who quest for Wisdom pick their fights carefully, to ensure they have the greatest chance of victory. Both werewolves have their uses to a pack\n  but those who do not succeed on their quest for Wisdom are more likely to survive to try again. Those werewolves who are both wise and valorous know both when to fight and how to win. It's a fine\n  balance to strike, but those who manage it are valuable allies to all Garou.","Close","");
		if(!strcmp(params,"rage", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Advantage","Rage\n  Every Garou is a crucible for Gaia's primal anger '' her Rage at the pillage of the world at the hands of the Weaver and the Wyrm. This Rage is a force of mindless violence, a constant slow-motion\n  path of unthinking destruction and violence that each and every Garou must keep control of lest it consume her. Rage mixes instinctual cunning and hunting ability with savage bloodlust and unpredictable horror.","Close","");
		if(!strcmp(params,"gnosis", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Advantage","Gnosis\n  Gaia did not leave the Garou with Rage as their only inheritance of her spiritual power. She gave them another tool, one that connects her children to their other nature, the spirit world.\n  This connection to the Sacred Mother is called Gnosis. Gnosis is the essence of the spiritual world; it allows Garou to access the spirits that surround them. In some ways, it is the expression\n  of their half-spirit nature. This connection is what makes travel to the Umbra possible, and it fuels many of the powerful Gifts the spirits can bestow. Without this spiritual force, Garou would\n  be cut off from half of their natures. Characters with low Gnosis can find contact with the spirits rare and difficult. On the other side, those with very high Gnosis scores sometimes find the worlds-\n  blurring, and they may have trouble distinguishing each side of the Gauntlet from the other.","Close","");
		if(!strcmp(params,"animalism", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Animalism\n  The Beast resides within all creatures, from scuttling cockroaches to scabrous rats up through untamed wolves and even powerful Kindred elders. Animalism allows the vampire to amplify his intensely-\n  primordial nature. He can not only communicate with animals, but can also force his will upon them, directing such beasts to do as he commands. As the vampire grows in power, he can even control the-\n  Beast within mortals and other supernaturals. Beasts grow distinctly agitated in the presence of a vampire who lacks this Discipline or the Skill of Animal Ken, often to the point of attacking or running-\n  from the vampire. In contrast, vampires possessingAnimalism exude a dominant vibe to lower creatures, which attracts them. Animalism is commonly found with vampires of the Gangrel and Nosferatu Clans.\n  Manipulation and Charisma are important for the use of Animalism powers; the stronger the vampire's personality, the more influence he has over animals.","Close","");
		if(!strcmp(params,"auspex", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Auspex\n  Auspex gives the vampire uncanny sensory abilities. She starts with the capacity to heighten her natural senses significantly, but as she grows in power, she can perceive psychic auras and read the\n  thoughts of another being. Auspex can also pierce through mental illusions such as those created by Obfuscate '' (type (/learn unseen) for more). However, a vampire with Auspex needs to be careful.\n  Her increased sensory sensitivity can cause her to be drawn in by beautiful things or stunned by loud noises or pungent smells. Sudden or dynamic events can disorient an Auspex-using character unless-\n  her player makes a Willpower roll to block them out (difficulty of at least 4, although the more potent the source of distraction, the higher the difficulty). Failure overwhelms the character's senses\n  making her oblivious to her surroundings for a turn or two. While the Malkavians and Toreador are more prone to these kinds of distractions, the Tremere and Tzimisce aren''t immune. Dots in Perception-\n  are very useful for using Auspex powers, as more successes help the character gain more sensory information.","Close","");
		if(!strcmp(params,"celerity", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Celerity\n  Not all vampires are slow, meticulous creatures. When needed, some vampires can move fast '' really fast. Celerity allows Assamites, Brujah, and Toreadors to move with astonishing swiftness, becoming-\n  practically a blur. The Assamites use their speed in conjunction with stealth to strike quickly and viciously from the shadows before they are noticed. Brujah, on the other hand, simply like the edge-\n  that the power gives them against overwhelming odds. The Toreador are more inclined to use Celerity to provide an air of unnatural grace to live performances or for an extra push to complete a masterpiece-\n  on time, but they can be as quick to draw blood as any assassin or punk when angered.","Close","");
		if(!strcmp(params,"chimerstry", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Chimerstry\n  The Ravnos are known as masters of illusion, although the reason why is lost to history. Rumors abound of Ravnos gh?ls, rakshasas, and shapeshifters, but whatever its origins, Chimerstry remains a potent-\n  and powerful weapon for the Deceivers. The Discipline is, fundamentally, an art of conjuration that converts the vampire's will into phantoms that confound the senses and technology alike. Even vampires fall\n  under the sway of the Ravnos'' illusory world, unless they have a strong enough grasp of Auspex. The Ravnos often use this power to swindle and seduce their victims into acts that work out badly for the victim\n  (but great for the Ravnos). Illusions created by Chimerstry can be seen for what they are by a victim who ''proves'' the illusion's falsehood (e.g., a person who walks up to an illusory wall, expresses his disbelief\n  in it, and puts his hand through it effectively banishes the illusion), and explicitly incredible illusions are seen as false immediately (e.g., dragons breathing fire or gravity working in reverse). Sometimes-\n  frequent targets of Chimerstry end up attempting to disbelieve everything around them, leading to derangements (and, quite often, to the amusement of the Ravnos).","Close","");
		if(!strcmp(params,"dementation", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Dementation\n  Dementation is the Discipline that allows a vampire to focus and channel madness into the minds of those around him. Though it's the natural legacy of the Malkavians, practitioners of Dementation\n  need not actually be mad to use the Discipline.. but it helps. Disturbingly, Dementation doesn''t actually make their victims mad, but rather it seems to break down the doors to the hidden darkness-\n  of the target's mind, releasing into the open whatever is found there. The Malkavians claim that this is because insanity is the next logical step in mental evolution, a transhumanist advancement of-\n  what modern people consider consciousness. Other Kindred scoff that this reasoning is an outright justification for the chaos that Dementation brings. They don''t scoff too loudly, however, lest the-\n  Malkavian advance their consciousness next.","Close","");
		if(!strcmp(params,"dominate", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Dominate\n  Dominate is one of the most dreaded of Disciplines. It is a vampire's ability to influence another person's thoughts and actions through her own force of will. Dominate requires that the vampire\n  capture her victim's gaze; as such, it may be used against only one subject at a time. Further, commands must be issued verbally, although simple orders may be made with signs - for example\n  a pointed finger and forceful expression to indicate ''Go!'' However, the subject won''t comply if he can''t understand the vampire, no matter how powerful the Kindred's will is. Perhaps unsurprisingly\n  vampires to which Dominate comes naturally tend to be from willful, domineering Clans. The Giovanni, Lasombra, Tremere, and Ventrue all consider an iron will to be a boon, and are eager to impose that\n  iron will on any who would move against them.","Close","");
		if(!strcmp(params,"fortitude", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Fortitude\n  Although all vampires have an unnatural constitution that make them much sturdier than mortals, Fortitude bestows a resilience that would make an action movie hero envious.\n  Vampires with this Discipline can shrug off agonizing trauma and make the most bone-shattering impact look like a flesh wound. The power even offers protection against the\n  traditional banes of vampires, such as sunlight and fire, and the Gangrel, Ravnos, and Ventrue all find that edge incredibly useful.","Close","");
		if(!strcmp(params,"necromancy", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Necromancy\n  Necromancy is both a Discipline and a school of blood magic devoted to the command of the souls of the dead. It's similar to Thaumaturgy in that it has several ''paths'' and accompanying 'rituals''\n  rather than a strict linear progression of powers. The study of Necromancy is not widespread among the Kindred, and its practitioners, primarily the Giovanni, are shunned and despised for their foul\n  practices (until those practices become useful, of course). Over the centuries, the various schools of vampiric Necromancy have evolved and diversified from an earlier form of death magic, leaving\n  several distinct paths of necromantic magic available to Cainites. Nearly all modern necromancers learn the Sepulchre Path first before extending their studies to other paths. The primary Necromancy\n  path increases automatically as the character increases her overall Necromancy rating. Other paths must be bought separately, using the experience costs for secondary paths.\n\n  Like Thaumaturgy, Necromancy has also spawned a series of rituals. While not nearly so immediate in effect as the basic powers of Necromancy, Necromantic rituals can have impressive long-term effects.\n  Unsurprisingly, the elements of Necromantic ritual are things like long-buried corpses and hands from the cadavers of hanged men, so obtaining suitable materials can be quite difficult.","Close","");
		if(!strcmp(params,"obfuscate", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Obfuscate\n  Obfuscate is the uncanny ability for Kindred to conceal themselves from sight, sometimes even in full view of a crowd. An Obfuscated vampire doesn''t actually become invisible, however - rather, he is\n  able to delude observers into believing that he has vanished. Obfuscate also allows Kindred to change their features and conceal other people or objects. Typically vampires using Obfuscate must be within\n  a short range of their witnesses (approximately five yards or meters per dot of Wits + Stealth) for their power to be effective. Unless the Kindred chooses to make herself seen, she can remain obscured for\n  as long as she wills it. At higher levels, the vampire can actually fade from sight so subtly that those nearby can''t actually recall the moment at which she left. Usually, few mortals or supernaturals (even-\n  those trained in Awareness) can pierce through the fog of Obfuscate. Animals, who rely more on their instincts than their normal senses, can sometime perceive (and be frightened by) the vampire's presence.\n  Children and those to whom deception is foreign may also be able to pierce the illusion, at the Storyteller's discretion. Finally, the Auspex Discipline enables Kindred to see through Obfuscate. Even that-\n  is not guaranteed (/learn unseen). Since Obfuscate clouds the mind of the viewer, vampires can''t use it to hide their presence from electronic or mechanical devices. Video and photo cameras, for example\n  capture the vampire's image accurately. Even so, the person using, say, her cell phone to record an Obfuscated vampire will still have her mind impacted by the power, and she won''t see the Kindred's image\n  until she views the video at a later date (if even then). Several Clans cultivate this power '' the Assamites, Followers of Set, and Malkavians, for example - but the Nosferatu are particularly known for this\n  Discipline. Some elder Kindred believe that Caine, or perhaps Lilith, bestowed the Clan with this Discipline to compensate for the hideous physical deformities its members suffer. Most Obfuscate powers last for\n  a scene, or until the vampire ceases maintaining them. Once evoked, they require very little mental effort to keep in place.","Close","");
		if(!strcmp(params,"obtenebration", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Obtenebration\n  The signature power of the Lasombra, Obtenebration grants the vampire power over darkness itself. The nature of the darkness invoked by Obtenebration is a matter of intense debate among Kindred.\n  Some believe it to be merely shadows, while others feel that the power gives control over the stuff of the vampire's soul, coaxing it tangibly outward. Regardless, the effects of Obtenebration are\n  terrifying, as waves of darkness roil out from the Cainite, enveloping those in their path like an infernal wave. As Obtenebration is mostly known as a Sabbat Discipline, any Camarilla vampire caught\n  using the power had better have a damned good explanation.\n\n  Note: Vampires using Obtenebration can see through the darkness they control, though other vampires (even those that also have Obtenebration) cannot. Dreadful tales of rival Lasombra struggling to blind\n  and smother each other with the same wisps of darkness circulate among young members of the Clan, though no elders have come forth to substantiate these claims.","Close","");
		if(!strcmp(params,"potence", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Potence\n  Kindred endowed with Potence possess unnatural strength. This Discipline enables vampire to leap massive distances, lift tremendous weights, and strike opponents with brutal force. Even low ranks\n  of this power can give Kindred physical power beyond mortal bounds. More powerful Kindred can leap so far that they appear to be flying, toss cars like soda cans, and punch through walls like cardboard.\n  While the more subtle mental Disciplines can be awe-inspiring, the brutal effectiveness of Potence is formidable in its own right. The Brujah, Giovanni, Lasombra, and Nosferatu are naturally gifted with\n  this Discipline, but members of other Clans often make a point to find someone who can teach them the awesome power of Potence. Each dot that the vampire has in Potence adds one die to all Strength-related\n  dice rolls. Further, the player can spend one blood point and change his Potence dice into an equal number of automatic successes to all Strength-related rolls for the turn. In melee and brawling combat\n  successes from Potence (either rolled or automatic) are applied to the damage roll results.","Close","");
		if(!strcmp(params,"presence", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Presence\n  Presence is the Discipline of emotional manipulation. Vampires with this power can inspire passionate fervor or unreasoning terror in mortals and Kindred alike. In addition, unlike most Disciplines\n  some of Presence's powers can be used on entire crowds at one time. Presence can transcend race, religion, gender, class, and (most importantly) supernatural nature. As such, this subtle power is one\n  of the most useful Disciplines a vampire can possess. Anyone can resist Presence for one scene by spending a Willpower point and succeeding on a Willpower roll (difficulty 8), but the affected individual\n  must keep spending points until he is no longer in the presence of the vampire (or, in the case of Summon, until the effect wears off). Vampires three or more Generations lower than the wielder need only\n  spend a single Willpower to ignore the Presence for an entire night and need not roll Willpower to do so. The major drawback of Presence is that it controls only the emotions. It causes others to feel a certain\n  way toward the vampire, but does not give her outright control over them. While people weigh strongly the orders that the vampire declares, their minds are still their own. Suicidal or ridiculous directives don''t\n  sound any more sensible just because the person giving them is unusually fascinating. Still, inspired eloquence or significant wealth used in combination with this Discipline can enable the vampire to urge others\n  along a desired course. The Brujah, Followers of Set, Toreador, and Ventrue Clans are all adept in this Discipline. The Ventrue are arguably the most skilled with its application, however, due to their ability to\n  use Presence and Dominate in efficient combination. ","Close","");
		if(!strcmp(params,"protean", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Protean\n  Protean allows the Kindred the mystical ability to manipulate his physical form. Some vampires believe the power stems from a heightened connection to the natural world, while others consider it\n  to be a magnification of the mark of Caine. Whatever its basis may be, those that develop this Discipline can grow bestial claws, take on the forms of bats and wolves, turn themselves into mist-\n  and even meld into the very earth itself. Transformed Kindred can generally use other Disciplines - vampires in wolf form can still read auras and communicate with other animals, for example.\n  However, it may be ruled that certain Disciplines may not be used in specific situations. The Kindred's clothes and personal possessions also change when he transforms (presumably absorbed within\n  his very substance), although armor and the like do not provide any benefit while transformed. Vampires cannot change or transform large objects or other beings; Protean is a personal expression of power.\n  A Kindred who has been staked (thereby trapping his soul within his body) cannot transform. Some vampires believe that those who have mastered the highest levels of Protean can deny this limitation, however.\n  The Gangrel Clan is well known for their mastery of Protean, although other Kindred have learned some of this Discipline's secrets from these bestial Cainites.","Close","");
		if(!strcmp(params,"quietus", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Quietus\n  The Discipline of silent death, Quietus is practiced by those of Clan Assamite. Based on elements of blood, poison, vitae control, and pestilence, Quietus focuses on the destruction of a target through\n  a variety of means. This Discipline doesn''t always cause a quick death, but the Assamites rely on its lethality to hide their involvement with their victims.","Close","");
		if(!strcmp(params,"serpentis", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Serpentis\n  Serpentis is believed to be the legacy of Set himself, a gift to his children. The Followers of Set are very careful to guard this Discipline's secrets, only teaching the art to those who they deem worthy.\n  Most vampires fear the Setites because of the powers of Serpentis and its connection to snakes and reptiles; this Discipline can evoke a primordial fear in others, particularly those who recall the tale of Eden.","Close","");
		if(!strcmp(params,"vicissitude", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Vicissitude\n  Vicissitude is the signature power of the Tzimisce, and is rarely shared outside the Clan (though it is known to some other Cainites of the Sabbat). Similar to Protean in some ways, Vicissitude allows\n  vampires to shape and sculpt flesh and bone. When a Kindred uses Vicissitude to alter mortals, ghouls, and vampires of higher Generation, the effects of the power are permanent; vampires of equal or-\n  lower Generation can choose to heal the effects of Vicissitude as though they were aggravated wounds.\n\n  A wielder of Vicissitude can always reshape her own flesh. The wielder must establish skin-to-skin contact and must often manually sculpt the desired result for these powers to take effect.\n  This also applies to the use of the power on oneself. Tzimisce skilled in Vicissitude are often inhumanly beautiful\n  those less skilled are simply inhuman. There are rumors that Vicissitude\n  is a disease rather than a ''normal'' Discipline, but only the Fiends know for sure, and they aren''t talking.\n\n  Note: Nosferatu always ''heal'' Vicissitude alterations, at least the ones that make them better-looking. The ancient curse of the Clan may not be circumvented through Vicissitude. The same applies to-\n  physical deformities from the Gangrel Clan weakness.","Close","");
		if(!strcmp(params,"thaumaturgy", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","Thaumaturgy\n  Thaumaturgy encompasses blood magic and other sorcerous arts available to Kindred. The Tremere Clan is best known for their possession (and jealous hoarding) of this Discipline.\n  The Tremere created Thaumaturgy by combining mortal wizardry with the power of vampiric vitae, and as a result it is a versatile and powerful Discipline. Although there are whispers-\n  of the existence of Tremere antitribu in the Sabbat, other Clans in the Sword of Caine have also researched and developed access to such mystical might. Nevertheless, the Tremere of-\n  the Camarilla remain this Discipline's masters.\n\n  Like Necromancy, the practice of Thaumaturgy is divided into paths and rituals. Thaumaturgical paths are applications of the vampire's knowledge of blood magic, allowing her to create-\n  effects on a whim. Rituals are more formulaic in nature, most akin to ancient magical 'spells.'' Because so many different paths and rituals are available to the arcane Tremere, one never\n  knows what to expect when confronted with a practitioner of this Discipline.\n\n  When a character first learns Thaumaturgy, the player selects a path for the character. That path is considered the character's primary path, and she automatically receives one dot in it-\n  as well as one Level One ritual. Thereafter, whenever the character increases her level in Thaumaturgy, her rating in the primary path increases by one as well. Additional rituals are learned\n  separately, as part of gameplay; players need not pay experience points for their characters to learn rituals up to the level equal to their overall rating in Thaumaturgy, though they must find\n  someone to teach the rituals in question. Path ratings never exceed 5, though the overall Thaumaturgy score may. If a character reaches a rating of 5 in her primary path and increases her Thaumaturgy\n  score afterward, she may allocate her ''free'' path dot to a different path.\n\n  Many Kindred fear crossing the practitioners of Thaumaturgy. It is a very potent and mutable Discipline, and almost anything the Kindred wishes may be accomplished through its magic.","Close","");
		if(!strcmp(params,"Breath of the Wyld", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Gift Description (Level One)","The Fury must touch her target's skin. The player rolls Gnosis (difficulty 5 against\n Garou and Kinfolk; difficulty 6 for others). Success grants the recipient a rush of mental vitality\n in game terms, one additional die on all Mental rolls for the rest of the scene.\n It also adds one to the difficulties of any Rage rolls made during the scene.","Close","");
		if(!strcmp(params,"Man's Skin", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Gift Description (Level One)"," This Gift allows a Fury to effectively change gender in the eyes of onlookers,\n System: The player rolls Charisma + Subterfuge (difficulty 7). The illusion lasts for one scene per\n success, or until the Fury shifts form. The disguise withstands casual\n tactile contact, although heavy or violent contact will reveal the truth.","Close","");
		if(!strcmp(params,"Wyld Resurgence", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Gift Description (Rank One)","System: The Fury spends a turn in concentration and the player spends one Gnosis point.\n The werewolf immediately heals either three levels of bashing damage or two levels of lethal damage.\n With the expenditure of a Willpower point in addition to the Gnosis point, one\n level of aggravated damage may be healed instead. Damage caused by silver weapons cannot be healed\n with this Gift.","Close","");
		if(!strcmp(params,"Curse of Aeolus", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Gift Description (Rank Two)","The Fury calls up a thick, eerie fog that obscures vision and unnerves her opponents.\n System: The player makes a Gnosis roll, with the difficulty depending on humidity and closeness to\n a body of water (a lake shore might be difficulty 4, while a desert would be 9).\n Those other than the Fury who are enveloped in the fog lose half of their dice on all Perception\n rolls (round up). All those enveloped within the fog also lose one die from all Willpower rolls,\n save the Fury and her packmates.","Close","");
		if(!strcmp(params,"Kali's Tongue", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Gift Description (Rank Two)","System: The player spends one point of Rage and rolls Manipulation + Medicine (difficulty equals\n the target's Rage or Willpower ''3, whichever is lower). Each success prevents the target from \n healing damage by any means (including Gifts like Mother's Touch) for one turn.","Close","");		
		//if(!strcmp(params,"", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","","Close","");
		//if(!strcmp(params,"", true)) return Dialog_Show(playerid,dLearnTerm,DIALOG_STYLE_MSGBOX,"Discipline","","Close","");
		//The Stamina Trait reflects a character's health, toughness, and resilience. It indicates how long a character can exert herself and how much punishment she can withstand before suffering physical
		return MSG(playerid,GOLD,"Info:"GR" Undefined term.");
	}
	return 0;
}
CMD:setrace(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		new id,race;
		if(sscanf(params,"ui",id,race))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /setrace [playerid/PartOfName] [race]");
		if(!User[id][Logged]) 
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		if(race < 0 || race > 6)
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid race specified.");
		ResetCS(id);
		new prace[24];
		new query[90];
		format(query,sizeof query,"UPDATE users SET race = %d WHERE userid = %d",race,User[id][UserID]);
		db_query(Database, query);
		User[id][Userrace] = race;
		if(User[id][Userrace] == 4)
		{
			UpdateTrait(id, "Mercy", 0, 3);	
			UpdateTrait(id, "Vision", 0, 3);	
			UpdateTrait(id, "Zeal", 0, 3);	
		}
		if(User[id][Userrace] == 6)
		{
			UpdateTrait(playerid, "Actor", 0, 3);	
			UpdateTrait(playerid, "Fae", 0, 3);	
			UpdateTrait(playerid, "Nature", 0, 3);	
			UpdateTrait(playerid, "Prop", 0, 3);	
			UpdateTrait(playerid, "Scene", 0, 3);	
			UpdateTrait(playerid, "Time", 0, 3);	
		}
		switch(race)
		{
			case 0: prace = "Human";
			case 1: prace = "Vampire";
			case 2: prace = "Werewolf";
			case 3: prace = "Mage";
			case 4: prace = "Hunter";
			case 5: prace = "Demon";
			case 6: prace = "Changeling";
			default: prace = "Invalid Race ID";
		}
		format(large_string, sizeof large_string, "STFCMD: %s has set %s race to %s. (character sheet has been reset)", User[playerid][forumname], User[id][Username], prace);
		Staff(ADMIN, large_string);
		//MSG(playerid,WHITE,"SERVER: Player's race has been changed. Instruct them to relog before touching their character sheet.");
		new File:pos= fopen("Logs/SetRace.log", io_append);
		format(large_string, sizeof large_string,"[%s][%s] %s set %s race to %s.\r\n",PasteDate(),PasteTime(), User[playerid][Username], User[id][Username], prace);
		fwrite(pos, large_string);
		fclose(pos);
		return 1;
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
stock ResetCS(id)
{
	if(User[id][Logged])
	{
		new query[90];
		format(query,sizeof query,"DELETE FROM sheet WHERE userid = %d",User[id][UserID]);
		db_query(Database, query);
		format(query, sizeof query, "DELETE FROM advantages WHERE userid = %d", User[id][UserID]);
		db_query(Database, query);
		DeletePVar(id, "Strength");
		DeletePVar(id, "Dexterity");
		DeletePVar(id, "Stamina");
		DeletePVar(id, "Charisma");
		DeletePVar(id, "Manipulation");
		DeletePVar(id, "Appearance");
		DeletePVar(id, "Perception");
		DeletePVar(id, "Intelligence");
		DeletePVar(id, "Wits");
		DeletePVar(id, "FreshCS");
		DeletePVar(id, "Zeal");
		DeletePVar(id, "Mercy");
		DeletePVar(id, "Vision");
		DeletePVar(id, "Tribe");
		DeletePVar(id, "Demeanor");
		DeletePVar(id, "Concept");
		DeletePVar(id, "Paradigm");
		DeletePVar(id, "Sect");
		DeletePVar(id, "Tribe");
		DeletePVar(id, "Affiliation");
		DeletePVar(id, "Essence");
		DeletePVar(id, "Nature");
		DeletePVar(id, "player_CrinosSkin");
		DeletePVar(id, "player_HispoSkin");
		DeletePVar(id, "player_LupusSkin");
		DeletePVar(id, "House");
		DeletePVar(id, "Faction");
		DeletePVar(id, "Visage");
		DeletePVar(id,"Affinity");
		DeletePVar(id, "sFreebie");
		DeletePVar(id, "Faith");
		DeletePVar(id, "tFaith");
		DeletePVar(id, "Torment");
		DeletePVar(id, "tTorment");
		DeletePVar(id, "sVFreebie");
		DeletePVar(id, "Pack Name");
		DeletePVar(id, "Pack Totem");
		DeletePVar(id, "tRage");
		DeletePVar(id, "Kith");
		DeletePVar(id, "Court");
		DeletePVar(id, "Legacy");
		DeletePVar(id, "Seeming");
		DeletePVar(id, "Glamour");
		DeletePVar(id, "Banality");
		DeletePVar(id, "tBanality");

		for(new a = 0; a < sizeof(sTraits); a++) DeletePVar(id, sTraits[a]);
		for(new b = 0; b < sizeof(rVirtues); b++) DeletePVar(id, rVirtues[b]);
		for(new c = 0; c < sizeof(rDisciplines); c++) DeletePVar(id, rDisciplines[c]);
		for(new d = 0; d < sizeof(rSpheres); d++) DeletePVar(id, rSpheres[d]);
		for(new e = 0; e < sizeof(sNoEdit); e++) DeletePVar(id, sNoEdit[e]);
		UpdateTrait(id, "Strength", 1);
		UpdateTrait(id, "Dexterity", 1);
		UpdateTrait(id, "Stamina", 1);
		UpdateTrait(id, "Charisma", 1);
		UpdateTrait(id, "Manipulation", 1);
		UpdateTrait(id, "Appearance", 1);
		UpdateTrait(id, "Perception", 1);
		UpdateTrait(id, "Intelligence", 1);
		UpdateTrait(id, "Wits", 1);
		UpdateTrait(id, "FreshCS", 1, 9);
		


		return 1;
	}
	return 0;
}
CMD:givewp(playerid,params[])
{
	if(User[playerid][Useradmin] > 1)
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		new id,xp;
		if(sscanf(params,"ui",id,xp))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /givewp [playerid/PartOfName] [willpower]");
		if(!User[id][Logged]) 
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		new curxp = GetPVarInt(id, "tWillpower");
		new perm = GetPVarInt(id, "Willpower");
		new sum = curxp+xp;
		if(sum > perm)
			UpdateTrait(id, "tWillpower", perm);
		else
			UpdateTrait(id, "tWillpower", sum);
		
		format(large_string, sizeof large_string, "STFCMD: %s gave %s %d temporary Willpower point(s). (Previous: %d; Current: %d)", User[playerid][forumname], User[id][Username], xp, curxp, sum);
		Staff(ADMIN, large_string);
		new File:pos= fopen("Logs/GiveWillpower.log", io_append);
		format(large_string, sizeof large_string,"[%s][%s] %s gave %s %d temporary Willpower point(s).\r\n",PasteDate(),PasteTime(), User[playerid][forumname], User[id][Username], xp);
		fwrite(pos, large_string);
		fclose(pos);
		large_string[0] = EOS;
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:givefaith(playerid,params[])
{
	if(User[playerid][Useradmin] > 1)
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		new id,xp;
		if(sscanf(params,"ui",id,xp))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /givefaith [playerid/PartOfName] [faith]");
		if(!User[id][Logged]) 
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		new curxp = GetPVarInt(id, "tFaith");
		new perm = GetPVarInt(id, "Faith");
		new sum = curxp+xp;
		if(sum > perm)
			UpdateTrait(id, "tFaith", perm);
		else
			UpdateTrait(id, "tFaith", sum);
		
		format(large_string, sizeof large_string, "STFCMD: %s gave %s %d temporary Faith point(s). (Previous: %d; Current: %d)", User[playerid][forumname], User[id][Username], xp, curxp, sum);
		Staff(ADMIN, large_string);
		new File:pos= fopen("Logs/GiveFaith.log", io_append);
		format(large_string, sizeof large_string,"[%s][%s] %s gave %s %d temporary Faith point(s).\r\n",PasteDate(),PasteTime(), User[playerid][forumname], User[id][Username], xp);
		fwrite(pos, large_string);
		fclose(pos);
		large_string[0] = EOS;
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:givebp(playerid,params[])
{
	if(User[playerid][Useradmin] > 1)
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		new id,xp;
		if(sscanf(params,"ui",id,xp))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /givebp [playerid/PartOfName] [blood]");
		if(!User[id][Logged]) 
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		new curxp = GetPVarInt(id, "BloodPool");
		new perm = GetMaxBloodPool(id);
		new sum = curxp+xp;
		if(sum > perm)
			UpdateTrait(id, "BloodPool", perm);
		else
			UpdateTrait(id, "BloodPool", sum);
		
		format(large_string, sizeof large_string, "STFCMD: %s gave %s %d blood point(s).", User[playerid][forumname], User[id][Username], xp);
		Staff(ADMIN, large_string);
		new File:pos= fopen("Logs/GiveBlood.log", io_append);
		format(large_string, sizeof large_string,"[%s][%s] %s gave %s %d blood point(s).\r\n",PasteDate(),PasteTime(), User[playerid][forumname], User[id][Username], xp);
		fwrite(pos, large_string);
		fclose(pos);
		large_string[0] = EOS;

		SFM(id, GREEN, "Blood Points:"GR" You have been awarded (%d) Blood Points by %s.", xp, User[playerid][forumname]);
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:giveq(playerid,params[])
{
	if(User[playerid][Useradmin] > 1)
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		new id,xp;
		if(sscanf(params,"ui",id,xp))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /giveq [playerid/PartOfName] [quintessence]");
		if(!User[id][Logged]) 
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		new curxp = GetPVarInt(id, "Quintessence");
		new sum = curxp+xp;
		new perm = GetPVarInt(id, "mQuintessence");
		if(sum > perm)
			UpdateTrait(id, "Quintessence", perm);
		else
			UpdateTrait(id, "Quintessence", sum);
		UpdateTrait(id, "Quintessence", sum);
		format(large_string, sizeof large_string, "STFCMD: %s gave %s %d Quintessence point(s).", User[playerid][forumname], User[id][Username], xp);
		Staff(ADMIN, large_string);
		new File:pos= fopen("Logs/GiveQuintessence.log", io_append);
		format(large_string, sizeof large_string,"[%s][%s] %s gave %s %d Quintessence point(s).\r\n",PasteDate(),PasteTime(), User[playerid][forumname], User[id][Username], xp);
		fwrite(pos, large_string);
		fclose(pos);
		large_string[0] = EOS;

		SFM(id, GREEN, "Quintessence:"GR" You have been awarded (%d) Quintessence Points by %s.", xp, User[playerid][forumname]);
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:giveconviction(playerid,params[])
{
	if(User[playerid][Useradmin] > 1)
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		new id,xp;
		if(sscanf(params,"ui",id,xp))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /giveconviction [playerid/PartOfName] [conviction]");
		if(!User[id][Logged]) 
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		new curxp = GetPVarInt(id, "tConviction");
		new perm = GetPVarInt(id, "Conviction");
		new sum = curxp+xp;
		if(sum > perm)
			UpdateTrait(id, "tConviction", perm);
		else
			UpdateTrait(id, "tConviction", sum);
		
		format(large_string, sizeof large_string, "STFCMD: %s gave %s %d temporary Conviction point(s). (Previous: %d; Current: %d)", User[playerid][forumname], User[id][Username], xp, curxp, sum);
		Staff(ADMIN, large_string);
		new File:pos= fopen("Logs/GiveConviction.log", io_append);
		format(large_string, sizeof large_string,"[%s][%s] %s gave %s %d temporary Conviction point(s).\r\n",PasteDate(),PasteTime(), User[playerid][Username], User[id][Username], xp);
		fwrite(pos, large_string);
		fclose(pos);
		large_string[0] = EOS;
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:giveglamour(playerid,params[])
{
	if(User[playerid][Useradmin] > 1)
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		new id,xp;
		if(sscanf(params,"ui",id,xp))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /giveglamour [playerid/PartOfName] [glamour]");
		if(!User[id][Logged]) 
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		new curxp = GetPVarInt(id, "tGlamour");
		new perm = GetPVarInt(id, "Glamour");
		new sum = curxp+xp;
		if(sum > perm)
			UpdateTrait(id, "tGlamour", perm);
		else
			UpdateTrait(id, "tGlamour", sum);
		
		format(large_string, sizeof large_string, "STFCMD: %s gave %s %d temporary Glamour point(s). (Previous: %d; Current: %d)", User[playerid][forumname], User[id][Username], xp, curxp, sum);
		Staff(ADMIN, large_string);
		new File:pos= fopen("Logs/GiveRage.log", io_append);
		format(large_string, sizeof large_string,"[%s][%s] %s gave %s %d temporary Glamour point(s).\r\n",PasteDate(),PasteTime(), User[playerid][Username], User[id][Username], xp);
		fwrite(pos, large_string);
		fclose(pos);
		large_string[0] = EOS;
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 0;
}
CMD:giverage(playerid,params[])
{
	if(User[playerid][Useradmin] > 1)
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		new id,xp;
		if(sscanf(params,"ui",id,xp))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /giverage [playerid/PartOfName] [rage]");
		if(!User[id][Logged]) 
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		new curxp = GetPVarInt(id, "tRage");
		new perm = GetPVarInt(id, "Rage");
		new sum = curxp+xp;
		if(sum > perm)
			UpdateTrait(id, "tRage", perm);
		else
			UpdateTrait(id, "tRage", sum);
		
		format(large_string, sizeof large_string, "STFCMD: %s gave %s %d temporary Rage point(s). (Previous: %d; Current: %d)", User[playerid][forumname], User[id][Username], xp, curxp, sum);
		Staff(ADMIN, large_string);
		new File:pos= fopen("Logs/GiveRage.log", io_append);
		format(large_string, sizeof large_string,"[%s][%s] %s gave %s %d temporary Rage point(s).\r\n",PasteDate(),PasteTime(), User[playerid][Username], User[id][Username], xp);
		fwrite(pos, large_string);
		fclose(pos);
		large_string[0] = EOS;
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:givegnosis(playerid,params[])
{
	if(User[playerid][Useradmin] > 1)
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		new id,xp;
		if(sscanf(params,"ui",id,xp))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /givegnosis [playerid/PartOfName] [gnosis]");
		if(!User[id][Logged]) 
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		new curxp = GetPVarInt(id, "tGnosis");
		new perm = GetPVarInt(id, "Gnosis");
		new sum = curxp+xp;
		if(sum > perm)
			UpdateTrait(id, "tGnosis", perm);
		else
			UpdateTrait(id, "tGnosis", sum);
		
		format(large_string, sizeof large_string, "STFCMD: %s gave %s %d temporary Gnosis point(s). (Previous: %d; Current: %d)", User[playerid][forumname], User[id][Username], xp, curxp, sum);
		Staff(ADMIN, large_string);
		new File:pos= fopen("Logs/GiveGnosis.log", io_append);
		format(large_string, sizeof large_string,"[%s][%s] %s gave %s %d temporary Gnosis point(s).\r\n",PasteDate(),PasteTime(), User[playerid][Username], User[id][Username], xp);
		fwrite(pos, large_string);
		fclose(pos);
		large_string[0] = EOS;
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:giverpitem(playerid, params[])
{
	if(User[playerid][Useradmin] != 0)
	{
		//UpdateItem(playerid, slot, itemid, itemname[], value, condition = 100, bool:mergable = false, bool:fakeitem = false)
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		new target, name[MAX_ITEM_NAME], value;
		if(sscanf(params, "us[16]i", target, name, value)) return MSG(playerid, GOLD, "SYNTAX:"GR" /giverpitem [playerid/PartOfName] [roleplayitemname] [value]");
		if(strlen(name) > 16) return MSG(playerid, GOLD, "ERROR:"GR" Max character limit is 16.");
		if(User[target][Logged] == false) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player specified.");
		new bool:merge = false;
		if(value > 1) merge = true;
		new free = GetInventoryFreeSlot(target);
		if(free == -1) return MSG(playerid, GOLD, "ERROR:"GR" Specified player's inventory is full.");
		for(new i = 0; i < MAX_ITEM_NAME; i++) if(name[i] == '_') name[i] = ' ';

		UpdateItem(target, free, ROLEPLAY_ITEM, name, value, 100, merge, true);

		new File:pos= fopen("Logs/RPItems.log", io_append);
		format(large_string, sizeof large_string,"[%s][%s] %s gave %s %d %s (%d).\r\n",PasteDate(),PasteTime(), User[playerid][Username], User[target][Username], name, value);
		fwrite(pos, large_string);
		fclose(pos);
		format(large_string, sizeof large_string,"STFCHT: %s (ID: %d) spawned %s (ID: %d) a %s (Value: %d)", User[playerid][forumname], playerid,  User[target][Username], target, name, value);
		Staff(ADMIN, large_string);
		large_string[0] = EOS;
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:giverp(playerid,params[])
{
	if(User[playerid][Useradmin] > 1)
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		new name[24],id = -1,xp;
		sscanf(params,"s[24]i",name,xp);
		if(isnull(params))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /giverp [playerid/PartOfName/FullAccount_Name] [roleplay points]");
		if(IsNumeric(name))
		{
			id = strval(name);
		}
		if(id < 0 && isnull(name))
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		if(id > -1)
		{
			if(!User[id][Logged]) 
				return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
			
			format(large_string, sizeof large_string, "STFCMD: %s gave %s %d roleplay points. (Previous Roleplay Points: %d; Current Roleplay Points: %d)", 
			User[playerid][forumname], User[id][Username], xp, User[id][rpoints], User[id][rpoints]+xp);
			Staff(ADMIN, large_string);
			User[id][rpoints] += xp;
			format(large_string, sizeof large_string,"UPDATE users SET rpoints = rpoints+%d WHERE userid = %d", xp, User[id][UserID]);
			db_query(Database, large_string);	
			new File:pos= fopen("Logs/GiveRoleplayPoints.log", io_append);
			format(large_string, sizeof large_string,"[%s][%s] %s gave %s %d roleplay point(s).\r\n",PasteDate(),PasteTime(), User[playerid][Username], User[id][Username], xp);
			fwrite(pos, large_string);
			fclose(pos);
			large_string[0] = EOS;
			SFM(id, GREEN, "Experience:"GR" You have been awarded (%d) Roleplay Points by %s.", xp, User[playerid][forumname]);
			// --
			if(User[id][rpoints] > 250 && User[id][RPL][0] == 'E') // E TO D
			{
				MSG(id, WHITE, "SERVER: Congratulations, your roleplay level has increased! (New Roleplay Level: D; Previous Roleplay Level: E)");
				format(User[id][RPL], 5, "D");
				format(large_string, sizeof large_string, "UPDATE users SET rpl = 'D',rpoints = 0 WHERE userid = %d",User[id][UserID]);
				db_query(Database, large_string);			
				User[id][rpoints] = 0;	
			}
			else if(User[id][rpoints] >= 430 && User[id][RPL][0] == 'D')
			{
				MSG(id, WHITE, "SERVER: Congratulations, your roleplay level has increased! (New Roleplay Level: C; Previous Roleplay Level: D)");
				format(User[id][RPL], 5, "C");
				format(large_string, sizeof large_string, "UPDATE users SET rpl = 'C',rpoints = 0 WHERE userid = %d",User[id][UserID]);
				db_query(Database, large_string);			
				User[id][rpoints] = 0;	
			}
			else if(User[id][rpoints] >= 610 && User[id][RPL][0] == 'C')
			{
				MSG(id, WHITE, "SERVER: Congratulations, your roleplay level has increased! (New Roleplay Level: B; Previous Roleplay Level: C)");
				format(User[id][RPL], 5, "B");
				format(large_string, sizeof large_string, "UPDATE users SET rpl = 'B',rpoints = 0 WHERE userid = %d",User[id][UserID]);
				db_query(Database, large_string);			
				User[id][rpoints] = 0;					
			}
			else if(User[id][rpoints] >= 790 && User[id][RPL][0] == 'B')
			{
				MSG(id, WHITE, "SERVER: Congratulations, your roleplay level has increased! (New Roleplay Level: A; Previous Roleplay Level: B)");
				format(User[id][RPL], 5, "A");
				format(large_string, sizeof large_string, "UPDATE users SET rpl = 'A',rpoints = 0 WHERE userid = %d",User[id][UserID]);
				db_query(Database, large_string);			
				User[id][rpoints] = 0;					
			}

			// -- syncing
			format(large_string, sizeof large_string,"UPDATE users SET rpoints = %d WHERE userid = %d", User[id][rpoints], User[id][MainAccount]);
			db_query(Database, large_string);
			if(User[id][MainAccount] > 0)
				format(large_string, sizeof large_string, "SELECT * FROM linked_accounts WHERE main = %d", User[id][MainAccount]);
			else format(large_string, sizeof large_string, "SELECT * FROM linked_accounts WHERE main = %d", User[id][UserID]);
			new DBResult: Result = db_query(Database, large_string);
			do
			{
				if(db_num_rows(Result))
				{
					new alt = db_get_field_assoc_int(Result, "alt");
					format(large_string, sizeof large_string, "UPDATE users SET rpoints = %d WHERE userid = %d", User[id][rpoints], alt);
					db_query(Database, large_string);
					printf("[sync] Alternate Account %d has been updated.", alt);
				}
				else break;
			}
			while(db_next_row(Result));
			db_free_result(Result);		

			foreach(Player, i)
			{
				if(User[i][MainAccount] == User[playerid][MainAccount])
				{
					User[i][rpoints] = User[playerid][rpoints];
					format(User[i][RPL], 5, "%s", User[playerid][RPL]);
				}
				else if(User[i][UserID] == User[playerid][MainAccount])
				{
					User[i][rpoints] = User[playerid][rpoints];
					format(User[i][RPL], 5, "%s", User[playerid][RPL]);					
				}
				else if(User[playerid][UserID] == User[playerid][MainAccount])
				{
					User[i][rpoints] = User[playerid][rpoints];
					format(User[i][RPL], 5, "%s", User[playerid][RPL]);						
				}
			}
		}
		else
		{
			format(large_string, 256, "SELECT userid,rpoints,rpl FROM users WHERE username = '%s'", name);
			new DBResult: Result = db_query(Database, large_string);
			if(!db_num_rows(Result))
				return MSG(playerid, GOLD, "ERROR:"GR" Invalid player name specified.");
			new userid = db_get_field_assoc_int(Result, "userid");
			new points = db_get_field_assoc_int(Result, "rpoints");
			new rlevel[2];
			db_get_field_assoc(Result, "rpl", rlevel, sizeof rlevel);
			format(large_string, sizeof large_string,"UPDATE users SET rpoints = rpoints+%d WHERE userid = %d", xp, userid);
			db_query(Database, large_string);
			// --
			if(points >= 250 && rlevel[0] == 'E') // E TO D
			{
				format(large_string, sizeof large_string, "UPDATE users SET rpl = 'D',rpoints = 0 WHERE userid = %d",userid);
				db_query(Database, large_string);			
			}
			else if(points >= 430 && rlevel[0] == 'D')
			{
				format(large_string, sizeof large_string, "UPDATE users SET rpl = 'C',rpoints = 0 WHERE userid = %d",userid);
				db_query(Database, large_string);			
			}
			else if(points >= 610 && rlevel[0] == 'C')
			{

				format(large_string, sizeof large_string, "UPDATE users SET rpl = 'B',rpoints = 0 WHERE userid = %d",userid);
				db_query(Database, large_string);							
			}
			else if(points >= 790 && rlevel[0] == 'B')
			{
				format(large_string, sizeof large_string, "UPDATE users SET rpl = 'A',rpoints = 0 WHERE userid = %d",userid);
				db_query(Database, large_string);					
			}
			// --
			format(large_string, sizeof large_string, "STFCMD: %s gave %s %d roleplay points. (Previous Roleplay Points: %d; Current Roleplay Points: %d)", User[playerid][Username], name, xp, points, points+xp);
			Staff(ADMIN, large_string);
			new File:pos= fopen("Logs/GiveRoleplayPoints.log", io_append);
			format(large_string, sizeof large_string,"[%s][%s] %s gave %s %d roleplay point(s).\r\n",PasteDate(),PasteTime(), User[playerid][Username], name, xp);
			fwrite(pos, large_string);
			fclose(pos);
			large_string[0] = EOS;
			db_free_result(Result);
			format(large_string, sizeof large_string, "Experience: You have been awarded (%d) Roleplay Points by `%s` on `%s`.", xp, User[playerid][forumname], PasteDate());
			InsertOfflineMessage(userid, large_string);			
			// syncing
			format(large_string, sizeof large_string, "SELECT mainaccount,rpoints FROM users WHERE username = '%s'", name);
			Result = db_query(Database, large_string);
			if(db_num_rows(Result))
			{
				new main_account = db_get_field_assoc_int(Result, "mainaccount");
				new rrpoints = db_get_field_assoc_int(Result, "rpoints");
				if(main_account == 0) return 1;
				format(large_string, sizeof large_string, "SELECT * FROM linked_accounts WHERE main = %d", main_account);
				Result = db_query(Database, large_string);
				do
				{
					if(db_num_rows(Result))
					{
						new alt = db_get_field_assoc_int(Result, "alt");
						format(large_string, sizeof large_string, "UPDATE users SET rpoints = %d WHERE userid = %d", rrpoints, alt);
						db_query(Database, large_string);
						printf("[sync] Alt %d has been updated.");
					}
					else break;
				}
				while(db_next_row(Result));
				db_free_result(Result);	
			}	
		}
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}

CMD:givexp(playerid,params[])
{
	if(User[playerid][Useradmin] > 1)
	{
		new name[24],id = -1,xp;
		sscanf(params,"s[24]i",name,xp);
		if(isnull(params))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /givexp [playerid/PartOfName/FullAccount_Name] [experience]");
		if(IsNumeric(name))
		{
			id = strval(name);
		}
		if(id < 0 && isnull(name))
			return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		if(id > -1)
		{
			if(!User[id][Logged]) 
				return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
			new curxp = GetPVarInt(id, "Experience");
			UpdateTrait(id, "Experience", curxp+xp);
			format(large_string, sizeof large_string, "STFCMD: %s gave %s %d experience points. (Previous Experience Points: %d; Current Experience Points: %d)", User[playerid][forumname], User[id][Username], xp, curxp, curxp+xp);
			Staff(ADMIN, large_string);
			new File:pos= fopen("Logs/GiveExperience.log", io_append);
			format(large_string, sizeof large_string,"[%s][%s] %s gave %s %d experience point(s).\r\n",PasteDate(),PasteTime(), User[playerid][Username], User[id][Username], xp);
			fwrite(pos, large_string);
			fclose(pos);
			large_string[0] = EOS;

			SFM(id, GREEN, "Experience:"GR" You have been awarded (%d) Experience Points by %s.", xp, User[playerid][forumname]);
			PlayAudioStreamForPlayer(id, "https://cdn.discordapp.com/attachments/991759556004814928/1002987929393709216/Experience_sound.mp3");	
		}
		else
		{
			format(large_string, 256, "SELECT userid FROM users WHERE username = '%s'", name);
			new DBResult: Result = db_query(Database, large_string);
			if(!db_num_rows(Result))
				return MSG(playerid, GOLD, "ERROR:"GR" Invalid player name specified.");
			new userid = db_get_field_assoc_int(Result, "userid");
			format(large_string, 256, "SELECT 1 FROM sheet WHERE userid = %d AND trait = 'Experience'" , userid);
			Result = db_query(Database, large_string);
			if(!db_num_rows(Result))
			{
				format(large_string,sizeof large_string,"INSERT INTO sheet (userid,trait,value,type) VALUES (%d,'Experience',%d,0)",userid,xp);
				db_query(Database, large_string);		
			}
			else
			{
				format(large_string, sizeof large_string,"UPDATE sheet SET value = value+%d WHERE trait = 'Experience' AND userid = %d", xp, userid);
				db_query(Database, large_string);
			}
			format(large_string, sizeof large_string, "STFCMD: %s gave %s %d experience points.", User[playerid][Username], name, xp);
			Staff(ADMIN, large_string);
			new File:pos= fopen("Logs/GiveExperience.log", io_append);
			format(large_string, sizeof large_string,"[%s][%s] %s gave %s %d experience point(s).\r\n",PasteDate(),PasteTime(), User[playerid][Username], name, xp);
			fwrite(pos, large_string);
			fclose(pos);
			large_string[0] = EOS;

			format(large_string, sizeof large_string, "Experience: You have been awarded (%d) Experience Points by `%s` on `%s`.", xp, User[playerid][forumname], PasteDate());
			InsertOfflineMessage(userid, large_string);			
		}
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}

CMD:ad(playerid, params[]) return cmd_applydamage(playerid, params);
CMD:applydamage(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Death] > 0)
			return MSG(playerid, GOLD, "SERVER:"GR" You are incapacitated. Wait for the timer to die out.");
		new damage[11], hp, amount;
		if(sscanf(params, "s[11]i", damage, amount)) return MSG(playerid, GOLD, "SYNTAX:"GR" /(a)pply(d)amage [bashing[5]/lethal[10]/aggravated[14]] [amount]");
		if(amount < 1 || amount > 25)
			return MSG(playerid, GOLD, "ERROR:"GR" Amount range is from 1 to 25.");
		new bool:proper, damage_type;
		//if(strfind(User[i][Username],name,true) != -1
		if(strfind("bashing",damage, true) != -1)  hp = 5, damage = "bashing",proper = true,damage_type = 2;
		if(strfind("lethal", damage, true) != -1) hp = 10, damage = "lethal", proper = true,damage_type = 3;
		if(strfind("aggravated", damage, true) != -1) hp = 14, damage = "aggravated", proper =true,damage_type = 4;
		if(!proper) return  MSG(playerid, GOLD, "SYNTAX:"GR" /(a)pply(d)amage [bashing[5]/lethal[10]/aggravated[14]] [amount]");
		if(hp) {}
		//SetHealth(playerid, User[playerid][Health]-(hp*amount));
		format(large_string, 124, "* %s has applied %d %s damage.", sendernameEx(playerid), amount, damage);//hp*amount);
		ProxDetector(30.0, playerid, large_string, cRP,cRP,cRP,cRP,cRP);
		RecordRP(playerid, large_string);
		new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);	
		new d_stop = 1,bool:stop_it;
		for(new h = 1; h <= HP[playerid][hMaxLevel]; h++)
		{
			if(d_stop > amount)
			{
				stop_it = true;
				break;
			}
			if(HP[playerid][hLevel][h] == 1)
			{
				if(stop_it == false)
				{
					HP[playerid][hLevel][h] = damage_type;
					d_stop++;
 				}
			}
		}
		large_string[0] = EOS;
		new condition[48],dead;
		for(new g = 1; g <= HP[playerid][hMaxLevel]; g++)
		{
			switch(HP[playerid][hLevel][g])
			{
				case 1: condition = "OK";
				case 2: condition = "/",dead++;
				case 3: condition = "X",dead++;
				case 4: condition = "*",dead++;
			}
			format(large_string, sizeof large_string, "%s`%s` ", large_string, condition);
			print(large_string);
		}
		format(large_string, sizeof large_string, "HEALTH CONDITION:"GR" %s", large_string);
		MSG(playerid, GOLD, large_string);
		//if(User[playerid][Health] < 1) KillPlayer(playerid);

		format(large_string, sizeof large_string,"HEALTH LEVELS: %s", PasteHealthCondition(playerid));
		PlayerTextDrawSetString(playerid, tHLevel[playerid], large_string);
		PlayerTextDrawShow(playerid, tHLevel[playerid]);
		UpdateHealthLevels(playerid);
		if(dead >= HP[playerid][hMaxLevel]) KillPlayer(playerid);
		return 1;
	}
	return 0;
}
stock UpdateHealthLevels(playerid)
{
	//(userid, healthlevel, mark)
	if(User[playerid][Logged])
	{
		for(new i = 1; i <= HP[playerid][hMaxLevel]; i++)
		{
			new query[124];
			format(query, sizeof query, "UPDATE health SET mark = %d WHERE userid = %d AND healthlevel = %d", HP[playerid][hLevel][i], User[playerid][UserID], i);
			db_query(Database, query);
		}
		return 1;
	}
	return 0;
}
stock PasteHealthConditionEx(playerid) // doesn't have color codes 
{
		large_string[0] = EOS;
		new hp_string[400];
		new condition[48],dead;
		for(new g = 1; g <= HP[playerid][hMaxLevel]; g++)
		{
			switch(HP[playerid][hLevel][g])
			{
				case 1: condition = "OK";
				case 2: condition = "/",dead++;
				case 3: condition = "X",dead++;
				case 4: condition = "*",dead++;
			}
			if(g == HP[playerid][hMaxLevel]) format(hp_string, sizeof hp_string, "%s`%s`", hp_string, condition);
			else format(hp_string, sizeof hp_string, "%s`%s` ", hp_string, condition);
		}
		return hp_string;
}
stock PasteHealthCondition(playerid) // with color codes
{
		large_string[0] = EOS;
		new hp_string[400];
		new condition[48],dead;
		for(new g = 1; g <= HP[playerid][hMaxLevel]; g++)
		{
			switch(HP[playerid][hLevel][g])
			{
				case 1: condition = "~g~OK~w~";
				case 2: condition = "/",dead++;
				case 3: condition = "X",dead++;
				case 4: condition = "*",dead++;
			}
			if(g == HP[playerid][hMaxLevel]) format(hp_string, sizeof hp_string, "%s`%s`", hp_string, condition);
			else format(hp_string, sizeof hp_string, "%s`%s` ", hp_string, condition);
		}
		return hp_string;
}
CMD:bruh(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][cmdFlood] > gettime()) return MSG(playerid, GOLD, "Info:"GR" There is a ten seconds interval between each usage.");
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid, x, y, z);
		if(User[playerid][uGender] == 0)
		{
			foreach(Player, i)
			{
				if(IsPlayerInRangeOfPoint(i, 20, x, y, z)) {
					PlayAudioStreamForPlayer(i, "https://cdn.discordapp.com/attachments/991759556004814928/1002328665872416788/bruh.mp3");
					// PlayAudioStreamForPlayer(i, "http://finalnights-rp.com/bruh.mp3");
				}
			}
			User[playerid][cmdFlood] = gettime()+10;	
		}
		User[playerid][cmdFlood] = gettime()+10;
		return 1;
	}
	return 0;
}
CMD:cough(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][cmdFlood] > gettime()) return MSG(playerid, GOLD, "Info:"GR" There is a ten seconds interval between each usage.");
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid, x, y, z);
		if(User[playerid][uGender] == 0)
		{
			foreach(Player, i)
			{
				if(IsPlayerInRangeOfPoint(i, 20, x, y, z))
					// PlayAudioStreamForPlayer(i, "http://finalnights-rp.com/male_cough.mp3");
					PlayAudioStreamForPlayer(i, "https://cdn.discordapp.com/attachments/991759556004814928/1002294547235217438/coughmale.mp3");
			}
			User[playerid][cmdFlood] = gettime()+10;	
		}
		else
		{
			foreach(Player, i)
			{
				if(IsPlayerInRangeOfPoint(i, 20, x, y, z))
					PlayAudioStreamForPlayer(i, "https://cdn.discordapp.com/attachments/991759556004814928/1002328431687647332/femalecough.mp3");
					// PlayAudioStreamForPlayer(i, "http://finalnights-rp.com/female_cough.mp3");
			}
				
		}
		User[playerid][cmdFlood] = gettime()+10;
		return 1;
	}
	return 0;
}
CMD:roar(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][shapeshift] > 1)
		{
			if(User[playerid][cmdFlood] > gettime())
				return MSG(playerid, GOLD, "Info:"GR" There is a ten seconds interval between each usage.");
			new Float:x,
				Float:y,
				Float:z;
			GetPlayerPos(playerid, x, y, z);
			foreach(Player, i)
			{
				if(IsPlayerInRangeOfPoint(i, 20, x, y, z))
					PlayAudioStreamForPlayer(i, "https://cdn.discordapp.com/attachments/991759556004814928/1002294449717649500/werewolf_roar.mp3");
					// PlayAudioStreamForPlayer(i, "http://finalnights-rp.com/roar.mp3");
			}
			User[playerid][cmdFlood] = gettime()+10;	
		}
		else MSG(playerid, GOLD, "ERROR:"GR" You need to be shapeshifted to use this command.");
		return 1;
	}
	return 0;
}
CMD:growl(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][shapeshift] > 1)
		{
			if(User[playerid][cmdFlood] > gettime())
				return MSG(playerid, GOLD, "Info:"GR" There is a ten seconds interval between each usage.");
			new Float:x,
				Float:y,
				Float:z;
			GetPlayerPos(playerid, x, y, z);
			foreach(Player, i)
			{
				if(IsPlayerInRangeOfPoint(i, 20, x, y, z))
					PlayAudioStreamForPlayer(i, "http://finalnights-rp.com/fierce_growl.mp3");
			}
			User[playerid][cmdFlood] = gettime()+10;	
		}
		else MSG(playerid, GOLD, "ERROR:"GR" You need to be shapeshifted to use this command.");
		return 1;
	}
	return 0;
}
CMD:snarl(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][shapeshift] > 1)
		{
			if(User[playerid][cmdFlood] > gettime())
				return MSG(playerid, GOLD, "Info:"GR" There is a ten seconds interval between each usage.");
			new Float:x,
				Float:y,
				Float:z;
			GetPlayerPos(playerid, x, y, z);
			foreach(Player, i)
			{
				if(IsPlayerInRangeOfPoint(i, 20, x, y, z))
					PlayAudioStreamForPlayer(i, "https://cdn.discordapp.com/attachments/991759556004814928/1002294365659607090/ww_snarl.mp3");
					// PlayAudioStreamForPlayer(i, "http://finalnights-rp.com/snarl.mp3");
			}
			User[playerid][cmdFlood] = gettime()+10;	
		}
		else MSG(playerid, GOLD, "ERROR:"GR" You need to be shapeshifted to use this command.");
		return 1;
	}
	return 0;
}
CMD:howl(playerid, params[])
{
    if(User[playerid][Logged])
    {
		if(User[playerid][shapeshift] < 2)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not in an animal form.");
		if(isnull(params))
		{
			SendClientMessage(playerid,GOLD, "SYNTAX:"GR" /howl [action]");
			return 1;
		}
		new string[256];
		format(string, sizeof string,"* [Howl] %s %s", sendernameEx(playerid), params);
		new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
		RecordRP(playerid, string);
		foreach(Player, i) 
		{
			if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, string);
			if(IsPlayerInRangeOfPoint(i, 150, x, y, z))
			{
				PlayAudioStreamForPlayer(i, "https://cdn.discordapp.com/attachments/991759556004814928/1002294723593109625/werewolf_howl.mp3");
				//PlayAudioStreamForPlayer(i, "http://finalnights-rp.com/wolf_howl.mp3");
			}	
		}
		if(strlen(params)<87)
		{
			format(string, sizeof(string), "* %s %s",sendernameEx(playerid), params);
			ProxDetector(150.0, playerid, string,RP,RP,RP,RP,RP);
   		}
		else
		{
			new part[87];
			strmid(part,params,0,86,87);
			format(string, sizeof(string), "* %s %s...",sendernameEx(playerid), part);
			ProxDetector(150.0, playerid, string,RP,RP,RP,RP,RP);
			strmid(part,params,86,128,44);
			format(string, sizeof(string), "* ...%s",part);
			ProxDetector(150.0, playerid, string,RP,RP,RP,RP,RP);
		}
	}
	return 1;
}
CMD:ugn(playerid, params[])
	return cmd_usegnosis(playerid, params);
CMD:ur(playerid, params[])
	return cmd_userage(playerid, params);
CMD:uwp(playerid, params[])
	return cmd_usewillpower(playerid, params);
CMD:usewp(playerid, params[])
	return cmd_usewillpower(playerid, params);
CMD:usewillpower(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new gnosis = GetPVarInt(playerid, "tWillpower");
		new spend = 1;
		if(!isnull(params) && IsNumeric(params))
			spend = strval(params);
		if(gnosis >= spend)
		{
			gnosis -= spend;
			UpdateTrait(playerid, "tWillpower", gnosis);
			format(large_string, 128, "> * %d Willpower Point(s) have been spent. (( %s ))", spend, sendernameEx(playerid));
			AutoMSG(playerid, large_string);
		}
		else return MSG(playerid, GOLD, "ERROR:"GR" You don't have enough temporary Willpower points.");
		return 1;
	}
	return 0;
}
CMD:suwp(playerid, params[])	return cmd_susewillpower(playerid, params);
CMD:susewillpower(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new gnosis = GetPVarInt(playerid, "tWillpower");
		new spend = 1;
		if(!isnull(params) && IsNumeric(params))
			spend = strval(params);
		if(gnosis >= spend)
		{
			gnosis -= spend;
			UpdateTrait(playerid, "tWillpower", gnosis);
			format(large_string, 128, "[S] > * %d Willpower Point(s) have been spent. (( %s ))", spend, sendernameEx(playerid));
			MSG(playerid, cRP, large_string);
			new Float:x, Float: y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);
			RecordRP(playerid, large_string);
		}
		else return MSG(playerid, GOLD, "ERROR:"GR" You don't have enough temporary Willpower points.");
		return 1;
	}
	return 0;
}
CMD:usegnosis(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] != 2)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not a Werewolf.");
		new gnosis = GetPVarInt(playerid, "tGnosis");
		new spend = 1;
		if(!isnull(params) && IsNumeric(params))
			spend = strval(params);
		if(gnosis >= spend)
		{
			gnosis -= spend;
			UpdateTrait(playerid, "tGnosis", gnosis);
			format(large_string, 128, "> * %d Gnosis Point(s) have been spent. (( %s ))", spend, sendernameEx(playerid));
			AutoMSG(playerid, large_string);
		}
		else return MSG(playerid, GOLD, "ERROR:"GR" You don't have enough temporary Gnosis points.");
		return 1;
	}
	return 0;
}
CMD:sugn(playerid, params[]) return cmd_susegnosis(playerid, params);
CMD:susegnosis(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] != 2)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not a Werewolf.");
		new gnosis = GetPVarInt(playerid, "tGnosis");
		new spend = 1;
		if(!isnull(params) && IsNumeric(params))
			spend = strval(params);
		if(gnosis >= spend)
		{
			gnosis -= spend;
			UpdateTrait(playerid, "tGnosis", gnosis);
			format(large_string, 128, "[S] > * %d Gnosis Point(s) have been spent. (( %s ))", spend, sendernameEx(playerid));
			MSG(playerid, cRP, large_string);
			new Float:x, Float: y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);
			RecordRP(playerid, large_string);
		}
		else return MSG(playerid, GOLD, "ERROR:"GR" You don't have enough temporary Gnosis points.");
		return 1;
	}
	return 0;
}
CMD:sur(playerid, params[]) return cmd_suserage(playerid, params);
CMD:suserage(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] != 2)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not a Werewolf.");
		new gnosis = GetPVarInt(playerid, "tRage");
		new spend = 1;
		if(!isnull(params) && IsNumeric(params))
			spend = strval(params);
		if(gnosis >= spend)
		{
			gnosis -= spend;
			UpdateTrait(playerid, "tRage", gnosis);
			format(large_string, 128, "[S] > * %d Rage Point(s) have been spent. (( %s ))", spend, sendernameEx(playerid));
			MSG(playerid, cRP, large_string);
			new Float:x, Float: y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);
			RecordRP(playerid, large_string);
			
		}
		else return MSG(playerid, GOLD, "ERROR:"GR" You don't have enough temporary Rage points.");
		return 1;
	}
	return 0;
}
CMD:userage(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] != 2)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not a Werewolf.");
		new gnosis = GetPVarInt(playerid, "tRage");
		new spend = 1;
		if(!isnull(params) && IsNumeric(params))
			spend = strval(params);
		if(gnosis >= spend)
		{
			gnosis -= spend;
			UpdateTrait(playerid, "tRage", gnosis);
			format(large_string, 128, "> * %d Rage Point(s) have been spent. (( %s ))", spend, sendernameEx(playerid));
			AutoMSG(playerid, large_string);
		}
		else return MSG(playerid, GOLD, "ERROR:"GR" You don't have enough temporary Rage points.");
		return 1;
	}
	return 0;
}
// demon
CMD:usefaithpoint(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] != 5)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not a Demon.");
		new gnosis = GetPVarInt(playerid, "tFaith");
		new spend = 1;
		if(!isnull(params) && IsNumeric(params))
			spend = strval(params);
		if(gnosis >= spend)
		{
			gnosis -= spend;
			UpdateTrait(playerid, "tFaith", gnosis);
			format(large_string, 128, "> * %d Faith Point(s) have been spent. (( %s ))", spend, sendernameEx(playerid));
			AutoMSG(playerid, large_string);
		}
		else return MSG(playerid, GOLD, "ERROR:"GR" You don't have enough temporary Faith points.");
		return 1;
	}
	return 0;
}
CMD:susefaithpoint(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] != 5)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not a Demon.");
		new gnosis = GetPVarInt(playerid, "tFaith");
		new spend = 1;
		if(!isnull(params) && IsNumeric(params))
			spend = strval(params);
		if(gnosis >= spend)
		{
			gnosis -= spend;
			UpdateTrait(playerid, "tFaith", gnosis);
			format(large_string, 128, "[S] > * %d Faith Point(s) have been spent. (( %s ))", spend, sendernameEx(playerid));
			MSG(playerid, cRP, large_string);
			new Float:x, Float: y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);
			RecordRP(playerid, large_string);
		}
		else return MSG(playerid, GOLD, "ERROR:"GR" You don't have enough temporary Faith points.");
		return 1;
	}
	return 0;
}
CMD:ufp(playerid, params[]) return cmd_usefaithpoint(playerid, params);
CMD:sufp(playerid, params[]) return cmd_susefaithpoint(playerid, params);
// Changeling commands
CMD:sugp(playerid, params[]) return cmd_suseglamourpoint(playerid, params);
CMD:suseglamourpoint(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] != 6)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not a Changeling.");
		new gnosis = GetPVarInt(playerid, "tGlamour");
		new spend = 1;
		if(!isnull(params) && IsNumeric(params))
			spend = strval(params);
		if(gnosis >= spend)
		{
			gnosis -= spend;
			UpdateTrait(playerid, "tGlamour", gnosis);
			format(large_string, 128, "[S] > * %d Glamour Point(s) have been spent. (( %s ))", spend, sendernameEx(playerid));
			MSG(playerid, cRP, large_string);
			new Float:x, Float: y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);
			RecordRP(playerid, large_string);
			
		}
		else return MSG(playerid, GOLD, "ERROR:"GR" You don't have enough temporary Glamour points.");
		return 1;
	}
	return 0;
}
CMD:ugp(playerid, params[]) return cmd_useglamourpoint(playerid, params);
CMD:useglamourpoint(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] != 6)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not a Changeling.");
		new gnosis = GetPVarInt(playerid, "tGlamour");
		new spend = 1;
		if(!isnull(params) && IsNumeric(params))
			spend = strval(params);
		if(gnosis >= spend)
		{
			gnosis -= spend;
			UpdateTrait(playerid, "tGlamour", gnosis);
			format(large_string, 128, "> * %d Glamour Point(s) have been spent. (( %s ))", spend, sendernameEx(playerid));
			AutoMSG(playerid, large_string);
		}
		else return MSG(playerid, GOLD, "ERROR:"GR" You don't have enough temporary Glamour points.");
		return 1;
	}
	return 0;
}
CMD:ua(playerid, params[]) return cmd_useart(playerid, params);
CMD:useart(playerid, params[])
{
	if(User[playerid][Userrace] != 6)
		return MSG(playerid,GOLD,"ERROR:"GR" You are not a Changeling.");
	new discipline[24],
		rank = 1,
		powername[24];
	sscanf(params,"s[24]is[24]",discipline,rank,powername);
	if(isnull(discipline)) return MSG(playerid,GOLD,"SYNYTAX:"GR" /(u)se(a)rt [art (i.e: autumn)] [rank] [powername(optional)]");
	if(rank < 1) return MSG(playerid,GOLD,"SYNYTAX:"GR" /(u)se(a)rt [art (i.e: autumn)] [rank] [powername(optional)]");
	new bool:found = false;
	for(new i = 0; i < sizeof(rArts); i++)
	{
		//if(!strcmp(discipline, rLores[i], true))
		//strfind(const string[], const sub[], bool:ignorecase=false, pos=0)
		if(strfind(rArts[i], discipline, true) != -1)
		{
			new value = GetPVarInt(playerid, rArts[i]);
			if(value < 1)
			{
				MSG(playerid,GOLD,"ERROR:"GR" You don't have any dots in the specified Art.");
				found = true;
				break;
			}
			if(value < rank)
				return MSG(playerid,GOLD,"ERROR:"GR" You don't have the specified dot in the Art.");
			//discipline[0] = toupper(discipline[0]);
			if(isnull(powername))
				format(large_string, 124,"> * %s has used %s %d.",sendernameEx(playerid), rArts[i], rank); // --> problem is here? maybe
			else
			{
				format(large_string, 124,"> * %s has used %s %d: %s",sendernameEx(playerid), rArts[i], rank, powername); // --> problem is here? maybe	
			}
			new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
			foreach(Player, b) { // Recording XP and playing Sound
				if(IsPlayerInRangeOfPoint(b, 30, x, y, z)) {
					if(User[b][xprecord] == 1) {
							RecordPlayer(User[b][UserID], large_string);
					}
					PlayAudioStreamForPlayer(b, "https://cdn.discordapp.com/attachments/991759556004814928/1021439596015386624/changelingarts.mp3");
				}
			}	
			AutoMSG(playerid, large_string);
			found = true;
			//if(!strcmp(discipline, "Life", true))
			if(strfind(rArts[i], "metamorphosis", true) != -1)
			{
				if(rank == 3 || rank == 4)
				{
					if(GetPVarInt(playerid, "p_AssumeForm") == 2) return RemoveForm(playerid);
					SetPVarInt(playerid, "p_AssumeForm", 2);
					AssumeForm(playerid);
				}
				if(rank == 5)
				{
					if(GetPVarInt(playerid, "p_AssumeForm") == 1) return RemoveForm(playerid);
					Dialog_Show(playerid, dVictim, DIALOG_STYLE_INPUT, "Transformation / Shapechanging","Insert the target's playerid or part of their name.", "Proceed", "Cancel");
				}
			}
			break;			
		}
	}
	if(!found) return MSG(playerid,GOLD,"ERROR:"GR" Invalid Art specified.");
	return 1; 
}
//
CMD:uc(playerid, params[]) return cmd_useconviction(playerid, params);
CMD:useconviction(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] != 4)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not a Hunter.");
		new gnosis = GetPVarInt(playerid, "tConviction");
		new spend = 1;
		if(!isnull(params) && IsNumeric(params)) spend = strval(params);
		if(gnosis >= spend)
		{
			gnosis -= spend;
			UpdateTrait(playerid, "tConviction", gnosis);
			format(large_string, 128, "> * %d Conviction Point(s) have been spent. (( %s ))", spend, sendernameEx(playerid));
			AutoMSG(playerid, large_string);
		}
		else return MSG(playerid, GOLD, "ERROR:"GR" You don't have enough Conviction points.");
		return 1;
	}
	return 0;
}
//
CMD:uq(playerid, params[])	return cmd_usequintessence(playerid, params);
CMD:usequintessence(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] != 3)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not a Mage.");
		new gnosis = GetPVarInt(playerid, "Quintessence");
		new spend = 1;
		if(!isnull(params) && IsNumeric(params))
			spend = strval(params);
		if(gnosis >= spend)
		{
			gnosis -= spend;
			UpdateTrait(playerid, "Quintessence", gnosis);
			format(large_string, 128, "> * %d Quintessence Point(s) have been spent. (( %s ))", spend, sendernameEx(playerid));
			AutoMSG(playerid, large_string);
		}
		else return MSG(playerid, GOLD, "ERROR:"GR" You don't have enough Quintessence points.");
		return 1;
	}
	return 0;
}
CMD:paradox(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] != 3)
			return MSG(playerid, GOLD, "ERROR:"GR" You are not a Mage.");
		new option[7], amount;
		if(sscanf(params, "s[7]i", option, amount))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /paradox [add/remove] [amount]");
		if(amount > 30 || amount < 1) return MSG(playerid, GOLD, "ERROR:"GR" Invalid amount.");
		if(strfind("add", option, true) != -1)
		{
			UpdateTrait(playerid, "Paradox", GetPVarInt(playerid, "Paradox")+amount);
			format(large_string, 128, "* %s has added %d Paradox points.", sendernameEx(playerid), amount);
			AutoMSG(playerid, large_string, 1);
		}
		if(strfind("remove", option, true) != -1)
		{
			new paradox = GetPVarInt(playerid, "Paradox");
			if(paradox < 1) return MSG(playerid, GOLD, "Info:"GR" You don't have any Paradox points to remove.");
			if(paradox-amount < 0) return MSG(playerid, GOLD, "ERROR:"GR" You cannot remove more Paradox than you have.");
			UpdateTrait(playerid, "Paradox", GetPVarInt(playerid, "Paradox")-amount);
			format(large_string, 128, "* %s has removed %d Paradox points.", sendernameEx(playerid), amount);
			AutoMSG(playerid, large_string, 1);
		}
		return 1;
	}
	return 0;
}

CMD:sub(playerid, params[]) return cmd_suseblood(playerid, params);
CMD:suseblood(playerid, params[])
{
	if(User[playerid][Userrace] == 0 || User[playerid][Userrace] == 1)
	{
		new blood = GetPVarInt(playerid, "BloodPool");
		if(blood == 0) return MSG(playerid,GOLD,"ERROR:"GR" You have no blood to expend.");
		new reason[48],amount;
		sscanf(params, "is[48]", amount, reason);
		if(amount < 0 || amount == 0) return MSG(playerid,GOLD,"SYNTAX:"GR" /usebloodpoint [amount] [optional:reason]");
		if(blood < amount) return MSG(playerid,GOLD,"ERROR:"GR" You don't have enough blood points to spend.");
		if(isnull(reason)) format(large_string, 128, "> * %s has used %d blood points.", User[playerid][pUsername], amount);
		else format(large_string, 128, "> * %s has used %d blood points; Reason: %s", User[playerid][pUsername], amount, reason);
		MSG(playerid, cRP, large_string);
		format(large_string, 128, "[S] > * %s has used %d blood points; Reason: %s", User[playerid][pUsername], amount, reason);
		new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);		
		UpdateTrait(playerid, "BloodPool" , blood - amount);
		
		if(!strcmp(reason, "healing", true))
		{
			Dialog_Show(playerid,dBloodHeal,DIALOG_STYLE_INPUT,"Healing","Insert the ID of the player you wish to heal:","Heal","Close");
			SetPVarInt(playerid, "hBloodSpent", amount);
			return 1;
		}
		RecordRP(playerid, large_string);
		return 1;
	}
	return 0;
}
stock GetMaxBPTurn(playerid)
{
	new gen = GetPVarInt(playerid, "vGeneration");
	if(gen >= 10) return 1;
	switch(gen)
	{
		case 9: return 2;
		case 8: return 3;
		case 7: return 4;
		case 6: return 6;
		case 5: return 8;
		case 4: return 10;
		case 3: return 100;
	}
	return 1;	
}
stock GetMaxTraitRating(playerid)
{
	switch(GetPVarInt(playerid, "vGeneration"))
	{
		case 15,14,13,12,11,10,9,8: return 5;
		case 7: return 6;
		case 6: return 7;
		case 5: return 8;
		case 4: return 9;
		case 3: return 10;
	}
	return 5;
}
new Strength_BuffTimer[MAX_PLAYERS];
new Dexterity_BuffTimer[MAX_PLAYERS];
new Stamina_BuffTimer[MAX_PLAYERS];
CMD:dispel(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] != 1) 
			return MSG(playerid, GOLD, "ERROR:"GR" You are not a Vampire.");
		if(isnull(params))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /dispel [strength/dexterity/stamina/all]");

		if(strfind("strength", params, true) != -1)
		{
			RemoveTrait(playerid, "bStrength");
			MSG(playerid, WHITE, "SERVER: Your Strength blood buff has been dispelled.");
			return 1;
		}
		else if(strfind("stamina", params, true) != -1)
		{
			RemoveTrait(playerid, "bStamina");
			MSG(playerid, WHITE, "SERVER: Your Stamina blood buff has been dispelled.");
			return 1;
		}
		else if(strfind("dexterity", params, true) != -1)
		{
			RemoveTrait(playerid, "bDexterity");
			MSG(playerid, WHITE, "SERVER: Your Dexterity blood buff has been dispelled.");
			return 1;
		}
		else if(strfind("all", params, true) != -1)
		{
			RemoveTrait(playerid, "bDexterity");
			RemoveTrait(playerid, "bStamina");
			RemoveTrait(playerid, "bStrength");
			MSG(playerid, WHITE, "SERVER: Your blood buffs have been dispelled.");
			return 1;
		}
		return MSG(playerid, GOLD, "ERROR:"GR" Invalid parameter specified.");
	}
	return 0;
}
CMD:ubp(playerid, params[]) return cmd_useblood(playerid, params);
CMD:useblood(playerid, params[])
{
	if(User[playerid][Userrace] == 0 || User[playerid][Userrace] == 1)
	{
		new blood = GetPVarInt(playerid, "BloodPool");
		if(blood == 0) return MSG(playerid,GOLD,"ERROR:"GR" You have no blood to expend.");
		new reason[48],amount, target;
		sscanf(params, "is[48]", amount, reason);
		if(amount < 0 || amount == 0) return MSG(playerid,GOLD,"SYNTAX:"GR" /usebloodpoint [amount] [optional:reason/playerid (to transfer)]");
		if(blood < amount) return MSG(playerid,GOLD,"ERROR:"GR" You don't have enough blood points to spend.");
		if(amount > GetMaxBPTurn(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" Specified amount exceeds your blood expenditure limit.");
		if(isnull(reason)) format(large_string, 128, "> * %s has used %d blood points.", User[playerid][pUsername], amount);
		else
		{
			if(IsNumeric(reason))
			{
				target = strval(reason);
				new Float:x, 
					Float:y,
					Float:z;
				if(target == playerid)
					return MSG(playerid, GOLD, "ERROR:"GR" You cannot transfer blood points to yourself.");
				GetPlayerPos(playerid, x, y, z);
				if(!IsPlayerInRangeOfPoint(target, 3, x, y, z)) return MSG(playerid, GOLD, "ERROR:"GR" You are not in range of the specified player to transfer blood.");
				format(large_string, 128, "> * %s has transferred %d blood points to %s.", sendername(playerid), amount, sendernameEx(target));
				ProxDetector(30.0, playerid, large_string, cRP,cRP,cRP,cRP,cRP);
				new target_blood = GetPVarInt(target, "BloodPool"),
				maxb = GetMaxBloodPool(target);
				if(target_blood >= maxb) return MSG(playerid, GOLD, "Info:"GR" Specified player's Blood Pool is full.");
				if(target_blood+amount > maxb) UpdateTrait(target, "BloodPool", maxb);
				else UpdateTrait(target, "BloodPool", target_blood+amount);
				UpdateTrait(playerid, "BloodPool" , blood - amount);
				foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);	
				RecordRP(playerid, large_string);	
				return 1;
			}
			else
				format(large_string, 128, "> * %s has used %d blood points; Reason: %s", User[playerid][pUsername], amount, reason);
		}
		ProxDetector(30.0, playerid, large_string, cRP,cRP,cRP,cRP,cRP);
		new Float:x,Float:y,Float:z; 
		GetPlayerPos(playerid, x, y, z);	
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);		
		UpdateTrait(playerid, "BloodPool" , blood - amount);
		
		if(!strcmp(reason, "healing", true) && !isnull(reason))
		{
			Dialog_Show(playerid,dBloodHeal,DIALOG_STYLE_INPUT,"Healing","Insert the ID of the player you wish to heal:","Heal","Close");
			SetPVarInt(playerid, "hBloodSpent", amount);
			return 1;
		}
		if(!strcmp(reason, "Dexterity", true) && !isnull(reason))
		{
			new bdex = GetPVarInt(playerid, "bDexterity");
			if(bdex+amount >= 10) UpdateTrait(playerid, "bDexterity", 10-GetPVarInt(playerid, "Dexterity"));
			else 
				UpdateTrait(playerid, "bDexterity", bdex+amount);
			new pos[MAX_TRAIT_NAME];
			format(pos, sizeof pos, "%f,%f,%f", x, y, z);
			RemoveTrait(playerid, "BuffPos");
			RemoveTrait(playerid, "BuffVW");
			UpdateTraitString(playerid, "BuffPos", pos);
			UpdateTrait(playerid, "BuffVW", GetPlayerVirtualWorld(playerid));
		}
		if(!strcmp(reason, "Stamina", true) && !isnull(reason))
		{
			new bstam = GetPVarInt(playerid, "bStamina");
			UpdateTrait(playerid, "bStamina", bstam+amount);
			if(bstam+amount >= 10) UpdateTrait(playerid, "bStamina", 10-GetPVarInt(playerid, "Stamina"));
			else 
				UpdateTrait(playerid, "bStamina", bstam+amount);
			new pos[MAX_TRAIT_NAME];
			format(pos, sizeof pos, "%f,%f,%f", x, y, z);
			RemoveTrait(playerid, "BuffPos");
			RemoveTrait(playerid, "BuffVW");
			UpdateTraitString(playerid, "BuffPos", pos);
			UpdateTrait(playerid, "BuffVW", GetPlayerVirtualWorld(playerid));
		}
		if(!strcmp(reason, "Strength", true) && !isnull(reason))
		{
			new bstr = GetPVarInt(playerid, "bStrength");
			
			if(bstr+amount >= 10) UpdateTrait(playerid, "bStrength", 10-GetPVarInt(playerid, "Strength"));
			else 
				UpdateTrait(playerid, "bStrength", bstr+amount);
			new pos[MAX_TRAIT_NAME];
			format(pos, sizeof pos, "%f,%f,%f", x, y, z);
			RemoveTrait(playerid, "BuffPos");
			RemoveTrait(playerid, "BuffVW");
			UpdateTraitString(playerid, "BuffPos", pos);
			UpdateTrait(playerid, "BuffVW", GetPlayerVirtualWorld(playerid));
		}
		new str = GetPVarInt(playerid, "Strength")+GetPVarInt(playerid, "bStrength");
		new dex = GetPVarInt(playerid, "Dexterity")+GetPVarInt(playerid, "bDexterity");
		new stam = GetPVarInt(playerid, "Stamina")+GetPVarInt(playerid, "bStamina");
		new maxtrait = GetMaxTraitRating(playerid)+1;		
		if(str > maxtrait)
		{
			KillTimer(Strength_BuffTimer[playerid]);
			Strength_BuffTimer[playerid] = SetTimerEx("RemoveStrengthBuff", 24*100000, 0, "dd" ,playerid); 
			return 1;
		}
		if(dex > maxtrait)
		{
			SetTimerEx("RemoveDexBuff", 24*100000, 0, "dd" ,playerid); 
			KillTimer(Dexterity_BuffTimer[playerid]);
			return 1;
		}
		if(stam > maxtrait)
		{
			SetTimerEx("RemoveStamBuff", 24*100000, 0, "dd" ,playerid); 
			KillTimer(Stamina_BuffTimer[playerid]);
			return 1;
		}
		RecordRP(playerid, large_string);
		return 1;
	}
	return 0;
}


forward RemoveStrengthBuff(playerid);
forward RemoveDexBuff(playerid);
forward RemoveStamBuff(playerid);
public RemoveStrengthBuff(playerid)
{
	if(User[playerid][Logged])
	{
		RemoveTrait(playerid, "bStrength");
		MSG(playerid, GOLD,"Info:"GR" Your Strength blood buff has dissipated.");
		KillTimer(Strength_BuffTimer[playerid]);
		return 1;
	}
	return 0;
}
public RemoveDexBuff(playerid)
{
	if(User[playerid][Logged])
	{
		RemoveTrait(playerid, "bDexterity");
		MSG(playerid, GOLD,"Info:"GR" Your Dexterity blood buff has dissipated.");
		KillTimer(Dexterity_BuffTimer[playerid]);
		return 1;
	}
	return 0;
}
public RemoveStamBuff(playerid)
{
	if(User[playerid][Logged])
	{
		RemoveTrait(playerid, "bStamina");
		MSG(playerid, GOLD,"Info:"GR" Your Stamina blood buff has dissipated.");
		KillTimer(Stamina_BuffTimer[playerid]);
		return 1;
	}
	return 0;
}
Dialog:dBloodHeal(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
			return Dialog_Show(playerid,dBloodHeal,DIALOG_STYLE_INPUT,"Healing","Insert the ID of the player you wish to heal:","Heal","Close");
		
		new id = strval(inputtext);
		if(User[id][Logged] == false)
			return MSG(playerid, GOLD, "ERROR:"GR" Specified player is not logged on.");
		new Float: x, Float: y, Float:z;
		GetPlayerPos(id, x, y, z);
		if(!IsPlayerInRangeOfPoint(playerid, 4, x, y, z))
			return MSG(playerid, GOLD, "ERROR:"GR" The specified player is not nearby.");
		new bool:found;
		new blood = GetPVarInt(playerid, "hBloodSpent"),
			bcount;
		for(new i = 1; i <= HP[id][hMaxLevel]; i++)
		{
			if(HP[id][hLevel][i] == 2)
			{
				if(blood > 0)
				{
					HP[id][hLevel][i] = 1;
					blood--;
					bcount++;
					found = true;
				}
			}
			else if(HP[id][hLevel][i] == 3)
			{
				if(blood > 0)
				{
					HP[id][hLevel][i] = 1;
					blood--;
					bcount++;
					found = true;
				}
			}
		}
		if(!found) return MSG(playerid, GOLD, "ERROR:"GR" Specified player doesn't have any bashing or lethal damage to be healed.");
		blood = GetPVarInt(playerid, "hBloodSpent");
		format(large_string, sizeof large_string, "* %s has healed %s with %d blood points (%d Health Levels were healed).", sendernameEx(playerid), sendernameEx(id), blood, bcount);
		AutoMSG(playerid, large_string);
		gIncreaseHP(id, blood*10);
		format(large_string, 10, "~g~+%d HP", blood*10);
		GameTextForPlayer(id, large_string, 2500, 1);
		DeletePVar(playerid, "hBloodSpent");
		format(large_string, sizeof large_string,"HEALTH LEVELS: %s", PasteHealthCondition(id));
		PlayerTextDrawSetString(id, tHLevel[id], large_string);
		UpdateHealthLevels(id);
	}
	return 1;
}
Dialog:dLupusSelect(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new model;
		switch(listitem)
		{
			case 0: model = 21003;
			case 1: model = 21004;
			case 2: model = 21005;
			case 3: model = 21006;
			case 4: model = 21007;
		}
		/*AddCharModel(0, 21003, lupus.dff, lupus_arcticwhite.txd);
		AddCharModel(0, 21004, lupus.dff, lupus_black.txd);
		AddCharModel(0, 21005, lupus.dff, lupus_darkgrey.txd);
		AddCharModel(0, 21006, lupus.dff, lupus_lightbrown.txd);
		AddCharModel(0, 21007, lupus.dff, lupus_timber.txd);*/
		ShowIt(playerid, model);
		Dialog_Show(playerid, dLupusConfirm, DIALOG_STYLE_MSGBOX, "Form Selection Confirmation", "Are you sure you wish to select this form?", "Yes", "Back");
		SetPVarInt(playerid, "bplayer_LupusSkin", model);
		return 1;
	}
	MSG(playerid, GOLD, "ERROR:"GR" Please select your Lupus form!");
	return Dialog_Show(playerid,dLupusSelect,DIALOG_STYLE_LIST,"Form Selection (Lupus)","Arctic White Model\nBlack Model\nDark Grey Model\nTimber Model\nGrey Model","Select","");
}
Dialog:dLupusConfirm(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		UpdateTrait(playerid, "player_LupusSkin", GetPVarInt(playerid, "bplayer_LupusSkin"), 9);
		DeletePVar(playerid, "bplayer_LupusSkin");
		MSG(playerid, GOLD, "Info:"GR" Lupus form selected. Proceed to select a Hispo form.");
		Dialog_Show(playerid,dHispoSelect,DIALOG_STYLE_LIST,"Form Selection (Hispo)","Dark Brown Model\nDesert Brown Model\nForest Brown Model\nArctic White Model\nLight Grey Model","Select","");
		User[playerid][gVar] = -10000;
		PlayerTextDrawHide(playerid,ShowSkin[playerid]);
		TextDrawHideForPlayer(playerid, ShowFrame);
		return 1;
	}
	PlayerTextDrawHide(playerid,ShowSkin[playerid]);
	TextDrawHideForPlayer(playerid, ShowFrame);
	User[playerid][gVar] = -10000;
	return Dialog_Show(playerid,dLupusSelect,DIALOG_STYLE_LIST,"Form Selection (Lupus)","Arctic White Model\nBlack Model\nDark Grey Model\nTimber Model\nGrey Model","Select","");
}
Dialog:dHispoSelect(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new model;
		switch(listitem)
		{	
			case 0: model = 21008;
			case 1: model = 21009;
			case 2: model = 21010;
			case 3: model = 21011;
			case 4: model = 21012;
			case 5: model = 21013;
		}
		ShowIt(playerid, model);
		Dialog_Show(playerid, dHispoConfirm, DIALOG_STYLE_MSGBOX, "Form Selection Confirmation", "Are you sure you wish to select this form?", "Yes", "Back");
		SetPVarInt(playerid, "bplayer_HispoSkin", model);
		return 1;
	}
	PlayerTextDrawHide(playerid,ShowSkin[playerid]);
	TextDrawHideForPlayer(playerid, ShowFrame);
	User[playerid][gVar] = -10000;
	MSG(playerid, GOLD, "ERROR:"GR" Please select your Hispo form!");
	return Dialog_Show(playerid,dHispoSelect,DIALOG_STYLE_LIST,"Form Selection (Hispo)","Dark Brown Model\nDesert Brown Model\nForest Brown Model\nArctic White Model\nLight Grey Model","Select","");
}
Dialog:dHispoConfirm(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		UpdateTrait(playerid, "player_HispoSkin", GetPVarInt(playerid, "bplayer_HispoSkin"), 9);
		DeletePVar(playerid, "bplayer_HispoSkin");
		MSG(playerid, GOLD, "Info:"GR" Hispo form selected. Proceed to select a Crinos form.");
		PlayerTextDrawHide(playerid,ShowSkin[playerid]);
		TextDrawHideForPlayer(playerid, ShowFrame);
		User[playerid][gVar] = -10000;
		Dialog_Show(playerid,dCrinosSelect,DIALOG_STYLE_LIST,"Form Selection (Crinos)","Brown Model\nDark Grey Model\nLight Grey Model\nNavy Model\nWhite Model","Select","");
		return 1;
	}
	User[playerid][gVar] = -10000;
	PlayerTextDrawHide(playerid,ShowSkin[playerid]);
	TextDrawHideForPlayer(playerid, ShowFrame);
	return Dialog_Show(playerid,dHispoSelect,DIALOG_STYLE_LIST,"Form Selection (Hispo)","Dark Brown Model\nDesert Brown Model\nForest Brown Model\nArctic White Model\nLight Grey Model","Select","");
}
Dialog:dCrinosSelect(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new model;
		switch(listitem)
		{
			case 0: model = 21014;
			case 1: model = 21015;
			case 2: model = 21016;
			case 3: model = 21017;
			case 4: model = 21018;
		}
		ShowIt(playerid, model);
		Dialog_Show(playerid, dCrinosConfirm, DIALOG_STYLE_MSGBOX, "Form Selection Confirmation", "Are you sure you wish to select this form?", "Yes", "Back");
		SetPVarInt(playerid, "bplayer_CrinosSkin", model);
		return 1;
	}
	MSG(playerid, GOLD, "ERROR:"GR" Please select your Crinos form!");
	User[playerid][gVar] = -10000;
	PlayerTextDrawHide(playerid,ShowSkin[playerid]);
	TextDrawHideForPlayer(playerid, ShowFrame);
	return Dialog_Show(playerid,dCrinosSelect,DIALOG_STYLE_LIST,"Form Selection (Crinos)","Brown Model\nDark Grey Model\nLight Grey Model\nNavy Model\nWhite Model","Select","");
}
Dialog:dCrinosConfirm(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		UpdateTrait(playerid, "player_CrinosSkin", GetPVarInt(playerid, "bplayer_CrinosSkin"), 9);
		DeletePVar(playerid, "bplayer_CrinosSkin");
		MSG(playerid, GOLD, "Info:"GR" Crinos form selected. Process finalized.");
		PlayerTextDrawHide(playerid,ShowSkin[playerid]);
		TextDrawHideForPlayer(playerid, ShowFrame);
		User[playerid][gVar] = -10000;
		return 1;
	}
	User[playerid][gVar] = -10000;
	PlayerTextDrawHide(playerid,ShowSkin[playerid]);
	TextDrawHideForPlayer(playerid, ShowFrame);	
	return Dialog_Show(playerid,dCrinosSelect,DIALOG_STYLE_LIST,"Form Selection (Crinos)","Brown Model\nDark Grey Model\nLight Grey Model\nNavy Model\nWhite Model","Select","");
}
CMD:shapeshift(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] == 5) // apoc form
		{
			new ptag[MAX_PLAYER_NAME*2],
				pvisage[MAX_TRAIT_NAME];
			new shifted = GetPVarInt(playerid, "pDemon_Shifted");
			if(shifted == 0)
			{
				GetPVarString(playerid, "Visage", pvisage, MAX_TRAIT_NAME);
				format(ptag, sizeof ptag, ""MAR"Apocalyptic Form (%s)\n%s", pvisage, sendernameEx(playerid));
				UpdateDynamic3DTextLabelText(User[playerid][UserTag],SOLIDWHITE,ptag);
				new donatr;
				if(!isnull(User[playerid][donator])) donatr = 3;
				for(new i = MAX_ATTACHMENTS+donatr; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
				    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						format(large_string, sizeof large_string,"SELECT 1 FROM advantages WHERE userid = %d AND item = 'Wings'", User[playerid][UserID]);
						new DBResult: Result = db_query(Database, large_string);
						if(db_num_rows(Result))
						{
							SetPlayerAttachedObject(playerid, i, -1001, 1, WingX, WingY, WingZ, WingRX, WingRY, WingRZ, WingSX,  WingSY, WingSZ);
							db_free_result(Result);
							UpdateTrait(playerid, "pDemon_Shifted", 2, 9);
							UpdateTrait(playerid, "WingIndex", i, 9);
						}
						else UpdateTrait(playerid, "pDemon_Shifted", 1, 9);
						cmd_me(playerid, "shapeshifts to their apocalyptic form.");
					    break;
					}
				}
				//[db_log_queries]: UPDATE attachments SET equip = 1,aindex = 0,boneid = 1,model = 19518,x = '-0.082999',y = '-0.249000',z = '0.094000',rx = '-7.799993',ry = '-5.300006',rz = '13.500019',sx = '3.122003',sy = '1.000000',sz = '0.426000' WHERE userid = 25 AND aindex = 0
			}
			else
			{
				RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "WingIndex"));
				RemoveTrait(playerid, "pDemon_Shifted");
				RemoveTrait(playerid, "WingIndex");
				cmd_me(playerid, "shapeshifts to their mortal form.");
				UpdateDynamic3DTextLabelText(User[playerid][UserTag],SOLIDWHITE,User[playerid][pUsername]);
			}
			return 1;
		}
		if(User[playerid][Userrace] != 2) return MSG(playerid,GOLD,"ERROR:"GR" You are not a Werewolf.");
		if(GetPVarInt(playerid, "player_CrinosSkin") == 0 || GetPVarInt(playerid, "player_HispoSkin") == 0 || GetPVarInt(playerid, "player_LupusSkin") == 0)
		{
			RemoveTrait(playerid, "player_CrinosSkin");
			RemoveTrait(playerid, "player_HispoSkin");
			RemoveTrait(playerid, "player_LupusSkin");
			MSG(playerid, GOLD, "SERVER:"GR" Form selection dialog prompted. Click on the form to display it, then confirm to select it.");
			return Dialog_Show(playerid,dLupusSelect,DIALOG_STYLE_LIST,"Form Selection (Lupus)","Arctic White Model\nBlack Model\nDark Grey Model\nTimber Model\nGrey Model","Select","");
		}
		if(isnull(params)) return MSG(playerid, GOLD, "SYNTAX:"GR" /shapeshift [homid/glabro/crinos/hispo/lupus]");
		if(User[playerid][shapeshift] > 0)
		{
			print("Resetting....");
			UpdateTrait(playerid, "Strength" , GetPVarInt(playerid, "backup_Strength"));
			UpdateTrait(playerid, "Stamina" , GetPVarInt(playerid, "backup_Stamina"));
			UpdateTrait(playerid, "Manipulation" , GetPVarInt(playerid, "backup_Manipulation"));
			UpdateTrait(playerid, "Appearance" , GetPVarInt(playerid, "backup_Appearance"));
			UpdateTrait(playerid, "Dexterity" , GetPVarInt(playerid, "backup_Dexterity"));	
			print("Resetted.");
		}
		new strength = GetPVarInt(playerid, "Strength");
		new stamina = GetPVarInt(playerid, "Stamina");
		new manipulation = GetPVarInt(playerid, "Manipulation");
		new appearance = GetPVarInt(playerid, "Appearance");
		new dexterity = GetPVarInt(playerid, "Dexterity"); 
		if(!strcmp(params, "homid", true))
		{
			if(User[playerid][shapeshift] == 0)
				return MSG(playerid, GOLD, "ERROR:"GR" You are in Homid form.");
			SetPlayerSkin(playerid, User[playerid][uSkin]);
			ClearAnimations(playerid);
			User[playerid][shapeshift] = 0;
			UpdateDynamic3DTextLabelText(User[playerid][UserTag],SOLIDWHITE,User[playerid][pUsername]);
			cmd_me(playerid, "shapeshifts to their Homid form.");
			MSG(playerid,GOLD,"Statistics Adjustment:"GR" None (Size: 5'6 1/2 tall, 100-250 lbs)");
			UpdateTrait(playerid, "Strength", GetPVarInt(playerid, "backup_Strength"));
			UpdateTrait(playerid, "Stamina", GetPVarInt(playerid, "backup_Stamina"));
			UpdateTrait(playerid, "Manipulation", GetPVarInt(playerid, "backup_Manipulation"));
			UpdateTrait(playerid, "Appearance", GetPVarInt(playerid, "backup_Appearance"));
			UpdateTrait(playerid, "Dexterity", GetPVarInt(playerid, "backup_Dexterity"));	
			for(new i = 0; i < 9; i++)
			{
				if(!IsPlayerAttachedObjectSlotUsed(playerid, i) && User[playerid][pindex][i] == true)
				{
					if(ao[playerid][i][ao_model] < 1) continue;
					SetPlayerAttachedObject(playerid, i, ao[playerid][i][ao_model], ao[playerid][i][ao_bone],ao[playerid][i][ao_x], ao[playerid][i][ao_y], ao[playerid][i][ao_z], ao[playerid][i][ao_rx], ao[playerid][i][ao_ry],ao[playerid][i][ao_rz], ao[playerid][i][ao_sx], ao[playerid][i][ao_sy], ao[playerid][i][ao_sz],ao[playerid][i][ao_color]);
					User[playerid][pindex][i] = false;
				}
			}	
			return 1;		
		}
		if(!strcmp(params, "glabro", true))
		{
			if(User[playerid][shapeshift] == 1)
				return MSG(playerid, GOLD, "ERROR:"GR" You are in Glabro form.");
			SetPlayerSkin(playerid, User[playerid][uSkin]);
			ClearAnimations(playerid);
			User[playerid][shapeshift] = 1;
			new name[45];
			new bool:p_glabro = false;
			format(large_string, sizeof large_string,"SELECT 1 FROM advantages WHERE userid = %d AND item = 'Fair Glabro'", User[playerid][SheetMonitorID]);
			new DBResult: Result = db_query(Database, large_string);
			if(!db_num_rows(Result))
			{
				p_glabro = true;
				format(name, sizeof name, "%s ("WR"Glabro"W")", User[playerid][pUsername]);
				UpdateDynamic3DTextLabelText(User[playerid][UserTag],SOLIDWHITE, name);	
			}
			cmd_me(playerid, "shapeshifts to their Glabro form.");
			MSG(playerid,GOLD,"Statistics Adjustment:"GR"  Strength +2, Stamina +2, Manipulation -2, Appearance -1  (Size: 5'7 1/2 tall, 200-400 lbs)");
			UpdateTrait(playerid, "Strength", strength+2);
			UpdateTrait(playerid, "Stamina", stamina+2);
			if(p_glabro == true)
			{
				UpdateTrait(playerid, "Manipulation", manipulation-2);
				UpdateTrait(playerid, "Appearance", appearance-1);	
			}
			SetPVarInt(playerid, "backup_Strength", strength);
			SetPVarInt(playerid, "backup_Stamina", stamina);
			SetPVarInt(playerid, "backup_Dexterity", dexterity);
			SetPVarInt(playerid, "backup_Manipulation", manipulation);
			SetPVarInt(playerid, "backup_Appearance", appearance);		
			return 1;
		}
		if(!strcmp(params, "crinos", true))
		{
			if(User[playerid][shapeshift] == 2)
				return MSG(playerid, GOLD, "ERROR:"GR" You are in Crinos form.");
			if(GetPlayerVehicleID(playerid) > 0)
				return MSG(playerid, GOLD, "ERROR:"GR" You are in a vehicle.");
			SetPlayerSkin(playerid, GetPVarInt(playerid, "player_CrinosSkin"));
			ClearAnimations(playerid);
			User[playerid][shapeshift] = 2;
			new name[35];
			format(name, sizeof name, "Crinos_Wolf_%04d", User[playerid][UserID]);
			UpdateDynamic3DTextLabelText(User[playerid][UserTag],WEREWOLF, name);	
			cmd_me(playerid, "shapeshifts to their Crinos form.");		
			MSG(playerid,GOLD,"Statistics Adjustment:"GR" Strength +4, Dexterity + 1, Stamina +3, Manipulation 0, Appearance 0 (Size: 8'10'' tall, 400-850 lbs)");
			UpdateTrait(playerid, "Strength", strength+4);
			UpdateTrait(playerid, "Dexterity", dexterity+1);
			UpdateTrait(playerid, "Stamina", stamina+3);
			UpdateTrait(playerid, "Manipulation", 0);
			UpdateTrait(playerid, "Appearance", 0);
			SetPVarInt(playerid, "backup_Strength", strength);
			SetPVarInt(playerid, "backup_Stamina", stamina);
			SetPVarInt(playerid, "backup_Dexterity", dexterity);
			SetPVarInt(playerid, "backup_Manipulation", manipulation);
			SetPVarInt(playerid, "backup_Appearance", appearance);
			for(new i = 0; i < 9; i++)
			{
				if(ao[playerid][i][ao_equip] == 1)
				{
					RemovePlayerAttachedObject(playerid, i);
					User[playerid][pindex][i] = true;
				}
			}
			return 1;
		}
		if(!strcmp(params, "hispo", true))
		{
			if(User[playerid][shapeshift] == 3)
				return MSG(playerid, GOLD, "ERROR:"GR" You are in Hispo form.");
			if(GetPlayerVehicleID(playerid) > 0)
				return MSG(playerid, GOLD, "ERROR:"GR" You are in a vehicle.");
			SetPlayerSkin(playerid, GetPVarInt(playerid, "player_HispoSkin"));
			ClearAnimations(playerid);
			User[playerid][shapeshift] = 3;
			new name[35];
			format(name, sizeof name, "Hispo_Wolf_%04d", User[playerid][UserID]);
			UpdateDynamic3DTextLabelText(User[playerid][UserTag],WEREWOLF, name);			
			cmd_me(playerid, "shapeshifts to their Hispo form.");
			MSG(playerid,GOLD,"Statistics Adjustment:"GR" Strength +3, Dexterity +2, Stamina +3, Manipulation 0 (Size: 4'6'' at the shoulder, 350-800 lbs)");
			UpdateTrait(playerid, "Strength", strength+3);
			UpdateTrait(playerid, "Dexterity", dexterity+2);
			UpdateTrait(playerid, "Stamina", stamina+3);
			UpdateTrait(playerid, "Manipulation", 0);	
			SetPVarInt(playerid, "backup_Strength", strength);
			SetPVarInt(playerid, "backup_Stamina", stamina);
			SetPVarInt(playerid, "backup_Dexterity", dexterity);
			SetPVarInt(playerid, "backup_Manipulation", manipulation);
			SetPVarInt(playerid, "backup_Appearance", appearance);
			for(new i = 0; i < 9; i++)
			{
				if(ao[playerid][i][ao_equip] == 1)
				{
					RemovePlayerAttachedObject(playerid, i);
					User[playerid][pindex][i] = true;
				}
			}
			return 1;
		}
		if(!strcmp(params, "lupus", true))
		{
			if(User[playerid][shapeshift] == 4)
				return MSG(playerid, GOLD, "ERROR:"GR" You are in Lupus form.");
			if(GetPlayerVehicleID(playerid) > 0)
				return MSG(playerid, GOLD, "ERROR:"GR" You are in a vehicle.");
			SetPlayerSkin(playerid, GetPVarInt(playerid, "player_LupusSkin"));
			ClearAnimations(playerid);
			User[playerid][shapeshift] = 4;
			new name[35];
			format(name, sizeof name, "Lupus_Wolf_%04d", User[playerid][UserID]);
			UpdateDynamic3DTextLabelText(User[playerid][UserTag],WEREWOLF, name);
			cmd_me(playerid, "shapeshifts to their Lupus form.");
			MSG(playerid,GOLD,"Statistics Adjustment:"GR" Strength +1, Dexterity +2, Stamina +2, Manipulation 0 (Size: 3'4'' at the shoulder, 120•250 lbs)");
			UpdateTrait(playerid, "Strength", strength+1);
			UpdateTrait(playerid, "Dexterity", dexterity+2);
			UpdateTrait(playerid, "Stamina", stamina+2);
			UpdateTrait(playerid, "Manipulation", 0);		
			SetPVarInt(playerid, "backup_Strength", strength);
			SetPVarInt(playerid, "backup_Stamina", stamina);
			SetPVarInt(playerid, "backup_Dexterity", dexterity);
			SetPVarInt(playerid, "backup_Manipulation", manipulation);
			SetPVarInt(playerid, "backup_Appearance", appearance);
			for(new i = 0; i < 9; i++)
			{
				if(ao[playerid][i][ao_equip] == 1)
				{
					RemovePlayerAttachedObject(playerid, i);
					User[playerid][pindex][i] = true;
				}
			}
			return 1;
		}
		return 1;
	}
	return 0;
}
CMD:show(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new tra[MAX_TRAIT_NAME];
		if(sscanf(params,"s[24]",tra))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /show [traitname]");
		new bool:found;
		if(strfind(params, "health", true) != -1) 
		{
			// new hlevel[64];
			// switch(User[playerid][Health])
			// {
				
			// 	case 0: hlevel = "Health Level: Incapacitated";
			// 	case 1..20: hlevel = "Health Level: Crippled (-5)";
			// 	case 21..30: hlevel = "Health Level: Mauled (-2)";
			// 	case 31..60: hlevel = "Health Level: Wounded (-2)";
			// 	case 61..70: hlevel = "Health Level: Injured (-1)";
			// 	case 71..80: hlevel = "Health Level: Hurt (-1)";
			// 	case 81..95: hlevel = "Health Level: Bruised (0)";
			// 	case 96..200: hlevel = "Health Level: Healthy";
			// 	default: hlevel = "Health Level: N/A";
			// }
			format(large_string, sizeof(large_string), "> * Health: %s (( %s ))", PasteHealthConditionEx(playerid), sendernameEx(playerid));
			ProxDetector(30.0, playerid, large_string, cRP,cRP,cRP,cRP,cRP);
			large_string[0] = EOS;
			return 1;
		}
		if(User[playerid][Userrace] == 4)
		{
			if(strfind("Conviction", tra, true) != -1)
			{
				tra[0] = toupper(tra[0]);
				new string[60+MAX_PLAYER_NAME];
				format(string, sizeof(string), "> * Conviction %s (( %s ))", rGetDotValue(playerid, "Conviction"), sendernameEx(playerid));
				ProxDetector(30.0, playerid, string, cRP,cRP,cRP,cRP,cRP);
				found = true;
				return 1;
			}
		}
		for(new i = 0; i < sizeof(sTraits); i++)
		{
			if(strfind(sTraits[i], tra, true) != -1) 
			{
				tra[0] = toupper(tra[0]);
				new string[60+MAX_PLAYER_NAME];
				format(string, sizeof(string), "> * %s %s (( %s ))", sTraits[i], rGetDotValue(playerid, sTraits[i]), sendernameEx(playerid));
				ProxDetector(30.0, playerid, string, cRP,cRP,cRP,cRP,cRP);
				found = true;
				break;
			}
		}
		if(!found)
		{
			for(new i = 0; i < sizeof(rDisciplines); i++)
			{
				//if(!strcmp(tra, rDisciplines[i], true))
				if(strfind(rDisciplines[i], tra, true) != -1)
				{
					new string[60+MAX_PLAYER_NAME];
					format(string, sizeof(string), "> * %s %s (( %s ))", rDisciplines[i], rGetDotValue(playerid, rDisciplines[i]), sendernameEx(playerid));
					ProxDetector(30.0, playerid, string, cRP,cRP,cRP,cRP,cRP);
					found = true;
					break;					
				}
			}
			if(found) return 1;
			//new rolls[60],vtra = GetPVarInt(playerid, tra),vstra = GetPVarInt(playerid, stra),count = 0,success[15],suc,botch;
			for(new i = 0; i < sizeof(rollBackgrounds); i++)
			{
				if(strfind(rollBackgrounds[i], tra, true) != -1) 
				{
					tra[0] = toupper(tra[0]);
					new string[60+MAX_PLAYER_NAME];
					format(string, sizeof(string), "> * %s %s (( %s ))", rollBackgrounds[i], rGetDotValue(playerid, rollBackgrounds[i]), sendernameEx(playerid));
					ProxDetector(30.0, playerid, string, cRP,cRP,cRP,cRP,cRP);
					found = true;
					break;
				}
			}
			if(found) return 1;
			new value = GetPVarInt(playerid, tra);
			if(value > 0)
			{
				new string[60+MAX_PLAYER_NAME];
				tra[0] = toupper(tra[0]);
				format(string, sizeof(string), "> * %s %s (( %s ))", tra, rGetDotValue(playerid, tra), sendernameEx(playerid));
				ProxDetector(30.0, playerid, string, cRP,cRP,cRP,cRP,cRP);
				found = true;
				return 1;				
			}
			if(!found) return MSG(playerid,GOLD,"ERROR:"GR" Invalid trait specified.");
		}
		//
		return 1;
	}
	return 0;
}
CMD:sdroll(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new dicepool,
			difficulty = 6;
		sscanf(params,"ii",dicepool, difficulty);
		if(difficulty < 3) return MSG(playerid,GOLD,"ERROR:"GR" Invalid difficulty specified.");
		if(dicepool < 1 || dicepool > 20) return MSG(playerid,GOLD,"SYNTAX:"GR"	/sdroll [dicepool] [difficulty]");	
		new rolls[60],
		count = 0,
		success[45],
			suc,
			botch;
		while(count < dicepool)
		{
			new roll = 1+random(10),rtemp[10];
			if(count+1 >= dicepool) format(rtemp, sizeof rtemp, "%d ", roll);
			else format(rtemp, sizeof rtemp, "%d, ", roll);
			strcat(rolls, rtemp);
			if(roll >= difficulty) suc++;
			if(roll != 10) count++;
			if(roll == 1) botch++;
		}
		if(suc-botch > 0) format(success, sizeof success, "%d Successes",suc-botch);
		if(suc-botch == 0) strcat(success, "Failed");
		if(botch > 0 && suc == 0) strcat(success, "BOTCH");
		format(large_string, sizeof large_string, "(( [S] %s rolls Dice Pool (%d); difficulty %d: %s(%s) ))",sendernameEx(playerid),dicepool, difficulty, rolls, success);
		MSG(playerid, cRP, large_string);
		printf("[%s][%s] %s rolls Dice Pool (%d); difficulty %d: %s(%s)",PasteDate(),PasteTime(), User[playerid][Username], dicepool, difficulty, rolls, success);
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);
		RecordRP(playerid, large_string);
		return 1;
	}
	return 0;
}
CMD:droll(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new dicepool,
			difficulty = 6;
		sscanf(params,"ii",dicepool, difficulty);
		if(difficulty < 3) return MSG(playerid,GOLD,"ERROR:"GR" Invalid difficulty specified.");
		if(dicepool < 1 || dicepool > 20) return MSG(playerid,GOLD,"SYNTAX:"GR"	/droll [dicepool] [difficulty]");	
		new rolls[60],
		count = 0,
		success[45],
			suc,
			botch;
		while(count < dicepool)
		{
			new roll = 1+random(10),rtemp[10];
			if(count+1 >= dicepool) format(rtemp, sizeof rtemp, "%d ", roll);
			else format(rtemp, sizeof rtemp, "%d, ", roll);
			strcat(rolls, rtemp);
			if(roll >= difficulty) suc++;
			if(roll != 10) count++;
			if(roll == 1) botch++;
		}
		/*

		if(suc-botch == 1) format(success, sizeof success, "{169405}%d Success"dRP"",suc-botch); //{006600}
		if(suc-botch > 1) format(success, sizeof success, "{169405}%d Successes"dRP"",suc-botch); //{006600}
		if(suc == botch) strcat(success, "{980907}Failed"dRP""); //{cc0000}
		if(botch > 0 && suc == 0) strcat(success, "{980907}BOTCH"dRP""); // MAR
		if(suc != 0 && botch > suc) strcat(success, ""); // {cc0000}
		if(botch > 0 && suc < botch && isnull(success)) strcat(success, "{980907}Failed"dRP"");
		if(isnull(success)) strcat(success, "ERROR");

		*/
		if(suc-botch == 1) format(success, sizeof success, "{169405}%d Success"dRP"",suc-botch); 
		if(suc-botch > 0) format(success, sizeof success, "{169405}%d Successes"dRP"",suc-botch);
		if(suc-botch == 0) strcat(success, "{980907}Failed"dRP"");
		if(botch > 0 && suc == 0) strcat(success, "{980907}BOTCH"dRP"");
		if(botch > 0 && suc < botch && isnull(success)) strcat(success, "{980907}Failed"dRP"");
		if(isnull(success)) strcat(success, "ERROR");
		format(large_string, sizeof large_string, "(( %s rolls Dice Pool (%d); difficulty %d: %s (%s) ))",sendernameEx(playerid),dicepool, difficulty, rolls, success);
		AutoMSG(playerid, large_string);
		printf("[%s][%s] %s rolls Dice Pool (%d); difficulty %d: %s(%s)",PasteDate(),PasteTime(), User[playerid][Username], dicepool, difficulty, rolls, success);
		return 1;
	}
	return 0;
}

CMD:sroll(playerid, params[])
	return cmd_silentroll(playerid, params);
CMD:silentroll(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new tra[MAX_TRAIT_NAME],
			stra[MAX_TRAIT_NAME],
			difficulty = 6;
		sscanf(params,"s[24]s[24]i",tra,stra,difficulty);
		if(isnull(tra) || IsNumeric(tra)) return MSG(playerid,GOLD,"SYNTAX:"GR" /silentroll [traitname] [traitname] [difficulty]");
		if(!isnull(stra))
		{
			if(IsNumeric(stra))
			{
				difficulty = strval(stra);
				stra[0] = EOS;
			}
		}
		if(difficulty < 3) return MSG(playerid,GOLD,"ERROR:"GR" Invalid difficulty specified.");
		if(strfind("initiative",tra, true) != -1)
		{
			MSG(playerid, GOLD, "ERROR:"GR" You cannot roll initative silently, use (/roll).");
			return 1;
		}
		if(!strcmp(tra, "groupini", true))
		{
			MSG(playerid, GOLD, "ERROR:"GR" You cannot roll initative silently, use (/roll).");
			return 1;
		}
		//---
		for(new i = 0; i < sizeof sTraits; i++)
		{
			if(strfind(sTraits[i], tra, true) != -1)
			{
				if(strfind("science", tra, true) != -1)
				{
					tra[0] = EOS;
					strcat(tra, "Science");	
					break;					
				}
				else 
				{	
					tra[0] = EOS;
					strcat(tra, sTraits[i]);
					break;
				}
			}
			if(strfind(sTraits[i], stra, true) != -1)
			{
				if(strfind("science", tra, true) != -1)
				{
					tra[0] = EOS;
					strcat(tra, "Science");	
					break;					
				}
				else 
				{	
					stra[0] = EOS;
					strcat(stra,sTraits[i]);
					break;
				}
 			}
		}
		for(new i = 0; i < sizeof(rDisciplines); i++)
		{
			if(strfind(rDisciplines[i], tra, true) != -1)
			{
				tra[0] = EOS;
				strcat(tra, rDisciplines[i]);
				break;
			}	
			if(strfind(rDisciplines[i], stra, true) != -1)
			{
				stra[0] = EOS;
				strcat(stra, rDisciplines[i]);
				break;
			}			
		}
		new rolls[60],vtra = GetPVarInt(playerid, tra),vstra = GetPVarInt(playerid, stra),count = 0,success[45],suc,botch;
		if(vtra == 0 && !isnull(tra)) return MSG(playerid,GOLD,"ERROR:"GR" You don't have any dots in the specified trait.");
		if(vstra == 0 && !isnull(stra))	return MSG(playerid,GOLD,"ERROR:"GR" You don't have any dots in the specified trait.");
		while(count < vtra+vstra)
		{
			new roll = 1+random(10),rtemp[10];
			if(count+1 >= vtra+vstra) format(rtemp, sizeof rtemp, "%d ", roll);
			else format(rtemp, sizeof rtemp, "%d, ", roll);
			strcat(rolls, rtemp);
			if(roll >= difficulty) suc++;
			if(roll != 10) count++;
			if(roll == 1) botch++;
		}
		if(suc-botch == 1) format(success, sizeof success, "{169405}%d Success"dRP"",suc-botch); 
		if(suc-botch > 0) format(success, sizeof success, "{169405}%d Successes"dRP"",suc-botch); //{006600}
		if(suc == botch) strcat(success, "{980907}Failed"dRP""); //{cc0000}
		if(botch > 0 && suc == 0) strcat(success, "{980907}BOTCH"dRP""); // MAR
		if(suc != 0 && botch > suc) strcat(success, "{980907}Failed"dRP""); // {cc0000}
		tra[0] = toupper(tra[0]);
		stra[0] = toupper(stra[0]);
		if(isnull(stra)) 
		{
			format(large_string, sizeof large_string, "(( [S] %s rolls %s (%d); difficulty %d: %s(%s) ))",sendernameEx(playerid), tra, GetPVarInt(playerid, tra), difficulty, rolls, success);
		}
		else format(large_string, sizeof large_string, "(( [S] %s rolls %s (%d) + %s (%d); difficulty %d: %s(%s) ))",sendernameEx(playerid), tra, GetPVarInt(playerid, tra), stra, GetPVarInt(playerid, stra), difficulty, rolls, success);
		MSG(playerid, cRP, large_string);
		// recording:
		new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
		if(isnull(stra)) format(large_string, sizeof large_string, "(( [S] %s rolls %s (%d); difficulty %d: %s(%s) ))",sendernameEx(playerid), tra, GetPVarInt(playerid, tra), difficulty, rolls, success);
		else format(large_string, sizeof large_string, "(( [S] %s rolls %s (%d) + %s (%d); difficulty %d: %s(%s) ))",sendernameEx(playerid), tra, GetPVarInt(playerid, tra), stra, GetPVarInt(playerid, stra), difficulty, rolls, success);		
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);	
		//--	
		printf("[%s][%s] %s (id:%d) rolled %s (%d) + %s (%d); difficulty %d: %s(%s)",PasteDate(), PasteTime(), User[playerid][Username], playerid, tra, GetPVarInt(playerid, tra),stra, GetPVarInt(playerid, stra), difficulty, rolls, success);
		return 1;
	}
	return 0;
}

CMD:roll(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new tra[MAX_TRAIT_NAME],
			stra[MAX_TRAIT_NAME],
			difficulty = 6;
		sscanf(params,"s[24]s[24]i",tra,stra,difficulty);
		if(isnull(tra) || IsNumeric(tra)) return MSG(playerid,GOLD,"SYNTAX:"GR" /roll [traitname] [traitname] [difficulty]");
		if(!isnull(stra))
		{
			if(IsNumeric(stra))
			{
				difficulty = strval(stra);
				stra[0] = EOS;
			}
		}
		if(!strcmp(tra, "experience", true) && !isnull(tra))  	
		{
			return MSG(playerid, GOLD, "ERROR:"GR" Invalid trait specified.");
		}
		new bool:skip = false;
		if(isnull(stra)) skip = true;
		if(difficulty < 3 || difficulty > 10) return MSG(playerid,GOLD,"ERROR:"GR" Invalid difficulty specified.");
		if(strfind("initiative",tra, true) != -1)
		{
			new extra = 0,
				celerity = GetPVarInt(playerid, "Celerity"),
				dexbuff = GetPVarInt(playerid, "bDexterity");
			if(User[playerid][Userrace] == 2)
			{
				format(large_string,sizeof large_string,"SELECT 1 FROM sheet WHERE trait = 'Spirit of the Fray' AND userid = %d AND type = 1",User[playerid][UserID]);
				new DBResult: Result = db_query(Database, large_string);
				if(db_num_rows(Result))
					extra += 10;
				db_free_result(Result);
			}
			if(celerity > 0)
				extra += celerity;
			if(dexbuff > 0) extra += dexbuff;
			new dex = GetPVarInt(playerid, "Dexterity");
			new wits = GetPVarInt(playerid, "Wits");
			new roll = 1+(random(10));
			new rollsum = dex+wits+roll+extra;
			if(dexbuff+celerity > 0) format(large_string, sizeof large_string, "(( %s rolls initiative (Dexterity: %d (+%d); Wits: %d; Roll: %d): %d ))",sendernameEx(playerid),dex, dexbuff+celerity ,wits, roll, rollsum);
			else format(large_string, sizeof large_string, "(( %s rolls initiative (Dexterity: %d; Wits: %d; Roll: %d): %d ))",sendernameEx(playerid),dex,wits, roll, rollsum);
			AutoMSG(playerid, large_string);
			printf("(( %s rolls initiative (Dexterity: %d; Wits: %d; Roll: %d; Extra: %d): %d ))",sendernameEx(playerid),dex,wits, roll, extra, rollsum);
			new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
			//foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);		
			format(large_string, sizeof large_string, "[%s][%s] %s rolls initiative: %d",PasteDate(),PasteTime(), User[playerid][Username], rollsum);
			print(large_string);
			return 1;
		}
		if(!strcmp(tra, "group", true))
		{
			Dialog_Show(playerid,dGroupSelect,DIALOG_STYLE_INPUT,"Group Initiative","Insert the group you wish to roll initiative for using the format below:\n\nplayerid,playerid,playerid,etc.. (up to 15 maximum)","Close","");
			return 1;
		}
		//---
		new backupdex = GetPVarInt(playerid, "Dexterity");
		new backupstr = GetPVarInt(playerid, "Strength");
		new backupstam = GetPVarInt(playerid, "Stamina");
		if(User[playerid][Userrace] == 1)
		{
			SetPVarInt(playerid, "Dexterity", GetPVarInt(playerid, "Dexterity")+GetPVarInt(playerid, "bDexterity"));
			SetPVarInt(playerid, "Strength", GetPVarInt(playerid, "Strength")+GetPVarInt(playerid, "bStrength"));
			SetPVarInt(playerid, "Stamina", GetPVarInt(playerid, "Stamina")+GetPVarInt(playerid, "bStamina"));
		}		
		if(User[playerid][Userrace] != 4)
		{
			for(new i = 0; i < sizeof sTraits; i++)
			{
				if(strfind(sTraits[i], tra, true) != -1) // traitname1
				{
					if(strfind("science", tra, true) != -1)
					{
						tra[0] = EOS;
						strcat(tra, "Science");	
						break;					
					}
					else 
					{	
						tra[0] = EOS;
						strcat(tra, sTraits[i]);
						if(skip == false)
						{
							for(new b = 0; b < sizeof sTraits; b++)
							{
								if(strfind(sTraits[b], stra, true) != -1) // traitname2
								{
									if(strfind("science", tra, true) != -1)
									{
										tra[0] = EOS;
										strcat(tra, "Science");	
										break;					
									}
									else // 
									{	
										stra[0] = EOS;
										strcat(stra,sTraits[b]);
										break;
									}
								}
							}
						}
						break;
					}
				}
				/*if(strfind(sTraits[i], stra, true) != -1) // traitname2
				{
					if(strfind("science", tra, true) != -1)
					{
						tra[0] = EOS;
						strcat(tra, "Science");	
						break;					
					}
					else // 
					{	
						stra[0] = EOS;
						strcat(stra,sTraits[i]);
						break;
					}
				}*/
			}
			for(new i = 0; i < sizeof(rDisciplines); i++)
			{
				if(strfind(rDisciplines[i], tra, true) != -1)
				{
					tra[0] = EOS;
					strcat(tra, rDisciplines[i]);
					break;
				}	
				if(strfind(rDisciplines[i], stra, true) != -1)
				{
					stra[0] = EOS;
					strcat(stra, rDisciplines[i]);
					break;
				}			
			}
		}
		else
		{
			if(strfind("Conviction", tra, true) != -1)
			{
				tra[0] = EOS;
				strcat(tra, "Conviction");
			}
		}
		new rolls[60],
			vtra = GetPVarInt(playerid, tra),
			vstra = GetPVarInt(playerid, stra),
			count = 0,success[42],
			suc,
			botch
		;
		// buffs script ended
		if(vtra == 0 && !isnull(tra)) return SFM(playerid,GOLD,"ERROR:"GR" You don't have any dots in %s.", tra);
		if(vstra == 0 && !isnull(stra))	return SFM(playerid,GOLD,"ERROR:"GR" You don't have any dots in %s.", stra);
		while(count < vtra+vstra)
		{
			new roll = 1+random(10),rtemp[10];
			if(count+1 >= vtra+vstra) format(rtemp, sizeof rtemp, "%d ", roll);
			else format(rtemp, sizeof rtemp, "%d, ", roll);
			strcat(rolls, rtemp);
			if(roll >= difficulty) suc++;
			if(roll != 10) count++;
			if(roll == 1) botch++;
		}
		if(suc-botch == 1) format(success, sizeof success, "{169405}%d Success"dRP"",suc-botch); //{006600}
		if(suc-botch > 1) format(success, sizeof success, "{169405}%d Successes"dRP"",suc-botch); //{006600}
		if(suc == botch) strcat(success, "{980907}Failed"dRP""); //{cc0000}
		if(botch > 0 && suc == 0) strcat(success, "{980907}BOTCH"dRP""); // MAR
		if(suc != 0 && botch > suc) strcat(success, ""); // {cc0000}
		if(botch > 0 && suc < botch && isnull(success)) strcat(success, "{980907}Failed"dRP"");
		if(isnull(success)) strcat(success, "ERROR");

		tra[0] = toupper(tra[0]);
		stra[0] = toupper(stra[0]);

		if(isnull(stra)) 
			format(large_string, sizeof large_string, "(( %s rolls %s (%d); difficulty %d: %s (%s) ))",sendernameEx(playerid), tra, GetPVarInt(playerid, tra), difficulty, rolls, success);
		else format(large_string, sizeof large_string, "(( %s rolls %s (%d) + %s (%d); difficulty %d: %s (%s) ))",sendernameEx(playerid), tra, GetPVarInt(playerid, tra), stra, GetPVarInt(playerid, stra), difficulty, rolls, success);
		AutoMSG(playerid, large_string);
		if(User[playerid][Userrace] == 2) 
		{
			if(!strcmp(tra, "Rage", true) && difficulty == 8 && User[playerid][Death] > 0)
			{
				if(suc != 0 || botch > suc)
					return 1;
				cmd_me(playerid, "has scored a successful roll on Remaining Active.");
				KillTimer(User[playerid][DeathTimer]);
				User[playerid][Death] = 0;
				SetHealth(playerid, suc*14);
				UpdateDynamic3DTextLabelText(User[playerid][UserTag],SOLIDWHITE,User[playerid][pUsername]);
				ClearAnimations(playerid,1);
				TogglePlayerControllable(playerid, 1);
				PlayerTextDrawHide(playerid, deathtext[playerid]);				
			}
		}
		// recording:
		new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
		if(isnull(stra)) format(large_string, sizeof large_string, "(( %s rolls %s (%d); difficulty %d: %s(%s) ))",sendernameEx(playerid), tra, GetPVarInt(playerid, tra), difficulty, rolls, success);
		else format(large_string, sizeof large_string, "(( %s rolls %s (%d) + %s (%d); difficulty %d: %s(%s) ))",sendernameEx(playerid), tra, GetPVarInt(playerid, tra), stra, GetPVarInt(playerid, stra), difficulty, rolls, success);		
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);	
		//--	
		printf("[%s][%s] %s (id:%d) rolled %s (%d) + %s (%d); difficulty %d: %s(%s)",PasteDate(), PasteTime(), User[playerid][Username], playerid, tra, GetPVarInt(playerid, tra),stra, GetPVarInt(playerid, stra), difficulty, rolls, success);

		if(User[playerid][Userrace] == 1)
		{
			SetPVarInt(playerid, "Dexterity", backupdex);
			SetPVarInt(playerid, "Strength", backupstr);
			SetPVarInt(playerid, "Stamina", backupstam);
		}		
		return 1;
	}
	return 0;
}
CMD:an(playerid, params[])
{
	if(User[playerid][Useradmin] > 0)
	{
		new animlib[24],
			animname[24],
			Float:fDelta,
			loop,
			lockx,
			locky,
			freeze,
			time,
			forcesync;
		if(sscanf(params,"s[24]s[24]fiiiiii", animlib, animname, fDelta, loop, lockx, locky, freeze, time))
			return MSG(playerid,GOLD,"SYNTAX: ApplyAnimation(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)");
		ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
stock GetMaxBloodPool(playerid)
{
	new getmax = 10;
	switch(GetPVarInt(playerid, "vGeneration"))
	{
		case 13: getmax = 10;
		case 12: getmax = 11;
		case 11: getmax = 12;
		case 10: getmax = 13;
		case 9: getmax = 14;
		case 8: getmax = 15;
		case 7: getmax = 20;
		case 6: getmax = 30;
		case 5: getmax = 40;
		case 4: getmax = 50;
		case 3: getmax = 100;
	}
	return getmax;
}
CMD:vbite(playerid,params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] != 1)
			return MSG(playerid,GOLD,"ERROR:"GR" You are not a Vampire.");
		new id;
		if(sscanf(params,"u", id)) 
			return MSG(playerid,GOLD,"SYNTAX:"GR" /vbite [playerid/PartOfName]");
		if(id == playerid) return 0;
		if(GetPVarInt(playerid, "VampireBite") == 1)
			return MSG(playerid, GOLD, "ERROR:"GR" You are in the process of biting.");
		new Float:x,Float:y,Float:z;
		GetXYZInFrontOfPlayer(playerid, x, y, z, 1);
		if(IsPlayerInRangeOfPoint(id, 1, x, y, z))
		{
			GetXYZBehindOfPlayer(id, x, y, z, 0.5);
			if(IsPlayerInRangeOfPoint(playerid,0.5, x, y, z))
			{
				ApplyAnimation(playerid, "KNIFE", "KILL_Partial" ,4.1, 0, 0, 0, 1, 0, 1);
				ApplyAnimation(id, "KNIFE", "KILL_Knife_Ped_Damage", 4.1, 0, 0, 0, 1, 0, 1);
				SetTimerEx("OnPlayerVampireBite", 2500, 0, "ddfff" ,playerid, id, x, y, z);
				cmd_ame(playerid, "performs the Kiss.");
				SetPVarInt(playerid, "VampireBite", 1);
			}
			else MSG(playerid,GOLD,"ERROR:"GR" You have to be behind the player you wish to bite.");
		}
		else MSG(playerid,GOLD,"ERROR:"GR" You must be behind the player you wish to bite.");
		return 1;
	}
	return 0;
}
stock GetMaxBloodPoolForOther(playerid)
{
	if(User[playerid][Userrace] == 0)
		return 10;
	if(User[playerid][Userrace] == 2)
		return 25;
	return 0;
}
forward OnPlayerVampireBite(playerid, ptarget, Float:vbx, Float:vby, Float:vbz);
public OnPlayerVampireBite(playerid, ptarget, Float:vbx, Float:vby, Float:vbz)
{
	if(User[playerid][Logged] && User[ptarget][Logged])
	{
		if(IsPlayerInRangeOfPoint(ptarget, 1, vbx, vby, vbz))
		{
			if(IsPlayerInRangeOfPoint(playerid,0.5, vbx, vby, vbz))
			{
				new maxb = GetMaxBloodPool(playerid);
				new blood = GetPVarInt(playerid, "BloodPool");
				if(blood+1 > maxb)
				{
					MSG(playerid, cRP, "Info: You are saturated.");
					ClearAnimations(playerid);
					DeletePVar(playerid, "VampireBite");
					return 1;
				}
				new tblood = GetPVarInt(ptarget, "BloodPool");
				if(tblood <= 0)
				{
					ClearAnimations(playerid);
					DeletePVar(playerid, "VampireBite");
					UpdateTrait(ptarget, "BloodPool", 0);
					return MSG(playerid, cRP, "Info: There is no more blood in your vessel.");
				}
				new bonus = 0;
				format(large_string, sizeof large_string,"SELECT 1 FROM advantages WHERE userid = %d AND item = 'Efficient Digestion'", User[playerid][SheetMonitorID]);
				new DBResult: Result = db_query(Database, large_string);
				if(db_num_rows(Result))
				{
					bonus += 2;
					db_free_result(Result);
				}
				UpdateTrait(playerid, "BloodPool", blood+1+bonus);
				UpdateTrait(ptarget, "BloodPool", tblood-1-bonus);
				SetTimerEx("OnPlayerVampireBite", 2500, 0, "ddfff" ,playerid, ptarget, vbx, vby, vbz);
				GameTextForPlayer(playerid, "+1 Blood Point", 2500, 1);
				GameTextForPlayer(ptarget, "-1 Blood Point", 2500, 1);
				return 1;
			}
		}			
	}
	ClearAnimations(playerid);
	ClearAnimations(ptarget);
	MSG(playerid, GOLD, "ERROR:"GR" Interrupted.");
	DeletePVar(playerid, "VampireBite");
	return 0;
}
stock DestroyHiddenTag(playerid)
{
	if(User[playerid][Logged])
	{
		foreach(Player, i)
		{
			if(IsValidDynamic3DTextLabel(User[playerid][hiddentag][i]))
			{
				print("Destroy Destroy Hidden Tag");
				DestroyDynamic3DTextLabel(User[playerid][hiddentag][i]);
				User[playerid][seenby][i] = -1;
				User[i][sawplayer][playerid] = -1;
			}			
		}
		return 1;
	}	
	return 0;
}
forward OnInvisCheck(playerid, istatus);
public OnInvisCheck(playerid, istatus)
{
	// print("ON INVIS CHECK CALLED");
	if(User[playerid][Logged] == false) return KillTimer(InvisTimer[playerid]);
	// print("KILL 1");
	if(istatus == 1 && User[playerid][pinvis] == false) return KillTimer(InvisTimer[playerid]);
	// print("KILL 2");
	if(istatus == 2 && User[playerid][thousandface] == false) return KillTimer(InvisTimer[playerid]);
	// print("PROCESS");
	new obfuscate = GetPVarInt(playerid, "Obfuscate");
	foreach(Player, i)
	{
		if(i == playerid)
			continue;
		new auspex = GetPVarInt(i,"Auspex");
		new scent = GetPVarInt(i, "Scent of Sight");
		new Float:x, Float: y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		if(auspex == obfuscate && IsPlayerInRangeOfPoint(i, 20, x, y, z) && User[i][specing] == -1)
		{
			format(large_string, sizeof large_string, "SERVER:"GR" %s (ID: %d) is in range of you, and they have the right to make a contested roll for them to see you.", sendernameEx(i), i);
			MSG(playerid, GOLD, large_string);
			break;
		}
		else if(auspex > obfuscate)
		{
			// print("A");
			if(IsPlayerInRangeOfPoint(i, 20, x, y, z))
			{
				// print("B");
				new aaname[80];
				if(istatus == 1) format(aaname, sizeof aaname, "%s\n"MAR"Unseen Presence (Obfuscate ••)", sendernameEx(playerid));
				print("C");
				if(!IsValidDynamic3DTextLabel(User[playerid][hiddentag][i]))
				{
					if(istatus == 1)
					{
						User[playerid][hiddentag][i] = CreateDynamic3DTextLabel(aaname, SOLIDWHITE, 0, 0, 0, DRAW_DISTANCE, playerid, INVALID_VEHICLE_ID, 0, -1, -1, i);
					}
					else if(istatus == 2) 
					{
						User[playerid][hiddentag][i] = CreateDynamic3DTextLabel("\n"MAR"Mask of a Thousand Faces (Obfuscate •••)", SOLIDWHITE, 0, 0, 0, DRAW_DISTANCE, playerid, INVALID_VEHICLE_ID, 0, -1, -1, i);
					}
				}

				User[playerid][seenby][i] = i;
				User[i][sawplayer][playerid] = playerid;
				// print("D");
			}
			else
			{
					print("Check Destroy");
					if(IsValidDynamic3DTextLabel(User[playerid][hiddentag][i]))
					{
						print("Destroy Destroy");
						DestroyDynamic3DTextLabel(User[playerid][hiddentag][i]);
						User[playerid][seenby][i] = -1;
						User[i][sawplayer][playerid] = -1;
					}
			}
		}
		else if(scent > 0 && istatus == 1 && IsPlayerInRangeOfPoint(i, 20, x, y, z))
		{
			// print("scent A");
			if(IsPlayerInRangeOfPoint(i, 20, x, y, z))
			{
				new aaname[80];
				if(istatus == 1) format(aaname, sizeof aaname, "%s\n"MAR"Unseen Presence (Obfuscate ••)", sendernameEx(playerid));
				if(!IsValidDynamic3DTextLabel(User[playerid][hiddentag][i]))
				{
					if(istatus == 1)
						User[playerid][hiddentag][i] = CreateDynamic3DTextLabel(aaname, SOLIDWHITE, 0, 0, 0, DRAW_DISTANCE, playerid, INVALID_VEHICLE_ID, 0, -1, -1, i);
				}
				User[playerid][seenby][i] = i;
				User[i][sawplayer][playerid] = playerid;
				// print("scent B");
			}
			else
			{
					if(IsValidDynamic3DTextLabel(User[playerid][hiddentag][i]))
					{
						DestroyDynamic3DTextLabel(User[playerid][hiddentag][i]);
						User[playerid][seenby][i] = -1;
						User[i][sawplayer][playerid] = -1;
						// print("scent C");
					}
					// print("scent D");
			}
		}
	}
	return 1;
}
#define INVISIBLE_SKIN 21001
CMD:sud(playerid, params[]) return cmd_susediscipline(playerid, params);
CMD:susediscipline(playerid, params[])
{
	if(User[playerid][Userrace] != 1)
		return MSG(playerid,GOLD,"ERROR:"GR" You are not a Vampire.");
	new discipline[24],
		rank,
		powername[24];
	sscanf(params,"s[24]is[24]",discipline,rank,powername);
	if(isnull(discipline)) return MSG(playerid,GOLD,"SYNYTAX:"GR" /(u)se(d)iscipline [discipline] [rank] [powername(optional)]");
	if(rank < 1) return MSG(playerid,GOLD,"SYNYTAX:"GR" /(u)se(d)iscipline [discipline] [rank] [powername(optional)]");
	new bool:found = false;
	for(new i = 0; i < sizeof(rDisciplines); i++)
	{
		if(!strcmp(discipline, rDisciplines[i], true))
		{
			new value = GetPVarInt(playerid, rDisciplines[i]);
			if(value < 1)
			{
				MSG(playerid,GOLD,"ERROR:"GR" You don't have any dots in the specified discipline.");
				found = true;
				break;
			}
			if(value < rank)
				return MSG(playerid,GOLD,"ERROR:"GR" You don't have the specified dot in the Discipline.");
			discipline[0] = toupper(discipline[0]);
			if(isnull(powername))
				format(large_string, 124,"> [S] * %s has used %s %d.",sendernameEx(playerid), discipline, rank);
			else format(large_string, 124,"> [S] * %s has used %s %d: %s",sendernameEx(playerid), discipline, rank, powername);
			new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
			foreach(Player, b) if(User[b][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(User[b][UserID], large_string);
			MSG(playerid, cRP, large_string);
			found = true;
			RecordRP(playerid, large_string);

			if(!strcmp(discipline, "Auspex", true))
			{
				if(rank == 1)
				{
					if(User[playerid][Death] > 0)
			    		return Wait(playerid,"~y~SERVER:~w~ You are heavily injured.");
					if(User[playerid][active_auspex] == false)
					{
						User[playerid][active_auspex] = true;
						MSG(playerid, GOLD, "Info:"GR" You have activated Heightened Senses");
					}
					else
					{
						User[playerid][active_auspex] = false;
						MSG(playerid, GOLD, "Info:"GR" You have deactivated Heightened Senses");
						return 1;
					}
				}
			}
			break;			
		}
	}
	if(!found) return MSG(playerid,GRAD2,"ERROR: Invalid discipline specified!");
	return 1; 
}
CMD:ue(playerid, params[]) return cmd_useedge(playerid, params);
CMD:useedge(playerid, params[])
{
	if(User[playerid][Userrace] != 4)
		return MSG(playerid,GOLD,"ERROR:"GR" You are not a Hunter.");
	new discipline[24];
	sscanf(params,"s[24]",discipline);
	if(isnull(discipline)) return MSG(playerid,GOLD,"SYNYTAX:"GR" /(u)se(e)dge [edge]");
	//format(query,sizeof query,"DELETE FROM sheet WHERE trait = '%s' AND userid =  %d AND type = 1",trait,User[playerid][UserID]);
	/*format(large_string,sizeof large_string,"SELECT value FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",discipline, User[playerid][UserID]);
	new DBResult: Result = db_query(Database, large_string);
	if(!db_num_rows(Result))
	{
		MSG(playerid,GOLD,"ERROR:"GR" You don't have the specified Edge.");
		db_free_result(Result);
		return 1;
	}
	new value = db_get_field_assoc_int(Result, "value");
	new query[60];
	switch(value)
	{
		case 1: strcat(query, "(Level One)");
		case 2: strcat(query, "(Level Two)");
		case 3: strcat(query, "(Level Three)");
		case 4: strcat(query, "(Level Four)");
		case 5: strcat(query, "(Level Five)");
		case 6: strcat(query, "(Level Six)");
		default: strcat(query,"N/A");
	}*/
	format(large_string, 124,"> * %s has activated %s.",sendernameEx(playerid), discipline);
	new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
	foreach(Player, b) { // Recording XP and playing Sound
		if(IsPlayerInRangeOfPoint(b, 30, x, y, z)) {
			if(User[b][xprecord] == 1) {
					RecordPlayer(User[b][UserID], large_string);
			}
			PlayAudioStreamForPlayer(b, "https://cdn.discordapp.com/attachments/991759556004814928/1002913090054131852/hunteredge.mp3");
		}
	}
	AutoMSG(playerid, large_string);
	//db_free_result(Result);
	return 1; 
}
CMD:us(playerid, params[]) return cmd_usesphere(playerid,params);
CMD:usesphere(playerid, params[])
{
	if(User[playerid][Userrace] != 3)
		return MSG(playerid,GOLD,"ERROR:"GR" You are not a Mage.");
	new discipline[24],
		rank = 1,
		powername[24];
	sscanf(params,"s[24]is[24]",discipline,rank,powername);
	if(isnull(discipline)) return MSG(playerid,GOLD,"SYNYTAX:"GR" /(u)se(s)phere [sphere] [rank] [powername(optional)]");
	if(rank < 1) return MSG(playerid,GOLD,"SYNYTAX:"GR" /(u)se(s)phere [sphere] [rank] [powername(optional)]");
	new bool:found = false;
	for(new i = 0; i < sizeof(rSpheres); i++)
	{
		//if(!strcmp(discipline, rSpheres[i], true))
		//strfind(const string[], const sub[], bool:ignorecase=false, pos=0)
		if(strfind(rSpheres[i], discipline, true) != -1)
		{
			new value = GetPVarInt(playerid, rSpheres[i]);
			if(value < 1)
			{
				MSG(playerid,GOLD,"ERROR:"GR" You don't have any dots in the specified Sphere.");
				found = true;
				break;
			}
			if(value < rank)
				return MSG(playerid,GOLD,"ERROR:"GR" You don't have the specified dot in the Sphere.");
			//discipline[0] = toupper(discipline[0]);
			if(isnull(powername))
				format(large_string, 124,"> * %s has used %s %d.",sendernameEx(playerid), rSpheres[i], rank);
			else
			{
				format(large_string, 124,"> * %s has used %s %d: %s",sendernameEx(playerid), rSpheres[i], rank, powername);	
			}
			new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
			foreach(Player, b) { // Recording XP and playing Sound
				if(IsPlayerInRangeOfPoint(b, 30, x, y, z)) {
					if(User[b][xprecord] == 1) {
							RecordPlayer(User[b][UserID], large_string);
					}
					PlayAudioStreamForPlayer(b, "https://cdn.discordapp.com/attachments/991759556004814928/1002912156343345182/magesphere.mp3");
				}
			}	
			AutoMSG(playerid, large_string);
			found = true;
			if(!strcmp(rSpheres[i], "Correspondence", true))
			{
				// if(rank == 1 && !strcmp(powername, "Heightened Senses", true))
				// {
				// 	if(User[playerid][Death] > 0)
			    // 		return Wait(playerid,"~y~SERVER:~w~ You are heavily injured.");
				// 	if(User[playerid][active_auspex] == false)
				// 	{
				// 		User[playerid][active_auspex] = true;
				// 		MSG(playerid, GOLD, "Info:"GR" You have activated Heightened Senses.");
				// 	}
				// 	else
				// 	{
				// 		User[playerid][active_auspex] = false;
				// 		MSG(playerid, GOLD, "Info:"GR" You have deactivated Heightened Senses.");
				// 		return 1;
				// 	}
				// }
			}
			if(!strcmp(rSpheres[i], "Life", true))
			{
				if(rank == 3)
				{
					if(GetPVarInt(playerid, "p_AssumeForm") == 1) return RemoveForm(playerid);
					SetPVarInt(playerid, "p_AssumeForm", 1);
					AssumeForm(playerid);
				}
				else if(rank == 4)
				{
					Dialog_Show(playerid, dVictimSpec, DIALOG_STYLE_LIST, "Is the target going to be a human or an animal?","Human\nAnimal", "Proceed", "Cancel");
				}
			}
			break;			
		}
	}
	if(!found) return MSG(playerid,GOLD,"ERROR:"GR" Invalid Sphere specified.");
	return 1; 
}
CMD:ul(playerid, params[]) return cmd_uselore(playerid,params);
CMD:uselore(playerid, params[])
{
	if(User[playerid][Userrace] != 5)
		return MSG(playerid,GOLD,"ERROR:"GR" You are not a Demon.");
	new discipline[24],
		rank = 1,
		powername[24];
	sscanf(params,"s[24]is[24]",discipline,rank,powername);
	if(isnull(discipline)) return MSG(playerid,GOLD,"SYNYTAX:"GR" /(u)se(l)ore [lore (i.e: beast)] [rank] [powername(optional)]");
	if(rank < 1) return MSG(playerid,GOLD,"SYNYTAX:"GR" /(u)se(l)ore [lore] [rank] [powername(optional)]");
	new bool:found = false;
	for(new i = 0; i < sizeof(rLores); i++)
	{
		//if(!strcmp(discipline, rLores[i], true))
		//strfind(const string[], const sub[], bool:ignorecase=false, pos=0)
		if(strfind(rLores[i], discipline, true) != -1)
		{
			new value = GetPVarInt(playerid, rLores[i]);
			if(value < 1)
			{
				MSG(playerid,GOLD,"ERROR:"GR" You don't have any dots in the specified Lore.");
				found = true;
				break;
			}
			if(value < rank)
				return MSG(playerid,GOLD,"ERROR:"GR" You don't have the specified dot in the Lore.");
			//discipline[0] = toupper(discipline[0]);
			if(isnull(powername))
				format(large_string, 124,"> * %s has used %s %d.",sendernameEx(playerid), rLores[i], rank); // --> problem is here? maybe
			else
			{
				format(large_string, 124,"> * %s has used %s %d: %s",sendernameEx(playerid), rLores[i], rank, powername); // --> problem is here? maybe	
			}
			new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
			foreach(Player, b) { // Recording XP and playing Sound
				if(IsPlayerInRangeOfPoint(b, 30, x, y, z)) {
					if(User[b][xprecord] == 1) {
							RecordPlayer(User[b][UserID], large_string);
					}
					PlayAudioStreamForPlayer(b, "https://cdn.discordapp.com/attachments/991759556004814928/1002910531298000916/demonlore.mp3");
				}
			}	
			AutoMSG(playerid, large_string);
			found = true;
			//if(!strcmp(discipline, "Life", true))
			if(strfind(rLores[i], "beast", true) != -1)
			{
				if(rank == 3 || rank == 4)
				{
					if(GetPVarInt(playerid, "p_AssumeForm") == 2) return RemoveForm(playerid);
					SetPVarInt(playerid, "p_AssumeForm", 2);
					AssumeForm(playerid);
				}
			}
			if(strfind(rLores[i], "flesh", true) != -1)
			{
				if(rank == 5)
				{
					if(GetPVarInt(playerid, "p_AssumeForm") == 1) return RemoveForm(playerid);
					Dialog_Show(playerid, dVictim, DIALOG_STYLE_INPUT, "Transformation / Shapechanging","Insert the target's playerid or part of their name.", "Proceed", "Cancel");
				}
			}
			break;			
		}
	}
	if(!found) return MSG(playerid,GOLD,"ERROR:"GR" Invalid Lore specified.");
	return 1; 
}
CMD:changeform(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Useradmin] < 1)
			return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
		new id, type;
		if(sscanf(params, "ui", id, type))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /changeform [playerid/partofname] [type (1 HUMAN,2 ANIMAL)]");
		if(type > 2 || type < 1) return MSG(playerid, GOLD, "ERROR:"GR" There are only two types (1 and 2).");
		MSG(playerid, GREEN, "SERVER:"GR" Transformation / Shapechanging dialog has been prompted to the specified player.");
		SetPVarInt(playerid, "p_AssumeForm", type);
		AssumeForm(id);
	}
	return 1;
}
CMD:removeform(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Useradmin] < 1)
			return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
		new id;
		if(sscanf(params, "u", id))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /removeform [playerid/partofname]");
		if(GetPVarInt(id, "p_AssumeForm") == 0) return MSG(playerid, GOLD, "ERROR:"GR" Specified player is not shapechanged / transformed.");
		MSG(playerid, GREEN, "SERVER:"GR" Specified player's form has been negated.");
		RemoveForm(id);
	} 
	return 1;
}
CMD:form(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	if(GetPVarInt(playerid, "p_AssumeForm") == 1)
		return RemoveForm(playerid);
	SetPVarInt(playerid, "p_AssumeForm", 1);
	AssumeForm(playerid);
	return 1;
}
stock RemoveForm(playerid)
{
	UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, User[playerid][pUsername]);
	if(User[playerid][fduty] == 0) SetPlayerSkin(playerid, User[playerid][uSkin]);
	else SetPlayerSkin(playerid, User[playerid][funiform]);
	DeletePVar(playerid, "AssumeFormName");
	DeletePVar(playerid, "AssumeFormSkin");
	DeletePVar(playerid, "p_AssumeForm");	
	User[playerid][makefly] = false;
	return 1;
}
stock AssumeForm(playerid)
{
	if(User[playerid][Logged])
	{
		if(User[playerid][shapeshift] > 0)
			return MSG(playerid, GOLD, "ERROR:"GR" You need to be in human form to assume a new form.");
		new assume = GetPVarInt(playerid, "p_AssumeForm");		
		switch(assume)
		{
			case 0: return MSG(playerid, GOLD, "ERROR:"GR" You cannot use this feature.");
			case 1: Dialog_Show(playerid,dAssumeForm,DIALOG_STYLE_INPUT,"Dialog","Insert the name of the character you wish to assume:","Assume","Cancel"); 
			case 2: Dialog_Show(playerid,dAssumeForm,DIALOG_STYLE_INPUT,"Dialog","Insert the name of the form you wish to assume (i.e Eagle):","Assume","Cancel"); 
		}
		return 1;
	}
	return 0;
}
Dialog:dAssumeForm(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new fassume = GetPVarInt(playerid, "p_AssumeForm");
		if(!IsRPName(inputtext) && fassume == 1)
			return Dialog_Show(playerid,dAssumeForm,DIALOG_STYLE_INPUT,"Dialog","Insert the character name you wish to assume in (Name_Surname) format.","Proceed","Close");
		if(fassume == 2)
			format(large_string, 256, "Please insert in the field below the ID of the skin you would like to have.\nCustom character skins IDs are from %d to %d.\nCustom animal skins are from %d to %d.\nBird models are from 21019 to 21021.", CUSTOM_SKIN_START, CUSTOM_SKIN_END, ANIMAL_SKIN_START, ANIMAL_SKIN_END);
		else format(large_string, 256, "Please insert in the field below the ID of the skin you would like to have.\nCustom character skins IDs are from %d to %d.", CUSTOM_SKIN_START, CUSTOM_SKIN_END);
		Dialog_Show(playerid,dAssumeFormSkin,DIALOG_STYLE_INPUT,"Dialog",large_string,"Close","");
		new name[MAX_PLAYER_NAME];
		strcat(name, inputtext);
		for(new i = 0; i < MAX_PLAYER_NAME; i++) if(name[i] == '_') name[i] = ' ';
		SetPVarString(playerid, "AssumeFormName", name);
		if(GetPVarInt(playerid, "p_AssumeForm") == 1)
			UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, name);
		else UpdateDynamic3DTextLabelText(User[playerid][UserTag], WEREWOLF, name);
		return 1;
	}
	return 1;
}
Dialog:dAssumeFormSkin(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
			MSG(playerid,GOLD,"ERROR:"GR" Insert a positive numeric value.");
			format(large_string, 256, "Please insert in the field below the ID of the skin you would like to have.\nCustom skins IDs are from %d to %d.", CUSTOM_SKIN_START, CUSTOM_SKIN_END);
			Dialog_Show(playerid,dAssumeFormSkin,DIALOG_STYLE_INPUT,"Dialog",large_string,"Close","");
			return 1;
		}
		new skin = strval(inputtext);
		new bool:proc;
		switch(skin)
		{
			case 0..311: proc = true;
			case CUSTOM_SKIN_START..CUSTOM_SKIN_END: proc = true;
			case ANIMAL_SKIN_START..ANIMAL_SKIN_END: 
			{
				if(GetPVarInt(playerid, "p_AssumeForm") == 2)
					proc = true;
				else proc = false;
			}
			case BIRD_SKIN_START..BIRD_SKIN_END:
			{
				if(GetPVarInt(playerid, "p_AssumeForm") == 2)
					proc = true;
				else proc = false;				
			}
			default: proc = false;
		}
		if(!proc)
		{
			MSG(playerid,GOLD,"ERROR:"GR" Insert a positive numeric value.");
			format(large_string, 256, "Please insert in the field below the ID of the skin you would like to have.\nCustom skins IDs are from %d to %d.", CUSTOM_SKIN_START, CUSTOM_SKIN_END);
			Dialog_Show(playerid,dAssumeFormSkin,DIALOG_STYLE_INPUT,"Dialog",large_string,"Close","");
			return 1;
		}
		
		SetPlayerSkin(playerid, skin);
		new maskname[MAX_PLAYER_NAME];
		GetPVarString(playerid, "AssumeFormName", maskname, MAX_PLAYER_NAME);
		format(large_string, sizeof large_string, "Info:"GR" You are now seen as %s with the skin ID %d.", maskname, skin);
		MSG(playerid, GREEN, large_string);
		User[playerid][thousandface] = true;
		SetPVarInt(playerid, "AssumeFormSkin", skin);
		//KillTimer(InvisTimer[playerid]);
		//InvisTimer[playerid] = SetTimerEx("OnInvisCheck", 5000, 1, "dd" , playerid, 2);
		if(GetPVarInt(playerid, "p_AssumeForm") == 2)
			Dialog_Show(playerid,dAssumeFormFly,DIALOG_STYLE_MSGBOX,"Dialog","Can the form you transformed into fly?\nClick `Yes` only if this form can fly.","Yes","No");

	}
	else
	{
		UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, User[playerid][pUsername]);
		SetPlayerSkin(playerid, User[playerid][uSkin]);
		DeletePVar(playerid, "AssumeFormName");
		User[playerid][thousandface] = false;
	}
	return 1;
}
Dialog:dAssumeFormFly(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		User[playerid][makefly] = true;
		MSG(playerid, GOLD, "SERVER:"GR" You can now fly with ~k~~PED_JUMPING~.");
	}
}
CMD:ud(playerid, params[]) return cmd_usediscipline(playerid,params);
CMD:usediscipline(playerid, params[])
{
	if(User[playerid][Userrace] != 1)
		return MSG(playerid,GOLD,"ERROR:"GR" You are not a Vampire.");
	new discipline[48],
		rank,
		powername[24];
	sscanf(params,"s[24]is[24]",discipline,rank,powername);
	if(isnull(discipline)) return MSG(playerid,GOLD,"SYNYTAX:"GR" /(u)se(d)iscipline [discipline] [rank] [powername(optional)]");
	if(rank < 1) return MSG(playerid,GOLD,"SYNYTAX:"GR" /(u)se(d)iscipline [discipline] [rank] [powername(optional)]");
	new bool:found = false;
	for(new i = 0; i < sizeof(rDisciplines); i++)
	{
		//if(!strcmp(discipline, rDisciplines[i], true))
		if(strfind(discipline, rDisciplines[i], true) != -1)
		{
			new value = GetPVarInt(playerid, rDisciplines[i]);
			if(value < 1)
			{
				MSG(playerid,GOLD,"ERROR:"GR" You don't have any dots in the specified discipline.");
				found = true;
				break;
			}
			if(value < rank)
				return MSG(playerid,GOLD,"ERROR:"GR" You don't have the specified dot in the Discipline.");
			//discipline[0] = toupper(discipline[0]);
			new dot[25];
			switch(rank)
			{
				case 1: strcat(dot, "•");
				case 2: strcat(dot, "••");
				case 3: strcat(dot, "•••");
				case 4: strcat(dot, "••••");
				case 5: strcat(dot, "•••••");
				case 6: strcat(dot, "••••• •");
				case 7: strcat(dot, "••••• ••");
				case 8: strcat(dot, "••••• •••");
				case 9: strcat(dot, "••••• ••••");
				case 10: strcat(dot, "••••• •••••");
				case 11: strcat(dot, "••••• ••••• •");
				case 12: strcat(dot, "•••••••••• ••");
				case 13: strcat(dot, "•••••••••• •••");
				case 14: strcat(dot, "••••• ••••• ••••");
				case 15: strcat(dot, "••••• ••••• •••••");
				case 16: strcat(dot, "••••• ••••• ••••• •");
				case 17: strcat(dot, "••••• ••••• ••••• ••");
				case 18: strcat(dot, "••••• ••••• ••••• •••");
				case 19: strcat(dot, "••••• ••••• ••••• ••••");
				case 20: strcat(dot, "••••• ••••• ••••• •••••");
				case 21: strcat(dot, "••••• ••••• ••••• ••••• •");
				case 22: strcat(dot, "••••• ••••• ••••• ••••• ••");
				case 23: strcat(dot, "••••• ••••• ••••• ••••• •••");
				case 24: strcat(dot, "••••• ••••• ••••• ••••• ••••");
				case 25: strcat(dot, "••••• ••••• ••••• ••••• •••••");
				default: strcat(dot,"ERROR");
			}
			if(isnull(powername))
				format(large_string, 124,"> * %s has used %s %s.",sendernameEx(playerid), rDisciplines[i], dot);
			else format(large_string, 124,"> * %s has used %s %s: %s",sendernameEx(playerid), rDisciplines[i], dot, powername);
			new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
			foreach(Player, b) { // Recording XP and playing Sound
				if(IsPlayerInRangeOfPoint(b, 30, x, y, z)) {
					if(User[b][xprecord] == 1) {
						RecordPlayer(User[b][UserID], large_string);
					}
					PlayAudioStreamForPlayer(b, "https://cdn.discordapp.com/attachments/991759556004814928/1002910891257364550/vampirediscipline.mp3");
				}
			}
			AutoMSG(playerid, large_string);
			found = true;
			if(!strcmp(rDisciplines[i], "Auspex", true))
			{
				if(rank == 1)
				{
					if(User[playerid][Death] > 0)
			    		return Wait(playerid,"~y~SERVER:~w~ You are heavily injured.");
					if(User[playerid][active_auspex] == false)
					{
						User[playerid][active_auspex] = true;
						MSG(playerid, GOLD, "Info:"GR" You have activated Heightened Senses.");
					}
					else
					{
						User[playerid][active_auspex] = false;
						MSG(playerid, GOLD, "Info:"GR" You have deactivated Heightened Senses.");
						return 1;
					}
				}
			}
			if(!strcmp(rDisciplines[i], "Obfuscate", true))
			{
				if(rank == 2)
				{
					if(User[playerid][Death] > 0)
			    		return Wait(playerid,"~y~SERVER:~w~ You are heavily injured.");
					if(User[playerid][pinvis] == false)
					{
						UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, " ");
						SetPlayerSkin(playerid, INVISIBLE_SKIN);
						SFM(playerid, GOLD, "Info:"GR" You are now invisible. Type (/usediscipline %s) to deactivate it.", params);
						User[playerid][pinvis] = true;
						KillTimer(InvisTimer[playerid]);
						InvisTimer[playerid] = SetTimerEx("OnInvisCheck", 5000, 1, "dd" ,playerid, 1);
					}
					else
					{
						
						UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, User[playerid][pUsername]);
						if(User[playerid][fduty] == 0)
							SetPlayerSkin(playerid, User[playerid][uSkin]);
						else SetPlayerSkin(playerid, User[playerid][funiform]);	
						MSG(playerid, GOLD, "Info:"GR" You are now visible.");	
						User[playerid][pinvis] = false;		
						KillTimer(InvisTimer[playerid]);	
						DestroyHiddenTag(playerid);
						return 1;
					}
				}
				if(rank == 3)
				{
					if(User[playerid][shapeshift] > 0)
						return MSG(playerid, GOLD, "ERROR:"GR" You are shapeshifted.");
					if(User[playerid][pinvis] == true)
						return MSG(playerid, GOLD, "ERROR:"GR" You have Unseen Presence activated. Turn it off first.");
					if(User[playerid][thousandface] == false && User[playerid][Death] < 1)
						return Dialog_Show(playerid,dMaskFace,DIALOG_STYLE_INPUT,"Mask of a Thousand Faces (Obfuscate •••)","Insert the character name you wish to impersonate in (Name_Surname) format.","Close","");
					else
					{
						UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, User[playerid][pUsername]);
						if(User[playerid][fduty] == 0)
							SetPlayerSkin(playerid, User[playerid][uSkin]);
						else SetPlayerSkin(playerid, User[playerid][funiform]);
						DeletePVar(playerid, "MaskFaceName");
						DeletePVar(playerid, "MaskFaceSkin");
						User[playerid][thousandface] = false;		
						MSG(playerid, GOLD, "Info:"GR" Mask of a Thousand Faces has been deactivated.");
						DestroyHiddenTag(playerid);		
					}
					return 1;
				}
			}
			if(!strcmp(rDisciplines[i], "Protean", true))
			{
				if(rank == 4)
				{
					if(User[playerid][Death] > 0)
			    		return Wait(playerid,"~y~SERVER:~w~ You are heavily injured.");		
					if(User[playerid][thousandface] == true)
						return MSG(playerid, GOLD, "ERROR:"GR" You have Mask of a Thousand Faces activated. Turn it off first.");
					if(User[playerid][pinvis] == true)
						return MSG(playerid, GOLD, "ERROR:"GR" You have Unseen Presence activated. Turn it off first.");
					new query[124];
					format(query, sizeof query,"SELECT 1 FROM advantages WHERE item = 'Totemic Change' AND userid = %d", User[playerid][UserID]);	
					new DBResult: Result = db_query(Database, query),
						bool:totemic_change = true;
					if(!db_num_rows(Result))
					{
						totemic_change = false;
					}
					if(User[playerid][shapeshift] == 0)
					{
						if(!totemic_change)
						{
							new form[MAX_PLAYER_NAME];
							GetPVarString(playerid, "pFightForm", form, MAX_PLAYER_NAME);
							if(isnull(form))
								return Dialog_Show(playerid, dFightFormSelect, DIALOG_STYLE_LIST, "Fight Form Selection (Protean ••••)", "Bear\nHyena\nLynx\nWolf", "Select", "Cancel");
							form[0] = EOS;
							GetPVarString(playerid, "pFlightForm", form, MAX_PLAYER_NAME);
							if(isnull(form))
								return Dialog_Show(playerid, dFlightFormSelect, DIALOG_STYLE_LIST, "Flight Form Selection (Protean ••••)", "Barracuda\nHawk\nVulture\nBat", "Select", "Cancel");
							Dialog_Show(playerid, dFormShift, DIALOG_STYLE_LIST, "Shape of the Beast (Protean ••••)", "Fight Form\nFlight Form", "Select", "Cancel");
						}
						else
						{
							Dialog_Show(playerid, dTotemicSelectFirst, DIALOG_STYLE_LIST, "Totemic Change: Shape of the Beast (Protean ••••)", "Fight Form\nFlight Form", "Select", "Cancel");
						}
					}	
					else
					{
						User[playerid][shapeshift] = 0;
						if(User[playerid][fduty] == 0)
							SetPlayerSkin(playerid, User[playerid][uSkin]);
						else SetPlayerSkin(playerid, User[playerid][funiform]);
						UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, User[playerid][pUsername]);
						cmd_me(playerid,"shapeshifts into their human form.");
					}	
				}
			}
			if(!strcmp(rDisciplines[i], "Vicissitude"))
			{
				if(rank == 1)
				{
					if(GetPVarInt(playerid, "p_AssumeForm") == 1) return RemoveForm(playerid);
					SetPVarInt(playerid, "p_AssumeForm", 1);
					AssumeForm(playerid);
				}
				if(rank == 2)
				{
					Dialog_Show(playerid, dVictim, DIALOG_STYLE_INPUT, "Transformation / Shapechanging","Insert the target's playerid or part of their name.", "Proceed", "Cancel");
				}
			}
			break;			
		}
	}
	if(!found) return MSG(playerid,GRAD2,"ERROR: Invalid discipline specified.");
	return 1; 
}
Dialog:dVictimSpec(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(listitem == 0)
		{
			Dialog_Show(playerid, dVictim, DIALOG_STYLE_INPUT, "Transformation / Shapechanging","Insert the target's playerid or part of their name.", "Proceed", "Cancel");
			SetPVarInt(playerid, "pSelected_Species", 1);
		}
		else
		{
			Dialog_Show(playerid, dVictim, DIALOG_STYLE_INPUT, "Transformation / Shapechanging","Insert the target's playerid or part of their name.", "Proceed", "Cancel");
			SetPVarInt(playerid, "pSelected_Species", 2);
		}
	}
	return 1;
}
Dialog:dVictim(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id;
		if(sscanf(inputtext, "u", id))
			return Dialog_Show(playerid, dVictim, DIALOG_STYLE_INPUT, "Transformation / Shapechanging","Insert the target's playerid or part of their name.", "Proceed", "Cancel");
		if(!User[id][Logged])
			Dialog_Show(playerid, dVictim, DIALOG_STYLE_INPUT, "Transformation / Shapechanging","Insert the target's playerid or part of their name.\n> Specified player is not logged on.", "Proceed", "Cancel");
		new type = GetPVarInt(playerid, "pSelected_Species");
		if(type != 0)
			SetPVarInt(id, "p_AssumeForm", type);
		else SetPVarInt(id, "p_AssumeForm", 1);
		AssumeForm(id);
		MSG(playerid, GOLD, "SERVER:"GR" Transformation dialog has been sent to the target.");
	}
	return 1;
}
Dialog:dVictimAnimal(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id;
		if(sscanf(inputtext, "u", id))
			return Dialog_Show(playerid, dVictim, DIALOG_STYLE_INPUT, "Transformation / Shapechanging","Insert the target's playerid or part of their name.", "Proceed", "Cancel");
		if(!User[id][Logged])
			Dialog_Show(playerid, dVictim, DIALOG_STYLE_INPUT, "Transformation / Shapechanging","Insert the target's playerid or part of their name.\n> Specified player is not logged on.", "Proceed", "Cancel");
		SetPVarInt(id, "p_AssumeForm", 2);
		AssumeForm(id);
		MSG(playerid, GOLD, "SERVER:"GR" Transformation dialog has been sent to the target.");
	}
	return 1;
}
Dialog:dTotemicSelectFirst(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				User[playerid][shapeshift] = 5;
			}
			case 1:
			{
				User[playerid][shapeshift] = 6;
			}
		}
		Dialog_Show(playerid, dTotemicChange, DIALOG_STYLE_INPUT, "Totemic Change: Shape of the Beast (Protean ••••)", "Insert the name of the form you wish to assume:\nAbusing this feature bears serious consequences.\nExamples: Bear, Barracuda, Wolf, Bat, Hawk, Eagle", "Select", "Cancel");
	}
}
Dialog:dTotemicChange(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(IsNumeric(inputtext))
			return Dialog_Show(playerid, dTotemicChange, DIALOG_STYLE_INPUT, "Totemic Change: Shape of the Beast (Protean ••••)", "Insert the name of the form you wish to assume:\nAbusing this feature bears serious consequences.\nCorrect Examples: Bear, Barracuda, Wolf, Bat, Hawk, Eagle", "Select", "Cancel");
		switch(User[playerid][shapeshift])
		{
			case 5:
			{
				SetPVarString(playerid, "pFightForm", inputtext);
				SetPlayerSkin(playerid, 0);
				new nametag[MAX_PLAYER_NAME];
				format(nametag, sizeof nametag, "%s_%04d", inputtext, User[playerid][UserID]);
				UpdateDynamic3DTextLabelText(User[playerid][UserTag], WEREWOLF, nametag);
				cmd_me(playerid,"shapeshifts into their Fight form.");
				
			}
			case 6:
			{
				SetPVarString(playerid, "pFlightForm", inputtext);
				SetPlayerSkin(playerid, 0);
				new form[MAX_PLAYER_NAME];
				GetPVarString(playerid, "pFlightForm", form, MAX_PLAYER_NAME);
				new nametag[MAX_PLAYER_NAME];
				format(nametag, sizeof nametag, "%s_%04d", inputtext,  User[playerid][UserID]);
				UpdateDynamic3DTextLabelText(User[playerid][UserTag], WEREWOLF/*DIRTY_YELLOW*/, nametag);
				cmd_me(playerid,"shapeshifts into their Flight form.");
				Dialog_Show(playerid,dBirdSelectTot,DIALOG_STYLE_LIST,"Form Model Selection (Aerial)","Black Bird Model\nBrown Bird Model\nWhite Bird Model","Select","");
			}
		}		
		return 1;
	}
	else
	{
		User[playerid][shapeshift] = 0;
	}
	return 0;
}
Dialog:dFightFormSelect(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		SFM(playerid, GREEN, "Info"GR": You have selected "WR"%s"GR" as your fight form. Type (/(u)se(d)iscipline Protean 4) to shift.", inputtext);
		switch(listitem)
		{
			case 0: 
			{
				MSG(playerid, GREEN, "Info:"GR" In bear form, the vampire's teeth and claws inflict Strength +2 aggravated damage, and he can run at double speed.");
				MSG(playerid, GREEN, "Info:"GR" The difficulties of all Perception rolls are reduced by one.");
			}
			case 1:
			{
				MSG(playerid, GREEN, "Info:"GR" In hyena form, the vampire's teeth and claws inflict Strength +1 aggravated damage.");
				MSG(playerid, GREEN, "Info:"GR" She can leap twice as high as a normal human and the difficulties of all Perception rolls are reduced by two.");						
			}
			case 2:
			{
				MSG(playerid, GREEN, "Info:"GR" In lynx form, the vampire's teeth and claws inflict Strength +1 aggravated damage. ");
				MSG(playerid, GREEN, "Info:"GR" He can run at double speed and halves all damage from falling and the difficulties of all Perception rolls are reduced by one.");
			}
			case 3:
			{
				MSG(playerid, GREEN, "Info:"GR" In wolf form, the vampire's teeth and claws inflict Strength +1 aggravated damage.");
				MSG(playerid, GREEN, "Info:"GR" He can run at double speed, and the difficulties of all Perception rolls are reduced by two.");
			}
		}
		new form[MAX_PLAYER_NAME];
		strcat(form, inputtext);
		UpdateTraitString(playerid, "pFightForm", form, 9);
		return 1;
	}
	return 1;
}
CMD:emptyflight(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	DeletePVar(playerid, "pFlightForm");
	DeletePVar(playerid, "pFightForm");
	return 1;
}
Dialog:dBirdSelectTot(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new model;
		switch(listitem)
		{
			case 0: model = 21020;
			case 1: model = 21021;
			case 2: model = 21022;
		}
		SetPlayerSkin(playerid, model);
		return 1;
	}
	return MSG(playerid, GOLD, "SERVER:"GR" Model selection cancelled. Shapeshift again to prompt the selection dialog once more.");
}
Dialog:dBirdSelect(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new model;
		switch(listitem)
		{
			case 0: model = 21019;
			case 1: model = 21020;
			case 2: model = 21021;
		}
		ShowIt(playerid, model);
		Dialog_Show(playerid, dBirdConfirm, DIALOG_STYLE_MSGBOX, "Form Selection Confirmation", "Are you sure you wish to select this form?", "Yes", "Back");
		SetPVarInt(playerid, "bplayer_BirdSkin", model);
		return 1;
	}
	MSG(playerid, GOLD, "ERROR:"GR" Please select your Flight form model!");
	User[playerid][gVar] = -10000;
	PlayerTextDrawHide(playerid,ShowSkin[playerid]);
	TextDrawHideForPlayer(playerid, ShowFrame);
	return Dialog_Show(playerid,dBirdSelect,DIALOG_STYLE_LIST,"Form Model Selection (Aerial)","Black Bird Model\nBrown Bird Model\nWhite Bird Model","Select","");
}
Dialog:dBirdConfirm(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		UpdateTrait(playerid, "player_BirdSkin", GetPVarInt(playerid, "bplayer_BirdSkin"), 9);
		DeletePVar(playerid, "bplayer_BirdSkin");
		MSG(playerid, GOLD, "Info:"GR" Flight form model selected. Process finalized.");
		PlayerTextDrawHide(playerid,ShowSkin[playerid]);
		TextDrawHideForPlayer(playerid, ShowFrame);
		User[playerid][gVar] = -10000;
		return 1;
	}
	User[playerid][gVar] = -10000;
	PlayerTextDrawHide(playerid,ShowSkin[playerid]);
	TextDrawHideForPlayer(playerid, ShowFrame);	
	return Dialog_Show(playerid,dBirdSelect,DIALOG_STYLE_LIST,"Form Model Selection (Aerial)","Black Bird Model\nBrown Bird Model\nWhite Bird Model","Select","");
}
Dialog:dFlightFormSelect(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		SFM(playerid, GREEN, "Info"GR": You have selected "WR"%s"GR" as your flight form. Type (/(u)se(d)iscipline Protean 4) to shift.", inputtext);
		new bool:bird;
		switch(listitem)
		{
			case 0: 
			{
				MSG(playerid, GREEN, "Info:"GR" In barracuda form, the vampire's Strength is reduced to 1, but she can swim speeds of up to 20 miles per hour/30 kph.");
				MSG(playerid, GREEN, "Info:"GR" Difficulties for all sight-based Perception rolls are reduced by three.");
				MSG(playerid, GREEN, "Info:"GR" Attacks made against her are at +3 difficulty due to her small size and agility.");
  
			}
			case 1:
			{
				MSG(playerid, GREEN, "Info:"GR" In hawk form, the vampire's Strength is reduced to 1, but he can fly at speeds of up to 25 miles per hour/40 kph. ");
				MSG(playerid, GREEN, "Info:"GR" Difficulties for all hearing-based Perception rolls are reduced by two.");	
				MSG(playerid, GREEN, "Info:"GR" Attacks made against him are at +1 difficulty due to his small size.");	
				bird = true;
 					
			}
			case 2:
			{
				MSG(playerid, GREEN, "Info:"GR" In vulture form, the vampire's Strength is reduced to 2, but she can fly at speeds of up to 20 miles per hour/30 kph.");
				MSG(playerid, GREEN, "Info:"GR" Difficulties for all hearing-based Perception rolls are reduced by three.");
				MSG(playerid, GREEN, "Info:"GR" Attacks made against her are at +1 difficulty due to her smaller size.");
				bird = true;
			}
			case 3:
			{
				MSG(playerid, GREEN, "Info:"GR" In bat form, the vampire's Strength is reduced to 1, but he can fly at speeds of up to 20 miles per hour/30 kph.");
				MSG(playerid, GREEN, "Info:"GR" Difficulties for all hearing-based Perception rolls are reduced by three.");
				MSG(playerid, GREEN, "Info:"GR" Attacks made against him are at +2 difficulty due to his small size.");
				bird = true;
			}
		}
		if(bird)
			Dialog_Show(playerid,dBirdSelect,DIALOG_STYLE_LIST,"Form Model Selection (Aerial)","Black Bird Model\nBrown Bird Model\nWhite Bird Model","Select","");
		new form[MAX_PLAYER_NAME];
		strcat(form, inputtext);
		UpdateTraitString(playerid, "pFlightForm", form, 9);
		return 1;
	}
	return 1;
}
Dialog:dFormShift(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				SetPlayerSkin(playerid, 0);
				new form[MAX_PLAYER_NAME];
				GetPVarString(playerid, "pFightForm", form, MAX_PLAYER_NAME);
				new nametag[MAX_PLAYER_NAME];
				format(nametag, sizeof nametag, "%s_%04d", form,  User[playerid][UserID]);
				UpdateDynamic3DTextLabelText(User[playerid][UserTag], WEREWOLF, nametag);
				User[playerid][shapeshift] = 5;
				cmd_me(playerid,"shapeshifts into their Fight form.");
			}
			case 1:
			{
				new form[MAX_PLAYER_NAME];
				GetPVarString(playerid, "pFlightForm", form, MAX_PLAYER_NAME);
				new nametag[MAX_PLAYER_NAME];
				format(nametag, sizeof nametag, "%s_%04d", form,  User[playerid][UserID]);
				UpdateDynamic3DTextLabelText(User[playerid][UserTag], DIRTY_YELLOW, nametag);
				User[playerid][shapeshift] = 6;
				cmd_me(playerid,"shapeshifts into their Flight form.");
				if(GetPVarInt(playerid, "player_BirdSkin") > 0)
				{
					SetPlayerSkin(playerid, GetPVarInt(playerid, "player_BirdSkin"));
				}
				else
					SetPlayerSkin(playerid, 0);
			}
		}
	}
	return 1;
}
Dialog:dMaskFace(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsRPName(inputtext))
			return Dialog_Show(playerid,dMaskFace,DIALOG_STYLE_INPUT,"Mask of a Thousand Faces (Obfuscate •••)","Insert the character name you wish to impersonate in (Name_Surname) format.","Close","");
		format(large_string, 256, "Please insert in the field below the ID of the skin you would like to acquire.\nCustom skins IDs are from %d to %d.", CUSTOM_SKIN_START, CUSTOM_SKIN_END);
		Dialog_Show(playerid,dMaskFaceSkin,DIALOG_STYLE_INPUT,"Mask of a Thousand Faces (Obfuscate •••)",large_string,"Close","");
		new name[MAX_PLAYER_NAME];
		strcat(name, inputtext);
		for(new i = 0; i < MAX_PLAYER_NAME; i++) if(name[i] == '_') name[i] = ' ';
		SetPVarString(playerid, "MaskFaceName", name);
		UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, name);
		return 1;
	}
	return 1;
}
Dialog:dMaskFaceSkin(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
			MSG(playerid,GOLD,"ERROR:"GR" Insert a positive numeric value.");
			format(large_string, 256, "Please insert in the field below the ID of the skin you would like to acquire.\nCustom skins IDs are from %d to %d.", CUSTOM_SKIN_START, CUSTOM_SKIN_END);
			Dialog_Show(playerid,dMaskFaceSkin,DIALOG_STYLE_INPUT,"Mask of a Thousand Faces (Obfuscate •••)",large_string,"Close","");
			return 1;
		}
		new skin = strval(inputtext);
		new bool:proc;
		switch(skin)
		{
			case 1..311: proc = true;
			case CUSTOM_SKIN_START..CUSTOM_SKIN_END: proc = true;
			default: proc = false;
		}
		if(!proc)
		{
			MSG(playerid,GOLD,"ERROR:"GR" Insert a positive numeric value.");
			format(large_string, 256, "Please insert in the field below the ID of the skin you would like to acquire.\nCustom skins IDs are from %d to %d.", CUSTOM_SKIN_START, CUSTOM_SKIN_END);
			Dialog_Show(playerid,dMaskFaceSkin,DIALOG_STYLE_INPUT,"Mask of a Thousand Faces (Obfuscate •••)",large_string,"Close","");
			return 1;
		}
		
		SetPlayerSkin(playerid, skin);
		new maskname[MAX_PLAYER_NAME];
		GetPVarString(playerid, "MaskFaceName", maskname, MAX_PLAYER_NAME);
		format(large_string, sizeof large_string, "Info:"GR" Mask of a Thousand Faces is active. You are recognized as %s with the skin ID %d.", maskname, skin);
		MSG(playerid, GREEN, large_string);
		MSG(playerid, GREEN, "Info:"GR" Type (/(u)se(d)iscipline Obfuscate 3) to deactivate it.");
		User[playerid][thousandface] = true;
		SetPVarInt(playerid, "MaskFaceSkin", skin);
		KillTimer(InvisTimer[playerid]);
		InvisTimer[playerid] = SetTimerEx("OnInvisCheck", 5000, 1, "dd" , playerid, 2);
	}
	else
	{
		UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, User[playerid][pUsername]);
		SetPlayerSkin(playerid, User[playerid][uSkin]);
		DeletePVar(playerid, "MaskFaceName");
		User[playerid][thousandface] = false;
	}
	return 1;
}
CMD:sug(playerid, params[]) return cmd_susegift(playerid,params);
CMD:susegift(playerid, params[])
{
	if(User[playerid][Userrace] != 2)
		return MSG(playerid,GOLD,"ERROR:"GR" You are not a Werewolf.");
	new discipline[48];
	sscanf(params,"s[48]",discipline);
	if(isnull(discipline)) return MSG(playerid,GOLD,"SYNYTAX:"GR" /(s)ilent(u)se(gift) [gift]");
	//format(query,sizeof query,"DELETE FROM sheet WHERE trait = '%s' AND userid =  %d AND type = 1",trait,User[playerid][UserID]);
	format(large_string,sizeof large_string,"SELECT value FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",discipline, User[playerid][UserID]);
	new DBResult: Result = db_query(Database, large_string);
	if(!db_num_rows(Result))
	{
		MSG(playerid,GOLD,"ERROR:"GR" You don't have the specified gift!");
		db_free_result(Result);
		return 1;
	}
	new value = db_get_field_assoc_int(Result, "value");
	new query[60];
	switch(value)
	{
		case 1: strcat(query, "(Level One)");
		case 2: strcat(query, "(Level Two)");
		case 3: strcat(query, "(Level Three)");
		case 4: strcat(query, "(Level Four)");
		case 5: strcat(query, "(Level Five)");
		case 6: strcat(query, "(Level Six)");
		default: strcat(query,"N/A");
	}
	format(large_string, 124,"> * [S] %s has activated %s.",sendernameEx(playerid), discipline, query);
	new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
	foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);	
	MSG(playerid, cRP, large_string);

	RecordRP(playerid, large_string);
	db_free_result(Result);
	return 1; 
}
CMD:ug(playerid, params[]) return cmd_usegift(playerid,params);
CMD:usegift(playerid, params[])
{
	if(User[playerid][Userrace] != 2)
		return MSG(playerid,GOLD,"ERROR:"GR" You are not a Werewolf.");
	new discipline[24];
	sscanf(params,"s[24]",discipline);
	if(isnull(discipline)) return MSG(playerid,GOLD,"SYNYTAX:"GR" /(u)se(g)ift [gift]");
	//format(query,sizeof query,"DELETE FROM sheet WHERE trait = '%s' AND userid =  %d AND type = 1",trait,User[playerid][UserID]);
	format(large_string,sizeof large_string,"SELECT value FROM sheet WHERE trait = '%s' AND userid = %d AND type = 1",discipline, User[playerid][UserID]);
	new DBResult: Result = db_query(Database, large_string);
	if(!db_num_rows(Result))
	{
		MSG(playerid,GOLD,"ERROR:"GR" You don't have the specified gift.");
		db_free_result(Result);
		return 1;
	}
	new value = db_get_field_assoc_int(Result, "value");
	new query[60];
	switch(value)
	{
		case 1: strcat(query, "(Level One)");
		case 2: strcat(query, "(Level Two)");
		case 3: strcat(query, "(Level Three)");
		case 4: strcat(query, "(Level Four)");
		case 5: strcat(query, "(Level Five)");
		case 6: strcat(query, "(Level Six)");
		default: strcat(query,"N/A");
	}
	format(large_string, 124,"* %s has activated %s %s.",sendernameEx(playerid), discipline, query);
	new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
	foreach(Player, b) { // Recording XP and playing Sound
		if(IsPlayerInRangeOfPoint(b, 30, x, y, z)) {
			if(User[b][xprecord] == 1) {
					RecordPlayer(User[b][UserID], large_string);
			}
			PlayAudioStreamForPlayer(b, "https://cdn.discordapp.com/attachments/991759556004814928/1002911406670225428/werewolfgift.mp3");
		}
	}	
	AutoMSG(playerid, large_string);
	db_free_result(Result);
	UseGift(playerid, discipline);
	return 1; 
}
stock UseGift(playerid, giftname[])
{
	if(User[playerid][Logged])
	{
		if(strfind(giftname,"Thousand Forms", true) != -1)
		{
			SetPVarInt(playerid, "p_AssumeForm", 2);
			AssumeForm(playerid);
		}
		if(strfind(giftname, "", true) != -1)
		{

		}
		return 1;
	}
	return 0;
}
CMD:rpfs(playerid,params[])
{
	if(User[playerid][Useradmin] > 0)
	{
			new name[MAX_PLAYER_NAME],
				userid,
				query[256],
				target;
			if(isnull(params))
				return MSG(playerid, GOLD, "SYNTAX:"GR" /rpfs [FullAccountName/playerid]");
			sscanf(params, "s[24]", name);			
			if(isnull(params))
			{
				userid = User[playerid][UserID];
				strcat(name, User[playerid][Username]);
			}
			else
			{
				if(IsNumeric(params))
				{
					target = strval(params);
					userid = User[target][UserID];
					strcat(name, User[playerid][Username]);
				}
				else
				{
					format(query, sizeof query,"SELECT userid FROM users WHERE username = '%s'", name);
					new DBResult: Result = db_query(Database, query);
					if(!db_num_rows(Result) && userid == 0)
					{
						db_free_result(Result);
						return MSG(playerid,GOLD,"ERROR:"GR" Invalid player name specified.");
					}
					userid = db_get_field_assoc_int(Result, "userid");
				}
			}
			format(query, sizeof query,"SELECT slot,desc FROM features WHERE userid = %d ORDER BY slot ASC", userid);
			new DBResult: Result = db_query(Database, query);
			large_string[0] = EOS;
			do
			{
				if(db_num_rows(Result))
				{
					new desc[250],slot;
					db_get_field_assoc(Result, "desc", desc, sizeof desc);
					slot = db_get_field_assoc_int(Result, "slot");
					format(large_string,sizeof large_string,"%s[%d] %s\n", large_string, slot, desc);
				}
				else
				{
					MSG(playerid,GOLD,"ERROR:"GR" No roleplay features found.");
					break;
				}
			}
			while(db_next_row(Result));
			db_free_result(Result);
			Dialog_Show(playerid,dSheetOther,DIALOG_STYLE_MSGBOX,"RPFs",large_string,"Close","");	
			return 1;	
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}

CMD:setlimits(playerid, params[])
{
	if(IsPlayerAdmin(playerid))
	{
		/* backup
		if(!strcmp(params, "huntermerits", true))
		{
			//format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Detached', 4, 0, -1, 'hHunter')");db_query(Database, large_string);
			//format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'hHunter'");
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Hearing)', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Sight)', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Smell)', 1, 4, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Taste)', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Approachable', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Early-Adopter', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Furry', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Good Listener', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Good Taste', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Gossip', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lovestruck', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Media Junkie', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Leader', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Politician', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Punctual', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Smooth', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Way with Words', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Best Friend', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enchanting Voice', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Fashion Sense', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Flirt', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Good Judge of Character', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Great Liar', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Laid-back Friends', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('People Person', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Pillar of the Community', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Seasoned Traveller', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Seasoned Traveller', 4, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Socially Aware', 2, 4, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Trivia Champ', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Upright Citizen', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vibrant Neighborhood', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Corporate Savvy', 3, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Media Savvy', 3, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Supportive Family', 3, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lucky', 4, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Good Right Hook', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Good Left Hook', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hollow Leg', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Light-sleeper', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Runner', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Perfect Balance', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Robust Health', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sea Legs', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bundle of Energy', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cat Napper', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Forgettable', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Good Night Vision', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sexy', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Daredevil', 3, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Huge Size', 3, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Common Sense', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Concentration', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Good Map Reader', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Fast Reader', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Good Recognition', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Healthy Skepticism', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Religious Devotion', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Religious Devotion', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Religious Devotion', 3, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Time Sense', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Code of Honor', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Determined', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Eidetic Memory', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Internet Savvy', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Linguist', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Fast Learner', 3, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Aptitude', 3, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Unflappable', 3, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Direction Sense', 4, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Optimistic', 4, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Specialist Drivers License', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dual Nationality', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Alimony Recipient', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Alimony Recipient', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Alimony Recipient', 3, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bargain Hound', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Independent Income', 1, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Independent Income', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Independent Income', 3, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Independent Income', 4, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Independent Income', 5, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Good Credit Rating', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Wealthy Partner', 2, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Flexible Job', 3, 4, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Paid Mortgage', 3, 4, -1)");db_query(Database, large_string);	

			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bad Liar', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Balding', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bully', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Children', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Chronically Late', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Chronic Pessimist', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Chronically Shy', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Clannish Family', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Collaborator', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Crude', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cultural Snob', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Defensive', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Eccentric Appearance', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Gambling Addict', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Ghoulish Sense of Humor', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Icy Demeanor', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Ignorant', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Impractical Dresser', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Intolerant Neighbors', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Misinformed', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mistaken Identity', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Needy Friends', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('No Internet Access', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('No Phone', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Non-confrontational', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Poor Dental Health', 1, 4, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Poor Online Demeanor', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Poor Personal Hygiene', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Poor Taste', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Shadowy Past', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Socially Oblivious', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Speech Impediment', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Stubborn', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Superstitious', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Trusting', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Abusive Partner', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Compulsive Liar', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Conspicuous Consumer', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dogged by Fringe Media', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Foreigner', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Honest to a Fault, 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Infamy', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lustful', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Monstrous Connections', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Nosy Neighbors', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Poor Judge of Character', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Stalked', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Technophobe', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Moneygrubbing', 3, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Wavering Faith', 3, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Criminal Entanglements', 4, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Unlucky', 4, 4, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Pacifist', 5, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Allergies', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Arthritic', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Color Blind', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Distinguishing Characteristic', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Heavy Sleeper', 1, 4, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lazy', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Low Alcohol Tolerance', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Motion Sickness', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('No Sense of Smell', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('No Sense of Taste', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Nonswimmer', 1, 4, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Poor Eyesight', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Poor Hearing', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sickly', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vice', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vice', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vice', 3, 4, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Youthful Appearance', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Disfigured', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Insomniac', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Low Pain Tolerance', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Obese', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Old Injury', 2, 4, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Poor Night Vision', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Short', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Chippled Limb', 3, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Elderly', 3, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Shaky Hands', 3, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Missing Eye', 3, 4, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Child', 4, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Chronic Illness', 4, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Deafness', 4, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blind', 6, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Gullible', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Medicated', 1, 4, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Medicated', 5, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Nightmares', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('No Sense of Direction', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Poor Sense of Time', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Short Temper', 1, 4, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Terrible with Names', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Absent Minded', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Attention-Deficit Disorder', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dyslexic', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Eating Disorder', 2, 4, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Language Barrier', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Language Barrier', 3, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Overconfident', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Phobia', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Faint of Heart', 3, 4, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Incompetent', 3, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Low Self-Esteem', 3, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Slow Learner', 3, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Weak-Willed', 3, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Amnesia', 4, 4, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Depression', 4, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Illiterate', 4, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Political Extremist', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Revoked Driver's License', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sunday Driver', 1, 4, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Criminal Record', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Probation', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Illegal Immigrant', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Wanted by Law Enforcement', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Audit', 1, 4, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Demanding Career', 2, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Primary Breadwinner', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Uninsured', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Alimony Payments', 1, 4, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Homeless', 4, 4, -2)");db_query(Database, large_string);



		}*/
		if(!strcmp(params, "demonvisages", false))
		{
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Armor', 4, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Casts No Reflection', 2, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Claws/Teeth', 1, 5, -4)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Damage Resistance', 3, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enhanced Ability', 3, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enhanced Senses', 3, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enhanced Mental Acuity', 4, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enhanced Social Traits', 4, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Extra Actions', 3, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Extra Limbs', 3, 5, -4)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Gaping Maw', 1, 5, -4)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Horns', 1, 5, -4)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Improved Attribute', 3, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Improved Initiative', 1, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Increased Size', 3, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lashing Tail', 1, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Pass Without Trace', 2, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Regeneration', 4, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Wings', 3, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Wings', 4, 5, -3)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Alter Size', 3, 5, -3, 'Lammasu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Distortion', 3, 5, -3, 'Lammasu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Enhanced Empathy', 1, 5, -3, 'Lammasu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Enhanced Intiution', 1, 5, -3, 'Lammasu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Ichor', 2, 5, -3, 'Lammasu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Immune to Electricity', 2, 5, -3, 'Lammasu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Improved Dexterity', 2, 5, -3, 'Lammasu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Lyrical Voice', 1, 5, -3, 'Lammasu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sea`s Beauty', 1, 5, -3, 'Lammasu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Shark Hide', 3, 5, -4, 'Lammasu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Shocking Touch', 2, 5, -3, 'Lammasu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Spines', 2, 5, -3, 'Lammasu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Venom', 3, 5, -3, 'Lammasu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Weather Sense', 1, 5, -3, 'Lammasu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Affirm', 3, 5, -3, 'Namaru')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Beckon', 2, 5, -3, 'Namaru')");db_query(Database, large_string);

			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Corrosive Spit', 2, 5, -4, 'Namaru')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Dread Gaze', 4, 5, -3, 'Namaru')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Fiery Blood', 4, 5, -4, 'Namaru')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Immune to Fire', 3, 5, -3, 'Namaru')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Increased Awareness', 2, 5, -3, 'Namaru')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Inhuman Allure', 2, 5, -3, 'Namaru')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Lordly Mien', 2, 5, -3, 'Namaru')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Radiant Aura', 1, 5, -3, 'Namaru')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Scales', 3, 5, -4, 'Namaru')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sense the Hidden', 1, 5, -3, 'Namaru')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Spark of Faith', 3, 5, -3, 'Namaru')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('The Host', 2, 5, -3, 'Namaru')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Voice of the Damned', 1, 5, -3, 'Namaru')");db_query(Database, large_string);

			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Aura of Vitality', 4, 5, -3, 'Rabisu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Chameleon Skin', 1, 5, -3, 'Rabisu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Disperse', 3, 5, -4, 'Rabisu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Enhanced Social Traits', 3, 5, -3, 'Rabisu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Enhanced Survival', 1, 5, -3, 'Rabisu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Frenzy', 2, 5, -4, 'Rabisu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Immune to Poisons', 3, 5, -3, 'Rabisu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Natural Weaponry', 3, 5, -3, 'Rabisu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Nimble Hunter', 3, 5, -3, 'Rabisu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Primal Mind', 3, 5, -3, 'Rabisu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Relentless', 1, 5, -3, 'Rabisu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sun`s Bounty', 2, 5, -3, 'Rabisu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Thick Hide', 2, 5, -3, 'Rabisu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Thorns', 1, 5, -3, 'Rabisu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Toxins', 1, 5, -4, 'Rabisu')");db_query(Database, large_string);

			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Aura of Misfortune', 3, 5, -3, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Cloak of Shadows', 2, 5, -3, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Chimerical Attack', 3, 5, -4, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Dread Mien', 1, 5, -3, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Enhanced Dodge', 1, 5, -3, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Enhanced Intiution', 1, 5, -3, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Enhanced Mental Acuity', 3, 5, -3, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Eyes of Fate', 4, 5, -3, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Hypnotic Visioans', 3, 5, -3, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Increased Awareness', 1, 5, -3, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Night Sight', 2, 5, -3, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Rend the Soul', 3, 5, -4, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sense the Hidden', 1, 5, -3, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sibilant Whispers', 1, 5, -3, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Unearthly Glamour', 1, 5, -3, 'Neberu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Alter Size', 3, 5, -3, 'Annunaki')");db_query(Database, large_string);			
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Conjuration', 1, 5, -3, 'Annunaki')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Dead Reckoning', 1, 5, -3, 'Annunaki')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Ichor', 2, 5, -4, 'Annunaki')");db_query(Database, large_string);

			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Immune to Bashing Damage', 4, 5, -3, 'Annunaki')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Immune to Fire', 3, 5, -3, 'Annunaki')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Iron Skin', 3, 5, -3, 'Annunaki')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Irresistible Force', 2, 5, -3, 'Annunaki')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Magnetic Field', 2, 5, -3, 'Annunaki')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Master Artisan', 1, 5, -3, 'Annunaki')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Night Sight', 2, 5, -3, 'Annunaki')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Relentless', 1, 5, -3, 'Annunaki')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Spikes', 1, 5, -3, 'Annunaki')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Thunderous Voice', 3, 5, -3, 'Annunaki')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Tremor Sense', 3, 5, -3, 'Annunaki')");db_query(Database, large_string);

			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Aura of Vitality', 4, 5, -3, 'Asharu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Caustic Bile', 2, 5, -4, 'Asharu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Cloak of Shadows', 2, 5, -3, 'Asharu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Dead Reckoning', 1, 5, -3, 'Asharu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Enhanced Dodge', 1, 5, -3, 'Asharu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Enhanced Intuition', 1, 5, -3, 'Asharu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Immune to Falling Damage', 1, 5, -3, 'Asharu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Improved Physical Capabilites', 1, 5, -3, 'Asharu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Miasma', 3, 5, -4, 'Asharu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Mist', 4, 5, -3, 'Asharu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Multiple Eyes', 2, 5, -4, 'Asharu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Perfect Balance', 1, 5, -3, 'Asharu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Quills', 1, 5, -4, 'Asharu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Supernatural Vision', 1, 5, -3, 'Asharu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Viscous Flesh', 2, 5, -4, 'Asharu')");db_query(Database, large_string);

			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Aura of Dread', 2, 5, -4, 'Halaku')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Aura of Entropy', 2, 5, -3, 'Halaku')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Cloak of Shadows', 2, 5, -3, 'Halaku')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Conjuration', 2, 5, -3, 'Halaku')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Dead Reckoning', 1, 5, -3, 'Halaku')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Death-Grip', 4, 5, -3, 'Halaku')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Dread Gaze', 4, 5, -3, 'Halaku')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Enhanced Awareness', 2, 5, -3, 'Halaku')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Enhanced Social Traits', 3, 5, -3, 'Halaku')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Ghost Sight', 2, 5, -3, 'Halaku')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Howl of the Damned', 1, 5, -3, 'Halaku')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Night Sight', 1, 5, -3, 'Halaku')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Reaper`s Breath', 3, 5, -3, 'Halaku')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Relentless', 1, 5, -3, 'Halaku')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Touch of Death', 3, 5, -3, 'Halaku')");db_query(Database, large_string);

			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Angelic Aura', 1, 5, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Angelic Gaze', 1, 5, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Debt of Gratitude', 1, 5, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Debt of Gratitude', 2, 5, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Debt of Gratitude', 3, 5, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Atavistic Form', 2, 5, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dreams of the Past', 2, 5, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Famous Liege', 2, 5, -1)");db_query(Database, large_string);	
		}
		if(!strcmp(params, "magemerits", false))
		{
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Hearing)', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Sight)', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Smell)', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Taste)', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Language', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dark Triad', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Stormwarden/ Quantum Voyager', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Stormwarden/ Quantum Voyager', 5, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Ties', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Berserker/ Stress Atavism', 4, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Umbral Affinity', 4, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Too Tough to Die', 5, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('True Faith', 7, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Addiction', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Addiction', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Echoes', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Echoes', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Echoes', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Echoes', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Echoes', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enemy', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enemy', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enemy', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enemy', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enemy', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Construct', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('PTSD', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('PTSD', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('PTSD', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('PTSD', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Deranged', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Deranged', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Alcohol /Drug Tolerance', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Alcohol /Drug Tolerance', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Ambidextrous', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cast-Iron Stomach', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Catlike Balance', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hyperflexible', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Light Sleeper ', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Noble Blood', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sterile', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sterile', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enchanting Feature', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Physically Impressive', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Poison Resistance', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Poker Face', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Daredevil', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hypersensitivity', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Nightsight', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Huge Size', 4, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Insensate to Pain', 5, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Child', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Child', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Child', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Impediment', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Impediment', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Impediment', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Impediment', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Impediment', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Impediment', 6, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Aging', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Aging', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Aging', 6, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Aging', 8, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Aging', 10, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Easily Intoxicated', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Repulsive Feature', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Profiled Appearance', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Degeneration', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Degeneration', 6, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Degeneration', 9, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Monstrous', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Permanent Wound', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Short', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Horrific', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mayfly Curse', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mayfly Curse', 10, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Artistically Gifted', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Common Sense', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Computer Aptitude', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Concentration', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Expert Driver', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lightning Calculator', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Time Sense', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Code of Honor', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Eidetic Memory', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Inner Strength', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Linguist', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hyperfocus', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Iron Will', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Jack-of-All-Trades', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Scientific Mystic /Techgnosi', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Judge`s Wisdom', 4, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Self-Confident', 5, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Compulsion', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hero Worship', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Impatient', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Inappropriate', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Inappropriate', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Inappropriate', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Inappropriate', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mental Lock', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Nightmares', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Nightmares', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Overconfident', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Shy', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Soft-Hearted', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Speech Impediment', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vanilla', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Whimsy', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Amnesia', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Curiosity', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Icy', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Intemperate', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Obsession', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Phobia', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Phobia', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rose-Colored Glasses', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vengeful', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Short Fuse', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Absent-Minded', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bigot', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Chronic Depression', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Driving Goal', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Extreme Kink', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Extreme Kink', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Feral Mind', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Flashbacks', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hatred', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lifesaver', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('OCPD', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Ability Deficit', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Loyalty', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Family Support', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Family Support', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Favor', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Favor', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Favor', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Pitiable', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Prestigious Mentor', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Regal Bearing', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Unobtrusive', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Animal Magnetism', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Confidence', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hideaway /Safehouse', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hideaway /Safehouse', 4, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hideaway /Safehouse', 6, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Leader', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Officially Dead', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Perfect Liar', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Prestige', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Property', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Property', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Property', 1, 4, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Property', 1, 5, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Research Grant', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sanctity', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Secret Code Language', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Socially Networked', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Subculture Insider', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Local Hero', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Noted Messenger', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rising Star', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Master of Red Tape', 4, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('True Love', 4, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blacklisted', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blacklisted', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blacklisted', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blacklisted', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blacklisted', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Compulsive Speech', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Compulsive Speech', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Conflicting Loyalties', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Conflicting Loyalties', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Conflicting Loyalties', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Conniver', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cultural Other', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cultural Other', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cultural Other', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cultural Other', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cultural Other', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dark Secret ', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Debts', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Debts', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Debts', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Debts', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Debts', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Discredited', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Esoteric Discourse / Technobabbler', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Family Issues', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Family Issues', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Family Issues', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Infamy', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Infamy', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Infamy', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Infamy', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Infamy', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Insane / Infamous Mentor', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mistaken Identity', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Naive', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('New Kid', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Offline', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Offline', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Offline', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rival House', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rival House', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rival House', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rival House', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rival House', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sect Enmity', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Special Responsibility', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sympathizer', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Twisted Apprenticeship', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Catspaw', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Diabolical Mentor', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dogmatic', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Double Agent', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Failure', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Gullible', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Old Flame', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Troublemaker', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Expendable', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Narc', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Notoriety', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rivalry', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rivalry', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rivalry', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rotten Liar', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sleeping with the Enemy', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Ward', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Echo Chamber', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hit List', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mr Red Tape', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Overextended', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Probationary Member', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rogue', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Witch-Hunted', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Fifth Degree', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Burning Aura', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Green Thumb', 1, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bardic Gift', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Circumspect Avatar', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Faerie Affinity', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Medium', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Unaging', 2, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Celestial Affinity', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cloak of the Seasons', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cyclic Magick', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cyclic Magick', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Danger Sense', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hands of Daedalus', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Manifest Avatar', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mark of Favor', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Channel', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Shapeshifter', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Oracular Ability', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Parlor Trick', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Spirit Magnet', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Spirit Magnet', 4, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Spirit Magnet', 5, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Spirit Magnet', 6, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Spirit Magnet', 7, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Spirit Mentor', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Supernatural Companion', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Stormwarden / Quantum Voyager', 3, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Stormwarden / Quantum Voyager', 5, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Deathwalker', 4, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Fae Blood', 4, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Shapechanger Kin', 4, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Twin Souls', 4, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Unbondable', 4, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Ghoul', 5, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Clear Sighted', 5, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Inner Knight', 5, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Legendary Attributes', 5, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Powerful Ally', 5, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Powerful Ally', 6, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Powerful Ally', 7, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Powerful Ally', 8, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Shattered Avatar', 5, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Spark of Life', 5, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Guardian Ange', 6, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sphere Natural', 6, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Avatar Companion', 7, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dual Affiliation', 7, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Nephilim / Laham', 7, 3, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Anachronism', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Anachronism', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Anachronism', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Apprentice', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Apprentice', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Apprentice', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Apprentice', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Apprentice', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('The Bard`s Tongue', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cast No Shadow or Reflection', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cast No Shadow or Reflection', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Devil`s Mark', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Paranormal Prohibition or Imperative', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Paranormal Prohibition or Imperative', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Paranormal Prohibition or Imperative', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Paranormal Prohibition or Imperative', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Paranormal Prohibition or Imperative', 6, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Paranormal Prohibition or Imperative', 7, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Paranormal Prohibition or Imperative', 8, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Gremlin', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Gremlin', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Gremlin', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Gremlin', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Gremlin', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Locked Vidare', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Strangeness', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Throwback', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Throwback', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Throwback', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Throwback', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Throwback', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Uncanny', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Uncanny', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Uncanny', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Uncanny', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Uncanny', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vulnerability', 1, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vulnerability', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vulnerability', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vulnerability', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vulnerability', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vulnerability', 6, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vulnerability', 7, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bizarre Hunger', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bizarre Hunger', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bizarre Hunger', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bizarre Hunger', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blood-Hungry Soul', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blood-Hungry Soul', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blood-Hungry Soul', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Crucial Component', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Crucial Component', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Crucial Component', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Crucial Component', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Faulty Enhancements', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Faulty Enhancements', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Faulty Enhancements', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Faulty Enhancements', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Jinx / Infernal Contraption', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Jinx / Infernal Contraption', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Jinx / Infernal Contraption', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Jinx / Infernal Contraption', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Jinx / Infernal Contraption', 6, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Jinx / Infernal Contraption', 7, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Jinx / Infernal Contraption', 8, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Jinx / Infernal Contraption', 9, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Jinx / Infernal Contraption', 10, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Permanent Paradox Flaw', 2, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Permanent Paradox Flaw', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Permanent Paradox Flaw', 6, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Branded', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Branded', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Branded', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Demented Eidolon', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Haunted', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Primal Marks', 3, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Oathbreaker', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Prone to Quiet', 4, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Prone to Quiet', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Beast Within', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blood Magick', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bound', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dark Fate', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Faithless', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Immortal Enemy', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Immortal Enemy', 6, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Immortal Enemy', 7, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Immortal Enemy', 8, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Psychic Vampire', 5, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bedeviled', 6, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sphere Inept', 6, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Phylactery', 7, 3, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Taint of Corruption', 7, 3, -2)");db_query(Database, large_string);
		}
		if(!strcmp(params, "huntermerits", false))
		{
			//
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Acute Sense (Hearing)', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Acute Sense (Sight)', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Acute Sense (Smell)', 1, 0, -1, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Acute Sense (Taste)', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Approachable', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Early Adopter', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Funny', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			//format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Furry', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Good Listener', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Good Taste', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Gossip', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('In Love', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Media Junkie', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Natural Leader', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Natural Politician', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Punctual', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Smooth', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Way with Words', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Best Friend', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Enchanting Voice', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Fashion Sense', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Flirt', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Good Judge of Character', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Great Liar', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Laid-back Friends', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('People Person', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Pillar of the Community', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Seasoned Traveller', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Seasoned Traveller', 4, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Socially Aware', 2, 0, -1, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Trivia Champ', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Upright Citizen', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Vibrant Neighborhood', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Corporate Savvy', 3, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Media Savvy', 3, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Supportive Family', 3, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Lucky', 3, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Good Right Hook', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Good Left Hook', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Hollow Leg', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Light Sleeper', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Natural Runner', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Perfect Balance', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Robust Health', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sea Legs', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Bundle of Energy', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Cat Napper', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Forgettable', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Good Night Vision', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sexy', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Daredevil', 3, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Huge Size', 3, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Common Sense', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Concentration', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Good Map Reader', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Fast Reader', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Good Recognition', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Healthy Skepticism', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Religious Devotion', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Religious Devotion', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Religious Devotion', 3, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Time Sense', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Code of Honor', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Determined', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Eidetic Memory', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Internet Savvy', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Natural Linguist', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Fast Learner', 3, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Natural Aptitude', 3, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Unflappable', 3, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Direction Sense', 4, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Optimistic', 4, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Specialist Drivers License', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Dual Nationality', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Alimony Recipient', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Alimony Recipient', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Alimony Recipient', 3, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Bargain Hound', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Independent Income', 1, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Independent Income', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Independent Income', 3, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Independent Income', 4, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Independent Income', 5, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Good Credit Rating', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Wealthy Partner', 2, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Flexible Job', 3, 0, -1, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Paid Mortgage', 3, 0, -1, 'rHunter')");db_query(Database, large_string);	

			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Bad Liar', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Balding', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Bully', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Children', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Chronically Late', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Chronic Pessimist', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Chronically Shy', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Clannish Family', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Collaborator', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Crude', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Cultural Snob', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Defensive', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Eccentric Appearance', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Gambling Addict', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Ghoulish Sense of Humor', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Icy Demeanor', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Ignorant', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Impractical Dresser', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Intolerant Neighbors', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Misinformed', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Mistaken Identity', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Needy Friends', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('No Internet Access', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('No Phone', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Non-Confrontational', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Poor Dental Health', 1, -1, -2, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Poor Online Demeanor', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Poor Personal Hygiene', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Poor Taste', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Shadowy Past', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Socially Oblivious', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Speech Impediment', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Stubborn', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Superstitious', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Trusting', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Abusive Partner', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Compulsive Liar', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Conspicuous Consumer', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Dogged by Fringe Media', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Foreigner', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Honest to a Fault, 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Infamy', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Lustful', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Monstrous Connections', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Nosy Neighbors', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Poor Judge of Character', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Stalked', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Technophobe', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Moneygrubbing', 3, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Wavering Faith', 3, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Criminal Entanglements', 4, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Unlucky', 4, -1, -2, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Pacifist', 5, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Allergies', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Arthritic', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Color Blind', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Distinguishing Characteristic', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Heavy Sleeper', 1, -1, -2, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Lazy', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Low Alcohol Tolerance', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Motion Sickness', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('No Sense of Smell', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('No Sense of Taste', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Nonswimmer', 1, -1, -2, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Poor Eyesight', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Poor Hearing', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sickly', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Vice', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Vice', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Vice', 3, -1, -2, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Youthful Appearance', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Disfigured', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Insomniac', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Low Pain Tolerance', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Obese', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Old Injury', 2, -1, -2, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Poor Night Vision', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Short', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Chippled Limb', 3, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Elderly', 3, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Shaky Hands', 3, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Missing Eye', 3, -1, -2, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Child', 4, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Chronic Illness', 4, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Deafness', 4, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Blind', 6, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Gullible', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Medicated', 1, -1, -2, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Medicated', 5, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Nightmares', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('No Sense of Direction', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Poor Sense of Time', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Short Temper', 1, -1, -2, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Terrible with Names', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Absent Minded', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Attention-Deficit Disorder', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Dyslexic', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Eating Disorder', 2, -1, -2, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Language Barrier', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Language Barrier', 3, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Overconfident', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Phobia', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Faint of Heart', 3, -1, -2, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Incompetent', 3, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Low Self-Esteem', 3, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Slow Learner', 3, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Weak-Willed', 3, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Amnesia', 4, -1, -2, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Depression', 4, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Illiterate', 4, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Political Extremist', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Revoked Driver`s License', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sunday Driver', 1, -1, -2, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Criminal Record', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Probation', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Illegal Immigrant', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Wanted by Law Enforcement', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Audit', 1, -1, -2, 'rHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Demanding Career', 2, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Primary Breadwinner', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Uninsured', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Alimony Payments', 1, 0, -2, 'rHunter')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Homeless', 4, -1, -2, 'rHunter')");db_query(Database, large_string);
		}
		if(!strcmp(params, "werewolfmerits", false))
		{
			// Kinfolk Merits & Flaws
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Feral Appearance', 1, 0, -1, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Barren/Sterile', 4, 0, -2, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Wolf-sense', 1, 0, -1, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Gall', 2, 0, -1, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Recognize Garou', 2, 0, -1, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Inferiority Complex', 1, 0, -2, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Ulterior Motive', 2, 0, -2, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Good Old Boy/Girl', 0, 2, -1, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Outsider', 2, 0, -2, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Fetish', 5, 0, -1, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Fetish', 7, 0, -1, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Gnosis', 5, 0, -1, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Gnosis', 7, 0, -1, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Veiled', 5, 0, -2, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Airhead', 1, 0, -2, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Flashbacks', 1, 0, -2, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Flashbacks', 3, 0, -2, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Supernatural Kinfolk', 4, 0, -1, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Supernatural Kinfolk', 4, 0, -1, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Wyrm-Tainted', 4, 0, -2, 'Kinfolk')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Unscented', 1, 0, -2, 'Kinfolk')");db_query(Database, large_string);		

			// W20 - Core Rulebook
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Hearing)', 1, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Sight)', 1, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Smell)', 1, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Taste)', 1, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Alcohol Tolerance', 1, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Ambidextrous', 1, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Double Jointed', 1, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mixed-morph', 1, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mixed-morph', 5, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Perfect Balance', 1, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Wolf Sight', 1, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bad Taste', 2, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Fair Glabro', 2, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lack of Scent', 2, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Physically Impressive', 2, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Daredevil', 3, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Long-Distance Runner', 3, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Weapons', 3, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Weapons', 4, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Huge Size', 4, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Metamorph', 7, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Animal Musk', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Anosmia', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hard of Hearing', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Monochrome Vision', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('No Partial Transformation', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Short', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Strict Carnivore', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('One Eye', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bad Sight', 3, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Deformity', 3, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Double Jeopardy', 3, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lame', 3, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Monstrous', 3, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('One Arm', 3, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Deaf', 4, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mute', 4, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blind', 6, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Common Sense', 1, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Computer Aptitude', 1, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Concentration', 1, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Expert Driver', 1, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Language', 1, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lightning Calculator', 1, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mechanical Aptitude', 1, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Time Sense', 1, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Berserker', 2, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Code of Honor', 2, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Eidetic Memory', 2, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Inner Strength', 2, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Linguist', 2, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Seldom Sleeps', 2, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Calm Heart', 3, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Iron Will', 3, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Jack Of All Trades', 3, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Self Confident', 5, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Untamable', 5, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Compulsion', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Impatient', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Intolerance', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Nightmares', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Overconfident', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Shy', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Soft Hearted', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Speech Impediment', 1, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Amnesia', 2, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Curiosity', 2, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Pack Mentality', 2, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Phobia', 2, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Phobia', 3, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Short Fuse', 2, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Territorial', 2, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vengeful', 2, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Absent-Minded', 3, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Deranged', 3, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Driving Goal', 3, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hatred', 3, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Weak-Willed', 3, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Ability Deficit', 5, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Flashbacks', 6, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Family Support', 1, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Favor', 1, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Favor', 3, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Pitiable', 1, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Camp Goodwill', 1, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Animal Magnetism', 2, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Leader', 2, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Notable Heritage', 2, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Reputation', 2, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Supporter', 2, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Noted Messenger', 3, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Supernatural Companion', 3, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Conniver', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dark Secret', 1, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enemy', 1, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enemy', 3, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enemy', 5, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Naive', 1, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Twisted Upbringing', 1, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Camp Enmity', 1, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Gullible', 2, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Persistent Parents', 2, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Notoriety', 3, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Ward', 3, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hunted', 4, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Metis Child', 4, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Ancestor Ally', 1, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Moon-Bound', 1, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Spirit Magnet', 1, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Danger Sense', 3, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lucky', 3, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Channel', 3, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('True Love', 4, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Immune to Wyrm Emanations', 6, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Silver Tolerance', 7, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Banned Transformation', 1, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Banned Transformation', 2, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Banned Transformation', 3, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Banned Transformation', 4, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Banned Transformation', 5, 2, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Banned Transformation', 6, 2, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 1, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 2, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 3, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 4, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 5, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Foe from the Past', 1, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Foe from the Past', 2, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Foe from the Past', 3, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Forced Transformation', 1, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Forced Transformation', 2, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Insane Ancestor', 1, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Slip Sideways', 1, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Docile', 1, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Docile', 3, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mark of the Predator', 2, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sign of the Wolf', 2, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Pierced Veil', 3, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Harano Prone', 4, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dark Fate', 5, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Taint of Corruption', 7, 2, -2)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Feral Near-Man', 5, 2, -1)");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Good Instincts', 3, 2, -1)");db_query(Database, large_string);	
			//format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('', 1, 2, -2)");db_query(Database, large_string);		
		}
		if(!strcmp(params, "vampiremerits", false))
		{
			large_string[0] = EOS;
			 
			/*
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Acute Sense (Hearing)', 1, 1, 'The difficulties for all tasks involving the use of this particular sense are reduced by two.', -1)");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Acute Sense (Sight)', 1, 1, 'The difficulties for all tasks involving the use of this particular sense are reduced by two.', -1)");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Acute Sense (Smell)', 1, 1, 'The difficulties for all tasks involving the use of this particular sense are reduced by two.', -1)");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Acute Sense (Taste)', 1, 1, 'The difficulties for all tasks involving the use of this particular sense are reduced by two.', -1)");db_query(Database, large_string);
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Ambidextrous', 1, -1, 'You can perform tasks with the •wrong• hand at no penalty.'");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Bruiser', 1, -1, 'All Intimidation rolls against those who have not demonstrated their physical superiorityto you are at -1 difficulty.', -1");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Catlike Balance', 1, -1, 'Reduce difficulties of all balance-related rolls (e.g., Dexterity + Athletics to walk along a narrow ledge) by two.', -1");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Early Riser', 1, -1, 'You seem to have the ability to work on less rest than others. If you have this Merit, you cannot take the Deep Sleeper Flaw.', -1");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Eat Food', 1, -1, 'You have the capacity to eat food and even savor its taste. Digestion is impossible, it is necessary to heave it up later.', -1");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Friendly Face', 1, -1, 'You have a face that reminds everyone of someone. -1 diff. on all Social rolls (no for Intimidation) on first meeting.', -1");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Blush of Health', 2, -1, 'You look more hale and healthy in appearance than other vampires, allowing you to blend with human society much more easily.', -1");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Enchanting Voice', 2, -1, 'The difficulties of all rolls involving the use of the voice to persuade, charm, or command are reduced by two.', -1)");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Daredevil', 3, -1, 'When attempting exceptionally risky non-combat actions, add an additional three dice to your rolls, negate a single botch. Actions must be diff. 8+ and have the potential to inflict at least three health levels of damage if failed.', -1)");db_query(Database, large_string);
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Efficient Digestion', 3, -1, 'You are able to draw more than the usual amount of nourishment from blood. When feeding, you gain an additional point to your blood pool for every two points of blood you consume.', -1)");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Huge Size', 4, -1, 'You are abnormally large in size, at least 6•10• and 300 pounds in weight. Aside from making you extremely noticeable in public, this extra mass bestows an additional Bruised health level.', -1)");db_query(Database, large_string);		 
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Hard of Hearing', 1, -1, 'Your hearing is defective. The difficulties of any rolls involving the use of hearing are increased by two.', -2)");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Short', 1, -1, 'You are well below average height. You have difficulty reaching or manipulating objects designed for normal adult size, and your running speed is one-half that of an average human.', -2)");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Smell of the Grave', 1, -1, 'You exude an odor of dampness and newly turned earth. Difficulties of all Social rolls to affect mortals increase by one.', -2)");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Tic/Twitch', 1, -1, 'You have some sort of repetitive motion that you make in times of stress. It costs one Willpower to refrain from engaging in your tic.', -2)");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Bad Sight', 1, -1, 'Your sight is defective. The difficulties of any die rolls involving the use of your eyesight are increased by two. ', -2)");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Bad Sight', 3, -1, 'Your sight is defective. The difficulties of any die rolls involving the use of your eyesight are increased by two. ', -2)");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Fourteenth Generation', 2, -1, 'You were created five or fewer years ago by a member of the Thirteenth Generation. Generation and Status backgrounds are precluded. Maximum four dots for disciplines.', -2)");db_query(Database, large_string);
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Fifteenth Generation', 4, -1, '', -2)");db_query(Database, large_string);
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('', 1, -1, '', -2)");db_query(Database, large_string);
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('', 1, -1, '', -2)");db_query(Database, large_string);
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('', 1, -1, '', -2)");db_query(Database, large_string);	
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('', 1, -1, '', -2)");db_query(Database, large_string);
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('', 1, -1, '', -2)");db_query(Database, large_string);
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('', 1, -1, '', -2)");db_query(Database, large_string);
				format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('', 1, -1, '', -2)");db_query(Database, large_string);
			*/
			// Core Rulebook
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Hearing)', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Sight)', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Smell)', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Taste)', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Ambidextrous', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bruiser', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Catlike Balance', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Early Riser', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Eat Food', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Friendly Face', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blush of Health', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enchanting Voice', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Daredevil', 3, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Efficient Digestion', 3, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Huge Size', 1, 4, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hard of Hearing', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Short', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Smell of the Grave', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Tic/Twitch', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bad Sight', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bad Sight', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Fourteenth Generation', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Fifteenth Generation', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Disfigured', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dulled Bite', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Infectious Bite', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('One Eye', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vulnerability to Silver', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Open Wound', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Open Wound', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Addiction', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Child', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Deformity', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Glowing Eyes', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lame', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lazy', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Monstrous', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Permanent Fangs', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Permanent Wound', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Slow Healing', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Disease Carrier', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Deaf', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mute', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Thin Blood', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Flesh of the Corpse', 5, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Infertile Vitae', 5, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blind', 6, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Coldy Logical', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Common Sense', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Concentration', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Introspection', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Language', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Time Sense', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Useful Knowledge', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Code of Honor', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Computer Aptitude', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Eidetic Memory', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Light Sleeper', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Linguist', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Calm Heart', 3, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Iron Will', 3, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Precocious', 3, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Deep Sleeper', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Impatient', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Nightmares', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Prey Exclusion', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Shy', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Soft-Hearted', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Speech Impediment', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Unconvinced', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Amnesia', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lunacy', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Phobia', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Short Fuse', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Stereotype', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Territorial', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Thirst for Innocence', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Vengeful', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Victim of the Masquerade', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Weak-Willed', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Conspicuous Consumption', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Guilt-Wracked', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Flashbacks', 6, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Elysium Regular', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Former Ghoul', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Harmless', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Natural Leader', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Prestigious Sire', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Protege', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rep', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sabbat Survivor', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Boon', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Boon', 6, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bullyboy', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Old Pal', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lawman`s Friend', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Open Road', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sanctity', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Scholar of Enemies', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Scholar of Others', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Friend of the Underground', 3, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mole', 3, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rising Star', 3, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Broken Bond', 4, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Clan Friendship', 4, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Primogen/Bishop Friendship', 4, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Botched Presentation', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dark Secret', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Expendable', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Incomplete Understanding', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Infamous Sire', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Mistaken Identity', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('New Arrival', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('New Kid', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Recruitment Target', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sire`s Resentment', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Special Responsibility', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sympathizer', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enemy', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enemy', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enemy', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enemy', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Enemy', 5, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bound', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Catspaw', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Escaped Target', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Failure', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Masquerade Breaker', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hunted', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Old Flame', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rival Sires', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Uppity', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Disgrace to the Blood', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Former Prince', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hunted Like a Dog', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Narc', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sleeping With the Enemy', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Clan Enmity', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Loathsome Regnant', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Overextended', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Probationary Sect Member', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blood Hunted', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blood Hunted', 6, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Laughingstock', 5, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Red List', 7, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Deceptive Aura', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Healing Touch', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Inoffensive to Animals', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Medium', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Magic Resistance', 2, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Hidden Diablerie', 3, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lucky', 3, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Oracular Ability', 3, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Spirit Mentor', 1, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('True Love', 4, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Additional Discipline', 5, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Unbondable', 5, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('True Faith', 7, 1, -1)");db_query(Database, large_string);
			//format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Nine Lives', 6, 1, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cast No Reflection', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cold Breeze', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Repulsed by Garlic', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Touch of Frost', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cursed', 5, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Beacon of the Unholy', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Deathsight', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Eerie Presence', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lord of the Flies', 2, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Can`t Cross Running Water', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Haunted', 1, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Repelled by Crosses', 3, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Grip of the Damned', 4, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dark Fate', 5, 1, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Light-Sensitive', 5, 1, -2)");db_query(Database, large_string);
			// Lore of the Clans: 
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sectarian Ally', 1, 1, -1, 'Assamite')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Thousand Meter Killer', 1, 1, -1, 'Assamite')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Outcast', 2, 1, -2, 'Assamite')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Broken Antitribu', 3, 1, -2, 'Assamite')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Multiple Curses', 3, 1, -2, 'Assamite')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Fury`s Focus', 3, 1, -1, 'Brujah')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Dynamic Personality', 5, 1, -1, 'Brujah')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Obvious Predator', 2, 1, -2, 'Brujah')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Drug Resistance', 2, 1, -2, 'Followers of Set')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Addictive Blood', 3, 1, -1, 'Followers of Set')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Setite Initiate', 5, 1, -1, 'Followers of Set')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Scales', 1, 1, -2, 'Followers of Set')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Scales', 2, 1, -2, 'Followers of Set')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Scales', 3, 1, -2, 'Followers of Set')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Venomous Bite', 2, 1, -2, 'Followers of Set')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Forked Tongue', 2, 1, -2, 'Followers of Set')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Heartless', 4, 1, -2, 'Followers of Set')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Aura of the Typhon', 5, 1, -2, 'Followers of Set')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Hive-Minded', 1, 1, -1, 'Gangrel')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Hive-Minded', 2, 1, -1, 'Gangrel')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Skald', 2, 1, -1, 'Gangrel')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Lesser Mark of the Beast', 4, 1, -1, 'Gangrel')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Totemic Change', 5, 1, -1, 'Gangrel')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Member of the Pack', 2, 1, -2, 'Gangrel')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Rat in a Cage', 2, 1, -2, 'Gangrel')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Cannibal', 1, 1, -1, 'Giovanni')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Consanguineous Resistance', 1, 1, -1, 'Giovanni')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Mortuario', 2, 1, -1, 'Giovanni')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Mortuario', 4, 1, -1, 'Giovanni')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sanguine Incongruity', 5, 1, -1, 'Giovanni')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Inbred', 5, 1, -2, 'Giovanni')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Inbred', 1, 1, -2, 'Giovanni')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Shadow Walker', 6, 1, -2, 'Giovanni')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Court Favorite', 1, 1, -1, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Court Favorite', 5, 1, -1, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Eyes of Shadow', 1, 1, -1, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Eyes of Shadow', 4, 1, -1, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Bigger Boys Came', 2, 1, -1, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Call of the Sea', 2, 1, -1, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Controllable Night Sight', 1, 1, -1, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Secret Stash', 2, 1, -1, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Secret Stash', 5, 1, -1, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Aura of Command', 3, 1, -1, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('King or Queen of Shadow', 4, 1, -1, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Long-Term Planning', 4, 1, -1, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Instrument of God', 5, 1, -1, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Uncontrollable Night Sight', 2, 1, -2, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Insubordinate', 3, 1, -2, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Unproven', 3, 1, -2, 'Lasombra')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Distracting Aura', 2, 1, -1, 'Malkavian')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Prophetic Dreams', 2, 1, -1, 'Malkavian')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Cold Read', 3, 1, -1, 'Malkavian')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Paper Trail', 2, 1, -1, 'Malkavian')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Stigmata', 2, 1, -2, 'Malkavian')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Stigmata', 4, 1, -2, 'Malkavian')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Infectious', 3, 1, -2, 'Malkavian')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Overstimulated', 3, 1, -2, 'Malkavian')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Dead Inside', 4, 1, -2, 'Malkavian')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Foul Blood', 1, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Lizard Limbs', 1, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Long Fingers', 1, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Monstrous Maw', 1, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Piscine', 1, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Slimy', 1, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Spawning Pool', 1, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Spawning Pool', 3, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Tunnel Rat', 1, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Tunnel Rat', 5, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sleep Unseen', 2, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Tough Hide', 2, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('False Reflection', 3, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Patagia', 4, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Rugged Bad Looks', 5, 1, -1, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Stench', 1, 1, -2, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Dangerous Secret', 1, 1, -2, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Dangerous Secret', 5, 1, -2, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Anosmia', 2, 1, -2, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Parasitic Infestation', 2, 1, -2, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Bestial', 3, 1, -2, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Enemy Brood', 3, 1, -2, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Putrescent', 4, 1, -2, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Contagious', 5, 1, -2, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Incoherent', 5, 1, -2, 'Nosferatu')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Brahmin', 1, 1, -1, 'Ravnos')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Kshatriya', 1, 1, -1, 'Ravnos')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Legerdemain', 1, 1, -1, 'Ravnos')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Mute Devotion', 1, 1, -1, 'Ravnos')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Vaishya', 1, 1, -1, 'Ravnos')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Critters', 2, 1, -1, 'Ravnos')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Heart of Needles', 3, 1, -1, 'Ravnos')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Chandala', 1, 1, -2, 'Ravnos')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Flawed Reality', 2, 1, -2, 'Ravnos')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Oathbreaker', 2, 1, -2, 'Ravnos')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Lost Svadharma', 3, 1, -2, 'Ravnos')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Impressive Restraint', 2, 1, -1, 'Toreador')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Master of the Masquerade', 2, 1, -1, 'Toreador')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Slowed Degeneration', 5, 1, -1, 'Toreador')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Tortured Artist', 1, 1, -2, 'Toreador')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Private Life', 3, 1, -2, 'Toreador')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Indelible', 1, 1, -1, 'Toreador')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Indelible', 2, 1, -1, 'Toreador')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Embraced without the Cup ', 1, 1, -1, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Secret Society Member', 1, 1, -1, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Keys to the Library', 1, 1, -1, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Keys to the Library', 5, 1, -1, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Outside Haven', 2, 1, -1, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Unmarked Antitribu', 2, 1, -1, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Unmarked Antitribu', 5, 1, -1, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Quartermaster', 1, 1, -1, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Arcane Curse', 1, 1, -2, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Arcane Curse', 5, 1, -2, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Cloistered', 2, 1, -2, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Betrayer`s Mark', 3, 1, -2, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Bound to the Clan', 3, 1, -2, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Mage Blood', 5, 1, -2, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Thaumaturgically Inept', 5, 1, -2, 'Tremere')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Connoisseur', 2, 1, -1, 'Ventrue')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Blessed by St. Gustav', 4, 1, -1, 'Ventrue')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Uncommon Vitae Preference', 2, 1, -2, 'Ventrue')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Personal Masquerade', 3, 1, -1, 'Caitiff')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Clan Weakness', 2, 1, -2, 'Caitiff')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Fangless', 2, 1, -2, 'Caitiff')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Ignorance', 2, 1, -2, 'Caitiff')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Bulimia', 4, 1, -2, 'Caitiff')");db_query(Database, large_string);
			
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Bioluminescence', 1, 1, -1, 'Tzimisce')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Pain Tolerance', 2, 1, -1, 'Tzimisce')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Dracon`s Temperament', 3, 1, -1, 'Tzimisce')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Haven Affinity', 3, 1, -1, 'Tzimisce')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Revenant Disciplines', 3, 1, -1, 'Tzimisce')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Promethean Clay', 5, 1, -1, 'Tzimisce')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Unblinking', 1, 1, -2, 'Tzimisce')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Ancestral Soil Dependence', 2, 1, -2, 'Tzimisce')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Faceless', 3, 1, -2, 'Tzimisce')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Privacy Obsession', 3, 1, -2, 'Tzimisce')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Revenant Weakness', 1, 1, -2, 'Tzimisce')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Consumption', 5, 1, -2, 'Tzimisce')");db_query(Database, large_string);
			// Anarchs Unbound:
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Peacemaker', 2, 1, -1, 'Anarch Movement')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Prized Patch', 2, 1, -1, 'Anarch Movement')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Soapbox', 3, 1, -1, 'Anarch Movement')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sugar Daddy', 3, 1, -1, 'Anarch Movement')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Expiration Date', 2, 1, -2, 'Anarch Movement')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Black Sheep', 5, 1, -2, 'Anarch Movement')");db_query(Database, large_string);
			// Ghouls & Revenants
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Loyalty', 5, 0, -1, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Black and White', 2, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Fixation', 2, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Fixation', 4, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Fixation', 6, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Duplicitous', 3, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Groomed for Embrace', 5, 0, -1, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Isolated Upbringing', 1, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Obsession', 1, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Obsession', 2, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Obsession', 5, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Squeamish', 1, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Squeamish', 3, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Domitor Pariah', 2, 0, -2, 'Ghoul')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Under Surveillance', 2, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Under Surveillance', 4, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Under Surveillance', 6, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Loose Lips', 3, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Self-Preservation', 3, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Turncoat', 4, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Blood Feud', 5, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Hunted', 5, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Problem with Authority', 5, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Fugitive', 6, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Albino', 1, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Vicissitude Modifications', 1, 0, -1, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Vicissitude Modifications', 7, 0, -1, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Light Sensitive', 2, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Light Sensitive', 4, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Light Sensitive', 6, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Cannibal', 3, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Hemophiliac', 3, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Seizures', 3, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Pale Aura', 2, 0, -1, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Clear-Sighted', 4, 0, -1, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Blood Flaw Immunity', 5, 0, -1, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Poisonous Blood', 5, 0, -1, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Unbondable', 6, 0, -1, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Virulent Strike', 7, 0, -1, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Finicky Palate', 1, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Artificially Aged', 2, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Offensive to Animals', 2, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Romantic Notions', 2, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Vitae Sink', 3, 0, -2, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Occult Library', 2, 0, -1, 'Ghoul')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Occult Library', 4, 0, -1, 'Ghoul')");db_query(Database, large_string);
			
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Isolated Upbringing', 1, 0, -2, 'Society of Leopold')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Religious Hysteria', 3, 0, -2, 'Society of Leopold')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Ecclesial Rank', 1, 0, -1, 'Society of Leopold')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Ecclesial Rank', 3, 0, -1, 'Society of Leopold')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sanctioned Witch', 2, 0, -1, 'Society of Leopold')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Rebel', 1, 0, -2, 'Society of Leopold')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Rebel', 3, 0, -2, 'Society of Leopold')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Ecstatic', 2, 0, -1, 'Society of Leopold')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Ecumenist', 4, 0, -1, 'Society of Leopold')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Fist of God', 7, 0, -1, 'Society of Leopold')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Holy Aura', 2, 0, -1, 'Society of Leopold')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Paradise Lost', 2, 0, -2, 'Society of Leopold')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Detached', 4, 0, -1, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Black and White', 1, 0, -2, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Combat Novice', 2, 0, -2, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Addicted to Vampire Blood', 3, 0, -2, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Hemophiliac', 3, 0, -2, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Occult Library', 2, 0, -1, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Occult Library', 4, 0, -1, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Science Laboratory', 2, 0, -1, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Pale Aura', 2, 0, -1, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Clear-Sighted', 3, 0, -1, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Poisonous Blood', 5, 0, -1, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sanctuary', 5, 0, -1, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Psychic Feedback', 1, 0, -2, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Psychic Feedback', 2, 0, -2, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Psychic Feedback', 6, 0, -2, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Unsettling Effect', 1, 0, -2, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Unsettling Effect', 3, 0, -2, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Psi Focus', 3, 0, -2, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Psi Focus', 5, 0, -2, 'hHunter')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Paranoid', 2, 0, -2, 'Government Agency')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Siege Mentality', 3, 0, -2, 'Government Agency')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Manchurian Candidate', 5, 0, -2, 'Government Agency')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Inter-Agency Liaison', 2, 0, -1, 'Government Agency')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sanction', 2, 0, -1, 'Government Agency')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Embedded Agent', 3, 0, -1, 'Government Agency')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Non-Standard Access', 3, 0, -1, 'Government Agency')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Credulous', 3, 0, -2, 'Government Agency')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Credulous', 5, 0, -2, 'Government Agency')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Backup Identity', 3, 0, -1, 'Government Agency')");db_query(Database, large_string);
			
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Aging', 3, 0, -2, 'The Arcanum')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Cultural Chameleon', 2, 0, -1, 'The Arcanum')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Isolated Upbringing', 2, 0, -2, 'The Arcanum')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Research Grant', 2, 0, -1, 'The Arcanum')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Clear Sighted', 5, 0, -1, 'The Arcanum')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Eidetic Memory', 2, 0, -1, 'The Arcanum')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Innocent', 1, 0, -1, 'The Arcanum')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start, type) VALUES ('Sabbat Survivor', 1, 0, -1, 'The Arcanum')");db_query(Database, large_string);
		}
		if(!strcmp(params, "gifts", false))
		{
			large_string[0] = EOS;
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Apecraft`s Blessings', 1, 2, 'Homid')");db_query(Database, large_string);	
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('City Running', 1, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Master of Fire', 1, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Persuasion', 1, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Smell of Man', 1, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Jam Technology', 2, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Mark of the Wolf', 2, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Speech of the World', 2, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Staredown', 2, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Calm the Savage Beast', 3, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Cowing the Bullet', 3, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Disquiet', 3, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Reshape', 3, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Body Shift', 4, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Bury the Wolf', 4, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Cocoon', 4, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Spirit Ward', 4, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Assimilation', 5, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Beyond Human', 5, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Part the Veil', 5, 2, 'Homid')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Create Element', 1, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Primal Anger', 1, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Rat Head', 1, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sense Wyrm', 1, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Shed', 1, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Burrow', 1, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Curse of Hatred', 2, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Form Mastery', 2, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sense Silver', 2, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Chameleon', 3, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Eyes of the Cat', 3, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Mental Speech', 3, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Shell', 3, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Gift of the Porcupine', 4, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Lash of Rage', 4, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Rattler`s Bite', 4, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wither Limb', 4, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Madness', 5, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Protean Form', 5, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Totem Gift', 5, 2, 'Metis')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Hare`s Leap', 1, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Heightened Senses', 1, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sense Prey', 1, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Predator`s Arsenal', 1, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Prey Mind', 1, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Axis Mundi', 2, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Eye of the Eagle', 2, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Name the Spirit', 2, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Scent of Sight', 2, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Catfeet', 3, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Monkey Tail', 3, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sense the Unnatural', 3, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Silence the Weaver', 3, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Strength of Gaia', 3, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Beast Life', 3, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Gnaw', 4, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Scream of Gaia', 4, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Terror of the Dire Wolf', 4, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Elemental Gift', 5, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Song of the Great Beast', 5, 2, 'Lupus')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Blur of the Milky Eye', 1, 2, 'Ragabash', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Infectious Laughter', 1, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Liar`s Face', 1, 2, 'Ragabash', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Open Seal', 1, 2, 'Ragabash', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Scent of Running Water', 1, 2, 'Ragabash', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Blissful Ignorance', 2, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Pulse of the Prey', 2, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Spider`s Song', 2, 2, 'Ragabash', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Taking the Forgotten', 2, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Gremlins', 3, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Liar`s Craft', 3, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Monkey Tail', 3, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Open Moon Bridge', 3, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Pathfinder', 3, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Luna`s Blessing', 4, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Umbral Dodge', 4, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Whelp Body', 4, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Thieving Talons of the Magpie', 5, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Thousand Forms', 5, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Firebringer', 6, 2, 'Ragabash')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Mother`s Touch', 1, 2, 'Theurge', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Sense Wyrm', 1, 2, 'Theurge', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Spirit Speech', 1, 2, 'Theurge', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Umbral Tether', 1, 2, 'Theurge', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Battle Mandala', 2, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Command Spirit', 2, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Name the Spirit', 2, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sight From Beyond', 2, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Exorcism', 3, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Pulse of the Invisible', 3, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Umbral Camouflage', 3, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Web Walker', 3, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Blurring the Mirror', 4, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Grasp the Beyond', 4, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Spirit Drain', 4, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Spirit Ward', 4, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Feral Lobotomy', 5, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Malleable Spirit', 5, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Ultimate Argument of Logic', 5, 2, 'Theurge')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Fangs of Judgement', 1, 2, 'Philodox', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Persuasion', 1, 2, 'Philodox', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Resist Pain', 1, 2, 'Philodox', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Scent of the True Form', 1, 2, 'Philodox', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Truth of Gaia', 1, 2, 'Philodox', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Call to Duty', 2, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Command the Gathering', 2, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('King of the Beasts', 2, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Strength of Purpose', 2, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Mental Speech', 3, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Scent of the Oathbreaker', 3, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sense Balance', 3, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Weak Arm', 3, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wisdom of the Ancient Ways', 3, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Roll Over', 4, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Scent of Beyond', 4, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Take the True Form', 4, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Geas', 5, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wall of Granite', 5, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Break the Bonds', 6, 2, 'Philodox')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Beast Speech', 1, 2, 'Galliard', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Call of the Wyld', 1, 2, 'Galliard', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Heightened Senses', 1, 2, 'Galliard', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Mindspeak', 1, 2, 'Galliard', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Perfect Recall', 1, 2, 'Galliard', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Call of the Wyrm', 2, 2, 'Galliard')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Command the Gathering', 2, 2, 'Galliard')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Distractions', 2, 2, 'Galliard')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Dreamspeak', 2, 2, 'Galliard')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Howls in the Night', 2, 2, 'Galliard')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Eye of the Cobra', 3, 2, 'Galliard')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Song of Heroes', 3, 2, 'Galliard')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Song of Rage', 3, 2, 'Galliard')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Song of the Siren', 3, 2, 'Galliard')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Bridge Walker', 4, 2, 'Galliard')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Gift of Dreams', 4, 2, 'Galliard')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Shadows by the Firelight', 4, 2, 'Galliard')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Fabric of the Mind', 5, 2, 'Galliard')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Head Games', 5, 2, 'Galliard')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Falling Touch', 1, 2, 'Ahroun', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Inspiration', 1, 2, 'Ahroun', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Pack Tactics', 1, 2, 'Ahroun', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Razor Claws', 1, 2, 'Ahroun', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Spur Claws', 1, 2, 'Ahroun', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sense Silver', 2, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Shield of Rage', 2, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Spirit of the Fray', 2, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('True Fear', 2, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Combat Healing', 3, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Heart of Fury', 3, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Silver Claws', 3, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wind Claws', 3, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Body Shift', 4, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Clenched Jaw', 4, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Full Moon`s Light', 4, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Stoking Fury`s Furnace', 4, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Kiss of Helios', 5, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Strength of Will', 5, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Unstoppable Warrior', 6, 2, 'Ahroun')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Breath of the Wyld', 1, 2, 'Black Furies', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Man`s Skin', 1, 2, 'Black Furies', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Heightened Senses', 1, 2, 'Black Furies', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Sense Wyrm', 1, 2, 'Black Furies', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Wyld Resurgence', 1, 2, 'Black Furies', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Curse of Aeolus', 2, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Form Mastery', 2, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Kali`s Tongue', 2, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Kneel', 2, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Pulse of the Prey', 2, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Coup de Grace', 3, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Heart Claw', 3, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Visceral Agony', 3, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wings of Pegasus', 3, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Beast Life', 4, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Body Wrack', 4, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wasp Talons', 4, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Gorgon`s Gaze', 5, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Thousand Forms', 5, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wyld Warp', 5, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Cooking', 1, 2, 'Bone Gnawers', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Desperate Strength', 1, 2, 'Bone Gnawers', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Resist Toxin', 1, 2, 'Bone Gnawers', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Scent of Sweet Honey', 1, 2, 'Bone Gnawers', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Trash is Treasure', 1, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Between the Cracks', 2, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Blissful Ignorance', 2, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Cornered Rat's Ferocity', 2, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Guise of the Hound', 2, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Odious Aroma', 2, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Call the Rust', 3, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Gift of the Skunk', 3, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Gift of the Termite', 3, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Laugh of the Hyena', 3, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Reshape Object', 3, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Attunement', 4, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Blink', 4, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Infest', 4, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Riot', 5, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Survivor', 5, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Brother`s Scent', 1, 2, 'Children of Gaia', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Jam Weapon', 1, 2, 'Children of Gaia', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Mercy', 1, 2, 'Children of Gaia', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Mother`s Touch', 1, 2, 'Children of Gaia', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Resist Pain', 1, 2, 'Children of Gaia', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Calm', 2, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Grandmother`s Touch', 2, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Luna`s Armor', 2, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Para Bellum', 2, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Unicorn`s Arsenal', 2, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Calm the Savage Beast', 3, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Dazzle', 3, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Lover`s Touch', 3, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Spirit Friend', 3, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Beast Life', 4, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Serenity', 4, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Strike the Air', 4, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Uncaught Since the Primal Morn', 4, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Halo of the Sun', 5, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('The Living Wood', 5, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Faerie Light', 1, 2, 'Fianna', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Hare`s Leap', 1, 2, 'Fianna', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Persuasion', 1, 2, 'Fianna', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Resist Toxin', 1, 2, 'Fianna', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Two Tongues', 1, 2, 'Fianna', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Glib Tongue', 2, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Flame Dance', 2, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Form Mastery', 2, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Howl of the Banshee', 2, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Howl of the Unseen', 2, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Faerie Kin', 3, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Fair Fortune', 3, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Ley Lines', 3, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Reshape Object', 3, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Song of the Siren', 3, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Balor`s Gaze', 4, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Phantasm', 4, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Call the Hunt', 5, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Fog on the Moor', 5, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Gift of the Spriggan', 5, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Lightning Reflexes', 1, 2, 'Get of Fenris', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Master of Fire', 1, 2, 'Get of Fenris', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Razor Claws', 1, 2, 'Get of Fenris', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Resist Pain', 1, 2, 'Get of Fenris', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Visage of Fenris', 1, 2, 'Get of Fenris', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Fangs of the North', 2, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Halt the Coward`s Flight', 2, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Snarl of the Predator', 2, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Troll Skin', 2, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Might of Thor', 3, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Redirect Pain', 3, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Venom Blood', 3, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Heart of the Mountain', 4, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Hero`s Stand', 4, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Scream of Gaia', 4, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Endurance of Heimdall', 5, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Horde of Valhalla', 5, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Fenris` Bite', 5, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Call Great Fenris', 6, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Control Simple Machine', 1, 2, 'Glass Walkers', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Diagnostics', 1, 2, 'Glass Walkers', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Persuasion', 1, 2, 'Glass Walkers', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Plug and Play', 1, 2, 'Glass Walkers', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Trick Shot', 1, 2, 'Glass Walkers', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Cybersenses', 2, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Hands Full of Thunder', 2, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Jam Technology', 2, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Power Surge', 2, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Steel Fur', 2, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Control Complex Machine', 3, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Intrusion', 3, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Electroshock', 3, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Elemental Favor', 3, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Attunement', 4, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Doppelganger', 4, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Signal Rider', 4, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Tech Speak', 4, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Chaos Mechanics', 5, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Summon Net-Spider', 5, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Beast Speech', 1, 2, 'Red Talons', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Eye of the Hunter', 1, 2, 'Red Talons', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Hidden Killer', 1, 2, 'Red Talons', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Scent of Running Water', 1, 2, 'Red Talons', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Wolf at the Door', 1, 2, 'Red Talons', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Beastmind', 2, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Pulse of the Prey', 2, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Howls in the Night', 2, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Shadows of the Impergium', 2, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Elemental Favor', 3, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Render Down', 3, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Territory', 3, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Trackless Waste', 3, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Gorge', 4, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Howl of Death', 4, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Quicksand', 4, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Curse of Lycaon', 5, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Gaia`s Vengeance', 5, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Scabwalker Curse', 5, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Shield of Gaia', 6, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Aura of Confidence', 1, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Fatal Flaw', 1, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Seizing the Edge', 1, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Shadow Weaving', 1, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Whisper Catching', 1, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Clap of Thunder', 2, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Cold Voice of Reason', 2, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Howls in the Night', 2, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Luna`s Armor', 2, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Song of the Earth Mother', 2, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Direct the Storm', 3, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Icy Chill of Despair', 3, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Paralyzing Stare', 3, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Shadow Cutting', 3, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Under the Gun', 3, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Open Wounds', 4, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Durance', 4, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Strength of the Dominator', 4, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Obedience', 5, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Shadow Pack', 5, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Heaven`s Guidance', 1, 2, 'Silent Striders', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Sense Wyrm', 1, 2, 'Silent Striders', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Silence', 1, 2, 'Silent Striders', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Speed of Thought', 1, 2, 'Silent Striders', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Visions of Duat', 1, 2, 'Silent Striders', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Axis Mundi', 2, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Blissful Ignorance', 2, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Messenger`s Fortitude', 2, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Speech of the World', 2, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Tread Sebek`s Back', 2, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Adaptation', 3, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Great Leap', 3, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Mark of the Death-Wolf', 3, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sense the Unnatural', 3, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Attunement', 4, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Black Mark', 4, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Dam the Heartflood', 4, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Speed Beyond Thought', 4, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Gate of the Moon', 5, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Reach the Umbra', 5, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Eye of the Falcon', 1, 2, 'Silver Fangs', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Falcon`s Grasp', 1, 2, 'Silver Fangs', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Inspiration', 1, 2, 'Silver Fangs', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Lambent Flame', 1, 2, 'Silver Fangs', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Sense Wyrm', 1, 2, 'Silver Fangs', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Empathy', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Hand Blade', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Luna`s Armor', 1, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sense Silver', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Unity of the Pack', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Burning Blade', 3, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Silver Claws', 3, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Talons of the Falcon', 3, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wrath of Gaia', 3, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Mastery', 4, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Mindblock', 4, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sidestep Death', 4, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Luna`s Avenger', 1, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Paws of the Newborn Cub', 5, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Renew the Cycle', 6, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Balance', 1, 2, 'Stargazers', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Channeling', 1, 2, 'Stargazers', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Falling Touch', 1, 2, 'Stargazers', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Iron Resolve', 1, 2, 'Stargazers', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Sense Wyrm', 1, 2, 'Stargazers', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Inner Light', 2, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Inner Strength', 2, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Resist Temptation', 2, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Surface Attunement', 2, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wuxing', 2, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Clarity', 3, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Merciful Blow', 3, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sense Balance', 3, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wind`s Returning Favor', 3, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Preternatural Awareness', 4, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Mindblock', 4, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Strike the Air', 4, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Circular Attack', 5, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Harmonious Unity of the Emerald Mother', 5, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wisdom of the Seer', 1, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Sense Magic', 1, 2, 'Uktena', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Sense Wyrm', 1, 2, 'Uktena', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Shroud', 1, 2, 'Uktena', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Spirit of the Lizard', 1, 2, 'Uktena', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Spirit Speech', 1, 2, 'Uktena', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Coils of the Serpent', 2, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Fetish Fetch', 2, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Shadows at Dawn', 1, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Spirit of the Bird', 2, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Spirit of the Fish', 2, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Banish Totem', 3, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Chains of Mist', 3, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Invisibility', 3, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Rending the Craft', 3, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Scrying', 3, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Call Elemental', 4, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Durance', 4, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Hand of the Earth Lords', 4, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Fabric of the Mind', 5, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Fetish Doll', 5, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Beat of the Heart-Drum', 1, 2, 'Wendigo', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Call the Breeze', 1, 2, 'Wendigo', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Camouflage', 1, 2, 'Wendigo', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Ice Echo', 1, 2, 'Wendigo', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, start) VALUES ('Resist Pain', 1, 2, 'Wendigo', 1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Cutting Wind', 2, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Claws of Frozen Death', 2, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Salmon Swim', 2, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Speak with Wind Spirits', 2, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('True Fear', 2, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Blood of the North', 3, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Bloody Feast', 3, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sky Running', 3, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wisdom of the Ancient Ways', 3, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Call of the Cannibal Spirit', 4, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Chill of Early Frost', 4, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Hero`s Stand', 4, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Scream of Gaia', 4, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Invoke the Spirits of the Storm', 1, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Heart of Ice', 5, 2, 'Wendigo')");db_query(Database, large_string);
			// revised gifts
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('The Hungry Hound', 1, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Smell of Success', 1, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Urban Ward', 1, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Declamation', 1, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('The Mark', 1, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Kitchen Chemistry', 1, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Dead End', 2, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Road Ward', 2, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Stone-Throwing Devil', 2, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('I Got a Rock', 2, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('On Patrol', 2, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Hootenanny', 2, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Lucky Bastard', 3, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Streets Tell Stories', 3, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Laugh of the Hyena', 3, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Rant and Rave', 3, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Cooter`s Revenge', 3, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Dumpster Diving', 3, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Shadow of the Rat', 4, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Face in the Crowd', 4, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Piping', 5, 2, 'Bone Gnawers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Help Me', 5, 2, 'Bone Gnawers')");db_query(Database, large_string);
			//
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Watchful Eyes', 1, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Stoking the Soul`s Fire', 2, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Barring the Will', 3, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Flames of Hestia', 3, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Bolster the True Name', 4, 2, 'Black Furies')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('True Shot', 1, 2, 'Black Furies', 'Amazons of Diana')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Flurry of Arrows', 2, 2, 'Black Furies', 'Amazons of Diana')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Blizzard of Arrows', 4, 2, 'Black Furies', 'Amazons of Diana')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Rend', 2, 2, 'Black Furies', 'Bacchanantes')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Storm the Mother`s Wrath', 5, 2, 'Black Furies', 'Bacchanantes')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Messenger`s Fortitude', 2, 2, 'Black Furies', 'Freebooters')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Omen of Power', 2, 2, 'Black Furies', 'Freebooters')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Spirit Loan', 2, 2, 'Black Furies', 'Moon-Daughters')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Truest Sacrament', 2, 2, 'Black Furies', 'Order of our Merciful Mother')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Spirit Smuggler', 1, 2, 'Black Furies', 'Sisterhood')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Winged Delivery', 3, 2, 'Black Furies', 'Sisterhood')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Walk With Hades', 5, 2, 'Black Furies', 'The Temple of Artemis')");db_query(Database, large_string);
			//
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Water-Conning', 1, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Swallow Rage', 1, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Domestic Seeming', 2, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Mule`s Bane', 2, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Soothe the Savage Beast', 3, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Words of the Alpha', 3, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('The Cleaving Hoof', 3, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Unicorn`s Grace', 1, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Uncaught Since the Primal Morn', 4, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Serpent-Diving', 4, 2, 'Children of Gaia')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Trust of Gaia', 5, 2, 'Children of Gaia')");db_query(Database, large_string);
			//
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Salmon Leap', 1, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Spear Dancing', 2, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Fire in the Belly', 2, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Pin The Eagle`s Wing', 1, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Forms of Cerunnos', 5, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Havgan`s Healing', 1, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Fog of War', 4, 2, 'Fianna')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Reverie', 2, 2, 'Fianna')");db_query(Database, large_string);
			//
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Safe Haven', 1, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Snow Running', 1, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sense Guilt', 2, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wearing the Bear Shirt', 2, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Loki`s Touch', 3, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Glory-Scars', 4, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Strength of the Ancestors', 5, 2, 'Get of Fenris')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('The Good Death', 5, 2, 'Get of Fenris')");db_query(Database, large_string);
			//
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Purify Meat', 1, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Predator`s Leap', 2, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Mother`s Rage', 3, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Blessing of the First Pack', 5, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Home in All Lands', 6, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Howl to the Pack', 1, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Primal Howl', 2, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Howl of Hunger', 3, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Shattering Howl', 5, 2, 'Red Talons')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Mark of the Prey', 2, 2, 'Red Talons', 'Warders of the Land')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Snap Man`s Chains', 3, 2, 'Red Talons', 'Warders of the Land')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Prey`s Cry', 1, 2, 'Red Talons', 'Lodge of the Predator Kings')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Offering of the Slain', 2, 2, 'Red Talons', 'Lodge of the Predator Kings')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Cub`s Lesson', 2, 2, 'Red Talons', 'Whelp`s Compromise')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Judgement', 2, 2, 'Red Talons', 'Whelp`s Compromise')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Reap the Soul', 2, 2, 'Red Talons', 'Dying Cub')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Pain of the Land', 4, 2, 'Red Talons', 'Dying Cub')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Silence of the Slain', 1, 2, 'Red Talons', 'Winter Packs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Rampage', 2, 2, 'Red Talons', 'Winter Packs')");db_query(Database, large_string);
			//
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Paper Butterfly', 1, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Imbalance', 1, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Channeling', 1, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Drunken Spider', 2, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wuxing', 2, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Mouthpiece of the Successor', 3, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wind`s Returning Favor', 3, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Summon the Chu-Mong', 4, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('The Silken Cloth', 4, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Ancestral Incarnation', 5, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Seed of Speech', 1, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sound of Suffering', 2, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Burning Fire-Mind', 2, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Seeking the Void', 4, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Liberation of Flesh', 5, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Thought-Form of the Twelve Ministers', 6, 2, 'Stargazers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Sense the Demonic', 1, 2, 'Stargazers', 'Demon Eaters')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Reverie of the Kol-Kin', 2, 2, 'Stargazers', 'Demon Eaters')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Word-to-Weapon', 2, 2, 'Stargazers', 'The Sacred Thread')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('The Teacher`s Ease', 2, 2, 'Stargazers', 'The Sacred Thread')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Eyes of Ignorance', 5, 2, 'Stargazers', 'The Sacred Thread')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Bird Bones', 2, 2, 'Stargazers', 'Trance Runners')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Seven Mile Leap', 2, 2, 'Stargazers', 'Trance Runners')");db_query(Database, large_string);
			//
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Nose-To-Tail', 1, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Lift-Your-Leg', 1, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Ice Echo', 1, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Scent of the Man-Eater', 2, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Salmon Swim', 2, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Devouring Rime', 2, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Tourniquet', 2, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Icicle-Hide', 3, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Strength of Pine', 3, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Whiteout', 3, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Shelter of Needles', 4, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Bark of Willow', 4, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Last Stand', 4, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wsitiplaju`s Bow', 4, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Balance of Wormwood', 5, 2, 'Wendigo')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Virgin Snow', 2, 2, 'Wendigo', 'Ghost Dance')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Claw-to-Thumb', 1, 2, 'Wendigo', 'Sacred Hoop')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Firewater`s Quench', 1, 2, 'Wendigo', 'Sacred Hoop')");db_query(Database, large_string);
			// 
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Raven`s Wings', 1, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Call the Storm', 4, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Seeds of Doubt', 4, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wounding Lies', 5, 2, 'Shadow Lords')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Purify Scent', 1, 2, 'Shadow Lords', 'Bringers of Light')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Pure Identity', 2, 2, 'Shadow Lords', 'Bringers of Light')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Wyrm Taint', 3, 2, 'Shadow Lords', 'Bringers of Light')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Purity of Blood', 5, 2, 'Shadow Lords', 'Bringers of Light')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Ears of the Bat', 1, 2, 'Shadow Lords', 'Children of Bat')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Patagia', 2, 2, 'Shadow Lords', 'Children of Bat')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Song of the Earth Mother', 2, 2, 'Shadow Lords', 'Children of Bat')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('A Thousand Eyes', 3, 2, 'Shadow Lords', 'Children of Bat')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Perceptive Servant', 1, 2, 'Shadow Lords', 'Children of Crow')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Hidden Secrets', 2, 2, 'Shadow Lords', 'Children of Crow')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Dark Aerie', 3, 2, 'Shadow Lords', 'Children of Crow')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Interrogator', 1, 2, 'Shadow Lords', 'Judges of Doom')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Executioner`s Privilege', 1, 2, 'Shadow Lords', 'Judges of Doom')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('True Fear', 1, 2, 'Shadow Lords', 'Judges of Doom')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Assassin`s Strike', 1, 2, 'Shadow Lords', 'Judges of Doom')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Find the Transgressor', 1, 2, 'Shadow Lords', 'Judges of Doom')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Interrogator', 1, 2, 'Shadow Lords', 'Lords of the Summit')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Paranoia', 1, 2, 'Shadow Lords', 'Lords of the Summit')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('True Fear', 2, 2, 'Shadow Lords', 'Lords of the Summit')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type, camp) VALUES ('Roll Over', 4, 2, 'Shadow Lords', 'Lords of the Summit')");db_query(Database, large_string);
			//
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Strut', 1, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Implacable Grip', 1, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Blending', 2, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Overlook', 2, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Another`s Moccasins', 2, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Reveal the Hidden', 2, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Coils of the Serpent', 2, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Indian Giver', 2, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Uktena`s Freezing Stare', 3, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Death Trance', 3, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sing Down the Rain', 3, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wisdom of the Ancient Ways', 3, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Lay of the Land', 4, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Spirit`s Horse', 4, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Guardian's Fortitude, 4, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Uktena`s Glare', 1, 2, 'Uktena')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Becoming Uktena', 6, 2, 'Uktena')");db_query(Database, large_string);
			//
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Heaven`s Guidance', 1, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Tireless Running', 1, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Tread Sebek1`s Back', 2, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Scale of Ma`at', 1, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Dam the Heartflood', 4, 2, 'Silent Striders')");db_query(Database, large_string);
			// camp gifts of silent striders
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Grim Resolve', 1, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Ghost Touched', 3, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Sense of the Prey', 2, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Graceful Strike', 2, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Mindblock', 4, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Call to Duty', 2, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Touch of Death', 4, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Curse of Hatred', 2, 2, 'Silent Striders')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Fetish Doll', 5, 2, 'Silent Striders')");db_query(Database, large_string);
			// 
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Ice Dance ', 1, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Reason`s Grasp', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Talons of Falcon', 3, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('The Secret of Gaia', 5, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Osprey`s Eye', 1, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Osprey`s Flight', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Austere Mind', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			// camp gfts of silver fangs
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Merlin`s Call', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Burning Blade', 3, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Wind of Buzzard`s Wings', 1, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Leshii`s Boon', 4, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Harrier`s View', 1, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Hidden Meaning', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Locate Spirit Tutor', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Deep Roots', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Eagle`s Beak', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Hand Blade', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Truce of Helios', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Honor Pact', 3, 2, 'Silver Fangs')");db_query(Database, large_string);
			// moon lodges of silver fangs
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('New Moon`s Laughter', 1, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Crescent Moon`s Awareness', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Half Moon`s Diplomacy', 3, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Gibbous Moon`s Understanding', 4, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Full Moon`s Wrath', 5, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Full Moon Cleansing', 1, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Gibbous Moon Song', 2, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Half Moon Mnemonics', 1, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Crescent Moon Fata', 1, 2, 'Silver Fangs')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('New Moon Legerdemain', 1, 2, 'Silver Fangs')");db_query(Database, large_string);
			// 
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Skyscraper Vision', 1, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Jam Technology', 1, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Pennies from Heaven', 2, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Electroshock', 3, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Intrusion', 3, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Tech Speak', 4, 2, 'Glass Walkers')");db_query(Database, large_string);
			// camp gifts of glass walkers
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Budget Approval Process', 1, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Buzzword Language', 1, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Takeover', 5, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Cool Mind', 1, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Steel Made Flesh', 2, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Last Ditch', 1, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Well-Oiled Running', 1, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Steel Blowfish', 3, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Network Terminal', 1, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Mind Partition', 2, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Universal Interface', 3, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Cooling System', 4, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Phone Travel', 5, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Tommy`s New Trick', 1, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Mother`s Touch', 1, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Image of the Saints', 2, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Whispers on the Street', 3, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Umbral Motorcade', 4, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Corner Shot', 4, 2, 'Glass Walkers')");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, type) VALUES ('Family Debt', 5, 2, 'Glass Walkers')");db_query(Database, large_string);
		}
		if(!strcmp(params, "changelingmerits", false)) {

			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Poison Resistance', 1, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Crack Shot', 3, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Granite Skin', 2, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Murderous Mien', 2, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Nightsight', 2, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Surreal Beauty', 2, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Increased Pain Threshold', 3, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Prehensile Tongue', 2, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Prehensile Tail', 4, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sex Appeal', 3, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blessing of Atlas', 5, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Too Human', 2, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Too Human', 5, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Parfum de Goat', 4, 6, -2)");db_query(Database, large_string);

			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Benevolent Patron', 1, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Boon', 1, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Boon', 2, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Boon', 3, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Boon', 4, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Boon', 5, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Boon', 6, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Calming Presence', 1, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('I Know You', 1, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Protege', 1, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Your Best Advocate', 1, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Nature`s Child', 2, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Voice of a Songbird', 2, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sage', 2, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Heir to the Throne', 3, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Fake It', 3, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Rising Star', 3, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Soul of the Muse', 4, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Dangerous Mentor', 1, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Intolerance', 2, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Foul Mouth', 2, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Fallen Noble', 3, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Indecisive', 3, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Higher Purpose', 1, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Introspection', 1, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Loyal Heart', 2, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Gut Instincts', 4, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Because I Think I Can', 6, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Soft-Hearted', 2, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Wyld Mind', 2, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Lifesaver', 3, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Weak-Willed', 3, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Guilt-Wracked', 4, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Faerie Eternity', 1, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Danger Sense', 2, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Medium', 2, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Poetic Heart', 2, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Animalistic Favor', 3, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Animalistic Favor', 4, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Animalistic Favor', 5, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Winged', 4, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Blood of the Wolf', 4, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Iron Resistance', 4, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Winged', 4, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Living Legend', 5, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Regeneration', 7, 6, -1)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bard`s Tongue', 1, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Changeling`s Eyes', 1, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Geas', 1, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Geas', 2, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Geas', 3, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Geas', 4, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Geas', 5, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Oathbound', 1, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Oathbound', 2, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Oathbound', 3, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Oathbound', 4, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Oathbound', 5, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Slipped Seeming', 1, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Slipped Seeming', 2, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Slipped Seeming', 3, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Slipped Seeming', 4, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Slipped Seeming', 5, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Bizzare Quality', 2, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Echoes', 2, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Echoes', 3, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Echoes', 4, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Echoes', 5, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Winged', 2, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Cleared Mists', 3, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Haunted', 3, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Iron Allergy', 3, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Iron Allergy', 4, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Iron Allergy', 5, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Chimerical Magnet', 5, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Psychic Vampire', 5, 6, -2)");db_query(Database, large_string);
			format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Sidhe`s Curse', 5, 6, -2)");db_query(Database, large_string);
		}
		return 1;
	}
	return 0;
}
CMD:buildmf(playerid,params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Userrace] == 1)
			return	Dialog_Show(playerid,dMF,DIALOG_STYLE_LIST,"Merits & Flaws Selection","V20: Core Rulebook\nV20: Lore of the Clans\nV20: Ghouls & Revenants\nV20: Anarchs Unbound\nV20: Hunters Hunted II (Society of Leopold)\nV20: Hunters Hunted II (Government Agencies)\nV20: Hunters Hunted II (The Arcanum)\nGeneral Human Merits and Flaws (Affiliation: None)","Select","Close");
		new affiliation[MAX_TRAIT_NAME];
		GetPVarString(playerid, "Affiliation", affiliation, MAX_TRAIT_NAME);	
		if(isnull(affiliation) && User[playerid][Userrace] == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" Set your "W"Affiliation"GR" first.");
		if(!strcmp(affiliation,"Kinfolk", true))
			if(!isnull(affiliation))
				return Dialog_Show(playerid,dMFWerewolf,DIALOG_STYLE_LIST,"Merits & Flaws Selection","W20 - Core Rulebook\nW20 - Kinfolk","Select","Close");
		if(User[playerid][Userrace] == 0 || !strcmp(affiliation,"Ghoul") || !strcmp(affiliation,"The Arcanum") || !strcmp(affiliation,"Government Agency", true) || !strcmp(affiliation,"Society of Leopold", true))
			if(!isnull(affiliation))
				return Dialog_Show(playerid,dMF,DIALOG_STYLE_LIST,"Merits & Flaws Selection","V20:  Core Rulebook\nV20 - Lore of the Clans\nV20 - Ghouls & Revenants\nV20 - Anarchs Unbound\nV20 - Hunters Hunted II (Society of Leopold)\nV20 - Hunters Hunted II (Government Agencies)\nV20 - Hunters Hunted II (The Arcanum)\nGeneral Human Merits and Flaws (Affiliation: None)","Select","Close");
		if(User[playerid][Userrace] == 2)
			return Dialog_Show(playerid,dMFWerewolf,DIALOG_STYLE_LIST,"Merits & Flaws Selection","W20: Core Rulebook\nW20 - Kinfolk","Select","Close");
		if(User[playerid][Userrace] == 3)
			return Dialog_Show(playerid,dMFMage,DIALOG_STYLE_LIST,"Merits & Flaws Selection","M20: Core Rulebook & Book of Secrets","Select","Close");
		if(User[playerid][Userrace] == 4)
			return Dialog_Show(playerid,dMFHunter,DIALOG_STYLE_LIST,"Merits & Flaws Selection","Hunter the Reckoning: Player's Guide","Select","Close");
		if(User[playerid][Userrace] == 5)
			return Dialog_Show(playerid,dMFHunter,DIALOG_STYLE_LIST,"Merits, Flaws & Revelatory Selection","Demon The Fallen: Player's Guide\nBuild your Apocalyptic Form","Select","Close");
		if(User[playerid][Userrace] == 6)
			return Dialog_Show(playerid,dMFChangeling,DIALOG_STYLE_LIST,"Merits & Flaws Selection","Changeling: The Dreaming\nGeneral Human Merits and Flaws","Select","Close");
	}
	return 0;
}
Dialog:dMFChangeling(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: 
			{
				//format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Hearing)', 1, 1, -1)");db_query(Database, large_string);
				if(User[playerid][Userrace] != 6) return MSG(playerid,GOLD,"ERROR:"GR" You cannot choose from this category.");
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 6 AND start < 0 AND type IS NULL");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						db_get_field_assoc(Result, "item" , feature, 64);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(row == 97)
						{
							format(large_string, sizeof large_string, "%sNext Page", large_string);
							break;
						}
						else
						{
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFChangeling,DIALOG_STYLE_LIST,"Changeling: The Dreaming", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;
			}
			case 1:
			{
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'hHunter' OR type = 'rHunter'");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						db_get_field_assoc(Result, "item" , feature, 64);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(row == 97)
						{
							format(large_string, sizeof large_string, "%sNext Page", large_string);
							break;
						}
						else
						{
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFGeneralCore,DIALOG_STYLE_LIST,"General Human Merits and Flaws (Affiliation: None)", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;
			}
		}
		// setting it up
		InsertMeritFlaw(playerid, inputtext);
	}
	return 1;
}
Dialog:dMFMage(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: 
			{
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 3 AND start < 0 AND type IS NULL");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						db_get_field_assoc(Result, "item" , feature, 64);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(row == 164)
						{
							format(large_string, sizeof large_string, "%sNext Page", large_string);
							break;
						}
						else
						{
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFMageTwo,DIALOG_STYLE_LIST,"M20 - Mage the Ascension", large_string, "Select", "Close");
				//SFM(playerid, -1, "rows %d", row);
				db_free_result(Result);
				large_string[0] = EOS;
			}
		}
	}
	return 1;
}
Dialog:dMFMageTwo(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext,"Next Page"))
		{
					format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 3 AND start < 0 AND type IS NULL");
					new DBResult: Result = db_query(Database, large_string);
					new feature[64],
						merit,
						value,
						row,
						bool:halt = false;
					large_string[0] = EOS;
					do
					{
						if(db_num_rows(Result))
						{
							row++;
							db_get_field_assoc(Result, "item" , feature, 64);
							merit = db_get_field_assoc_int(Result, "start");
							value = db_get_field_assoc_int(Result, "value");
							if(row > 164)
							{
								if(row == 316)
								{
									format(large_string, sizeof large_string, "%sNext Page", large_string);
									halt = true;
									break;
								}
								if(halt == false)
								{
									if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
									else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
								}
							}
						}
						else break;
					}
					while(db_next_row(Result));
					Dialog_Show(playerid,dMFMageCore,DIALOG_STYLE_LIST,"M20 - Mage the Ascension", large_string, "Select", "Close");
					//SFM(playerid, -1, "rows %d", row);
					db_free_result(Result);
					large_string[0] = EOS;
		}
		InsertMeritFlaw(playerid, inputtext);
	}
	return 1;
}
Dialog:dMFMageCore(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext,"Next Page"))
		{
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 3 AND start < 0 AND type IS NULL");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						if(row > 316)
						{
							db_get_field_assoc(Result, "item" , feature, 64);
							merit = db_get_field_assoc_int(Result, "start");
							value = db_get_field_assoc_int(Result, "value");
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFCore,DIALOG_STYLE_LIST,"M20 - Mage the Ascension", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;		
				return 1;	
		}
		// setting it up

		InsertMeritFlaw(playerid, inputtext);
	}
	return 1;
}
Dialog:dMFPickVisage(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: // common powers
			{
				new DBResult: Result = db_query(Database, "SELECT * FROM limits WHERE start < -2 AND race = 5 AND type IS NULL");
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						db_get_field_assoc(Result, "item" , feature, 64);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(row == 97)
						{
							format(large_string, sizeof large_string, "%sNext Page", large_string);
							break;
						}
						else
						{
							if(merit == -3) format(large_string, sizeof large_string, "%s%s [%dpt. Low Torment]\n", large_string, feature, value);
							else if(merit == -4) format(large_string, sizeof large_string, "%s%s [%dpt. High Torment]\n", large_string, feature, value);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dFinalizeVisage,DIALOG_STYLE_LIST,"Apocalyptic Form", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;
			}
			case 1: // in-house powers
			{
				new house[MAX_TRAIT_NAME];
				GetPVarString(playerid, "House", house, sizeof house);
				format(large_string, 124, "SELECT * FROM limits WHERE start < -2 AND race = 5 AND type = '%s'", house);
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						db_get_field_assoc(Result, "item" , feature, 64);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(row == 97)
						{
							format(large_string, sizeof large_string, "%sNext Page", large_string);
							break;
						}
						else
						{
							if(merit == -3) format(large_string, sizeof large_string, "%s%s [%dpt. Low Torment]\n", large_string, feature, value);
							else if(merit == -4) format(large_string, sizeof large_string, "%s%s [%dpt. High Torment]\n", large_string, feature, value);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dFinalizeVisage,DIALOG_STYLE_LIST,"Apocalyptic Form", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;
			}
			case 2: // cross-house powers
			{
				new house[MAX_TRAIT_NAME];
				GetPVarString(playerid, "House", house, sizeof house);
				format(large_string, 124, "SELECT * FROM limits WHERE start < -2 AND race = 5 AND type <> '%s'", house);
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						db_get_field_assoc(Result, "item" , feature, 64);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(row == 97)
						{
							format(large_string, sizeof large_string, "%sNext Page", large_string);
							break;
						}
						else
						{
							if(merit == -3) format(large_string, sizeof large_string, "%s%s [%dpt. Low Torment]\n", large_string, feature, value+1);
							else if(merit == -4) format(large_string, sizeof large_string, "%s%s [%dpt. High Torment]\n", large_string, feature, value+1);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dFinalizeVisage,DIALOG_STYLE_LIST,"Apocalyptic Form", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;
			}
			case 3: // low torment as high
			{
				new DBResult: Result = db_query(Database, "SELECT * FROM limits WHERE start = -3 AND race = 5 AND item <> 'Tremor Sense'");
				new feature[64],
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						db_get_field_assoc(Result, "item" , feature, 64);
						value = db_get_field_assoc_int(Result, "value");
						new datahouse[MAX_TRAIT_NAME];
						db_get_field_assoc(Result, "type", datahouse, MAX_TRAIT_NAME);
						if(row == 97)
						{
							format(large_string, sizeof large_string, "%sNext Page", large_string);
							break;
						}
						else
						{
							new house[MAX_TRAIT_NAME];
							GetPVarString(playerid, "House", house, sizeof house);
							if(!strcmp(datahouse,house) && !isnull(house) && !isnull(datahouse))
							{
								if(value-1 > 0)
									format(large_string, sizeof large_string, "%s%s [%dpt. High Torment]\n", large_string, feature, value-1);
								else format(large_string, sizeof large_string, "%s%s [%dpt. High Torment]\n", large_string, feature, value);
							}
							else if(isnull(datahouse)) 
							{
								if(value-1 > 0)
									format(large_string, sizeof large_string, "%s%s [%dpt. High Torment]\n", large_string, feature, value-1);
								else format(large_string, sizeof large_string, "%s%s [%dpt. High Torment]\n", large_string, feature, value);
							}
							else if(strcmp(datahouse,house) && !isnull(house) && !isnull(datahouse))
								format(large_string, sizeof large_string, "%s%s [%dpt. High Torment]\n", large_string, feature, value);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dFinalizeVisage,DIALOG_STYLE_LIST,"Apocalyptic Form", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;
			}
		}
	}
}
Dialog:dFinalizeVisage(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext,"Next Page"))
		{
				new DBResult: Result = db_query(Database, "SELECT * FROM limits WHERE start = -3 AND race = 5 AND item <> 'Tremor Sense'");
				new feature[64],
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						if(row > 96)
						{
							db_get_field_assoc(Result, "item" , feature, 64);
							value = db_get_field_assoc_int(Result, "value");
							new datahouse[MAX_TRAIT_NAME];
							db_get_field_assoc(Result, "type", datahouse, MAX_TRAIT_NAME);
							new house[MAX_TRAIT_NAME];
							GetPVarString(playerid, "House", house, sizeof house);
							if(!strcmp(datahouse,house) && !isnull(house) && !isnull(datahouse))
								format(large_string, sizeof large_string, "%s%s [%dpt. High Torment]\n", large_string, feature, value-1);
							else format(large_string, sizeof large_string, "%s%s [%dpt. High Torment]\n", large_string, feature, value);
						}

					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFCore,DIALOG_STYLE_LIST,"Next Page", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;		
				return 1;	
		}
		InsertVisage(playerid, inputtext);
	}
	return 1;
}
stock InsertVisage(playerid, inputtext[])
{
		new before = strfind(inputtext, "[", true);
		new end = strlen(inputtext);
		strdel(inputtext, before-1, end);
		new point = strval(inputtext[before+1]);
		
		new query[124];
		format(query, sizeof query, "SELECT 1 FROM advantages WHERE item = '%s' and userid = %d", inputtext, User[playerid][UserID]);
		new DBResult: Result = db_query(Database, query);
		new version[3];
		version[0] = inputtext[before+6];
		if(version[0] == 'L')
			version[0] = -3;
		else if(version[0] == 'H')
			version[0] = -4;
		if(db_num_rows(Result))
			return MSG(playerid,GOLD,"ERROR:"GR" You have this revelatory power.");
		format(query, sizeof query,"SELECT 1 FROM limits WHERE item = '%s'", inputtext);
		Result = db_query(Database, query);
		
		if(db_num_rows(Result))
		{
			new freebies = GetPVarInt(playerid, "sVFreebie");
			if(version[0] == -3) // low
			{
				if(freebies < point)
					return SFM(playerid,GOLD,"ERROR:"GR" You cannot afford this revelatory power. (Revelatory Freebies Left: %d)", freebies);
				new maxflaw = GetPVarInt(playerid, "sMaxLow");
				if(maxflaw > 3)
				{
					MSG(playerid, GOLD, "ERROR:"GR" You've reached the maximum number of Low Torment revelatory powers.");
					return 1;
				}
				format(query, sizeof query,"SERVER: You've spent "R"%d revelatory freebie(s)"W" to buy %s. (%d/16 left)", point, inputtext, freebies-point);
				MSG(playerid, WHITE, query);
				UpdateTrait(playerid, "sVFreebie", freebies-point, 9);
				UpdateTrait(playerid, "sMaxLow", GetPVarInt(playerid, "sMaxLow")+1, 9);
			}
			else if(version[0] == -4) // high
			{
				if(freebies < point)
					return SFM(playerid,GOLD,"ERROR:"GR" You cannot afford this revelatory power. (Revelatory Freebies Left: %d)", freebies);
				new maxflaw = GetPVarInt(playerid, "sMaxHigh");
				if(maxflaw > 3)
				{
					MSG(playerid, GOLD, "ERROR:"GR" You've reached the maximum number of High Torment revelatory powers.");
					return 1;
				}
				format(query, sizeof query,"SERVER: You've spent "R"%d revelatory freebie(s)"W" to buy %s. (%d/16 left)", point, inputtext, freebies-point);
				MSG(playerid, WHITE, query);
				UpdateTrait(playerid, "sVFreebie", freebies-point, 9);
				UpdateTrait(playerid, "sMaxHigh", GetPVarInt(playerid, "sMaxHigh")+1, 9);
			}
			
			format(query, sizeof query,"INSERT INTO advantages (userid, item, value, start) VALUES (%d, '%s', %d, %d)", User[playerid][UserID], inputtext, point, version[0]);
			
			db_query(Database, query);
			cmd_buildmf(playerid, "");
		}
		return 1;
}
Dialog:dMFHunter(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: 
			{
				if(User[playerid][Userrace] == 5) {
					format(large_string, sizeof large_string, "SELECT * FROM limits WHERE type = 'rHunter' OR race = 5 AND start < 0");
					// format(large_string, sizeof large_string, "SELECT * FROM limits WHERE type = 'rHunter' AND start < 0");
				}
				else format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'rHunter'");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row = 0;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						// print("BEGIN");
						row++;
						db_get_field_assoc(Result, "item" , feature, 64);
						// print(feature);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(row == 97)
						{
							format(large_string, sizeof large_string, "%sNext Page", large_string);
							// print("I HJAVE BEEN CALLED! nextpage");
							break;
						}
						else
						{
							// new mystr[525];
							if(merit == -1) {
								print("I HJAVE BEEN CALLED! merit-1");
								format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
								// format(mystr, sizeof mystr, "%s [%dpt. Merit]", large_string, feature, value);
								// print(mystr);
							}
							else if(merit == -2) {
								print("I HJAVE BEEN CALLED! merit-2");
								format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
								// format(mystr, sizeof mystr, "%s [%dpt. Flaw]", large_string, feature, value);
								// print(mystr);
							}
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFHunterCore,DIALOG_STYLE_LIST,"Merits and Flaws", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;
				// print("END");

			}
			case 1:
			{
				Dialog_Show(playerid,dMFPickVisage,DIALOG_STYLE_LIST,"Apocalyptic Form", "Pick Common Revelatory Powers\nPick Revelatory Powers from Your House\nPick Revelatory Powers from Other Houses\nPick Low Torment Revelatory as High Torment", "Select", "Close");
			}
		}
	}
	return 1;
}

Dialog:dMFWerewolf(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: 
			{
				//format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Hearing)', 1, 1, -1)");db_query(Database, large_string);
				if(User[playerid][Userrace] != 2) return MSG(playerid,GOLD,"ERROR:"GR" You cannot choose from this category.");
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 2 AND start < 0 AND type IS NULL");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						db_get_field_assoc(Result, "item" , feature, 64);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(row == 97)
						{
							format(large_string, sizeof large_string, "%sNext Page", large_string);
							break;
						}
						else
						{
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFWerewolfCore,DIALOG_STYLE_LIST,"W20 - Core Rulebook", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;
			}
			case 1:
			{
				//format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Hearing)', 1, 1, -1)");db_query(Database, large_string);
				if(User[playerid][Userrace] == 0)
				{
					format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'Kinfolk' OR type = 'hHunter' OR type = 'rHunter'");
					new DBResult: Result = db_query(Database, large_string);
					new feature[64],
						merit,
						value;
					large_string[0] = EOS;
					do
					{
						if(db_num_rows(Result))
						{
							db_get_field_assoc(Result, "item" , feature, 64);
							merit = db_get_field_assoc_int(Result, "start");
							value = db_get_field_assoc_int(Result, "value");
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}
						else break;
					}
					while(db_next_row(Result));
					Dialog_Show(playerid,dMFKinfolkCore,DIALOG_STYLE_LIST,"W20 - Kinfolk", large_string, "Select", "Close");
					db_free_result(Result);
					large_string[0] = EOS;
				}
				else MSG(playerid,GOLD,"ERROR:"GR" You cannot choose from this category.");
			}
		}
	}
	return 1;
}
Dialog:dMF(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: 
			{
				//format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Hearing)', 1, 1, -1)");db_query(Database, large_string);
				if(User[playerid][Userrace] != 1) return MSG(playerid,GOLD,"ERROR:"GR" You cannot choose from this category.");
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 1 AND start < 0 AND type IS NULL");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						db_get_field_assoc(Result, "item" , feature, 64);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(row == 97)
						{
							format(large_string, sizeof large_string, "%sNext Page", large_string);
							break;
						}
						else
						{
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFCore,DIALOG_STYLE_LIST,"V20 - Core Rulebook", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;
			}
			case 1:
			{
				if(User[playerid][Userrace] != 1) return MSG(playerid,GOLD,"ERROR:"GR" You cannot choose from this category.");
				//format(large_string, sizeof large_string,"INSERT INTO limits (item, value, race, start) VALUES ('Acute Sense (Hearing)', 1, 1, -1)");db_query(Database, large_string);
				new clan[MAX_TRAIT_NAME];
				GetPVarString(playerid, "Clan", clan, MAX_TRAIT_NAME);
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 1 AND start < 0 AND type = '%s'", clan);
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "item" , feature, 64);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
						else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFCore,DIALOG_STYLE_LIST,"V20 - Lore of the Clans", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;
			}
			case 2:
			{
				new affiliation[MAX_TRAIT_NAME];
				GetPVarString(playerid, "Affiliation", affiliation, MAX_TRAIT_NAME);
				if(!strcmp(affiliation, "Ghoul") || !isnull(affiliation))
				{
					format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'Ghoul' OR type = 'hHunter' OR type = 'rHunter'");
					new DBResult: Result = db_query(Database, large_string);
					new feature[64],
						merit,
						value;
					large_string[0] = EOS;
					do
					{
						if(db_num_rows(Result))
						{
							db_get_field_assoc(Result, "item" , feature, 64);
							merit = db_get_field_assoc_int(Result, "start");
							value = db_get_field_assoc_int(Result, "value");
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}
						else break;
					}
					while(db_next_row(Result));
					Dialog_Show(playerid,dMFGhoulCore,DIALOG_STYLE_LIST,"V20 - Ghouls & Revenants", large_string, "Select", "Close");
					db_free_result(Result);
					large_string[0] = EOS;
				}
				else MSG(playerid,GOLD,"ERROR:"GR" You cannot choose from this category.");
			}
			case 3:
			{
				if(User[playerid][Userrace] != 1) return MSG(playerid,GOLD,"ERROR:"GR" You cannot choose from this category.");
				new sect[MAX_TRAIT_NAME];
				GetPVarString(playerid, "Sect", sect, MAX_TRAIT_NAME);
				if(strcmp(sect,"Anarch Movement"))
					return MSG(playerid,GOLD,"ERROR:"GR" You cannot choose from this category.");
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 1 AND start < 0 AND type = '%s'", sect);
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "item" , feature, 64);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
						else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFCore,DIALOG_STYLE_LIST,"V20 - Anarchs Unbound", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;				
			}
			case 4: 
			{
				new affiliation[MAX_TRAIT_NAME];
				GetPVarString(playerid, "Affiliation", affiliation, MAX_TRAIT_NAME);
				if(strcmp(affiliation, "Society of Leopold") || isnull(affiliation)) return MSG(playerid,GOLD,"ERROR:"GR" You cannot choose from this category.");
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'Society of Leopold' OR type = 'hHunter' OR type = 'rHunter'");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						db_get_field_assoc(Result, "item" , feature, 64);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(row == 97)
						{
							format(large_string, sizeof large_string, "%sNext Page", large_string);
							break;
						}
						else
						{
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFLeopoldCore,DIALOG_STYLE_LIST,"V20 - Hunters Hunted II (Society of Leopold)", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;
			}
			case 5: 
			{
				new affiliation[MAX_TRAIT_NAME];
				GetPVarString(playerid, "Affiliation", affiliation, MAX_TRAIT_NAME);
				if(strcmp(affiliation, "Government Agency") || isnull(affiliation)) return MSG(playerid,GOLD,"ERROR:"GR" You cannot choose from this category.");
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'Government Agency' OR type = 'hHunter' OR type = 'rHunter'");
				
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						db_get_field_assoc(Result, "item" , feature, 64);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(row == 97)
						{
							format(large_string, sizeof large_string, "%sNext Page", large_string);
							break;
						}
						else
						{
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFGovCore,DIALOG_STYLE_LIST,"V20 - Hunters Hunted II (Government Agency)", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;
			}
			case 6: 
			{
				new affiliation[MAX_TRAIT_NAME];
				GetPVarString(playerid, "Affiliation", affiliation, MAX_TRAIT_NAME);
				if(strcmp(affiliation, "The Arcanum") || isnull(affiliation)) return MSG(playerid,GOLD,"ERROR:"GR" You cannot choose from this category.");
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'The Arcanum' OR type = 'hHunter' OR type = 'rHunter'");

				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						db_get_field_assoc(Result, "item" , feature, 64);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(row == 97)
						{
							format(large_string, sizeof large_string, "%sNext Page", large_string);
							break;
						}
						else
						{
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFArcCore,DIALOG_STYLE_LIST,"V20 - Hunters Hunted II (The Arcanum)", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;
			}
			case 7: // general human merits aff none
			{
				new affiliation[MAX_TRAIT_NAME];
				GetPVarString(playerid, "Affiliation", affiliation, MAX_TRAIT_NAME);
				if(strcmp(affiliation, "None") || isnull(affiliation)) return MSG(playerid,GOLD,"ERROR:"GR" You cannot choose from this category. Your General Merits and Flaws are present in your category.");
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'hHunter' OR type = 'rHunter'");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						db_get_field_assoc(Result, "item" , feature, 64);
						merit = db_get_field_assoc_int(Result, "start");
						value = db_get_field_assoc_int(Result, "value");
						if(row == 97)
						{
							format(large_string, sizeof large_string, "%sNext Page", large_string);
							break;
						}
						else
						{
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFGeneralCore,DIALOG_STYLE_LIST,"General Human Merits and Flaws (Affiliation: None)", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;
			}
		}
	}
	return 1;
}
Dialog:dMFWerewolfCore(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext,"Next Page"))
		{
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 2 AND start < 0 AND type IS NULL");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						if(row > 96)
						{
							db_get_field_assoc(Result, "item" , feature, 64);
							merit = db_get_field_assoc_int(Result, "start");
							value = db_get_field_assoc_int(Result, "value");
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}
					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFWerewolfCore,DIALOG_STYLE_LIST,"W20 - Core Rulebook", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;		
				return 1;	
		}
		InsertMeritFlaw(playerid, inputtext);
	}
	return 1;
}
//
Dialog:dMFGhoulCore(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext,"Next Page"))
		{
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'Ghoul' OR type = 'hHunter' OR type = 'rHunter'");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						if(row > 96)
						{
							db_get_field_assoc(Result, "item" , feature, 64);
							merit = db_get_field_assoc_int(Result, "start");
							value = db_get_field_assoc_int(Result, "value");
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}

					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFCore,DIALOG_STYLE_LIST,"Ghoul & Revenants", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;		
				return 1;	
		}
		// setting it up
		InsertMeritFlaw(playerid, inputtext);
	}
	return 1;
}

Dialog:dMFArcCore(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext,"Next Page"))
		{
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'The Arcanum' OR type = 'hHunter' OR type = 'rHunter'");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						if(row > 96)
						{
							db_get_field_assoc(Result, "item" , feature, 64);
							merit = db_get_field_assoc_int(Result, "start");
							value = db_get_field_assoc_int(Result, "value");
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}

					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFCore,DIALOG_STYLE_LIST,"V20 - Core Rulebook", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;		
				return 1;	
		}
		// setting it up
		InsertMeritFlaw(playerid, inputtext);
	}
	return 1;
}
Dialog:dMFGovCore(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext,"Next Page"))
		{
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'Government Agency' OR type = 'hHunter' OR type = 'rHunter'");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						if(row > 96)
						{
							db_get_field_assoc(Result, "item" , feature, 64);
							merit = db_get_field_assoc_int(Result, "start");
							value = db_get_field_assoc_int(Result, "value");
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}

					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFCore,DIALOG_STYLE_LIST,"V20 - Core Rulebook", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;		
				return 1;	
		}
		// setting it up
		//db_query(Database,"CREATE TABLE IF NOT EXISTS features (slot INTEGER, userid INTEGER, desc VARCHAR(250),type TINYINT(1))");
		InsertMeritFlaw(playerid, inputtext);
	}
	return 1;
}
Dialog:dMFLeopoldCore(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext,"Next Page"))
		{
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'Society of Leopold' OR type = 'hHunter' OR type = 'rHunter'");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						if(row > 96)
						{
							db_get_field_assoc(Result, "item" , feature, 64);
							merit = db_get_field_assoc_int(Result, "start");
							value = db_get_field_assoc_int(Result, "value");
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}

					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFCore,DIALOG_STYLE_LIST,"V20 - Core Rulebook", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;		
				return 1;	
		}
		// setting it up
		//db_query(Database,"CREATE TABLE IF NOT EXISTS features (slot INTEGER, userid INTEGER, desc VARCHAR(250),type TINYINT(1))");
		InsertMeritFlaw(playerid, inputtext);
	}
	return 1;
}
Dialog:dMFKinfolkCore(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext,"Next Page"))
		{
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'Kinfolk' OR type = 'hHunter' OR type = 'rHunter'");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						if(row > 96)
						{
							db_get_field_assoc(Result, "item" , feature, 64);
							merit = db_get_field_assoc_int(Result, "start");
							value = db_get_field_assoc_int(Result, "value");
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}

					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFCore,DIALOG_STYLE_LIST,"V20 - Core Rulebook", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;		
				return 1;	
		}
		// setting it up
		//db_query(Database,"CREATE TABLE IF NOT EXISTS features (slot INTEGER, userid INTEGER, desc VARCHAR(250),type TINYINT(1))");
		InsertMeritFlaw(playerid, inputtext);
	}
	return 1;
}
Dialog:dMFGeneralCore(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext,"Next Page"))
		{
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'hHunter' OR type = 'rHunter'");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						if(row > 96)
						{
							db_get_field_assoc(Result, "item" , feature, 64);
							merit = db_get_field_assoc_int(Result, "start");
							value = db_get_field_assoc_int(Result, "value");
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}

					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFCore,DIALOG_STYLE_LIST,"General Human Merits and Flaws", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;		
				return 1;	
		}
		InsertMeritFlaw(playerid, inputtext);
	}
	return 1;
}
Dialog:dMFHunterCore(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext,"Next Page"))
		{
				if(User[playerid][Userrace] == 5)
					format(large_string, sizeof large_string, "SELECT * FROM limits WHERE type = 'rHunter' OR race = 5 AND start < 0");
				else format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 0 AND start < 0 AND type = 'rHunter'");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						if(row > 96)
						{
							db_get_field_assoc(Result, "item" , feature, 64);
							merit = db_get_field_assoc_int(Result, "start");
							value = db_get_field_assoc_int(Result, "value");
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}

					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFCore,DIALOG_STYLE_LIST,"Page 2", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;		
				return 1;	
		}
		// setting it up
		//db_query(Database,"CREATE TABLE IF NOT EXISTS features (slot INTEGER, userid INTEGER, desc VARCHAR(250),type TINYINT(1))");
		InsertMeritFlaw(playerid, inputtext);
	}
	return 1;
}

Dialog:dMFCore(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext,"Next Page"))
		{
				format(large_string, sizeof large_string, "SELECT * FROM limits WHERE race = 1 AND start < 0 AND type IS NULL");
				new DBResult: Result = db_query(Database, large_string);
				new feature[64],
					merit,
					value,
					row;
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
						row++;
						if(row > 96)
						{
							db_get_field_assoc(Result, "item" , feature, 64);
							merit = db_get_field_assoc_int(Result, "start");
							value = db_get_field_assoc_int(Result, "value");
							if(merit == -1) format(large_string, sizeof large_string, "%s%s [%dpt. Merit]\n", large_string, feature, value);
							else if(merit == -2) format(large_string, sizeof large_string, "%s%s [%dpt. Flaw]\n", large_string, feature, value);
						}

					}
					else break;
				}
				while(db_next_row(Result));
				Dialog_Show(playerid,dMFCore,DIALOG_STYLE_LIST,"V20 - Core Rulebook", large_string, "Select", "Close");
				db_free_result(Result);
				large_string[0] = EOS;		
				return 1;	
		}
		// setting it up
		//db_query(Database,"CREATE TABLE IF NOT EXISTS features (slot INTEGER, userid INTEGER, desc VARCHAR(250),type TINYINT(1))");
		InsertMeritFlaw(playerid, inputtext);
	}
	return 1;
}
stock InsertMeritFlaw(playerid, inputtext[])
{
		new before = strfind(inputtext, "[", true);
		new end = strlen(inputtext);
		strdel(inputtext, before-1, end);
		new point = strval(inputtext[before+1]);
		new query[124];
		format(query, sizeof query, "SELECT 1 FROM advantages WHERE item = '%s' and userid = %d", inputtext, User[playerid][UserID]);
		new DBResult: Result = db_query(Database, query);
		
		if(db_num_rows(Result))
			return MSG(playerid,GOLD,"ERROR:"GR" You have this Merit/Flaw.");
		format(query, sizeof query,"SELECT start FROM limits WHERE item = '%s'", inputtext);
		Result = db_query(Database, query);
		
		if(db_num_rows(Result))
		{
			new freebies = GetPVarInt(playerid, "sFreebie");
			new merit = db_get_field_assoc_int(Result, "start");
			if(merit == -1) // merit
			{
				if(freebies < point)
					return SFM(playerid,GOLD,"ERROR:"GR" You cannot afford this merit. (Freebies: %d)", freebies);
				format(query, sizeof query,"SERVER: You have spent "R"%d freebie(s)"W" to buy %s. (%d freebies left)", point, inputtext, freebies-point);
				MSG(playerid, WHITE, query);
				UpdateTrait(playerid, "sFreebie", freebies-point, 9);
			}
			else if(merit == -2)
			{
				new maxflaw = GetPVarInt(playerid, "sMaxFlaw");
				if(maxflaw+point > 7)
				{
					//SFM(playerid,GOLD,"ERROR:"GR" You have reached the maximum number of Flaws or what you are going to buy exceeds it.", 
					//freebies, point, maxflaw);
					MSG(playerid, GOLD, "ERROR:"GR" You have reached the maximum number of Flaws or what you are going to buy exceeds it.");
					format(query, sizeof query, "SERVER:"GR" Freebies Left: %d | Flaw Points Left to be Taken: %d | Flaw Points Bonus from %s: %d ", freebies, 7-maxflaw, inputtext, point);
					return MSG(playerid, GOLD, query);
				}
				format(query, sizeof query,"SERVER: You gained "G"%d freebie(s)"W" by the Flaw: acquiring %s. (%d freebies left)", point, inputtext, freebies+point);
				MSG(playerid, WHITE, query);
				UpdateTrait(playerid, "sFreebie", freebies+point, 9);
				UpdateTrait(playerid, "sMaxFlaw", maxflaw+point, 9);
			}
			format(query, sizeof query,"INSERT INTO advantages (userid, item, value, start) VALUES (%d, '%s', %d, %d)", User[playerid][UserID], inputtext, point, merit);
			db_query(Database, query);
			cmd_buildmf(playerid, "");
		}
		return 1;
}

CMD:rmdesc(playerid, params[])
	return cmd_removedescription(playerid, params);
CMD:removedescription(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(isnull(params))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /(r)e(m)ove(desc)ription [lineid]");
		if(!IsNumeric(params)) return MSG(playerid, GOLD, "ERROR:"GR" Insert a numeric value.");
		format(large_string, 256, "DELETE FROM chardesc WHERE userid = %d AND slot = %d", User[playerid][UserID], strval(params));
		db_query(Database, large_string);
		MSG(playerid, GOLD, "Info:"GR" Specified description line has been deleted.");
		return 1;
	}
	return 0;
}
CMD:inspect(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new id = -1;
		if(isnull(params)) id = playerid;
		if(IsNumeric(params)) id = strval(params);
		new query[124];
		format(query, sizeof query,"SELECT desc FROM chardesc WHERE userid = %d ORDER BY slot ASC", User[id][UserID]);
		new DBResult: Result = db_query(Database, query);
		large_string[0] = EOS;
		do
		{
			if(db_num_rows(Result))
			{
				new desc[256];
				db_get_field_assoc(Result, "desc", desc, sizeof desc);
				format(large_string,sizeof large_string,"%s%s\n", large_string, desc);
			}
			else
			{
				if(id == playerid)
				{
					MSG(playerid, GOLD, "Info:"GR" You have no description set. To view someone else's description type (/inspect [playerid])");
				}
				else
				{
					MSG(playerid,GOLD,"ERROR:"GR" No description found.");
				}
				break;
			}
		}
		while(db_next_row(Result));
		db_free_result(Result);
		format(query,sizeof query,"%s's Description", User[id][pUsername]);
		Dialog_Show(playerid,dDesc,DIALOG_STYLE_MSGBOX,query,large_string,"Close","");			
		return 1;
	}
	return 0;
}
CMD:mydesc(playerid, params[]) return cmd_mydescriptions(playerid, params);
CMD:mydescriptions(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new query[124];
		format(query, sizeof query,"SELECT slot,desc FROM chardesc WHERE userid = %d ORDER BY slot ASC", User[playerid][UserID]);
		new DBResult: Result = db_query(Database, query);
		large_string[0] = EOS;
		do
		{
			if(db_num_rows(Result))
			{
				new desc[256],slot;
				db_get_field_assoc(Result, "desc", desc, sizeof desc);
				slot = db_get_field_assoc_int(Result, "slot");
				if(User[playerid][Useradmin]) format(large_string,sizeof large_string,"%s[L%d] %s\n", large_string, slot, desc);
				else format(large_string,sizeof large_string,"%s%s\n", large_string, desc);
			}
			else
			{
				MSG(playerid,GOLD,"ERROR:"GR" No description found.");
				break;
			}
		}
		while(db_next_row(Result));
		db_free_result(Result);
		format(query,sizeof query,"%s's Description", User[playerid][pUsername]);
		Dialog_Show(playerid,dDesc,DIALOG_STYLE_MSGBOX,query,large_string,"Close","");			
		return 1;
	}
	return 0;
}
CMD:desc(playerid, params[]) return cmd_description(playerid, params);
CMD:description(playerid,params[])
{
	if(User[playerid][Logged])
	{
		if(isnull(params))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /description [character description (124 characters per line)]");
		format(large_string, sizeof large_string, "SELECT slot FROM chardesc WHERE userid = %d ORDER BY slot DESC", User[playerid][UserID]);
		new DBResult: Result = db_query(Database, large_string);
		new index;
		if(!db_num_rows(Result)) index = 0;
		index = db_get_field_assoc_int(Result, "slot")+1;
		format(large_string, sizeof large_string,"INSERT INTO chardesc (userid, slot, desc) VALUES (%d, %d, '%q')", User[playerid][UserID], index, params);
		db_query(Database, large_string);

		MSG(playerid, cRP, params);
		return 1;
	}
	return 0;
}
CMD:tedit(playerid, params[])
{
	if(User[playerid][Useradmin] == 0)
		return 0;
	if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
	new id, trait[MAX_TRAIT_NAME], value;
	if(sscanf(params, "us[24]i", id, trait, value))
		return MSG(playerid, GOLD, "SYNTAX:"GR" /tedit [playerid/partofname] [traitname] [amount] (this command is not to be used with secondary traits)");
	if(!User[id][Logged])	
		return MSG(playerid, GOLD, "ERROR:"GR" Specified player is not online.");
	if(value < 0)
		return MSG(playerid, GOLD, "ERROR:"GR" You cannot set a trait lower than zero.");
	if(GetPVarInt(id, trait) == 0)
		return MSG(playerid, GOLD, "ERROR:"GR" Player needs to have at least one dot in the specified trait for you to edit it.");
	if(User[playerid][Useradmin] < 4 && value > 5)
		value = 5;
	UpdateTrait(id, trait, value);
	format(large_string, sizeof large_string, "STFCMD: %s (ID:%d) has set %s (ID: %d) %s to %d.", User[playerid][forumname], playerid, User[id][Username], id, trait, value);
	Staff(ADMIN, large_string);
	new File:pos= fopen("Logs/EditTrait.log", io_append);
	format(large_string, sizeof large_string,"[%s][%s] %s set %s %s to %d.\r\n",PasteDate(),PasteTime(), User[playerid][Username], User[id][Username], trait, value);
	fwrite(pos, large_string);
	fclose(pos);
	large_string[0] = EOS;
	return 1;
}
CMD:addmf(playerid, params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		//format(query, sizeof query,"INSERT INTO advantages (userid, item, value, start) VALUES (%d, '%s', %d, %d)", User[playerid][UserID], inputtext, point, merit);
		new target,
			item[64],
			value,
			start;
		if(sscanf(params, "is[64]ii", target, item, value, start)) 
			return MSG(playerid, GOLD, "SYNTAX:"GR" /addmf [userid] [merit/flaw name] [points] [start]");
		format(large_string, sizeof large_string,"INSERT INTO advantages (userid, item, value, start) VALUES (%d, '%s', %d, %d)", target, item, value, start);
		db_query(Database, large_string);
		large_string[0] = EOS;
		return 1;
	} 
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:other(playerid, params[])
{
	if(User[playerid][Logged])
	{
		User[playerid][SheetMonitor] = playerid;
		User[playerid][SheetMonitorID] = User[playerid][UserID];
		if(User[playerid][Useradmin] > 0)
			Dialog_Show(playerid,dSheetOtherAdmin,DIALOG_STYLE_LIST,"Other","List\nShow Roleplay Feature\nAdd Roleplay Feature\nDelete Roleplay Feature","Close","");
		else Dialog_Show(playerid,dSheetOtherAdmin,DIALOG_STYLE_LIST,"Other","List\nShow Roleplay Feature","Close","");
		return 1;
	}
	return 0;
}
CMD:charactersheet(playerid,params[]) return cmd_cs(playerid,params);
CMD:cs(playerid,params[]) 
{
	if(User[playerid][Logged])
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		new admin = playerid;
		if(User[playerid][Useradmin] > 0)
		{
			if(!isnull(params))
			{
				sscanf(params,"u",playerid);
				if(!IsPlayerConnected(playerid))
				{
					playerid = admin;
				}
				else
				{
					/*if(User[admin][Useradmin] < 4)
					{
						new p_race;
						if(!strcmp(User[admin][pAdminRank], "Community Advisor", true)) p_race = 0;
						else if(!strcmp(User[admin][pAdminRank], "Vampire Advisor", true)) p_race = 1;
						else if(!strcmp(User[admin][pAdminRank], "Werewolf Advisor", true)) p_race = 2;
						else if(!strcmp(User[admin][pAdminRank], "Mage Advisor", true)) p_race = 3;
						else if(!strcmp(User[admin][pAdminRank], "Hunter Advisor", true)) p_race = 4;

						if(p_race != User[playerid][Userrace])
						{
							return MSG(admin, GOLD, "ERROR:"GR" Permission denied. You are not an advisor of this player's race.");
						}
					}*/
				}
			}

		}
		if(!User[playerid][Logged]) return MSG(playerid, GOLD, "ERROR:"GR" Specified player is not logged on.");
		large_string[0] = EOS;

		switch(User[playerid][Userrace]) 
		{
			case 0: // human
			{
				if(GetPVarInt(playerid, "FreshCS") == 1 && GetPVarInt(playerid, "dMessageCool_Down") > gettime())
				{
					MSG(playerid,MAROON,"Character Creation Process (type (/next) to move to the next step).");
					MSG(playerid,GRAD2,"Step I (Character Concept): Choose concept, Nature, and Demeanor. (/learn [term)");
					SetPVarInt(playerid, "dMessageCool_Down", gettime()+8);
				}
				large_string[0] = EOS;
				new nature[MAX_TRAIT_NAME],
					demeanor[MAX_TRAIT_NAME],
					concept[MAX_TRAIT_NAME],
					affiliation[MAX_TRAIT_NAME];
				GetPVarString(playerid, "Nature", nature, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Demeanor", demeanor, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Concept", concept, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Affiliation", affiliation, MAX_TRAIT_NAME);
				new query[500];
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 4 AND userid = %d",User[playerid][UserID]);
				new DBResult: Result = db_query(Database, query);
				query[0] = EOS;
				new discipline[24];
				do
				{
					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						new dot[11];
						switch(value)
						{
							case 1: strcat(dot, "•");
							case 2: strcat(dot, "••");
							case 3: strcat(dot, "•••");
							case 4: strcat(dot, "••••");
							case 5: strcat(dot, "•••••");
							case 6: strcat(dot, "••••••");
							case 7: strcat(dot, "•••••••");
							case 8: strcat(dot, "••••••••");
							case 9: strcat(dot, "•••••••••");
							case 10: strcat(dot, "••••••••••");
							default: strcat(dot,"ooooo");
						}
						format(query,sizeof query,"%s\n\t%s %s",query, discipline, dot);
					}
					else
					{
						strcat(query, "\n\t{8C8C8C}No Secondary Traits to Display");
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);	
				format(large_string,sizeof large_string,
				"Player: %s\nName: %s\nNature: %s\nDemeanor: %s\nConcept: %s\nAffiliation: %s\n\t"R"    |--- Attributes ---|"W"\n"R"[Physical]"W"\n\tStrength %s\n\tDexterity %s\n\tStamina %s\n"R"[Social]"W"\n\tCharisma %s\n\tManipulation %s\n\tAppearance %s\n"R"[Mental]\n\tPerception %s\n\tIntelligence %s\n\tWits %s\n\t"R"    |--- Abilities ---|"W"\n"R"[Talents]\n\tAlertness %s\n\tAthletics %s\n\tAwareness %s\n\tBrawl %s\n\tEmpathy %s\n\tExpression %s\n\tIntimidation %s\n\tLeadership %s\n\tStreetwise %s\n\tSubterfuge %s\n"R"[Skills]"W"\n\tAnimal Ken %s\n\tCrafts %s\n\tDrive %s\n\tEtiquette %s\n\tFirearms %s\n\tLarceny %s\n\tMelee %s\n\tPerformance %s\n\tStealth %s\n\tSurvival %s\n"R"[Knowledges]\n\tAcademics %s\n\tComputer %s\n\tFinance %s\n\tInvestigation %s\n\tLaw %s\n\tMedicine %s\n\tOccult %s\n\tPolitics %s\n\tScience %s\n\tTechnology %s\n"R"[Secondary Traits]"W" %s\n\t"R"    |--- Advantages ---|"W"\n",
				User[playerid][forumname],sendernameEx(playerid),nature,demeanor,concept,affiliation,GetDotValue(playerid, "Strength"),GetDotValue(playerid, "Dexterity"),GetDotValue(playerid, "Stamina"),GetDotValue(playerid, "Charisma"),GetDotValue(playerid, "Manipulation"),GetDotValue(playerid, "Appearance"),GetDotValue(playerid, "Perception"),GetDotValue(playerid, "Intelligence"),GetDotValue(playerid, "Wits"),GetDotValue(playerid,"Alertness"),GetDotValue(playerid,"Athletics"),GetDotValue(playerid,"Awareness"),GetDotValue(playerid,"Brawl"),
				GetDotValue(playerid,"Empathy"),GetDotValue(playerid,"Expression"),GetDotValue(playerid,"Intimidation"),GetDotValue(playerid,"Leadership"),GetDotValue(playerid,"Streetwise"),GetDotValue(playerid,"Subterfuge"),GetDotValue(playerid,"Animal Ken"),GetDotValue(playerid,"Crafts"), GetDotValue(playerid,"Drive"),GetDotValue(playerid,"Etiquette"),GetDotValue(playerid,"Firearms"),GetDotValue(playerid,"Larceny"),GetDotValue(playerid,"Melee"),GetDotValue(playerid,"Performance"),GetDotValue(playerid,"Stealth"),GetDotValue(playerid,"Survival"),
				GetDotValue(playerid,"Academics"),GetDotValue(playerid,"Computer"),GetDotValue(playerid,"Finance"),GetDotValue(playerid,"Investigation"),GetDotValue(playerid,"Law"),GetDotValue(playerid,"Medicine"),GetDotValue(playerid,"Occult"),GetDotValue(playerid,"Politics"),GetDotValue(playerid,"Science"),GetDotValue(playerid,"Technology"), query);
				// --------------- NUMINA DISPLAY:
				format(large_string,sizeof large_string,"%s"R"[Numina/Other Traits]"W"",large_string);
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 1 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "••••• •");
							case 7: strcat(query, "••••• ••");
							case 8: strcat(query, "••••• •••");
							case 9: strcat(query, "••••• ••••");
							case 10: strcat(query, "••••• •••••");
							default: strcat(query,"ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, discipline, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Numina to Display"W"",large_string, discipline, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);

				// --------- BACKGROUNDS DISPLAY:
				format(large_string,sizeof large_string,"%s\n"R"[Backgrounds]"W"",large_string);
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 2 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "••••• •");
							case 7: strcat(query, "••••• ••");
							case 8: strcat(query, "••••• •••");
							case 9: strcat(query, "••••• ••••");
							case 10: strcat(query, "••••• •••••");
							default: strcat(query,"ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, discipline, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Backgrounds to Display"W"",large_string, discipline, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);
				// VIRTUES:
				format(large_string,sizeof large_string,"%s\n"R"[Virtues]"W"\n\tConscience/Conviction %s\n\tSelf-Control/Instinct %s\n\tCourage %s\n"R"[Other]"W"\n\tHumanity/Path %s\n\tWillpower %s (%s)\n\tExperience: %d"
				,large_string,GetDotValue(playerid, "Conscience/Conviction"),GetDotValue(playerid, "Self-Control/Instinct"), GetDotValue(playerid, "Courage"), GetDotValue(playerid,"Humanity/Path"), GetDotValue(playerid,"Willpower"), GetDotValue(playerid,"tWillpower"), GetPVarInt(playerid, "Experience"));
				//print(large_string);				
			}
			case 1: // vampire
			{
				if(GetPVarInt(playerid, "FreshCS") == 1 && GetPVarInt(playerid, "dMessageCool_Down") > gettime())
				{
					MSG(playerid,MAROON,"Character Creation Process (type (/next) to move to the next step):");
					MSG(playerid,GRAD2,"Step I (Character Concept): Choose concept, Nature, and Demeanor. (/learn [term)");
					SetPVarInt(playerid, "dMessageCool_Down", gettime()+8);
				}
				large_string[0] = EOS;
				new nature[MAX_TRAIT_NAME],
					clan[MAX_TRAIT_NAME],
					demeanor[MAX_TRAIT_NAME],
					concept[MAX_TRAIT_NAME],
					sire[MAX_TRAIT_NAME],
					sect[MAX_TRAIT_NAME];
				GetPVarString(playerid, "Nature", nature, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Clan", clan, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Demeanor", demeanor, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Concept", concept, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Sire", sire, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Sect", sect, MAX_TRAIT_NAME);
				new query[500];
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 4 AND userid = %d",User[playerid][UserID]);
				new DBResult: Result = db_query(Database, query);
				query[0] = EOS;
				new discipline[24];
				do
				{
					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						new dot[11];
						switch(value)
						{
							case 1: strcat(dot, "•");
							case 2: strcat(dot, "••");
							case 3: strcat(dot, "•••");
							case 4: strcat(dot, "••••");
							case 5: strcat(dot, "•••••");
							case 6: strcat(dot, "••••••");
							case 7: strcat(dot, "•••••••");
							case 8: strcat(dot, "••••••••");
							case 9: strcat(dot, "•••••••••");
							case 10: strcat(dot, "••••••••••");
							default: strcat(dot,"ooooo");
						}
						format(query,sizeof query,"%s\n\t%s %s",query, discipline, dot);
					}
					else
					{
						strcat(query, "\n\t{8C8C8C}No Secondary Traits to Display");
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);				
				format(large_string,sizeof large_string,
				"Player: %s\nName: %s\n\nNature: %s\nVampiric Age: %d\nClan: %s\nDemeanor: %s\nGeneration: %dth\nConcept: %s\nSire: %s\nSect: %s\n\t"MAR"    |--- Attributes ---|"W"\n"MAR"[Physical]"W"\n\tStrength %s (+%d)\n\tDexterity %s (+%d)\n\tStamina %s (+%d)\n"MAR"[Social]"W"\n\tCharisma %s\n\tManipulation %s\n\tAppearance %s\n"MAR"[Mental]\n\tPerception %s\n\tIntelligence %s\n\tWits %s\n\t"MAR"    |--- Abilities ---|"W"\n"MAR"[Talents]\n\tAlertness %s\n\tAthletics %s\n\tAwareness %s\n\tBrawl %s\n\tEmpathy %s\n\tExpression %s\n\tIntimidation %s\n\tLeadership %s\n\tStreetwise %s\n\tSubterfuge %s\n"MAR"[Skills]"W"\n\tAnimal Ken %s\n\tCrafts %s\n\tDrive %s\n\tEtiquette %s\n\tFirearms %s\n\tLarceny %s\n\tMelee %s\n\tPerformance %s\n\tStealth %s\n\tSurvival %s\n"MAR"[Knowledges]\n\tAcademics %s\n\tComputer %s\n\tFinance %s\n\tInvestigation %s\n\tLaw %s\n\tMedicine %s\n\tOccult %s\n\tPolitics %s\n\tScience %s\n\tTechnology %s\n"MAR"[Secondary Traits]"W" %s\n\t"MAR"    |--- Advantages ---|"W"\n",
				User[playerid][forumname],sendernameEx(playerid),nature,GetPVarInt(playerid,"vAge"),clan,demeanor,GetPVarInt(playerid,"vGeneration"),concept,sire,sect,GetDotValue(playerid, "Strength"),GetPVarInt(playerid, "bStrength"),GetDotValue(playerid, "Dexterity"),GetPVarInt(playerid, "bDexterity"),GetDotValue(playerid, "Stamina"),GetPVarInt(playerid, "bStamina"),GetDotValue(playerid, "Charisma"),GetDotValue(playerid, "Manipulation"),GetDotValue(playerid, "Appearance"),GetDotValue(playerid, "Perception"),GetDotValue(playerid, "Intelligence"),GetDotValue(playerid, "Wits"),GetDotValue(playerid,"Alertness"),GetDotValue(playerid,"Athletics"),GetDotValue(playerid,"Awareness"),GetDotValue(playerid,"Brawl"),
				GetDotValue(playerid,"Empathy"),GetDotValue(playerid,"Expression"),GetDotValue(playerid,"Intimidation"),GetDotValue(playerid,"Leadership"),GetDotValue(playerid,"Streetwise"),GetDotValue(playerid,"Subterfuge"),GetDotValue(playerid,"Animal Ken"),GetDotValue(playerid,"Crafts"), GetDotValue(playerid,"Drive"),GetDotValue(playerid,"Etiquette"),GetDotValue(playerid,"Firearms"),GetDotValue(playerid,"Larceny"),GetDotValue(playerid,"Melee"),GetDotValue(playerid,"Performance"),GetDotValue(playerid,"Stealth"),GetDotValue(playerid,"Survival"),
				GetDotValue(playerid,"Academics"),GetDotValue(playerid,"Computer"),GetDotValue(playerid,"Finance"),GetDotValue(playerid,"Investigation"),GetDotValue(playerid,"Law"),GetDotValue(playerid,"Medicine"),GetDotValue(playerid,"Occult"),GetDotValue(playerid,"Politics"),GetDotValue(playerid,"Science"),GetDotValue(playerid,"Technology"), query);
				format(large_string,sizeof large_string,"%s"MAR"[Disciplines]"W"",large_string);
				
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 1 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "••••••");
							case 7: strcat(query, "•••••••");
							case 8: strcat(query, "••••••••");
							case 9: strcat(query, "•••••••••");
							case 10: strcat(query, "••••••••••");
							default: strcat(query,"ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, discipline, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Disciplines to Display"W"",large_string, discipline, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);

				// --------- BACKGROUNDS DISPLAY:
				format(large_string,sizeof large_string,"%s\n"MAR"[Backgrounds]"W"",large_string);
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 2 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "••••••");
							case 7: strcat(query, "•••••••");
							case 8: strcat(query, "••••••••");
							case 9: strcat(query, "•••••••••");
							case 10: strcat(query, "••••••••••");
							default: strcat(query,"ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, discipline, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Backgrounds to Display"W"",large_string, discipline, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);
				// VIRTUES:
				format(large_string,sizeof large_string,"%s\n"MAR"[Virtues]"W"\n\tConscience/Conviction %s\n\tSelf-Control/Instinct %s\n\tCourage %s\n"MAR"[Other]"W"\n\tHumanity/Path %s\n\tWillpower %s (%s)\n\tBlood Pool %s (%d)\n\tMax Blood Pool: %d\n\tMax Blood Points/Turn: %d\n\tMax Trait Rating: %d\n\tExperience: %d"
				,large_string,GetDotValue(playerid, "Conscience/Conviction"),GetDotValue(playerid, "Self-Control/Instinct"), GetDotValue(playerid, "Courage"), GetDotValue(playerid,"Humanity/Path"), GetDotValue(playerid,"Willpower"), GetDotValue(playerid,"tWillpower"), GetDotValue(playerid,"BloodPool"), GetPVarInt(playerid, "BloodPool"),GetMaxBloodPool(playerid), GetMaxBPTurn(playerid), GetMaxTraitRating(playerid), GetPVarInt(playerid, "Experience"));
				//print(large_string);
			}
			case 2: // werewolf
			{
				if(GetPVarInt(playerid, "FreshCS") == 1 && GetPVarInt(playerid, "dMessageCool_Down") > gettime())
				{
					MSG(playerid,MAROON,"Character Creation Process (type (/next) to move to the next step):");
					SetPVarInt(playerid, "dMessageCool_Down", gettime()+8);
					//MSG(playerid,GRAD2,"Step I (Character Concept): Choose concept, Nature, and Demeanor. (type /learn [term] to learn more about a specified term)");
				}
				large_string[0] = EOS;
				new breed[MAX_TRAIT_NAME],
					auspice[MAX_TRAIT_NAME],
					tribe[MAX_TRAIT_NAME],
					packname[MAX_TRAIT_NAME],
					packtotem[MAX_TRAIT_NAME],
					concept[MAX_TRAIT_NAME],
					rank[MAX_TRAIT_NAME],
					camp[MAX_TRAIT_NAME],
					deedname[MAX_TRAIT_NAME];
				GetPVarString(playerid, "Breed", breed, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Auspice", auspice, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Tribe", tribe, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Pack Name", packname, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Pack Totem", packtotem, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Concept", concept, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Rank", rank, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Camp", camp, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Deed Name", deedname, MAX_TRAIT_NAME);
				new query[500];
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 4 AND userid = %d",User[playerid][UserID]);
				new DBResult: Result = db_query(Database, query);
				query[0] = EOS;
				new discipline[24];
				do
				{
					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						new dot[11];
						switch(value)
						{
							case 1: strcat(dot, "•");
							case 2: strcat(dot, "••");
							case 3: strcat(dot, "•••");
							case 4: strcat(dot, "••••");
							case 5: strcat(dot, "•••••");
							case 6: strcat(dot, "••••••");
							case 7: strcat(dot, "•••••••");
							case 8: strcat(dot, "••••••••");
							case 9: strcat(dot, "•••••••••");
							case 10: strcat(dot, "••••••••••");
							default: strcat(dot,"ooooo");
						}
						format(query,sizeof query,"%s\n\t%s %s",query, discipline, dot);
					}
					else
					{
						strcat(query, "\n\t{8C8C8C}No Secondary Traits to Display");
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);	
				format(large_string,sizeof large_string,
				"Player: %s\nName: %s\nBreed: %s\nAuspice: %s\nTribe: %s\nCamp: %s\nPack Name: %s\nPack Totem: %s\nConcept: %s\nDeed Name: %s\n\t"WR"    |--- Attributes ---|"W"\n"WR"[Physical]"W"\n\tStrength %s\n\tDexterity %s\n\tStamina %s\n"WR"[Social]"W"\n\tCharisma %s\n\tManipulation %s\n\tAppearance %s\n"WR"[Mental]\n\tPerception %s\n\tIntelligence %s\n\tWits %s\n\t"WR"    |--- Abilities ---|"W"\n"WR"[Talents]\n\tAlertness %s\n\tAthletics %s\n\tBrawl %s\n\tEmpathy %s\n\tExpression %s\n\tLeadership %s\n\tIntimidation %s\n\tPrimal-Urge %s\n\tStreetwise %s\n\tSubterfuge %s\n"WR"[Skills]"W"\n\tAnimal Ken %s\n\tCrafts %s\n\tDrive %s\n\tEtiquette %s\n\tFirearms %s\n\tLarceny %s\n\tMelee %s\n\tPerformance %s\n\tStealth %s\n\tSurvival %s\n"WR"[Knowledges]\n\tAcademics %s\n\tComputer %s\n\tEnigmas %s\n\tInvestigation %s\n\tLaw %s\n\tMedicine %s\n\tOccult %s\n\tRituals %s\n\tScience %s\n\tTechnology %s\n"WR"[Secondary Traits]"W" %s\n\t"WR"    |--- Advantages ---|"W"\n",
				User[playerid][forumname],sendernameEx(playerid),breed,auspice,tribe, camp,packname,packtotem,concept,deedname,GetDotValue(playerid, "Strength"),GetDotValue(playerid, "Dexterity"),GetDotValue(playerid, "Stamina"),GetDotValue(playerid, "Charisma"),GetDotValue(playerid, "Manipulation"),GetDotValue(playerid, "Appearance"),GetDotValue(playerid, "Perception"),GetDotValue(playerid, "Intelligence"),GetDotValue(playerid, "Wits")
				,GetDotValue(playerid,"Alertness"),GetDotValue(playerid,"Athletics"),GetDotValue(playerid,"Brawl"),
				GetDotValue(playerid,"Empathy"),GetDotValue(playerid,"Expression"),GetDotValue(playerid,"Leadership"),GetDotValue(playerid,"Intimidation"),GetDotValue(playerid,"Primal-Urge"),GetDotValue(playerid,"Streetwise"),GetDotValue(playerid,"Subterfuge"),GetDotValue(playerid,"Animal Ken"),GetDotValue(playerid,"Crafts"), GetDotValue(playerid,"Drive"),GetDotValue(playerid,"Etiquette"),GetDotValue(playerid,"Firearms"),GetDotValue(playerid,"Larceny"),GetDotValue(playerid,"Melee"),GetDotValue(playerid,"Performance"),GetDotValue(playerid,"Stealth"),GetDotValue(playerid,"Survival"),
				GetDotValue(playerid,"Academics"),GetDotValue(playerid,"Computer"),GetDotValue(playerid,"Enigmas"),GetDotValue(playerid,"Investigation"),GetDotValue(playerid,"Law"),GetDotValue(playerid,"Medicine"),GetDotValue(playerid,"Occult"),GetDotValue(playerid,"Rituals"),GetDotValue(playerid,"Science"),GetDotValue(playerid,"Technology"), query);
				// --------------- GIFTS DISPLAY:`
				format(large_string,sizeof large_string,"%s"WR"[Gifts]"W"",large_string);
				
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 1 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				new gift[MAX_TRAIT_NAME];
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", gift, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "(Level One)");
							case 2: strcat(query, "(Level Two)");
							case 3: strcat(query, "(Level Three)");
							case 4: strcat(query, "(Level Four)");
							case 5: strcat(query, "(Level Five)");
							case 6: strcat(query, "(Level Six)");
							default: strcat(query,"N/A");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, gift, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Gifts to Display"W"",large_string, gift, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);

				// --------- BACKGROUNDS DISPLAY:
				format(large_string,sizeof large_string,"%s\n"WR"[Backgrounds]"W"",large_string);
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 2 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", gift, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "•••••• •");
							case 7: strcat(query, "••••• ••");
							case 8: strcat(query, "••••• •••");
							case 9: strcat(query, "••••• ••••");
							case 10: strcat(query, "••••• •••••");
							default: strcat(query,"ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, gift, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Backgrounds to Display"W"",large_string, gift, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);
				// other
				format(large_string,sizeof large_string,"%s\n"WR"[Renown]"W"\n\tRank: %s\n\tGlory %s (Temp: %s)\n\tHonor %s (Temp: %s)\n\tWisdom %s (Temp: %s)\n"WR"[Other]"W"\n\tRage %s (Temp: %s)\n\tGnosis %s (Temp: %s)\n\tWillpower %s (Temp: %s)\n\tExperience: %d"
				,large_string,rank,GetDotValue(playerid, "Glory"),GetDotValue(playerid, "tGlory", 1), GetDotValue(playerid, "Honor"),GetDotValue(playerid, "tHonor", 1),GetDotValue(playerid, "Wisdom"),GetDotValue(playerid, "tWisdom", 1)
				,GetDotValue(playerid,"Rage"),GetDotValue(playerid,"tRage"), GetDotValue(playerid,"Gnosis"), GetDotValue(playerid,"tGnosis"), GetDotValue(playerid,"Willpower"), GetDotValue(playerid,"tWillpower"), GetPVarInt(playerid, "Experience"));
			}
			case 3: // mage
			{
				if(GetPVarInt(playerid, "FreshCS") == 1 && GetPVarInt(playerid, "dMessageCool_Down") > gettime())
				{
					MSG(playerid,MAROON,"Character Creation Process (type (/next) to move to the next step):");
					MSG(playerid,GRAD2,"Step I (Character Concept): Choose Concept, Nature, Demeanor, Essence, Affiliation and Sect. (/learn [term)");
					SetPVarInt(playerid, "dMessageCool_Down", gettime()+8);
				}
				large_string[0] = EOS;
				new nature[MAX_TRAIT_NAME],
					demeanor[MAX_TRAIT_NAME],
					concept[MAX_TRAIT_NAME],
					affiliation[MAX_TRAIT_NAME],
					essence[MAX_TRAIT_NAME],
					sect[MAX_TRAIT_NAME],
					paradigm[MAX_TRAIT_NAME];
				GetPVarString(playerid, "Nature", nature, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Demeanor", demeanor, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Concept", concept, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Affiliation", affiliation, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Essence", essence, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Sect", sect, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Paradigm", paradigm, MAX_TRAIT_NAME);
				new query[500];
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 4 AND userid = %d",User[playerid][UserID]);
				new DBResult: Result = db_query(Database, query);
				query[0] = EOS;
				new discipline[24];
				do
				{
					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						new dot[11];
						switch(value)
						{
							case 1: strcat(dot, "•");
							case 2: strcat(dot, "••");
							case 3: strcat(dot, "•••");
							case 4: strcat(dot, "••••");
							case 5: strcat(dot, "•••••");
							case 6: strcat(dot, "••••••");
							case 7: strcat(dot, "•••••••");
							case 8: strcat(dot, "••••••••");
							case 9: strcat(dot, "•••••••••");
							case 10: strcat(dot, "••••••••••");
							default: strcat(dot,"ooooo");
						}
						format(query,sizeof query,"%s\n\t%s %s",query, discipline, dot);
					}
					else
					{
						strcat(query, "\n\t{8C8C8C}No Secondary Traits to Display");
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);	
				format(large_string,sizeof large_string,
				"Player: %s\nName: %s\nNature: %s\nDemeanor: %s\nConcept: %s\nAffiliation: %s\nSect: %s\nEssence: %s\n\nParadigm: %s\n\t"MAGE"    |--- Attributes ---|\n{9400D3}[Physical]"W"\n\tStrength %s\n\tDexterity %s\n\tStamina %s\n{9400D3}[Social]"W"\n\tCharisma %s\n\tManipulation %s\n\tAppearance %s\n{9400D3}[Mental]\n\tPerception %s\n\tIntelligence %s\n\tWits %s\n\t"MAGE"    |--- Abilities ---|"W"\n{9400D3}[Talents]\n\tAlertness %s\n\tAthletics %s\n\tAwareness %s\n\tBrawl %s\n\tEmpathy %s\n\tExpression %s\n\tIntimidation %s\n\tLeadership %s\n\tStreetwise %s\n\tSubterfuge %s\n{9400D3}[Skills]"W"\n\tAnimal Ken %s\n\tCrafts %s\n\tDrive %s\n\tEtiquette %s\n\tFirearms %s\n\tLarceny %s\n\tMelee %s\n\tPerformance %s\n\tStealth %s\n\tSurvival %s\n{9400D3}[Knowledges]\n\tAcademics %s\n\tComputer %s\n\tFinance %s\n\tInvestigation %s\n\tLaw %s\n\tMedicine %s\n\tOccult %s\n\tPolitics %s\n\tScience %s\n\tTechnology %s\n{9400D3}[Secondary Traits]"W" %s\n\t"MAGE"    |--- Advantages ---|"W"\n",
				User[playerid][forumname],sendernameEx(playerid),nature,demeanor,concept,affiliation,sect,essence, paradigm,GetDotValue(playerid, "Strength"),GetDotValue(playerid, "Dexterity"),GetDotValue(playerid, "Stamina"),GetDotValue(playerid, "Charisma"),GetDotValue(playerid, "Manipulation"),GetDotValue(playerid, "Appearance"),GetDotValue(playerid, "Perception"),GetDotValue(playerid, "Intelligence"),GetDotValue(playerid, "Wits"),GetDotValue(playerid,"Alertness"),GetDotValue(playerid,"Athletics"),GetDotValue(playerid,"Awareness"),GetDotValue(playerid,"Brawl"),
				GetDotValue(playerid,"Empathy"),GetDotValue(playerid,"Expression"),GetDotValue(playerid,"Intimidation"),GetDotValue(playerid,"Leadership"),GetDotValue(playerid,"Streetwise"),GetDotValue(playerid,"Subterfuge"),GetDotValue(playerid,"Animal Ken"),GetDotValue(playerid,"Crafts"), GetDotValue(playerid,"Drive"),GetDotValue(playerid,"Etiquette"),GetDotValue(playerid,"Firearms"),GetDotValue(playerid,"Larceny"),GetDotValue(playerid,"Melee"),GetDotValue(playerid,"Performance"),GetDotValue(playerid,"Stealth"),GetDotValue(playerid,"Survival"),
				GetDotValue(playerid,"Academics"),GetDotValue(playerid,"Computer"),GetDotValue(playerid,"Finance"),GetDotValue(playerid,"Investigation"),GetDotValue(playerid,"Law"),GetDotValue(playerid,"Medicine"),GetDotValue(playerid,"Occult"),GetDotValue(playerid,"Politics"),GetDotValue(playerid,"Science"),GetDotValue(playerid,"Technology"), query);
				// --------- BACKGROUNDS DISPLAY:
				format(large_string,sizeof large_string,"%s\n{9400D3}[Backgrounds]"W"",large_string);
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 2 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "••••• •");
							case 7: strcat(query, "••••• ••");
							case 8: strcat(query, "••••• •••");
							case 9: strcat(query, "••••• ••••");
							case 10: strcat(query, "••••• •••••");
							default: strcat(query,"ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, discipline, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Backgrounds to Display"W"",large_string, discipline, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);
				// --------------- SPHERE DISPLAY:
				new sph = GetPVarInt(playerid, "sSphere");
				if(sph == 0) format(large_string,sizeof large_string,"%s\n{9400D3}[Spheres]"W"",large_string);
				else format(large_string,sizeof large_string,"%s\n{9400D3}[Spheres]"GR" (%d Starting Sphere Points Available)",large_string, sph);
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 1 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "••••• •");
							case 7: strcat(query, "••••• ••");
							case 8: strcat(query, "••••• •••");
							case 9: strcat(query, "••••• ••••");
							case 10: strcat(query, "••••• •••••");
							default: strcat(query,"ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, discipline, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Spheres to Display"W"",large_string, discipline, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);

				// VIRTUES:
				format(large_string,sizeof large_string,"%s\n{9400D3}[Other]"W"\n\tArete %s\n\tWillpower %s (%s)\n\tQuintessence %s (Current: %d; Max: %d)\n\tParadox %s (%d)\n\tExperience: %d"
				,large_string,GetDotValue(playerid,"Arete"), GetDotValue(playerid,"Willpower"), GetDotValue(playerid,"tWillpower"), GetDotValue(playerid, "Quintessence"), GetPVarInt(playerid, "Quintessence"), GetPVarInt(playerid, "mQuintessence"), GetDotValue(playerid, "Paradox", 1), GetPVarInt(playerid, "Paradox"),GetPVarInt(playerid, "Experience"));
				//print(large_string);				
			}
			case 4: // hunter
			{
				if(GetPVarInt(playerid, "FreshCS") == 1 && GetPVarInt(playerid, "dMessageCool_Down") > gettime())
				{
					MSG(playerid,MAROON,"Character Creation Process (type (/next) to move to the next step):");
					MSG(playerid,GRAD2,"Step I (Character Concept): Choose Concept, Nature, Demeanor, Primary Virtue and Creed. (/learn [term)");
					SetPVarInt(playerid, "dMessageCool_Down", gettime()+8);
				}
				large_string[0] = EOS;
				new nature[MAX_TRAIT_NAME],
					demeanor[MAX_TRAIT_NAME],
					concept[MAX_TRAIT_NAME],
					pvirtue[MAX_TRAIT_NAME],
					creed[MAX_TRAIT_NAME];
				GetPVarString(playerid, "Nature", nature, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Demeanor", demeanor, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Concept", concept, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Primary Virtue", pvirtue, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Creed", creed, MAX_TRAIT_NAME);
				new query[500];
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 4 AND userid = %d",User[playerid][UserID]);
				new DBResult: Result = db_query(Database, query);
				query[0] = EOS;
				new discipline[24];
				do
				{
					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						new dot[11];
						switch(value)
						{
							case 1: strcat(dot, "•");
							case 2: strcat(dot, "••");
							case 3: strcat(dot, "•••");
							case 4: strcat(dot, "••••");
							case 5: strcat(dot, "•••••");
							case 6: strcat(dot, "••••••");
							case 7: strcat(dot, "•••••••");
							case 8: strcat(dot, "••••••••");
							case 9: strcat(dot, "•••••••••");
							case 10: strcat(dot, "••••••••••");
							default: strcat(dot,"ooooo");
						}
						format(query,sizeof query,"%s\n\t%s %s",query, discipline, dot);
					}
					else
					{
						strcat(query, "\n\t{8C8C8C}No Secondary Traits to Display");
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);	
				format(large_string,sizeof large_string,
				"Player: %s\nName: %s\nNature: %s\nDemeanor: %s\nConcept: %s\nPrimary Virtue: %s\nCreed: %s\nStarting Conviction: %d\n\t"HUNTER"    |--- Attributes ---|\n"HUNTER"[Physical]"W"\n\tStrength %s\n\tDexterity %s\n\tStamina %s\n"HUNTER"[Social]"W"\n\tCharisma %s\n\tManipulation %s\n\tAppearance %s\n"HUNTER"[Mental]\n\tPerception %s\n\tIntelligence %s\n\tWits %s\n\t"HUNTER"    |--- Abilities ---|"W"\n"HUNTER"[Talents]\n\tAlertness %s\n\tAthletics %s\n\tAwareness %s\n\tBrawl %s\n\tEmpathy %s\n\tExpression %s\n\tIntimidation %s\n\tLeadership %s\n\tStreetwise %s\n\tSubterfuge %s\n"HUNTER"[Skills]"W"\n\tAnimal Ken %s\n\tCrafts %s\n\tDrive %s\n\tEtiquette %s\n\tFirearms %s\n\tLarceny %s\n\tMelee %s\n\tPerformance %s\n\tStealth %s\n\tSurvival %s\n"HUNTER"[Knowledges]\n\tAcademics %s\n\tComputer %s\n\tFinance %s\n\tInvestigation %s\n\tLaw %s\n\tMedicine %s\n\tOccult %s\n\tPolitics %s\n\tScience %s\n\tTechnology %s\n"HUNTER"[Secondary Traits]"W" %s\n\t"HUNTER"    |--- Advantages ---|"W"\n",
				User[playerid][forumname],sendernameEx(playerid),nature,demeanor,concept,pvirtue,creed,GetPVarInt(playerid, "sConviction"),GetDotValue(playerid, "Strength"),GetDotValue(playerid, "Dexterity"),GetDotValue(playerid, "Stamina"),GetDotValue(playerid, "Charisma"),GetDotValue(playerid, "Manipulation"),GetDotValue(playerid, "Appearance"),GetDotValue(playerid, "Perception"),GetDotValue(playerid, "Intelligence"),GetDotValue(playerid, "Wits"),GetDotValue(playerid,"Alertness"),GetDotValue(playerid,"Athletics"),GetDotValue(playerid,"Awareness"),GetDotValue(playerid,"Brawl"),
				GetDotValue(playerid,"Empathy"),GetDotValue(playerid,"Expression"),GetDotValue(playerid,"Intimidation"),GetDotValue(playerid,"Leadership"),GetDotValue(playerid,"Streetwise"),GetDotValue(playerid,"Subterfuge"),GetDotValue(playerid,"Animal Ken"),GetDotValue(playerid,"Crafts"), GetDotValue(playerid,"Drive"),GetDotValue(playerid,"Etiquette"),GetDotValue(playerid,"Firearms"),GetDotValue(playerid,"Larceny"),GetDotValue(playerid,"Melee"),GetDotValue(playerid,"Performance"),GetDotValue(playerid,"Stealth"),GetDotValue(playerid,"Survival"),
				GetDotValue(playerid,"Academics"),GetDotValue(playerid,"Computer"),GetDotValue(playerid,"Finance"),GetDotValue(playerid,"Investigation"),GetDotValue(playerid,"Law"),GetDotValue(playerid,"Medicine"),GetDotValue(playerid,"Occult"),GetDotValue(playerid,"Politics"),GetDotValue(playerid,"Science"),GetDotValue(playerid,"Technology"), query);
				// --------- BACKGROUNDS DISPLAY:
				format(large_string,sizeof large_string,"%s\n"HUNTER"[Backgrounds]"W"",large_string);
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 2 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "••••• •");
							case 7: strcat(query, "••••• ••");
							case 8: strcat(query, "••••• •••");
							case 9: strcat(query, "••••• ••••");
							case 10: strcat(query, "••••• •••••");
							default: strcat(query,"ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, discipline, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Backgrounds to Display"W"",large_string, discipline, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);
				// VIRTUES DISPLAY
				new svirtues = GetPVarInt(playerid, "sVirtues");
				if(svirtues == 0) format(large_string,sizeof large_string,"%s\n"HUNTER"[Virtues]"W"",large_string);
				else format(large_string,sizeof large_string,"%s\n"HUNTER"[Virtues] "GR"(%d Starting Points Available)"W"",large_string, svirtues);
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 3 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "••••• •");
							case 7: strcat(query, "••••• ••");
							case 8: strcat(query, "••••• •••");
							case 9: strcat(query, "••••• ••••");
							case 10: strcat(query, "••••• •••••");
							default: strcat(query,"ooooo ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, discipline, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Virtues to Display"W"",large_string, discipline, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);
				// --------------- EDGES DISPLAY:
				new edges = GetPVarInt(playerid, "sEdges");
				if(edges == 0) format(large_string,sizeof large_string,"%s\n"HUNTER"[Edges]"W"",large_string);
				else format(large_string,sizeof large_string,"%s\n"HUNTER"[Edges]"W" "GR"(%d Starting Points Available)",large_string, edges);
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 1 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "••••• •");
							case 7: strcat(query, "••••• ••");
							case 8: strcat(query, "••••• •••");
							case 9: strcat(query, "••••• ••••");
							case 10: strcat(query, "••••• •••••");
							default: strcat(query,"ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, discipline, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Edges to Display"W"",large_string, discipline, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);

				//OTHER
				format(large_string,sizeof large_string,"%s\n"HUNTER"[Other]"W"\n\tConviction %s (%s)\n\tWillpower %s (%s)\n\tExperience: %d"
				,large_string,GetDotValue(playerid,"Conviction"), GetDotValue(playerid,"tConviction"), GetDotValue(playerid,"Willpower"), GetDotValue(playerid,"tWillpower"),GetPVarInt(playerid, "Experience"));
				//print(large_string);				
			}
			case 5: // demon
			{
				if(GetPVarInt(playerid, "FreshCS") == 1 && GetPVarInt(playerid, "dMessageCool_Down") > gettime())
				{
					MSG(playerid,MAROON,"Character Creation Process (type (/next) to move to the next step):");
					MSG(playerid,GRAD2,"Step I (Character Concept): Choose Concept, Nature, and Demeanor.");
					SetPVarInt(playerid, "dMessageCool_Down", gettime()+8);
				}
				large_string[0] = EOS;
				new nature[MAX_TRAIT_NAME],
					dfaction[MAX_TRAIT_NAME],
					demeanor[MAX_TRAIT_NAME],
					concept[MAX_TRAIT_NAME],
					visage[MAX_TRAIT_NAME],
					house[MAX_TRAIT_NAME];
				GetPVarString(playerid, "Nature", nature, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Faction", dfaction, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Demeanor", demeanor, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Concept", concept, MAX_TRAIT_NAME);
				GetPVarString(playerid, "House", house, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Visage", visage, MAX_TRAIT_NAME);
				new query[500];
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 4 AND userid = %d",User[playerid][UserID]);
				new DBResult: Result = db_query(Database, query);
				query[0] = EOS;
				new discipline[24];
				do
				{
					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						new dot[11];
						switch(value)
						{
							case 1: strcat(dot, "•");
							case 2: strcat(dot, "••");
							case 3: strcat(dot, "•••");
							case 4: strcat(dot, "••••");
							case 5: strcat(dot, "•••••");
							case 6: strcat(dot, "••••••");
							case 7: strcat(dot, "•••••••");
							case 8: strcat(dot, "••••••••");
							case 9: strcat(dot, "•••••••••");
							case 10: strcat(dot, "••••••••••");
							default: strcat(dot,"ooooo");
						}
						format(query,sizeof query,"%s\n\t%s %s",query, discipline, dot);
					}
					else
					{
						strcat(query, "\n\t{8C8C8C}No Secondary Traits to Display");
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);				
				format(large_string,sizeof large_string,"Player: %s\nName: %s\n\nNature: %s\nDemeanor: %s\nConcept: %s\nHouse: %s\nFaction: %s\nVisage: %s\n\t"DEMON"    |--- Attributes ---|"W"\n"DEMON"[Physical]"W"\n\tStrength %s\n\tDexterity %s\n\tStamina %s\n"DEMON"[Social]"W"\n\tCharisma %s\n\tManipulation %s\n\tAppearance %s\n"DEMON"[Mental]\n\tPerception %s\n\tIntelligence %s\n\tWits %s\n\t"DEMON"    |--- Abilities ---|"W"\n"DEMON"[Talents]\n\tAlertness %s\n\tAthletics %s\n\tAwareness %s\n\tBrawl %s\n\tEmpathy %s\n\tExpression %s\n\tIntimidation %s\n\tIntuition %s\n\tLeadership %s\n\tStreetwise %s\n\tSubterfuge %s\n"DEMON"[Skills]"W"\n\tAnimal Ken %s\n\tCrafts %s\n\tDrive %s\n\tEtiquette %s\n\tFirearms %s\n\tLarceny %s\n\tMelee %s\n\tPerformance %s\n\tStealth %s\n\tSurvival %s\n"DEMON"[Knowledges]\n\tAcademics %s\n\tComputer %s\n\tFinance %s\n\tInvestigation %s\n\tLaw %s\n\tMedicine %s\n\tOccult %s\n\tPolitics %s\n\tScience %s\n\tTechnology %s\n"DEMON"[Secondary Traits]"W" %s\n\t"DEMON"    |--- Advantages ---|"W"\n",
				User[playerid][forumname],sendernameEx(playerid),nature, demeanor, concept, house, dfaction, visage,GetDotValue(playerid, "Strength"),GetDotValue(playerid, "Dexterity"),GetDotValue(playerid, "Stamina"),GetDotValue(playerid, "Charisma"),GetDotValue(playerid, "Manipulation"),GetDotValue(playerid, "Appearance"),GetDotValue(playerid, "Perception"),GetDotValue(playerid, "Intelligence"),GetDotValue(playerid, "Wits"),GetDotValue(playerid,"Alertness"),GetDotValue(playerid,"Athletics"),GetDotValue(playerid,"Awareness"),GetDotValue(playerid,"Brawl"),
				GetDotValue(playerid,"Empathy"),GetDotValue(playerid,"Expression"),GetDotValue(playerid,"Intimidation"),GetDotValue(playerid,"Intuition"),GetDotValue(playerid,"Leadership"),GetDotValue(playerid,"Streetwise"),GetDotValue(playerid,"Subterfuge"),GetDotValue(playerid,"Animal Ken"),GetDotValue(playerid,"Crafts"), GetDotValue(playerid,"Drive"),GetDotValue(playerid,"Etiquette"),GetDotValue(playerid,"Firearms"),GetDotValue(playerid,"Larceny"),GetDotValue(playerid,"Melee"),GetDotValue(playerid,"Performance"),GetDotValue(playerid,"Stealth"),GetDotValue(playerid,"Survival"),
				GetDotValue(playerid,"Academics"),GetDotValue(playerid,"Computer"),GetDotValue(playerid,"Finance"),GetDotValue(playerid,"Investigation"),GetDotValue(playerid,"Law"),GetDotValue(playerid,"Medicine"),GetDotValue(playerid,"Occult"),GetDotValue(playerid,"Politics"),GetDotValue(playerid,"Science"),GetDotValue(playerid,"Technology"), query);
				format(large_string,sizeof large_string,"%s"DEMON"[Lore]"W"",large_string);
				
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 1 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "••••••");
							case 7: strcat(query, "•••••••");
							case 8: strcat(query, "••••••••");
							case 9: strcat(query, "•••••••••");
							case 10: strcat(query, "••••••••••");
							default: strcat(query,"ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, discipline, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Lore to Display"W"",large_string, discipline, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);

				// --------- BACKGROUNDS DISPLAY:
				format(large_string,sizeof large_string,"%s\n"DEMON"[Backgrounds]"W"",large_string);
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 2 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "••••••");
							case 7: strcat(query, "•••••••");
							case 8: strcat(query, "••••••••");
							case 9: strcat(query, "•••••••••");
							case 10: strcat(query, "••••••••••");
							default: strcat(query,"ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, discipline, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Backgrounds to Display"W"",large_string, discipline, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);
				// VIRTUES:
				format(large_string,sizeof large_string,"%s\n"DEMON"[Virtues]"W"\n\tConscience %s\n\tConviction %s\n\tCourage %s\n"DEMON"[Other]"W"\n\tFaith %s (%s)\n\tTorment %s (%s)\n\tWillpower %s (%s)\n\tExperience: %d"
				,large_string,GetDotValue(playerid, "Conscience"),GetDotValue(playerid, "Conviction"), GetDotValue(playerid, "Courage"), GetDotValue(playerid,"Faith"), GetDotValue(playerid,"tFaith"),GetDotValue(playerid,"Torment", 1),GetDotValue(playerid,"tTorment", 1), 
				GetDotValue(playerid,"Willpower"), GetDotValue(playerid,"tWillpower"), GetPVarInt(playerid, "Experience"));
				//print(large_string);
			}
			case 6: // changeling
			{
				if(GetPVarInt(playerid, "FreshCS") == 1 && GetPVarInt(playerid, "dMessageCool_Down") > gettime())
				{
					MSG(playerid,MAROON,"Character Creation Process (type (/next) to move to the next step):");
					MSG(playerid,GRAD2,"Step I (Character Concept): Choose Concept, Nature, and Demeanor.");
					SetPVarInt(playerid, "dMessageCool_Down", gettime()+8);
				}
				large_string[0] = EOS;
				// new nature[MAX_TRAIT_NAME],
				new kith[MAX_TRAIT_NAME],
					court[MAX_TRAIT_NAME],
					legacy[MAX_TRAIT_NAME],
					seeming[MAX_TRAIT_NAME],
					house[MAX_TRAIT_NAME];
				// GetPVarString(playerid, "Nature", nature, MAX_TRAIT_NAME);
				// GetPVarString(playerid, "Concept", concept, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Kith", kith, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Court", court, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Legacy", legacy, MAX_TRAIT_NAME);
				GetPVarString(playerid, "Seeming", seeming, MAX_TRAIT_NAME);
				GetPVarString(playerid, "House", house, MAX_TRAIT_NAME);
				
				new query[500];
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 4 AND userid = %d",User[playerid][UserID]);
				new DBResult: Result = db_query(Database, query);
				query[0] = EOS;
				new discipline[24];
				do
				{
					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						new dot[11];
						switch(value)
						{
							case 1: strcat(dot, "•");
							case 2: strcat(dot, "••");
							case 3: strcat(dot, "•••");
							case 4: strcat(dot, "••••");
							case 5: strcat(dot, "•••••");
							case 6: strcat(dot, "••••••");
							case 7: strcat(dot, "•••••••");
							case 8: strcat(dot, "••••••••");
							case 9: strcat(dot, "•••••••••");
							case 10: strcat(dot, "••••••••••");
							default: strcat(dot,"ooooo");
						}
						format(query,sizeof query,"%s\n\t%s %s",query, discipline, dot);
					}
					else
					{
						strcat(query, "\n\t{8C8C8C}No Secondary Traits to Display");
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);				
				format(large_string,sizeof large_string,"Player: %s\nName: %s\nKith: %s\nCourt: %s\nLegacy: %s\nSeeming: %s\nHouse: %s\n\t"CHANGELING"    |--- Attributes ---|"W"\n"CHANGELING"[Physical]"W"\n\tStrength %s\n\tDexterity %s\n\tStamina %s\n"CHANGELING"[Social]"W"\n\tCharisma %s\n\tManipulation %s\n\tAppearance %s\n"CHANGELING"[Mental]\n\tPerception %s\n\tIntelligence %s\n\tWits %s\n\t"CHANGELING"    |--- Abilities ---|"W"\n"CHANGELING"[Talents]\n\tAlertness %s\n\tAthletics %s\n\tAwareness %s\n\tBrawl %s\n\tEmpathy %s\n\tExpression %s\n\tIntimidation %s\n\tKenning %s\n\tLeadership %s\n\tStreetwise %s\n\tSubterfuge %s\n"CHANGELING"[Skills]"W"\n\tAnimal Ken %s\n\tCrafts %s\n\tDrive %s\n\tEtiquette %s\n\tFirearms %s\n\tLarceny %s\n\tMelee %s\n\tPerformance %s\n\tStealth %s\n\tSurvival %s\n"CHANGELING"[Knowledges]\n\tComputer %s\n\tEnigmas %s\n\tGremayre %s\n\tInvestigation %s\n\tLaw %s\n\tLinguistics %s\n\tLore %s\n\tMedicine %s\n\tPolitics %s\n\tScience %s\n"CHANGELING"[Secondary Traits]"W" %s\n\t"CHANGELING"    |--- Advantages ---|"W"\n",
				User[playerid][forumname],sendernameEx(playerid), kith, court, legacy, seeming, house, 
				GetDotValue(playerid, "Strength"), // Attributes
				GetDotValue(playerid, "Dexterity"),
				GetDotValue(playerid, "Stamina"),
				GetDotValue(playerid, "Charisma"),
				GetDotValue(playerid, "Manipulation"),
				GetDotValue(playerid, "Appearance"),
				GetDotValue(playerid, "Perception"),
				GetDotValue(playerid, "Intelligence"),
				GetDotValue(playerid, "Wits"),
				GetDotValue(playerid,"Alertness"), // Abilities 
				GetDotValue(playerid,"Athletics"),
				GetDotValue(playerid,"Awareness"),
				GetDotValue(playerid,"Brawl"),
				GetDotValue(playerid,"Empathy"),
				GetDotValue(playerid,"Expression"),
				GetDotValue(playerid,"Intimidation"),
				GetDotValue(playerid,"Kenning"),
				GetDotValue(playerid,"Leadership"),
				GetDotValue(playerid,"Streetwise"),
				GetDotValue(playerid,"Subterfuge"),
				GetDotValue(playerid,"Animal Ken"),
				GetDotValue(playerid,"Crafts"), 
				GetDotValue(playerid,"Drive"),
				GetDotValue(playerid,"Etiquette"),
				GetDotValue(playerid,"Firearms"),
				GetDotValue(playerid,"Larceny"),
				GetDotValue(playerid,"Melee"),
				GetDotValue(playerid,"Performance"),
				GetDotValue(playerid,"Stealth"),
				GetDotValue(playerid,"Survival"),
				GetDotValue(playerid,"Computer"), // rKnowledges
				GetDotValue(playerid,"Enigmas"),
				GetDotValue(playerid,"Gremayre"),
				GetDotValue(playerid,"Investigation"),
				GetDotValue(playerid,"Law"),
				GetDotValue(playerid,"Linguistics"),
				GetDotValue(playerid,"Lore"),
				GetDotValue(playerid,"Medicine"),
				GetDotValue(playerid,"Politics"),
				GetDotValue(playerid,"Science"), query);
				// ARTS
				new arts = GetPVarInt(playerid, "sArts");
				if(arts == 0) format(large_string,sizeof large_string,"%s\n"CHANGELING"[Arts]"W"",large_string);
				else format(large_string,sizeof large_string,"%s\n"CHANGELING"[Arts]"W" "GR"(%d Starting Points Available)",large_string, arts);				
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 1 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "••••• •");
							case 7: strcat(query, "••••• ••");
							case 8: strcat(query, "••••• •••");
							case 9: strcat(query, "••••• ••••");
							case 10: strcat(query, "••••• •••••");
							default: strcat(query,"ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, discipline, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Arts to Display"W"",large_string, discipline, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);
				// REALMS
				new realms = GetPVarInt(playerid, "sRealms");
				if(realms == 0) format(large_string,sizeof large_string,"%s\n"CHANGELING"[Realms]"W"",large_string);
				else format(large_string,sizeof large_string,"%s\n"CHANGELING"[Realms]"W" "GR"(%d Starting Points Available)",large_string, realms);
				
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 3 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "••••• •");
							case 7: strcat(query, "••••• ••");
							case 8: strcat(query, "••••• •••");
							case 9: strcat(query, "••••• ••••");
							case 10: strcat(query, "••••• •••••");
							default: strcat(query,"ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, discipline, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Realms to Display"W"",large_string, discipline, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);

				// --------- BACKGROUNDS DISPLAY:
				format(large_string,sizeof large_string,"%s\n"CHANGELING"[Backgrounds]"W"",large_string);
				format(query,sizeof query,"SELECT * FROM SHEET WHERE type = 2 AND userid = %d",User[playerid][UserID]);
				Result = db_query(Database, query);
				do
				{
					if(db_num_rows(Result))
					{
						query[0] = EOS;
						db_get_field_assoc(Result, "trait", discipline, 24);
						new value = db_get_field_assoc_int(Result, "value");
						switch(value)
						{
							case 1: strcat(query, "•");
							case 2: strcat(query, "••");
							case 3: strcat(query, "•••");
							case 4: strcat(query, "••••");
							case 5: strcat(query, "•••••");
							case 6: strcat(query, "••••••");
							case 7: strcat(query, "•••••••");
							case 8: strcat(query, "••••••••");
							case 9: strcat(query, "•••••••••");
							case 10: strcat(query, "••••••••••");
							default: strcat(query,"ooooo");
						}
						format(large_string,sizeof large_string,"%s\n\t%s %s",large_string, discipline, query);
					}
					else
					{
						format(large_string,sizeof large_string,"%s\n\t{8C8C8C}No Backgrounds to Display"W"",large_string, discipline, query);
						break;
					}
				}
				while(db_next_row(Result));
				db_free_result(Result);
				// VIRTUES:
				format(large_string,sizeof large_string,"%s\n"CHANGELING"[Other]"W"\n\tGlamour %s (%s)\n\tWillpower %s (%s)\n\tBanality %s (%s)\n\tExperience: %d"
				,large_string, GetDotValue(playerid,"Glamour"), GetDotValue(playerid,"tGlamour"),GetDotValue(playerid,"Willpower"), GetDotValue(playerid,"tWillpower"), 
				GetDotValue(playerid,"Banality"), GetDotValue(playerid,"tBanality"),GetPVarInt(playerid, "Experience"));
				//print(large_string);
			}
		}
		User[admin][SheetMonitor] = playerid;
		User[admin][SheetMonitorID] = User[playerid][UserID];
		new dhead[64];
		new freebies = GetPVarInt(playerid, "sFreebie");
		if(freebies > 0) format(dhead, 64, "Interactive Character Sheet (Freebies: %d)", freebies);
			else dhead = "Interactive Character Sheet";
		Dialog_Show(admin,dSheet,DIALOG_STYLE_LIST,dhead,large_string,"Select","Close");
		large_string[0] = EOS;			
	}
	else  MSG(playerid,GOLD,"ERROR:"GR" You are not logged on!");
	return 1;
}
public OnPlayerSpawn(playerid)
{
	if(IsPlayerAdmin(playerid)) SFM(playerid,-1,"VW: %d; INTERIOR: %d",User[playerid][pvw],User[playerid][pint]);
	User[playerid][Spawned] = true;
	printf("[%s][%s] [OnPlayerSpawn] OnPlayerSpawn has been called by %s. (VW: %d; Interior: %d)",PasteDate(), PasteTime(), User[playerid][Username], User[playerid][pvw],User[playerid][pint]);
	if(User[playerid][shapeshift] == 0)
	{
		if(User[playerid][fduty] == 0)
			SetPlayerSkin(playerid,User[playerid][uSkin]);
		else
		{
			SetPlayerSkin(playerid,User[playerid][funiform]);
			if(User[playerid][gVar] == 1000)
			{
				MSG(playerid,WHITE,"SERVER: You were on duty the last time you've disconnected.");
				User[playerid][gVar] = 0;
			}
		}
	}
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid,User[playerid][uMoney]);
	if(User[playerid][NotNew])
	{
		if(User[playerid][jail][0] > 0)
			MSG(playerid,WHITE,"SERVER: You haven't served your sentence the last time you disconnected. Type (/time) to monitor your jail time.");
	    if(User[playerid][spawnat] > 0 && User[playerid][jail][0] < 1 && User[playerid][spawnat] < MAX_HOUSE) // house spawn 
		{
			if(GetPVarInt(playerid, "PlayerCrash") == 0)
			{
				//SFM(playerid, -1, "%f %f %f",  User[playerid][px],  User[playerid][py],  User[playerid][pz]);
				User[playerid][px] = H[User[playerid][spawnat]][hxi];
				User[playerid][py] = H[User[playerid][spawnat]][hyi];
				User[playerid][pz] = H[User[playerid][spawnat]][hzi];
				User[playerid][pvw] = H[User[playerid][spawnat]][hvwi];
				User[playerid][pint] = H[User[playerid][spawnat]][hinti];
				User[playerid][HouseIN] = User[playerid][spawnat];
				if(H[User[playerid][HouseIN]][hlights] == true)
					TextDrawShowForPlayer(playerid, LightsOff);
			}
		}
		if(User[playerid][spawnat] > 9000 && User[playerid][jail][0] < 1 && User[playerid][faction] > 0) {
			new sfid = User[playerid][faction];
			User[playerid][px] = F[sfid][fposx];
			User[playerid][py] = F[sfid][fposy];
			User[playerid][pz] = F[sfid][fposz];
			User[playerid][pvw] = F[sfid][fvw];
			User[playerid][pint] = F[sfid][fint];
			printf("[factionspawn] %s will spawn at faction spawn [database perspective]: X:%f Y:%f Z:%f VW:%d Int:%d", sendername(playerid), F[sfid][fposx], F[sfid][fposy], F[sfid][fposz], F[sfid][fvw], F[sfid][fint]);
			// printf("%s will spawn at faction spawn [client perspective]: X:%f Y:%f Z:%f VW:%d Int:%d", sendername(playerid), User[playerid][px], User[playerid][py], User[playerid][pz], User[playerid][pvw], User[playerid][pint]);
		} 
		if(GetPVarInt(playerid, "pRespawnPlayer") == 1 && User[playerid][spawnat] < 1  && User[playerid][jail][0] < 1) // player is being respawned by an admin (no house to spawn at)
		{
			User[playerid][px] = RESPAWN_X;
			User[playerid][py] = RESPAWN_Y;
			User[playerid][pz] = RESPAWN_Z;
			DeletePVar(playerid, "pRespawnPlayer");
		}
		SetPlayerInterior(playerid,User[playerid][pint]);
	    SetPlayerVirtualWorld(playerid,User[playerid][pvw]);
	    SetPlayerPos(playerid,User[playerid][px],User[playerid][py],User[playerid][pz]);
	    printf("[OnPlayerSpawn] [player: %d] x %f y %f z %f",playerid,User[playerid][px],User[playerid][py],User[playerid][pz]);
		if(GetPlayerInterior(playerid) == 0 && User[playerid][Userrace] == 1 && day_condition == 1) // sun light damage
		{
			if(User[playerid][HouseIN] != -1 && User[playerid][BusinessIN] != -1)
			{
				SetHealth(playerid, User[playerid][Health]-5);
				SetTimerEx("SunburnTimer", 10000, false, "i", playerid);		
				MSG(playerid, RED,"SUNLIGHT: You have been subjected to the rays of sunlight and slowly started scorching. Seek shelter immediately!");	
			}
		}

	}
	else
	{
		if(User[playerid][Userrace] != 1) // for new players
		{
			SetPlayerProgressBarValue(playerid, bHunger, 100);
			SetPlayerProgressBarValue(playerid, bThirst, 100);
		}
	}
	if(User[playerid][specing] > -1) // spectation
	{
			foreach(Player,i)
			{
				if(User[playerid][specing] > -1)
				{
					if(User[i][specedby] == playerid)
						User[i][specedby] = -1;
				}
			}
			SetPlayerPos(playerid, GetPVarFloat(playerid, "sPosX"), GetPVarFloat(playerid, "sPosY"), GetPVarFloat(playerid, "sPosZ"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "sInt"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "sVW"));
			//SFM(playerid, -1, "%f %f %f", GetPVarFloat(playerid, "sPosX"), GetPVarFloat(playerid, "sPosY"), GetPVarFloat(playerid, "sPosZ"));
			DeletePVar(playerid, "sPosX");
			DeletePVar(playerid, "sPosY");
			DeletePVar(playerid, "sPosZ");
			DeletePVar(playerid, "sVW");
			DeletePVar(playerid, "sInt");
			User[playerid][specing] = -1;
			User[playerid][specedby] = -1;
			MSG(playerid, ADMIN, "Info:"GR" You stopped spectating.");
	}
	SetTimerEx("OnPlayerSpawnComplete",2000,0,"d",playerid);
 	//SetCameraBehindPlayer(playerid);
	if(User[playerid][showhud] == false)
		TextDrawHideForPlayer(playerid, serverhud);
	if(User[playerid][xprecord] == 1)
		MSG(playerid, GOLD, "Info:"GR" Your experience application is still recording. ('/expstart terminate' to delete it; '/expstart confirm' to submit it)");
	StopAudioStreamForPlayer(playerid);
	DeletePVar(playerid, "PlayerCrash");
	if(User[playerid][Userrace] != 1)
	{
		SetPlayerProgressBarValue(playerid, bHunger, User[playerid][pHunger]);
		SetPlayerProgressBarValue(playerid, bThirst, User[playerid][pThirst]);
	}
	new fassume = GetPVarInt(playerid, "AssumeFormSkin");
	if(fassume >= 0 && GetPVarInt(playerid, "p_AssumeForm") > 0)
		SetPlayerSkin(playerid, fassume);
	if(!User[playerid][Logged])
	    KickPlayer(playerid,"Admin","Attempts to bypass the registration/login phase.");
	return 1;
}
public OnPlayerSpawnComplete(playerid)
{
 	if(User[playerid][WeaponEquipped] > 0 && User[playerid][WeaponEquipped_Ammo] > 0)
 	{
		ResetPlayerWeapons(playerid);
		if(User[playerid][WeaponEquipped] == WEAPON_HUNTING_RIFLE) 
			GivePlayerWeapon(playerid,33,User[playerid][WeaponEquipped_Ammo]);
		else GivePlayerWeapon(playerid,User[playerid][WeaponEquipped],User[playerid][WeaponEquipped_Ammo]);
 	}
  	if(User[playerid][druglevel] > 0)
   	{
		// SetPlayerDrunkLevel(playerid, 49999);
		MSG(playerid,RP,"Info:"GR" Last time you have disconnected, you were under the effects of a withdrawal.");
  	}
	if(User[playerid][jail][1] == 1 && User[playerid][jail][0] > 0)
		SetPlayerVirtualWorld(playerid, 1000+playerid);
	if(User[playerid][Userrace] == 1)
	{
		new clan[MAX_TRAIT_NAME],
			sect[MAX_TRAIT_NAME];
		GetPVarString(playerid, "Clan", clan, MAX_TRAIT_NAME);
		GetPVarString(playerid, "Sect", sect, MAX_TRAIT_NAME);
		if(isnull(clan) || isnull(sect))
			Dialog_Show(playerid,dClanSel,DIALOG_STYLE_LIST,"Clan Selection","Brujah\nGangrel\nMalkavian\nNosferatu\nToreador\nTremere\nVentrue","Select","");
	}
	else if(User[playerid][Userrace] == 2)
	{
		new tribe[MAX_TRAIT_NAME],
			auspice[MAX_TRAIT_NAME],
			breed[MAX_TRAIT_NAME];
		GetPVarString(playerid, "Tribe", tribe, MAX_TRAIT_NAME);
		GetPVarString(playerid, "Auspice", auspice, MAX_TRAIT_NAME);
		GetPVarString(playerid, "Breed", breed, MAX_TRAIT_NAME);
		if(isnull(tribe) || isnull(auspice) || isnull(breed))
		{
			MSG(playerid,GRAD2,"SERVER: If you are unfamiliar with what the term tribe, auspice or breed means; press F6 and type /learn [term].");
			Dialog_Show(playerid,dTribeSel,DIALOG_STYLE_LIST,"Tribe Selection","Black Furies\nBone Gnawers\nChildren of Gaia\nFianna\nGet of Fenris\nGlass Walkers\nShadow Lords\nSilver Fangs\nStargazers\nUktena","Select","");
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 100, 0.0000, 0.0000, 0.0000)) 
	{
		SetPlayerPos(playerid,RESPAWN_X,RESPAWN_Y,RESPAWN_Z);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		User[playerid][pint] = 0;
		User[playerid][pvw] = 0;
	}
	new donatr;
	if(!isnull(User[playerid][donator])) donatr = 3;
	for(new i = 0; i < MAX_ATTACHMENTS+donatr; i++)
	{
		if(!IsPlayerAttachedObjectSlotUsed(playerid,i))
		{
			if(ao[playerid][i][ao_model] < 1 || ao[playerid][i][ao_equip] == 0) continue;
			printf("INDEX: %d",i); 
			SetPlayerAttachedObject(playerid, i, ao[playerid][i][ao_model], ao[playerid][i][ao_bone],ao[playerid][i][ao_x], ao[playerid][i][ao_y], ao[playerid][i][ao_z], ao[playerid][i][ao_rx], ao[playerid][i][ao_ry],ao[playerid][i][ao_rz], ao[playerid][i][ao_sx], ao[playerid][i][ao_sy], ao[playerid][i][ao_sz],ao[playerid][i][ao_color]);
			printf("[OnplayerSpawn] [attachmentinfo] [player: %d] %d %d %f %f %f %f %f %f %f %f %f %d"
			,playerid,ao[playerid][i][ao_model], ao[playerid][i][ao_bone],
			ao[playerid][i][ao_x], ao[playerid][i][ao_y], ao[playerid][i][ao_z], ao[playerid][i][ao_rx], ao[playerid][i][ao_ry],
			ao[playerid][i][ao_rz], ao[playerid][i][ao_sx], ao[playerid][i][ao_sy], ao[playerid][i][ao_sz],ao[playerid][i][ao_color]);
			ao[playerid][i][ao_equip] = 1;
		}
	}	
	if(GetPVarInt(playerid, "pDemon_Shifted") > 0)
	{
		new pvisage[MAX_TRAIT_NAME],
			ptag[MAX_PLAYER_NAME*2];
		GetPVarString(playerid, "Visage", pvisage, MAX_TRAIT_NAME);
		format(ptag, sizeof ptag, ""MAR"Apocalyptic Form (%s)\n%s", pvisage, sendernameEx(playerid));
		UpdateDynamic3DTextLabelText(User[playerid][UserTag],SOLIDWHITE,ptag);
		donatr = 0;
		if(!isnull(User[playerid][donator])) donatr = 3;
		for(new i = MAX_ATTACHMENTS+donatr; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
		{
			if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
			{
					if(GetPVarInt(playerid, "pDemon_Shifted") == 2)
					{
						UpdateTrait(playerid, "WingIndex", i, 9);
						SetPlayerAttachedObject(playerid, i, -1001, 1, WingX, WingY, WingZ, WingRX, WingRY, WingRZ, WingSX,  WingSY, WingSZ);
						break;
					}
			}
		}
	}
	if(isnull(User[playerid][RPL]) && User[playerid][Logged])
	{
		MSG(playerid, WHITE, "SERVER: Your roleplay Level has been set to default. (Roleplay Level: D)");
		format(User[playerid][RPL], 5, "D");
		User[playerid][rpoints] = 250;
		format(large_string, sizeof large_string, "UPDATE users SET rpl = 'D',rpoints = 250 WHERE userid = %d",User[playerid][UserID]);
		db_query(Database, large_string);
	}
	/*if(GetPVarInt(playerid, "FixXP") == 0 && User[playerid][TotalHours] > 0)
	{
		User[playerid][UserXP] = User[playerid][TotalHours];
		format(large_string, 124, "UPDATE users SET userxp = %d WHERE userid = %d", User[playerid][UserXP], User[playerid][UserID]);
		db_query(Database, large_string);
		UpdateTrait(playerid, "FixXP", 1);
		SFM(playerid, WHITE, "PATCH: You have been refunded your %d (/stats) XP.");
	}*/
	new proceed = GetPVarInt(playerid, "cs_ProceedBackup");
	//SFM(playerid, -1, "proceed %d fresh %d", proceed, GetPVarInt(playerid, "FreshCS"));
	if(proceed > 0) // player crashed while prioitizing 
	{
		if(GetPVarInt(playerid, "FreshCS") == 1)
		{
			if(proceed == 1) Dialog_Show(playerid,dPrioitize,DIALOG_STYLE_INPUT,"Prioitize Primary Category","Insert the category you wish to priotize as primary:\n\nValid values: Physical, Social, Mental","Select","");
		}
		else if(GetPVarInt(playerid, "FreshCS") == 5)
		{
			if(proceed == 2) Dialog_Show(playerid,dPrioitizeAbs,DIALOG_STYLE_INPUT,"Prioitize Primary Category","Insert the category you wish to priotize as primary:\n\nValid values: Talents, Skills, Knowledges","Select","");
		}
	}
	if(HP[playerid][hMaxLevel] == 0)
	{
		HP[playerid][hMaxLevel] = 7;
		new query[124];
		format(query, sizeof query,"DELETE FROM health WHERE userid = %d", User[playerid][UserID]);
		db_query(Database, query);
		for(new h = 1; h <= HP[playerid][hMaxLevel]; h++)
		{
			HP[playerid][hLevel][h] = 1;
			format(query, sizeof query, "INSERT INTO health (userid, healthlevel, mark) VALUES (%d, %d, %d)", User[playerid][UserID], h, HP[playerid][hLevel][h]);
			db_query(Database, query);
		}
		MSG(playerid, GOLD, "SERVER:"GR": Your health levels have been set. ("G"OK/OK/OK/OK/OK/OK/OK"GR")");
		format(query, sizeof query,"UPDATE users SET maxhealth = 7 WHERE userid = %d",User[playerid][UserID]);
		db_query(Database, query);
	}
	format(large_string, sizeof large_string,"HEALTH LEVELS: %s", PasteHealthCondition(playerid));
	PlayerTextDrawSetString(playerid, tHLevel[playerid], large_string);
	PlayerTextDrawShow(playerid, tHLevel[playerid]);
	SetPlayerFightingStyle(playerid, User[playerid][fightstyle]);
	TogglePlayerControllable(playerid, 1);
}
new TempSave = 0;
Dialog:dGroupSelect(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new gini[15];
		for(new i = 0; i < 15; i++) gini[i] = -1;
		sscanf(inputtext,"p<,>iiiiiiiiiiiiiii",gini[0],gini[1],gini[2],gini[3],gini[4],gini[5],gini[6],gini[7],gini[8],gini[9],gini[10],gini[1],gini[12],gini[13],gini[14]);
		TempSave++;
		new roll[MAX_PLAYERS];
		for(new i = 0; i < 15; i++)
		{
			if(gini[i] == -1) continue;
			if(User[gini[i]][Logged])
			{
				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z);
				if(!IsPlayerInRangeOfPoint(gini[i], 30, x, y, z))
					continue;
				roll[gini[i]] = IniRoll(gini[i]);
				format(large_string, sizeof large_string, "INSERT INTO ini (playerid, tempsave, roll) VALUES (%d, %d, %d)", gini[i], TempSave, roll[gini[i]]);
				db_query(Database, large_string);
			}
		}
		format(large_string, 256, "SELECT * FROM ini WHERE tempsave = %d ORDER BY roll ASC", TempSave);
		new DBResult: Result = db_query(Database, large_string);
		large_string[0] = EOS;
		do
		{
			if(!db_num_rows(Result))
				break;
			new p = db_get_field_assoc_int(Result, "playerid");
			new proll = db_get_field_assoc_int(Result, "roll");
			format(large_string, sizeof large_string, "%s%s (%d) < ", large_string, sendernameEx(p), proll);
		}
		while(db_next_row(Result));
		new size = strlen(large_string);
		strdel(large_string, size-2, size);
		format(large_string, sizeof large_string, "%s (( Group Initiative ))", large_string);
		AutoMSG(playerid, large_string, 1);
		db_free_result(Result);		
		format(large_string, 124, "DELETE FROM ini WHERE tempsave = %d", TempSave);
		db_query(Database, large_string);
	}
}
stock IniRoll(playerid)
{
			new extra = 0,
				celerity = GetPVarInt(playerid, "Celerity"),
				dexbuff = GetPVarInt(playerid, "bDexterity");
			if(User[playerid][Userrace] == 2)
			{
				format(large_string,sizeof large_string,"SELECT 1 FROM sheet WHERE trait = 'Spirit of the Fray' AND userid = %d AND type = 1",User[playerid][UserID]);
				new DBResult: Result = db_query(Database, large_string);
				if(db_num_rows(Result))
					extra += 10;
				db_free_result(Result);
			}
			if(celerity > 0)
				extra += celerity;
			if(dexbuff > 0) extra += dexbuff;
			new dex = GetPVarInt(playerid, "Dexterity");
			new wits = GetPVarInt(playerid, "Wits");
			new roll = 1+(random(10));
			new rollsum = dex+wits+roll+extra;
			printf("(( %s rolls initiative (Dexterity: %d; Wits: %d; Roll: %d; Extra: %d): %d ))",sendernameEx(playerid),dex,wits, roll, extra, rollsum);
			new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
			//foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, large_string);		
			format(large_string, sizeof large_string, "[%s][%s] %s rolls initiative: %d",PasteDate(),PasteTime(), User[playerid][Username], rollsum);
			print(large_string);
			return rollsum;
}
Dialog:dTribeSel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new clan[MAX_TRAIT_NAME],
			willpower;
		switch(listitem)
		{
			case 0: clan = "Black Furies", willpower = 3;
			case 1: clan = "Bone Gnawers", willpower = 4;
			case 2:	clan = "Children of Gaia", willpower = 4;
			case 3:	clan = "Fianna", willpower = 3;
			case 4:	clan = "Get of Fenris", willpower = 3;
			case 5:	clan = "Glass Walkers", willpower = 3;
			case 6:	clan = "Shadow Lords", willpower = 3;
			case 7:	clan = "Silver Fangs", willpower = 3;
			case 8: clan = "Stargazers", willpower = 4;
			case 9: clan = "Uktena", willpower = 3;
			//case 12: clan = "Wendigo", willpower = 3;
		}
		new query[124];
		format(query,sizeof query,"SERVER: Your Tribe has been set to %s. (Rank has been automatically set to Cliath)",clan);
		MSG(playerid, WHITE, query);

		UpdateTraitString(playerid, "Tribe", clan);
		UpdateTraitString(playerid, "Rank", "Cliath");
		UpdateTrait(playerid, "Willpower", willpower);

		format(query,sizeof query,"ADMSG: %s (ID:%d) chose tribe %s.",User[playerid][Username], playerid, clan);
		Staff(ADMIN,query);

		printf("[%s][%s][tribe] %s (id:%d) chose tribe %s.",PasteDate(),PasteTime(),User[playerid][Username], playerid, clan);
		Dialog_Show(playerid,dBreedSel,DIALOG_STYLE_LIST,"Breed Selection","Homid\nLupus\nMetis","Select","");
	}
	else
	{
		MSG(playerid,GRAD2,"Info: Tribe Selection has been temporarily skipped, it will be prompted to you the next time you log on.");
	}
}
Dialog:dBreedSel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new clan[MAX_TRAIT_NAME],
			gnosis;
		switch(listitem)
		{
			case 0: clan = "Homid",gnosis = 1;
			case 1: clan = "Lupus",gnosis = 5;
			case 2:	clan = "Metis",gnosis = 3;
		}
		new query[124];
		format(query,sizeof query,"SERVER: Your Breed has been set to %s.",clan);
		MSG(playerid, WHITE, query);

		UpdateTraitString(playerid, "Breed", clan);
		UpdateTrait(playerid, "Gnosis", gnosis);
		format(query,sizeof query,"ADMSG: %s (ID:%d) chose breed %s.",User[playerid][Username], playerid, clan);
		Staff(ADMIN,query);

		printf("[%s][%s][breed] %s (id:%d) chose breed %s.",PasteDate(),PasteTime(),User[playerid][Username], playerid, clan);
		
		Dialog_Show(playerid,dAuspiceSel,DIALOG_STYLE_LIST,"Auspice Selection","Ahroun\nGalliard\nPhilodox\nTheurge\nRagabash","Select","");
	}
	else
	{
		MSG(playerid,GRAD2,"Info: Breed Selection has been temporarily skipped, it will be prompted to you the next time you log on.");
	}
}
Dialog:dAuspiceSel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new clan[MAX_TRAIT_NAME],
			rage;
		switch(listitem)
		{
			case 0: clan = "Ahroun",rage = 5;
			case 1: clan = "Galliard",rage = 4;
			case 2:	clan = "Philodox",rage = 3;
			case 3:	clan = "Theurge",rage = 2;
			case 4:	clan = "Ragabash",rage = 1;
		}
		new query[124];
		format(query,sizeof query,"SERVER: Your Auspice has been set to %s.",clan);
		MSG(playerid, WHITE, query);

		UpdateTraitString(playerid, "Auspice", clan);
		UpdateTrait(playerid, "Rage", rage);

		format(query,sizeof query,"ADMSG: %s (ID:%d) chose auspice %s.",User[playerid][Username], playerid, clan);
		Staff(ADMIN,query);

		printf("[%s][%s][auspice] %s (id:%d) chose auspice %s.",PasteDate(),PasteTime(),User[playerid][Username], playerid, clan);
	}
	else
	{
		MSG(playerid,GRAD2,"Info: Auspice Selection has been temporarily skipped, it will be prompted to you the next time you log on.");
	}
}
Dialog:dClanSel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new clan[MAX_TRAIT_NAME];
		switch(listitem)
		{
			case 0: clan = "Brujah";
			case 1:	clan = "Gangrel";
			case 2:	clan = "Malkavian";
			case 3:	clan = "Nosferatu";
			case 4:	clan = "Toreador";
			case 5: clan = "Tremere";
			case 6: clan = "Ventrue";
		}
		new query[124];
		format(query,sizeof query,"SERVER: Your Clan has been set to %s. (Generation has been automatically set to 13th)",clan);
		MSG(playerid, WHITE, query);

		UpdateTraitString(playerid, "Clan", clan);
		UpdateTrait(playerid, "vGeneration", 13);

		format(query,sizeof query,"ADMSG: %s (ID:%d) chose clan %s.",User[playerid][Username],playerid, clan);
		Staff(ADMIN,query);
		SetClanDisciplines(playerid);
		printf("[%s][%s][clan] %s (id:%d) chose clan %s.",PasteDate(),PasteTime(),User[playerid][Username], playerid, clan);

/*		format(query, 124, "Clan: %s", clan);
		PlayerTextDrawSetString(playerid, csclan[playerid], query);*/
		Dialog_Show(playerid,dSectSel,DIALOG_STYLE_LIST,"Sect Selection","Camarilla\nAnarch Movement\nSabbat\nIndependent","Select","");

		if(!strcmp(clan, "Nosferatu"))
		{
			UpdateTrait(playerid, "Appearance", 0);
			if(User[playerid][uGender] == 1)
			{
				SetPlayerSkin(playerid, 20034);
				User[playerid][uSkin] = 20034;
			}
			else 
			{
				SetPlayerSkin(playerid, 20029);
				User[playerid][uSkin] = 20029;
			}
		}
		return 1;
	}
	else
		MSG(playerid,GRAD2,"Info: Clan Selection has been temporarily skipped, it will be prompted to you the next time you log on.");
	return 1;
}
Dialog:dSectSel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new clan[MAX_TRAIT_NAME];
		switch(listitem)
		{
			case 0: clan = "Camarilla";
			case 1: clan = "Anarch Movement";
			case 2:	clan = "Sabbat";
			case 3: clan = "Independent";
		}
		new query[124];
		format(query,sizeof query,"SERVER: Your Sect has been set to %s.",clan);
		MSG(playerid, WHITE, query);

		UpdateTraitString(playerid, "Sect", clan);
		format(query,sizeof query,"ADMSG: %s (ID:%d) chose sect %s.",User[playerid][Username],playerid, clan);
		Staff(ADMIN,query);

		/*format(query, 124, "Sect: %s", clan);
		PlayerTextDrawSetString(playerid, csclan[playerid], query);*/

		printf("[%s][%s][sect] %s (id:%d) chose sect %s.",PasteDate(),PasteTime(),User[playerid][Username], playerid, clan);
	}
	else
	{
		MSG(playerid,GRAD2,"Info: Sect Selection has been temporarily skipped, it will be prompted to you the next time you log on.");
	}
}
stock SetClanDisciplines(playerid)
{
	if(User[playerid][Logged])
	{
		new clan[MAX_TRAIT_NAME],
			disciplines[50];
		GetPVarString(playerid, "Clan", clan, MAX_TRAIT_NAME);
		if(!strcmp(clan, "Assamite"))
			disciplines = "Celerity,Obfuscate,Quietus";
		if(!strcmp(clan, "Brujah"))
			disciplines = "Celerity,Potence,Presence";
		if(!strcmp(clan, "Followers of Set"))
			disciplines = "Obfuscate,Presence,Serpentis";
		if(!strcmp(clan, "Followers of Set"))
			disciplines = "Obfuscate,Presence,Serpentis";
		if(!strcmp(clan, "Gangrel"))
			disciplines = "Animalism,Fortitude,Protean";
		if(!strcmp(clan, "Giovanni"))
			disciplines = "Dominate,Necromancy,Potence";
		if(!strcmp(clan, "Lasombra"))
			disciplines = "Dominate,Obtenebration,Potence";
		if(!strcmp(clan, "Malkavian"))
			disciplines = "Auspex,Dementation,Obfuscate";
		if(!strcmp(clan, "Nosferatu"))
			disciplines = "Animalism,Obfuscate,Potence";
		if(!strcmp(clan, "Ravnos"))
			disciplines = "Animalism,Chimerstry,Fortitude";
		if(!strcmp(clan, "Toreador"))
			disciplines = "Auspex,Celerity,Presence";
		if(!strcmp(clan, "Tremere"))
			disciplines = "Auspex,Dominate,Thaumaturgy";
		if(!strcmp(clan, "Tzimisce"))
			disciplines = "Animalism,Auspex,Vicissitude";	
		if(!strcmp(clan, "Ventrue"))
			disciplines = "Dominate,Fortitude,Presence";	
		
		new disc[3][24];
		sscanf(disciplines,"p<,>s[24]s[24]s[24]",disc[0],disc[1],disc[2]);
		UpdateTrait(playerid, disc[0], 0, 1);
		UpdateTrait(playerid, disc[1], 0, 1);
		UpdateTrait(playerid, disc[2], 0, 1);		
	}
	return 1;
	
}
CMD:respawn(playerid,params[])
{
	if(User[playerid][Useradmin] > 0)
	{
	    new id;
	    if(sscanf(params,"u",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /respawn [playerid/PartOfName]");
	    if(!User[id][Logged] || !IsPlayerConnected(id)) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
	    SpawnPlayer(id);
		SetPVarInt(id, "pRespawnPlayer", 1);
		new string[124];
		format(string,sizeof string,"STFCMD:"GR" You have been respawned by %s (ID:%d).",User[playerid][forumname],playerid);
		MSG(id,GOLD,string);

		format(string,sizeof string,"STFCMD:"GR" You have respawned %s (ID:%d).",User[id][Username],id);
		MSG(playerid,GOLD,string);
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
new bool:carrespawn = false;
CMD:respawnallcars(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][Useradmin] > 0)
		{
			if(carrespawn == true)
				return MSG(playerid, GOLD, "ERROR:"GR" There is an ongoing respawn timer.");
			new time;
			if(isnull(params))
				time = 10;
			else time = strval(params);
			SetTimer("RespawnAllCars",time*1000,0);

			format(large_string, sizeof large_string, "All unoccupied vehicles in the server will respawn in %d seconds.", time);
			cmd_g(playerid, large_string);
			carrespawn = true;
			return 1;
		}  else {
			return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
		}
	}
	return 0;
}
stock RespawnVehicle(vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
		RepairVehicle(vehicleid);
		SetVehiclePos(vehicleid, V[vehicleid][vx], V[vehicleid][vy], V[vehicleid][vz]);
		SetVehicleZAngle(vehicleid, V[vehicleid][vrot]);
		if(AdminVeh[vehicleid])
		{
			DestroyVehicle(vehicleid);
			AdminVeh[vehicleid] = false;
		}
		if(V[vehicleid][vrent] > 0)
		{
			V[vehicleid][fuel] = 100;
		}
	}
}
forward RespawnAllCars();
public RespawnAllCars()
{
	for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++)
	{
			if(!IsVehicleOccupied(i))
			{
				RespawnVehicle(i);
			}	
	}
	carrespawn = false;
}
stock IsVehicleOccupied(vehicleid)
{
    foreach (new p : Player)
    {
        if (GetPlayerVehicleID(p) == vehicleid)
            return 1;
    }
    return 0;
}
CMD:edito(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	EditAttachedObject(playerid,strval(params));
	return 1;
}
public OnPlayerDeath(playerid, killerid, reason)
{
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	LoadCarMod(V[vehicleid][dataid]);
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	if(IsValidDynamicObject(V[vehicleid][crated])) DestroyDynamicObject(V[vehicleid][crated]),V[vehicleid][crated] = 0;
	foreach(Player,i)
	{
		if(User[i][TruckID] == vehicleid)
		{
			MSG(i,RED,"Info: Your work vehicle has been destroyed, you've paid a fine.");

	 		if(User[i][SideJob] == JOB_SWEEPER || User[i][SideJob] == JOB_MOWNER)
			{
				if(IsValidDynamicObject(User[i][tLoading])) DestroyDynamicObject(User[i][tLoading]);
				User[i][SideJob] = 0;
			}
			if(IsValidVehicle(User[i][TruckID]))
			{
				if(IsValidDynamicObject(V[User[i][TruckID]][crated]))
					DestroyDynamicObject(V[User[i][TruckID]][crated]);
			}
			User[i][JobStarted] = 0;
	        User[i][tLoading] = 0;
			DisablePlayerCheckpoint(i);
			DisablePlayerRaceCheckpoint(i);
			HidePlayerProgressBar(i,gBar);
			DestroyVehicle(vehicleid);
			GiveMoney(i,-150);
			User[i][TruckID] = -1;
			User[i][CheckpointsPicked] = 0;
			break;
		}
		if(User[i][vrented] == vehicleid)
		{
			User[i][vrented] = 0;
			V[vehicleid][claimed] = false;
			MSG(i, GOLD, "Info:"GR" Your rented vehicle has been destroyed.");
		}
	}
	return 1;
}

stock CanHear(playerid, target)
{
	if(User[playerid][Logged])
	{ 
		new Float:xxx, Float:yyy, Float:zzz;
		GetPlayerPos(target, xxx, yyy, zzz);
		if(!IsPlayerInRangeOfPoint(playerid, 50, xxx, yyy, zzz) || GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(target))
			return 0;
		if(GetPVarInt(playerid, "Heightened Senses") > 0 || User[playerid][active_auspex] == true)
		{
			return 1;
		}
	}
	return 0;
}
stock SendMoleMessage(playerid,message[],color = MAROON)
{
	if(User[playerid][Logged] && User[playerid][mole])
	{
		MSG(User[playerid][mole],color,message);
	}
	return 1;
}
stock RecordPlayer(playerid, string[])
{
	if(User[playerid][Logged] && User[playerid][xprecord] == 1)
	{
		new record[256];
		for(new i = 0; i < MAX_PLAYER_NAME; i++) if(User[playerid][pUsername][i] == '_') User[playerid][pUsername][i] = ' ';
		format(record, sizeof record, "[%s][%s] %s", PasteDate(), PasteTime(), string);
		format(record, sizeof record,"INSERT INTO xprecord (userid, description, type) VALUES (%d, '%q', 0)", User[playerid][UserID], record);
		db_query(Database, record);
		return 1;
	}
	return 0;
}
CMD:expstart(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][TotalHours] >= 2)
		{
			if(User[playerid][xprecord] == 1)
			{
				if(!strcmp(params,"confirm",true))
				{
					User[playerid][xprecord] = 2;
					MSG(playerid,GOLD,"Info:"GR" You have successfully submitted your experience application.");
					format(large_string, 124, "UPDATE users SET xprec = %d WHERE userid = %d", User[playerid][xprecord], User[playerid][UserID]);
					db_query(Database, large_string);
					
					format(large_string, sizeof large_string, "STFCHT: %s (UID: %d) has submitted an experience application.", User[playerid][Username], User[playerid][UserID]);
					Staff(ADMIN, large_string);
					return 1;
				}
				else MSG(playerid,GOLD,"Info:"GR" Type (/expstart confirm optional:attachedmsg) to confirm your application submission.");
				if(!strcmp(params,"terminate",true))
				{
					User[playerid][xprecord] = 0;
					MSG(playerid,GOLD,"Info:"GR" You have successfully terminated your experience application.");
					format(large_string, 124, "UPDATE users SET xprec = %d WHERE userid = %d", User[playerid][xprecord], User[playerid][UserID]);
					db_query(Database, large_string);
					format(large_string, 124, "DELETE FROM xprecord WHERE userid = %d AND type = 0",User[playerid][UserID]);
					db_query(Database, large_string);
					return 1;
				}
			}
			else if(User[playerid][xprecord] == 0)
			{
				Dialog_Show(playerid,dExpStart,DIALOG_STYLE_MSGBOX,"Experience Application","Are you sure you wish to start recording?","Yes","Close");
				return 1;
			}
			if(User[playerid][xprecord] == 2)
				return MSG(playerid,GOLD,"ERROR:"GR" Your application is yet to be reviewed by the staff.");
		}
		else MSG(playerid,GOLD,"ERROR:"GR" You need at least two playing hours to use this feature!");
	}
	return 1;
}
Dialog:dExpStart(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		MSG(playerid,GOLD,"Info:"GR" You have started recording your roleplay for an experience application.");
		MSG(playerid,GOLD,"Info:"GR" Type (/expstart) again to stop recording and submit your application.");
		MSG(playerid,GOLD,"Info:"GR" Type (/expstart terminate) to terminate the process.");
		User[playerid][xprecord] = 1; // started recording
		format(large_string, 124, "UPDATE users SET xprec = %d WHERE userid = %d", User[playerid][xprecord], User[playerid][UserID]);
		db_query(Database, large_string);
		return 1;
	}
	return 1;
}
CMD:expapps(playerid, params[])
{
	if(User[playerid][Useradmin] > 1)
	{
		format(large_string, sizeof large_string,"SELECT username,userid,race FROM users WHERE xprec = 2");
		new DBResult: Result = db_query(Database, large_string);
		large_string[0] = EOS;
		MSG(playerid, GOLD, "=======================================");
		do
		{
			if(db_num_rows(Result))
			{
				new username[MAX_PLAYER_NAME],userid,race[10];
				userid = db_get_field_assoc_int(Result, "userid");
				race[0] = db_get_field_assoc_int(Result, "race");
				switch(race[0])
				{
					case 0: race = "Human";
					case 1: race = "Vampire";
					case 2: race = "Werewolf";
					case 3: race  = "Mage";
					case 4: race  = "Hunter";
					case 5: race = "Demon";
				}
				db_get_field_assoc(Result, "username", username, MAX_PLAYER_NAME);
				//format(large_string,sizeof large_string,"%s• %s (UID: %d); Race: %s\n", large_string, username, userid, race);
				format(large_string,sizeof large_string,"• %s (UID: %d); Race: %s", username, userid, race);
				MSG(playerid, GRAD2, large_string);
			}
			else
			{
				MSG(playerid,GREEN,"There are no pending experience applications!");
				break;
			}
		}
		while(db_next_row(Result));
		MSG(playerid, GOLD, "=======================================");
		//if(isnull(large_string)) return MSG(playerid,GREEN,"There are no pending experience applications!");
		//Dialog_Show(playerid,dExpApps,DIALOG_STYLE_MSGBOX,"Pending (/exprev)",large_string,"Close","");
		db_free_result(Result);
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
Dialog:dExperienceRev(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new index = GetPVarInt(playerid, "exp_index"),count;
		format(large_string, sizeof large_string, "SELECT description from xprecord WHERE userid = %d AND type = 0", GetPVarInt(playerid, "exp_user"));
		new DBResult: Result = db_query(Database, large_string);
		large_string[0] = EOS;
		new entry[300];
		do
		{
			if(db_num_rows(Result))
			{
				if(count > index)
				{
					db_get_field_assoc(Result, "description", entry, 300);
					format(large_string, sizeof large_string,"%s%s\n", large_string, entry);
				}
				else 
					SetPVarInt(playerid, "exp_index", index+30);
				count++;
			}
			else 
			{
				MSG(playerid,GOLD,"ERROR:"GR" An error has occurred!");
				break;
			}		
		}
		while(db_next_row(Result));		
		if(isnull(large_string))
		{
			MSG(playerid, GOLD, "EXPAPP:"GR" This is the end of this application records.");
		}
		if(IsPlayerAdmin(playerid))
			SFM(playerid, -1, "exp index %d", index);
		Dialog_Show(playerid,dExperienceRev,DIALOG_STYLE_MSGBOX,"Experience Application Logs",large_string,"Next Page","Close");
		//SFM(playerid,-1,"index %d, user %d",GetPVarInt(playerid, "exp_index"), GetPVarInt(playerid, "exp_user"));
	}
}
CMD:getuser(playerid,params[])
{
	if(User[playerid][Useradmin] > 0)
	{
		new id;
		if(sscanf(params,"i", id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /getuser [UID]");
		if(id < 1) return MSG(playerid,GOLD,"SYNTAX:"GR" /getuser [UID]");
		format(large_string,sizeof large_string, "SELECT username FROM users WHERE userid = %d", id);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
			db_get_field_assoc(Result, "username", large_string, MAX_PLAYER_NAME);
			strins(large_string, "SERVER:"GR" ", 0);
			MSG(playerid,GOLD,large_string);
		}
		else return MSG(playerid,GOLD,"ERROR:"GR" Invalid UID specified.");
		db_free_result(Result); 
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
stock InsertOfflineMessage(userid, message[])
{
	format(large_string, sizeof large_string, "INSERT INTO offmsgs (userid,message) VALUES (%d, '%s')", userid, message);
	db_query(Database, large_string);
	return 1;
}
CMD:exprev(playerid, params[])
{
	if(User[playerid][Useradmin] > 1)
	{
		if(isnull(params)) return MSG(playerid,GOLD,"SYNTAX:"GR" /exprev [UID] [show/accept/deny] [optional:attachedmessage]");
		new verdict[7],userid,confirm[8],message[50];
		sscanf(params,"is[7]s[8]s[50]", userid, verdict, confirm, message);
		format(large_string, sizeof large_string,"SELECT xprec FROM users WHERE userid = %d", userid);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result)) 
		{
			new valid = db_get_field_assoc_int(Result, "xprec");
			if(valid == 0)
			{
				return MSG(playerid,GOLD,"ERROR:"GR" Specified User ID has no pending application!");
			}
		}
		// --
		if(IsPlayerAdmin(playerid)) SFM(playerid,-1,"userid %d | verdict %s | confirm %s | message %s", userid, verdict, confirm, message);
		new entry[256],file[60],File:hFile;
		new year,month,day;
		getdate(year,month,day);
		if(!strcmp(verdict, "show", true) && !isnull(verdict))
		{
			new count;
			format(large_string, sizeof large_string, "SELECT * from xprecord WHERE userid = %d AND type = 0", userid);
			Result = db_query(Database, large_string);
			large_string[0] = EOS;
			DeletePVar(playerid, "exp_index");
			do
			{
				if(db_num_rows(Result))
				{
					if(count == 30)
					{
						SetPVarInt(playerid, "exp_index", 30);
						//SFM(playerid,-1,"index %d, user %d",GetPVarInt(playerid, "exp_index"), GetPVarInt(playerid, "exp_user"));
						break;
					}
					db_get_field_assoc(Result, "description", entry, 300);
					format(large_string, sizeof large_string,"%s%s\n", large_string, entry);
					count++;
				}
				else 
				{
					MSG(playerid,GOLD,"ERROR:"GR" An error has occurred!");
					break;
				}
			}
			while(db_next_row(Result));
			SetPVarInt(playerid, "exp_user", userid);	
			Dialog_Show(playerid,dExperienceRev,DIALOG_STYLE_MSGBOX,"Experience Application Logs",large_string,"Next Page","Close");		
			return 1;
		}
		if(!strcmp(verdict, "accept", true) && !isnull(verdict))
		{
			if(!strcmp(confirm, "confirm", true) && !isnull(confirm))
			{
				format(large_string, sizeof large_string, "SELECT * from xprecord WHERE userid = %d AND type = 0", userid);
				Result = db_query(Database, large_string);
				large_string[0] = EOS;
				format(file, sizeof file,"/Logs/Experience/Accepted/%d.%d.%d_%d.log",year, month, day, userid);
				hFile = fopen(file, io_append);	
				// print("A");
				do
				{
					if(db_num_rows(Result))
					{
						// print("B");
						db_get_field_assoc(Result, "description", large_string, 300);
						format(entry, sizeof(entry), "%s\r\n",large_string);
						fwrite(hFile, entry);
					}
					else 
					{
						MSG(playerid,GOLD,"ERROR:"GR" An error has occurred!");
						// print("C");
						break;
					}
				}
				while(db_next_row(Result));
				fclose(hFile);
				// print("D");
				db_free_result(Result);
				format(large_string, sizeof large_string, "DELETE FROM xprecord WHERE userid = %d AND type = 0", userid);
				db_query(Database, large_string);
				format(large_string, sizeof large_string,"UPDATE users SET xprec = 0 WHERE userid = %d", userid);
				db_query(Database, large_string);
				format(large_string, sizeof large_string,"ADMSG: %s has accepted (UID: %d) experience application.", User[playerid][Username], userid);
				Staff(ADMIN,large_string);
				new bool:offline_message = true;
				printf("[%s][%s] %s has accepted UID %d experience application. (Message: %s)",PasteDate(), PasteTime(), User[playerid][Username], userid, message);
				foreach(Player, i)
				{
					if(User[i][UserID] == userid)
					{
						format(large_string, sizeof large_string, "EXPAPP:"GR" Your experience application has been approved by %s.", User[playerid][forumname]);
						MSG(i, GOLD, large_string);
						format(large_string, sizeof large_string,"ATTMSG:"GR" %s",message);
						MSG(i, GOLD, large_string);
						User[i][xprecord] = 0;
						offline_message = false;
					}
				}
				if(offline_message == true)
				{
					format(large_string, sizeof large_string, "EXPAPP: Your experience application has been approved by `%s` on `%s`.", User[playerid][Username], PasteDate());
					InsertOfflineMessage(userid, large_string);
					InsertOfflineMessage(userid, message);
					Staff(ADMIN, "ADMSG: An offline message has been recorded for the specified player. They will receive upon connection.");
				}
				// print("E");
				return 1;
			}	
			else 
			{
				MSG(playerid,GOLD,"SYNTAX:"GR" Type (/exprev [UID] accept confirm) to officalize the verdict.");
				return 1;
			}
		}
		else if(!strcmp(verdict, "deny", true) && !isnull(verdict))
		{
			if(!strcmp(confirm, "confirm", true) && !isnull(confirm))
			{
				format(large_string, sizeof large_string, "SELECT * from xprecord WHERE userid = %d AND type = 0", userid);
				Result = db_query(Database, large_string);
				large_string[0] = EOS;
				format(file, sizeof file,"/Logs/Experience/Denied/%d.%d.%d_%d.log",year, month, day, userid);
				hFile = fopen(file, io_append);	
				do
				{
					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "description", large_string, 300);
						format(entry, sizeof(entry), "%s\r\n",large_string);
						fwrite(hFile, entry);
					}
					else 
					{
						MSG(playerid,GOLD,"ERROR:"GR" An error has occurred!");
						break;
					}
				}
				while(db_next_row(Result));
				fclose(hFile);

				db_free_result(Result);
				format(large_string, sizeof large_string, "DELETE FROM xprecord WHERE userid = %d AND type = 0", userid);
				db_query(Database, large_string);
				format(large_string, sizeof large_string,"UPDATE users SET xprec = 0 WHERE userid = %d", userid);
				db_query(Database, large_string);
				format(large_string, sizeof large_string,"ADMSG: %s has denied (UID: %d) experience application.", User[playerid][Username], userid);
				Staff(ADMIN,large_string);
				printf("[%s][%s] %s has denied UID %d experience application. (Message: %s)",PasteDate(), PasteTime(), User[playerid][Username], userid, message);
				foreach(Player, i)
				{
					if(User[i][UserID] == userid)
					{
						format(large_string, sizeof large_string, "EXPAPP:"GR" Your experience application has been denied by %s.", User[playerid][forumname]);
						MSG(playerid, GOLD, large_string);
						User[i][xprecord] = 0;
					}
				}
				return 1;
			}	
			else MSG(playerid,GOLD,"SYNTAX:"GR" Type (/exprev [UID] deny confirm) to officalize the verdict.");
			return 1;
		}
		/**/
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
public OnPlayerText(playerid, text[])
{
	if(User[playerid][Logged] == false) return 0;
	if(User[playerid][specing] > -1) return 0;
	new string[130];
	// npc chatting
	if(User[playerid][Useradmin] != 0 || GetPVarInt(playerid, "pNPCPerm") == 1 || IsStoryteller(playerid))
	{
		//strfind(const string[], const sub[], bool:ignorecase=false, pos=0)
		new npc_chat = strfind(text, "n<", false); 
		if(npc_chat != -1 && npc_chat < 4)
		{
			new npcidstr[10];
			new end = strfind(text, ">", false);
			strmid(npcidstr, text, strfind(text, "<", false) + 1, end);
			printf("npcid %s", npcidstr);
			new npcid = strval(npcidstr);
			if(strfind(text, "nn<", false) != -1)
			{
				//ApplyAnimation(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
				//ApplyDynamicActorAnimation(actorid, animlib[], animname[], Float:fdelta, loop, lockx, locky, freeze, time)
				ApplyDynamicActorAnimation(npcid, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
				SetTimerEx("NPCStopAnimation", strlen(text)*100, false, "d", npcid);
			}
			if(npcid > 0)
			{
				if(!isnull(NPC[npcid][npc_name]))
				{
					strdel(text, 0, end+1);
					if(strlen(text)<87) // npc chat
					{
						format(string, sizeof(string), "%s says: %s", NPC[npcid][npc_name], text);
						NPCProxDetector(30.0, npcid, string);
						foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, NPC[npcid][npc_x], NPC[npcid][npc_y], NPC[npcid][npc_z])) RecordPlayer(i, string);
					}
					else
					{
						format(string, sizeof(string), "%s says: %s", NPC[npcid][npc_name], text); // for recording purposes			
						foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, NPC[npcid][npc_x], NPC[npcid][npc_y], NPC[npcid][npc_z])) RecordPlayer(i, string);
						string[0] = EOS;
						new part[87];
						strmid(part,text,0,86,87);
						format(string, sizeof(string), "%s says: %s...", NPC[npcid][npc_name], part);
						NPCProxDetector(30.0, npcid, string);
						////SendMoleMessage(playerid,string);
						strmid(part,text,86,128,44);
						format(string, sizeof(string), "%s says: ...%s", NPC[npcid][npc_name], part);
						NPCProxDetector(30.0, npcid, string);
						////SendMoleMessage(playerid,string);
					}
				}
				return 0;
			}
			//strmid(dest[], const source[], start, end, maxlength=sizeof dest)
		}
	}
	new say[16];
	say = "says";
	if(User[playerid][shapeshift] >= 2 && User[playerid][shapeshift] <= 4) say = "barks";
	if(strlen(text)<87)
	{
		if(User[playerid][speakingto] > -1) // playerid on phone
		{
			format(string, sizeof(string), "[Phone] %s says: %s", sendernameEx(playerid), text);
			ProxDetector(30.0, playerid, string);
			MSG(User[playerid][speakingto],YELLOW,string);
			//////SendMoleMessage(playerid,string);
			new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);			
			foreach(Player, i) if(IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, string);
		}
		else // normal chat
		{
			format(string, sizeof(string), "%s %s: %s", sendernameEx(playerid), say, text);
			if(User[playerid][shapeshift] > 1)
				ProxDetector(30.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 0, 1);
			else ProxDetector(30.0, playerid, string);
			//////SendMoleMessage(playerid,string);
			new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);			
			foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, string);
		}
    }
	else
	{
		if(User[playerid][speakingto] > 0) // playerid on phone
		{
			format(string, sizeof(string), "[Phone] %s says: %s",  sendernameEx(playerid), text);
			new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);			
			foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, string);
			string[0] = EOS;
			new part[87];
			strmid(part,text,0,86,87);
			format(string, sizeof(string), "[Phone] %s says: %s...",  sendernameEx(playerid), part);
			ProxDetector(30.0, playerid, string);
			MSG(User[playerid][speakingto],YELLOW,string);
			////SendMoleMessage(playerid,string);
			strmid(part,text,86,128,44);
			format(string, sizeof(string), "[Phone] %s says: ...%s",  sendernameEx(playerid), part);
			ProxDetector(30.0, playerid, string);
			////SendMoleMessage(playerid,string);
			MSG(User[playerid][speakingto],YELLOW,string);
		}
		else // normal chat
		{
			format(string, sizeof(string), "%s %s: %s", sendernameEx(playerid), say, text); // for recording purposes
			new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);			
			foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, string);
			string[0] = EOS;
			new part[87];
			strmid(part,text,0,86,87);
			format(string, sizeof(string), "%s %s: %s...", sendernameEx(playerid), say, part);
			if(User[playerid][shapeshift] > 1)
				ProxDetector(30.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 0, 1);
			else ProxDetector(30.0, playerid, string);
			////SendMoleMessage(playerid,string);
			strmid(part,text,86,128,44);
			format(string, sizeof(string), "%s %s: ...%s", sendernameEx(playerid), say, part);
			if(User[playerid][shapeshift] > 1)
				ProxDetector(30.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 0, 1);
			else ProxDetector(30.0, playerid, string);
			////SendMoleMessage(playerid,string);
		}
	}
	if(User[playerid][shapeshift] >= 2 && User[playerid][shapeshift] <= 4) cmd_bme(playerid, "barks");
	if(User[playerid][shapeshift] >= 5) cmd_bme(playerid, "says");
	if(!User[playerid][pinvis] || User[playerid][Death] > 0 || !User[playerid][tazed] && User[playerid][animation] == false)
	{
		new animindex = GetPlayerAnimationIndex(playerid);
		if(animindex == 1189 || animindex == 1275 || animindex == 1274 || animindex == 0) {
			switch(User[playerid][chatstyle]) // 1189 1275 1274 standing indexes
			{
				case 0: ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1, 1);
				case 1: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.1, 1, 1, 1, 1, 1, 1);
				case 2: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 4.1, 1, 1, 1, 1, 1, 1);
				case 3: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkC", 4.1, 1, 1, 1, 1, 1, 1);
				case 4: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 4.1, 1, 1, 1, 1, 1, 1);
				case 5: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 1, 1, 1, 1, 1, 1);
				case 6: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 4.1, 1, 1, 1, 1, 1, 1);
				case 7: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 4.1, 1, 1, 1, 1, 1, 1);
				case 8: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 4.1, 1, 1, 1, 1, 1, 1);
			}
			SetTimerEx("StopAnimation", strlen(text)*100, false, "i", playerid);
		}
	}
 	return 0;
}
forward NPCStopAnimation(npcid);
public NPCStopAnimation(npcid)
{
    ApplyDynamicActorAnimation(npcid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
forward StopAnimation(playerid);
public StopAnimation(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
	return 1;
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if(User[playerid][tazed] == 1)
    {
		TogglePlayerControllable(playerid, 0);
		ApplyAnimation(playerid,"PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(V[vehicleid][vradio] == 1)
		StopAudioStreamForPlayer(playerid);
	//SFM(playerid, -1, "Radio %d %d", V[vehicleid][vradio], vehicleid);
	return 1;
}

stock GetDistance( Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2 )
{
	return floatround( floatsqroot( ( ( x1 - x2 ) * ( x1 - x2 ) ) + ( ( y1 - y2 ) * ( y1 - y2 ) ) + ( ( z1 - z2 ) * ( z1 - z2 ) ) )  );
}
CMD:pdistance(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new id;
		if(sscanf(params, "u", id))
			return MSG(playerid, GOLD, "SYNTAX:"GR" /pdistance [playerid/partofname]");
		if(GetPlayerVirtualWorld(id) != GetPlayerVirtualWorld(playerid))
			return MSG(playerid, GOLD, "ERROR:"GR" Specified player is in another virtual world.");
		new Float:x, Float:y, Float: z;
		new Float: ppx, Float: ppy, Float: ppz;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerPos(id, ppx, ppy, ppz);
		new distance = GetDistance(x, y, z, ppx, ppy, ppz);
		
		new string[40+MAX_PLAYER_NAME+MAX_PLAYER_NAME];
		format(string, sizeof string, "is (%d) yards away from %s.", distance, sendernameEx(id));
		PlayerActionMessage(playerid, string);
		return 1;
	}
	return 0;
}
public OnPlayerStateChange(playerid, newstate, oldstate)
{
	//SFM(playerid,-1,"SideJob:%d",User[playerid][SideJob]);
	if(oldstate == PLAYER_STATE_PASSENGER && newstate == PLAYER_STATE_DRIVER && User[playerid][specing] != -1)
		return KickPlayer(playerid,"Admin", "Third Party Modifications (Teleporting/Warp).");
	if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_DRIVER && User[playerid][specing] != -1)
		return KickPlayer(playerid,"Admin", "Third Party Modifications (Teleporting/Warp).");
	if(oldstate == PLAYER_STATE_DRIVER && User[playerid][specing] != -1) 
		SetPVarInt(playerid, "dCarEnter", gettime()+1);
	if(newstate == PLAYER_STATE_DRIVER && User[playerid][specing] != -1)
	{
		if(GetPVarInt(playerid, "dCarEnter") > gettime())
		{
			printf("[%s][%s] [cheat] %s has been kicked for entering a car in less than three seconds.", PasteDate(), PasteTime(), sendername(playerid));
			return KickPlayer(playerid,"Admin", "Third Party Modifications (Teleporting/Warp).");
		}
		else
		{
			DeletePVar(playerid, "dCarEnter");
		}
	}
	new vid = GetPlayerVehicleID(playerid);
	new type = GetVehicleType(vid);
    if(oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER) // Player entered a vehicle as a driver
    {
		if(V[vid][vradio] == 1)
			PlayAudioStreamForPlayer(playerid, V[vid][vurl]);
		if(User[playerid][shapeshift] > 1)
		{
			SlapPlayer(playerid, "Admin");
			MSG(playerid,GOLD,"ERROR:"GR" You cannot operate a vehicle in this form.");
			return 1;
		}
		if(User[playerid][pinvis] == true)
		{
			SetPlayerSkin(playerid, User[playerid][uSkin]);
			UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, User[playerid][pUsername]);
			MSG(playerid, GOLD, "Info"GR" Your invisiblity has been interrupted.");
			User[playerid][pinvis] = false;			
			ClearAnimations(playerid);
			KillTimer(InvisTimer[playerid]);
			DestroyHiddenTag(playerid);
		}
		User[playerid][LastCar] = vid;
		if(type == BIKE && V[vid][vrent] == 0)
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
		}
		if(User[playerid][UserID] == V[vid][cowner] && GetVehicleType(vid) != BIKE)
        {
            return MSG(playerid,GOLD,"Info:"GR" You have entered a vehicle that you own. Type (/v engine) to turn the engine on and off or simply press ~k~~CONVERSATION_NO~.");
        }
        else if(V[vid][vrent] > 0) // if a rentable car
        {
			if(User[playerid][vrented] != vid)
			{
			    return SFM(playerid,GOLD,"Info:"GR" You have entered a rentable vehicle. Type (/rentvehicle) to rent it for $%d.",V[vid][vrent]);
			}
        }

		if(vid == User[playerid][TruckID] && User[playerid][uJob] == JOB_COURIER && User[playerid][CurrentRun] == JOB_COURIER && AdminVeh[vid] == false && User[playerid][SideJob] == 0)
		{
			if(User[playerid][JobStarted] == 1)
			{
		    	MSG(playerid,GOLD,"Info:"GR" You have returned to the truck and resumed your route.");
		    	KillTimer(TruckTimer[playerid]);
		    	return 1;
			}
		    User[playerid][JobStarted] = 1;
		    MSG(playerid,GOLD,"Info:"GR" You have begun your route. Follow the red checkpoints on your map to continue with your job.");
			new Random = random(sizeof(TruckCP));
			User[playerid][LastCheckpoint] = Random;
			//SetPlayerCheckpoint(playerid,TruckCP[Random][0],TruckCP[Random][1],TruckCP[Random][2],10);
			KillTimer(TruckTimer[playerid]);
            DisablePlayerCheckpoint(playerid);
            SetPlayerRaceCheckpoint(playerid,2,TruckCP[Random][0],TruckCP[Random][1],TruckCP[Random][2],0,0,0,3);
			printf("[trucking_debug] [player: %d] sizeof(TruckCP): %d; Random: %d",PasteDate(),PasteTime(),User[playerid][UserID],sizeof(TruckCP),Random);
			//(playerid, RandomSpawns[Random][0], RandomSpawns[Random][1], RandomSpawns[Random][2]);
		}
		else if(vid == User[playerid][TruckID] && User[playerid][uJob] == JOB_BW && User[playerid][CurrentRun] == JOB_BW && AdminVeh[vid] == false && User[playerid][SideJob] == 0)
		{
			if(User[playerid][JobStarted] == 1)
			{
		    	MSG(playerid,GOLD,"Info:"GR" You have returned to the Bus and resumed your route.");
		    	KillTimer(TruckTimer[playerid]);
		    	return 1;
			}
		    User[playerid][JobStarted] = 1;
		    MSG(playerid,GOLD,"Info:"GR" You have begun your route. Follow the red checkpoints on your map to continue with your job.");
 			new Float:x, Float:y, Float:z;
			x = BusCP[0][0];
			y = BusCP[0][1];
			z = BusCP[0][2];
			User[playerid][CheckpointsPicked] = 0;
			User[playerid][LastCheckpoint] = 0;
			User[playerid][swRoute] = 0;
			KillTimer(TruckTimer[playerid]);
            DisablePlayerCheckpoint(playerid);
            SetPlayerRaceCheckpoint(playerid, 2, x, y, z, 0 ,0 ,0 , 4);
			//SFM(playerid,-1,"%f %f %f",x,y,z);
			printf("[%s][%s][bus_debug] [player: %d] sizeof(TruckCP): %d",PasteDate(),PasteTime(),User[playerid][UserID],sizeof(WHouse));
			User[playerid][jobhack] = gettime();
			printf("[%s][%s][bus_debug] [player: %d] sizeof(TruckCP): %d",PasteDate(),PasteTime(),User[playerid][UserID],sizeof(TruckCP));
		}
		else if(vid == User[playerid][TruckID] && User[playerid][uJob] == JOB_PB && User[playerid][CurrentRun] == JOB_PB && AdminVeh[vid] == false && User[playerid][SideJob] == 0)
		{
			if(User[playerid][JobStarted] == 1)
			{
				MSG(playerid,GOLD,"Info:"GR" You have returned to the bike and resumed your route.");
			 	KillTimer(TruckTimer[playerid]);
		 		return 1;
			}
		    User[playerid][JobStarted] = 1;
		    MSG(playerid,GOLD,"Info:"GR" You have begun your route. Follow the red checkpoints on your map to continue with your job.");
			new Random = random(sizeof(PizzaGo));
			User[playerid][LastCheckpoint] = Random;
			KillTimer(TruckTimer[playerid]);
            DisablePlayerCheckpoint(playerid);
            SetPlayerRaceCheckpoint(playerid,2,PizzaGo[Random][0],PizzaGo[Random][1],PizzaGo[Random][2],0,0,0,1);
		}
		else if(vid == User[playerid][TruckID] && User[playerid][uJob] == JOB_WH && User[playerid][CurrentRun] == JOB_WH && AdminVeh[vid] == false)
		{
			if(User[playerid][JobStarted] == 1)
			{
		    	MSG(playerid,GOLD,"Info:"GR" You have returned to the Forklift and resumed your route.");
		    	KillTimer(TruckTimer[playerid]);
		    	return 1;
			}
		    User[playerid][JobStarted] = 1;
		    MSG(playerid,GOLD,"Info:"GR" You have begun your route. Follow the red checkpoints on your map to continue with your job.");
			new Random = random(sizeof(WHouse));
			User[playerid][LastCheckpoint] = Random;
			KillTimer(TruckTimer[playerid]);
            DisablePlayerCheckpoint(playerid);
            SetPlayerRaceCheckpoint(playerid,2,WHouse[Random][0],WHouse[Random][1],WHouse[Random][2],0,0,0,1);
			printf("[%s][%s] [warehouse_debug] [player: %d] sizeof(TruckCP): %d; Random: %d",PasteDate(),PasteTime(),User[playerid][UserID],sizeof(WHouse),Random);
		}
		else if(vid == User[playerid][TruckID] && User[playerid][SideJob] == JOB_SWEEPER && User[playerid][CurrentRun] == JOB_SWEEPER && AdminVeh[vid] == false)
		{
			if(User[playerid][JobStarted] == 1)
			{
		    	MSG(playerid,GOLD,"Info:"GR" You have returned to the Sweeper and resumed your route.");
		    	KillTimer(TruckTimer[playerid]);
		    	return 1;
			}
		    User[playerid][JobStarted] = 1;
		    MSG(playerid,GOLD,"Info:"GR" You have begun your route. Follow the red checkpoints on your map to continue with your job.");
			new Random = random(2);
			new Float:x,Float:y,Float:z;
			switch(Random)
			{
				case 0:
				{
					x = fRoute[0][0];
					y = fRoute[0][1];
					z = fRoute[0][2];
				}
				case 1:
				{
					x = sRoute[0][0];
					y = sRoute[0][1];
					z = sRoute[0][2];
				}
			}
			User[playerid][LastCheckpoint] = 0;
			User[playerid][swRoute] = Random;
			KillTimer(TruckTimer[playerid]);
            DisablePlayerCheckpoint(playerid);
            SetPlayerRaceCheckpoint(playerid,2,x,y,z,0,0,0,1);
			SFM(playerid,-1,"%f %f %f",x,y,z);
			printf("[%s][%s] [sweeper_debug] [player: %d] sizeof(TruckCP): %d; Random: %d",PasteDate(),PasteTime(),User[playerid][UserID],sizeof(WHouse),Random);
			User[playerid][tLoading] = CreateDynamicObject(854,x,y,z-Z_MODIFIER,0,0,0);
			User[playerid][jobhack] = gettime();
		}
		else if(vid == User[playerid][TruckID] && User[playerid][SideJob] == JOB_MOWNER && User[playerid][CurrentRun] == JOB_MOWNER && AdminVeh[vid] == false)
		{
			if(User[playerid][JobStarted] == 1)
			{
		    	MSG(playerid,GOLD,"Info:"GR" You have returned to the Mower and resumed your route.");
		    	KillTimer(TruckTimer[playerid]);
		    	return 1;
			}
		    User[playerid][JobStarted] = 1;
		    MSG(playerid,GOLD,"Info:"GR" You have begun your route. Follow the red checkpoints on your map to continue with your job.");
			new Random = random(sizeof(MCP));
			User[playerid][LastCheckpoint] = Random;
			KillTimer(TruckTimer[playerid]);
            DisablePlayerCheckpoint(playerid);
            SetPlayerRaceCheckpoint(playerid,2,MCP[Random][0],MCP[Random][1],MCP[Random][2],0,0,0,3);
			printf("[%s][%s] [job_mowner] [player: %d] sizeof(TruckCP): %d; Random: %d",PasteDate(),PasteTime(),User[playerid][UserID],sizeof(TruckCP),Random);
			User[playerid][tLoading] = CreateDynamicObject(759,MCP[Random][0],MCP[Random][1],MCP[Random][2]-Z_MODIFIER_MOW,0,0,0);
			printf("[%s][%s] [job_mowner] Dynamic Object Created: %d",PasteDate(),PasteTime(),User[playerid][tLoading]);
			User[playerid][jobhack] = gettime();
		}
    }
    if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
    {
        if(User[playerid][LastCar] == User[playerid][TruckID] && User[playerid][JobStarted] > 0)
        {
            MSG(playerid,GOLD,"Info:"GR" You have left your job vehicle during a route. It will despawn in fifteen minutes.");
            TruckTimer[playerid] = SetTimerEx("OnTruckDelay",900000,0,"ddd",playerid,User[playerid][TruckID],User[playerid][UserID]);
        }
    }
    if(oldstate == PLAYER_STATE_PASSENGER || oldstate == PLAYER_STATE_DRIVER)
    {
        HideSpeedometer(playerid);
    }
	if(newstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_DRIVER)
	{
		if(type != BIKE)
		{
			TextDrawShowForPlayer(playerid, speedometer);
			PlayerTextDrawShow(playerid,vspeed[playerid]);
			PlayerTextDrawShow(playerid,vfuel[playerid]);
			SetTimerEx("OnSpeedometerUpdate", 2500, 0, "d", playerid);
		}
	}
	return 1;
}
forward OnSpeedometerUpdate(playerid);
public OnSpeedometerUpdate(playerid)
{
	if(User[playerid][Logged])
	{
		new id = GetPlayerVehicleID(playerid);
		if(id > 0 && GetVehicleType(id) != BIKE)
		{
			if(GetVehicleType(id) == BIKE) return 0;
			UpdateSpeedometer(playerid,id);
			SetTimerEx("OnSpeedometerUpdate", 2500, 0, "d", playerid);
		}
		return 1;
	}
	return 0;
}
public UpdateSpeedometer(playerid, vehicleid)
{
	if(User[playerid][Logged])
	{
		new str[24];
		format(str,sizeof str,"Fuel: %d%s",V[vehicleid][fuel], "%");
		PlayerTextDrawSetString(playerid,vfuel[playerid],str);
		format(str,sizeof str,"Speed: %d MPH",floatround(GetVehicleSpeed(vehicleid)));
		PlayerTextDrawSetString(playerid,vspeed[playerid],str);
	}
}

public HideSpeedometer(playerid)
{
	if(User[playerid][Logged])
	{
		TextDrawHideForPlayer(playerid, speedometer);
		PlayerTextDrawHide(playerid,vspeed[playerid]);
		PlayerTextDrawHide(playerid,vfuel[playerid]);
	}
}
CMD:gd(playerid,params[])
{
	new Float:x,Float:y,Float:z,Float:x1,Float:y1,Float:z1;
	sscanf(params,"ffffff",x,y,z,x1,y1,z1);
	SFM(playerid,GREEN,"%d",GetDistance(x,y,z,x1,y1,z1));
	return 1;
}
#define RegularDeal "Colt 45 ($1000)\nMarijuana ($300/gram)\nHandgun Ammo Pack ($350)"
public OnPlayerEnterCheckpoint(playerid)
{

	if(User[playerid][pDeal] == 1) // faction deal
        return Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmunition\nExplosives","Select","Abandon");
	else if(User[playerid][pDeal] == 2)
		return Dialog_Show(playerid,dRegularDeal,DIALOG_STYLE_LIST,"***",RegularDeal,"Select","Abandon");
	DisablePlayerCheckpoint(playerid);
	return 1;
}
Dialog:dRegularDeal(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {				
	        case 0:
	        {
				if(User[playerid][WeaponEquipped] > 0)
				{	
					MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped!");
					return Dialog_Show(playerid,dRegularDeal,DIALOG_STYLE_LIST,"***",RegularDeal,"Select","Abandon");
				}
				if(User[playerid][uMoney] < 1000)
				{	
					MSG(playerid,GOLD,"ERROR:"GR" Insufficient money.");
					return Dialog_Show(playerid,dRegularDeal,DIALOG_STYLE_LIST,"***",RegularDeal,"Select","Abandon");
				}
				ResetPlayerWeapons(playerid);
				User[playerid][WeaponEquipped] = WEAPON_COLT45;
				User[playerid][WeaponEquipped_Ammo] = 35;
				GivePlayerWeapon(playerid, User[playerid][WeaponEquipped], User[playerid][WeaponEquipped_Ammo]);
				GiveMoney(playerid, -1000);
				MSG(playerid,GRAD2,"Info: Purchased "G"Colt 45.");
				cmd_rc(playerid,"");
	    	}
			case 1: Dialog_Show(playerid,dDealListDrugRegularConf,DIALOG_STYLE_INPUT,"***","Input the amount of Marijuana you wish to purchase ($300/gram):","Input","Back");
			case 2:
			{
				if(User[playerid][uMoney] < 350)
				{
					MSG(playerid,GOLD,"ERROR:"GR" Insufficient money.");
					return Dialog_Show(playerid,dRegularDeal,DIALOG_STYLE_LIST,"***",RegularDeal,"Select","Abandon");
				}
				GivePlayerAmmo(playerid, 22);
				GiveMoney(playerid, -350);
				User[playerid][pDeal] = 2;
				cmd_rc(playerid,"");
			}			
		}
	}
	else cmd_rc(playerid,"");
	return 1;
}
Dialog:dDealListDrugRegularConf(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
			User[playerid][pDeal] = 1;
            return Dialog_Show(playerid,dDealListDrugRegularConf,DIALOG_STYLE_INPUT,"***","Input the amount of Marijuana you wish to purchase ($300/gram):","Input","Back");
		}
		new grams = strval(inputtext);
		if(grams > 10)
		{
			MSG(playerid,GOLD,"ERROR:"GR" Specified amount is unavailable.");
			return 	Dialog_Show(playerid,dDealListDrugRegularConf,DIALOG_STYLE_INPUT,"***","Input the amount of Marijuana you wish to purchase ($300/gram):","Input","Back");
		}
		
		if(User[playerid][uMoney] < 300*grams)
		{
			MSG(playerid,GOLD,"ERROR:"GR" You cannot afford this item.");
            return Dialog_Show(playerid,dDealListDrugRegularConf,DIALOG_STYLE_INPUT,"***","Input the amount of Marijuana you wish to purchase ($300/gram):","Input","Back");
		}
		GivePlayerDrug(playerid, "Marijuana", 25, grams);
		GiveMoney(playerid, -300*grams);
		format(large_string,sizeof large_string,"Info: Received "G"%d Marijuana"GR".",grams);
		MSG(playerid,GRAD2,large_string);
		cmd_rc(playerid,"");
		User[playerid][pDeal] = 2;
	}
	else Dialog_Show(playerid,dRegularDeal,DIALOG_STYLE_LIST,"***",RegularDeal,"Select","Abandon");
	return 1;
}
CMD:refillstocks(playerid,params[])
{
	if(IsPlayerAdmin(playerid))
	{
		db_query(Database,"DELETE FROM faction_stocks");
	    db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (22,1,25,10)"); // colt
	    db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (24,1,25,10)"); // deagle
     	db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (25,1,25,10)"); // shotgun
        db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (30,1,25,10)"); // ak47
        db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (32,1,25,10)"); // tec9
        db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (28,1,25,10)"); // uzi

        // ammo boxes
	    db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (22,3,25,10)"); // handgun
     	db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (25,3,25,10)"); // gauge shells
        db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (30,3,25,10)"); // assault rifles
        db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (28,3,25,10)"); // smg
        
        // drugs
        db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (6,2,25,10)"); // plant
        db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (2,2,25,10)"); // heroin
        db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (3,2,25,10)"); // cocaine
		
		// explosives
		db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (15,4,1,3)"); // IED
		db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (16,4,3,10)"); // nade
		db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (17,4,15,10)"); // teargas
		db_query(Database,"INSERT INTO faction_stocks (item,type,amount,pieces) VALUES (18,4,3,10)"); // molotov

		MSG(playerid, GOLD, "RCON: Stocks refilled.");
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	return 1;
}

Dialog:dDealList(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
				format(large_string,sizeof large_string,"SELECT * FROM faction_stocks WHERE type = 1");
				new DBResult: Result = db_query(Database, large_string);
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
					    new item = db_get_field_assoc_int(Result, "item");
					    new pieces = db_get_field_assoc_int(Result, "pieces");
			            format(large_string,sizeof large_string,"%s%s (Stock: %d)\n",large_string,GetWeaponNameEx(item),pieces);
					}
					else break;
				}
				while(db_next_row(Result));
				db_free_result(Result);
				Dialog_Show(playerid,dDealListGun,DIALOG_STYLE_LIST,"***",large_string,"Select","Back");
	        }
	        case 1:
	        {
				format(large_string,sizeof large_string,"SELECT * FROM faction_stocks WHERE type = 2");
				new DBResult: Result = db_query(Database, large_string);
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
					    new item = db_get_field_assoc_int(Result, "item");
					    new pieces = db_get_field_assoc_int(Result, "pieces");
						new drug[16];
						switch(item)
						{
						    case 6: drug = "Plant";
						    case 2: drug = "Heroin";
						    case 3: drug = "Cocaine";
						}
			            format(large_string,sizeof large_string,"%s%s (Stock: %d)\n",large_string,drug,pieces);
					}
					else break;
				}
				while(db_next_row(Result));
				db_free_result(Result);
				Dialog_Show(playerid,dDealListDrug,DIALOG_STYLE_LIST,"***",large_string,"Select","Back");
	        }
 	        case 2: // ammo
	        {
				format(large_string,sizeof large_string,"SELECT * FROM faction_stocks WHERE type = 3");
				new DBResult: Result = db_query(Database, large_string);
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
					    new item = db_get_field_assoc_int(Result, "item");
					    new pieces = db_get_field_assoc_int(Result, "pieces");
			            format(large_string,sizeof large_string,"%s%s (Stock: %d)\n",large_string,GetAmmoBoxName(item),pieces);
					}
					else break;
				}
				while(db_next_row(Result));
				db_free_result(Result);
				Dialog_Show(playerid,dDealListAmmo,DIALOG_STYLE_LIST,"***",large_string,"Select","Back");
	        }
			case 3: // explosives
			{	
				format(large_string,sizeof large_string,"SELECT * FROM faction_stocks WHERE type = 4");
				new DBResult: Result = db_query(Database, large_string);
				large_string[0] = EOS;
				do
				{
					if(db_num_rows(Result))
					{
					    new item = db_get_field_assoc_int(Result, "item");
					    new pieces = db_get_field_assoc_int(Result, "pieces");
			            format(large_string,sizeof large_string,"%s%s (Stock: %d)\n",large_string,GetExplosiveName(item),pieces);
					}
					else break;
				}
				while(db_next_row(Result));
				db_free_result(Result);
				Dialog_Show(playerid,dDealListExp,DIALOG_STYLE_LIST,"***",large_string,"Select","Back");
			}

		}
	}
	else cmd_rc(playerid,"");
	return 1;
}

Dialog:dDealListDrug(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new wep;
		printf("[%s][%s] [druglist_debug] [player: %d] INPUT: %s",PasteDate(),PasteTime(),User[playerid][UserID],inputtext);
		for(wep = 0; wep < 10; wep++)
		{
			if(strfind(inputtext,GetDrugName(wep), true) != -1)
			{
				break;
			}
		}
		format(large_string,sizeof large_string,"SELECT pieces FROM faction_stocks WHERE item = %d AND type = 2",wep);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
		    new pieces = db_get_field_assoc_int(Result, "pieces");
		    if(pieces < 1)
		    {
		        db_free_result(Result);
	            Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
	            return MSG(playerid,GOLD,"ERROR:"GR" Out of stock!");
		    }
		}
		db_free_result(Result);
		new price = 100+random(700);
		User[playerid][pDeal] = wep;
		User[playerid][gVar] = price;
		switch(wep) // set the prices
		{
		    case 22: {}
		    case 23: {}
			case 24: {}
			// etc . . .
		}
		format(large_string,sizeof large_string,"Input the amount of %s (%d each) you wish to purchase:",GetDrugName(wep),price);
		Dialog_Show(playerid,dDealListDrugConfirm,DIALOG_STYLE_INPUT,"***",large_string,"Yes","Back");
	}
 	else Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
	return 1;
}
Dialog:dDealListDrugConfirm(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext))
		{
			User[playerid][pDeal] = 1;
            return Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
		}
		new grams = strval(inputtext);
		if(User[playerid][uMoney] < User[playerid][gVar]*grams)
		{
            Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
            return MSG(playerid,GOLD,"ERROR:"GR" You cannot afford this item.");
		}
		format(large_string,sizeof large_string,"SELECT pieces FROM faction_stocks WHERE item = %d",User[playerid][pDeal]);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
			new pieces = db_get_field_assoc_int(Result,"pieces");
			if(grams > pieces)
			{
				db_free_result(Result);
				User[playerid][pDeal] = 1;
				return MSG(playerid,GOLD,"ERROR:"GR" Specified amount isn't available.");
			}
		}
		db_free_result(Result);
		new drug[24];
		strcat(drug, GetDrugName(User[playerid][pDeal]));
		GivePlayerDrug(playerid, drug, DealPurity, grams);
		format(large_string,sizeof large_string,"UPDATE faction_stocks SET pieces = pieces-%d WHERE item = %d",grams,User[playerid][pDeal]);
		db_query(Database, large_string);
		format(large_string,sizeof large_string,"Info: Received "G"%d %s",grams,drug);
		MSG(playerid,GRAD2,large_string);
		User[playerid][pDeal] = 1;
		GiveMoney(playerid, -User[playerid][gVar]);
	}
	else Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
	return 1;
}

Dialog:dDealListAmmo(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new wep;
		printf("[%s][%s] [ammolist_debug] INPUT: %s",PasteDate(),PasteTime(),User[playerid][UserID],inputtext);
		for(wep = 0; wep < 38; wep++)
		{
			if(strfind(inputtext,GetAmmoBoxName(wep), true) != -1)
			{
				break;
			}
		}
		format(large_string,sizeof large_string,"SELECT pieces FROM faction_stocks WHERE item = %d",wep);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
		    new pieces = db_get_field_assoc_int(Result, "pieces");
		    if(pieces < 1)
		    {
		        db_free_result(Result);
	            Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
	            return MSG(playerid,GOLD,"ERROR:"GR" Out of stock!");
		    }
		}
		db_free_result(Result);
		new price = 100+random(700);
		User[playerid][pDeal] = wep;
		User[playerid][gVar] = price;
		switch(wep) // set the prices
		{
		    case 22: {}
		    case 23: {}
			case 24: {}
			// etc . . .
		}
		format(large_string,sizeof large_string,"Are you sure you want to purchase a %s for $%d?",GetAmmoBoxName(wep),price);
		Dialog_Show(playerid,dDealListAmmoConfirm,DIALOG_STYLE_MSGBOX,"***",large_string,"Yes","Back");
	}
 	else Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
	return 1;
}
Dialog:dDealListAmmoConfirm(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(User[playerid][uMoney] < User[playerid][gVar])
		{
            Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
            return MSG(playerid,GOLD,"ERROR:"GR" You cannot afford this item.");
		}
		/*if(User[playerid][WeaponEquipped] > 0)
		{
            Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
            return MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
		}*/
		GivePlayerAmmo(playerid, User[playerid][pDeal]);
		format(large_string,sizeof large_string,"UPDATE faction_stocks SET pieces = pieces-1 WHERE item = %d",User[playerid][pDeal]);
		db_query(Database, large_string);
		User[playerid][pDeal] = 1;
		GiveMoney(playerid, -User[playerid][gVar]);
	}
	else Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
	return 1;
}

Dialog:dDealListExp(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new wep;
		printf("[%s][%s] [explosivelist_debug] INPUT: %s",PasteDate(),PasteTime(),User[playerid][UserID],inputtext);
		for(wep = 0; wep < 38; wep++)
		{
			if(strfind(inputtext,GetExplosiveName(wep), true) != -1)
			{
				break;
			}
		}
		format(large_string,sizeof large_string,"SELECT pieces FROM faction_stocks WHERE item = %d AND type = 4",wep);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
		    new pieces = db_get_field_assoc_int(Result, "pieces");
		    if(pieces < 1)
		    {
		        db_free_result(Result);
	            Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
	            return MSG(playerid,GOLD,"ERROR:"GR" Out of stock!");
		    }
		}
		db_free_result(Result);
		new price = 100+random(700);
		User[playerid][pDeal] = wep;
		User[playerid][gVar] = price;
		switch(wep) // set the prices
		{
		    case 15: price = 5000; // ied
			// etc . . .
		}
		format(large_string,sizeof large_string,"Are you sure you want to purchase a %s for $%d?",GetExplosiveName(wep),price);
		Dialog_Show(playerid,dDealListExpConfirm,DIALOG_STYLE_MSGBOX,"***",large_string,"Yes","Back");
	}
 	else Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
	return 1;
}
Dialog:dDealListExpConfirm(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(User[playerid][uMoney] < User[playerid][gVar])
		{
            Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
            return MSG(playerid,GOLD,"ERROR:"GR" You cannot afford this item.");
		}
		if(GetInventoryFreeSlot(playerid) == -1)
		{
            Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
            return MSG(playerid,GOLD,"ERROR:"GR" Your inventory is full.");
		}
		//GivePlayerAmmo(playerid, User[playerid][pDeal]);
		switch(User[playerid][pDeal])
		{
			case 15:
			{
				new id = GetInventoryFreeSlot(playerid);
				UpdateItem(playerid, id, GetItemID("IED"), "IED", 1, 100, true);	
			}
			default:
			{
				if(User[playerid][WeaponEquipped] > 0 && User[playerid][WeaponEquipped] != User[playerid][pDeal])
				{
					Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
					return MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
				}
				format(large_string,sizeof large_string,"SELECT amount FROM faction_stocks WHERE item = %d AND type = 4",User[playerid][pDeal]);
				new DBResult: Result = db_query(Database, large_string);
				if(db_num_rows(Result))
				{
					new ammo = db_get_field_assoc_int(Result,"amount");
					if(User[playerid][WeaponEquipped] == 0)
					{
						User[playerid][WeaponEquipped] = User[playerid][pDeal];
						User[playerid][WeaponEquipped_Ammo] = ammo;
					}
					else
					{
						User[playerid][WeaponEquipped_Ammo] += ammo;
						ResetPlayerWeapons(playerid);
					}
					GivePlayerWeapon(playerid, User[playerid][WeaponEquipped], ammo);
					format(large_string,sizeof large_string,"UPDATE faction_stocks SET pieces = pieces-1 WHERE item = %d",User[playerid][pDeal]);
					db_query(Database, large_string);
				}
				db_free_result(Result);
			}
		}
		format(large_string,sizeof large_string,"UPDATE faction_stocks SET pieces = pieces-1 WHERE item = %d",User[playerid][pDeal]);
		db_query(Database, large_string);
		GiveMoney(playerid, -User[playerid][gVar]);
		User[playerid][pDeal] = 1;
		
	}
	else Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
	return 1;
}

// BUYING AMMO BOXES:

CMD:myammopacks(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new id = playerid;
		if(User[playerid][Useradmin])
		{
		    sscanf(params,"u",id);
		}
		format(large_string,sizeof large_string,"SELECT * FROM ammobox WHERE userid = %d",User[id][UserID]);
		new DBResult: Result = db_query(Database, large_string);
		large_string[0] = EOS;
		new co = 1;
		do
		{
			if(db_num_rows(Result))
			{
				new pack = db_get_field_assoc_int(Result, "type");
				new value = db_get_field_assoc_int(Result, "amount");
				format(large_string,sizeof large_string,"%s%d. %s (Amount: %d)\n",large_string,co,GetAmmoBoxName(pack),value);
				co++;
			}
			else
			{
			    format(large_string,sizeof large_string,"You don't have any ammo packs.");
			    break;
			}
		}
		while(db_next_row(Result));
		Dialog_Show(playerid,dMyAmmo,DIALOG_STYLE_MSGBOX,"Ammo Packs",large_string,"Close","");
		db_free_result(Result);
	}
	return 1;
}
stock GivePlayerAmmo(playerid, ammotype, value = 1)
{
	if(User[playerid][Logged])
	{
		format(large_string,sizeof large_string,"SELECT 1 FROM ammobox WHERE userid = %d AND type = %d",User[playerid][UserID],ammotype);
  		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
		    format(large_string,sizeof large_string,"UPDATE ammobox SET amount = amount+%d WHERE userid = %d AND type = %d", value, User[playerid][UserID], ammotype);
		}
		else
		{
		    format(large_string,sizeof large_string,"INSERT INTO ammobox (userid,amount,type) VALUES (%d,%d,%d)",User[playerid][UserID], value, ammotype);
		}
		db_free_result(Result);
		db_query(Database, large_string);
		printf("[%s][%s] %d Ammo Box of %s has been given to %s (id:%d)", PasteDate(), PasteTime(), value, GetWeaponNameEx(ammotype), User[playerid][Username], playerid);
		format(large_string,sizeof large_string,"Info: Received "G"%d %s",value,GetAmmoBoxName(ammotype));
		MSG(playerid,GRAD2,large_string);
	}
	return 1;
}
stock TakePlayerAmmo(playerid, ammotype, value = 1)
{
	if(User[playerid][Logged])
	{
		format(large_string,sizeof large_string,"SELECT amount FROM ammobox WHERE userid = %d AND type = %d",User[playerid][UserID],ammotype);
  		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
		    new amount = db_get_field_assoc_int(Result, "amount");
			amount -= value;
			printf("[%s][%s][TakePlayerAmmo_debug] [player: %d] Amount: %d",PasteDate(),PasteTime(),User[playerid][UserID],amount);
			if(amount < 1)
				format(large_string,sizeof large_string,"DELETE FROM ammobox WHERE userid = %d AND type = %d",User[playerid][UserID], ammotype);
			else format(large_string,sizeof large_string,"UPDATE ammobox SET amount = %d WHERE userid = %d AND type = %d", amount, User[playerid][UserID], ammotype);
		    db_query(Database, large_string);
		}
		db_free_result(Result);
		printf("[%s][%s] %d Ammo Box of %s has taken from to %s (id:%d)", PasteDate(), PasteTime(), value, GetWeaponNameEx(ammotype), User[playerid][Username], playerid);
	}
	return 1;
}
stock GetPlayerAmmu(playerid, ammotype)
{
	if(User[playerid][Logged])
	{
		format(large_string,sizeof large_string,"SELECT amount FROM ammobox WHERE userid = %d AND type = %d", User[playerid][UserID],ammotype);
  		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
		    new value = db_get_field_assoc_int(Result, "amount");
		    db_free_result(Result);
		    return value;
		}
		else
		{
		    db_free_result(Result);
		    return 0;
		}
	}
	return -1;
}
CMD:passammopack(playerid,params[])
{
    if(User[playerid][JustUsed] > gettime()) return Wait(playerid,WAIT_MESSAGE);
	new id,type[15],value;
	if(sscanf(params,"s[15]du",type,id,value)) return MSG(playerid,GOLD,"SYNTAX:"GR" /passammopack [handgun/shell/smg/assault/rifle/cartridges] [playerid/PartOfName] [amount] ");
	if(value < 1) return MSG(playerid,GOLD,"ERROR:"GR" 'Amount' must be a positive number.");
	if(id == playerid) return MSG(playerid,GOLD,"ERROR:"GR" You cannot use this command on yourself.");
	if(!strcmp(type,"handgun",true))
	{
	    type[0] = 22;
	    type[1] = 24;
	}
	if(!strcmp(type,"shell",true))
	{
	    type[0] = 25;
	    type[1] = 26;
	}
	if(!strcmp(type,"smg",true))
	{
	    type[0] = 28;
	    type[1] = 32;
	}
	if(!strcmp(type,"assault",true))
	{
	    type[0] = 30;
	    type[1] = 31;
	}
	if(!strcmp(type,"rifle",true))
	{
	    type[0] = 33;
	    type[1] = 34;
	}
	if(!strcmp(type,"cartridges",true))
	{
	    type[0] = 23;
	}
	
	new ammof = GetPlayerAmmu(playerid, type[0]);
	new ammosec = GetPlayerAmmu(playerid, type[1]);
	new which;
	if(ammof > 0) which = 0;
	if(ammosec > 0) which = 1;
	if(ammof > 0 || ammosec > 0)
	{
		if(value > ammof && ammof != 0) return MSG(playerid,GOLD,"ERROR:"GR" You don't have the specified amount.");
		if(value > ammosec && ammosec != 0) return MSG(playerid,GOLD,"ERROR:"GR" You don't have the specified amount.");
        if(!ProxDetectorS(2.5,playerid,id)) return MSG(playerid,GOLD,"ERROR:"GR" Specified player is out of range.");
        GivePlayerAmmo(id, type[which], value);
        TakePlayerAmmo(playerid, type[which], value);
		format(large_string,sizeof large_string,"has given %d %s to %s.", value, GetAmmoBoxName(type[which]),sendernameEx(playerid));
		PlayerActionMessageBubble(playerid, large_string);
	}
	else return MSG(playerid,GOLD,"ERROR:"GR" You don't have the specified ammunition.");
	User[playerid][JustUsed] = gettime()+5;
	return 1;
}
CMD:useammopack(playerid,params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][WeaponEquipped] < 1) return MSG(playerid,GOLD,"ERROR:"GR" You need to be wielding a weapon in order to use this command.");
		if(isnull(params))
		    return MSG(playerid,GOLD,"SYNTAX:"GR" /useammopack [handgun/shell/smg/assault/rifle/cartridges]");
		if(!strcmp(params,"handgun",true))
		{
		    if(GetPlayerAmmu(playerid, 22) > 0 || GetPlayerAmmu(playerid, 24) > 0)
		    {
				if(User[playerid][WeaponEquipped] != 22 && User[playerid][WeaponEquipped] != 24)
				return MSG(playerid,GOLD,"ERROR:"GR" You cannot the specified ammo pack on your weapon.");
					
				TakePlayerAmmo(playerid, 22);
				TakePlayerAmmo(playerid, 24); // just incase
				User[playerid][WeaponEquipped_Ammo] += 50;
				ResetPlayerWeapons(playerid);
				GivePlayerWeapon(playerid, User[playerid][WeaponEquipped], User[playerid][WeaponEquipped_Ammo]);
				return 1;
		    }
		    else
		    {
		        return MSG(playerid,GOLD,"Info:"GR" You don't have the specified ammunition.");
		    }
		}
		if(!strcmp(params,"shell",true))
		{

		    if(GetPlayerAmmu(playerid, 25) > 0 || GetPlayerAmmu(playerid, 26) > 0)
		    {
				if(User[playerid][WeaponEquipped] != 25 && User[playerid][WeaponEquipped] != 26)
				return MSG(playerid,GOLD,"ERROR:"GR" You cannot the specified ammo pack on your weapon.");
				TakePlayerAmmo(playerid, 25);
				TakePlayerAmmo(playerid, 26); // just incase
				User[playerid][WeaponEquipped_Ammo] += 25;
				ResetPlayerWeapons(playerid);
				GivePlayerWeapon(playerid, User[playerid][WeaponEquipped], User[playerid][WeaponEquipped_Ammo]);
		    }
		    else
		    {
		        return MSG(playerid,GOLD,"Info:"GR" You don't have the specified ammunition.");
		    }
		}
		if(!strcmp(params,"smg",true))
		{
		    if(GetPlayerAmmu(playerid, 28) > 0 || GetPlayerAmmu(playerid, 32) > 0)
		    {
				if(User[playerid][WeaponEquipped] != 28 && User[playerid][WeaponEquipped] != 32)
				return MSG(playerid,GOLD,"ERROR:"GR" You cannot the specified ammo pack on your weapon.");
				TakePlayerAmmo(playerid, 28);
				TakePlayerAmmo(playerid, 32); // just incase
				User[playerid][WeaponEquipped_Ammo] += 80;
				ResetPlayerWeapons(playerid);
				GivePlayerWeapon(playerid, User[playerid][WeaponEquipped], User[playerid][WeaponEquipped_Ammo]);
		    }
		    else
		    {
		        return MSG(playerid,GOLD,"Info:"GR" You don't have the specified ammunition.");
		    }
		}
		if(!strcmp(params,"assault",true))
		{
		    if(GetPlayerAmmu(playerid, 30) > 0 || GetPlayerAmmu(playerid, 31) > 0)
		    {
				if(User[playerid][WeaponEquipped] != 30 && User[playerid][WeaponEquipped] != 31)
				return MSG(playerid,GOLD,"ERROR:"GR" You cannot the specified ammo pack on your weapon.");
				TakePlayerAmmo(playerid, 30);
				TakePlayerAmmo(playerid, 31); // just incase
				User[playerid][WeaponEquipped_Ammo] += 100;
				ResetPlayerWeapons(playerid);
				GivePlayerWeapon(playerid, User[playerid][WeaponEquipped], User[playerid][WeaponEquipped_Ammo]);
		    }
		    else
		    {
		        return MSG(playerid,GOLD,"Info:"GR" You don't have the specified ammunition.");
		    }
		}
		if(!strcmp(params,"rifle",true))
		{
		    if(GetPlayerAmmu(playerid, 33) > 0 || GetPlayerAmmu(playerid, 34) > 0)
		    {
				if(User[playerid][WeaponEquipped] != 3 && User[playerid][WeaponEquipped] != 34)
				return MSG(playerid,GOLD,"ERROR:"GR" You cannot the specified ammo pack on your weapon.");
				TakePlayerAmmo(playerid, 33);
				TakePlayerAmmo(playerid, 34); // just incase
				User[playerid][WeaponEquipped_Ammo] += 10;
				ResetPlayerWeapons(playerid);
				GivePlayerWeapon(playerid, User[playerid][WeaponEquipped], User[playerid][WeaponEquipped_Ammo]);
		    }
		    else
		    {
		        return MSG(playerid,GOLD,"Info:"GR" You don't have the specified ammunition.");
		    }
		}
		
		if(!strcmp(params,"cartridges",true))
		{
		    if(GetPlayerAmmu(playerid, 23) > 0)
		    {
				if(User[playerid][WeaponEquipped] != 23)
				return MSG(playerid,GOLD,"ERROR:"GR" You cannot the specified ammo pack on your weapon.");
				TakePlayerAmmo(playerid, 23);
				User[playerid][WeaponEquipped_Ammo] += 30;
				ResetPlayerWeapons(playerid);
				GivePlayerWeapon(playerid, User[playerid][WeaponEquipped], User[playerid][WeaponEquipped_Ammo]);
		    }
		    else
		    {
		        return MSG(playerid,GOLD,"Info:"GR" You don't have the specified ammunition.");
		    }
		}
	}
	return 1;
}
stock GetAmmoBoxName(ammotype)
{
	new box[40];
	box = "Invalid Ammo Pack";
	switch(ammotype)
	{
	    case 24,22: box = "Handgun Ammo Pack";
	    case 28,32,29: box = "SMG Ammo Pack";
	    case 30,31: box = "Automatic Rifle Ammo Pack";
	    case 33,34: box = "Rifle Ammo Pack";
	    case 25,26: box = "Shells Pack";
	}
	return box;
}
stock GetExplosiveName(exptype)
{
	new explos[40];
	explos = "Invalid Explosive";
	switch(exptype)
	{
		case 15: explos = "IED";
		case 16: explos = "Grenade";
		case 17: explos = "Tear Gas";
		case 18: explos = "Molotov";
	}
	return explos;
}
// BUYING GUNS:
Dialog:dDealListGun(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new wep;
		printf("[%s][%s] [gunlist_debug] [player: %d] INPUT: %s",PasteDate(),PasteTime(),User[playerid][UserID],inputtext);
		for(wep = 0; wep < 38; wep++)
		{
			if(strfind(inputtext,GetWeaponNameEx(wep), true) != -1)
			{
				break;
			}
		}
		format(large_string,sizeof large_string,"SELECT pieces FROM faction_stocks WHERE item = %d",wep);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
		    new pieces = db_get_field_assoc_int(Result, "pieces");
		    if(pieces < 1)
		    {
		        db_free_result(Result);
	            Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
	            return MSG(playerid,GOLD,"ERROR:"GR" Out of stock!");
		    }
		}
		db_free_result(Result);
		new price = 1250+random(5000);
		User[playerid][pDeal] = wep;
		User[playerid][gVar] = price;
		switch(wep) // set the prices
		{
		    case 22: {}
		    case 23: {}
			case 24: {}
		}
		format(large_string,sizeof large_string,"Are you sure you want to purchase a %s for $%d?",GetWeaponNameEx(wep),price);
		Dialog_Show(playerid,dDealListGunConfirm,DIALOG_STYLE_MSGBOX,"***",large_string,"Yes","Back");
	}
	else Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
	return 1;
}
Dialog:dDealListGunConfirm(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(User[playerid][uMoney] < User[playerid][gVar])
		{
            Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
            return MSG(playerid,GOLD,"ERROR:"GR" You cannot afford this item.");
		}
		if(User[playerid][WeaponEquipped] > 0)
		{
            Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
            return MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
		}
		format(large_string,sizeof large_string,"SELECT amount FROM faction_stocks WHERE item = %d AND type = 1",User[playerid][pDeal]);
		new DBResult: Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
		    new ammo = db_get_field_assoc_int(Result,"amount");
			User[playerid][WeaponEquipped] = User[playerid][pDeal];
			User[playerid][WeaponEquipped_Ammo] = ammo;
			GivePlayerWeapon(playerid, User[playerid][WeaponEquipped], ammo);
			GiveMoney(playerid, -User[playerid][gVar]);
			format(large_string,sizeof large_string,"UPDATE faction_stocks SET pieces = pieces-1 WHERE item = %d",User[playerid][pDeal]);
			db_query(Database, large_string);
		}
		User[playerid][pDeal] = 1;
		db_free_result(Result);
	}
	else Dialog_Show(playerid,dDealList,DIALOG_STYLE_LIST,"***","Weapons\nDrugs\nAmmo\nExplosives","Select","Abandon");
	return 1;
}
public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

CMD:jobprogress(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new str[124];
		new xpleft = 50;
		switch(User[playerid][uCourier][0])
		{
			case 2: xpleft = 100;
			case 3:	xpleft = 150;
			case 4: xpleft = 200;
		}
		switch(User[playerid][uJob])
		{
		    case JOB_COURIER: format(str,sizeof str,"[Courier] Job Level: %d; Job Experience: %d/%d; Job Cooldown: %d minute(s).",User[playerid][uCourier][0],User[playerid][uCourier][1],xpleft,User[playerid][uCourier][2]);
			case JOB_BW: format(str,sizeof str,"[Bus Driver] Job Level: %d; Job Experience: %d/%d; Job Cooldown: %d minute(s).",User[playerid][uBW][0],User[playerid][uBW][1],xpleft,User[playerid][uBW][2]);		
			case JOB_PB: format(str,sizeof str,"[Pizzaboy] Job Level: %d; Job Experience: %d/%d; Job Cooldown: %d minute(s).",User[playerid][uPB][0],User[playerid][uPB][1],xpleft,User[playerid][uPB][2]);
			case JOB_WH: format(str,sizeof str,"[Warehouse Operative] Job Level: %d; Job Experience: %d/%d; Job Cooldown: %d minute(s).",User[playerid][uWH][0],User[playerid][uWH][1],xpleft,User[playerid][uWH][2]);
			default: str = "Unemployed.";
		}
		MSG(playerid,YELLOW,str);
	}
	return 1;
}
CMD:cpp(playerid,params[])
{
	User[playerid][CheckpointsPicked] = strval(params);
	return 1;
}
new makeit;
CMD:makeitnow(playerid,params[])
{
	if(makeit)
	{
		makeit = 0;
	}
	else makeit = strval(params);
	SFM(playerid,-1,"Makeit: %d",makeit);
	return 1;
}

public DestroyObjectNow(objid)
{
	if(IsValidDynamicObject(objid))
	    DestroyDynamicObject(objid);
    printf("[%s][%s] Dynamic Object Destroyed: %d",PasteDate(),PasteTime(),objid);
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    if(GetPlayerVehicleID(playerid) == User[playerid][TruckID])
    {
		//printf("User[playerid][JobStarted]: %d\nUser[playerid][CheckpointsPicked]: %d\ngVar: %d,sizeof BUSCP %d,sizeof BUSCPSECOND %d,sizeof(fRoute): %d,sizeof(sRoute): %d"
		//,User[playerid][JobStarted],User[playerid][CheckpointsPicked],User[playerid][gVar],sizeof(BusCP),sizeof(BusCPSecond),sizeof (fRoute),sizeof (sRoute));
		//SFM(playerid,-1,"User[playerid][JobStarted]: %d\nUser[playerid][CheckpointsPicked]: %d\ngVar: %d,sizeof BUSCP %d,sizeof BUSCPSECOND %d,sizeof(fRoute): %d,sizeof(sRoute): %d"
		//,User[playerid][JobStarted],User[playerid][CheckpointsPicked],User[playerid][gVar],sizeof(BusCP),sizeof(BusCPSecond),sizeof (fRoute),sizeof (sRoute));
		if(User[playerid][CheckpointsPicked] < 8 && User[playerid][SideJob] == JOB_MOWNER)
		{
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			for(new i = 0; i < sizeof(MCP); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid,3,MCP[i][0],MCP[i][1],MCP[i][2]))
			    {
						new Random;
						do
						{
							Random = random(sizeof(MCP));
						}
						while(Random == User[playerid][LastCheckpoint]);

						User[playerid][LastCheckpoint] = Random;
                    	SetPlayerRaceCheckpoint(playerid,2,MCP[Random][0],MCP[Random][1],MCP[Random][2],0,0,0,2);
						printf("[%s][%s] [player: %d] User[playerid][JobStarted]: %d\nUser[playerid][CheckpointsPicked]: %d; Random: %d",PasteDate(),PasteTime(),User[playerid][UserID],User[playerid][JobStarted],User[playerid][CheckpointsPicked],Random);/*if(User[playerid][JobStarted] == 1) */
                        User[playerid][CheckpointsPicked]++;
						new string[124];
						format(string,sizeof string,""R"Info:"GR" A new checkpoint has been set on your map. ("G"%d/8"GR")",User[playerid][CheckpointsPicked]);
						//else format(string,sizeof string,""R"Info:"GR": Successfully unloaded. A new checkpoint has been set on your map. (%i/5)",User[playerid][JobStarted]-1);
						MSG(playerid,GRAD2,string);
						//DestroyDynamicObject(User[playerid][tLoading]);
						new Float:x,Float:y,Float:z;
						GetPlayerPos(playerid,x,y,z);
						MoveDynamicObject(User[playerid][tLoading],x,y,z-3,5);
						SetTimerEx("DestroyObjectNow",800,0,"d",User[playerid][tLoading]);
			            if(User[playerid][CheckpointsPicked] > 7)
			            {
			            	MSG(playerid,GOLD,"Info:"GR" You have finished your route. Return the Mower in order to receive your payment.");
			            	SetPlayerRaceCheckpoint(playerid,2,MOWNER_SPAWN,0,0,0,2);
			            	return 1;
			            }
						User[playerid][tLoading] = CreateDynamicObject(759,MCP[Random][0],MCP[Random][1],MCP[Random][2]-Z_MODIFIER_MOW,0,0,0);
	            		printf("Dynamic Object Created: %d",User[playerid][tLoading]);
						return 1;
				}
			}
		}
		else
		{
            if(User[playerid][SideJob] == JOB_MOWNER)
			{
				print("PING 5");
	            if(IsPlayerInRangeOfPoint(playerid,3,MOWNER_SPAWN))
	            {
		            print("A");
		            DestroyVehicle(User[playerid][TruckID]);
					print("B");
					V[User[playerid][TruckID]][fuel] = 100;
		            User[playerid][TruckID] = -1;
					DisablePlayerRaceCheckpoint(playerid);
					new level = User[playerid][uMW][0];
					printf("C (level: %d)", level);
					if(level == 0) User[playerid][uMW][0] = 1, level = 1;
					new pastlevel = level;
	    			User[playerid][uMW][1] += 1+random(2);
					print("D");
	    			if(User[playerid][uMW][1] > 49 && User[playerid][uMW][0] == 1) level = 2;
	    			else if(User[playerid][uMW][1] > 100 && User[playerid][uMW][0] == 2) level = 3;
	    			else if(User[playerid][uMW][1] > 150 && User[playerid][uMW][0] == 3) level = 4;
	    			new query[124];
					print("E");
	    			if(pastlevel != level)
	    			{
						format(query,sizeof query,"Info:"GR" Congratulations. You have leveled up in your field. You are now level %d.",level);
						User[playerid][uMW][0]++;
						User[playerid][uMW][1] = 0;
						MSG(playerid,GREEN,query);
	    			}
					print("F");
	    			new cd = 10;
	    			switch(User[playerid][uMW][0])
	    			{
						case 1: cd = 10;
						case 2: cd = 8;
						case 3: cd = 6;
						case 4: cd = 3;
	    			}
					print("G");
	    			new extra = 1;
	    			if(!isnull(User[playerid][donator])) extra = 50;
	    			GiveMoney(playerid,30*level+extra);
					if(!isnull(User[playerid][donator]))
						User[playerid][uMW][2] = 0,cd = 0;
					else User[playerid][uMW][2] = cd;
					print("H");
					format(query,sizeof query,"SELECT mower FROM jobs WHERE userid = %d",User[playerid][UserID]);
					new DBResult: Result = db_query(Database, query);
					format(query,sizeof query,"%d,%d,%d",User[playerid][uMW][0],User[playerid][uMW][1],User[playerid][uMW][2]);
					if(db_num_rows(Result))
					{
						format(query,sizeof query,"UPDATE jobs SET mower = '%s' WHERE userid = %d",query,User[playerid][UserID]);
					}
					else
					{
						format(query,sizeof query,"INSERT INTO jobs (userid,mower) VALUES (%d,'%s')",User[playerid][UserID],query);
					}
					db_query(Database, query);
					db_free_result(Result);
					print("I");

					User[playerid][JobStarted] = 0;
					User[playerid][CheckpointsPicked] = 0;
					User[playerid][SideJob] = 0;
					print("J");
					new rn = gettime();
					new sum = rn - User[playerid][jobhack];
					print("K");
					if(sum < 60)
					{
						format(query,sizeof query,"JOBHACK: %s (ID:%d) has finished their job in %d seconds (average: 60).",User[playerid][Username],playerid,sum);
						Staff(GOLD,query);
						printf("[%s][%s] [jobhack] %s has finished their job in %d seconds (average: 60).",PasteDate(),PasteTime(),User[playerid][Username],sum);
					}
					print("L");
					printf("%d jobhack = %d | rn = %d | sum = %d",playerid,User[playerid][jobhack],rn,sum);

					MSG(playerid,GRAD2,""G"Info:"GR" You have received your payment.");
					return 1;
	            }
			}
		}
		if(User[playerid][SideJob] == JOB_SWEEPER)
		{
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			new Float:x,Float:y,Float:z,id = User[playerid][LastCheckpoint]+1;
			printf("id: %d",id);
			if(IsPlayerInRangeOfPoint(playerid,2,SWEEPER_SPAWN))
			{
			    new bool:able;
			    if(id >= sizeof(sRoute)) able = true;
			    else if(id >= sizeof(fRoute)) able = true;
			    if(able)
			    {
  						MSG(playerid,GRAD2,""G"Info:"GR" You have received your payment.");
			            DestroyVehicle(User[playerid][TruckID]);
						V[User[playerid][TruckID]][fuel] = 100;
			            User[playerid][TruckID] = -1;
						DisablePlayerRaceCheckpoint(playerid);
						new level = User[playerid][uSW][0];
						if(level == 0) User[playerid][uSW][0] = 1, level = 1;
						new pastlevel = level;
		    			User[playerid][uSW][1] += 1+random(2);
		    			if(User[playerid][uSW][1] > 49 && User[playerid][uSW][0] == 1) level = 2;
		    			else if(User[playerid][uSW][1] > 100 && User[playerid][uSW][0] == 2) level = 3;
		    			else if(User[playerid][uSW][1] > 150 && User[playerid][uSW][0] == 3) level = 4;
		    			new query[124];
		    			if(pastlevel != level)
		    			{
							format(query,sizeof query,"Info:"GR" Congratulations. You have leveled up in your field. You are now level %d.",level);
							User[playerid][uSW][0]++;
							User[playerid][uSW][1] = 0;
							MSG(playerid,GREEN,query);
		    			}

		    			new cd = 10;
		    			switch(User[playerid][uSW][0])
		    			{
							case 2: cd = 8;
							case 3: cd = 6;
							case 4: cd = 3;
		    			}
		    			new extra = 1;
		    			if(!isnull(User[playerid][donator])) extra = 50;
		    			GiveMoney(playerid,40*level+extra);
						if(!isnull(User[playerid][donator]))
							User[playerid][uSW][2] = 0,cd = 0;
						else User[playerid][uSW][2] = cd;
						format(query,sizeof query,"SELECT sweeper FROM jobs WHERE userid = %d",User[playerid][UserID]);
						new DBResult: Result = db_query(Database, query);
						format(query,sizeof query,"%d,%d,%d",User[playerid][uSW][0],User[playerid][uSW][1],User[playerid][uSW][2]);
						if(db_num_rows(Result))
						{
							format(query,sizeof query,"UPDATE jobs SET sweeper = '%s' WHERE userid = %d",query,User[playerid][UserID]);
						}
						else
						{
							format(query,sizeof query,"INSERT INTO jobs (userid,sweeper) VALUES (%d,'%s')",User[playerid][UserID],query);
						}
						db_query(Database, query);
						db_free_result(Result);
                        User[playerid][SideJob] = 0;
						User[playerid][JobStarted] = 0;
						User[playerid][CheckpointsPicked] = 0;
						new rn = gettime();
						new sum = rn - User[playerid][jobhack];
						if(sum < 120)
						{
							format(query,sizeof query,"POTENTIAL HACK: %s (ID:%d) has finished their job in %d seconds (average: 120).",User[playerid][Username],playerid,sum);
							Staff(GOLD,query);
							printf("[%s][%s] [jobhack] %s has finished their job in %d seconds (average: 120).",PasteDate(),PasteTime(),User[playerid][Username],sum);
							//MSG(playerid,-1,"ALRT ALERT!");
						}
						printf("%d jobhack = %d | rn = %d | sum = %d",playerid, User[playerid][jobhack],rn,sum);
						return 1;
			    }

			}

			switch(User[playerid][swRoute])
			{
			    case 0:
			    {
					if(id >= sizeof (fRoute))
					{
			   			SetPlayerRaceCheckpoint(playerid,2,SWEEPER_SPAWN,0,0,0,1);
						MSG(playerid,GRAD2,""R"Info:"GR" You have finished. Return the Sweeper to receive your payment.");
						DestroyDynamicObject(User[playerid][tLoading]);
						return 1;
					}
					x = fRoute[id][0];
					y = fRoute[id][1];
					z = fRoute[id][2];

				}
				case 1:
				{
					if(id >= sizeof (sRoute))
					{
     					SetPlayerRaceCheckpoint(playerid,2,SWEEPER_SPAWN,0,0,0,1);
						MSG(playerid,GRAD2,""R"Info:"GR" You have finished. Return the Sweeper to receive your payment.");
						DestroyDynamicObject(User[playerid][tLoading]);
						return 1;
					}
					x = sRoute[id][0];
					y = sRoute[id][1];
					z = sRoute[id][2];
			    }
			}
			//
			User[playerid][LastCheckpoint] = id;
			SetPlayerRaceCheckpoint(playerid,2,x,y,z,0,0,0,1);
			User[playerid][CheckpointsPicked]++;
			DestroyDynamicObject(User[playerid][tLoading]);
            User[playerid][tLoading] = CreateDynamicObject(854,x,y,z-Z_MODIFIER,0,0,0);
			return 1;
		}
		if(User[playerid][uJob] == JOB_BW)
		{
          	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			new Float:x,Float:y,Float:z,id = User[playerid][LastCheckpoint]+1;
			printf("id: %d",id);
			if(IsPlayerInRangeOfPoint(playerid,2,BUS_SPAWN))
			{
			    if(id >= sizeof(BusCP))
			    {
			            DestroyVehicle(User[playerid][TruckID]);
						V[User[playerid][TruckID]][fuel] = 100;
			            User[playerid][TruckID] = -1;
						DisablePlayerRaceCheckpoint(playerid);
						new level = User[playerid][uBW][0];
						if(level == 0) User[playerid][uBW][0] = 1,level = 1;
						new	pastlevel = level;
		    			User[playerid][uBW][1] += 1+random(2);
		    			if(User[playerid][uBW][1] > 49 && User[playerid][uBW][0] == 1) level = 2;
		    			else if(User[playerid][uBW][1] > 100 && User[playerid][uBW][0] == 2) level = 3;
		    			else if(User[playerid][uBW][1] > 150 && User[playerid][uBW][0] == 3) level = 4;
		    			new query[124];
		    			if(pastlevel != level)
		    			{
							format(query,sizeof query,"Info:"GR" Congratulations! You have leveled up in your field. You are now level %d.",level);
							User[playerid][uBW][0]++;
							User[playerid][uBW][1] = 0;
							MSG(playerid,GREEN,query);
		    			}

		    			new cd = 10;
		    			switch(User[playerid][uBW][0])
		    			{
							case 2: cd = 8;
							case 3: cd = 6;
							case 4: cd = 3;
		    			}
		    			new extra = 1;
		    			if(!isnull(User[playerid][donator])) extra = 50;
		    			GiveMoney(playerid,75*level+extra);
						if(!isnull(User[playerid][donator])) User[playerid][uBW][2] = 0,cd = 0;
						else User[playerid][uBW][2] = cd;
						format(query,sizeof query,"%d,%d,%d",level,User[playerid][uBW][1],cd);
		    			format(query,sizeof query,"UPDATE jobs SET bus = '%s' WHERE userid = %d",query,User[playerid][UserID]);
						db_query(Database, query);
                        User[playerid][SideJob] = 0;
						User[playerid][JobStarted] = 0;
						User[playerid][CheckpointsPicked] = 0;
						new rn = gettime(), sum = rn - User[playerid][jobhack];
						if(sum < 120)
						{
							format(query,sizeof query,"POTENTIAL HACK: %s (ID:%d) has finished their job in %d seconds (average: 120).",User[playerid][Username],playerid,sum);
							Staff(GOLD,query);
							printf("[%s][%s] [jobhack] %s has finished their job in %d seconds (average: 120).",PasteDate(),PasteTime(),User[playerid][Username],sum);
						}
						printf("%d jobhack = %d | rn = %d | sum = %d",playerid, User[playerid][jobhack],rn,sum);

						MSG(playerid,GRAD2,""G"Info:"GR" You have received your payment.");
						return 1;
			    }

			}

			switch(User[playerid][swRoute])
			{
			    case 0:
			    {
					if(id >= sizeof(BusCP))
					{
			   			SetPlayerRaceCheckpoint(playerid,2,BUS_SPAWN,0,0,0,1);
						MSG(playerid,GRAD2,""R"Info:"GR" You have finished. Return the Bus to receive your payment.");
						return 1;
					}
					x = BusCP[id][0];
					y = BusCP[id][1];
					z = BusCP[id][2];

				}
			}
			//
			User[playerid][LastCheckpoint] = id;
			SetPlayerRaceCheckpoint(playerid,0,x,y,z,0,0,0,1);
			User[playerid][CheckpointsPicked]++;
			return 1;
		}

		if(User[playerid][CheckpointsPicked] < 5 && User[playerid][uJob] == JOB_WH && User[playerid][gVar] == -10000+JOB_WH)
		{
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    if(IsPlayerInRangeOfPoint(playerid,3,DELIVERTO))
		    {
				new Random = random(sizeof(WHouse));
				printf("[%s][%s] [job_warehouse] [player: %d] Random (RandomEx): %d",PasteDate(),PasteTime(),User[playerid][UserID],Random);
				do
				{
					Random = random(sizeof(WHouse));
				}
				while(Random == User[playerid][LastCheckpoint]);
				User[playerid][LastCheckpoint] = Random;
				SetPlayerRaceCheckpoint(playerid,2,WHouse[Random][0],WHouse[Random][1],WHouse[Random][2],0,0,0,1);
				printf("User[playerid][CheckpointsPicked] = %d",User[playerid][CheckpointsPicked]);
		  		User[playerid][CheckpointsPicked]++;
		  		printf("User[playerid][CheckpointsPicked] = %d",User[playerid][CheckpointsPicked]);
		  		if(User[playerid][CheckpointsPicked] > 4)
		  		{
		  		    printf("User[playerid][CheckpointsPicked] = %d",User[playerid][CheckpointsPicked]);
		            SetPlayerRaceCheckpoint(playerid,2,WHOperative,0,0,0,3);
					MSG(playerid,GRAD2,""R"Info:"GR" You have delivered all the crates. Return the Forklift to receive your payment.");
					DestroyDynamicObject(V[User[playerid][TruckID]][crated]);
					return 1;
		  		}
		  		SFM(playerid,GRAD2,""R"Info:"GR" You have delivered the crate. A new checkpoint has been set in your minimap. ("G"%d/5"GR")",User[playerid][CheckpointsPicked]);
				DestroyDynamicObject(V[User[playerid][TruckID]][crated]);
				return 1;
			}
		}
		else
		{
		        if(User[playerid][uJob] == JOB_WH && User[playerid][CheckpointsPicked] > 4)
		        {
					if(IsPlayerInRangeOfPoint(playerid,5,WHOperative))
		            {
			            MSG(playerid,GRAD2,""G"Info:"GR" Payment has been added to your next paycheck.");
			            DestroyVehicle(User[playerid][TruckID]);
						V[User[playerid][TruckID]][fuel] = 100;
			            User[playerid][TruckID] = -1;
						DisablePlayerRaceCheckpoint(playerid);
						new level = User[playerid][uWH][0];
						if(level == 0) User[playerid][uWH][0] = 1,level = 1;
						new pastlevel = level;
		    			User[playerid][uWH][1] += 1+random(2);
		    			if(User[playerid][uWH][1] > 49 && User[playerid][uWH][0] == 1) level = 2;
		    			else if(User[playerid][uWH][1] > 100 && User[playerid][uWH][0] == 2) level = 3;
		    			else if(User[playerid][uWH][1] > 150 && User[playerid][uWH][0] == 3) level = 4;
		    			new query[124];
		    			if(pastlevel != level)
		    			{
							format(query,sizeof query,"Info:"GR" Congratulations. You have leveled up in your field. You are now level %d.",level);
							User[playerid][uWH][0]++;
							User[playerid][uWH][1] = 0;
							MSG(playerid,GREEN,query);
		    			}

		    			new cd = 10;
		    			switch(User[playerid][uWH][0])
		    			{
							case 2: cd = 8;
							case 3: cd = 6;
							case 4: cd = 3;
		    			}
		    			new extra = 1;
		    			if(!isnull(User[playerid][donator])) extra = 50;
	    				User[playerid][pPayment] += 85*level+extra;
						format(large_string,124,"UPDATE users SET payment = %d WHERE userid = %d",User[playerid][pPayment], User[playerid][UserID]);
						db_query(Database, large_string);
						if(!isnull(User[playerid][donator]))
							User[playerid][uWH][2] = 0,cd = 0;
						else User[playerid][uWH][2] = cd;
						format(query,sizeof query,"%d,%d,%d",level,User[playerid][uWH][1],cd);
		    			format(query,sizeof query,"UPDATE jobs SET warehouse = '%s' WHERE userid = %d",query,User[playerid][UserID]);
						db_query(Database, query);
						User[playerid][JobStarted] = 0;
						User[playerid][CheckpointsPicked] = 0;
						return 1;
		            }
				}
		}

		if(User[playerid][CheckpointsPicked] < 5 && User[playerid][uJob] == JOB_WH)
		{
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			for(new i = 0; i < sizeof(WHouse); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid,5,WHouse[i][0],WHouse[i][1],WHouse[i][2]))
			    {
                    	SetPlayerRaceCheckpoint(playerid,2,DELIVERTO,0,0,0,2);
						printf("[%s][%s] [warehouse_debug] [player: %d] User[playerid][JobStarted]: %d\nUser[playerid][CheckpointsPicked]: %d"
						,PasteDate(),PasteTime(),User[playerid][UserID],User[playerid][JobStarted],User[playerid][CheckpointsPicked]);/*if(User[playerid][JobStarted] == 1) */
						MSG(playerid,GRAD2,""R"Info:"GR" You have picked the crate. Take it to the checkpoint.");
						V[User[playerid][TruckID]][crated] = CreateDynamicObject(1221,0,0,0,0,0,0);
					 	AttachDynamicObjectToVehicle(V[User[playerid][TruckID]][crated],User[playerid][TruckID],0,0.6,0.4,0,0,0);
						User[playerid][gVar] = -10000+JOB_WH;
						break;
				}
			}
		}
		if(User[playerid][uJob] == JOB_PB)
		{
			//SFM(playerid, -1, "cps %d", User[playerid][CheckpointsPicked]);
			if(User[playerid][CheckpointsPicked] > 8)
			{
				MSG(playerid,GOLD,"Info:"GR" You have finished your route. Return the bike in order to receive your payment.");
				SetPlayerRaceCheckpoint(playerid,2,PB_SPAWN,0,0,0,3);
				if(IsPlayerInRangeOfPoint(playerid,3,PB_SPAWN))
				{
						MSG(playerid,GRAD2,""G"Info:"GR" You have received your payment.");
						DestroyVehicle(User[playerid][TruckID]);
						V[User[playerid][TruckID]][fuel] = 100;
						User[playerid][TruckID] = -1;
						DisablePlayerRaceCheckpoint(playerid);
						new level = User[playerid][uPB][0];
						if(level == 0) User[playerid][uPB][0] = 1,level = 1;
						new pastlevel = level;
						User[playerid][uPB][1] += 1+random(2);
						if(User[playerid][uPB][1] > 49 && User[playerid][uPB][0] == 1) level = 2;
						else if(User[playerid][uPB][1] > 100 && User[playerid][uPB][0] == 2) level = 3;
						else if(User[playerid][uPB][1] > 150 && User[playerid][uPB][0] == 3) level = 4;
						new query[124];
						if(pastlevel != level)
						{
							format(query,sizeof query,"Info:"GR" Congratulations. You have leveled up in your field. You are now level %d.",level);
							User[playerid][uPB][0]++;
							User[playerid][uPB][1] = 0;
							MSG(playerid,GREEN,query);
						}

						new cd = 10,payment = 90;
						switch(User[playerid][uPB][0])
						{
							case 2: cd = 8,payment = 120;
							case 3: cd = 6,payment = 180;
							case 4: cd = 3,payment = 240;
						}
						if(!isnull(User[playerid][donator])) payment += 50;
						GiveMoney(playerid,payment);
						if(!isnull(User[playerid][donator]))
							User[playerid][uPB][2] = 0,cd = 0;
						else User[playerid][uPB][2] = cd;
						format(query,sizeof query,"%d,%d,%d",level,User[playerid][uPB][1],cd);
						format(query,sizeof query,"UPDATE jobs SET pizzaboy = '%s' WHERE userid = %d",query,User[playerid][UserID]);
						db_query(Database, query);

						User[playerid][JobStarted] = 0;
						User[playerid][CheckpointsPicked] = 0;
						return 1;
				}
			}
			if(User[playerid][CheckpointsPicked] <= 8)
			{
				if(IsPlayerInRangeOfPoint(playerid,3,PizzaGo[User[playerid][LastCheckpoint]][0],PizzaGo[User[playerid][LastCheckpoint]][1],PizzaGo[User[playerid][LastCheckpoint]][2]))
				{
					new Random = random(sizeof(PizzaGo));
					printf("[%s][%s] [job_pizzaboy] [player: %d] Random (RandomEx): %d",PasteDate(),PasteTime(),User[playerid][UserID],Random);
					do
					{
						Random = random(sizeof(PizzaGo));
					}
					while(Random == User[playerid][LastCheckpoint]);
					User[playerid][LastCheckpoint] = Random;
					User[playerid][CheckpointsPicked]++;
					SetPlayerRaceCheckpoint(playerid,2,PizzaGo[Random][0],PizzaGo[Random][1],PizzaGo[Random][2],0,0,0,1);
					new string[124];
					format(string,sizeof string,""R"Info:"GR" Successfully delievered. A new checkpoint has been set on your map. ("G"%d/10"GR")",User[playerid][CheckpointsPicked]);
					//else format(string,sizeof string,""R"Info:"GR": Successfully unloaded. A new checkpoint has been set on your map. (%i/5)",User[playerid][JobStarted]-1);
					MSG(playerid,GRAD2,string);
					return 1;
				}
			}
	
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}

        if(User[playerid][CheckpointsPicked] < 5 && User[playerid][uJob] == JOB_COURIER)
        {
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            print("PING 2");
            for(new i = 0; i < sizeof(TruckCP); i++)
            {
                if(IsPlayerInRangeOfPoint(playerid,3,TruckCP[i][0],TruckCP[i][1],TruckCP[i][2]))
                {
                    if(User[playerid][tLoading] != 1)
                    {
	                    ShowPlayerProgressBar(playerid,gBar);
	                    MSG(playerid,GOLD,"Info:"GR" You have started unloading. Please refrain from moving or leaving the truck.");
	                    SetTimerEx("UnloadingTruck",1000,0,"dfff",playerid,TruckCP[i][0],TruckCP[i][1],TruckCP[i][2]);
	                    GameTextForPlayer(playerid,"~n~~n~~n~~n~~y~Unloading....",15*1000,5);
	                    User[playerid][tLoading] = 1;
                    }
                    break;
                }
            }
        }
        else
        {
            if(User[playerid][uJob] == JOB_COURIER)
			{
				print("PING 5");
	            if(IsPlayerInRangeOfPoint(playerid,3,TRUCK_SPAWN))
	            {
		            MSG(playerid,GRAD2,""G"Info:"GR" Payment has been added to your next paycheck.");
		            DestroyVehicle(User[playerid][TruckID]);
					V[User[playerid][TruckID]][fuel] = 100;
		            User[playerid][TruckID] = -1;
					DisablePlayerRaceCheckpoint(playerid);
					new level = User[playerid][uCourier][0];
					if(level == 0) User[playerid][uCourier][0] = 1,level = 1;
					new pastlevel = level;
	    			User[playerid][uCourier][1] += 1+random(2);
	    			if(User[playerid][uCourier][1] > 49 && User[playerid][uCourier][0] == 1) level = 2;
	    			else if(User[playerid][uCourier][1] > 100 && User[playerid][uCourier][0] == 2) level = 3;
	    			else if(User[playerid][uCourier][1] > 150 && User[playerid][uCourier][0] == 3) level = 4;
	    			new query[124];
	    			if(pastlevel != level)
	    			{
						format(query,sizeof query,"Info:"GR" Congratulations. You have leveled up in your field. You are now level %d.",level);
						User[playerid][uCourier][0]++;
						User[playerid][uCourier][1] = 0;
						MSG(playerid,GREEN,query);
	    			}

	    			new cd = 10;
	    			switch(User[playerid][uCourier][0])
	    			{
						case 2: cd = 8;
						case 3: cd = 6;
						case 4: cd = 3;
	    			}
	    			new extra = 1;
	    			if(!isnull(User[playerid][donator])) extra = 50;
	    			User[playerid][pPayment] += 300*level+extra;
					format(query,sizeof query,"UPDATE users SET payment = payment+%d WHERE userid = %d",User[playerid][pPayment],User[playerid][UserID]);
					db_query(Database, query);
					if(!isnull(User[playerid][donator]))
						User[playerid][uCourier][2] = 0,cd = 0;
					else User[playerid][uCourier][2] = cd;
					format(query,sizeof query,"%d,%d,%d",level,User[playerid][uCourier][1],cd);
	    			format(query,sizeof query,"UPDATE jobs SET courier = '%s' WHERE userid = %d",query,User[playerid][UserID]);
					db_query(Database, query);

					User[playerid][JobStarted] = 0;
					User[playerid][CheckpointsPicked] = 0;
					return 1;
	            }
			}
        }
    }
	return 1;
}

public UnloadingTruck(playerid,Float:tx,Float:ty,Float:tz)
{
    if(User[playerid][uJob] == 1)
    {
        new bool:start = true;
        if(User[playerid][JobStarted] > 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid,10,tx,ty,tz))
            {
                OnTruckDelay(playerid,User[playerid][TruckID], User[playerid][UserID]);
                return 1;
            }

			if(GetPlayerProgressBarValue(playerid,gBar) < 100)
			{
            	SetPlayerProgressBarValue(playerid,gBar,GetPlayerProgressBarValue(playerid,gBar)+6.6);
			}
			else
			{
						new Random = random(sizeof(TruckCP)),
									string[125];
						if(Random == User[playerid][LastCheckpoint])
						{
						    /*
						        Random = 4
						        sizeof(TruckCP) = 5
								if(4+1 > 5-1)

								Random = 3;
								TruckCP = 5;
								if(3+1 (4) > 5-1 (4)
								{
								    Random = 4;
								}

						    */
						    if(Random+1 > sizeof(TruckCP)-1)
						    {
								Random--;
						    }
						    else
						    {
						        Random++;
						    }
						}
						User[playerid][LastCheckpoint] = Random;
                    	SetPlayerRaceCheckpoint(playerid,2,TruckCP[Random][0],TruckCP[Random][1],TruckCP[Random][2],0,0,0,3);
						printf("User[playerid][JobStarted]: %d\nUser[playerid][CheckpointsPicked]: %d",User[playerid][JobStarted],User[playerid][CheckpointsPicked]);/*if(User[playerid][JobStarted] == 1) */
                        User[playerid][CheckpointsPicked]++;
						format(string,sizeof string,""R"Info:"GR" Successfully unloaded. A new checkpoint has been set on your map. ("G"%d/5"GR")",User[playerid][CheckpointsPicked]);
						//else format(string,sizeof string,""R"Info:"GR": Successfully unloaded. A new checkpoint has been set on your map. (%i/5)",User[playerid][JobStarted]-1);
						MSG(playerid,GRAD2,string);
			            if(User[playerid][CheckpointsPicked] > 4)
			            {
			            	MSG(playerid,GOLD,"Info:"GR" You have finished your route. Return the truck in order to receive your payment.");
			            	SetPlayerRaceCheckpoint(playerid,2,TRUCK_SPAWN,0,0,0,3);
							SetPlayerProgressBarValue(playerid,gBar,0);
							HidePlayerProgressBar(playerid, gBar);
							start = false;
							User[playerid][tLoading] = 0;
			            	return 1;
			            }
						SetPlayerProgressBarValue(playerid,gBar,0);
						HidePlayerProgressBar(playerid, gBar);
						start = false;
						User[playerid][tLoading] = 0;

						return 1;
			}
			if(start) SetTimerEx("UnloadingTruck",1000,0,"dfff",playerid,tx,ty,tz);
        }
    }
    return 1;
}
public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	if(!strcmp(cmd, "inchour"))
	{
		SetSVarInt("ichour", GetSVarInt("ichour")+1);
		printf("RCON: hour %d", GetSVarInt("ichour"));
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
		// This will show:
		// Type CMD HERE to start this job
 	if(pickupid == CourierPick)
    {
		MSG(playerid,GOLD,"Info:"GR" Type (/startcourier) in order to begin your job.");
    }
	if(pickupid == WHPick)
	{
		MSG(playerid,GOLD,"Info:"GR" Type (/opw) in order to begin your job.");
	}
	if(pickupid == PizzaPick)
	{
		MSG(playerid,GOLD,"Info:"GR" Type (/pb) in order to begin your job.");
	}
	if(pickupid == SweepPick)
	{
		MSG(playerid,GOLD,"Info:"GR" Type (/sweep) in order to begin your job.");
	}
	if(pickupid == MownerPick)
	{
		MSG(playerid,GOLD,"Info:"GR" Type (/mow) in order to begin your job.");
	}
	if(pickupid == BusPick)
	{
		MSG(playerid,GOLD,"Info:"GR" Type (/busroute) in order to begin your job.");
	}
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

Dialog:dCorpseTakeWeapon(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(User[playerid][WeaponEquipped] != 0) return MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
		switch(listitem)
		{
			case 0: // Jacet
			{
				foreach(Corpses, c)
				{
					if(IsPlayerInRangeOfPoint(playerid,1.2,CORPSE[c][cX],CORPSE[c][cY],CORPSE[c][cZ]))
					{
						if(CORPSE[c][cFirstSlot] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Specified slot is empty.");
						User[playerid][WeaponEquipped] = CORPSE[c][cFirstSlot];
						User[playerid][WeaponEquipped_Ammo] = CORPSE[c][cFirstSlot_Ammo];
						CORPSE[c][cFirstSlot] = 0;
						CORPSE[c][cFirstSlot_Ammo] = 0;
						
						new ammo[11],wep[24],query[124];
						format(ammo,sizeof ammo,"%d,%d,%d",User[playerid][uWeapon_Ammo][0],User[playerid][uWeapon_Ammo][1],User[playerid][WeaponEquipped_Ammo]);
						format(wep,sizeof wep,"%d,%d,%d",User[playerid][uWeapon][0],User[playerid][uWeapon][1],User[playerid][WeaponEquipped]);
						format(query,sizeof query,"UPDATE users SET weapon = '%s',ammo = '%s' WHERE userid = %d",wep,ammo,User[playerid][UserID]);
						db_query(Database, query);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid,User[playerid][WeaponEquipped],User[playerid][WeaponEquipped_Ammo]);

						format(query,sizeof query,"fetches a %s from the corpse.",GetWeaponNameEx(User[playerid][WeaponEquipped]));
						cmd_ame(playerid,query);
					}
				}				
			}
			case 1: // Pocket
			{
				foreach(Corpses, c)
				{
					if(IsPlayerInRangeOfPoint(playerid,1.2,CORPSE[c][cX],CORPSE[c][cY],CORPSE[c][cZ]))
					{
						if(CORPSE[c][cSecondSlot] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Specified slot is empty.");
						User[playerid][WeaponEquipped] = CORPSE[c][cSecondSlot];
						User[playerid][WeaponEquipped_Ammo] = CORPSE[c][cSecondSlot_Ammo];
						CORPSE[c][cSecondSlot] = 0;
						CORPSE[c][cSecondSlot_Ammo] = 0;
						new ammo[11],wep[24],query[124];
						format(ammo,sizeof ammo,"%d,%d,%d",User[playerid][uWeapon_Ammo][0],User[playerid][uWeapon_Ammo][1],User[playerid][WeaponEquipped_Ammo]);
						format(wep,sizeof wep,"%d,%d,%d",User[playerid][uWeapon][0],User[playerid][uWeapon][1],User[playerid][WeaponEquipped]);
						format(query,sizeof query,"UPDATE users SET weapon = '%s',ammo = '%s' WHERE userid = %d",wep,ammo,User[playerid][UserID]);
						db_query(Database, query);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid,User[playerid][WeaponEquipped],User[playerid][WeaponEquipped_Ammo]);
						format(query,sizeof query,"fetches a %s from the corpse.",GetWeaponNameEx(User[playerid][WeaponEquipped]));
						cmd_ame(playerid,query);
					}
				}				
			}
		}
	}
	return 1;
}
Dialog:dCorpseFrisk(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		
		switch(listitem)
		{
			case 0:
			{
				foreach(Corpses, c)
				{
					if(IsPlayerInRangeOfPoint(playerid,1.2,CORPSE[c][cX],CORPSE[c][cY],CORPSE[c][cZ]))
					{
						MSG(playerid,GRAD2,"----------------------------------------------------");
						MSG(playerid,GOLD,"[Corpse's Belongings]");
						new wep[24];
						GetWeaponName(CORPSE[c][cFirstSlot], wep, sizeof wep);
						if(CORPSE[c][cFirstSlot] == 0) wep = "None";
						format(large_string,124,"Jacket Weapon Slot: %s (Ammo: %d)",wep,CORPSE[c][cFirstSlot_Ammo]);
						MSG(playerid,GRAD2,large_string);
						GetWeaponName(CORPSE[c][cSecondSlot], wep, sizeof wep);
						if(CORPSE[c][cSecondSlot] == 0) wep = "None";
						format(large_string,124,"Pocket Weapon Slot: %s (Ammo: %d)",wep,CORPSE[c][cSecondSlot_Ammo]);
						MSG(playerid,GRAD2,large_string);
						format(large_string,124,"Money: $%d",CORPSE[c][cMoney]);
						MSG(playerid,GRAD2,large_string);
						MSG(playerid,GRAD2,"----------------------------------------------------");
						cmd_bme(playerid,"has searched the corpse.");			
					}
				}
			}
			case 1: Dialog_Show(playerid,dCorpseTakeWeapon,DIALOG_STYLE_LIST,"Corpse Interaction","Jacket\nPocket","Close","");	
			case 2:
			{
				foreach(Corpses, c)
				{
					if(IsPlayerInRangeOfPoint(playerid,1.2,CORPSE[c][cX],CORPSE[c][cY],CORPSE[c][cZ]))
					{
						if(CORPSE[c][cMoney] < 1) 
						{
							MSG(playerid,GOLD,"ERROR:"GR" There is no money on this corpse.");
							break;
						}
						GiveMoney(playerid,CORPSE[c][cMoney]);
						CORPSE[c][cMoney] = 0;
						cmd_ame(playerid,"has taken money from the corpse.");
					}
				}
			}
			case 3: // Drag
			{
				if(User[playerid][dragging])  return 0;
				foreach(Corpses, c)
				{
					if(IsPlayerInRangeOfPoint(playerid,1.2,CORPSE[c][cX],CORPSE[c][cY],CORPSE[c][cZ]))
					{
						if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159)
						return Wait(playerid,"~h~You are not crouching!");
						User[playerid][dragging] = true;
						cmd_ame(playerid,"begins dragging the corpse.");
						SetTimerEx("OnCorpseDrag", 1750, false, "dd", playerid, c);	
						return 1;	
					}
				}				
			}
			case 4: // Examine
			{
				if(User[playerid][dragging])  return 0;
				foreach(Corpses, c)
				{
					if(IsPlayerInRangeOfPoint(playerid,1.2,CORPSE[c][cX],CORPSE[c][cY],CORPSE[c][cZ]))
					{
						if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159)
						return Wait(playerid,"~h~You are not crouching!");
						new cause[24];
						switch(CORPSE[c][cCOD])
						{
							case COD_GUNSHOT: cause = "Gunshot";
							case COD_OVERDOSE: cause = "Overdose";
						}
						format(large_string,sizeof large_string,"Cause of death: %s",cause);
						Dialog_Show(playerid,dCorpseFrisk,DIALOG_STYLE_MSGBOX,"Corpse Interaction",large_string,"Close","");	
					}
				}				
			}			
		}
	}
	return 1;
}
forward OnCorpseDrag(playerid, corpse);
public OnCorpseDrag(playerid, corpse)
{
	if(User[playerid][Logged])
	{
		if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159)
		{
			Wait(playerid,"~h~Dragging cancelled!");
			User[playerid][dragging] = false;
			return 1;
		}
		new Float:x,Float:y,Float:z,vw;
		vw = GetPlayerVirtualWorld(playerid);
		GetPlayerPos(playerid, x, y, z);
		SetDynamicActorPos(CORPSE[corpse][cObject], x+0.8, y, z);
		SetDynamicActorVirtualWorld(CORPSE[corpse][cObject], vw);
		CORPSE[corpse][cX] = x;
		CORPSE[corpse][cY] = y;
		CORPSE[corpse][cZ] = z;
		CORPSE[corpse][cVW] = vw;
		SetTimerEx("OnCorpseDrag", 1500, false, "dd", playerid, corpse);	
		return 1;
	}
	return 0;
}

stock CutTree(playerid, tree)
{
	if(User[playerid][Logged])
	{
		if(TREE[tree][treehealth] < 1)
		{
			MoveDynamicObject(TREE[tree][treeobject], TREE[tree][treex], TREE[tree][treey], TREE[tree][treez]-1, 0.8, 0, -80.0, 0);
			TREE[tree][treehealth] = 0;
			TREE[tree][loghealth] = 100;
			TogglePlayerControllable(playerid, 1);
			MSG(playerid, GOLD, "SERVER:"GR" You have successfully cut the tree down! Now press ~k~~PED_ANSWER_PHONE~ to start logging it.");
			DeletePVar(playerid, "Lumberjack_Cooldown");
			DeletePVar(playerid, "Lumberjack_StartCut");
			DeletePVar(playerid, "Lumberjack_Stance");
			new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid, x, y, z);
			foreach(Player, i)
				if(IsPlayerInRangeOfPoint(i, 20, x, y, z)) PlayAudioStreamForPlayer(i, "http://finalnights-rp.com/tree_fall_sound_effect.mp3");
		}
		return 1;
	}
	return 0;
}
stock LogTree(playerid, tree)
{
	if(User[playerid][Logged])
	{
		if(TREE[tree][loghealth] < 1)
		{
			MoveDynamicObject(TREE[tree][treeobject], TREE[tree][treex], TREE[tree][treey], TREE[tree][treez]-1, 0.8, 0, -80.0, 0);
			TogglePlayerControllable(playerid, 1);
			new logs = 5+random(10);
			SFM(playerid, GOLD, "SERVER:"GR" You have logged the tree successfully and obtained (%d) wooden logs.", logs);
			DeletePVar(playerid, "Lumberjack_LogTree");
			new id = FindPlayerItemFree(playerid,"Log");
			if(id == -1) return MSG(playerid, GOLD, "ERROR:"GR" You didn't receive anything because your inventory is full.");
			UpdateItem(playerid, id, 32, "Log", logs, 100, true);	
			Wait(playerid, "~W~SUCCESS!");	
			TREE[tree][t_logged] = true;
		}
		return 1;
	}
	return 0;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(HOLDING(KEY_SPRINT))
	{
		if(IsPlayerInAnyVehicle(playerid))
			return 0;
		if(User[playerid][onDrug] == 4 || User[playerid][onDrug] == 5)
		{
		    ApplyAnimation(playerid, "PED", "sprint_civi", 7.0, 1, 1, 1, 1, 1, 1);
		    User[playerid][sprinting] = true;
		}
		if(User[playerid][pinvis] == true && User[playerid][Userrace] == 1)
		{
			SetPlayerSkin(playerid, User[playerid][uSkin]);
			UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, User[playerid][pUsername]);
			MSG(playerid, GOLD, "Info"GR" Your invisiblity has been interrupted.");
			User[playerid][pinvis] = false;		
			ClearAnimations(playerid);
			KillTimer(InvisTimer[playerid]);
			DestroyHiddenTag(playerid);			
		}
	}
	if(RELEASED(KEY_SPRINT))
	{
	    if(User[playerid][sprinting])
	    {
	        ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
	        User[playerid][sprinting] = false;
	    }
	}
	if(newkeys & KEY_ACTION)
	{

 		if(GetPlayerAnimationIndex(playerid) != 1274 || GetPlayerAnimationIndex(playerid) != 1159)
		{
			//return Wait(playerid,"~h~You are not crouching!");
			foreach(Corpses, c)
			{
				if(IsPlayerInRangeOfPoint(playerid,1.2,CORPSE[c][cX],CORPSE[c][cY],CORPSE[c][cZ]))
				{
					if(User[playerid][UserID] == CORPSE[c][cUser])
					{
						MSG(playerid,GOLD,"ERROR:"GR" You cannot interact with your own corpse.");
						break;
					}
					if(User[playerid][faction] != -1)
					{
						if(F[User[playerid][faction]][ftype] == MEDICAL) 
						{
							Dialog_Show(playerid,dCorpseFrisk,DIALOG_STYLE_LIST,"Corpse Interaction","Search\nTake Weapon\nTake Money\nDrag\nExamine","Close","");
							break;
						}
					}
					Dialog_Show(playerid,dCorpseFrisk,DIALOG_STYLE_LIST,"Corpse Interaction","Search\nTake Weapon\nTake Money\nDrag","Close","");
					break;
				}
			}	
		}
		if(User[playerid][WeaponEquipped] == WEAPON_CHAINSAW)
		{
			if(User[playerid][Death] > 0) return MSG(playerid,GOLD,"ERROR:"GR" You are heavily injured.");
			if(User[playerid][tazed] == 1)	return MSG(playerid,GOLD,"ERROR:"GR" You cannot do anything while you're tazed.");
			foreach(Trees, tr)
			{
				if(IsPlayerInRangeOfPoint(playerid, 2, TREE[tr][treex], TREE[tr][treey], TREE[tr][treez]))
				{
					if(TREE[tr][treehealth] > 0)
					{
						SetPlayerLookAt(playerid, TREE[tr][treex], TREE[tr][treey]);
						TogglePlayerControllable(playerid, 0);
						MSG(playerid, GOLD, "SERVER:"GR" You have started lumbering the tree infront of you.");
						MSG(playerid, GOLD, "SERVER:"GR" Press "W"~k~~PED_FIREWEAPON~"GR" then "W"~k~~PED_LOCK_TARGET~"GR" sequentially to cut the tree down.");
						SetPVarInt(playerid, "Lumberjack_StartCut", tr); // player is lumbering
						SetPVarInt(playerid, "Lumberjack_Stance", 1); // 1 is LEFT CLICK, 2 IS RIGHT CLICK
						new Float:x,Float:y,Float:z;
						GetPlayerPos(playerid, x, y, z);
						foreach(Player, i) if(IsPlayerInRangeOfPoint(i, 20, x, y, z)) PlayAudioStreamForPlayer(i, "http://finalnights-rp.com/chainsaw_sound_effect.mp3");
						break;
					}
					else
					{
						new logtree = GetPVarInt(playerid, "Lumberjack_LogTree");
						if(TREE[tr][t_logged] == true) return MSG(playerid, GOLD, "ERROR:"GR" This tree is logged. It will respawn in (15) minutes.");
						if(logtree == 0)
						{
							SetPlayerLookAt(playerid, TREE[tr][treex], TREE[tr][treey]);
							MSG(playerid, GOLD, "SERVER:"GR" You have started logging the tree infront of you. Press "W"~k~~PED_ANSWER_PHONE~"GR" repeatedly to log it finish.");
							SetPVarInt(playerid, "Lumberjack_LogTree", tr); // player is lumbering
							new Float:x,Float:y,Float:z;
							GetPlayerPos(playerid, x, y, z);
							foreach(Player, i) if(IsPlayerInRangeOfPoint(i, 20, x, y, z)) PlayAudioStreamForPlayer(i, "http://finalnights-rp.com/chainsaw_sound_effect.mp3");
						}
						else
						{
							if(GetPVarInt(playerid, "Lumberjack_Cooldown") > gettime()) return 1;
							ApplyAnimation(playerid, "CHAINSAW", "CSAW_G", 4.1, 0, 1, 1, 1, -1, 1);
							TREE[logtree][loghealth] -= 7;
							SetPVarInt(playerid, "Lumberjack_Cooldown", gettime()+1);	
							Wait(playerid, "~g~LOGGING....");			
							LogTree(playerid, logtree);

						}					
					}
				}
			}
		}			
	}
	if(newkeys & KEY_FIRE)
	{
		if(GetPVarInt(playerid, "Lumberjack_StartCut") > 0)
		{
			if(User[playerid][WeaponEquipped] == WEAPON_CHAINSAW)
			{
				if(GetPVarInt(playerid, "Lumberjack_Cooldown") > gettime()) return 1;
				new stance = GetPVarInt(playerid, "Lumberjack_Stance");
				if(stance == 2)
				{
					Wait(playerid, "~w~PRESS ~R~~k~~PED_LOCK_TARGET~");
					return 1;
				}
				SetPVarInt(playerid, "Lumberjack_Stance", 2);
				ApplyAnimation(playerid, "CHAINSAW", "CSAW_1", 4.1, 0, 1, 1, 1, -1, 1);
				new tree = GetPVarInt(playerid, "Lumberjack_StartCut");
				TREE[tree][treehealth] -= 7;
				SetPVarInt(playerid, "Lumberjack_Cooldown", gettime()+1);
				CutTree(playerid, tree);
			}
		}
	}
	if(newkeys & KEY_HANDBRAKE)
	{
		if(GetPVarInt(playerid, "Lumberjack_StartCut") > 0)
		{
			if(User[playerid][WeaponEquipped] == WEAPON_CHAINSAW)
			{
				if(GetPVarInt(playerid, "Lumberjack_Cooldown") > gettime()) return 1;//MSG(playerid, GOLD,"SERVER:"GR" There is a one second cooldown between each slash.");
				new stance = GetPVarInt(playerid, "Lumberjack_Stance");
				if(stance == 1)
				{
					Wait(playerid, "~w~PRESS ~R~~k~~PED_FIREWEAPON~");
					return 1;
				}
				SetPVarInt(playerid, "Lumberjack_Stance", 1);
				ApplyAnimation(playerid, "CHAINSAW", "CSAW_2", 4.1, 0, 1, 1, 1, -1, 1);
				SetPVarInt(playerid, "Lumberjack_Cooldown", gettime()+1);
				new tree = GetPVarInt(playerid, "Lumberjack_StartCut");
				TREE[tree][treehealth] -= 7;
				CutTree(playerid, tree);
			}
		}
	}
	if(newkeys & KEY_NO)
	{
		new car = GetPlayerVehicleID(playerid);
		//new owner = V[car][cowner];
		if(car > 0)
		{
		    /*if(owner != User[playerid][UserID])
		    {
		        return MSG(playerid,GOLD,"ERROR:"GR" You do not have keys to this vehicles.");
		    }
		    new query[50];
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == VEHICLE_PARAMS_ON)
			{
				SetVehicleParamsEx(car, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
				format(query,sizeof query,"turns the %s's engine off.",GetVehicleName(GetVehicleModel(car)));
				cmd_ame(playerid,query);
			}
			else
			{
			    SetVehicleParamsEx(car, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
				format(query,sizeof query,"turns the %s's engine on.",GetVehicleName(GetVehicleModel(car)));
				cmd_ame(playerid,query);
			}*/
			cmd_v(playerid,"engine");
		}
		else
		{
			if(User[playerid][Death] > 0)
			    return Wait(playerid,"~y~SERVER:~w~ You are heavily injured.");
 			if(GetPlayerAnimationIndex(playerid) != 1274 && GetPlayerAnimationIndex(playerid) != 1159)
				return Wait(playerid,"~h~You are not crouching!");
		    if(gettime() < User[playerid][JustUsed])
		        return Wait(playerid,WAIT_MESSAGE);
            User[playerid][JustUsed] = gettime()+2;
			foreach(Weapons,i)
		    {
		        if(IsPlayerInRangeOfPoint(playerid,1.5,DW[i][dX],DW[i][dY],DW[i][dZ]))
		        {
					if(User[playerid][WeaponEquipped] != 0)
					    return MSG(playerid,GOLD,"ERROR:"GR" You have a weapon equipped.");
					User[playerid][WeaponEquipped] = DW[i][dWeapon];
					User[playerid][WeaponEquipped_Ammo] = DW[i][dAmmo];

					new query[124];
					new wep[24];
					new ammo[24];

					format(query,sizeof query,"DELETE FROM weapons WHERE weaponid = %i",DW[i][dID]);
					db_query(Database, query);

					format(ammo,sizeof ammo,"%d,%d,%d",User[playerid][uWeapon_Ammo][0],User[playerid][uWeapon_Ammo][1],User[playerid][WeaponEquipped_Ammo]);
					format(wep,sizeof wep,"%d,%d,%d",User[playerid][uWeapon][0],User[playerid][uWeapon][1],User[playerid][WeaponEquipped]);
					format(query,sizeof query,"UPDATE users SET weapon = '%s',ammo = '%s' WHERE userid = %d",wep,ammo,User[playerid][UserID]);
					db_query(Database, query);
					DestroyDynamicObject(DW[i][dWeaponObject]);

					ResetPlayerWeapons(playerid);
					if(User[playerid][WeaponEquipped] == WEAPON_HUNTING_RIFLE) 
						GivePlayerWeapon(playerid,33,User[playerid][WeaponEquipped_Ammo]);
					else GivePlayerWeapon(playerid,User[playerid][WeaponEquipped],User[playerid][WeaponEquipped_Ammo]);

					new tmp[WEAPON_DATA];
    				DW[i] = tmp;
                    Iter_Remove(Weapons,i);
					//GetWeaponName(User[playerid][WeaponEquipped],wep,sizeof wep);
					format(query,sizeof query,"picks up a %s.",GetWeaponNameEx(User[playerid][WeaponEquipped]));
					cmd_ame(playerid,query);
					break;

		        }
		    }
		}
		return 1;
	}
    if (newkeys & KEY_SECONDARY_ATTACK)
    {
        if(gettime() < User[playerid][JustUsed])
            return 1;//Wait(playerid,WAIT_MESSAGE);
        User[playerid][JustUsed] = gettime()+1;
		if(GetPVarInt(playerid, "HouseMenu") == 1 && User[playerid][tazed] == 0 && User[playerid][Death] > 0)
			TogglePlayerControllable(playerid, 1),SetPVarInt(playerid, "HouseMenu", 0);

  		foreach(Props,i)
		{
		    if(IsPlayerInRangeOfPoint(playerid,1,P[i][px],P[i][py],P[i][pz]))
		    {
				if(P[i][pxi] == 0.0000)
				{
				    MSG(playerid,GOLD,"ERROR:"GR" This property has no interior, please contact an administrator to fix it.");
				    break;
				}
				if(P[i][pfac] != -1 && User[playerid][faction] != P[i][pfac])	
					return MSG(playerid, GOLD, "ERROR:"GR" You have no access to this entrance.");

				SetPlayerInterior(playerid,P[i][pinti]);
				SetPlayerVirtualWorld(playerid,P[i][pvwi]);
				SetPlayerPos(playerid,P[i][pxi],P[i][pyi],P[i][pzi]);
				User[playerid][pvw] = P[i][pvwi];
				User[playerid][PropIN] = i;
				if(P[i][druglab]) User[playerid][gVar] = 100000000+i;
				PlayerEnterInterior(playerid);
				break;
		    }
		    else if(IsPlayerInRangeOfPoint(playerid,2,P[i][pxi],P[i][pyi],P[i][pzi]) && GetPlayerVirtualWorld(playerid) == P[i][pvwi])
		    {
				User[playerid][PropIN] = -1;
				SetPlayerInterior(playerid,P[i][pint]);
				SetPlayerVirtualWorld(playerid,P[i][pvw]);
				SetPlayerPos(playerid,P[i][px],P[i][py],P[i][pz]);
				User[playerid][pvw] = P[i][pvw];
				User[playerid][pint] = P[i][pint];
				if(User[playerid][gVar] == 100000000+i)
					User[playerid][gVar] = 0;
				PlayerEnterInterior(playerid);
				break;
		    }
		}
		foreach(Biz,i)
		{
		    if(IsPlayerInRangeOfPoint(playerid,1,B[i][bx],B[i][by],B[i][bz]))
		    {
				if(B[i][bxi] == 0.0000)
				{
				    MSG(playerid,GOLD,"ERROR:"GR" This business has no interior, please contact an administrator to fix it.");
				    break;
				}
				SetPlayerInterior(playerid,B[i][binti]);
				SetPlayerVirtualWorld(playerid,B[i][bvwi]);
				SetPlayerPos(playerid,B[i][bxi],B[i][byi],B[i][bzi]);
				User[playerid][BusinessIN] = i;
				User[playerid][BusinessINType] = B[i][btype];
				User[playerid][pvw] = B[i][bvwi];
				PlayerEnterInterior(playerid);
				break;
		    }
		    else if(IsPlayerInRangeOfPoint(playerid,2,B[i][bxi],B[i][byi],B[i][bzi]) && GetPlayerVirtualWorld(playerid) == B[i][bvwi])
		    {
				SetPlayerInterior(playerid,B[i][bint]);
				SetPlayerVirtualWorld(playerid,B[i][bvw]);
				SetPlayerPos(playerid,B[i][bx],B[i][by],B[i][bz]);
				User[playerid][BusinessIN] = -1;
				User[playerid][BusinessINType] = 0;
				User[playerid][pvw] = B[i][bvw];
				User[playerid][pint] = B[i][bint];
				PlayerEnterInterior(playerid);
				break;
		    }
		}
		foreach(Houses,i)
		{
		    if(IsPlayerInRangeOfPoint(playerid,1,H[i][hx],H[i][hy],H[i][hz]) || IsPlayerInRangeOfPoint(playerid,5,H[i][hx],H[i][hy],H[i][hz]-10))
		    {
		        if(H[i][hlock] == 1)
					return Wait(playerid,"The door is locked!");//return MSG(playerid,GRAD2,"Info: The door is locked!");
				if(H[i][hxi] == 0.0000)
				{
				    MSG(playerid,GOLD,"ERROR:"GR" This house has no interior, please contact an administrator to fix it.");
				    break;
				}
				SetPlayerInterior(playerid,H[i][hinti]);
				SetPlayerVirtualWorld(playerid,H[i][hvwi]);
				SetPlayerPos(playerid,H[i][hxi],H[i][hyi],H[i][hzi]);
				PlayerEnterInterior(playerid);
				User[playerid][HouseIN] = i;
				User[playerid][pvw] = H[i][hvwi];
				if(H[i][hlights] == true)
					TextDrawShowForPlayer(playerid,LightsOff);
				if(H[i][howner] == User[playerid][UserID])
				{
					new query[124];
					format(query,sizeof query,"SELECT by FROM mail WHERE id = %d AND read = 0",User[playerid][HouseIN]);
					new DBResult:Result = db_query(Database, query);
					new rows = db_num_rows(Result);
					if(rows)
					{
						format(query,sizeof query,"*** You have %d unread letters in your mailbox. Open your mailbox (/house > Mailbox) to see them.",rows);
						MSG(playerid,WHITE,query);
					}
					db_free_result(Result);
				}
				break;
		    }
		    else if(IsPlayerInRangeOfPoint(playerid,2,H[i][hxi],H[i][hyi],H[i][hzi]) && GetPlayerVirtualWorld(playerid) == H[i][hvwi])
		    {
				if(H[i][hlock] == 1)
					return Wait(playerid,"The door is locked!");
				SetPlayerInterior(playerid,H[i][hint]);
				SetPlayerVirtualWorld(playerid,H[i][hvw]);
				SetPlayerPos(playerid,H[i][hx],H[i][hy],H[i][hz]);
				User[playerid][HouseIN] = -1;
				User[playerid][pvw] = H[i][hvw];
				User[playerid][pint] = H[i][hint];
				PlayerEnterInterior(playerid);
 				if(H[i][hlights] == true)
					TextDrawHideForPlayer(playerid,LightsOff);
				break;
		    }
		    
		}
		//SFM(playerid,-1,"House in: %d",User[playerid][HouseIN]);
		return 1;
    }
    if(newkeys & KEY_YES)
    {
        if(gettime() < User[playerid][JustUsed])
            return 1;//Wait(playerid,WAIT_MESSAGE);
        new which[9];
		switch(User[playerid][WeaponBind])
		{
		    case 1: which = "jacket";
		    case 2: which = "pocket";
		}
		if(User[playerid][WeaponEquipped] == 0)
		{
			cmd_weapondraw(playerid,which);
		}
		else
		{
			cmd_weaponstore(playerid,which);
		}
        ApplyReloadAnimation(playerid,User[playerid][WeaponEquipped]);
        User[playerid][JustUsed] = gettime()+1;
    }
    if(newkeys & KEY_CTRL_BACK)
    {
		cmd_door(playerid,"");
    }
    if(newkeys & KEY_JUMP)
    {
		if(User[playerid][makefly] == true || User[playerid][shapeshift] == 6 || GetPVarInt(playerid, "pDemon_Shifted") == 2)
		{
			new k, ud,lr;
			GetPlayerKeys(playerid,k,ud,lr);
			new Float:v_x,Float:v_y,Float:v_z,
					Float:x,Float:y,Float:z;
			if(ud < 0)      // forward
			{
				GetPlayerCameraFrontVector(playerid,x,y,z);
				v_x = x;
				v_y = y;
				v_z = z+2.0;
			}
			if(k & 128)     // down
					v_z = -0.2;
			else if(k & KEY_FIRE)   // up
					v_z = 0.2;
			if(k & KEY_WALK)        // slow
			{
					v_x /=5.0;
					v_y /=5.0;
					v_z /=5.0;
			}
			if(v_z == 0.0)
					v_z = 0.025;
			if(v_x == 0)
				SetPlayerVelocity(playerid,v_x,v_y,v_z+2.0);
			else SetPlayerVelocity(playerid,v_x,v_y,v_z);
			ApplyAnimation(playerid,"PARACHUTE","PARA_Land_Water",4.1,0,1,1,0,0,1);
			new Float:lookx,Float:looky,Float:lookz,
				Float:camerax,Float:cameray,Float:cameraz;
			GetPlayerCameraFrontVector(playerid, lookx, looky, lookz);
			GetPlayerCameraPos(playerid,camerax,cameray,cameraz);
			SetPlayerLookAt(playerid,lookx*500.0+camerax,looky*500.0+cameray);
		}
	}
	return 1;
}
stock SetPlayerLookAt(playerid, Float:x, Float:y)
{
	new Float:Px, Float:Py, Float: Pa;
	GetPlayerPos(playerid, Px, Py, Pa);
	Pa = floatabs(atan((y-Py)/(x-Px)));
	if (x <= Px && y >= Py) Pa = floatsub(180, Pa);
	else if (x < Px && y < Py) Pa = floatadd(Pa, 180);
	else if (x >= Px && y <= Py) Pa = floatsub(360.0, Pa);
	Pa = floatsub(Pa, 90.0);
	if (Pa >= 360.0) Pa = floatsub(Pa, 360.0);
	SetPlayerFacingAngle(playerid, Pa);
}
stock Wait(playerid,text[],time = 1000,type = 4)
{
	if(!IsPlayerConnected(playerid))
	    return 0;
    /*if(User[playerid][WaitShown] == true)
        return 0;
	TextDrawSetString(warning,text);
	TextDrawShowForPlayer(playerid,warning);
	SetTimerEx("HideWaiting",time,0,"d",playerid);*/
	GameTextForPlayer(playerid,text,time,type);
	User[playerid][WaitShown] = true;
	return 1;
}

public HideWaiting(playerid)
{
	if(!IsPlayerConnected(playerid))
	    return 0;
	TextDrawHideForPlayer(playerid,warning);
	User[playerid][WaitShown] = false;
	return 1;
}
stock ApplyReloadAnimation(playerid,weaponid)
{
	switch(weaponid)
	{
		case 22: { ApplyAnimation(playerid, "COLT45", "colt45_reload", 3.1, 0, 1, 1, 0, 0, 1); }//9mm Pistol
		case 23: { ApplyAnimation(playerid, "SILENCED", "Silence_reload", 3.1, 0, 1, 1, 0, 0, 1); }//Silenced Pistol And Taser
		case 24: { ApplyAnimation(playerid, "PYTHON", "python_reload", 3.1, 0, 1, 1, 0, 0, 1); }//Desert Eagle
		case 25,26: { ApplyAnimation(playerid, "BUDDY", "buddy_reload", 3.1, 0, 1, 1, 0, 0, 1); }//Shotgun
		case 27: { ApplyAnimation(playerid, "BUDDY", "buddy_reload", 3.1, 0, 1, 1, 0, 0, 1); }//Spas
		case 28: { ApplyAnimation(playerid, "UZI", "UZI_reload", 3.1, 0, 1, 1, 0, 0, 1); }//Mac10
		case 29: { ApplyAnimation(playerid, "RIFLE", "RIFLE_load", 3.1, 0, 1, 1, 0, 0, 1); }//MP5
		case 30: { ApplyAnimation(playerid, "RIFLE", "RIFLE_load", 3.1, 0, 1, 1, 0, 0, 1); }//AK-47
		case 31: { ApplyAnimation(playerid, "RIFLE", "RIFLE_load", 3.1, 0, 1, 1, 0, 0, 1); }//M4
		case 32: { ApplyAnimation(playerid, "TEC", "TEC_reload", 3.1, 0, 1, 1, 0, 0, 1); }//TEC9
		case 33: { ApplyAnimation(playerid, "RIFLE", "RIFLE_load", 3.1, 0, 1, 1, 0, 0, 1); }//Country Rifle
		case 34: { ApplyAnimation(playerid, "RIFLE", "RIFLE_load", 3.1, 0, 1, 1, 0, 0, 1); }//Sniper Rifle
		case 35: { ApplyAnimation(playerid, "PYTHON", "python_reload", 3.1, 0, 1, 1, 0, 0, 1); }//Rocket Launcher
		case 37,38: { ApplyAnimation(playerid, "PYTHON", "python_reload", 3.1, 0, 1, 1, 0, 0, 1); }//Flame Thrower
		case 43: { ApplyAnimation(playerid, "COLT45", "colt45_reload", 3.1, 0, 1, 1, 0, 0, 1); }//Camera
		default: { return 1; }
	}
	return 1;
}
CMD:wd(playerid,params[]) return cmd_weapondraw(playerid,params);
CMD:ws(playerid,params[]) return cmd_weaponstore(playerid,params);
CMD:bw(playerid,params[]) return cmd_bindweapon(playerid,params);
CMD:spawnwep(playerid,params[])
{
	if(User[playerid][Useradmin] > 4)
	{
	    new id,wep,ammo;
	    if(sscanf(params,"udd",id,wep,ammo)) return MSG(playerid,GOLD,"SYNTAX: /spawnwep [playerid/PartOfName] [weaponid] [ammo]");
	    if(!User[id][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player.");
		User[id][WeaponEquipped] = wep;
		User[id][WeaponEquipped_Ammo] = ammo;
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:tw(playerid,params[])
{
    if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	new r = random(30);
	GivePlayerWeapon(playerid,strval(params),r);
	User[playerid][WeaponEquipped] = strval(params);
	User[playerid][WeaponEquipped_Ammo] += r;
	return 1;
}
CMD:hackwep(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	GivePlayerWeapon(playerid,strval(params),1+random(15));
	//User[playerid][WeaponEquipped] = strval(params);
	return 1;
}
stock GetWeaponSlot(weaponid)
{
	switch(weaponid)
	{
		case 1,2,3,5,6,7,15: { return 1; }
		case 4,8: { return 8; }
		case 9: { return 9; }
	    case 22,23,24,47: { return 2; }//9mm Pistol, Silenced Pistol, Desert Eagle, Taser
		case 25,27: { return 3; }//Shotgun, SPAS12
		case 28,29,32: { return 4; }//Mac10, MP5, Tec9
		case 30,31: { return 5; }//AK47, M4
		case 33,34,49, WEAPON_HUNTING_RIFLE: { return 6; }//Country Rifle, Sniper Rifle, Hunting Rifle
		case 35,37: { return 7; }//Rocket Launcher, Flamethrower
		case 80: { return 10; }//Kevlar
		case 81,87,86: { return 11; }//Screwdriver, Wire Cutter
		case 41,43: { return 9; }//Camera, Spray Can
		default: { return 0; }
	}
	return 0;
}
stock IsBigWeapon(weaponid)
{
	switch (weaponid)
	{
	    case 2,3,5,6,7,8,9,15,25,26,27,29,30,31,33,34,35,36,37,38,46, WEAPON_HUNTING_RIFLE: return 1;
	}
	return 0;
}
stock CantStay(weaponid)
{
	switch(weaponid)
	{
 		case 16,17,18,39: return 1;
	}
	return 0;
}
CMD:rg(playerid,params[]) return cmd_radargun(playerid,params);
CMD:radargun(playerid,params[])
{
	if(User[playerid][Logged])
	{
 		if(gettime() < User[playerid][JustUsed])
   			return MSG(playerid,GOLD,"Info:"GR" The Radar Speedgun is still loading!");
	    if(User[playerid][WeaponEquipped] == WEAPON_RADAR)
	    {
			Wait(playerid,"~G~SCANNING...");
			MSG(playerid,GREEN,"RADAR DETECTIONS:");
			for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++)
			{
				if(i == GetPlayerVehicleID(playerid)) continue;
				new Float:x,Float:y,Float:z;
				GetVehiclePos(i,x,y,z);
				new Float:speed = GetVehicleSpeed(i);
				if(speed < 1) continue;
				if(IsPlayerInRangeOfPoint(playerid,40,x,y,z))
				    SFM(playerid,GRAD4,"*** %s | Speed (MPH): %d",GetVehicleName(GetVehicleModel(i)),floatround(speed),floatround(GetVehicleSpeed(i,0)));
			}
	    }
	    else return 0;
	    User[playerid][JustUsed] = gettime()+2;
	}
	else return 0;
	return 1;
}
CMD:weapondraw(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	/*
	uWeapon[2],
	uWeapon_Ammo[2],
	WeaponEquipped,
	WeaponBind
	*/
	if(User[playerid][shapeshift] > 1) return MSG(playerid, GOLD, "ERROR:"GR" You cannot use this feature while shapeshifted.");
	printf("User[playerid][Bound][0]: %d;User[playerid][Bound][1]: %d; User[playerid][Bound][2]: %d\nUser[playerid][BoundID][0]: %d; User[playerid][BoundID][1]: %d; User[playerid][BoundID][2]: %d"
	,User[playerid][Bound][0],User[playerid][Bound][1],User[playerid][Bound][2],User[playerid][BoundID][0],User[playerid][BoundID][1],User[playerid][BoundID][2]);
	if(User[playerid][Death] > 0) return MSG(playerid,GOLD,"ERROR:"GR" You are heavily injured.");
 	if(User[playerid][tazed] == 1)
 		return MSG(playerid,GOLD,"ERROR:"GR" You cannot do anything while you're tazed.");
	if(isnull(params))
		return MSG(playerid,GOLD,"SYNTAX:"GR" /(w)eapon(d)raw [jacket/pocket]");
	new arrayid;
	if(!strcmp(params,"jacket",true))
	    arrayid = 0;
	else if(!strcmp(params,"pocket",true))
		arrayid = 1;
	if(User[playerid][WeaponEquipped] != 0)
	    return MSG(playerid,GOLD,"ERROR:"GR" You are wielding a weapon.");
	if(User[playerid][uWeapon][arrayid] == 0)
	   return MSG(playerid,GOLD,"ERROR:"GR" Specified weapon slot is empty.");
	if(User[playerid][animation]) return MSG(playerid,GOLD,"ERROR:"GR" You cannot use this feature right now.");
	if(User[playerid][uWeapon][arrayid] == WEAPON_LAUNCHER)
	{
		new donatr;
		if(!isnull(User[playerid][donator])) donatr = 3;
		for(new i = MAX_ATTACHMENTS+donatr; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
		{
	 		if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
			{
				SFM(playerid,RED,"i: %d",i);
	 			SetPlayerAttachedObject(playerid,i,-2001,6,0.000000,0.002000,0.000000,0.000000,0.000000,0.000000,1.064000,1.442000,1.000000); // nade launcher
	 			SetPVarInt(playerid,"RadarIndex",i);
	 			if(User[playerid][uWeapon_Ammo][arrayid] != 0) GivePlayerWeapon(playerid,24,User[playerid][uWeapon_Ammo][arrayid]-(User[playerid][uWeapon_Ammo][arrayid]-1));
	 			break;
			}
		}
	}
	if(User[playerid][uWeapon][arrayid] == WEAPON_RADAR)
	{
		new donatr;
		if(!isnull(User[playerid][donator])) donatr = 3;
		for(new i = MAX_ATTACHMENTS+donatr; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
		{
	 		if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
			{
			    SFM(playerid,RED,"i: %d",i);
	 			SetPlayerAttachedObject(playerid,i,367,6,0.044999,-0.032000,-0.005999,0.000000,-10.699998,10.300001,1.000000,1.000000,1.000000,-15291148); // radar
	 			SetPVarInt(playerid,"RadarIndex",i);
	 			break;
			}
		}
	}
	else GivePlayerWeapon(playerid,User[playerid][uWeapon][arrayid],User[playerid][uWeapon_Ammo][arrayid]);
	User[playerid][WeaponEquipped] = User[playerid][uWeapon][arrayid];
	User[playerid][WeaponEquipped_Ammo] = User[playerid][uWeapon_Ammo][arrayid];
 	switch(arrayid)
	{
	    case 0:
		{
		    if(User[playerid][Bound][1] > 0)
		    {
				User[playerid][Bound][0] = User[playerid][WeaponEquipped];
				User[playerid][BoundID][0] = User[playerid][BoundID][1];
				User[playerid][Bound][1] = 0;
				User[playerid][BoundID][1] = 0;
			}
		}
	    case 1:
		{
		    if(User[playerid][Bound][2] > 0)
		    {
				User[playerid][Bound][0] = User[playerid][WeaponEquipped];
				User[playerid][BoundID][0] = User[playerid][BoundID][2];
				User[playerid][Bound][2] = 0;
				User[playerid][BoundID][2] = 0;
			}

		}
	}
	printf("User[playerid][Bound][0]: %d;User[playerid][Bound][1]: %d; User[playerid][Bound][2]: %d\nUser[playerid][BoundID][0]: %d; User[playerid][BoundID][1]: %d; User[playerid][BoundID][2]: %d"
	,User[playerid][Bound][0],User[playerid][Bound][1],User[playerid][Bound][2],User[playerid][BoundID][0],User[playerid][BoundID][1],User[playerid][BoundID][2]);
	User[playerid][uWeapon][arrayid] = 0;
	new backup = User[playerid][uWeapon_Ammo][arrayid];
	User[playerid][uWeapon_Ammo][arrayid] = 0;


	new wep[24],
		strt[15],
		query[120];

	//GetWeaponName(User[playerid][WeaponEquipped],wep,sizeof wep);
	format(query,sizeof query,"draws their %s.",GetWeaponNameEx(User[playerid][WeaponEquipped]));
	cmd_bme(playerid,query);
	//PlayerActionMessageBubble(playerid,query);
    format(wep,sizeof wep,"%d,%d,%d",User[playerid][uWeapon_Ammo][0],User[playerid][uWeapon_Ammo][1],backup);
	format(strt,sizeof strt,"%d,%d,%d",User[playerid][uWeapon][0],User[playerid][uWeapon][1],User[playerid][WeaponEquipped]);

	format(query,sizeof query,"UPDATE users SET weapon = '%s',ammo = '%s' WHERE userid = %d",wep,strt,User[playerid][UserID]);
	db_query(Database, query);

	//format(query,sizeof query,"UPDATE users SET ammo = '%s' WHERE userid = %d",wep,User[playerid][UserID]);
	//db_query(Database, query);

	return 1;
}
CMD:weaponstore(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;

    if(User[playerid][Death] > 0) MSG(playerid,GOLD,"ERROR:"GR" You are heavily injured.");
	if(User[playerid][shapeshift] > 1) return MSG(playerid, GOLD, "ERROR:"GR" You cannot use this feature while shapeshifted.");
    if(User[playerid][animation]) return MSG(playerid,GOLD,"ERROR:"GR" You cannot use this feature right now.");
 	if(User[playerid][tazed] == 1)
 		return MSG(playerid,GOLD,"ERROR:"GR" You cannot do anything while you're tazed.");
	if(isnull(params))
		return MSG(playerid,GOLD,"SYNTAX:"GR" /(w)eapon(s)tore [jacket/pocket]");
	new arrayid;
	if(!strcmp(params,"jacket",true))
	{
	 	arrayid = 0;
 		//User[playerid][Bound][1] = User[playerid][WeaponEquipped];
	}
 	else if(!strcmp(params,"pocket",true))
 	{
 		//User[playerid][Bound][2] = User[playerid][WeaponEquipped];
		arrayid = 1;
	}

	if(User[playerid][WeaponEquipped] == 0)
	    return MSG(playerid,GOLD,"ERROR:"GR" You are not wielding a weapon.");

	if(User[playerid][uWeapon][arrayid] > 0)
	    return MSG(playerid,GOLD,"ERROR:"GR" Specified slot is not empty.");

	if(IsBigWeapon(User[playerid][WeaponEquipped]))
	{
	    return MSG(playerid,GOLD,"ERROR:"GR" You cannot holster this weapon.");
	}

 	switch(arrayid)
	{
	    case 0:
		{
		    if(User[playerid][Bound][0] > 0)
		    {
				User[playerid][Bound][1] = User[playerid][WeaponEquipped];
				User[playerid][BoundID][1] = User[playerid][BoundID][0];
			}
		}
	    case 1:
		{
		    if(User[playerid][Bound][0] > 0)
		    {
				User[playerid][Bound][2] = User[playerid][WeaponEquipped];
				User[playerid][BoundID][2] = User[playerid][BoundID][0];
			}
		}
	}
	printf("User[playerid][Bound][0]: %d;User[playerid][Bound][1]: %d; User[playerid][Bound][2]: %d\nUser[playerid][BoundID][0]: %d; User[playerid][BoundID][1]: %d; User[playerid][BoundID][2]: %d"
	,User[playerid][Bound][0],User[playerid][Bound][1],User[playerid][Bound][2],User[playerid][BoundID][0],User[playerid][BoundID][1],User[playerid][BoundID][2]);
	new wep[24];
	User[playerid][uWeapon][arrayid] = User[playerid][WeaponEquipped];
	GetPlayerWeaponData(playerid,GetWeaponSlot(User[playerid][WeaponEquipped]),wep[0],wep[1]);
	new query[125];
	if(User[playerid][WeaponEquipped] == WEAPON_SPRAYCAN)
		GetPlayerWeaponData(playerid, GetWeaponSlot(WEAPON_SPRAYCAN), query[0], User[playerid][WeaponEquipped_Ammo]);
	User[playerid][uWeapon_Ammo][arrayid] = User[playerid][WeaponEquipped_Ammo]; // used to store wep[1]
    ResetPlayerWeapons(playerid);
	format(query,sizeof query,"holsters their %s.",GetWeaponNameEx(User[playerid][WeaponEquipped]));
	//PlayerActionMessageBubble(playerid, query);
	cmd_bme(playerid,query);
	print(query);
	if(User[playerid][WeaponEquipped] >= 100)
	{
		RemovePlayerAttachedObject(playerid,GetPVarInt(playerid,"RadarIndex"));
		SFM(playerid,RED,"i: %d",GetPVarInt(playerid,"RadarIndex"));
		DeletePVar(playerid,"RadarIndex");
	}
	User[playerid][WeaponEquipped] = 0;
	User[playerid][WeaponEquipped_Ammo] = 0;
	User[playerid][Bound][0] = 0;
	User[playerid][BoundID][0] = 0;

	new str[15],strt[15];
	// -...
	format(wep,sizeof wep,"%d,%d,%d",User[playerid][uWeapon][0],User[playerid][uWeapon][1],User[playerid][WeaponEquipped]);
	format(str,sizeof str,"%d,%d,%d",User[playerid][Bound][0],User[playerid][Bound][1],User[playerid][Bound][2]);
	format(strt,sizeof strt,"%d,%d,0",User[playerid][uWeapon_Ammo][0],User[playerid][uWeapon_Ammo][1]);

	format(query,sizeof query,"UPDATE users SET weapon = '%s',bound = '%s',ammo = '%s' WHERE userid = %d",wep,str,strt,User[playerid][UserID]);
	db_query(Database, query);
	// send one query instead of two
	//format(query,sizeof query,"UPDATE users SET ammo = '%s' WHERE userid = %d",wep,User[playerid][UserID]);
	//db_query(Database, query);
	return 1;
}
CMD:bindweapon(playerid,params[])
{
    if(!User[playerid][Logged]) return 0;
	if(isnull(params))
		return MSG(playerid,GOLD,"SYNTAX:"GR" /bindweapon [jacket/pocket]");
	new arrayid;
	new bool:msg = true;
	if(!strcmp(params,"jacket",false)) arrayid = 1, msg = false;
	else if(!strcmp(params,"pocket",false)) arrayid = 2, msg = false;
	if(msg) return MSG(playerid,GOLD,"ERROR:"GR" Invalid option.");
	if(User[playerid][WeaponBind] == arrayid)
	    return MSG(playerid,GOLD,"ERROR:"GR" Specified slot is already bound.");
	User[playerid][WeaponBind] = arrayid;
	SFM(playerid,GREEN,"Info:"GR" You have binded the %s weapon slot. Now you can press ~k~~CONVERSATION_YES~ to instantly holster/draw it.",params);
	new query[100];
	format(query,sizeof query,"UPDATE users SET weaponbind = %d WHERE userid = %d",arrayid,User[playerid][UserID]);
	db_query(Database, query);
	return 1;
}

stock LoadWeapons()
{
	new field[40];
    new DBResult:Result = db_query(Database, "SELECT * FROM weapons");
	new id = 1;
	do
	{
	    if(db_num_rows(Result))
	    {
	        DW[id][dID] = db_get_field_assoc_int(Result,"weaponid");
	        DW[id][dTime] = db_get_field_assoc_int(Result,"time");
         	db_get_field_assoc(Result, "x",field, 40);
         	DW[id][dX] = floatstr(field);
         	db_get_field_assoc(Result, "y",field, 40);
         	DW[id][dY] = floatstr(field);
         	db_get_field_assoc(Result, "z",field, 40);
         	DW[id][dZ] = floatstr(field);
	        DW[id][dWeapon] = db_get_field_assoc_int(Result,"weapon");
	        DW[id][dAmmo] = db_get_field_assoc_int(Result,"ammo");
	        DW[id][dVW] = db_get_field_assoc_int(Result,"vw");
	        DW[id][dInterior] = db_get_field_assoc_int(Result,"interior");
	        DW[id][dWeaponObject] = CreateDynamicObject(GetWeaponModel(DW[id][dWeapon]),DW[id][dX],DW[id][dY],DW[id][dZ]-1,80,0,0,DW[id][dVW],DW[id][dInterior],-1,-1,20);
	        printf("ID: %d X %f Y %f Z %f weapon %d Ammo %d VW %d Interior %d dWeaponObject %d TIME %d",DW[id][dID],DW[id][dX],DW[id][dY],DW[id][dZ],DW[id][dWeapon],DW[id][dAmmo],
	        DW[id][dVW],DW[id][dInterior],DW[id][dWeaponObject],DW[id][dTime]);
	        Iter_Add(Weapons,id);
	    }
	    else
			break;
	    id++;
	}
	while(db_next_row(Result));
	db_free_result(Result);
}
stock GetWeaponModel(weaponid)
{
        switch(weaponid)
        {
            case 1:
                return 331;

                case 2..8:
                    return weaponid+331;

        case 9:
                    return 341;

                case 10..15:
                        return weaponid+311;

                case 16..18:
                    return weaponid+326;

                case 22..29:
                    return weaponid+324;

                case 30,31:
                    return weaponid+325;

                case 32:
                    return 372;

                case 33..45:
                    return weaponid+324;

                case 46:
                    return 371;
				case WEAPON_HUNTING_RIFLE: return 357;
        }
        return 0;
}
CMD:passammo(playerid,params[])
{
	if(!User[playerid][Logged])
		return 0;
	if(User[playerid][JustUsed] > gettime()) return Wait(playerid,WAIT_MESSAGE);
	if(User[playerid][WeaponEquipped] == 0)
		return MSG(playerid,GOLD,"ERROR:"GR" You must equip your weapon first.");
    new id,ammo;
	if(sscanf(params,"ud",id,ammo))
	    return MSG(playerid,GOLD,"SYNTAX:"GR" /passammo [playerid/PartOfName] [ammo]");
	if(id == playerid)
	    return MSG(playerid,GOLD,"ERROR:"GR" You can't give yourself ammo.");
	if(User[id][WeaponEquipped] != User[playerid][WeaponEquipped])
		return MSG(playerid,GOLD,"ERROR:"GR" The specified player must equip the same weapon as yours.");
	if(ammo < 1)
	    return MSG(playerid,GOLD,"ERROR:"GR" Ammo input must be a positive number.");
	if(ammo > User[playerid][WeaponEquipped_Ammo])
	    return MSG(playerid,GOLD,"ERROR:"GR" You can't give more than you have.");
	if(IsHoldingDutyWeapon(playerid) == 1)
	    return MSG(playerid,GOLD,"ERROR:"GR" This command cannot be used when your weapon was taken from the kiosk.");
	if(!ProxDetectorS(2.5,playerid,id)) return MSG(playerid,GOLD,"ERROR:"GR" Specified player is out of range.");
	User[playerid][WeaponEquipped_Ammo] -= ammo;
	User[id][WeaponEquipped_Ammo] += ammo;
	ResetPlayerWeapons(playerid);
	ResetPlayerWeapons(id);
	GivePlayerWeapon(playerid,User[playerid][WeaponEquipped],User[playerid][WeaponEquipped_Ammo]);
	GivePlayerWeapon(id,User[id][WeaponEquipped],User[id][WeaponEquipped_Ammo]);
	new query[124];
	new wep[24];
	GetWeaponName(User[playerid][WeaponEquipped],wep,sizeof wep);
	format(query,sizeof query,"passes some ammo to %s.",User[id][pUsername]);
	cmd_ame(playerid,query);
	format(query,sizeof(query),"SERVER: You have received %d %s ammo from %s.",ammo,wep,sendernameEx(playerid));
	MSG(id,GRAD2,query);
	User[playerid][JustUsed] = gettime()+5;
	return 1;
}
CMD:dw(playerid,params[]) return cmd_dropweapon(playerid,params);
CMD:dropweapon(playerid,params[])
{
	if(!User[playerid][Logged])
		return 0;
    //if(User[playerid][Death] == -1) return User[playerid][Death] = 0;
	if(User[playerid][WeaponEquipped] == 0)
	{
		if(User[playerid][Death] != -1) MSG(playerid,GOLD,"ERROR:"GR" You are not wielding a weapon.");
		return 1;
	}

 	new id,bool:found = false;
    for(id = 1; id < MAX_DROPPED_WEAPONS; id++)
	{
        if(DW[id][dWeapon] == 0)
        {
			found = true;
			break;
        }
	}
	if(!found) return MSG(playerid,GOLD,"ERROR:"GR" You cannot drop a weapon right now. (Limit reached)");
 	printf("User[playerid][WeaponEquipped]: %d\nUser[playerid][Bound][0]: %d\nUser[playerid][Bound][1]: %d\nUser[playerid][Bound][2]: %d"
 	,User[playerid][WeaponEquipped],User[playerid][Bound][0],User[playerid][Bound][1],User[playerid][Bound][2]);
	for(new i = 0; i < 3; i++)
	{
		if(IsHoldingDutyWeapon(playerid) == 1)//(User[playerid][Bound][i] == User[playerid][WeaponEquipped])
			return  MSG(playerid,GOLD,"ERROR:"GR" You cannot drop a weapon that was retrieved from the kiosk.");
	}
	new query[129];
	new wep[24];
	//GetWeaponName(User[playerid][WeaponEquipped],wep,sizeof wep);
	format(query,sizeof query,"drops their %s.",GetWeaponNameEx(User[playerid][WeaponEquipped]));
	cmd_ame(playerid,query);
	new Float:x,
	    Float:y,
	    Float:z;
	GetPlayerPos(playerid,x,y,z);
	new sx[8],
	    sy[8],
	    sz[8];


	new drop_ammo = User[playerid][WeaponEquipped_Ammo];
	new drop_weapon = User[playerid][WeaponEquipped];
	if(User[playerid][WeaponEquipped] == WEAPON_SPRAYCAN) 
		GetPlayerWeaponData(playerid, GetWeaponSlot(41), drop_weapon, drop_ammo);
	if(IsPlayerAdmin(playerid)) SFM(playerid,-1,"drop_weapon: %d; drop_ammo: %d",drop_weapon,drop_ammo);
	format(sx,8,"%f",x);
	format(sy,8,"%f",y);
	format(sz,8,"%f",z);
	DW[id][dWeapon] = drop_weapon;
	DW[id][dAmmo] = drop_ammo;
	DW[id][dX] = x;
	DW[id][dY] = y;
	DW[id][dZ] = z;
	DW[id][dVW] = GetPlayerVirtualWorld(playerid);
	DW[id][dInterior] = GetPlayerInterior(playerid);
	DW[id][dTime] = gettime()+43200;

	format(query,sizeof query,"INSERT INTO weapons (x,y,z,weapon,ammo,vw,interior,time) VALUES ('%s','%s','%s',%d,%d,%d,%d,%d)",sx,sy,sz,User[playerid][WeaponEquipped],User[playerid][WeaponEquipped_Ammo],DW[id][dVW],DW[id][dInterior],DW[id][dTime]);
	db_query(Database, query);

	new DBResult: Result = db_query(Database,"SELECT last_insert_rowid()");
	DW[id][dID] = db_get_field_int(Result);

	db_free_result(Result);
	User[playerid][WeaponEquipped] = 0;
	User[playerid][WeaponEquipped_Ammo] = 0;
	ResetPlayerWeapons(playerid);
 	//CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 300.0);
	DW[id][dWeaponObject] = CreateDynamicObject(GetWeaponModel(DW[id][dWeapon]),DW[id][dX],DW[id][dY],DW[id][dZ]-1,80,0,0,DW[id][dVW],DW[id][dInterior],-1,-1,20);

	new ammo[11];
	format(ammo,sizeof ammo,"%d,%d,0",User[playerid][uWeapon_Ammo][0],User[playerid][uWeapon_Ammo][1]);
	format(wep,sizeof wep,"%d,%d,%d",User[playerid][uWeapon][0],User[playerid][uWeapon][1],User[playerid][WeaponEquipped]);
	format(query,sizeof query,"UPDATE users SET weapon = '%s',ammo = '%s' WHERE userid = %d",wep,ammo,User[playerid][UserID]);
	db_query(Database, query);
	Iter_Add(Weapons,id);
	printf("[%s][%s] [dropweapon] %s (id:%d) has dropped %s (Ammo: %d) (%f %f %f)",PasteDate(),PasteTime(),User[playerid][Username],playerid,wep,ammo,x,y,z);
	return 1;
}
CMD:nearweapons(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	new vw = GetPlayerVirtualWorld(playerid);
	new bool:t = false;
	foreach(Weapons,i)
	{
	    if(IsPlayerInRangeOfPoint(playerid,2,DW[i][dX],DW[i][dY],DW[i][dZ]) && vw == DW[i][dVW])
	    {
	        //GetWeaponName(DW[i][dWeapon],wep,sizeof wep);
			format(large_string, 124, "[%d-%d] Weapon: %s | Ammo: %d", i,DW[i][dID],GetWeaponNameEx(DW[i][dWeapon]),DW[i][dAmmo]);
			MSG(playerid, GRAD2, large_string);
	        t = true;
	    }
	}
	if(!t) return MSG(playerid,GRAD2,"None");
	return 1;
}
stock HasAmmo(weaponid) // if the specified weapon has ammo, returns 0 if not like a baseball bat
{
	switch(weaponid)
	{
		case 16,17,18,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,39,43,WEAPON_LAUNCHER: return 1;
	}
	return 0;
}

CMD:mw(playerid,params[]) return cmd_myweapons(playerid,params);
CMD:myweapons(playerid,params[])
{
    MSG(playerid,GRAD2,"----------------------------------------------------");
	MSG(playerid,GOLD,"[Weapons]");
	new wep[24],wep2[24],string[124];
	//GetWeaponName(User[playerid][uWeapon][0],wep,24);
	//GetWeaponName(User[playerid][uWeapon][1],wep2,24);
	wep = GetWeaponNameEx(User[playerid][uWeapon][0]);
	wep2 = GetWeaponNameEx(User[playerid][uWeapon][1]);
	if(User[playerid][uWeapon][0] < 1)
	    wep = "Empty";
	if(User[playerid][uWeapon][1] < 1)
	    wep2 = "Empty";

	new bool:ammo[3];
	if(HasAmmo(User[playerid][uWeapon][0]))
		ammo[0] = true;
    if(HasAmmo(User[playerid][uWeapon][1]))
        ammo[1] = true;
    if(HasAmmo(User[playerid][WeaponEquipped]))
        ammo[2] = true;

	if(ammo[0])
		format(string,sizeof string,"Jacket Weapon Slot: %s (Ammo: %d)",wep,User[playerid][uWeapon_Ammo][0]);
	else format(string,sizeof string,"Jacket Weapon Slot: %s",wep);

	MSG(playerid,GRAD2,string);
    if(ammo[1])
		format(string,sizeof string,"Pocket Weapon Slot: %s (Ammo: %d)",wep2,User[playerid][uWeapon_Ammo][1]);
	else format(string,sizeof string,"Pocket Weapon Slot: %s",wep2);

	MSG(playerid,GRAD2,string);

	wep = GetWeaponNameEx(User[playerid][WeaponEquipped]);

 	if(User[playerid][WeaponEquipped] < 1)
	    wep = "Empty";
	if(ammo[2]) format(string,sizeof string,""G"Weapon Equipped: %s (Ammo: %d)",wep,User[playerid][WeaponEquipped_Ammo]);
	else format(string,sizeof string,"Weapon Equipped: %s",wep);
	MSG(playerid,GRAD2,string);
	MSG(playerid,GRAD2,"----------------------------------------------------");
	return 1;
}

public DeathBlink(playerid)
{
	if(User[playerid][Logged])
		TextDrawHideForPlayer(playerid,gRedScreen);
	return 1;
}

public OnPlayerRise(playerid)
{
	if(User[playerid][Logged])
	{
		ClearAnimations(playerid, 1);
		User[playerid][tazed] = 0;
		TogglePlayerControllable(playerid, 1);
	}
}
public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    if(issuerid != INVALID_PLAYER_ID)
    {
		new damage;
		new bool:melee;
		TextDrawShowForPlayer(playerid,gRedScreen);
		SetTimerEx("DeathBlink",100,0,"d",playerid);
		/*------------------- HACK CHECKS --------------------*/
		new str[129];
		printf("weaponid: %d; weaponequipped: %d",weaponid,User[playerid][WeaponEquipped]);
		/*if(weaponid != User[issuerid][WeaponEquipped] && weaponid != 0 && !IsPlayerInAnyVehicle(playerid))
		{
			GetWeaponName(weaponid,str,24);
			format(str,sizeof str,"Spawned Weapon (%s)",str);
			BanPlayer(issuerid,"Admin",str);
			ResetPlayerWeapons(issuerid);
			return 0;
		}*/
		new client_ammo;
		GetPlayerWeaponData(issuerid, GetWeaponSlot(weaponid), weaponid, client_ammo);
		if(client_ammo > User[issuerid][WeaponEquipped_Ammo]+5)
		{
			GetWeaponName(weaponid,str,24);
			new sum = client_ammo-User[playerid][WeaponEquipped_Ammo];
			format(str,sizeof str,"Spawned %s Ammo (%d rounds)",str,sum);
			BanPlayer(issuerid,"Admin",str);
			ResetPlayerWeapons(issuerid);
			return 0;
		}
		/*------------------------------------------------*/
		switch(User[issuerid][WeaponEquipped])
		{
		    case 0: damage = 3; // FIST
		    case 1: damage = 5,melee = true; // BRASS KNUCK
		    case 2,3,5,6,7: damage = 3,melee = true; // SHOVEL BASEBALL BAT ETC
			case 4: damage = 10,melee = true; // KNIFE
			case 8: damage = 25,melee = true; // KATANA
			case 9: damage = 15,melee = true; // CHAINSAW
			case 10,11,12,13,14: damage = 1,melee = true; // DILDO CANE VIBRATOR ETC
			case 37: damage = 5; // ANY SOURCE OF FIRE (Flamethrower, molotov)
			case 22/*,23*/: damage = 20; // COLT
			case 23: // SILENCED
			{
			    damage = 10;
			    if(User[playerid][tazed] == 0)
			    {
					if(User[playerid][breaking] > 0) cmd_breakin(playerid,"");
				    ApplyAnimation(playerid,"PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
					User[playerid][tazed] = 1;
					SetTimerEx("OnPlayerRise",60*1000,0,"d",playerid);
					Wait(playerid,"You have been tazed.",3000);

				}
			}
			case 24: damage = 20; // DESERT EAGLE
			case 25: // REGULAR SHOTGUN
			{
			    damage = 15;
			    new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid,x,y,z);
			    if(IsPlayerInRangeOfPoint(issuerid,10,x,y,z))
			    {
					damage += 10;
			    }
			}
			case 26,27: // SAWN OFF & SPAZ
			{
			    damage = 18;
			    new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid,x,y,z);
			    if(IsPlayerInRangeOfPoint(issuerid,10,x,y,z))
			    {
					damage += 10;
			    }
			}
			case 28: damage = 8; // UZI
			case 32: damage = 7; // TEC 9
			case 29: damage = 10; // MP5
			case 30: damage = 15;
			case 31: damage = 18;
			case 34: damage = 75;
			case WEAPON_HUNTING_RIFLE: damage = 10;
		}
		if(bodypart == 9 && damage != 0)
		    damage += 20;
		if(User[playerid][onDrug] == 2 || User[playerid][onDrug] == 3) damage = damage/2;
		if(User[issuerid][onDrug] == 3 && melee == true) damage = damage*2;
		//SFM(issuerid,-1,"onDrug playerid: %d; onDrug issuerid %d",User[playerid][onDrug],User[issuerid][onDrug]);
		new aftermath = User[playerid][Health]-damage;
		SetHealth(playerid,aftermath);
		if(aftermath < 1 && User[playerid][Death] < 1)
		{
			KillPlayer(playerid, COD_GUNSHOT);
			new wep[24];
			GetWeaponName(User[issuerid][WeaponEquipped], wep, sizeof wep);
			if(User[issuerid][WeaponEquipped] == WEAPON_HUNTING_RIFLE) wep = "Hunting Rifle";
			if(isnull(wep)) wep = "Fist";
			format(large_string,sizeof large_string,"(( Death: %s (ID:%d) has been injured by %s (ID:%d) (%s) ))"
			,User[playerid][Username],playerid,User[issuerid][Username],issuerid,wep);
			ProxDetector(30.0, playerid, large_string, GRAD3,GRAD3,GRAD3,GRAD3,GRAD3);
		}
		if(User[issuerid][pinvis] == true)
		{
			SetPlayerSkin(issuerid, User[issuerid][uSkin]);
			UpdateDynamic3DTextLabelText(User[issuerid][UserTag], SOLIDWHITE, User[issuerid][pUsername]);
			MSG(issuerid, GOLD, "Info"GR" Your invisiblity has been interrupted.");
			User[issuerid][pinvis] = false;		
			ClearAnimations(issuerid);
			KillTimer(InvisTimer[issuerid]);
			DestroyHiddenTag(issuerid);
		}
        if(IsPlayerAdmin(issuerid) > 0) // debugging
		{
			new
				infoString[128],
				weaponName[24],
				victimName[MAX_PLAYER_NAME],
				attackerName[MAX_PLAYER_NAME];

			GetPlayerName(playerid, victimName, sizeof (victimName));
			GetPlayerName(issuerid, attackerName, sizeof (attackerName));

			GetWeaponName(User[issuerid][WeaponEquipped], weaponName, sizeof (weaponName));
			if(User[issuerid][WeaponEquipped] == WEAPON_HUNTING_RIFLE) weaponName = "Hunting Rifle";
			format(infoString, sizeof(infoString), "%s has made %d damage to %s, weapon: %s (ID: %d), bodypart: %d", attackerName, damage, victimName, weaponName,weaponid, bodypart);
			MSG(issuerid,GREEN, infoString),print(infoString);
		}
    }
    return 1;
}
stock KillPlayer(playerid, cause = 0)
{
	if(User[playerid][Logged])
	{
		if(User[playerid][breaking] > 0) cmd_breakin(playerid,"");
		User[playerid][DeathTimer] = SetTimerEx("PlayerDeath",3000,1,"d",playerid);
		User[playerid][Death] = 250;
		PlayerTextDrawShow(playerid, deathtext[playerid]);
		PlayerTextDrawSetString(playerid, deathtext[playerid], "Heavily wounded! You have ~r~250~w~ seconds left.");
		PlayerTextDrawShow(playerid, deathtext[playerid]);
		UpdateDynamic3DTextLabelText(User[playerid][UserTag],0xB4191DFF,sendernameEx(playerid));
		TogglePlayerControllable(playerid, 0);
		User[playerid][pCOD] = cause;
		if(User[playerid][thousandface] == true)
		{
			UpdateDynamic3DTextLabelText(User[playerid][UserTag], 0xB4191DFF, User[playerid][pUsername]);
			SetPlayerSkin(playerid, User[playerid][uSkin]);
			DeletePVar(playerid, "MaskFaceName");
			DeletePVar(playerid, "MaskFaceSkin");
			User[playerid][thousandface] = false;		
			MSG(playerid, GOLD, "Info:"GR" Mask of a Thousand Faces has been interrupted.");
			ClearAnimations(playerid);				
			DestroyHiddenTag(playerid);
		}
		if(User[playerid][pinvis] == true)
		{
			SetPlayerSkin(playerid, User[playerid][uSkin]);
			UpdateDynamic3DTextLabelText(User[playerid][UserTag], 0xB4191DFF, User[playerid][pUsername]);
			MSG(playerid, GOLD, "Info"GR" Your invisiblity has been interrupted.");
			User[playerid][pinvis] = false;		
			ClearAnimations(playerid);
			KillTimer(InvisTimer[playerid]);
			DestroyHiddenTag(playerid);
		}
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
		return 1;
	}
	return 0;
}
CMD:callmydeath(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	ApplyAnimation(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
	User[playerid][DeathTimer] = SetTimerEx("PlayerDeath",10,1,"d",playerid);
	User[playerid][Death] = 250;
	User[playerid][pCOD] = strval(params);
	UpdateDynamic3DTextLabelText(User[playerid][UserTag],0xB4191DFF,sendernameEx(playerid));
	return 1;
}
CMD:stopanim(playerid,params[]) return cmd_sa(playerid,params);
CMD:sa(playerid,params[])
{
		if(User[playerid][Logged])
		{
		    if(User[playerid][animation]) return MSG(playerid,GOLD,"ERROR:"GR" You cannot use this feature right now.");
		    if(User[playerid][tazed] == 1)
		        return MSG(playerid,GOLD,"ERROR:"GR" You cannot do anything while you're tazed.");
			if(User[playerid][Death] > 0)
			{
				MSG(playerid,GOLD,"Info:"GR" You cannot do anything when heavily wounded.");
				return 1;
			}
  			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
				
			//MSG(playerid,GRAD8,"["GRE"Info"G"] Animations cleared.");
			new action=GetPlayerSpecialAction(playerid);
			if(action && action != SPECIAL_ACTION_CUFFED)
			{
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
			}
			if(User[playerid][gVar] == 100000000)
			{
				foreach(Props, i)
				{
					if(P[i][pvwi] == User[playerid][pvw])
					{
						MSG(playerid,RP,"Info:"GR" You have ended the process.");
						TogglePlayerControllable(playerid, 1);
						User[playerid][gVar] = 100000000+i;
						break;
					}
				}
			}
		}
		return 1;
}
CMD:filliter(playerid,params[])
{
	if(!IsPlayerAdmin(playerid))
		return 0;
	for(new i = 0; i < strval(params); i++)
	{
		new corpse = Iter_Free(Corpses);
		SFM(playerid,-1,"CORPSE = %d",corpse);
		Iter_Add(Corpses, corpse);
	}
	return 1;
}

public PlayerDeath(playerid) // CHECK ME
{
	if(User[playerid][Logged])
	{
	    //printf("User[playerid][Death]: %d",User[playerid][Death]);
	    if(User[playerid][Death] < 3)
	    {
			if(User[playerid][Death] == 0)
   			{
		    	// new	ip[18];
				// GetPlayerIp(playerid,ip,sizeof(ip));
				//printf("[%s][%s] PlayerDeath returned 0 for (%s) %s (id:%d)",PasteDate(),PasteTime(),ip,User[playerid][Username],playerid);
				KillTimer(User[playerid][DeathTimer]); 
				User[playerid][DeathTimer] = -1; // i added this
				return 0;
			}
			new Float:x,Float:y,Float:z, Float:angle;
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, angle);
			PlayerTextDrawHide(playerid, deathtext[playerid]);
			User[playerid][Death] = -1;
			cmd_dw(playerid,"");
			MSG(playerid,RED,"SERVER: You have died...");
			GiveMoney(playerid, -100);
			SetHealth(playerid, 100);
			KillTimer(User[playerid][DeathTimer]);
			User[playerid][DeathTimer] = -1; // i added this
			for(new i = 1; i <= HP[playerid][hLevel][i]; i++)
				HP[playerid][hLevel][i] = 1;
			UpdateHealthLevels(playerid);
			UpdateDynamic3DTextLabelText(User[playerid][UserTag],SOLIDWHITE,sendernameEx(playerid));
			if(User[playerid][Userrace] == 1)
			{
				if(User[playerid][shapeshift] > 4)
				{
					User[playerid][shapeshift] = 0;
					SetPlayerSkin(playerid, User[playerid][uSkin]);
					UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, User[playerid][pUsername]);
				}
			}
			SpawnPlayer(playerid);	
			//--------------------------------------

			new actor = CreateDynamicActor(User[playerid][uSkin], x, y, z, angle, 1, 100, User[playerid][pvw]);
			new anim = random(5);
			switch(anim)
			{
				case 0: ApplyDynamicActorAnimation(actor, "PED", "KO_shot_front", 4.0, 0, 1, 1, 1, 0);
				case 1: ApplyDynamicActorAnimation(actor, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0); 
				case 2: ApplyDynamicActorAnimation(actor, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0); 
				case 3: ApplyDynamicActorAnimation(actor, "PED", "KO_skid_back", 4.0, 0, 1, 1, 1, 0); 
				case 4: ApplyDynamicActorAnimation(actor, "PED", "KO_skid_front", 4.0, 0, 1, 1, 1, 0); 
			}
			new corpse = Iter_Free(Corpses);
			if(corpse == -1)
			{
				new tmp[CORPSE_DATA];
				for(new i = 0; i < MAX_CORPSE; i++) // -- BUGGED
				{
					if(CORPSE[i][cTime] < CORPSE[i][cTime]-gettime())
					{
						corpse = i;
						DestroyDynamicActor(CORPSE[corpse][cObject]);
						CORPSE[corpse] = tmp;
						break;
					}
				}
				Iter_Remove(Corpses, corpse);
			}
			CORPSE[corpse][cUser] = User[playerid][UserID];
			CORPSE[corpse][cX] = x;
			CORPSE[corpse][cY] = y;
			CORPSE[corpse][cZ] = z;
			CORPSE[corpse][cR] = angle; 
			CORPSE[corpse][cSkin] = User[playerid][uSkin];
			CORPSE[corpse][cVW] = User[playerid][pvw];
			CORPSE[corpse][cObject] = actor;
			CORPSE[corpse][cTime] = gettime()+3600;
			CORPSE[corpse][cMoney] = 100;
			CORPSE[corpse][cCOD] = User[playerid][pCOD];
			User[playerid][pCOD] = 0;
			if(isnull(User[playerid][donator])) 
			{
				CORPSE[corpse][cFirstSlot] = User[playerid][uWeapon][0];	
				CORPSE[corpse][cFirstSlot_Ammo] = User[playerid][uWeapon_Ammo][0];
				User[playerid][uWeapon][0] = 0;
				User[playerid][uWeapon_Ammo][0] = 0;
			}
			CORPSE[corpse][cSecondSlot] = User[playerid][uWeapon][1];	
			CORPSE[corpse][cSecondSlot_Ammo] = User[playerid][uWeapon_Ammo][1];
			User[playerid][uWeapon][1] = 0;
			User[playerid][uWeapon_Ammo][1] = 0;
			new ammo[11],wep[24],query[124];
			format(ammo,sizeof ammo,"%d,%d,0",User[playerid][uWeapon_Ammo][0],User[playerid][uWeapon_Ammo][1]);
			format(wep,sizeof wep,"%d,%d,%d",User[playerid][uWeapon][0],User[playerid][uWeapon][1],User[playerid][WeaponEquipped]);
			format(query,sizeof query,"UPDATE users SET weapon = '%s',ammo = '%s' WHERE userid = %d",wep,ammo,User[playerid][UserID]);
			db_query(Database, query);
			Iter_Add(Corpses, corpse);
			//--------------------------------------
			return 2;
	    }
		User[playerid][Death] -= 3;
		new str[100];
		format(str,sizeof str,"Heavily wounded! You have ~r~%d~w~ seconds left.",User[playerid][Death]);
		PlayerTextDrawShow(playerid,deathtext[playerid]);
		PlayerTextDrawSetString(playerid, deathtext[playerid], str);
	}
	return 1;
}
CMD:revive(playerid,params[])
{
	if(User[playerid][Useradmin] > 1)
	{
		new id;
		if(sscanf(params,"u",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /revive [playerid/PartOfName]");
		if(!User[id][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		if(User[id][Death] > 0)
		{
			MSG(id,GREEN,"Info:"GR" You have been revived by an administrator.");
			KillTimer(User[id][DeathTimer]);
			User[id][Death] = 0;
			SetHealth(id,100);
			UpdateDynamic3DTextLabelText(User[id][UserTag],SOLIDWHITE, sendernameEx(id));
			ClearAnimations(id,1);
			TogglePlayerControllable(id, 1);
			PlayerTextDrawHide(id, deathtext[id]);
			new query[124];
			format(query, sizeof query,"DELETE FROM health WHERE userid = %d", User[id][UserID]);
			db_query(Database, query);
			for(new i = 1; i <= HP[id][hMaxLevel]; i++)
			{
				HP[id][hLevel][i] = 1;
				format(query, sizeof query, "INSERT INTO health (userid, healthlevel, mark) VALUES (%d, %d, %d)", User[id][UserID], i, HP[id][hLevel][i]);
				db_query(Database, query);
			}
			format(large_string, sizeof large_string,"HEALTH LEVELS: %s", PasteHealthCondition(playerid));
			PlayerTextDrawSetString(playerid, tHLevel[playerid], large_string);
			PlayerTextDrawShow(playerid, tHLevel[playerid]);			
			
		}
		else MSG(playerid,GOLD,"ERROR:"GR" Specified player isn't heavily wounded.");
	} else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
public OnRconLoginAttempt(ip[], password[], success)
{
	if(success == 0)
	{
		new str[124];
		format(str,sizeof str,"*** BAD RCON ATTEMPT BY: %s",ip);
		Staff(ADMIN,str);
	}
	return 1;
}
new savepos[MAX_PLAYERS];
stock GetPlayerSpeed(playerid,bool:kmh)
{
  new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
  if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),Vx,Vy,Vz); else GetPlayerVelocity(playerid,Vx,Vy,Vz);
  rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
  return kmh?floatround(rtn * 100 * 1.61):floatround(rtn * 100);
}

new HackCheck[MAX_PLAYERS];
/*-----------------------------------------------------*/
public OnPlayerUpdate(playerid)
{
	//SFM(playerid, -1, "index %d", GetPlayerAnimationIndex(playerid));
	if(User[playerid][WeaponEquipped] != 0)
	{
		if(User[playerid][WeaponEquipped_Ammo] > 0) SetPlayerArmedWeapon(playerid,User[playerid][WeaponEquipped]);
		new index = GetPlayerAnimationIndex(playerid);
		switch(index)
		{
			case 748,747: SetPlayerArmedWeapon(playerid,0);
		}
		new c,cr; // c = current weapon, cr = current ammo
		GetPlayerWeaponData(playerid,GetWeaponSlot(User[playerid][WeaponEquipped]),c,cr);
		if(cr < 1 && CantStay(User[playerid][WeaponEquipped]))
		{
      		new ammo[11],wep[11],query[100];
			format(ammo,sizeof ammo,"%d,%d,0",User[playerid][uWeapon_Ammo][0],User[playerid][uWeapon_Ammo][1]);
			format(wep,sizeof wep,"%d,%d,%d",User[playerid][uWeapon][0],User[playerid][uWeapon][1],User[playerid][WeaponEquipped]);
			format(query,sizeof query,"UPDATE users SET weapon = '%s',ammo = '%s' WHERE userid = %d",wep,ammo,User[playerid][UserID]);
			db_query(Database, query);
			GetWeaponName(User[playerid][WeaponEquipped],wep,sizeof wep);
			User[playerid][WeaponEquipped] = 0;
			User[playerid][WeaponEquipped_Ammo] = 0;
			printf("[%s][%s] [consumable] %s's %s has been purged.",PasteDate(),PasteTime(),User[playerid][Username],wep);
		}
	}
	if(User[playerid][Death] > 0 && GetPlayerAnimationIndex(playerid) != 1207)
  		ApplyAnimation(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
	User[playerid][pLastTick] = GetTickCount();
	if(gettime() > savepos[playerid])
	{
		if(User[playerid][Logged])
		{
			if(GetPVarInt(playerid, "pRespawnPlayer") == 0)
			{
				GetPlayerPos(playerid, User[playerid][px], User[playerid][py], User[playerid][pz]);
				User[playerid][pvw] = GetPlayerVirtualWorld(playerid);
				User[playerid][pint] = GetPlayerInterior(playerid);
				savepos[playerid] = gettime()+5;
			}
			//printf("%f %f %f", User[playerid][px], User[playerid][py], User[playerid][pz]);
			if(User[playerid][specedby] > -1)
			{
				SetPlayerInterior(User[playerid][specedby], User[playerid][pint]);
				SetPlayerVirtualWorld(User[playerid][specedby], User[playerid][pvw]);
				new vid = GetPlayerVehicleID(playerid);
				if(vid > 0) PlayerSpectateVehicle(User[playerid][specedby], vid);
				else PlayerSpectatePlayer(User[playerid][specedby], playerid);
			}
		}
	}
	if(gettime() > HackCheck[playerid])
	{
		if(User[playerid][specing] == -1 && User[playerid][Spawned] == true)
		{
			if(GetPlayerAnimationIndex(playerid) == 0 && !IsPlayerInAnyVehicle(playerid))
			{
				KickPlayer(playerid, "Admin", "Third Party Modifications. (Invisibility/Warp)");
			}
		}
		HackCheck[playerid] = gettime()+1;
	}
	return 1;
}
CMD:tabbed(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new bool:found = false;
		MSG(playerid,GRAD2,"----------------------------------------------------");
		foreach(Player, i)
		{
			new tick = GetTickCount();
			//printf("GetTickCount: %d; pLastTick: %d",tick,User[playerid][pLastTick]);
			if(tick > User[i][pLastTick]+2000 && User[i][Logged])
			{
				new string[100];
				format(string,sizeof string,"- %s (ID:%d); Interval: %d seconds.",User[i][pUsername],i,(tick-User[i][pLastTick])/1000);
				MSG(playerid,GRAD2,string);
				found = true;
			}
		}
		if(!found) MSG(playerid,GRAD2,"No tabbed players.");
		MSG(playerid,GRAD2,"----------------------------------------------------");
		return 1;
	}
	return 0;
}
/*CMD:reconnect(playerid,params[])
{
	if(User[playerid][Logged])
	{
		reconnect[playerid] = true;
		OnPlayerDisconnect(playerid, 1);
		return 1;
	}
	return 0;
}*/
public SetMarkerInterval(playerwhosees,playerwhoisseen)
{
    if(ProxDetectorS(User[playerwhoisseen][breaking],playerwhosees,playerwhoisseen))
    {
	    SetPlayerMarkerForPlayer(playerwhosees,playerwhoisseen,COLOR_BLIP);
	    print("SET!");
    }
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	/*if(User[playerid][isMasked] == 1)
	{
 		ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
	}*/
	//printf("[%s][%s] %s streamed in for %s",PasteDate(),PasteTime(),User[playerid][Username],User[forplayerid][Username]);
	//printf("breaking forplayerid %d ; breaking playerid: %d",User[forplayerid][breaking],User[playerid][breaking]);

	if(User[forplayerid][breaking] > 0)
		SetTimerEx("SetMarkerInterval",1250,0,"dd",playerid,forplayerid);

	return 1;
}
public OnPlayerStreamOut(playerid, forplayerid)
{
	//printf("[%s][%s] %s streamed out for %s",PasteDate(),PasteTime(),User[playerid][Username],User[forplayerid][Username]);
 	if(User[forplayerid][breaking] > 0) SetPlayerMarkerForPlayer(playerid,forplayerid,COLOR_LOGGED);
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(User[playerid][Useradmin] != 0)
	{
		new player[5];
		format(player, 5, "%d", clickedplayerid);
		cmd_spec(playerid, player);
		return 1;
	}
	return 1;
}
CMD:myhouses(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new query[100];
		format(query, sizeof query,"SELECT name,price,hid from house WHERE owner = %d",User[playerid][UserID]);
		new DBResult:Result = db_query(Database, query);
		MSG(playerid,GRAD2,"|____ ["G"Houses"GR"] ____|");
		do
		{
			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "name",query,40);
				new id = db_get_field_assoc_int(Result,"hid");
				new price = db_get_field_assoc_int(Result,"price");
				format(query,sizeof query,"["G"*"GR"] %s (ID: %d; Price: %d)", query,id,price);
				MSG(playerid,GRAD2,query);
			}
			else
			{
			    MSG(playerid,GREEN,"House:"GR" There are no houses to list.");
				break;
			}
		}
		while(db_next_row(Result));
		db_free_result(Result);
        MSG(playerid,GRAD2,"|___________________|");
	    return 1;
	}
	return 0;
}
CMD:myinfo(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SFM(playerid,-1,"%f %f %f %d %d %d %d",x,y,z,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid),GetPlayerAnimationIndex(playerid));
	}
	return 1;
}
CMD:pmyinfo(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
		new Float:x, Float:y, Float:z,id;
		sscanf(params,"u",id);
		GetPlayerPos(id, x, y, z);
		SFM(playerid,-1,"%f %f %f %d %d %d %d",x,y,z,GetPlayerVirtualWorld(id),GetPlayerInterior(id),GetPlayerAnimationIndex(id));
	} else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:hash(playerid,params[])
{
    new MyHash[64 + 1]; // + 1 to account for the required null terminator
	new salt[50];
	sscanf(params,"s[64]s[50]",MyHash,salt);
    SHA256_PassHash(params, salt, MyHash, sizeof MyHash);
    SFM(playerid,-1,"Returned hash: %s", MyHash); //"78sdjs86d2h"
	return 1;
}
CMD:link(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new account[MAX_PLAYER_NAME],
			password[42];
		if(sscanf(params, "s[24]s[42]", account, password)) 
		return MSG(playerid, GOLD, "SYNTAX:"GR" /link [FullAccountName] [password] (Use this CMD to synchronize RP-Points to your MAIN ACCOUNT)");
		if(isnull(password)) return 0;
		if(!strcmp(User[playerid][Username], account, true))
			return MSG(playerid, GOLD, "ERROR:"GR" You cannot link yourself.");
		format(large_string, 256,"SELECT userid,rpoints,rpl FROM users WHERE username = '%s' AND password = '%s'", account, password);
		new DBResult: Result = db_query(Database, large_string);
		if(User[playerid][MainAccount] > 0)
			User[playerid][rpoints] = 0;
		if(db_num_rows(Result))
		{
			new points = db_get_field_assoc_int(Result, "rpoints");
			new rpl[3];
			db_get_field_assoc(Result, "rpl", rpl, sizeof rpl);
			
			if(User[playerid][rpoints] >= 250)
			{
				format(large_string, sizeof large_string,"UPDATE users SET rpoints = %d-250,rpl = '%s' WHERE userid = %d",User[playerid][rpoints]+points, rpl, User[playerid][UserID]);
				db_query(Database, large_string);
				User[playerid][rpoints] = User[playerid][rpoints]+points-250;
			}
			else
			{
				format(large_string, sizeof large_string,"UPDATE users SET rpoints = %d,rpl = '%s' WHERE userid = %d", User[playerid][rpoints]+points, rpl, User[playerid][UserID]);
				db_query(Database, large_string);
				User[playerid][rpoints] = User[playerid][rpoints]+points;		
			}
			format(User[playerid][RPL], 5, "%s", rpl);
			new userid = db_get_field_assoc_int(Result, "userid");
			if(User[playerid][MainAccount] > 0)
			{
				format(large_string, sizeof large_string, "DELETE FROM linked_accounts WHERE alt = %d", User[playerid][UserID]);
				db_query(Database, large_string);
			}
			format(large_string, sizeof large_string,"INSERT INTO linked_accounts (main, alt) VALUES (%d, %d)", userid, User[playerid][UserID]);
			db_query(Database, large_string);

			format(large_string, sizeof large_string,"System:"GR" %s (Account ID: %d) has been synchronized with %s (Account ID: %d)", User[playerid][Username], User[playerid][UserID],
			account, userid);
			MSG(playerid, GOLD, large_string);
			//
			User[playerid][MainAccount] = userid;
			format(large_string, sizeof large_string,"UPDATE users SET mainaccount = %d WHERE userid = %d", userid, User[playerid][UserID]);
			db_query(Database, large_string);
		}
		else 
			MSG(playerid, GOLD, "ERROR:"GR" Invalid credentials provided.");
	}
	return 1;
}
CMD:clearchat(playerid, params[])
{
	if(User[playerid][Logged])
	{
		for(new i = 0; i < 30; i++)
			MSG(playerid, GRAD4, " ");
		return 1;
	}
	return 1;
}
// ------------------------------------------------------------
// lumberjack trees
CMD:createrock(playerid,params[])
{
	if(User[playerid][Useradmin] > 0)
	{
			new Float:x,
				Float:y,
				Float:z,
				model;
			if(sscanf(params,"d",model)) return MSG(playerid,GOLD,"SYNTAX:"GR" /createrock [modelid]");
			new i = Iter_Free(Trees);
			if(i == MAX_OBJ) return MSG(playerid,GOLD,"ERROR: LIMIT REACHED!");
			ROCK[i][rockid] = i;
			GetPlayerPos(playerid,x,y,z);
			ROCK[i][rockx] = x+1;
			ROCK[i][rocky] = y;
			ROCK[i][rockz] = z;
			ROCK[i][rockmodel] = model;
			ROCK[i][rockhealth] = 100;
			new sx[10],sy[10],sz[10];
			format(sx,10,"%f",x);
			format(sy,10,"%f",y);
			format(sz,10,"%f",z);
			format(large_string,sizeof large_string,"INSERT INTO rocks (rock,model,x,y,z) VALUES (%d,%d,'%s','%s','%s')",i,model,sx,sy,sz);
			db_query(Database, large_string);
			ROCK[i][rockobject] = CreateDynamicObject(ROCK[i][rockmodel],ROCK[i][rockx]+1,ROCK[i][rocky],ROCK[i][rockz]-1,0,0,0,0,0);
			format(large_string,sizeof large_string,"SERVER: You have created tree ID %d (Model: %d)",i,model);
			MSG(playerid,GRAD2,large_string);
			Iter_Add(Trees,i);

			//EditDynamicObject(playerid, ROCK[i][treeobject]);
			//User[playerid][editing] = 3;
			
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:deleterock(playerid,params[])
{
    if(User[playerid][Useradmin] >= 1)
    {
        new id;
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /deleterock [objectid]");
		if(ROCK[id][rockobject] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Invalid object id.");
		new query[60];
		format(query,sizeof query,"DELETE FROM rocks WHERE rock = %i",id);
		db_query(Database, query);
		DestroyDynamicObject(ROCK[id][rockobject]);
    	new tmp[ROCK_DATA];
    	ROCK[id] = tmp;
		MSG(playerid,GRAD2,"SERVER: You have deleted the specified tree.");
		Iter_Remove(Trees,id);
    }
    else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:nearrock(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
		new bool:t;
		new range = 2;
		foreach(Trees,i)
		{
		    if(IsPlayerInRangeOfPoint(playerid,range, ROCK[i][rockx], ROCK[i][rocky], ROCK[i][rockz]))
			{
				new query[124];
				format(query, sizeof query,"[Rock ID: %d] [Model: %d]",i,ROCK[i][rockmodel]);
				MSG(playerid, GRAD2, query);
				t = true;
			}
			else continue;
		}
		if(!t) return MSG(playerid,GRAD2,"None");
	    return 1;
	}
	else return 0;
}
// --------------------------------------------------------------
// lumberjack trees
CMD:createtree(playerid,params[])
{
	if(User[playerid][Useradmin] > 0)
	{
			new Float:x,
				Float:y,
				Float:z,
				model;
			if(sscanf(params,"d",model)) return MSG(playerid,GOLD,"SYNTAX:"GR" /createtree [modelid]");
			new i = Iter_Free(Trees);
			if(i == MAX_OBJ) return MSG(playerid,GOLD,"ERROR: LIMIT REACHED!");
			TREE[i][treeid] = i;
			GetPlayerPos(playerid,x,y,z);
			TREE[i][treex] = x+1;
			TREE[i][treey] = y;
			TREE[i][treez] = z;
			TREE[i][treemodel] = model;
			TREE[i][treehealth] = 100;
			new sx[10],sy[10],sz[10];
			format(sx,10,"%f",x);
			format(sy,10,"%f",y);
			format(sz,10,"%f",z);
			format(large_string,sizeof large_string,"INSERT INTO lumberjack (tree,model,x,y,z) VALUES (%d,%d,'%s','%s','%s')",i,model,sx,sy,sz);
			db_query(Database, large_string);
			TREE[i][treeobject] = CreateDynamicObject(TREE[i][treemodel],TREE[i][treex]+1,TREE[i][treey],TREE[i][treez]-1,0,0,0,0,0);
			format(large_string,sizeof large_string,"SERVER: You have created tree ID %d (Model: %d)",i,model);
			MSG(playerid,GRAD2,large_string);
			Iter_Add(Trees,i);

			//EditDynamicObject(playerid, TREE[i][treeobject]);
			//User[playerid][editing] = 3;
			
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:deletetree(playerid,params[])
{
    if(User[playerid][Useradmin] >= 1)
    {
        new id;
		if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /deletetree [objectid]");
		if(TREE[id][treeobject] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Invalid object id.");
		new query[60];
		format(query,sizeof query,"DELETE FROM lumberjack WHERE tree = %i",id);
		db_query(Database, query);
		DestroyDynamicObject(TREE[id][treeobject]);
    	new tmp[TREE_DATA];
    	TREE[id] = tmp;
		MSG(playerid,GRAD2,"SERVER: You have deleted the specified tree.");
		Iter_Remove(Trees,id);
    }
    else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:neartree(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
		new bool:t;
		new range = 2;
		foreach(Trees,i)
		{
		    if(IsPlayerInRangeOfPoint(playerid,range, TREE[i][treex], TREE[i][treey], TREE[i][treez]))
			{
				new query[124];
				format(query, sizeof query,"[Tree ID: %d] [Model: %d]",i,TREE[i][treemodel]);
				MSG(playerid, GRAD2, query);
				t = true;
			}
			else continue;
		}
		if(!t) return MSG(playerid,GRAD2,"None");
	    return 1;
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
// --------------------------------------------------------------
CMD:help(playerid,params[])
{
	if(User[playerid][Logged])
	{
		large_string[0] = EOS;
		/*
			/rphelp - /me /ame /do /sme /sdo /w /pay /mask
			/carhelp /vehiclehelp -  
		*/
	    strcat(large_string,""R"[General]"GR" /me /ame /do /(w)hisper /pm /low /pay /id /mask /attachments /changepass /business /buy /jobhelp /stopanim\n");
	    strcat(large_string,""R"[General]"GR" /stats /pay /time /(r)emove(c)heckpoint /(v)ehicle /givekey /factions /assistme /door /tabbed /rplogs /showlog\n");
		strcat(large_string,""R"[General]"GR" /bank /banks /pfind /bfind /myprops /staff /rentvehicle /unrentvehicle /learn /myinfo /expstart /hud\n");
		strcat(large_string,""R"[General]"GR" /(desc)ription /(mydesc)ription /inspect /(r)e(m)ove(desc)ription /levelup /anims /ask /breakin /bloodpack\n");
		strcat(large_string,""R"[General]"GR" /label /dlabel /mylabels /dmylabels /cough /snarl /roar /growl /pdistance /frisk /offlinepm\n");
		strcat(large_string,""R"[General]"GR" /plabel /dplabel /plabels /pdmylabels /(i)nventory /forumname /showrpf  /link /clearchat /scrapcar\n");
		strcat(large_string, ""R"[General]"GR" Useful numbers: 7143 (requires a phone, call this number to acquire basic guns/artillery/merchandise)\n");
		strcat(large_string,""R"[Weapons]"GR" /(m)y(w)eapons /nearweapons /(d)rop(w)eapon /(b)ind(w)eapon /(w)eapon(s)tore /(w)eapon(d)raw\n");
		strcat(large_string, ""R"[Ammo]"GR" /myammopacks /passammopack /useammopack /passammo\n");
		strcat(large_string,""R"[House]"GR" /house /setspawn /evict /myhouses /hfind /writeletter\n");
		strcat(large_string,""R"[Phone]"GR" /togphone /call /sms /pickup /hangup\n");
		strcat(large_string,""R"[Garage]"GR" /genter /gexit /lockgarage /mygarages\n");
		strcat(large_string,""R"[Vampire]"GR" /(u)se(d)iscipline /(su)se(d)iscipline /(u)se(b)lood(p)oint /(su)se(b)lood /dispel\n");
		strcat(large_string,""R"[Werewolf]"GR" /shapeshift /(u)se(g)ift /(su)se(g)ift /(u)se(gn)osis /(su)se(gn)osis /(u)se(r)age /(su)se(r)age\n");
		strcat(large_string,""R"[Mage]"GR" /(u)se(q)uintessence /paradox /(u)se(s)phere\n");
		strcat(large_string,""R"[Hunter]"GR" /(u)se(c)onviction /(u)se(e)dge\n");
		strcat(large_string,""R"[Demon]"GR" /(u)se(f)aith(p)oint /(su)e(f)aith(p)oint /shapeshift /(u)se(l)ore\n");
		strcat(large_string,""R"[Changeling]"GR" /(u)se(g)lamour(p)oint /(su)e(g)lamour(p)oint\n");
		strcat(large_string,""R"[Character Sheet]"GR" /(c)haracter(s)heet /show /buildmf /next /(u)se(w)ill(p)ower /(su)se(w)illpower /other /showmf\n");
		strcat(large_string, ""R"[Rolling]"GR" /roll /droll /(s)ilent(r)oll /sme /sdo /roll group\n");
		strcat(large_string,""R"[Hunting]"GR" /skinanimal /butcher (Hunting Rifle is retrieved from a Weapon Store)\n");
		strcat(large_string,""R"[Drugs]"GR" /druginfo /mydrugs /passdrug /plantweed /harvestweed /uproot /druglab\n");
		strcat(large_string,""R"[Premium]"GR" /premium /togpremium /togb /togpm /premiumtag /chatstyle /fightstyle\n");
		strcat(large_string, ""R"[IED]"GR" /detonate /plantied /myieds\n");
		strcat(large_string,""R"[NPC]"GR" /cnpc /dnpc /npcanim /npcstat /rnpcstat /npccs /getherenpc; chatbox: `n<npcid>`; chatbox: `nn<npcid>`\n");
		strcat(large_string,""R"[Flying]"GR" Press JUMP key to fly. Press JUMP key repeatedly to fly upwards.\n");
		if(User[playerid][faction] > 0)
		{
			if(F[User[playerid][faction]][ftype] == PD)
				strcat(large_string,""R"[Faction]"GR" /(r)adio /(d)epartment(r)adio /hand(cuff) /kiosk /detain /arrest /frefuel\n");
		}
		strcat(large_string,""R"[General Faction]"GR" /f /fmembers /invite /uninvite /settier /setrank /setfactionspawn /setspawn faction");
		strcat(large_string, "\n"R"[Illegal Faction]"GR" Useful numbers: 3417 (requires a phone, call this number to acquire heavy heavy guns/artillery/merchandise)");
		// if(User[playerid][faction] > 0)
		// {
		// 	if(F[User[playerid][faction]][ftype] == ILLEGAL)
		// 	{
		// 		strcat(large_string, "\n"R"[Illegal Faction]"GR" Useful numbers: 3417 (requires a phone, call this number to acquire heavy artillery/merchandise)");
		// 	}
		// }
		Dialog_Show(playerid,dHelpDialog,DIALOG_STYLE_MSGBOX,"Server Commands",large_string,"Close","");
	    return 1;
	}
	return 0;
}
CMD:ah(playerid,params[]) return cmd_ahelp(playerid, params);
CMD:ahelp(playerid,params[])
{
	if(User[playerid][Useradmin])
	{
			large_string[0] = EOS;
		   	// strcat(large_string,"[*] /storyteller /a /spawnmoney /kick /ban /offlineban /unban /gotopos /vcreate /vdelete /vsetrentable /getcar /setfuel /respawnallcars /bcreate /bdelete /bsetgov\n");
		    // strcat(large_string,"[*] /brename /bsetprice /bsetgas /bgoto /bsetint /bsetdealerspawn /businesstypes /gethere  /getowner /inter /interiorlist /ipp /gpcip\n");
			// strcat(large_string,"[*] /gpcig /hcreate /hgoto /hdelete /hsetint /respawn /fcreate /fdelete /setvehiclefaction /setfaction /vspawn /destroyv /seecon /arecord\n");
			// strcat(large_string,"[*] /assist /requests /dcreate /ddelete /linkdoortohouse /linkdoortoprop /linkdoortobiz /linkdoortofac /dedit /dgoto /neardoor\n");
			// strcat(large_string,"[*] /ddelete /gcreate /gdelete /gsetint /gsetowner /ggoto /linkgaragetofaction /pcreate /pdelete /psetlab /pgoto /psetint /psetvw /psetvwex /psettax\n");
			// strcat(large_string,"[*] /psetowner /linkhousetoapartment /nearhouse /jetpack /serverstats /neargarage /goto /setvw /setint /spawnwep /refillstocks\n");
			// strcat(large_string, "[*] /expapps /exprev /aduty /givewp /givebp /giverage /givegnosis /giveq /giveconviction /giveglamour /rpfs /cnpc /dnpc /pnpc\n");
			// strcat(large_string, "[*] /givexp /giverp /tedit /giverpitem /check /deletemods /givedrug /takedrug /givefaith /pipcheck /ipcheck /getuser /set(h)ealth(l)evel\n");
			// strcat(large_string, "[*] /setmaxhealthlevel /revive /changeform /removeform /maphelp (for mappers) /updatetrait /supdatetrait /removetrait /makedonator\n");
			// strcat(large_string, "[*] /changedonator /removedonator");

			strcat(large_string, ""R"[GENERAL]"D" /serverstats /assist /requests /aduty /storyteller /a\n");
			strcat(large_string, ""R"[UTILITY]"D" /gotopos /gethere /spawnmoney /setfuel /respawn /respawnallcars /getowner /inter /interiorlist /seecon /jetpack\n");
			strcat(large_string, ""R"[UTILITY]"D" /revive /pnpc /changeform /removeform /givedrug /takedrug  /getuser /goto /setvw /setint /spawnwep /pbanks /an\n");
			strcat(large_string, ""R"[NPC]"D" /cnpc /dnpc /npcanim /npcstat /rnpcstat /npccs /getherenpc; chatbox: `n<npcid>`; chatbox: `nn<npcid>`\n"); 
			strcat(large_string, ""R"[INV]"D" /check /giverpitem \n");
			strcat(large_string, ""R"[PREMIUM]"D" /makedonator /changedonator /removedonator\n");
			strcat(large_string, ""R"[MAPPING]"D" /maphelp\n");
			strcat(large_string, ""R"[LABELS]"D" /dlabel\n");
			strcat(large_string, ""R"[CHR-SHEET]"D" /cs /expapps /exprev /rpfs /set(h)ealth(l)evel /setmaxhealthlevel /givewp /givebp /giverage\n");
			strcat(large_string, ""R"[CHR-SHEET]"D" /givegnosis /giveq /giveconviction /giveglamour /givefaith /givexp /giverp /csmisc\n");
			strcat(large_string, ""R"[EXTRA]"D" /updatetrait /supdatetrait /removetrait /tedit\n");
			strcat(large_string, ""R"[PERM-VEHICLES]"D" /vcreate /vdelete /vsetrentable /getcar /deletemods\n");
			strcat(large_string, ""R"[TEMP-VEHICLES]"D" /vspawn /destroyv\n");
			strcat(large_string, ""R"[HOUSES]"D" /hcreate /hgoto /hdelete /hsetint /linkhousetoapartment /nearhouse\n");
			strcat(large_string, ""R"[GARAGES]"D" /gcreate /gdelete /gsetint /gsetowner /ggoto /linkgaragetofaction /neargarage\n");
			strcat(large_string, ""R"[FACTIONS]"D" /fcreate /fdelete /setvehiclefaction /setfaction /refillstocks\n");
			strcat(large_string, ""R"[SECURITY]"D" /kick /ban /offlineban /unban /arecord /ipp /gpcip /gpcig /pipcheck /ipcheck\n");
			strcat(large_string, ""R"[DOORS/GATES]"D" /dcreate /ddelete /dedit /dgoto /neardoor /ddelete /linkdoortohouse /linkdoortoprop /linkdoortobiz /linkdoortofac\n");
			strcat(large_string, ""R"[PROPS]"D" /pcreate /pdelete /psetlab /pgoto /psetint /psetvw /psetvwex /psettax /psetowner\n");
			strcat(large_string, ""R"[BIZ]"D" /bcreate /bdelete /bsetgov /brename /bsetprice /bsetgas /bgoto /bsetint /bsetdealerspawn /businesstypes /bseticon\n");
			strcat(large_string, ""R"[DYNAMIC-JOBS]"D" /createtree /neartree /deletetree /createrock /nearrock /deleterock (miner job unfinished)");
			if(IsPlayerAdmin(playerid)) {
				strcat(large_string, "\n"R"[RCON] /makeadmin /hungerbar /form /emptyflight /edito /tw /hackwep /callmydeath /gotocar /crash /createobject /getobject /destroy\n");
				strcat(large_string, "\n"R"[RCON] /edit /editdynamic /exportobject /attacho /pos /savepos /getdataid /fdelete /dchangetime /makemecourier /fastcd /setweather /temperature\n");
				strcat(large_string, "\n"R"[RCON] /pickupmake /passminute /paycheckpayment\n");
			}
			Dialog_Show(playerid,dHelpDialog,DIALOG_STYLE_MSGBOX,"Admin Commands",large_string,"Close","");

	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:jetpack(playerid,params[])
{
	if(User[playerid][Useradmin] > 0)
	{
	    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_USEJETPACK)
	    {
	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
	        printf("[%s][%s] %s has spawned a jetpack.",PasteDate(),PasteTime(),User[playerid][Username]);
	    }
	    else
	    {
	        ClearAnimations(playerid, true);
	        printf("[%s][%s] %s has despawned a jetpack.",PasteDate(),PasteTime(),User[playerid][Username]);
	    }
	    return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:goto(playerid,params[])
{
	if(User[playerid][Useradmin] > 0 || IsStoryteller(playerid))
	{
	    new id;
	    if(sscanf(params,"u",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /goto [playerid/PartOfName]");
	    if(!IsPlayerConnected(id)) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
	    new Float:x,Float:y,Float:z;
	    GetPlayerPos(id,x,y,z);
	    SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(id));
	    SetPlayerInterior(playerid,GetPlayerInterior(id));
		SetPlayerPos(playerid,x+0.5,y,z);

		User[playerid][HouseIN] = User[id][HouseIN];
		User[playerid][BusinessIN] = User[id][BusinessIN];
	} else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
//    TogglePlayerSpectating(playerid, 1); PlayerSpectatePlayer(playerid, killerid);
CMD:namechange(playerid, params[])
{
	if(User[playerid][Logged])
	{
		new username[MAX_PLAYER_NAME];
		new sex[7];
		if(sscanf(params, "s[24]s[7]", username, sex)) 
			return MSG(playerid, GOLD, "SYNTAX:"GR" /namechange [Firstname_Lastname] [Male/Female]");
		if(!IsRPName(username)) 
			return MSG(playerid,GOLD,"SERVER:"GR" Please specify a valid roleplay name which contains an underscore (maximum underscores: 2). Such as: William_Jones");
		new cost = 10000;
		if(!isnull(User[playerid][donator]))
			cost = 0;
		if(User[playerid][uMoney] < cost && isnull(User[playerid][donator])) return MSG(playerid, GOLD, "SERVER:"GR" You cannot afford a namechange. (Cost: $10000)");
		format(large_string,sizeof large_string,"SELECT 1 from users WHERE username = '%s'", username);
		new DBResult: sResult = db_query(Database, large_string);
		if(db_num_rows(sResult))
			return MSG(playerid,GOLD,"ERROR:"GR" Specified username is taken.");
		
		format(large_string, sizeof large_string, "UPDATE users SET username = '%s' WHERE userid = %d", username, User[playerid][UserID]);
		db_query(Database, large_string);

		format(large_string, sizeof large_string, "STFCHT: %s (ID: %d) has namechanged to %s for $%d.", sendername(playerid), playerid, username, cost);
		Staff(ADMIN, large_string);

		format(large_string, sizeof large_string,"SERVER:"GR" You have successfully namechanged to %s for $"R"%d"W".", username, cost);
		MSG(playerid, WHITE, large_string);

		new File:pos= fopen("Logs/Namechanges.log", io_append);
		format(large_string, sizeof large_string,"[%s][%s] %s namechanged to %s. (Cost: $%d)\r\n",PasteDate(),PasteTime(), sendername(playerid), username, cost);
		fwrite(pos, large_string);
		fclose(pos);

		SetPlayerName(playerid, username);
		GetPlayerName(playerid, User[playerid][Username], MAX_PLAYER_NAME);
		GetPlayerName(playerid, User[playerid][pUsername], MAX_PLAYER_NAME);
		for(new i = 0; i < MAX_PLAYER_NAME; i++) if(User[playerid][pUsername][i] == '_') User[playerid][pUsername][i] = ' ';		

		if(cost > 0) {
			GiveMoney(playerid, -cost);
		}

		UpdateDynamic3DTextLabelText(User[playerid][UserTag],SOLIDWHITE,User[playerid][pUsername]);

		if(!strcmp(sex,"Male",true)) {
			User[playerid][uGender] = 0;
		} 
		if(!strcmp(sex, "Female", true)) {
			User[playerid][uGender] = 1;
		}

		format(large_string, sizeof large_string, "UPDATE users SET gender = %d WHERE userid = %d", User[playerid][uGender], User[playerid][UserID]);
		db_query(Database, large_string);

		ResetCS(playerid);
		return 1;
	}
	return 0;
}
CMD:spec(playerid, params[])
{
	if(User[playerid][Useradmin] != 0)
	{
		if(User[playerid][specing] > -1)
		{
			TogglePlayerSpectating(playerid, 0);
			//SpawnPlayer(playerid);
			return 1;
		}
		new id;
		if(sscanf(params,"u", id)) return MSG(playerid, GOLD, "SYNTAX:"GR" /spec [playerid/partofname]");
		if(id > MAX_PLAYERS || id < 0) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player ID specified.");
		if(!User[id][Logged]) return MSG(playerid, GOLD, "ERROR:"GR" Specified player isn't logged on.");
		MSG(playerid, ADMIN, "Info:"GR" You began spectating.");
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SetPVarFloat(playerid, "sPosX", x);
		SetPVarFloat(playerid, "sPosY", y);
		SetPVarFloat(playerid, "sPosZ", z);	
		SetPVarInt(playerid, "sInt", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "sVW", GetPlayerVirtualWorld(playerid));
		User[playerid][specing] = id;
		User[id][specedby] = playerid;
		new vw = GetPlayerVirtualWorld(id);
		new interior = GetPlayerInterior(id);
		SetPlayerVirtualWorld(playerid, vw);
		SetPlayerInterior(playerid, interior);
		TogglePlayerSpectating(playerid, 1);
		new vid = GetPlayerVehicleID(id);
		if(vid > 0) PlayerSpectateVehicle(playerid, vid);
		else PlayerSpectatePlayer(playerid, id);
		//SFM(playerid, -1, "ur vw has been set to %d and interior has been set to %d (by variable: vw %d, int %d)", GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), vw, interior);
		printf("[%s][%s] [spectate] %s SPECTATING %s; WORLD %d; INTERIOR %d", PasteDate(), PasteTime(), User[playerid][Username], User[id][Username], vw, interior);
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:gethere(playerid,params[])
{
	if(User[playerid][Useradmin] > 1 || IsStoryteller(playerid))
	{
	    new id;
	    if(sscanf(params,"u",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /gethere [playerid/PartOfName]");
	    if(!IsPlayerConnected(id)) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
	    new Float:x,Float:y,Float:z;
	    GetPlayerPos(playerid,x,y,z);
	    SetPlayerVirtualWorld(id,GetPlayerVirtualWorld(playerid));
	    SetPlayerInterior(id,GetPlayerInterior(playerid));
		SetPlayerPos(id,x,y,z);
		User[id][pvw] = User[playerid][pvw];
		User[id][pint] = User[playerid][pint];
		User[id][HouseIN] = User[playerid][HouseIN];
		User[id][BusinessIN] = User[playerid][BusinessIN];
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:stats(playerid,params[])
{
	if(User[playerid][Logged])
	{
	    if(isnull(params))
	    {
	        ShowStatsForPlayer(playerid,playerid);
	    }
	    else
		{
			if(User[playerid][Useradmin])
		    {
		        new id;
		        sscanf(params,"d",id);
				ShowStatsForPlayer(playerid,id);
				return 1;
		    }
		    else ShowStatsForPlayer(playerid,playerid);
		}

	    return 1;
	}
	return 0;
}
// 1593578
stock ShowStatsForPlayer(baw,mal) // baw == the one who is checking, mal == the one who is being checked
{
	if(User[mal][Logged])
	{
		new string[150],spawn[30];
		format(string,sizeof string,""G"[*]"GR" Statistics: %s (Account ID: %d)",User[mal][Username],User[mal][UserID]);
		MSG(baw,GRAD2,string);
		if(User[mal][uGender] == 1) string = "Female";
		else string = "Male";
		if(User[mal][spawnat] == -1) spawn = "Default";
		if(User[mal][spawnat] > 9000) spawn = "Faction";

		if(isnull(spawn) && User[mal][spawnat] < MAX_HOUSE) 
			format(spawn,sizeof spawn,"%s",H[User[mal][spawnat]][hname]);

		format(string,sizeof string,"- [Level: %d] [Skin: %d] [Cash: %d] [Playtime: %d] [XP: %d/%d] [Health: %d] [Sex: %s] [Spawn Point: %s]",
		User[mal][Level],User[mal][uSkin],User[mal][uMoney],User[mal][TotalHours],User[mal][UserXP],(User[mal][Level]+1)*STATIC_EXP,User[mal][Health],string,spawn);
		MSG(baw,GRAD2,string);
		switch(User[mal][uJob])
		{
			case JOB_COURIER: spawn = "Courier";
			case JOB_PB: spawn = "Pizzaboy";
			case JOB_WH: spawn = "Warehouse Operative";
			case JOB_BIZ: spawn = "Businessman";
			case JOB_BW: spawn = "Bus Driver";
			case JOB_MECH: spawn = "Mechanic";
			default: spawn = "Unemployed";
		}
		format(string,sizeof string,"- [Job: %s] [Job Income next Paycheck: $%d]",spawn, User[mal][pPayment]);
		if(!isnull(User[mal][donator]))
		    spawn = ""R"Yes";
		else spawn = "No";
		format(string,sizeof string,"%s [Premium Status: %s"GR"]",string,spawn);
		if(isnull(User[mal][donator])) spawn = "None";
		else format(spawn,30,"%s",User[mal][donator]);
		format(string,sizeof string,"%s [Premium Until: %s]",string,spawn);
		if(User[mal][MainAccount] > 0)
		{
			format(string,sizeof string,"%s [Main Account: %d]",string,User[mal][MainAccount]);
		}
		MSG(baw,GRAD2,string);
		if(User[mal][faction] > 0)
		{
			if(F[User[mal][faction]][ftype] == PD || F[User[mal][faction]][ftype] == LEGAL)
				format(string,sizeof string,"- [Faction: %s] [Rank: %s] [Tier: %d] [Salary: $%d] [Division: %s]",F[User[mal][faction]][fname],User[mal][frankname],User[mal][frank], User[mal][psalary], User[mal][fdivision]);
			else format(string,sizeof string,"- [Faction: %s] [Rank: %s] [Tier: %d]",F[User[mal][faction]][fname],User[mal][frankname],User[mal][frank]);
			MSG(baw,GRAD2,string);
		}
		format(string,sizeof string,"- [Phone Number: %d] [Roleplay Level: %s] [Roleplay Points: %d/%d] [Hunger: %.2f] [Thirst: %.2f] [Health Levels: %d]", User[mal][phonenum], User[mal][RPL], User[mal][rpoints], GetMaxRPoints(mal), User[mal][pHunger], User[mal][pThirst], HP[mal][hMaxLevel]);
		MSG(baw,GRAD2,string);
		format(string,sizeof string,"- * "R"%d"GR" minutes until next payday.",60-User[mal][LocalMin]);
		MSG(baw,GRAD2,string);

	}
}
stock GetMaxRPoints(playerid)
{
	if(User[playerid][RPL][0] == 'E') return 250;
	if(User[playerid][RPL][0] == 'D') return 430;
	if(User[playerid][RPL][0] == 'C') return 610;
	if(User[playerid][RPL][0] == 'B') return 790;
	if(User[playerid][RPL][0] == 'A') return 9999;
	return 9999;
}
CMD:serverstats(playerid,params[])
{
	if(User[playerid][Useradmin] > 0)
	{
		new logged,
		    houses,
		    businesses,
		    props,
		    garages,
		    cars,
		    weapons,
		    doors,
			static_objects,
			corpses,
			objects,
			vamp,
			werewolf,
			human,
			mage,
			hunter,
			demon,
			changeling;
		foreach(Player,i) if(User[i][Logged]) logged++;
		foreach(Houses,h) houses++;
		foreach(Biz,b) businesses++;
		foreach(Props,p) props++;
		foreach(Garages,g) garages++;
		foreach(Doors,d) doors++;
		for(new c = 1; c < MAX_VEHICLES; c++) if(V[c][vmodel]) cars++;
		foreach(Weapons,w) if(DW[w][dWeapon] != 0) weapons++;
		for(new sobj = 0; sobj < MAX_OBJECTS; sobj++) if(IsValidObject(sobj)) static_objects++;
		foreach(Corpses,corps) corpses++;
		foreach(Objects, obji) objects++;
		foreach(Player, i)
		{
			switch(User[i][Userrace])
			{
				case 0: human++;
				case 1: vamp++;
				case 2: werewolf++;
				case 3: mage++;
				case 4: hunter++;	
				case 5: demon++;
				case 6: changeling++;
			}
		}
		
		#define SERVER_COMMAND_COUNT 625
		format(large_string,sizeof large_string
		,"Players Logged On: %d\nHouses Created: %d/%d\nBusinesses Created: %d/%d\nProperties Created: %d/%d\nGarages Created: %d/%d\nVehicles Spawned: %d/%d \
		\nWeapons Dropped: %d/%d\nDoors Created: %d/%d\nStatic Objects: %d/%d\nCorpses Created: %d/%d\nObjects %d/%d\nHuman Players Online: %d\nVampire Players Online: %d \
		\nWerewolf Players Online: %d\nMage Players Online: %d\nHunter Players Online: %d\nDemon Players Online: %d\nChangeling Players Online: %d \
		\nTotal scripted commands: 625",logged,houses,MAX_HOUSE,businesses,MAX_BUSINESS,props,MAX_PROPS-1,garages,MAX_GARAGES-1,cars,MAX_VEHICLES,
		weapons,MAX_DROPPED_WEAPONS,doors,MAX_DOORS,static_objects,MAX_OBJECTS,corpses,
		MAX_CORPSE,objects,MAX_OBJ, human, vamp, werewolf, mage, hunter, demon, changeling);
		Dialog_Show(playerid,dServerStats,DIALOG_STYLE_MSGBOX,"Server Statistics",large_string,"Close","");
		format(large_string,sizeof large_string,"STFCMD: %s (ID:%d) has checked the server statistics.",User[playerid][Username],playerid);
		Staff(GOLD,large_string);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
CMD:staff(playerid,params[])
{
	if(!User[playerid][Logged]) return 0;
	if(User[playerid][TotalHours] < 2 && User[playerid][Useradmin] == 0) return MSG(playerid,GOLD,"ERROR:"GR" You need at least two playing hours to use this command.");
	//new title[30];
	MSG(playerid,GRAD2,"Staff Online:");
	foreach(Player,i)
	{
		if(User[i][Useradmin] != 0)
		{
		    /*switch(User[i][Useradmin])
		    {
				case 1,2,3,4: title = "Community Advisor";
				case -1: title = "Vampire Advisor";
				case -2: title = "Werewolf Advisor";
				case -3: title = "Server Mapper";
		    }*/
			SFM(playerid,GRAD2,"[*] %s %s (ID: %d) (%s)",User[i][pAdminRank],User[i][pUsername],i, User[i][forumname]);
		}
	}
	return 1;
}
CMD:aduty(playerid, params[])
{
	if(User[playerid][Useradmin] > 0)
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		if(GetPVarInt(playerid, "aAdminDuty") == 0)
		{
			new nametag[50];
			format(nametag, sizeof nametag, "%s (%d)\n{7f7fd4}Advisor Duty", User[playerid][forumname], playerid);
			UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, nametag);
			format(large_string, 140, "STFCMD: %s (ID: %d) is now on advisor duty.", User[playerid][forumname], playerid);
			Staff(ADMIN, large_string);
			SetPVarInt(playerid, "aAdminDuty", 1);
		}
		else
		{
			UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, sendernameEx(playerid));
			format(large_string, 140, "STFCMD: %s (ID: %d) is no longer on advisor duty.", User[playerid][forumname], playerid);
			Staff(ADMIN, large_string);			
			DeletePVar(playerid, "aAdminDuty");
		}
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:storyteller(playerid, params[])
{
	if(User[playerid][Useradmin] != 0)
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		if(GetPVarInt(playerid, "aStoryteller") == 0)
		{
			new nametag[50];
			format(nametag, sizeof nametag, "%s (%d)\n{7f7fd4}Storyteller", User[playerid][forumname], playerid);
			UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, nametag);
			format(large_string, 140, "STFCMD: %s (ID: %d) has activated their storyteller tag.", User[playerid][forumname], playerid);
			Staff(ADMIN, large_string);
			SetPVarInt(playerid, "aStoryteller", 1);
			MSG(playerid, GREEN, "Info:"GR" You have enabled your storyteller tag.");
		}
		else
		{
			UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, sendernameEx(playerid));
			format(large_string, 140, "STFCMD: %s (ID: %d) has disabled their storyteller tag.", User[playerid][forumname], playerid);
			Staff(ADMIN, large_string);			
			DeletePVar(playerid, "aStoryteller");
			MSG(playerid, GREEN, "Info:"GR" You have disabled your storyteller tag.");
		}
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:a(playerid,params[])
{
	if(User[playerid][Useradmin] > 0)
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		new string[130];
		if(sscanf(params,"s[130]",string)) return MSG(playerid,GOLD,"SYNTAX:"GR" /a [admin chat]");
		printf("[%s][%s] [admncht] %s: %s",PasteDate(),PasteTime(),User[playerid][forumname],string);
        if(strlen(string) <= 68)
		{
			format(string,sizeof(string),"[STFCHT] %s (ID:%d): %s", User[playerid][forumname], playerid,string);
            Staff(ADMIN,string);
		}
		else
		{
            	new texts[50];
            	strmid(texts,string,68,129);
                //strins(string, "-", 68, 1);
                strdel(string, 69, 129);
                format(string,sizeof(string),"[STFCHT] %s (ID:%d): %s...", User[playerid][forumname], playerid,string);
                Staff(ADMIN,string);
                format(string,sizeof(string),"...%s",texts);
                Staff(ADMIN,string);
        }

       	return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:am(playerid,params[]) return cmd_assistme(playerid,params);
CMD:assistme(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new string[130];
		if(sscanf(params,"s[130]",string)) return MSG(playerid,GOLD,"SYNTAX:"GR" /(a)isst(m)e [message]");
		printf("[%s][%s] [assistme] %s: %s",PasteDate(),PasteTime(),User[playerid][Username],string);
        if(strlen(string) <= 68)
		{
			format(string,sizeof(string),"ASST: %s (ID:%d): %s",sendernameEx(playerid),playerid,string);
			Staff(ADMIN,string);
		}
		else
		{
            	new texts[50];
            	strmid(texts,string,68,129);
                //strins(string, "-", 68, 1);
                strdel(string, 69, 129);
                format(string,sizeof(string),"ASST: %s (ID:%d): %s...",sendernameEx(playerid),playerid,string);
                Staff(ADMIN,string);
                format(string,sizeof(string),"...%s",texts);
				Staff(ADMIN,string);
        }

		MSG(playerid,WHITE,"* Your assistance request has been sent to the available staff, you'll be answered as soon as possible!");
		User[playerid][req] = 1; // 1 = help request, 2 = report
       	return 1;
	}
	return 0;
}
CMD:assist(playerid,params[])
{
	if(User[playerid][Useradmin] != 0)
	{
	    new id;
	    if(sscanf(params,"u",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /assist [playerid/PartOfName]");
		if(!User[id][Logged]) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		if(User[id][req] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Specified player doesn't have a pending assistance request.");
		User[id][req] = 0;
		new string[124];
		format(string,sizeof string,"ASSIST: %s (ID:%d)'s  assistance request has been taken by %s (ID:%d).",User[id][pUsername],id, User[playerid][forumname],playerid);
		Staff(ADMIN,string);
		format(string,sizeof string,"Info:"GR" Your assistance request has been taken by %s (ID:%d). Use (/pm) to communicate with them.",User[playerid][forumname],playerid);
		MSG(id,GREEN,string);
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:requests(playerid,params[])
{
	if(User[playerid][Useradmin] != 0)
	{
	    new string[124],
			bool:someone = false;
		MSG(playerid,GRAD2,"|____ ["G"Assistance Requests"GR"] ____|");
	    foreach(Player,i)
	    {
	        if(User[i][req] > 0)
	        {
				format(string,sizeof string,"* Assistance Required: %s (ID:%d)",User[i][pUsername],i);
                MSG(playerid,GRAD2,string);
				someone = true;
	        }
	    }
		if(!someone) MSG(playerid, GRAD2, "None");
	    return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
// -- Commands

CMD:pay(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new id,amount,str[120];
		if(sscanf(params,"ui",id,amount)) return MSG(playerid,GOLD,"SYNTAX:"GR" /pay [playerid/PartOfName] [amount]");
		if(id == playerid) return MSG(playerid,GOLD,"ERROR:"GR" You cannot pay yourself.");
		if(User[id][Logged] != true || !IsPlayerConnected(id)) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		if(amount < 1) return MSG(playerid,GOLD,"ERROR:"GR" Invalid amount.");
		if(amount > User[playerid][uMoney]) return MSG(playerid,GOLD,"ERROR:"GR" You don't have this much.");
		if(User[playerid][TotalHours] < 2 && User[playerid][Useradmin] == 0) return MSG(playerid,GOLD,"ERROR:"GR" You need at least two hours of gameplay to use this command.");
		if(User[id][specing] > -1) return  MSG(playerid,GOLD,"ERROR:"GR" Specified player is out of range.");
		new Float:x,Float:y,Float:z;
		GetPlayerPos(id,x,y,z);
		if(IsPlayerInRangeOfPoint(playerid,3,x,y,z))
		{
			GiveMoney(playerid,-amount);
			GiveMoney(id,amount);
			format(str,sizeof(str),"SERVER: You have received "G"$%i"GR" from %s.",amount,sendernameEx(playerid));
			MSG(id,GRAD2,str);
			format(str,sizeof(str),"SERVER: You have given "G"$%i"GR" to %s.",amount,User[id][pUsername]);
			MSG(playerid,GRAD2,str);
			format(str,sizeof(str),"> * %s has given $%i to %s.",sendernameEx(playerid),amount,User[id][pUsername]);
			SetPlayerChatBubble(playerid,str,RP,25,10*1000);
			ApplyAnimation(playerid, "DEALER", "SHOP_PAY", 4.1, false, false, false, false, 0, false); // PAY ANIM
			new File:pos= fopen("Logs/Pay.log", io_append);
			format(large_string, sizeof large_string,"[%s][%s] %s gave %s $%d.\r\n",PasteDate(),PasteTime(), User[playerid][Username], User[id][Username], amount);
			fwrite(pos, large_string);
			fclose(pos);
			large_string[0] = EOS;
		}
		else
		{
		    return MSG(playerid,GOLD,"ERROR:"GR" Specified player is out of range.");
		}

	}
	return 1;
}
CMD:time(playerid,params[])
{
	if(User[playerid][Logged])
	{
	    if(User[playerid][jail][0] > 0)
			SFM(playerid,WHITE,"Server Date: %s; Server Time: %s; Jail Time Left: %d minute(s)",PasteDate(),PasteTime(),User[playerid][jail][0]);
		else SFM(playerid,WHITE,"Server Date: %s; Server Time: %s",PasteDate(),PasteTime());
	}
    return 1;
}
CMD:slap(playerid,params[])
{
	if(User[playerid][Useradmin] < 1) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new id;
	if(sscanf(params,"u",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /slap [playerid/PartOfName]");
	if(!IsPlayerConnected(id)) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player specified.");
	SlapPlayer(id, User[playerid][forumname]);
	return 1;
}
CMD:freeze(playerid,params[])
{
	if(User[playerid][Useradmin] < 1) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new id;
	if(sscanf(params,"u",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /freeze [playerid/PartOfName]");
	if(!IsPlayerConnected(id)) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player specified.");
	TogglePlayerControllable(id, 0);
	MSG(playerid, ADMIN, "Info:"GR" Specified player has been frozen.");
	return 1;
}
CMD:unfreeze(playerid,params[])
{
	if(User[playerid][Useradmin] < 1) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new id;
	if(sscanf(params,"u",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /freeze [playerid/PartOfName]");
	if(!IsPlayerConnected(id)) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player specified.");
	TogglePlayerControllable(id, 1);
	MSG(playerid, ADMIN, "Info:"GR" Specified player has been unfrozen.");
	return 1;
}
stock SlapPlayer(playerid, admin[])
{
	new string[100];
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	SetPlayerPos(playerid,x,y,z+5.2);
	PlayerPlaySound(playerid,1190, 0.0, 0.0, 0.0);
	format(string,sizeof(string),"STFCMD: %s has been slapped by %s.",User[playerid][pUsername], admin);
	ProxDetector(15,playerid,string,ADMIN,ADMIN,ADMIN,ADMIN,ADMIN);
	return 1;
}
CMD:offlineban(playerid,params[])
{
	if(IsPlayerAdmin(playerid) || User[playerid][Useradmin] > 1)
	{
	    new name[MAX_PLAYER_NAME],
			reason[129];
		if(sscanf(params,"s[24]s[129]",name,reason)) return MSG(playerid,GOLD,"SYNTAX:"GR" /offlineban [AccountName] [reason]");
		format(large_string,sizeof large_string,"SELECT userid,ip,gpci FROM users WHERE username = '%s'",name);
		new DBResult:Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
			new bool:found;
			foreach(Player, i)
			{
				if(!strcmp(name, User[i][Username]))
				{
					found = true;
				}
			}			
			if(found) 
			{
				MSG(playerid,GOLD,"ERROR:"GR" Specified player is online. Use (/ban) to ban them.");
				return db_free_result(Result);
			}
			new unique = db_get_field_assoc_int(Result, "userid");
			format(large_string,sizeof large_string,"SELECT 1 from bans WHERE userid = %d",unique);
			new DBResult: sResult = db_query(Database, large_string);
			if(db_num_rows(sResult))
			{
				MSG(playerid,GOLD,"ERROR:"GR" Specified player is already banned.");
				db_free_result(sResult);
				return db_free_result(Result);
			}
			new ip[18];
			new playergpci[41];
			db_get_field_assoc(Result, "gpci", playergpci, sizeof playergpci);
			db_get_field_assoc(Result, "ip", ip, sizeof ip);
			new year,month,day,hour,minute,second;
			getdate(year,month,day);
			gettime(hour,minute,second);
			new sdate[15],stime[9];
			format(sdate,sizeof sdate,"%02d/%02d/%d", day, month, year);
			format(stime,sizeof stime,"%02d:%02d:%02d", hour, minute, second);
			format(large_string,sizeof(large_string),
			"INSERT INTO bans (username,userid,reason,bannedby,ip,gpci,date,time) VALUES ('%s','%i','%q','%s','%s','%s','%s','%s')"
			,name,unique,reason,User[playerid][Username],ip,playergpci,sdate,stime);
			db_query(Database,large_string);

			format(large_string,sizeof(large_string),"[%s][%s] [ban] %s has been banned by %s; Reason: %s",sdate,stime,name,User[playerid][forumname],reason);
			print(large_string);
			// logging
			large_string[0] = EOS;
			format(large_string,sizeof large_string,"[%s][%s] %s has been banned by %s; Reason: %s",sdate,stime,name,User[playerid][forumname],reason);
			format(large_string,sizeof large_string,"INSERT INTO adminrecord (userid,log) VALUES (%d,'%s')",unique, large_string);
			db_query(Database, large_string);
			/*----------------------------------------------*/
			if(strlen(reason) <= 68)
			{
				format(large_string,sizeof(large_string),"STFCMD: %s has been banned by %s; Reason: %s",name,User[playerid][forumname],reason);
				SendClientMessageToAll(ADMIN,large_string);
			}
			else
			{
					new texts[50];
					strmid(texts,reason,68,129);
					strdel(reason, 69, 129);
					format(large_string,sizeof(large_string),"STFCMD: %s has been banned by %s; Reason: %s",name,User[playerid][forumname],reason);
					SendClientMessageToAll(ADMIN,large_string);
					format(large_string,sizeof(large_string),"...%s",texts);
					SendClientMessageToAll(ADMIN,large_string);
			}	
			db_free_result(Result);		
		}
		else
		{
			MSG(playerid,GOLD,"ERROR:"GR" Invalid player name specified.");
		}
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
public OnPlayerAirbreak(playerid)
{
	if(!IsPlayerAdmin(playerid) && User[playerid][Logged])	
		KickPlayer(playerid, "Admin","Third Party Modification Detected. (Airbreak)");
    return 1;
}
CMD:ban(playerid,params[])
{
	if(IsPlayerAdmin(playerid) || User[playerid][Useradmin] > 1)
	{
	    new id,
			reason[129];
		if(sscanf(params,"us[129]",id,reason)) return MSG(playerid,GOLD,"SYNTAX:"GR" /ban [playerid/PartOfName] [reason]");
		new forum[24];
		strcat(forum, User[playerid][forumname]);
		BanPlayer(id,forum,reason);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
stock BanPlayer(id,bannedby[MAX_PLAYER_NAME],reason[129]) // for online players
{
	if(IsPlayerConnected(id))
	{
		print("BanPlayer - BEGIN");
	    new	ip[18],
			query[400];
		GetPlayerIp(id,ip,sizeof(ip));
		print("BanPlayer - A");
		new year,month,day,hour,minute,second;
		getdate(year,month,day);
		gettime(hour,minute,second);
		new sdate[15],stime[9];
		format(sdate,sizeof sdate,"%02d/%02d/%d", day, month, year);
		format(stime,sizeof stime,"%02d:%02d:%02d", hour, minute, second);
		print("BanPlayer - B");
		format(query,sizeof(query),"INSERT INTO bans (username,userid,reason,bannedby,ip,gpci,date,time) VALUES ('%s','%i','%q','%s','%s','%s','%s','%s')",User[id][Username],User[id][UserID],reason,bannedby,ip,ReturnGPCI(id),sdate,stime);
		print("BanPlayer - C (FORMATTING)");
		db_query(Database,query);
		print("BanPlayer - D (PROCESSING FORMAT)");
		format(query,sizeof(query),"[%s][%s] [ban] %s has been banned by %s; Reason: %s",sdate,stime,User[id][Username],bannedby,reason);
		print("BanPlayer - E");
		print(query);
		// logging:
		print("BanPlayer - F (LOGGING)");
		format(query,sizeof query,"[%s][%s] %s has been banned by %s; Reason: %s",sdate,stime,User[id][Username],bannedby,reason);
		format(query,sizeof query,"INSERT INTO adminrecord (userid,log) VALUES (%d,'%s')",User[id][UserID],query);
		db_query(Database, query);
		print("BanPlayer - G (LOGGED)");
		// logging done ^
		if(strlen(reason) <= 68)
		{
			print("BanPlayer - H (STRLEN < 68)");
			format(query,sizeof(query),"STFCMD: %s has been banned by %s; Reason: %s",User[id][Username],bannedby,reason);
			SendClientMessageToAll(ADMIN,query);
			print("BanPlayer - K (STRLEN < 68)");
		}
		else
		{
				print("BanPlayer - L (ELSE)");
            	new texts[50];
            	strmid(texts,reason,68,129);
				print("BanPlayer - M");
                //strins(string, "-", 68, 1);
                strdel(reason, 69, 129);
				print("BanPlayer - N");
                format(query,sizeof(query),"STFCMD: %s has been banned by %s; Reason: %s",User[id][Username],bannedby,reason);
				print("BanPlayer - O");
                SendClientMessageToAll(ADMIN,query);
                format(query,sizeof(query),"...%s",texts);
				print("BanPlayer - P");
                SendClientMessageToAll(ADMIN,query);
				print("BanPlayer - Q");
        }
		//format(query,sizeof(query),"STFCMD: %s has been banned by %s; Reason: %s",User[id][Username],bannedby,reason);
		SetTimerEx("KickEx", 1000, false, "i", id);
		print("BanPlayer - R");
	}
	return 1;
}

public KickEx(playerid)
{
	Kick(playerid);
	return 1;
}
CMD:checkcs(playerid,params[])
{
	if(User[playerid][Useradmin] > 2)
	{
		new name[MAX_PLAYER_NAME];
		sscanf(params,"s[24]",name);
		if(isnull(params)) return MSG(playerid,GOLD,"SYNTAX:"GR" /checkcs [FullAccountName]");
		format(large_string,sizeof large_string,"SELECT userid FROM users WHERE username = '%s'",name);
		new DBResult:Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
			new unique = db_get_field_assoc_int(Result, "userid");
			db_free_result(Result);
			
			format(large_string,sizeof large_string,"SELECT * FROM sheet WHERE userid = %d",unique);
			Result = db_query(Database, large_string);
			large_string[0] = EOS;
			new newline = 0;
			new rows = db_num_rows(Result);
			do
			{
				if(rows)
				{
						new trait[MAX_TRAIT_NAME];
						new value = db_get_field_assoc_int(Result, "value");
						db_get_field_assoc(Result, "trait", trait, sizeof trait);
						format(large_string,sizeof large_string,"%s[%s %d] ",large_string,trait, value);
						newline++;
						if(newline > 6) 
						{
							newline = 0;
							format(large_string,sizeof large_string,"%s[%s %d]\n",large_string,trait, value);
						}
				}
				else 
				{
					MSG(playerid,GREEN,"Info: Specified player has no character sheet variables.");
					break;
				}
			}
			while(db_next_row(Result));
			db_free_result(Result);	
			new header[35];
			format(header,sizeof header,"%s (Rows: %d)",name, rows);
			Dialog_Show(playerid,dCSCheck,DIALOG_STYLE_MSGBOX,header,large_string, "Close","");
		}
		else
		{
			MSG(playerid,GOLD,"ERROR:"GR" Invalid player name specified.");
		}
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:csmisc(playerid,params[])
{
	if(User[playerid][Useradmin] > 2)
	{
		new name[MAX_PLAYER_NAME];
		sscanf(params,"s[24]",name);
		if(isnull(params)) return MSG(playerid,GOLD,"SYNTAX:"GR" /csmisc [FullAccountName]");
		format(large_string,sizeof large_string,"SELECT userid FROM users WHERE username = '%s'",name);
		new DBResult:Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
			new unique = db_get_field_assoc_int(Result, "userid");
			db_free_result(Result);
			
			format(large_string,sizeof large_string,"SELECT * FROM sheet WHERE userid = %d AND type = 9",unique);
			Result = db_query(Database, large_string);
			large_string[0] = EOS;
			new rows = db_num_rows(Result);
			do
			{
				if(rows)
				{
						new trait[MAX_TRAIT_NAME];
						new value = db_get_field_assoc_int(Result, "value");
						db_get_field_assoc(Result, "trait", trait, sizeof trait);
						format(large_string,sizeof large_string,"%s[%s %d]\n",large_string,trait, value);
				}
				else 
				{
					MSG(playerid,GREEN,"Info: Specified player has no miscellaneous variables.");
					break;
				}
			}
			while(db_next_row(Result));
			db_free_result(Result);	
			new header[35];
			format(header,sizeof header,"%s (Rows: %d)",name, rows);
			Dialog_Show(playerid,dCSMisc,DIALOG_STYLE_MSGBOX,header,large_string, "Close","");
		}
		else
		{
			MSG(playerid,GOLD,"ERROR:"GR" Invalid player name specified.");
		}
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:arecord(playerid,params[])
{
	if(User[playerid][Useradmin] > 0)
	{
		new name[MAX_PLAYER_NAME],
			line,
			count;
		sscanf(params,"s[24]i",name,line);
		if(isnull(params)) return MSG(playerid,GOLD,"SYNTAX:"GR" /arecord [FullAccountName] [line]");
		format(large_string,sizeof large_string,"SELECT userid FROM users WHERE username = '%s'",name);
		new DBResult:Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
			
			new unique = db_get_field_assoc_int(Result, "userid");
			db_free_result(Result);
			
			format(large_string,sizeof large_string,"SELECT log FROM adminrecord WHERE userid = %d",unique);
			Result = db_query(Database, large_string);
			large_string[0] = EOS;
			new rows = db_num_rows(Result);
			do
			{
				if(rows)
				{
					if(count >= line)
					{
						new log[220];
						db_get_field_assoc(Result, "log", log, sizeof log);
						format(large_string,sizeof large_string,"%s%s\n",large_string,log);
					}
					count++;
				}
				else 
				{
					MSG(playerid,GREEN,"Info: Specified player has a clean admin record.");
					break;
				}
			}
			while(db_next_row(Result));
			db_free_result(Result);	
			new header[35];
			format(header,sizeof header,"%s (Rows: %d)",name, rows);
			Dialog_Show(playerid,dAdminRecord,DIALOG_STYLE_MSGBOX,header,large_string, "Close","");
		}
		else
		{
			MSG(playerid,GOLD,"ERROR:"GR" Invalid player name specified.");
		}
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:kick(playerid,params[])
{
	if(IsPlayerAdmin(playerid) || User[playerid][Useradmin] > 1)
	{
	    new id,
			reason[129];
		if(sscanf(params,"us[129]",id,reason)) return MSG(playerid,GOLD,"SYNTAX:"GR" /kick [playerid/PartOfName] [reason]");
		KickPlayer(id,sendername(playerid),reason);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	return 1;
}
stock KickPlayer(playerid,kickedby[MAX_PLAYER_NAME],reason[129])
{
	if(IsPlayerConnected(playerid))
	{
		new query[198];
		format(query,sizeof query,"STFCMD: %s has been kicked by %s; Reason: %s",User[playerid][Username],kickedby,reason);
		SendClientMessageToAll(ADMIN,query);

		printf("[%s][%s] [kick] %s has been kicked by %s; Reason: %s",PasteDate(),PasteTime(),User[playerid][Username],kickedby,reason);
		// logging
		large_string[0] = EOS;
		format(large_string,sizeof large_string,"[%s][%s] %s has been kicked by %s; Reason: %s",PasteDate(),PasteTime(),User[playerid][Username],kickedby,reason);

		format(large_string,sizeof large_string,"INSERT INTO adminrecord (userid,log) VALUES (%d,'%s')",User[playerid][UserID],large_string);
		db_query(Database, large_string);
		/*----------------------------------------------*/
		query[0] = GetPlayerPing(playerid)*2;
		if(query[0] > 1000)
		{
			query[0] = 1000;
		}
		SetTimerEx("KickEx", query[0], false, "i", playerid);

	}
	return 1;
}
CMD:gotopos(playerid,params[])
{
	if(IsPlayerAdmin(playerid) || User[playerid][Useradmin] > 1)
    {
       // MSG(playerid,GOLD,"SYNTAX:"GR" /gotopos [x] [y] [z] [interior] [vw]");
		new Float:x,Float:y,Float:z,interior,vw;
		if(sscanf(params,"fffii",x,y,z,interior,vw)) return MSG(playerid,GOLD,"SYNTAX:"GR" /gotopos [x] [y] [z] [interior] [vw]");
		SetPlayerInterior(playerid,interior);
		SetPlayerVirtualWorld(playerid,vw);
		SetPlayerPos(playerid,x,y,z);
    } else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
    return 1;
}
CMD:gotocar(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	new Float:x,Float:y,Float:z;
	new id = strval(params);
	GetVehiclePos(id,x,y,z);
	SetPlayerVirtualWorld(playerid,V[id][vvw]);
	SetPlayerInterior(playerid,V[id][vint]);
	SetPlayerPos(playerid,x,y,z);
	return 1;
}
CMD:getcar(playerid,params[])
{
	if(User[playerid][Useradmin] < 2) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	new id = strval(params);
	if(V[id][garagein] > 0)
		return SFM(playerid,GOLD,"ERROR: The specified vehicle is in garage ID %d. You cannot teleport it.",V[id][garagein]);
	SetVehiclePos(id,x,y,z);
	LinkVehicleToInterior(id,GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(id,GetPlayerVirtualWorld(playerid));
	return 1;
}
CMD:unban(playerid,params[])
{
    if(IsPlayerAdmin(playerid) || User[playerid][Useradmin] > 1)
    {
        new name[24],userid,query[150];
        if(sscanf(params,"s[24]",name)) return MSG(playerid,GOLD,"SYNTAX:"GR" /unban [AccountName]");
        new DBResult: Result;
        format(query,sizeof(query),"SELECT userid FROM users WHERE username = '%s'",name);
		Result = db_query(Database,query);

		if(db_num_rows(Result))
		{
			userid = db_get_field_assoc_int(Result, "userid");
		}
		else
		{
		    MSG(playerid,GOLD,"ERROR:"GR" Specified account does not exist.");
		    return 1;
		}
		db_free_result(Result);// IMPORTANT
		//format(query,sizeof(query),"SELECT userid FROM bans WHERE userid = '%i'",userid);
		format(query,sizeof(query),"SELECT 1 FROM bans WHERE userid = '%i'",userid);
		Result = db_query(Database,query);

		if(db_num_rows(Result))
		{
			format(query,sizeof(query),"DELETE FROM bans WHERE userid = '%i'",userid);
			db_query(Database,query);
		}
		else
		{
		    MSG(playerid,GOLD,"ERROR:"GR" Specified account is not banned.");
		    return 1;
		}
		db_free_result(Result);// IMPORTANT

		format(query,sizeof(query),"STFCMD: %s has been unbanned.",name);
		Staff(ADMIN,query);
		// logging
		large_string[0] = EOS;
		format(large_string,sizeof large_string,"[%s][%s] %s has been unbanned by %s.",PasteTime(),PasteDate(),name,User[playerid][Username]);
		format(large_string,sizeof large_string,"INSERT INTO adminrecord (userid,log) VALUES (%d,'%s')",userid, large_string);
		db_query(Database, large_string);
		/*----------------------------------------------*/
		format(query,sizeof(query),"[%s][%s] [unban] %s has been unbanned by %s.",PasteTime(),PasteDate(),name,User[playerid][Username]);
		print(query);
    } else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
    return 1;
}
CMD:crash(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	OnPlayerDisconnect(playerid, 0);
    return 1;
}
CMD:sendquery(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	new query[150];
	if(sscanf(params,"s[150]",query)) return MSG(playerid,GOLD,"[SYNTAX]:"GR" /sendquery [query]");
	db_query(Database,query);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	printf("[query] %s execute: %s",User[playerid][Username],query);
	return 1;
}
CMD:changepass(playerid,params[]) return cmd_changepassword(playerid,params);
CMD:changepassword(playerid,params[])
{
	if(User[playerid][Logged] == true)
	{
	    new pass[124];
		if(sscanf(params,"s[124]",pass)) return MSG(playerid,GOLD,"[ERROR]:"GR" /changepassword [newpassword]");
		if(strlen(pass) < 4) return MSG(playerid,GOLD,"[ERROR]:"GR" Your password must be greater than three characters.");
		format(User[playerid][Userconfirmpass],129,"%s",pass);
		Dialog_Show(playerid,dConfirmPassChange, DIALOG_STYLE_PASSWORD, "Password Change", "Type in your new password to confirm it.", "Confirm", "Cancel");
	}
	return 1;
}
Dialog:dConfirmPassChange(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    printf("User[playerid][Userconfirmpass] before deletion: %s",User[playerid][Userconfirmpass]);
		User[playerid][Userconfirmpass][0] = EOS;
		printf("User[playerid][Userconfirmpass] after deletion: %s",User[playerid][Userconfirmpass]);
		return 1;
	}
	if(!strcmp(inputtext,User[playerid][Userconfirmpass]))
	{
		MSG(playerid,WHITE,"SERVER: You have successfully changed your password and will login with it from now on.");
		format(User[playerid][Userpass],129,"%s",User[playerid][Userconfirmpass]);
		new query[150];
	    format(query,sizeof(query),"UPDATE users SET password = '%q' WHERE userid = %i",User[playerid][Userpass],User[playerid][UserID]);
	    db_query(Database,query);
	}
	else
	{
	    MSG(playerid,GOLD,"[ERROR]:"GR" The password you have entered does not match with the first. Please retry.");
	}
	return 1;
}

CMD:makeadmin(playerid,params[])
{
	if(IsPlayerAdmin(playerid))
	{
	    new id, level, rank[MAX_PLAYER_NAME];
	    if(sscanf(params,"uis[24]",id,level,rank)) return MSG(playerid,GOLD,"SYNTAX:"GR" /makeadmin [playerid/partofname] [AdminLevel] [rankname]");
		User[id][Useradmin] = level;
		format(User[id][pAdminRank], 24, "%s", rank);
		if(level != 0) SFM(id,GRAD2,"SERVER: You are now a %s.", rank);
		else if(level == 0) MSG(id, GRAD2, "SERVER: You have been expelled from the staff team.");
	    new query[95];
	    format(query,sizeof(query),"UPDATE users SET admin = %i,adminrank = '%s' WHERE userid = %i",level,rank,User[id][UserID]);
	    db_query(Database,query);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	return 1;
}
stock ReturnMonthByName(monthprov[10])
{
	new id = -1;
	if(!strcmp("January",monthprov)) id = 1;
	else if(!strcmp("February",monthprov)) id = 2;
	else if(!strcmp("March",monthprov)) id = 3;
	else if(!strcmp("April",monthprov)) id = 4;
	else if(!strcmp("May",monthprov)) id = 5;
	else if(!strcmp("June",monthprov)) id = 6;
	else if(!strcmp("July",monthprov)) id = 7;
	else if(!strcmp("August",monthprov)) id = 8;
	else if(!strcmp("September",monthprov)) id = 9;
	else if(!strcmp("October",monthprov)) id = 10;
	else if(!strcmp("November",monthprov)) id = 11;
	else if(!strcmp("December",monthprov)) id = 12;
	return id;
}
CMD:removedonator(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new name[24];
		if(sscanf(params,"s[24]",name)) return MSG(playerid,GOLD,"SYNTAX:"GR" /removedonator [AccountName]");
		new query[124];
		format(query, sizeof query, "SELECT donator FROM users WHERE username = '%q' LIMIT 1", name);
		new DBResult:Result = db_query(Database, query);
		if(db_num_rows(Result))
		{
			format(query, sizeof query,"UPDATE users SET donator = NULL WHERE username = '%s'",name);
			db_query(Database, query);
			format(query,sizeof query,"ADMNCMD:"GR" You have revoked %s's donator package.",name);
			MSG(playerid,GOLD,query);
			foreach(Player,i)
			{
			    if(!strcmp(name,User[i][Username]))
			    {
			        MSG(i,GOLD,"ADMNCMD:"GR" Your donator package has been revoked.");
			        User[i][donator][0] = EOS;
			    }
			}
		}
		else MSG(playerid,GOLD,"ERROR:"GR" Specified account name does not exist in the database.");
		db_free_result(Result);
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:changedonator(playerid,params[])
{
	if(User[playerid][Useradmin] > 4)
	{
	    new name[MAX_PLAYER_NAME],date[20];
		if(sscanf(params,"s[24]s[20]", name, date)) return MSG(playerid,GOLD,"SYNTAX:"GR" /changedonator [FullAccountName] [Date (DD/MM/YYYY)]");
		format(large_string, sizeof large_string, "SELECT 1 FROM users WHERE username = '%q' LIMIT 1", name);
		new DBResult:Result = db_query(Database, large_string);
		if(db_num_rows(Result))
		{
			format(large_string,sizeof large_string,"UPDATE users SET donator = '%s' WHERE username = '%s'",date,name);
			db_query(Database, large_string);
			foreach(Player, i)
			{
			    if(!strcmp(name,User[i][Username]))
			    {
			        format(User[i][donator],20,"%s",date);
			    }
			}
		}
		else MSG(playerid,GOLD,"ERROR:"GR" Specified account name does not exist in the database.");
		db_free_result(Result);
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:makedonator(playerid,params[])
{
	if(User[playerid][Useradmin] > 4)
	{
		new name[24],expire[20];
		//if(sscanf(params,"s[24]s[10]",name,month)) return MSG(playerid,GOLD,"SYNTAX:"GR" /makedonator [AccountName] [Month]");
		if(sscanf(params,"s[24]s[24]",name, expire)) return MSG(playerid,GOLD,"SYNTAX:"GR" /makedonator [AccountName] [Day/Month/Year]");
		new query[124];
		//monthid = ReturnMonthByName(month);
		//if(monthid == -1) return MSG(playerid,GOLD,"ERROR:"GR" Invalid month specified.");
		format(query, sizeof query, "SELECT 1 FROM users WHERE username = '%q' LIMIT 1", name);
		new DBResult:Result = db_query(Database, query);
		//new dyear,dmonth,dday;
		//getdate(dyear,dmonth,dday);
		if(db_num_rows(Result))
		{
	 		/*
			new sum = dmonth+1;
  			new bool:applysum = true;
			if(sum > 12)
			{
			  	dyear += 1;
				switch(sum)
				{
					  case 13: dmonth = 1;
					  case 14: dmonth = 2;
					  case 15: dmonth = 3;
				}
				applysum = false;
			}
			if(applysum) format(expire,sizeof(expire),"%02d/%02d/%02d",dday,sum,dyear);
			else format(expire,sizeof(expire),"%02d/%02d/%02d",dday,dmonth,dyear);
			*/
		    foreach(Player,i)
		    {
		        if(!strcmp(name,User[i][Username]))
		        {
		            format(query,sizeof(query),"ADMNCMD:"GR" You have been given a Premium status until %s.",expire);
		            MSG(i,GOLD,query);
		            format(User[i][donator],20,"%s",expire);
		            break;
		        }
		    }
			format(query,sizeof(query),"ADMNCMD:"GR" You have given %s a Premium status until %s.",name,expire);
			MSG(playerid,GOLD,query);
			//format(donat,sizeof donat,"%s,%i,%i",month,dday,dyear);
			format(query,sizeof query,"UPDATE users SET donator = '%s' WHERE username = '%s'",expire,name);
			db_query(Database, query);
		}
		else
		{
		    MSG(playerid,GOLD,"ERROR:"GR" Specified account name does not exist in the database.");
		}
		db_free_result(Result);
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	
}
GetVehicleModelIDFromName(vname[])
{
	for(new i = 0; i < 211; i++)
	{
		if(strfind(aVehicleNames[i], vname, true) != -1)
		return i + 400;
	}
	return -1;
}
CMD:vspawn(playerid, params[]) return cmd_vs(playerid, params);
CMD:vs(playerid,params[])
{
	if(User[playerid][Useradmin] < 1) return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new veh[10],id, col1, col2,Float:x,Float:y,Float:z;
	if(sscanf(params,"s[10]ii",veh,col1,col2)) return MSG(playerid,GOLD,"[Syntax]:"GR" /vspawn [vehicle name] [color1] [color2]");
	if(col1 == -1) col1 = random(255);
	if(col2 == -1) col2 = random(255);
 	id = GetVehicleModelIDFromName(veh);
	if(id < 400 || id > 611) return MSG(playerid,WHITE, ""R"[ERROR]:"GR" Invalid vehicle.");
	GetPlayerPos(playerid,x,y,z);

	switch(IsPlayerInAnyVehicle(playerid))
	{
		case 1: GetXYInFrontOfPlayer(playerid, x, y, 8);
		default: GetXYInFrontOfPlayer(playerid, x, y, 5);
	}

	new vid = CreateVehicle(id,x,y,z,0,col1,col2,-1,0);
	AdminVeh[vid] = true;
	return 1;
}
CMD:destroyv(playerid,params[])
{
	if(User[playerid][Useradmin] == 0) 
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	new id;
	if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"[Syntax]:"GR" /destroyv [vehicleid]");
	if(AdminVeh[id])
	{
		MSG(playerid,WHITE,"[Info]: Vehicle destroyed.");
		DestroyVehicle(id);
		AdminVeh[id] = false;
	}
	else
	{
        MSG(playerid,GOLD,"[ERROR]:"GR" You either specified an invalid vehicle ID or a static vehicle.");
	}
	return 1;
}
CMD:spawnmoney(playerid,params[])
{
	if(User[playerid][Useradmin] >= 3)
	{
	    new id,amount;
		if(sscanf(params,"ii",id,amount)) return MSG(playerid,GOLD,"[Syntax]:"GR" /spawnmoney [playerid/partofname] [amount]");
		if(User[id][Logged] == false) return MSG(playerid,GOLD,"[ERROR]:"GR" Specified player is offline.");
		GiveMoney(id,amount);
		SFM(playerid,WHITE,""G"[Info]:"GR" You have spawned %s (ID:%i) $%i.",User[id][Username],id,amount);

		format(large_string, sizeof large_string, "STFCMD: %s gave %s $%d.", User[playerid][forumname], User[id][Username], amount);
		Staff(ADMIN, large_string);
		printf("[money] %s has spawned %s $%i.",User[playerid][Username],User[id][Username],amount);
	} else {
		return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
	}
	return 1;
}
CMD:createobject(playerid,params[])
{
	if(IsPlayerAdmin(playerid))
 	{
		new object,Float:posx,Float:posy,Float:posz,id;
	    sscanf(params,"i",object);
	    GetPlayerPos(playerid,posx,posy,posz);
	    id = CreateObject(object,posx,posy,posz,0,0,0);
	    SFM(playerid,-1,"CREATED the OBJECT ID: %i",id);
	} 
	else return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	return 1;
}
CMD:attacho(playerid,params[])
{
	if(IsPlayerAdmin(playerid))
 	{
		new object,Float:x,Float:y,Float:z;
		new Float:rx,Float:ry,Float:rz;
		sscanf(params,"iffffff",object,x,y,z,rx,ry,rz);
		AttachObjectToVehicle(object,GetPlayerVehicleID(playerid),x,y,z,rx,ry,rz);
		SFM(playerid,-1,"AttachObjectToVehicle(%d,%d,%f,%f,%f,%f,%f,%f)",object,GetPlayerVehicleID(playerid),x,y,z,rx,ry,rz);
	}
	else return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");

	return 1;
}

CMD:getobject(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");

	new
	    id,
		Float:x,
		Float:y,
		Float:z;
	sscanf(params,"i",id);
	GetPlayerPos(playerid,x,y,z);
	SetObjectPos(id,x,y,z);
	SFM(playerid,-1,"Got the OBJECT ID: %i",id);
	return 1;
}
CMD:destroy(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	new
	    id;
	sscanf(params,"i",id);
	DestroyObject(id);
	SFM(playerid,-1,"DESTROYED the OBJECT ID: %i",id);
	return 1;
}
CMD:edit(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	new
	    id;
	sscanf(params,"i",id);
	EditObject(playerid,id);
	SFM(playerid,-1,"EDITING the OBJECT ID: %i",id);
	return 1;
}
CMD:editdynamic(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return MSG(playerid, GOLD, "ERROR:"GR" This is an RCON command.");
	new
	    id;
	sscanf(params,"i",id);
	EditDynamicObject(playerid,id);
	SFM(playerid,-1,"EDITING the DYNAMIC OBJECT ID: %i",id);
	return 1;
}
CMD:forumname(playerid, params[])
{
	if(isnull(params))
		return MSG(playerid, GOLD, "SYNTAX:"GR" /forumname [forum name (maximum 24 characters)]");
	SFM(playerid, GOLD, "Info:"GR" Your forum name has been set to %s. (Type /forumname to change it again)", params);
	format(User[playerid][forumname], 24, "%s", params);

	format(large_string, 160, "UPDATE users SET forumname = '%s' WHERE userid = %d", params, User[playerid][UserID]);
	db_query(Database, large_string);
	return 1;
}
CMD:id(playerid,params[])
{
	if(User[playerid][Logged])
	{
	    new name[24],id = -1;
		sscanf(params,"s[24]",name);
		if(isnull(name))
			return MSG(playerid,GOLD,"SYNTAX:"GR" /id [playerid/partofname]");
		if(IsNumeric(name))
			id = strval(name);
		if(strlen(name) < 2 && id == -1)
		    return MSG(playerid,GOLD,"SYNTAX:"GR" You need to mention at least two characters.");
		new bool:found;
		foreach(Player,i)
		{
		    if(strfind(User[i][Username],name,true) != -1 || i == id)
		    {
				if(User[i][Logged])
				{
					if(!isnull(User[playerid][forumname]))
						SFM(playerid,GRAD2,"* Player Name: %s (ID:%d); Level: %d; Forum Name: %s; Roleplay Level: %s",User[i][Username],i,User[i][Level], User[i][forumname], User[i][RPL]);
					else SFM(playerid,GRAD2,"* Player Name: %s (ID:%d); Level: %d; Roleplay Level: %s",User[i][Username],i,User[i][Level], User[i][RPL]);
					found = true;
				}
			}
		}
		if(!found)
			return MSG(playerid, GOLD, "ERROR:"GR" No player matched the criteria.");

	}
	return 1;
}
// new bool:togglobal;
// CMD:togg(playerid, params[])
// {
// 	if(User[playerid][Useradmin] != 0)
// 	{
// 		if(togglobal == false)
// 		{
// 			togglobal = true;
// 			MSG(playerid, -1, "SERVER: Global OOC has been enabled.");
// 		}
// 		else
// 		{
// 			togglobal = false;
// 			MSG(playerid, -1, "SERVER: Global OOC has been disabled.");
// 		}
// 		return 1;
// 	}
// 	return 0;
// }
new bool:globalchat;
CMD:togooc(playerid, params[])
{
	if(User[playerid][Useradmin] != 0)
	{
		if(globalchat == true)
			globalchat = false;
		else globalchat = true;

		MSG(playerid, GOLD, "Info:"GR" Global OOC chat has been toggled.");
		return 1;
	}
	return MSG(playerid, GOLD, "ERROR:"GR" You don't have the required privilege to execute this command.");
}
CMD:g(playerid,params[])
{
	if(User[playerid][Logged])
	{
		if(globalchat == false && User[playerid][Useradmin] == 0)
			return MSG(playerid, GOLD, "ERROR:"GR" Global OOC chat is toggled.");
		new string[130];
		if(sscanf(params,"s[130]",string)) return MSG(playerid,GOLD,"SYNTAX:"GR" /g [global ooc]");
		printf("[%s][%s] [ooc] %s: %s",PasteDate(),PasteTime(),User[playerid][Username],string);
		if(strlen(string) <= 68)
		{
			if(User[playerid][Useradmin] != 0) format(string,sizeof(string),"(( [Global OOC] %s: %s ))",User[playerid][forumname],string);
			else format(string,sizeof(string),"(( [Global OOC] %s: %s ))",User[playerid][pUsername],string);
			SendClientMessageToAll(DIRTY_YELLOW, string);				
		}
		else
		{
				new texts[50];
				strmid(texts,string,68,129);
				strins(string, "-", 68, 1);
				strdel(string, 69, 129);
				if(User[playerid][Useradmin] != 0) format(string,sizeof(string),"(( [Global OOC] %s: %s...",User[playerid][forumname],string);
				else if(User[playerid][Useradmin] == 0) format(string,sizeof(string),"(( [Global OOC] %s: %s...",User[playerid][pUsername],string);
				SendClientMessageToAll(DIRTY_YELLOW, string);
				format(string,sizeof(string),"...%s ))",texts);
				SendClientMessageToAll(DIRTY_YELLOW, string);
			}
	}
	return 1;
}
new Ask[MAX_PLAYERS];
CMD:ask(playerid,params[])
{
	if(User[playerid][Logged])
	{
		if(Ask[playerid] > gettime())
			return SFM(playerid, GOLD, "Info:"GR" You need to wait %d seconds before using this command again.", Ask[playerid]-gettime());
		new string[130];
		if(sscanf(params,"s[130]",string)) return MSG(playerid,GOLD,"SYNTAX:"GR" /ask [question/answer]");
		Ask[playerid] = gettime()+8;
		printf("[%s][%s] [ask] %s: %s",PasteDate(),PasteTime(),User[playerid][Username],string);
		if(strlen(string) <= 68)
		{
			if(User[playerid][Useradmin] != 0) format(string,sizeof(string),"[Q/A] %s (ID: %d): %s",User[playerid][forumname], playerid,string);
			else 
			{
				if(User[playerid][donator])
				format(string,sizeof(string),"[Q/A] Premium Member %s (ID: %d): %s",User[playerid][pUsername], playerid,string);	
				else format(string,sizeof(string),"[Q/A] %s (ID: %d): %s",User[playerid][pUsername], playerid,string);
			}
			SendClientMessageToAll(BEIGE, string);				
		}
		else
		{
				new texts[50];
				strmid(texts,string,68,129);
				strins(string, "-", 68, 1);
				strdel(string, 69, 129);
				if(User[playerid][Useradmin] != 0) format(string,sizeof(string),"[Q/A] %s (ID: %d): %s...",User[playerid][forumname], playerid,string);
				else 
				{
					if(User[playerid][donator]) format(string,sizeof(string),"[Q/A] Premium Member %s (ID: %d): %s...",User[playerid][pUsername], playerid,string);
					else format(string,sizeof(string),"[Q/A] %s (ID: %d): %s...",User[playerid][pUsername], playerid,string);
				}
				SendClientMessageToAll(BEIGE, string);
				format(string,sizeof(string),"...%s",texts);
				SendClientMessageToAll(BEIGE, string);
			}
	}
	return 1;
}
CMD:b(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new string[130],
			record[130];
		if(sscanf(params,"s[130]",string)) return MSG(playerid,GOLD,"SYNTAX:"GR" /b [local ooc]");
		printf("[%s][%s] [ooc] %s: %s",PasteDate(),PasteTime(),User[playerid][Username],string);
		format(record,sizeof(record),"(( [Local OOC] %s (id:%d): %s ))",User[playerid][Username],playerid,string);
		new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, record);
		//print(record);
		record[0] = EOS;
        if(strlen(string) <= 68)
		{
			if(GetPVarInt(playerid, "aAdminDuty") == 1) format(string,sizeof(string),"(( [Local OOC] %s (ID:%d): %s ))"
			,User[playerid][forumname],playerid,string);
			else 
			{
				if(!isnull(User[playerid][donator]) && GetPVarInt(playerid, "p_DonatorTag") == 1)
					format(string,sizeof(string),""R"(( [Local OOC] %s (ID:%d): %s ))",User[playerid][pUsername],playerid,string);
				else format(string,sizeof(string),"(( [Local OOC] %s (ID:%d): %s ))",User[playerid][pUsername],playerid,string);
			}
			ProxDetector(20,playerid,string);					
		}
		else
		{
            	new texts[50];
            	strmid(texts,string,68,129);
                strins(string, "-", 68, 1);
                strdel(string, 69, 129);
                if(GetPVarInt(playerid, "aAdminDuty") == 1) format(string,sizeof(string),"(( [Local OOC] %s (ID:%d): %s...",User[playerid][forumname],playerid,string);
				else if(GetPVarInt(playerid, "aAdminDuty") == 0) 
				{
					if(!isnull(User[playerid][donator]) && GetPVarInt(playerid, "p_DonatorTag") == 1)
						format(string,sizeof(string),""R"(( [Local OOC] %s (ID:%d): %s...",User[playerid][pUsername],playerid,string);
					else 
						format(string,sizeof(string),"(( [Local OOC] %s (ID:%d): %s...",User[playerid][pUsername],playerid,string);
				}
                ProxDetector(20,playerid,string);
				if(!isnull(User[playerid][donator]) && GetPVarInt(playerid, "p_DonatorTag") == 1)
					format(string,sizeof(string),""R"...%s ))",texts);
                format(string,sizeof(string),"...%s ))",texts);
                ProxDetector(20,playerid,string);
        }

	}
	return 1;
}
CMD:premiumtag(playerid, params)
{
	if(User[playerid][Logged])
	{
		if(!isnull(User[playerid][donator]))
		{
			if(GetPVarInt(playerid, "p_DonatorTag") == 1)
			{
				RemoveTrait(playerid, "p_DonatorTag");
				MSG(playerid, GOLD, "Premium:"GR" You have disabled your premium tag.");
				UpdateDynamic3DTextLabelText(User[playerid][UserTag], SOLIDWHITE, sendernameEx(playerid));
			}
			else
			{
				UpdateTrait(playerid, "p_DonatorTag", 1, 9);
				MSG(playerid, GOLD, "Premium:"GR" You have enabled your premium tag.");
				UpdateDynamic3DTextLabelText(User[playerid][UserTag], GOLD, sendernameEx(playerid));
			}
			return 1;
		}
		else return MSG(playerid, GOLD, "Info:"GR" You don't have Premium status. Show your sportsmanship and help "SERVERNAME" grow by acquiring it.");
	}
	return 0;
}
CMD:p(playerid, params[]) return cmd_premium(playerid, params);
CMD:premium(playerid,params[])
{
	if(!isnull(User[playerid][donator]))
	{
		if(isnull(User[playerid][forumname])) return MSG(playerid, GOLD, "ERROR:"GR" Set up your (/forumname) before using this command.");
		new string[130];
		if(sscanf(params,"s[130]",string)) return MSG(playerid,GOLD,"SYNTAX:"GR" /(p)remium [premium chat]");
		printf("[%s][%s] [premium] %s: %s",PasteDate(),PasteTime(),User[playerid][forumname],string);
        if(strlen(string) <= 68)
		{
			format(string,sizeof(string),"[PRM] %s (ID:%d): %s", User[playerid][forumname], playerid,string);
            PremiumMessage(GOLD,string);
		}
		else
		{
            	new texts[50];
            	strmid(texts,string,68,129);
                //strins(string, "-", 68, 1);
                strdel(string, 69, 129);
                format(string,sizeof(string),"[PRM] %s (ID:%d): %s...", User[playerid][forumname], playerid,string);
                PremiumMessage(GOLD,string);
                format(string,sizeof(string),"...%s",texts);
                PremiumMessage(GOLD,string);
        }
       	return 1;
	}
	else return MSG(playerid, GOLD, "Info:"GR" You don't have Premium status. Show your sportsmanship and help "SERVERNAME" grow by acquiring it.");
}
CMD:chatstyle(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(!isnull(User[playerid][donator]))
		{
			new style = strval(params);
			if(!IsNumeric(params))
				return MSG(playerid, GOLD, "SYNTAX:"GR" /chatstyle [0-8]");
			if(style < 0 || style > 8)
				return MSG(playerid, GOLD, "SYNTAX:"GR" /chatstyle [0-8]");
			User[playerid][chatstyle] = style;
			new query[124];
			format(query, sizeof query, "UPDATE users SET chatstyle = %d WHERE userid = %d", User[playerid][UserID], style);
			db_query(Database, query);
			MSG(playerid, GOLD, "Info:"GR" Your chat style has been changed.");
			return 1;
		}
		else return MSG(playerid, GOLD, "Info:"GR" You don't have Premium status. Show your sportsmanship and help "SERVERNAME" grow by acquiring it.");
	}
	return 1;
}
CMD:fightstyle(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(!isnull(User[playerid][donator]))
		{
			new style = strval(params);
			if(!IsNumeric(params))
				return MSG(playerid, GOLD, "SYNTAX:"GR" /fightstyle [0-5]");
			switch(style)
			{
				case 0: style = 4;
				case 1: style = 5;
				case 2: style = 6;
				case 3: style = 7;
				case 4: style = 15;
				case 5: style = 16;
				default: return MSG(playerid, GOLD, "SYNTAX:"GR" /fightstyle [0-5]");
			}
			User[playerid][fightstyle] = style;
			new query[124];
			format(query, sizeof query, "UPDATE users SET fightstyle = %d WHERE userid = %d", User[playerid][UserID], style);
			db_query(Database, query);
			MSG(playerid, GOLD, "Info:"GR" Your fight style has been changed.");
			SetPlayerFightingStyle(playerid, style);
			return 1;
		}
		else return MSG(playerid, GOLD, "Info:"GR" You don't have Premium status. Show your sportsmanship and help "SERVERNAME" grow by acquiring it.");
	}
	return 1;
}
CMD:togb(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(!isnull(User[playerid][donator]))
		{
			if(GetPVarInt(playerid, "p_DonatorToggle") == 1)
			{
				DeletePVar(playerid, "p_DonatorToggle");
				
				MSG(playerid, GOLD, "Premium:"GR" You have disabled (/b); you will no longer see (/b) as long as this is active.");
			}
			else
			{
				SetPVarInt(playerid, "p_DonatorToggle", 1);
				MSG(playerid, GOLD, "Premium:"GR" You have enabled (/b); you will now see (/b).");				
			}
			return 1;
		}
		else return MSG(playerid, GOLD, "Info:"GR" You don't have Premium status. Show your sportsmanship and help "SERVERNAME" grow by acquiring it.");
	}
	return 0;
}

CMD:togpm(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(!isnull(User[playerid][donator]))
		{
			if(GetPVarInt(playerid, "p_DonatorTogglePM") == 1)
			{
				DeletePVar(playerid, "p_DonatorTogglePM");
				MSG(playerid, GOLD, "Premium:"GR" PMs enabled.");				
			}
			else
			{
				SetPVarInt(playerid, "p_DonatorTogglePM", 1);
				MSG(playerid, GOLD, "Premium:"GR" PMs disabled.");
			}
			return 1;
		}
		else return MSG(playerid, GOLD, "Info:"GR" You don't have Premium status. Show your sportsmanship and help "SERVERNAME" grow by acquiring it.");
	}
	return 0;
}
CMD:togpremium(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(!isnull(User[playerid][donator]))
		{
			if(GetPVarInt(playerid, "p_DonatorTogglePr") == 1)
			{
				DeletePVar(playerid, "p_DonatorTogglePr");
				MSG(playerid, GOLD, "Premium:"GR" You have disabled (/premium); you will no longer see (/premium) chat.");
			}
			else
			{
				SetPVarInt(playerid, "p_DonatorTogglePr", 1);
				MSG(playerid, GOLD, "Premium:"GR" You have enabled (/premium) chat.");				
			}
			return 1;
		}
		else return MSG(playerid, GOLD, "Info:"GR" You don't have Premium status. Show your sportsmanship and help "SERVERNAME" grow by acquiring it.");
	}
	return 0;
}
CMD:offlinepm(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new string[130], message[130], id[24];
		if(sscanf(params,"s[24]s[130]", id, message)) return MSG(playerid,GOLD,"SYNTAX:"GR" /offlinepm [FullAccount_Name] [message]");
		if(!strcmp(User[playerid][Username], id)) return MSG(playerid,GOLD,"ERROR:"GR" You cannot private message yourself.");
		//if(GetPVarInt(id, "p_DonatorTogglePM") == 1 && User[playerid][Useradmin] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Specified player toggled their PMs.");
		new userid = GetUserID(id);
		if(userid == 0) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player name specified.");
		printf("[%s][%s] [pm] %s's PM to %s %s",PasteDate(), PasteTime(), User[playerid][Username], id, message);
        if(strlen(message) <= 87)
		{
			format(string,sizeof(string),"(( Offline PM from %s: %s ))",User[playerid][pUsername], message);
			InsertOfflineMessage(userid,string);
			format(string,sizeof(string),"(( Offline PM to %s: %s ))",id, message);
			MSG(playerid,PMSent,string);
		}
		else
		{
				new part[87];
				strmid(part, message, 0, 86, 87);
				format(string, sizeof(string), "(( Offline PM from %s: %s...", User[playerid][pUsername],part);
				InsertOfflineMessage(userid, string);
				format(string,sizeof(string),"(( Offline 1PM to %s: %s...",id,part);
                MSG(playerid,PMSent,string);
				strmid(part,message, 86, 128, 44);
                format(string,sizeof(string),"...%s ))",part);
                InsertOfflineMessage(userid, string);
                format(string,sizeof(string),"...%s ))",part);
                MSG(playerid,PMSent,string);				               
        }

	}
	return 1;
}
#define KEVIN_PMFrom 0xDDA700FF
#define KEVIN_PMSent 0xc69600FF
CMD:pm(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new string[130], message[130], id;
		if(sscanf(params,"us[130]", id, message)) return MSG(playerid,GOLD,"SYNTAX:"GR" /pm [playerid/PartOfName] [message]");
		if(!IsPlayerConnected(id)) return MSG(playerid,GOLD,"ERROR:"GR" Invalid player specified.");
		if(id == playerid) return MSG(playerid,GOLD,"ERROR:"GR" You cannot private message yourself.");
		if(GetPVarInt(id, "p_DonatorTogglePM") == 1 && User[playerid][Useradmin] == 0) return MSG(playerid,GOLD,"ERROR:"GR" Specified player toggled their PMs.");
		printf("[%s][%s] [pm] %s's PM to %s %s",PasteDate(), PasteTime(), User[playerid][Username], User[id][Username], message);
        if(strlen(message) <= 87)
		{
			format(string,sizeof(string),"(( PM from %s (%i): %s ))",User[playerid][pUsername], playerid, message);
			MSG(id,KEVIN_PMFrom,string);
			format(string,sizeof(string),"(( PM to %s (%i): %s ))",User[id][pUsername], id, message);
			MSG(playerid,KEVIN_PMSent,string);
		}
		else
		{
				new part[87];
				strmid(part, message, 0, 86, 87);
				format(string, sizeof(string), "(( PM from %s (ID:%d): %s...", User[playerid][pUsername],playerid,part);
				MSG(id, KEVIN_PMFrom, string);
				format(string,sizeof(string),"(( PM to %s (ID:%i): %s...",User[id][pUsername],id,part);
                MSG(playerid,KEVIN_PMSent,string);
				// printf("[A] message: %s | part: %s",message,part);
				strmid(part,message, 86, 128, 44);
				// printf("[B] message: %s | part: %s",message,part);
                format(string,sizeof(string),"...%s ))",part);
                MSG(id,KEVIN_PMFrom,string);
                format(string,sizeof(string),"...%s ))",part);
                MSG(playerid,KEVIN_PMSent,string);				               
        }

	}
	return 1;
}
CMD:w(playerid,params[])
{
	if(User[playerid][Logged])
	{
		if(User[playerid][shapeshift] > 1) return MSG(playerid,GOLD,"ERROR:"GR" You cannot whisper in this form.");
	    new target,message[130];
	    if(sscanf(params,"us[130]", target, message)) return MSG(playerid,GOLD,"SYNTAX:"GR" /w [playerid/PartOfName] [message]");
	    if(target == playerid) return MSG(playerid,GOLD,"ERROR:"GR" You cannot whisper yourself.");
		if(!ProxDetectorS(2.5,playerid,target)) return MSG(playerid,GOLD,"ERROR:"GR" Specified player is out of range.");
		new string[124];
		format(string,sizeof string,"%s whispers: %s", sendernameEx(playerid), message);
		new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, string);
		print(string);
        if(strlen(message)<87)
		{
			format(string, sizeof(string), "%s whispers: %s", sendernameEx(playerid), message);
    		SendClientMessage(playerid, GREEN, string);
			SendClientMessage(target, GREEN, string);
			////////SendMoleMessage(playerid,string);
			foreach(Player, i)
			{
				if(CanHear(i, playerid))
					SendClientMessage(i, GRAD3, string);
			}
		}
		else
		{
			new part[87];
			strmid(part,message,0,86,87);
			format(string, sizeof(string), "%s whispers: %s...", sendernameEx(playerid), part);
			SendClientMessage(playerid, GREEN, string);
			SendClientMessage(target, GREEN, string);
			foreach(Player, i)
			{
				if(CanHear(i, playerid))
					SendClientMessage(i, GRAD3, string);
			}
			//////SendMoleMessage(playerid,string);
			strmid(part,message,86,128,44);
			format(string, sizeof(string), "%s whispers: ...%s", sendernameEx(playerid), part);
			SendClientMessage(playerid, GREEN, string);
			SendClientMessage(target, GREEN, string);
			foreach(Player, i)
			{
				if(CanHear(i, playerid))
					SendClientMessage(i, GRAD3, string);
			}
			//////SendMoleMessage(playerid,string);
		}
	}
	return 1;
}

public ProxDetectorS(Float:radi, playerid, targetid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(targetid, x, y, z);
	if (IsPlayerInRangeOfPoint(playerid, radi, x, y, z) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
	    printf("%s is in range of %s (max range given: %f)",User[playerid][Username],User[targetid][Username],radi);
		return 1;
	}
	return 0;
}
CMD:quiet(playerid,params[]) return cmd_low(playerid,params);
CMD:qu(playerid,params[]) return cmd_low(playerid,params);
CMD:low(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new string[130];
		if(sscanf(params,"s[130]",string)) return MSG(playerid,GOLD,"SYNTAX:"GR" /(qu)iet [local chat]");
		new record[130];
		format(record, sizeof record,"%s says [quiet]: %s", sendernameEx(playerid), params);
		new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, record);
		//print(record);
		if(strlen(params)<87)
		{
		    format(string, sizeof(string), "%s says [quiet]: %s", sendernameEx(playerid), params);
			ProxDetector(2.0, playerid, string);
			//////SendMoleMessage(playerid,string);
			foreach(Player, i)
			{
				if(CanHear(i, playerid))
				{
					if(User[playerid][shapeshift] == 0)
					{
						SendClientMessage(i, GRAD3, string);
					}
					else
					{
						if(User[playerid][Userrace] == User[i][Userrace])
						{
							if(User[playerid][Userrace] == 1)
							{
								if(User[playerid][shapeshift] == User[i][shapeshift])
									SendClientMessage(i, HEIGHTENED, string);
							}
							else SendClientMessage(i, HEIGHTENED, string);
						}	
					}
				}
			}
		}
		else
		{
			new part[87];
			strmid(part,params,0,86,87);
			format(string, sizeof(string), "%s says [quiet]: %s...", sendernameEx(playerid), part);
			ProxDetector(2.0, playerid, string);
			foreach(Player, i)
			{
				if(CanHear(i, playerid))
				{
					if(User[playerid][shapeshift] == 0)
					{
						SendClientMessage(i, GRAD3, string);
					}
					else
					{
						if(User[playerid][Userrace] == User[i][Userrace])
						{
							if(User[playerid][Userrace] == 1)
							{
								if(User[playerid][shapeshift] == User[i][shapeshift])
									SendClientMessage(i, HEIGHTENED, string);
							}
							else SendClientMessage(i, HEIGHTENED, string);
							
						}	
					}
				}
			}
			strmid(part,params,86,128,44);
		    format(string, sizeof(string), "%s says [quiet]: ...%s", sendernameEx(playerid), part);
			foreach(Player, i)
			{
				if(CanHear(i, playerid))
				{
					if(User[playerid][shapeshift] == 0)
					{
						SendClientMessage(i, GRAD3, string);
					}
					else
					{
						if(User[playerid][Userrace] == User[i][Userrace])
						{
							if(User[playerid][Userrace] == 1)
							{
								if(User[playerid][shapeshift] == User[i][shapeshift])
									SendClientMessage(i, HEIGHTENED, string);
							}
							else SendClientMessage(i, HEIGHTENED, string);
							
						}	
					}
				}
			}
			ProxDetector(5.0, playerid, string);
			//////SendMoleMessage(playerid,string);
		}
	}
	return 1;
}

CMD:s(playerid,params[]) 
{
	if(User[playerid][Logged])
	{
		new string[130];
		if(sscanf(params,"s[130]",string)) return MSG(playerid,GOLD,"SYNTAX:"GR" /(s)hout [local chat]");
		new record[130];
		format(record, sizeof record,"%s shouts: %s", sendernameEx(playerid), string);
		new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, record);
		////print(record);
		record[0] = EOS;
		new shout[16];
		shout = "shouts";
		format(record, sizeof record, "%s", string);
		if(User[playerid][shapeshift] > 1 && User[playerid][shapeshift] < 5) shout = "barks loudly";
		foreach(Houses,i)
		{
				new bool:check;
				if(!H[i][hexist]) continue; // if it doesnt exist then skip it
				if(User[playerid][HouseIN] != i) check = true;
				else check = false;
				if(check == true && !IsPlayerInRangeOfPoint(playerid,2,H[i][hx],H[i][hy],H[i][hz]))
				{
				    if(check == true && !IsPlayerInRangeOfPoint(playerid,2,H[i][hxi],H[i][hyi],H[i][hzi])) continue;
				    continue;
				}
		        if(strlen(string) <= 68)
				{
					format(string,sizeof(string),"[door] %s %s: %s",sendernameEx(playerid),shout,string);
					foreach(Player,p)
					{
						if(p == playerid) continue;
						if(User[playerid][HouseIN] == User[p][HouseIN]) continue;
						// message only players outside the property
						if(IsPlayerInRangeOfPoint(p,30.0,H[i][hx],H[i][hy],H[i][hz]) || IsPlayerInRangeOfPoint(p,30.0,H[i][hxi],H[i][hyi],H[i][hzi]))
						{
							if(User[p][pvw] == H[i][hvwi] || User[p][pvw] == H[i][hvw]) 
							{
								if(User[playerid][shapeshift] == 0) 
								{
									print("donkey dick 1");
									MSG(p,GRAD2,string);
								}
								else
								{
									print("donkey dick 2");
									if(User[playerid][Userrace] == User[p][Userrace])
										MSG(p,GRAD2,string);
								}
							}
						}
					}
				}
				else
				{
		            	new texts[50];
		            	strmid(texts,string,68,129);
		                strins(string, "-", 68, 1);
		                strdel(string, 69, 129);
		                format(string,sizeof(string),"[door] %s %s: %s",sendernameEx(playerid), shout,string);
						foreach(Player,p)
						{
							if(p == playerid) continue;
							if(User[playerid][HouseIN] == User[p][HouseIN]) continue;
							// message only players outside the property
							if(IsPlayerInRangeOfPoint(p,30.0,H[i][hx],H[i][hy],H[i][hz]) || IsPlayerInRangeOfPoint(p,30.0,H[i][hxi],H[i][hyi],H[i][hzi]))
							{
								if(User[p][pvw] == H[i][hvwi] || User[p][pvw] == H[i][hvw]) 
								{
									if(User[playerid][shapeshift] == 0) 
										MSG(p,GRAD2,string);
									else
									{
										if(User[playerid][Userrace] == User[i][Userrace])
											MSG(p,GRAD2,string);
									}
								}
							}
						}
		                format(string,sizeof(string),"[door] %s %s: ...%s ",sendernameEx(playerid), shout,texts);
						//if(User[playerid][shapeshift] > 1) ProxDetector(30.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 0, 1);
						//else ProxDetector(30.0, playerid, string);
						foreach(Player,p)
						{
							if(p == playerid) continue;
							if(User[playerid][HouseIN] == User[p][HouseIN]) continue;
							// message only players outside the property
							if(IsPlayerInRangeOfPoint(p,30.0,H[i][hx],H[i][hy],H[i][hz]) || IsPlayerInRangeOfPoint(p,30.0,H[i][hxi],H[i][hyi],H[i][hzi]))
							{
								if(User[p][pvw] == H[i][hvwi] || User[p][pvw] == H[i][hvw]) 
								{
									if(User[playerid][shapeshift] == 0) 
										MSG(p,GRAD2,string);
									else
									{
										if(User[playerid][Userrace] == User[i][Userrace])
											MSG(p,GRAD2,string);
									}
								}
							}
						}
		        }
                //return 1;
		}
		format(string, sizeof string, "%s", record);
        if(strlen(string) <= 68)
		{
			format(string,sizeof(string),"%s %s: %s",sendernameEx(playerid),shout,string);
			if(User[playerid][shapeshift] > 1)
				ProxDetector(30.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 0, 1);
			else ProxDetector(30.0, playerid, string);
		}
		else
		{
            	new texts[50];
            	strmid(texts,string,68,129);
                strins(string, "-", 68, 1);
                strdel(string, 69, 129);
                format(string,sizeof(string),"%s %s: %s",sendernameEx(playerid),shout,string);
				if(User[playerid][shapeshift] > 1)
					ProxDetector(30.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 0, 1);
				else ProxDetector(30.0, playerid, string);
				format(string,sizeof(string),"%s %s: ...%s ",sendernameEx(playerid),shout,texts);
				if(User[playerid][shapeshift] > 1)
					ProxDetector(30.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 0, 1);
				else ProxDetector(30.0, playerid, string);
        }
	}
	return 1;
}

CMD:m(playerid,params[]) 
{
	if(User[playerid][Logged])
	{
		new v = GetPlayerVehicleID(playerid);
		if(!v) return MSG(playerid,GOLD,"ERROR:"GR" You are not in a vehicle.");
		if(User[playerid][shapeshift] > 1) return MSG(playerid,GOLD, "ERROR:"GR" You cannot use megaphone in this form."); 
		if(F[V[v][vfac]][ftype] != PD) return MSG(playerid,GOLD,"ERROR:"GR" This vehicle doesn't have a megaphone.");
		new string[130];
		if(sscanf(params,"s[130]",string)) return MSG(playerid,GOLD,"SYNTAX:"GR" /(m)egaphone [message]");
		new record[130];
		format(record, sizeof record,"[Megaphone] %s: %s", sendernameEx(playerid), string);
		new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, record);
		//print(record);
		record[0] = EOS;
        if(strlen(string) <= 68)
		{
			format(string,sizeof(string),"[Megaphone] %s: %s",sendernameEx(playerid),string);
			ProxDetector(40,playerid,string,YELLOW,YELLOW,YELLOW,YELLOW,YELLOW);
		}
		else
		{
            	new texts[50];
            	strmid(texts,string,68,129);
                strins(string, "-", 68, 1);
                strdel(string, 69, 129);
                format(string,sizeof(string),"[Megaphone] %s: %s...",sendernameEx(playerid),string);
                ProxDetector(90,playerid,string,YELLOW,YELLOW,YELLOW,YELLOW,YELLOW);
                format(string,sizeof(string),"[Megaphone] %s: ...%s",sendernameEx(playerid),texts);
                ProxDetector(90,playerid,string,YELLOW,YELLOW,YELLOW,YELLOW,YELLOW);
        }
	}
	return 1;
}
stock GetHighestIndex(playerid)
{
	if(User[playerid][Logged])
	{
		new query[124];
		format(query, sizeof query, "SELECT slot FROM roleplay WHERE userid = %d ORDER BY slot DESC", User[playerid][UserID]);
		new DBResult: Result = db_query(Database, query);
		if(!db_num_rows(Result)) query[0] = 0;
		query[0] = db_get_field_assoc_int(Result, "slot")+1;
		return query[0];
	}
	return 0;
}

stock RecordRP(playerid, rstring[])
{
	if(User[playerid][Logged])
	{
		new roleplay_string[512];
		new index = GetHighestIndex(playerid);	
		format(roleplay_string, 512, "INSERT INTO roleplay (userid, slot, desc, date, time) VALUES (%d, %d, '%q', '%s', '%s')", User[playerid][UserID], index, rstring, PasteDate(), PasteTime());
		db_query(Database, roleplay_string);
	}
}
stock GetUserID(playername[])
{
	new query[124];
	format(query, sizeof query,"SELECT userid FROM users WHERE username = '%s'", playername);
	new DBResult: Result = db_query(Database, query);
	new user = db_get_field_assoc_int(Result, "userid");
	db_free_result(Result);
	return user;
}
CMD:rplogs(playerid,params[])
{
	if(User[playerid][Logged])
	{
		new id = -1;
		if(!isnull(params) && User[playerid][Useradmin] != 0) 
			id = strval(params);
		printf("id %d", id);
		if(isnull(params))
		{
			id = playerid;
			format(params, 24, "%d", id);
		}
		if(User[id][Logged] && IsNumeric(params))
		{
			id = User[id][UserID];
			printf("id %d logged", id);
			format(large_string, 256, "SELECT * FROM roleplay WHERE userid = %d ORDER BY slot DESC", id);
			print("LOGGED");
		}
		else 
		{
			if(User[playerid][Useradmin] < 1)
				return MSG(playerid, -1, "An error has occurred. Please notify administration about this issue with a screenshot.");
			id = GetUserID(params);
			printf("id %d ; params %s", id, params);
			if(id == 0) return MSG(playerid, GOLD, "ERROR:"GR" Invalid player name specified. (/rplogs [FullAccount_Name]).");
			format(large_string, 256, "SELECT * FROM roleplay WHERE userid = %d ORDER BY slot DESC", id);
		}
		printf("id before check", id);
		if(id == -1) id = playerid;
		printf("id after c heck %d", id);
		new DBResult: Result = db_query(Database, large_string);
		large_string[0] = EOS;
		new row = 0;
		new last_index;
		do
		{
			if(db_num_rows(Result))
			{
				row++;
				printf("row %d", row);
				if(row <= 30)
				{
					new description[256];
					new rdate[11];
					new rtime[11];
					new index = db_get_field_assoc_int(Result, "slot");
					db_get_field_assoc(Result, "desc", description, sizeof description);
					db_get_field_assoc(Result, "date", rdate, sizeof rdate);
					db_get_field_assoc(Result, "time", rtime, sizeof rtime);
					format(large_string, sizeof large_string, "%s(%d) [%s][%s] %s"D"\n", large_string, index, rdate, rtime, description);
					last_index = index;
				}
				else
				{
					SetPVarInt(playerid,"LastRow", last_index);
					break;
				}
			}
			else break;
		}
		while(db_next_row(Result));
		db_free_result(Result);
		if(row == 0) return MSG(playerid, GOLD, "Info:"GR" There are no roleplay logs to display.");
		if(row <= 30) Dialog_Show(playerid,dRoleplayLogs,DIALOG_STYLE_MSGBOX, "Roleplay Logs", large_string,"Next", "Close");
		else Dialog_Show(playerid,dRoleplayLogs,DIALOG_STYLE_MSGBOX,"Roleplay Logs", large_string,"Next","Close");
		SetPVarInt(playerid, "RPLogger", id);
		return 1;
	}
	return 0;
}
Dialog:dRoleplayLogs(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = GetPVarInt(playerid, "RPLogger");
		new last_index = GetPVarInt(playerid, "LastRow");
		format(large_string, 256, "SELECT * FROM roleplay WHERE userid = %d ORDER BY slot DESC", id);
		new DBResult: Result = db_query(Database, large_string);
		large_string[0] = EOS;
		new row;
		do
		{
			if(db_num_rows(Result))
			{
				new description[256];
				new rdate[11];
				new rtime[11];
				new index = db_get_field_assoc_int(Result, "slot");
				printf("INDEX %d LAST INDEX %d", index, last_index);
				if(index <= last_index)
				{ 
					row++;
					if(row <= 30)
					{
						print("LOAD");
						db_get_field_assoc(Result, "desc", description, sizeof description);
						db_get_field_assoc(Result, "date", rdate, sizeof rdate);
						db_get_field_assoc(Result, "time", rtime, sizeof rtime);
						format(large_string, sizeof large_string, "%s(%d) [%s][%s] %s"D"\n", large_string, index, rdate, rtime, description);
						last_index = index;
					}
				}
			}
			else break;
		}
		while(db_next_row(Result));
		db_free_result(Result);
		Dialog_Show(playerid,dRoleplayLogs,DIALOG_STYLE_MSGBOX,User[playerid][pUsername], large_string,"Next", "Close");
		SetPVarInt(playerid, "LastRow", last_index);
	}
	return 1;
}
CMD:showlog(playerid, params[])
{
	if(User[playerid][Logged])
	{
		if(isnull(params))
		{
			return MSG(playerid, GOLD, "SYNTAX:"GR" /showlog [logid (type /rplogs to retrieve it)]");
		}
		new index = strval(params);
		
		format(large_string, 124,"SELECT * FROM roleplay WHERE userid = %d AND slot = %d", User[playerid][UserID], index);
		new DBResult: Result = db_query(Database, large_string);

		if(db_num_rows(Result))
		{
				new description[256];
				new rdate[11];
				new rtime[11];
				db_get_field_assoc(Result, "desc", description, sizeof description);
				db_get_field_assoc(Result, "date", rdate, sizeof rdate);
				db_get_field_assoc(Result, "time", rtime, sizeof rtime);
				format(large_string, sizeof large_string, "(( (%d) [%s][%s] %s ))", index, rdate, rtime, description);
				AutoMSG(playerid, large_string, 0);
		}
		else
			return MSG(playerid, GOLD, "ERROR:"GR" Specified roleplay log could not be found in the database.");
		
		return 1;
	}
	return 0;
}
stock PlayerActionMessage(playerid,message[], hide = 0)
{
    new string[256];
	if(hide == 1) format(string, sizeof string, "* [S] %s %s", sendernameEx(playerid), message);
	else format(string, sizeof string, "* %s %s", sendernameEx(playerid), message);
	new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
	foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, string);
	RecordRP(playerid, string);
	if(strlen(message)<87)
	{
		format(string, sizeof(string), "* %s %s", sendernameEx(playerid), message);
		if(hide == 0) ProxDetector(30.0, playerid, string, RP,RP,RP,RP,RP);
		else MSG(playerid, cRP, string);
		return 1;
   	}
	else
	{
		new part[87];
		strmid(part,message,0,86,87);
		format(string, sizeof(string), "* %s %s...", sendernameEx(playerid), part);
		if(hide == 0) ProxDetector(30.0, playerid, string, RP,RP,RP,RP,RP);
		else MSG(playerid, cRP, string);
		strmid(part,message,86,148,64);
		format(string, sizeof(string), "...%s", part);
		if(hide == 0) ProxDetector(30.0, playerid, string, RP,RP,RP,RP,RP);
		else MSG(playerid, cRP, string);
		return 1;
	}
}
stock AutoMSG(playerid,message[], logit = 1)
{
    new string[125];
	// new backup[125];
	// strcat(string, backup);
	if(strlen(message)<124)
	{
		format(string, sizeof(string), "%s", message);
		ProxDetector(30.0, playerid, string, cRP,cRP,cRP,cRP,cRP);
   	}
	else
	{
		new part[87];
		strmid(part,message,0,86,87);
		format(string, sizeof(string), "* %s...", part);
		ProxDetector(30.0, playerid, string, cRP,cRP,cRP,cRP,cRP);
		strmid(part,message,86,148,64);
		format(string, sizeof(string), "...%s", part);
		ProxDetector(30.0, playerid, string, cRP,cRP,cRP,cRP,cRP);
	}
	new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
	if(logit == 1) 
	{
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, message);
		RecordRP(playerid, message);
	}
	return 1;
}
stock PlayerActionMessageDark(playerid,message[])
{
    new string[128];
	format(string, sizeof string, "* %s %s", sendernameEx(playerid), message);
	new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
	foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, string);
	RecordRP(playerid, string);
	print(string);
	if(strlen(message)<87)
	{
		format(string, sizeof(string), "* %s (( %s ))", message, sendernameEx(playerid));
		ProxDetector(30.0, playerid, string, cRP,cRP,cRP,cRP,cRP);
		return 1;
   	}
	else
	{
		new part[87];
		strmid(part,message,0,86,87);
		format(string, sizeof(string), "* %s...",  part);
		ProxDetector(30.0, playerid, string, cRP,cRP,cRP,cRP,cRP);
		strmid(part,message,86,148,64);
		format(string, sizeof(string), "...%s (( %s ))", part, sendernameEx(playerid));
		ProxDetector(30.0, playerid, string, cRP,cRP,cRP,cRP,cRP);
		return 1;
	}
}

stock PlayerActionMessageBubble(playerid,message[], log = 0)
{
    new string[144];
	format(string, sizeof string, "> * %s %s", sendernameEx(playerid), message);
	new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
	if(log == 1)
	{
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, string);
		RecordRP(playerid, string);
	}
	//print(string);
    format(string, sizeof(string), "> * %s %s", sendernameEx(playerid), message);
    SetPlayerChatBubble(playerid, string, RP, 30.0, strlen(string)*100);
	if(strlen(message)<87)
	{
		format(string, sizeof(string), "> * %s %s", sendernameEx(playerid), message);
		SendClientMessage(playerid, RP, string);
		return 1;
   	}
	else
	{
		new part[87];
		strmid(part,message,0,86,87);
		format(string, sizeof(string), "> * %s %s...", sendernameEx(playerid), part);
		SendClientMessage(playerid, RP, string);
		strmid(part,message,86,148,64);
		format(string, sizeof(string), "...%s", part);
		SendClientMessage(playerid, RP, string);
		return 1;
	}
}
public PlayerPlayerActionMessage(playerid,targetid,message[])//This is for messages like "Blah has opened the door for Steve" i to. . .
{
	new string[128];
	format(string, sizeof string, "> * %s %s %s.", sendernameEx(playerid), message, sendernameEx(playerid));
	new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
	foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, string);	
	RecordRP(playerid, string);
	//print(string);
	format(string, sizeof(string), "> * %s %s %s.", sendernameEx(playerid), message,User[targetid][Username]);
	SetPlayerChatBubble(playerid, string, RP, 30.0, strlen(string)*100);
	SendClientMessage(playerid, RP, string);
	return 1;
}
CMD:do(playerid, params[])
{
    if(User[playerid][Logged])
    {
		if(isnull(params))
		{
			SendClientMessage(playerid,GOLD, "SYNTAX:"GR" /do [action]");
			return 1;
		}
		new string[256];
		format(string, sizeof string,"* %s (( %s ))", params, sendernameEx(playerid));
		new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, string);	
		RecordRP(playerid, string);		
		//print(string);
		if(strlen(params)<87)
		{
			format(string, sizeof(string), "* %s (( %s ))",params,sendernameEx(playerid));
			ProxDetector(20.0, playerid, string,RP,RP,RP,RP,RP);
   		}
		else
		{
			new part[87];
			strmid(part,params,0,86,87);
			format(string, sizeof(string), "* %s...",part);
			ProxDetector(20.0, playerid, string,RP,RP,RP,RP,RP);
			strmid(part,params,86,128,44);
			format(string, sizeof(string), "* ...%s (( %s ))",part,sendernameEx(playerid));
			ProxDetector(20.0, playerid, string,RP,RP,RP,RP,RP);
		}
	}
	return 1;
}
CMD:sdo(playerid, params[])
{
    if(User[playerid][Logged])
    {
		if(isnull(params))
		{
			SendClientMessage(playerid,GOLD, "SYNTAX:"GR" /do [action]");
			return 1;
		}
		new string[256];
		format(string, sizeof string,"[S] * %s (( %s ))", params, sendernameEx(playerid));
		new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x, y, z);	
		foreach(Player, i) if(User[i][xprecord] == 1 && IsPlayerInRangeOfPoint(i, 30, x, y, z)) RecordPlayer(i, string);	
		RecordRP(playerid, string);		
		//print(string);
		if(strlen(params)<87)
		{
			format(string, sizeof(string), "* %s (( %s ))",params,sendernameEx(playerid));
			MSG(playerid, cRP, string);
   		}
		else
		{
			new part[87];
			strmid(part,params,0,86,87);
			format(string, sizeof(string), "* %s...",part);
			MSG(playerid, cRP, string);
			strmid(part,params,86,128,44);
			format(string, sizeof(string), "* ...%s (( %s ))",part,sendernameEx(playerid));
			MSG(playerid, cRP, string);
		}
	}
	return 1;
}
CMD:me(playerid, params[])
{
	if(!User[playerid][Logged]) return 0;
	if(isnull(params)) return SendClientMessage(playerid,GOLD, "SYNTAX:"GR" /me [action]");
	PlayerActionMessage(playerid,params);
	return 1;
}
CMD:sme(playerid, params[])
{
	if(!User[playerid][Logged]) return 0;
	if(isnull(params)) return SendClientMessage(playerid,GOLD, "SYNTAX:"GR" /sme [action]");
	PlayerActionMessage(playerid,params, 1);
	return 1;
}
CMD:ame(playerid, params[])
{
    if(!User[playerid][Logged]) return 0;
	if(isnull(params)) return SendClientMessage(playerid,GOLD,"SYNTAX:"GR" /bme [action]");
	PlayerActionMessageBubble(playerid,params, 1);
	return 1;
}
CMD:bme(playerid,params[])
{
	if(User[playerid][Logged])
	{
	    new message[130],string[130];
	    if(sscanf(params,"s[130]",message)) return MSG(playerid,GOLD,"SYNTAX:"GR" /bme [action]");
	    format(string,sizeof(string),"> * %s %s",sendernameEx(playerid),message);
	    SetPlayerChatBubble(playerid,string,RP,25,10*1000);
		//RecordRP(playerid, string);
	}
	return 1;
}
// Stocks

stock Staff(color,string[]) // colored
{
	foreach(Player,i)
	{
	    if(User[i][Useradmin] != 0 && !IsStoryteller(i))
	    {
	        MSG(i,color,string);
	    }
	}
}
stock PremiumMessage(color,string[]) // colored
{
	foreach(Player,i)
	{
		if(GetPVarInt(i, "p_DonatorTogglePr") == 1) continue;
	    if(!isnull(User[i][donator]))
	    {
	        MSG(i,color,string);
	    }
	}
}
stock PasteDate(bool:ic_date = false)
{
	new year,month,day;
	getdate(year,month,day);
	if(ic_date == true) {
		year -= 17;
	}
	new sdate[15];
	format(sdate,sizeof sdate,"%02d/%02d/%d", day, month, year);
	return sdate;

}
stock PasteTime()
{
    //print("I have been CALLED!");
	new hour,minute,second,stime[9];
	gettime(hour,minute,second);
	format(stime,sizeof stime,"%02d:%02d:%02d", hour,minute,second);
	return stime;
}
stock PasteTimeEx(psec = 0)
{
    //print("I have been CALLED!");
	new stime[20];
	if(psec == 0)
		format(stime,sizeof stime,"%02d:%02d", GetSVarInt("IChour"),GetSVarInt("ICmin"));
	else format(stime,sizeof stime,"%02d:%02d:%02d", GetSVarInt("IChour"),GetSVarInt("ICmin"), GetSVarInt("ICsec"));
	return stime;
}
stock CopSkin(cskin)
{
	switch(cskin)
	{
		case 265..267: return 1;
		case 280..288: return 1;
		case 300,301,302: return 1;
		case 306..311: return 1;
		case 900.908: return 1;

	}
	return 0;
}
stock MedicSkin(cskin)
{
	switch(cskin)
	{
		case 274..279: return 1;
	}
	return 0;
}
stock MaleSkin(skinid)
{
	switch(skinid)
	{
	    case 1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, /*29,*/ 30, 32, 33,
		34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 66, 67, 68, 70, 71,
		72, 73, 78, 79, 80, 81, 82, 83, 84, 86, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
		109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 132, 133,
		134, 135, 136, 137, 142, 143, 144, 146, 147, 149, 153, 154, 155, 156, 158, 159, 160, 161,  162, 163, 164,
		165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
		200, 202, 203, 204, 206, 208, 209, 210, 212, 213, 217, 220, 221, 222, 223, 227, 228, 229, 230, 234, 235,
	 	236, 239,  240, 241, 242, 247, 248, 249, 250, 252, 253, 254, 255, 258, 259, 260, 261, 262, 264, 265, 266,
	  	267, 268, 269, 270, 271, 272, 273,274, 275, 276, 277, 278, 279, 280, 281, 282,283, 284, 285, 286, 287, 288,
	  	289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 310, 311, 20002, 20003, 20004, 20005,
		20006, 20007, 20009, 20010, 20011, 20012, 20016, 20017, 20018, 20019, 20020, 20021, 20023, 20024, 20025, 20029, 20030,
		20031, 20032, 20033, 20035, 20036, 20037, 20038, 20039, 20040, 20041, 20042, 20043: return 1;
	}
	return 0;
}
stock BusinessTill(businessid, amount)
{
	if(B[businessid][btype])
	{
		B[businessid][bsafe] += amount;
		new query[100];
		format(query,sizeof query,"UPDATE business SET safe = safe+%d WHERE bid = %d",amount,businessid);
		db_query(Database, query);
	}
	return 0;
}
stock GiveMoney(playerid, amount)
{
	if(User[playerid][Logged])
	{
		User[playerid][uMoney] += amount;
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, User[playerid][uMoney]);
	    new query[124];
	    format(query,sizeof(query),"UPDATE users SET money = %i WHERE userid = %i",User[playerid][uMoney],User[playerid][UserID]);
	    db_query(Database,query);
	}
	return 1;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x2, &Float:y2, Float:distance)
{
	new Float:a;

	GetPlayerPos(playerid, x2, y2, a);
	GetPlayerFacingAngle(playerid, a);

	if(GetPlayerVehicleID(playerid))
	{
		GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}

	x2 += (distance * floatsin(-a, degrees));
	y2 += (distance * floatcos(-a, degrees));
}


stock sendernameEx(playerid)
{
    new name[50];
	format(name, sizeof name,"%s",User[playerid][pUsername]);
	switch(User[playerid][shapeshift])
	{
		case 2: 
			format(name, sizeof name, "Crinos_Wolf_%04d", User[playerid][UserID]);
		case 3: 
			format(name, sizeof name, "Hispo_Wolf_%04d", User[playerid][UserID]);
		case 4: 
			format(name, sizeof name, "Lupus_Wolf_%04d", User[playerid][UserID]);
		case 5:
		{
			new form[MAX_PLAYER_NAME];
			GetPVarString(playerid, "pFightForm", form, MAX_PLAYER_NAME);
			format(name, sizeof name, "%s_%04d",form, User[playerid][UserID]);
		}
		case 6:
		{
			new form[MAX_PLAYER_NAME];
			GetPVarString(playerid, "pFlightForm", form, MAX_PLAYER_NAME);
			format(name, sizeof name, "%s_%04d",form, User[playerid][UserID]);			
		}
	}
	if(User[playerid][isMasked] == 1)
		format(name,sizeof name,"Masked %04d",User[playerid][UserID]);
	if(User[playerid][thousandface])
		GetPVarString(playerid, "MaskFaceName", name, MAX_PLAYER_NAME);
	if(GetPVarInt(playerid, "AssumeFormSkin") > 0)
		GetPVarString(playerid, "AssumeFormName", name, MAX_PLAYER_NAME);	
	return name;
}
stock NPCProxDetector(Float:radi, npc, string[],col1 = COLOR_FADE1,col2 = COLOR_FADE2,col3 = COLOR_FADE3,col4 = COLOR_FADE4,col5 = COLOR_FADE5)
{
	if(!isnull(NPC[npc][npc_name]))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
        oldposx = NPC[npc][npc_x];
        oldposy = NPC[npc][npc_y];
        oldposz = NPC[npc][npc_z];
		printf("[NPC%d] %s (VW: %d, INT: %d)", npc, string, NPC[npc][npc_vw], NPC[npc][npc_interior]);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(User[i][Logged])
			{
				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				{
					if(GetPlayerVirtualWorld(i) == NPC[npc][npc_vw])
					{
						SendClientMessage(i, col1, string);
					}
				}
				else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				{
                    if(GetPlayerVirtualWorld(i) == NPC[npc][npc_vw])
                    {
						SendClientMessage(i, col2, string);
					}
				}
				else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				{
					if(GetPlayerVirtualWorld(i) == NPC[npc][npc_vw])
					{
						SendClientMessage(i, col3, string);
					}
				}
				else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				{
					if(GetPlayerVirtualWorld(i) == NPC[npc][npc_vw])
					{
						SendClientMessage(i, col4, string);
					}
				}
				else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				{
                    if(GetPlayerVirtualWorld(i) == NPC[npc][npc_vw])
                    {
						SendClientMessage(i, col5, string);
					}
				}
			}
		}
	}
	return 1;
}
stock ProxDetector(Float:radi, playerid, string[],col1 = COLOR_FADE1,col2 = COLOR_FADE2,col3 = COLOR_FADE3,col4 = COLOR_FADE4,col5 = COLOR_FADE5,radio = 0,shape = 0)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
  		foreach(Player,i)
		{
				if(GetPVarInt(i, "p_DonatorToggle") == 1) continue;
		        if(radio == 1)
				{
		            if(playerid == i) continue;
		            if(User[i][faction] == User[playerid][faction]) continue;
				}
				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				{
					if(shape == 0)
					{
						if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
						{
							SendClientMessage(i, col1, string);
						}
					}
					else
					{
						if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && User[playerid][Userrace] == User[i][Userrace])
						{
							if(User[playerid][Userrace] == 1)
							{
								if(User[playerid][shapeshift] == User[i][shapeshift])
									SendClientMessage(i, col1, string);
							}
							else SendClientMessage(i, col1, string);
							
						}							
					}
				}
				else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				{
					if(shape == 0)
					{
						if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
						{
							SendClientMessage(i, col2, string);
						}
					}
					else
					{
						if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && User[playerid][Userrace] == User[i][Userrace])
						{
							if(User[playerid][Userrace] == 1)
							{
								if(User[playerid][shapeshift] == User[i][shapeshift])
									SendClientMessage(i, col2, string);
							}							
							else SendClientMessage(i, col2, string);
						}					
					}
				}
				else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				{
					if(shape == 0)
					{
						if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
						{
							SendClientMessage(i, col3, string);
						}
					}
					else
					{
						if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && User[playerid][Userrace] == User[i][Userrace])
						{
							if(User[playerid][Userrace] == 1)
							{
								if(User[playerid][shapeshift] == User[i][shapeshift])
									SendClientMessage(i, col3, string);
							}
							else SendClientMessage(i, col3, string);
						}							
					}
				}
				else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				{
					if(shape == 0)
					{
						if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
						{
							SendClientMessage(i, col4, string);
						}
					}
					else
					{
						if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && User[playerid][Userrace] == User[i][Userrace])
						{
							if(User[playerid][Userrace] == 1)
							{
								if(User[playerid][shapeshift] == User[i][shapeshift])
									SendClientMessage(i, col4, string);
							}
							else SendClientMessage(i, col4, string);
						}							
					}					

				}
				else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				{
					if(shape == 0)
					{
						if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
						{
							SendClientMessage(i, col5, string);
						}
					}
					else
					{
						if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && User[playerid][Userrace] == User[i][Userrace])
						{
							if(User[playerid][Userrace] == 1)
							{
								if(User[playerid][shapeshift] == User[i][shapeshift])
									SendClientMessage(i, col5, string);
							}
							else SendClientMessage(i, col5, string);
						}							
					}
				}
			}
	}
	return 1;
}
stock ProxDetectorPos(ppvw,Float:radi, Float:oldposx, Float:oldposy,Float:oldposz , string[],col1 = GRAD1,col2 = GRAD2,col3 = GRAD3,col4 = GRAD4,col5 = GRAD5)
{
		new Float:posx, Float:posy, Float:posz;
		//new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		//GetPlayerPos(playerid, oldposx, oldposy, oldposz);
  		foreach(Player,i)
		{
				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				{
					if(ppvw == GetPlayerVirtualWorld(i))
					{
						SendClientMessage(i, col1, string);
					}
				}
				else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				{
                    if(ppvw == GetPlayerVirtualWorld(i))
                    {
						SendClientMessage(i, col2, string);
					}
				}
				else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				{
					if(ppvw == GetPlayerVirtualWorld(i))
					{
						SendClientMessage(i, col3, string);
					}
				}
				else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				{
					if(ppvw == GetPlayerVirtualWorld(i))
					{
						SendClientMessage(i, col4, string);
					}
				}
				else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				{
                    if(ppvw == GetPlayerVirtualWorld(i))
                    {
						SendClientMessage(i, col5, string);
					}
				}
		}
		return 1;
}
stock sendername(playerid)
{
	new thename[MAX_PLAYER_NAME];
	strcat(thename, User[playerid][Username]);
	//GetPlayerName(playerid,thename,sizeof(thename));
	return thename;
}

stock IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
    return 1;
}

#define BYTES_PER_CELL 				4

stock SFM(playerid, color, form[], {Float, _}: ...) { 
    #pragma unused form 

    static 
        tmp[145] 
    ; 
    new 
        t1 = playerid, 
        t2 = color 
    ; 
    const 
        n4 = -4, 
        n16 = -16, 
        size = sizeof tmp 
    ; 
    #emit stack 28 
    #emit push.c size 
    #emit push.c tmp 
    #emit stack n4 
    #emit sysreq.c format 
    #emit stack n16 

    return SendClientMessage(t1, t2, tmp); 
}  

new Float:IntArray[146][4] = 
{
	
	{2003.12,1015.19,33.01,351.58},
	{770.8,-0.7,1000.73,22.86},
	{974.02,-9.59,1001.15,22.6},
	{961.93,-51.91,1001.12,95.54},
	{830.6,5.94,1004.18,125.81},
	{1037.83,0.4,1001.28,353.93},
	{1212.15,-28.54,1000.95,170.57},
	{1290.41,1.95,1001.02,179.94},
	{1412.15,-2.28,1000.92,114.66},
	{1527.05,-12.02,1002.1,350.0},
	{1523.51,-47.82,1002.27,262.7},
	{612.22,-123.9,997.99,266.57},
	{512.93,-11.69,1001.57,198.77},
	{418.47,-80.46,1001.8,343.24},
	{386.53,173.64,1008.38,63.74},
	{288.47,170.06,1007.18,22.05},
	{206.46,-137.71,1003.09,10.93},
	{-100.27,-22.94,1000.72,17.29},
	{-201.22,-43.25,1002.27,45.86},
	{-202.94,-6.7,1002.27,204.27},
	{-25.72,-187.82,1003.55,5.08},
	{454.99,-107.25,999.44,309.02},
	{372.56,-131.36,1001.49,354.23},
	{378.03,-190.52,1000.63,141.02},
	{315.24,-140.89,999.6,7.42},
	{225.03,-9.18,1002.22,85.53},
	{611.35,-77.56,998.0,320.93},
	{246.07,108.97,1003.22,0.29},
	{6.09,-28.9,1003.55,5.04},
	{773.73,-74.7,1000.65,5.23},
	{621.45,-23.73,1000.92,15.68},
	{445.6,-6.98,1000.73,172.21},
	{285.84,-39.02,1001.52,0.75},
	{204.12,-46.8,1001.8,357.58},
	{245.23,304.76,999.15,273.44},
	{290.62,309.06,999.15,89.92},
	{322.5,303.69,999.15,8.17},
	{-2041.23,178.4,28.85,156.22},
	{-1402.66,106.39,1032.27,105.14},
	{-1403.01,-250.45,1043.53,355.86},
	{1204.67,-13.54,1000.92,350.02},
	{2016.12,1017.15,996.88,88.01},
	{-741.85,493.0,1371.98,71.78},
	{2447.87,-1704.45,1013.51,314.53},
	{2527.02,-1679.21,1015.5,260.97},
	{-1129.89,1057.54,1346.41,274.53},
	{2496.05,-1695.17,1014.74,179.22},
	{366.02,-73.35,1001.51,292.01},
	{2233.94,1711.8,1011.63,184.39},
	{269.64,305.95,999.15,215.66},
	{414.3,-18.8,1001.8,41.43},
	{1.19,-3.24,999.43,87.57},
	{-30.99,-89.68,1003.55,359.84},
	{161.4,-94.24,1001.8,0.79},
	{-2638.82,1407.34,906.46,94.68},
	{1267.84,-776.96,1091.91,231.34},
	{2536.53,-1294.84,1044.13,254.95},
	{2350.16,-1181.07,1027.98,99.19},
	{-2158.67,642.09,1052.38,86.54},
	{419.89,2537.12,10.0,67.65},
	{256.9,-41.65,1002.02,85.88},
	{204.17,-165.77,1000.52,181.76},
	{1133.35,-7.85,1000.68,165.85},
	{-1420.43,1616.92,1052.53,159.13},
	{493.14,-24.26,1000.68,356.99},
	{1727.29,-1642.95,20.23,172.42},
	{-202.84,-24.03,1002.27,252.82},
	{2233.69,-1112.81,1050.88,8.65},
	{1211.25,1049.02,359.94,170.93},
	{2319.13,-1023.96,1050.21,167.4},
	{2261.1,-1137.88,1050.63,266.88},
	{-944.24,1886.15,5.01,179.85},
	{-26.19,-140.92,1003.55,2.91},
	{2217.28,-1150.53,1025.8,273.73},
	{1.55,23.32,1199.59,359.91},
	{681.62,-451.89,-25.62,166.17},
	{234.61,1187.82,1080.26,349.48},
	{225.57,1240.06,1082.14,96.29},
	{224.29,1289.19,1082.14,359.87},
	{239.28,1114.2,1080.99,270.27},
	{207.52,-109.74,1005.13,358.62},
	{295.14,1473.37,1080.26,352.95},
	{-1417.89,932.45,1041.53,0.7},
	{446.32,509.97,1001.42,330.57},
	{2306.38,-15.24,26.75,274.49},
	{2331.9,6.78,26.5,100.24},
	{663.06,-573.63,16.34,264.98},
	{-227.57,1401.55,27.77,269.3},
	{-688.15,942.08,13.63,177.66},
	{-1916.13,714.86,46.56,152.28},
	{818.77,-1102.87,25.79,91.14},
	{255.21,-59.68,1.57,1.46},
	{446.63,1397.74,1084.3,343.96},
	{227.39,1114.66,1081.0,267.46},
	{227.76,1114.38,1080.99,266.26},
	{261.12,1287.22,1080.26,178.91},
	{291.76,-80.13,1001.52,290.22},
	{449.02,-88.99,999.55,89.66},
	{-27.84,-26.67,1003.56,184.31},
	{2135.2,-2276.28,20.67,318.59},
	{306.2,307.82,1003.3,203.14},
	{24.38,1341.18,1084.38,8.33},
	{963.06,2159.76,1011.03,175.31},
	{2548.48,2823.74,10.82,270.6},
	{215.15,1874.06,13.14,177.55},
	{221.68,1142.5,1082.61,184.96},
	{2323.71,-1147.65,1050.71,206.54},
	{345.0,307.18,999.16,193.64},
	{411.97,-51.92,1001.9,173.34},
	{-1421.56,-663.83,1059.56,170.93},
	{773.89,-47.77,1000.59,10.72},
	{246.67,65.8,1003.64,7.96},
	{-1864.94,55.73,1055.53,85.85},
	{-262.18,1456.62,1084.37,82.46},
	{22.86,1404.92,1084.43,349.62},
	{140.37,1367.88,1083.86,349.24},
	{1494.86,1306.48,1093.3,196.07},
	{-1813.21,-58.01,1058.96,335.32},
	{-1401.07,1265.37,1039.87,178.65},
	{234.28,1065.23,1084.21,4.39},
	{-68.51,1353.85,1080.21,3.57},
	{-2240.1,136.97,1035.41,269.1},
	{297.14,-109.87,1001.52,20.23},
	{316.5,-167.63,999.59,10.3},
	{-285.25,1471.2,1084.38,85.65},
	{-26.83,-55.58,1003.55,3.95},
	{442.13,-52.48,999.72,177.94},
	{2182.2,1628.58,1043.87,224.86},
	{748.46,1438.24,1102.95,0.61},
	{2807.36,-1171.7,1025.57,193.71},
	{366.0,-9.43,1001.85,160.53},
	{2216.13,-1076.31,1050.48,86.43},
	{2268.52,1647.77,1084.23,99.73},
	{2236.7,-1078.95,1049.02,2.57},
	{-2031.12,-115.83,1035.17,190.19},
	{2365.11,-1133.08,1050.88,177.39},
	{1168.51,1360.11,10.93,196.59},
	{315.45,976.6,1960.85,359.64},
	{1893.07,1017.9,31.88,86.1},
	{501.96,-70.56,998.76,171.57},
	{-42.53,1408.23,1084.43,172.07},
	{2283.31,1139.31,1050.9,19.7},
	{84.92,1324.3,1083.86,159.56},
	{260.74,1238.23,1084.26,84.31},
	{-1658.17,1215.0,7.25,103.91},
	{-1961.63,295.24,35.47,264.49}
};

new IntArray2[146][1] = 
{
	{11},
	{5},
	{3},
	{3},
	{3},
	{3},
	{3},
	{18},
	{1},
	{3},
	{2},
	{3},
	{3},
	{3},
	{3},
	{3},
	{3},
	{3},
	{3},
	{17},
	{17},
	{5},
	{5},
	{17},
	{7},
	{5},
	{2},
	{10},
	{10},
	{7},
	{1},
	{1},
	{1},
	{1},
	{1},
	{3},
	{5},
	{1},
	{1},
	{7},
	{2},
	{10},
	{1},
	{2},
	{1},
	{10},
	{3},
	{10},
	{1},
	{2},
	{2},
	{2},
	{18},
	{18},
	{3},
	{5},
	{2},
	{5},
	{1},
	{10},
	{14},
	{14},
	{12},
	{14},
	{17},
	{18},
	{16},
	{5},
	{6},
	{9},
	{10},
	{17},
	{16},
	{15},
	{1},
	{1},
	{3},
	{2},
	{1},
	{5},
	{15},
	{15},
	{15},
	{12},
	{0},
	{0},
	{0},
	{18},
	{0},
	{0},
	{0},
	{0},
	{2},
	{5},
	{5},
	{4},
	{4},
	{4},
	{4},
	{0},
	{4},
	{10},
	{1},
	{0},
	{0},
	{4},
	{12},
	{6},
	{12},
	{4},
	{6},
	{6},
	{14},
	{4},
	{5},
	{5},
	{3},
	{14},
	{16},
	{6},
	{6},
	{6},
	{6},
	{6},
	{15},
	{6},
	{6},
	{2},
	{6},
	{8},
	{9},
	{1},
	{1},
	{2},
	{3},
	{8},
	{0},
	{9},
	{10},
	{11},
	{8},
	{11},
	{9},
	{9},
	{0},
	{0}
};

new IntName[146][] = 
{
	"Four Dragons Managerial Suite",
	"Ganton Gym",
	"Brothel",
	"Brothel2",
	"Inside Track Betting",
	"Blastin  Fools Records",
	"The Big Spread Ranch",
	"Warehouse1 ",
	"Warehouse2 ",
	"B Dup s Apartment",
	"B Dup s Crack Palace",
	"Wheel Arch Angels",
	"OG Loc s House",
	"Barber Shop",
	"Planning Department",
	"Las Venturas Police Department",
	"Pro-Laps",
	"Sex Shop",
	"Las Venturas Tattoo parlor",
	"Lost San Fierro Tattoo",
	"24/07/09 (version 1)",
	"Diner1 ",
	"Pizza Stack",
	"Rusty Brown s Donuts",
	"Ammu-nation",
	"Victim",
	"Loco Low Co",
	"San Fierro Police Department",
	"24/07/09 (version 2)",
	"Below The Belt Gym",
	"Transfenders",
	"World of Coq",
	"Ammu-nation (version 2)",
	"SubUrban",
	"Denise s Bedroom",
	"Helena s Barn",
	"Barbara s Love nest",
	"San Fierro Garage",
	"Oval Stadium",
	"8-Track Stadium",
	"The Pig Pen (strip",
	"Four Dragons",
	"Liberty City",
	"Ryder s house",
	"Sweet s House",
	"RC Battlefield",
	"The Johnson House",
	"Burger shot",
	"Caligula s Casino",
	"Katie s Lovenest",
	"Barber Shop2 (Reece s)",
	"Angel Pine Trailer",
	"24/07/09 (version 3)",
	"Zip",
	"The Pleasure Domes",
	"Madd Dogg s Mansion",
	"Big Smoke s Crack Palace",
	"Burning Desire Building",
	"Wu-Zi Mu s",
	"Abandoned AC tower",
	"Wardrobe/Changing room",
	"Didier Sachs",
	"Casino (Redsands West)",
	"Kickstart Stadium",
	"Club",
	"Atrium",
	"Los Santos Tattoo Parlor",
	"Safe House group1 ",
	"Safe House group2 ",
	"Safe House group3 ",
	"Safe House group4 ",
	"Sherman Dam",
	"24/07/09 (version 4)",
	"Fort Carson Entrance",
	"Jet Interior",
	"The Welcome Pump",
	"Burglary House X1",
	"Burglary House X2",
	"Burglary House X3",
	"Burglary House X4",
	"Binco",
	"4 Burglary houses",
	"Blood Bowl Stadium",
	"Budget Inn Motel Room",
	"Palamino Bank",
	"Palamino Diner",
	"Dillimore Gas Station",
	"Lil  Probe Inn",
	"Torreno s Ranch",
	"Zombotech - lobby area",
	"Crypt in LS cemetery",
	"Blueberry Liquor Store",
	"Pair of Burglary Houses",
	"Crack Den",
	"Burglary House X11",
	"Burglary House X12",
	"Ammu-nation (version 3)",
	"Jay s Diner",
	"24/07/09 (version 5)",
	"Warehouse3 ",
	"Michelle s Love Nest*",
	"Burglary House X14",
	"Sindacco Abatoir",
	"K.A.C.C. Military Fuels Depot",
	"Area69 ",
	"Burglary House X13",
	"Unused Safe House",
	"Millie s Bedroom",
	"Barber Shop",
	"Dirtbike Stadium",
	"Cobra Gym",
	"Los Santos Police Department",
	"Los Santos Airport",
	"Burglary House X15",
	"Burglary House X16",
	"Burglary House X17",
	"Bike School",
	"Francis International Airport",
	"Vice Stadium",
	"Burglary House X18",
	"Burglary House X19",
	"Zero s RC Shop",
	"Ammu-nation (version 4)",
	"Ammu-nation (version 5)",
	"Burglary House X20",
	"24/07/09 (version 6)",
	"Secret Valley Diner",
	"Rosenberg s Office in Caligulas",
	"Fanny Batter s Whore House",
	"Colonel Furhberger s",
	"Cluckin  Bell",
	"The Camel s Toe Safehouse",
	"Caligula s Roof",
	"Old Venturas Strip Casino",
	"Driving School",
	"Verdant Bluffs Safehouse",
	"Bike School",
	"Andromada",
	"Four Dragons  Janitor s Office",
	"Bar",
	"Burglary House X21",
	"Willowfield Safehouse",
	"Burglary House X22",
	"Burglary House X23",
	"Otto s Autos",
	"Wang Cars"
};

CMD:inter(playerid,params[])
{
	new id;
	if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /interior [id]");
	if(id < 146 && id >= 0)
	{
 		SetPlayerInterior(playerid, IntArray2[id][0]);
		SetPlayerPos(playerid, IntArray[id][0], IntArray[id][1], IntArray[id][2]);
		SetPlayerFacingAngle(playerid, IntArray[id][3]);
	}
	return 1;
}
CMD:interiorlist(playerid,params[])
{
	new id,string[50];
	if(sscanf(params,"i",id)) return MSG(playerid,GOLD,"SYNTAX:"GR" /interiorlist [startid]");
	if(id < 146 && id >= 0)
	{
		format(string, sizeof(string), "Int %d: %s", id, IntName[id]);
 		SendClientMessage(playerid, 0xFFFFFFAA, string);
		new intid = id+1;
		while(intid < id+10)
		{
		    if(intid < 146 && intid >= 0)
		    {
	    		format(string, sizeof(string), "Int %d: %s", intid, IntName[intid]);
		    	SendClientMessage(playerid, 0xFFFFFFAA, string);
		    }
		    intid += 1;
		}
	}
	return 1;
}

enum MainZone
{
    Zone_Name[28],
    Float:Zone_Area[6],
};

static const SanAndreasZones[][MainZone] = 
{
    {"The Big Ear",                 {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
    {"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
    {"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
    {"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
    {"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
    {"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
    {"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
    {"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
    {"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
    {"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
    {"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
    {"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
    {"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
    {"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
    {"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
    {"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
    {"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
    {"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
    {"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
    {"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
    {"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
    {"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
    {"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
    {"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
    {"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
    {"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
    {"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
    {"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
    {"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
    {"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
    {"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
    {"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
    {"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
    {"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
    {"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
    {"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
    {"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
    {"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
    {"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
    {"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
    {"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
    {"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
    {"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
    {"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
    {"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
    {"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
    {"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
    {"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
    {"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
    {"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
    {"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
    {"Downtown LS",                 {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
    {"Downtown LS",                 {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
    {"Downtown LS",                 {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
    {"Downtown LS",                 {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
    {"Downtown LS",                 {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
    {"Downtown LS",                 {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
    {"Downtown LS",                 {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
    {"Downtown LS",                 {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
    {"Downtown LS",                 {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
    {"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
    {"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
    {"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
    {"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
    {"East LS",                     {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
    {"East LS",                     {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
    {"East LS",                     {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
    {"East LS",                     {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
    {"East LS",                     {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
    {"East LS",                     {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
    {"East LS",                     {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
    {"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
    {"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
    {"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
    {"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
    {"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
    {"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
    {"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
    {"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
    {"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
    {"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
    {"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
    {"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
    {"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
    {"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
    {"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
    {"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
    {"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
    {"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
    {"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
    {"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
    {"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
    {"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
    {"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
    {"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
    {"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
    {"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
    {"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
    {"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
    {"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
    {"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
    {"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
    {"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
    {"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
    {"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
    {"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
    {"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
    {"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
    {"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
    {"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
    {"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
    {"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
    {"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
    {"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
    {"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
    {"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
    {"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
    {"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
    {"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
    {"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
    {"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
    {"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
    {"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
    {"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
    {"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
    {"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
    {"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
    {"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
    {"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
    {"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
    {"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
    {"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
    {"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
    {"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
    {"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
    {"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
    {"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
    {"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
    {"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
    {"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
    {"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
    {"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
    {"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
    {"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
    {"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
    {"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
    {"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
    {"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
    {"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
    {"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
    {"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
    {"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
    {"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
    {"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
    {"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
    {"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
    {"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
    {"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
    {"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
    {"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
    {"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
    {"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
    {"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
    {"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
    {"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
    {"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
    {"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
    {"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
    {"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
    {"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
    {"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
    {"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
    {"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
    {"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
    {"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
    {"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
    {"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
    {"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
    {"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
    {"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
    {"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
    {"LV Airport",                  {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
    {"LV Airport",                  {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
    {"LV Airport",                  {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
    {"LV Airport",                  {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
    {"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
    {"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
    {"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
    {"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
    {"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
    {"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
    {"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
    {"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
    {"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
    {"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
    {"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
    {"LS International",            {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
    {"LS International",            {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
    {"LS International",            {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
    {"LS International",            {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
    {"LS International",            {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
    {"LS International",            {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
    {"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
    {"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
    {"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
    {"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
    {"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
    {"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
    {"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
    {"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
    {"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
    {"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
    {"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
    {"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
    {"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
    {"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
    {"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
    {"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
    {"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
    {"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
    {"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
    {"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
    {"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
    {"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
    {"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
    {"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
    {"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
    {"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
    {"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
    {"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
    {"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
    {"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
    {"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
    {"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
    {"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
    {"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
    {"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
    {"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
    {"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
    {"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
    {"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
    {"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
    {"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
    {"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
    {"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
    {"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
    {"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
    {"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
    {"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
    {"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
    {"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
    {"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
    {"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
    {"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
    {"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
    {"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
    {"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
    {"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
    {"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
    {"Randolph Industrial",         {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
    {"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
    {"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
    {"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
    {"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
    {"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
    {"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
    {"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
    {"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
    {"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
    {"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
    {"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
    {"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
    {"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
    {"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
    {"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
    {"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
    {"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
    {"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
    {"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
    {"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
    {"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
    {"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
    {"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
    {"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
    {"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
    {"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
    {"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
    {"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
    {"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
    {"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
    {"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
    {"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
    {"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
    {"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
    {"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
    {"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
    {"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
    {"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
    {"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
    {"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
    {"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
    {"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
    {"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
    {"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
    {"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
    {"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
    {"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
    {"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
    {"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
    {"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
    {"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
    {"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
    {"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
    {"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
    {"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
    {"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
    {"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
    {"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
    {"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
    {"Four Dragons Casino",         {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
    {"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
    {"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
    {"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
    {"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
    {"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
    {"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
    {"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
    {"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
    {"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
    {"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
    {"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
    {"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
    {"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
    {"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
    {"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
    {"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
    {"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
    {"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
    {"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
    {"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
    {"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
    {"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
    {"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
    {"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
    {"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
    {"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
    {"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
    {"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
    {"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
    {"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
    {"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
    {"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
    {"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
    {"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
    {"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
    {"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
    {"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
    {"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
    {"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
    {"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
    {"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
    {"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
    {"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
    {"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
    {"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};
stock Get2DZone(Float:zx,Float:zy,Float:zz, zone[], len)
{
    #pragma unused zz
    for(new i = 0; i != sizeof(SanAndreasZones); i++ )
    {
        if(zx >= SanAndreasZones[i][Zone_Area][0] && zx <= SanAndreasZones[i][Zone_Area][3] && zy >= SanAndreasZones[i][Zone_Area][1] && zy <= SanAndreasZones[i][Zone_Area][4])
        {
            return format(zone, len, SanAndreasZones[i][Zone_Name], 0);
        }
    }
    return format(zone, len, "San Andreas");
}
